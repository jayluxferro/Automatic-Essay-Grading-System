digraph "CFG forcom.google.android.exoplayer2.audio.ResamplingAudioProcessor.queueInput(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:int) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.position():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.limit():int type: VIRTUAL \l0x0008: ARITH  (r4 I:int) = (r1 I:int A[D('limit' int)]) \- (r2 I:int A[D('position' int)]) \l0x000a: IGET  (r5 I:int) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.encoding int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-2147483648, 3, 1073741824] t:[0x0038, 0x0015, 0x003d] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0011: INVOKE  (r5 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: ARITH  (r3 I:int) = (r4 I:int A[D('size' int)]) * (2 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0019: INVOKE  (r5 I:int) = (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char] A[D('resampledSize' int)])  \-\> B:14:0x0040 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r5 I:java.nio.ByteBuffer) = (r3 I:int A[D('resampledSize' int)]) java.nio.ByteBuffer.allocateDirect(int):java.nio.ByteBuffer type: STATIC \l0x0023: INVOKE  (r6 I:java.nio.ByteOrder) =  java.nio.ByteOrder.nativeOrder():java.nio.ByteOrder type: STATIC \l0x0027: INVOKE  (r5 I:java.nio.ByteBuffer) = (r5 I:java.nio.ByteBuffer), (r6 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x002b: IPUT  \l  (r5 I:java.nio.ByteBuffer)\l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IGET  (r5 I:int) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.encoding int \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-2147483648, 3, 1073741824] t:[0x0060, 0x0046, 0x007c] \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0034: INVOKE  (r5 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: ARITH  (r5 I:int) = (r4 I:int A[D('size' int)]) \/ (3 int) \l0x003a: ARITH  (r3 I:int) = (r5 I:int) * (2 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: ARITH  (r3 I:int A[D('resampledSize' int)]) = (r4 I:int A[D('size' int)]) \/ (2 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0042: INVOKE  (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:24:0x0098 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x004b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004c: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x004f: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0051: INVOKE  (r6 I:byte) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r0 I:int A[D('i' int)])\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x0055: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0057: ARITH  (r6 I:int) = (r6 I:int) + (\-128 int) \l0x0059: CAST  (r6 I:byte) = (byte) (r6 I:int) \l0x005a: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x005d: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|0x0060: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|0x0061: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:24:0x0098 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0065: ARITH  (r6 I:int) = (r0 I:int A[D('i' int)]) + (1 int) \l0x0067: INVOKE  (r6 I:byte) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r6 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x006b: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x006e: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0070: ARITH  (r6 I:int) = (r0 I:int A[D('i' int)]) + (2 int) \l0x0072: INVOKE  (r6 I:byte) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r6 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x0076: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x0079: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (3 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x007c|0x007c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x007d|0x007d: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:24:0x0098 \l}"];
Node_23 [shape=record,label="{23\:\ 0x007f|0x007f: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x0081: ARITH  (r6 I:int) = (r0 I:int A[D('i' int)]) + (2 int) \l0x0083: INVOKE  (r6 I:byte) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r6 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x0087: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x008a: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x008c: ARITH  (r6 I:int) = (r0 I:int A[D('i' int)]) + (3 int) \l0x008e: INVOKE  (r6 I:byte) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r6 I:int)\l java.nio.ByteBuffer.get(int):byte type: VIRTUAL \l0x0092: INVOKE  (r5 I:java.nio.ByteBuffer), (r6 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x0095: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (4 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0098|0x0098: INVOKE  (r5 I:int) = \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.limit():int type: VIRTUAL \l0x009c: INVOKE  \l  (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r5 I:int)\l java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x009f: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x00a1: INVOKE  (r5 I:java.nio.ByteBuffer) java.nio.ByteBuffer.flip():java.nio.Buffer type: VIRTUAL \l0x00a4: IGET  (r5 I:java.nio.ByteBuffer) = \l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.buffer java.nio.ByteBuffer \l0x00a6: IPUT  \l  (r5 I:java.nio.ByteBuffer)\l  (r7 I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor)\l com.google.android.exoplayer2.audio.ResamplingAudioProcessor.outputBuffer java.nio.ByteBuffer \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a8|0x00a8: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.ResamplingAudioProcessor.queueInput((r7 'this' I:com.google.android.exoplayer2.audio.ResamplingAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r8 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x0038: r3 'resampledSize' int\l  0x003c\-0x003d: r3 'resampledSize' int\l  0x0047\-0x0060: r0 'i' int\l  0x0061\-0x007c: r0 'i' int\l  0x007d\-0x00c5: r0 'i' int\l  0x0008\-0x00c5: r1 'limit' int\l  0x0004\-0x00c5: r2 'position' int\l  0x003f\-0x00c5: r3 'resampledSize' int\l  0x000a\-0x00c5: r4 'size' int\l  ?\-0x00c5: r8 'inputBuffer' java.nio.ByteBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_12;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_15;
Node_9 -> Node_18;
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_12 -> Node_5;
Node_13 -> Node_5;
Node_14 -> Node_8;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_16;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_19;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_22;
Node_24 -> Node_25;
}

