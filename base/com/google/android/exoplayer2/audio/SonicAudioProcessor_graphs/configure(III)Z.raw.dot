digraph "CFG forcom.google.android.exoplayer2.audio.SonicAudioProcessor.configure(III)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException) =  com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException \l0x0005: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException)\l  (r2 I:int A[D('sampleRateHz' int)])\l  (r3 I:int A[D('channelCount' int)])\l  (r4 I:int A[D('encoding' int)])\l com.google.android.exoplayer2.audio.AudioProcessor.UnhandledFormatException.\<init\>(int, int, int):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sampleRateHz int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRateHz' int)])  \-\> B:10:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.channelCount int \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('channelCount' int)])  \-\> B:10:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: RETURN  (r0 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IPUT  \l  (r2 I:int A[D('sampleRateHz' int)])\l  (r1 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sampleRateHz int \l0x0015: IPUT  \l  (r3 I:int A[D('channelCount' int)])\l  (r1 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.channelCount int \l0x0017: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.audio.SonicAudioProcessor.configure((r1 'this' I:com.google.android.exoplayer2.audio.SonicAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('sampleRateHz' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('channelCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('encoding' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0018: r2 'sampleRateHz' int\l  ?\-0x0018: r3 'channelCount' int\l  ?\-0x0018: r4 'encoding' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.audio.AudioProcessor$UnhandledFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_9;
}

