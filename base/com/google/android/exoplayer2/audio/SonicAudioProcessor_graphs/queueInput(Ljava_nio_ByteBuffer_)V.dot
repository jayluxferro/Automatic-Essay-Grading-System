digraph "CFG forcom.google.android.exoplayer2.audio.SonicAudioProcessor.queueInput(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r9.hasRemaining() == false) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.nio.ShortBuffer r2 = r9.asShortBuffer()\lint r0 = r9.remaining()\lr8.inputBytes = r8.inputBytes + ((long) r0)\lr8.sonic.queueInput(r2)\lr9.position(r9.position() + r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|int r1 = (r8.sonic.getSamplesAvailable() * r8.channelCount) * 2\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|if (r1 \<= 0) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e}"];
Node_6 [shape=record,label="{6\:\ 0x0034|if (r8.buffer.capacity() \>= r1) goto L_0x0063\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|r8.buffer = java.nio.ByteBuffer.allocateDirect(r1).order(java.nio.ByteOrder.nativeOrder())\lr8.shortBuffer = r8.buffer.asShortBuffer()\l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|r8.sonic.getOutput(r8.shortBuffer)\lr8.outputBytes = r8.outputBytes + ((long) r1)\lr8.buffer.limit(r1)\lr8.outputBuffer = r8.buffer\l}"];
Node_9 [shape=record,label="{9\:\ 0x0063|r8.buffer.clear()\lr8.shortBuffer.clear()\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.SonicAudioProcessor.queueInput((r8v0 'this' com.google.android.exoplayer2.audio.SonicAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r9v0 'inputBuffer' java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_9 -> Node_8;
}

