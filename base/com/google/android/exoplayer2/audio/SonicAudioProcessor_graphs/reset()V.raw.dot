digraph "CFG forcom.google.android.exoplayer2.audio.SonicAudioProcessor.reset()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:com.google.android.exoplayer2.audio.Sonic)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sonic com.google.android.exoplayer2.audio.Sonic \l0x0006: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.SonicAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x0008: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x000a: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x000c: INVOKE  (r0 I:java.nio.ShortBuffer) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.asShortBuffer():java.nio.ShortBuffer type: VIRTUAL \l0x0010: IPUT  \l  (r0 I:java.nio.ShortBuffer)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.shortBuffer java.nio.ShortBuffer \l0x0012: SGET  (r0 I:java.nio.ByteBuffer) =  com.google.android.exoplayer2.audio.SonicAudioProcessor.EMPTY_BUFFER java.nio.ByteBuffer \l0x0014: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.outputBuffer java.nio.ByteBuffer \l0x0016: IPUT  \l  (r1 I:int)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.channelCount int \l0x0018: IPUT  \l  (r1 I:int)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sampleRateHz int \l0x001a: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.inputBytes long \l0x001c: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.outputBytes long \l0x001e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: IPUT  \l  (r0 I:boolean)\l  (r4 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.inputEnded boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0021|0x0021: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.SonicAudioProcessor.reset((r4 'this' I:com.google.android.exoplayer2.audio.SonicAudioProcessor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

