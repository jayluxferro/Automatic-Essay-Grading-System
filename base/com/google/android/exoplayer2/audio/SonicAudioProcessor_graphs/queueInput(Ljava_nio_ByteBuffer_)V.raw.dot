digraph "CFG forcom.google.android.exoplayer2.audio.SonicAudioProcessor.queueInput(Ljava\/nio\/ByteBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:boolean) = \l  (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:java.nio.ShortBuffer) = \l  (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.asShortBuffer():java.nio.ShortBuffer type: VIRTUAL \l0x000a: INVOKE  (r0 I:int) = \l  (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.remaining():int type: VIRTUAL \l0x000e: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.inputBytes long \l0x0010: CAST  (r6 I:long) = (long) (r0 I:int A[D('inputSize' int)]) \l0x0011: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0012: IPUT  \l  (r4 I:long)\l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.inputBytes long \l0x0014: IGET  (r3 I:com.google.android.exoplayer2.audio.Sonic) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sonic com.google.android.exoplayer2.audio.Sonic \l0x0016: INVOKE  \l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:java.nio.ShortBuffer A[D('shortBuffer' java.nio.ShortBuffer)])\l com.google.android.exoplayer2.audio.Sonic.queueInput(java.nio.ShortBuffer):void type: VIRTUAL \l0x0019: INVOKE  (r3 I:int) = \l  (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.position():int type: VIRTUAL \l0x001d: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int A[D('inputSize' int)]) \l0x001e: INVOKE  \l  (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer)])\l  (r3 I:int)\l java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: IGET  (r3 I:com.google.android.exoplayer2.audio.Sonic) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sonic com.google.android.exoplayer2.audio.Sonic \l0x0023: INVOKE  (r3 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.getSamplesAvailable():int type: VIRTUAL \l0x0027: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.channelCount int \l0x0029: ARITH  (r3 I:int) = (r3 I:int) * (r4 I:int) \l0x002a: ARITH  (r1 I:int) = (r3 I:int) * (2 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: IF  (r1 I:?[int, byte, short, char] A[D('outputSize' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0062 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r3 I:java.nio.ByteBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x0030: INVOKE  (r3 I:int) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char] A[D('outputSize' int)])  \-\> B:10:0x0063 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: INVOKE  (r3 I:java.nio.ByteBuffer) = (r1 I:int A[D('outputSize' int)]) java.nio.ByteBuffer.allocateDirect(int):java.nio.ByteBuffer type: STATIC \l0x003a: INVOKE  (r4 I:java.nio.ByteOrder) =  java.nio.ByteOrder.nativeOrder():java.nio.ByteOrder type: STATIC \l0x003e: INVOKE  (r3 I:java.nio.ByteBuffer) = (r3 I:java.nio.ByteBuffer), (r4 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x0042: IPUT  \l  (r3 I:java.nio.ByteBuffer)\l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x0044: IGET  (r3 I:java.nio.ByteBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x0046: INVOKE  (r3 I:java.nio.ShortBuffer) = (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.asShortBuffer():java.nio.ShortBuffer type: VIRTUAL \l0x004a: IPUT  \l  (r3 I:java.nio.ShortBuffer)\l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.shortBuffer java.nio.ShortBuffer \l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|0x004c: IGET  (r3 I:com.google.android.exoplayer2.audio.Sonic) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.sonic com.google.android.exoplayer2.audio.Sonic \l0x004e: IGET  (r4 I:java.nio.ShortBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.shortBuffer java.nio.ShortBuffer \l0x0050: INVOKE  \l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l  (r4 I:java.nio.ShortBuffer)\l com.google.android.exoplayer2.audio.Sonic.getOutput(java.nio.ShortBuffer):void type: VIRTUAL \l0x0053: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.outputBytes long \l0x0055: CAST  (r6 I:long) = (long) (r1 I:int A[D('outputSize' int)]) \l0x0056: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0057: IPUT  \l  (r4 I:long)\l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.outputBytes long \l0x0059: IGET  (r3 I:java.nio.ByteBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x005b: INVOKE  \l  (r3 I:java.nio.ByteBuffer)\l  (r1 I:int A[D('outputSize' int)])\l java.nio.ByteBuffer.limit(int):java.nio.Buffer type: VIRTUAL \l0x005e: IGET  (r3 I:java.nio.ByteBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x0060: IPUT  \l  (r3 I:java.nio.ByteBuffer)\l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.outputBuffer java.nio.ByteBuffer \l}"];
Node_9 [shape=record,label="{9\:\ 0x0062|0x0062: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0063|0x0063: IGET  (r3 I:java.nio.ByteBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.buffer java.nio.ByteBuffer \l0x0065: INVOKE  (r3 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l0x0068: IGET  (r3 I:java.nio.ShortBuffer) = \l  (r8 I:com.google.android.exoplayer2.audio.SonicAudioProcessor)\l com.google.android.exoplayer2.audio.SonicAudioProcessor.shortBuffer java.nio.ShortBuffer \l0x006a: INVOKE  (r3 I:java.nio.ShortBuffer) java.nio.ShortBuffer.clear():java.nio.Buffer type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.SonicAudioProcessor.queueInput((r8 'this' I:com.google.android.exoplayer2.audio.SonicAudioProcessor A[IMMUTABLE_TYPE, THIS]), (r9 I:java.nio.ByteBuffer A[D('inputBuffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0021: r0 'inputSize' int\l  0x000a\-0x0021: r2 'shortBuffer' java.nio.ShortBuffer\l  0x002c\-0x006d: r1 'outputSize' int\l  ?\-0x006d: r9 'inputBuffer' java.nio.ByteBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_8;
}

