digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.skipPitchPeriod([SIFI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0004: CMP_L  (r1 I:int) = (r11 I:float A[D('speed' float)]), (r2 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CAST  (r1 I:float) = (float) (r12 I:int A[D('period' int)]) \l0x0009: ARITH  (r2 I:float) = (r11 I:float A[D('speed' float)]) \- (r3 I:float) \l0x000b: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x000c: CAST  (r0 I:int) = (int) (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r0 I:int A[D('newSamples' int)])\l com.google.android.exoplayer2.audio.Sonic.enlargeOutputBufferIfNeeded(int):void type: DIRECT \l0x0010: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0012: IGET  (r2 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0014: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0016: ARITH  (r7 I:int) = (r10 I:int A[D('position' int)]) + (r12 I:int A[D('period' int)]) \l0x0018: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY] A[D('samples' short[])]) \l0x0019: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l0x001a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY] A[D('samples' short[])]) \l0x001b: INVOKE  \l  (r0 I:int A[D('newSamples' int)])\l  (r1 I:int)\l  (r2 I:short[])\l  (r3 I:int)\l  (r4 I:short[])\l  (r5 I:int)\l  (r6 I:short[])\l  (r7 I:int)\l com.google.android.exoplayer2.audio.Sonic.overlapAdd(int, int, short[], int, short[], int, short[], int):void type: STATIC \l0x001e: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0020: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('newSamples' int)]) \l0x0021: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: RETURN  (r0 I:int A[D('newSamples' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newSamples' int)]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l0x0025: CAST  (r1 I:float) = (float) (r12 I:int A[D('period' int)]) \l0x0026: ARITH  (r2 I:float) = (r2 I:float) \- (r11 I:float A[D('speed' float)]) \l0x0027: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0028: ARITH  (r2 I:float) = (r11 I:float A[D('speed' float)]) \- (r3 I:float) \l0x002a: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x002b: CAST  (r1 I:int) = (int) (r1 I:float) \l0x002c: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.Sonic.skipPitchPeriod((r8 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r9 I:short[] A[D('samples' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[D('speed' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('period' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0024: r0 'newSamples' int\l  0x0025\-0x002e: r0 'newSamples' int\l  ?\-0x002e: r9 'samples' short[]\l  ?\-0x002e: r10 'position' int\l  ?\-0x002e: r11 'speed' float\l  ?\-0x002e: r12 'period' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

