digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.getOutput(Ljava\/nio\/ShortBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:int) = \l  (r8 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer)])\l java.nio.ShortBuffer.remaining():int type: VIRTUAL \l0x0005: IGET  (r2 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \/ (r2 I:int) \l0x0008: IGET  (r2 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x000a: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000e: IGET  (r1 I:short[]) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0010: IGET  (r2 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0012: ARITH  (r2 I:int) = (r2 I:int) * (r0 I:int A[D('samplesToRead' int)]) \l0x0013: INVOKE  \l  (r8 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer)])\l  (r1 I:short[])\l  (r6 I:int)\l  (r2 I:int)\l java.nio.ShortBuffer.put(short[], int, int):java.nio.ShortBuffer type: VIRTUAL \l0x0016: IGET  (r1 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0018: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int A[D('samplesToRead' int)]) \l0x0019: IPUT  \l  (r1 I:int)\l  (r7 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x001b: IGET  (r1 I:short[]) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x001d: IGET  (r2 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x001f: ARITH  (r2 I:int) = (r2 I:int) * (r0 I:int A[D('samplesToRead' int)]) \l0x0020: IGET  (r3 I:short[]) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0022: IGET  (r4 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0024: IGET  (r5 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0026: ARITH  (r4 I:int) = (r4 I:int) * (r5 I:int) \l0x0027: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l  (r6 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x002a|0x002a: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.Sonic.getOutput((r7 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r8 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x002a: r0 'samplesToRead' int\l  ?\-0x002a: r8 'buffer' java.nio.ShortBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

