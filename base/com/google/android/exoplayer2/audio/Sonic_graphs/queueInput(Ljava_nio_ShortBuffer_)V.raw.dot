digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.queueInput(Ljava\/nio\/ShortBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:int) = \l  (r6 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer)])\l java.nio.ShortBuffer.remaining():int type: VIRTUAL \l0x0004: IGET  (r3 I:int) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0006: ARITH  (r1 I:int) = (r2 I:int) \/ (r3 I:int) \l0x0008: IGET  (r2 I:int) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x000a: ARITH  (r2 I:int) = (r2 I:int) * (r1 I:int A[D('samplesToWrite' int)]) \l0x000b: ARITH  (r0 I:int) = (r2 I:int) * (2 int) \l0x000d: INVOKE  \l  (r5 I:com.google.android.exoplayer2.audio.Sonic)\l  (r1 I:int A[D('samplesToWrite' int)])\l com.google.android.exoplayer2.audio.Sonic.enlargeInputBufferIfNeeded(int):void type: DIRECT \l0x0010: IGET  (r2 I:short[]) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x0012: IGET  (r3 I:int) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0014: IGET  (r4 I:int) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0016: ARITH  (r3 I:int) = (r3 I:int) * (r4 I:int) \l0x0017: ARITH  (r4 I:int) = (r0 I:int A[D('bytesToWrite' int)]) \/ (2 int) \l0x0019: INVOKE  \l  (r6 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer)])\l  (r2 I:short[])\l  (r3 I:int)\l  (r4 I:int)\l java.nio.ShortBuffer.get(short[], int, int):java.nio.ShortBuffer type: VIRTUAL \l0x001c: IGET  (r2 I:int) = (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x001e: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int A[D('samplesToWrite' int)]) \l0x001f: IPUT  \l  (r2 I:int)\l  (r5 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0021: INVOKE  (r5 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.processStreamInput():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.Sonic.queueInput((r5 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r6 I:java.nio.ShortBuffer A[D('buffer' java.nio.ShortBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0024: r0 'bytesToWrite' int\l  0x0008\-0x0024: r1 'samplesToWrite' int\l  ?\-0x0024: r6 'buffer' java.nio.ShortBuffer\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

