digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.adjustPitch(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0004: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('originalNumOutputSamples' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  \l  (r17 I:com.google.android.exoplayer2.audio.Sonic)\l  (r18 I:int A[D('originalNumOutputSamples' int)])\l com.google.android.exoplayer2.audio.Sonic.moveNewSamplesToPitchBuffer(int):void type: DIRECT \l0x000c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x000f: IGET  (r2 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x0011: ARITH  (r2 I:int) = (r2 I:int) \- (r6 I:int A[D('position' int)]) \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r3 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:11:0x007f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x001a: IGET  (r2 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r16 I:int) = \l  (r0 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:short[])\l  (r6 I:int A[D('position' int)])\l  (r3 I:boolean)\l com.google.android.exoplayer2.audio.Sonic.findPitchPeriod(short[], int, boolean):int type: DIRECT \l0x0023: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l0x0025: CAST  (r2 I:float) = (float) (r0 I:int) \l0x0026: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0028: IGET  (r3 I:float) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x002a: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x002b: CAST  (r1 I:int) = (int) (r2 I:float) \l0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x002e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.Sonic)\l  (r1 I:int A[D('newPeriod' int)])\l com.google.android.exoplayer2.audio.Sonic.enlargeOutputBufferIfNeeded(int):void type: DIRECT \l0x0031: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0033: IGET  (r2 I:float) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x0035: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0037: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x0061 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x003d: IGET  (r2 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x003f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0041: IGET  (r3 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0043: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0045: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0049: IGET  (r5 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x004b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x004d: IGET  (r7 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x004f: ARITH  (r8 I:int) = (r6 I:int A[D('position' int)]) + (r16 I:int A[D('period' int)]) \l0x0051: ARITH  (r8 I:int) = (r8 I:int) \- (r1 I:int A[D('newPeriod' int)]) \l0x0052: INVOKE  \l  (r1 I:int A[D('newPeriod' int)])\l  (r2 I:int)\l  (r3 I:short[])\l  (r4 I:int)\l  (r5 I:short[])\l  (r6 I:int A[D('position' int)])\l  (r7 I:short[])\l  (r8 I:int)\l com.google.android.exoplayer2.audio.Sonic.overlapAdd(int, int, short[], int, short[], int, short[], int):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0055|0x0055: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0057: IGET  (r2 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0059: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int A[D('newPeriod' int)]) \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x005c: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x005e: ARITH  (r6 I:int A[D('position' int)]) = (r6 I:int A[D('position' int)]) + (r16 I:int A[D('period' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0061|0x0061: ARITH  (r9 I:int) = (r1 I:int A[D('newPeriod' int)]) \- (r16 I:int A[D('period' int)]) \l0x0063: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0065: IGET  (r8 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0067: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0069: IGET  (r10 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x006d: IGET  (r11 I:int) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x006f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0071: IGET  (r12 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x0073: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0075: IGET  (r14 I:short[]) = (r0 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x0077: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l0x0079: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l0x007a: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l0x007b: INVOKE  \l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int A[D('separation' int)])\l  (r10 I:short[])\l  (r11 I:int)\l  (r12 I:short[])\l  (r13 I:int)\l  (r14 I:short[])\l  (r15 I:int)\l com.google.android.exoplayer2.audio.Sonic.overlapAddWithSeparation(int, int, int, short[], int, short[], int, short[], int):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x007f|0x007f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0081: INVOKE  \l  (r0 I:com.google.android.exoplayer2.audio.Sonic)\l  (r6 I:int A[D('position' int)])\l com.google.android.exoplayer2.audio.Sonic.removePitchSamples(int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.adjustPitch((r17 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r18 I:int A[D('originalNumOutputSamples' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002c\-0x007f: r1 'newPeriod' int\l  0x0063\-0x007f: r9 'separation' int\l  0x0023\-0x007f: r16 'period' int\l  0x000d\-0x0084: r6 'position' int\l  ?\-0x0084: r18 'originalNumOutputSamples' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_4;
Node_10 -> Node_9;
Node_11 -> Node_2;
}

