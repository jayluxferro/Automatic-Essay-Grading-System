digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.findPitchPeriodInRange([SIII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x0003: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IGET  (r9 I:int) = (r11 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0007: ARITH  (r13 I:int A[D('position' int)]) = (r13 I:int A[D('position' int)]) * (r9 I:int) \l0x0008: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minPeriod' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r6 I:?[int, byte, short, char] A[D('period' int)]) \> (r15 I:?[int, byte, short, char] A[D('maxPeriod' int)])  \-\> B:16:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r6 I:?[int, byte, short, char] A[D('period' int)])  \-\> B:9:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARITH  (r9 I:int) = (r13 I:int A[D('position' int)]) + (r2 I:int A[D('i' int)]) \l0x0011: AGET  (r7 I:short A[IMMUTABLE_TYPE]) = \l  (r12 I:short[] A[D('samples' short[]), IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x0013: ARITH  (r9 I:int) = (r13 I:int A[D('position' int)]) + (r6 I:int A[D('period' int)]) \l0x0015: ARITH  (r9 I:int) = (r9 I:int) + (r2 I:int A[D('i' int)]) \l0x0016: AGET  (r5 I:short A[IMMUTABLE_TYPE]) = \l  (r12 I:short[] A[D('samples' short[]), IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r7 I:?[int, byte, short, char] A[D('sVal' short)]) \< (r5 I:?[int, byte, short, char] A[D('pVal' short)])  \-\> B:8:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: ARITH  (r9 I:int) = (r7 I:int A[D('sVal' short)]) \- (r5 I:int A[D('pVal' short)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: ARITH  (r1 I:int A[D('diff' int)]) = (r1 I:int A[D('diff' int)]) + (r9 I:int) \l0x001d: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: ARITH  (r9 I:int) = (r5 I:int A[D('pVal' short)]) \- (r7 I:int A[D('sVal' short)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: ARITH  (r9 I:int) = (r1 I:int A[D('diff' int)]) * (r0 I:int A[D('bestPeriod' int)]) \l0x0025: ARITH  (r10 I:int) = (r4 I:int A[D('minDiff' int)]) * (r6 I:int A[D('period' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r9 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minDiff' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('diff' int)])\l \l0x002a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestPeriod' int)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: ARITH  (r9 I:int) = (r1 I:int A[D('diff' int)]) * (r8 I:int A[D('worstPeriod' int)]) \l0x002d: ARITH  (r10 I:int) = (r3 I:int A[D('maxDiff' int)]) * (r6 I:int A[D('period' int)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r9 I:?[int, byte, short, char]) \<= (r10 I:?[int, byte, short, char])  \-\> B:15:0x0033 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxDiff' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('diff' int)])\l \l0x0032: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('worstPeriod' int)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: ARITH  (r6 I:int A[D('period' int)]) = (r6 I:int A[D('period' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: ARITH  (r9 I:int) = (r4 I:int A[D('minDiff' int)]) \/ (r0 I:int A[D('bestPeriod' int)]) \l0x0038: IPUT  \l  (r9 I:int)\l  (r11 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.minDiff int \l0x003a: ARITH  (r9 I:int) = (r3 I:int A[D('maxDiff' int)]) \/ (r8 I:int A[D('worstPeriod' int)]) \l0x003c: IPUT  \l  (r9 I:int)\l  (r11 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.maxDiff int \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: RETURN  (r0 I:int A[D('bestPeriod' int)]) \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.Sonic.findPitchPeriodInRange((r11 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r12 I:short[] A[D('samples' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('minPeriod' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('maxPeriod' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0018\-0x0023: r5 'pVal' short\l  0x0013\-0x0023: r7 'sVal' short\l  0x000c\-0x0036: r1 'diff' int\l  0x000d\-0x0036: r2 'i' int\l  0x0001\-0x003e: r0 'bestPeriod' int\l  0x0005\-0x003e: r3 'maxDiff' int\l  0x0004\-0x003e: r4 'minDiff' int\l  0x0009\-0x003e: r6 'period' int\l  0x0003\-0x003e: r8 'worstPeriod' int\l  ?\-0x003e: r12 'samples' short[]\l  ?\-0x003e: r13 'position' int\l  ?\-0x003e: r14 'minPeriod' int\l  ?\-0x003e: r15 'maxPeriod' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_17;
}

