digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.\<init\>(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.sampleRate = r4\lr3.numChannels = r5\lr3.minPeriod = r4 \/ MAXIMUM_PITCH\lr3.maxPeriod = r4 \/ 65\lr3.maxRequired = r3.maxPeriod * 2\lr3.downSampleBuffer = new short[r3.maxRequired]\lr3.inputBufferSize = r3.maxRequired\lr3.inputBuffer = new short[(r3.maxRequired * r5)]\lr3.outputBufferSize = r3.maxRequired\lr3.outputBuffer = new short[(r3.maxRequired * r5)]\lr3.pitchBufferSize = r3.maxRequired\lr3.pitchBuffer = new short[(r3.maxRequired * r5)]\lr3.oldRatePosition = 0\lr3.newRatePosition = 0\lr3.prevPeriod = 0\lr3.speed = 1.0f\lr3.pitch = 1.0f\l}"];
Node_1 [shape=record,label="{1\:\ 0x0049|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.Sonic.\<init\>((r3v0 'this' com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r4v0 'sampleRate' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'numChannels' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

