digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.insertPitchPeriod([SIFI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x0004: CMP_G  (r1 I:int) = (r11 I:float A[D('speed' float)]), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CAST  (r1 I:float) = (float) (r12 I:int A[D('period' int)]) \l0x0009: ARITH  (r1 I:float) = (r1 I:float) * (r11 I:float A[D('speed' float)]) \l0x000a: ARITH  (r2 I:float) = (r3 I:float) \- (r11 I:float A[D('speed' float)]) \l0x000c: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x000d: CAST  (r0 I:int) = (int) (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r12 I:int A[D('period' int)]) + (r0 I:int A[D('newSamples' int)]) \l0x0010: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r1 I:int)\l com.google.android.exoplayer2.audio.Sonic.enlargeOutputBufferIfNeeded(int):void type: DIRECT \l0x0013: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0015: ARITH  (r1 I:int) = (r1 I:int) * (r10 I:int A[D('position' int)]) \l0x0016: IGET  (r2 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0018: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x001a: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x001c: ARITH  (r3 I:int) = (r3 I:int) * (r4 I:int) \l0x001d: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x001f: ARITH  (r4 I:int) = (r4 I:int) * (r12 I:int A[D('period' int)]) \l0x0020: INVOKE  \l  (r9 I:java.lang.Object A[D('samples' short[])])\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0023: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0025: IGET  (r2 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0027: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0029: ARITH  (r3 I:int) = (r3 I:int) + (r12 I:int A[D('period' int)]) \l0x002a: ARITH  (r5 I:int) = (r10 I:int A[D('position' int)]) + (r12 I:int A[D('period' int)]) \l0x002c: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY] A[D('samples' short[])]) \l0x002d: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY] A[D('samples' short[])]) \l0x002e: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)])\l \l0x002f: INVOKE  \l  (r0 I:int A[D('newSamples' int)])\l  (r1 I:int)\l  (r2 I:short[])\l  (r3 I:int)\l  (r4 I:short[])\l  (r5 I:int)\l  (r6 I:short[])\l  (r7 I:int)\l com.google.android.exoplayer2.audio.Sonic.overlapAdd(int, int, short[], int, short[], int, short[], int):void type: STATIC \l0x0032: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0034: ARITH  (r2 I:int) = (r12 I:int A[D('period' int)]) + (r0 I:int A[D('newSamples' int)]) \l0x0036: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0037: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0039|0x0039: RETURN  (r0 I:int A[D('newSamples' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newSamples' int)]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('period' int)])\l \l0x003b: CAST  (r1 I:float) = (float) (r12 I:int A[D('period' int)]) \l0x003c: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x003e: ARITH  (r2 I:float) = (r2 I:float) * (r11 I:float A[D('speed' float)]) \l0x003f: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0040: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0041: ARITH  (r2 I:float) = (r3 I:float) \- (r11 I:float A[D('speed' float)]) \l0x0043: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x0044: CAST  (r1 I:int) = (int) (r1 I:float) \l0x0045: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.Sonic.insertPitchPeriod((r8 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r9 I:short[] A[D('samples' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[D('speed' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('period' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x003a: r0 'newSamples' int\l  0x003b\-0x0047: r0 'newSamples' int\l  ?\-0x0047: r9 'samples' short[]\l  ?\-0x0047: r10 'position' int\l  ?\-0x0047: r11 'speed' float\l  ?\-0x0047: r12 'period' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

