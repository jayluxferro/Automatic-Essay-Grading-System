digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.adjustRate(FI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('originalNumOutputSamples' int)])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.sampleRate int \l0x000b: CAST  (r4 I:float) = (float) (r4 I:int) \l0x000c: ARITH  (r4 I:float) = (r4 I:float) \/ (r11 I:float A[D('rate' float)]) \l0x000d: CAST  (r1 I:int) = (int) (r4 I:float) \l0x000e: IGET  (r2 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.sampleRate int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char] A[D('newSampleRate' int)]) \> (r7 I:?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char] A[D('oldSampleRate' int)]) \<= (r7 I:?[int, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: ARITH  (r1 I:int A[D('newSampleRate' int)]) = (r1 I:int A[D('newSampleRate' int)]) \/ (2 int) \l0x0016: ARITH  (r2 I:int A[D('oldSampleRate' int)]) = (r2 I:int A[D('oldSampleRate' int)]) \/ (2 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  \l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l  (r12 I:int A[D('originalNumOutputSamples' int)])\l com.google.android.exoplayer2.audio.Sonic.moveNewSamplesToPitchBuffer(int):void type: DIRECT \l0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x001f: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r3 I:?[int, byte, short, char] A[D('position' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:25:0x0074 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l0x0025: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0027: ARITH  (r4 I:int) = (r4 I:int) * (r1 I:int A[D('newSampleRate' int)]) \l0x0028: IGET  (r7 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l0x002a: ARITH  (r7 I:int) = (r7 I:int) * (r2 I:int A[D('oldSampleRate' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r4 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: INVOKE  \l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l  (r5 I:int)\l com.google.android.exoplayer2.audio.Sonic.enlargeOutputBufferIfNeeded(int):void type: DIRECT \l0x0030: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:16:0x004c \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IGET  (r4 I:short[]) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0037: IGET  (r7 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0039: IGET  (r8 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x003b: ARITH  (r7 I:int) = (r7 I:int) * (r8 I:int) \l0x003c: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int A[D('i' int)]) \l0x003d: IGET  (r8 I:short[]) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x003f: IGET  (r9 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0041: ARITH  (r9 I:int) = (r9 I:int) * (r3 I:int A[D('position' int)]) \l0x0042: ARITH  (r9 I:int) = (r9 I:int) + (r0 I:int A[D('i' int)]) \l0x0043: INVOKE  (r8 I:short) = \l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l  (r8 I:short[])\l  (r9 I:int)\l  (r2 I:int A[D('oldSampleRate' int)])\l  (r1 I:int A[D('newSampleRate' int)])\l com.google.android.exoplayer2.audio.Sonic.interpolate(short[], int, int, int):short type: DIRECT \l0x0047: APUT  \l  (r4 I:short[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r8 I:short A[IMMUTABLE_TYPE])\l \l0x0049: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l0x004e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0050: IPUT  \l  (r4 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l0x0052: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0054: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0056: IPUT  \l  (r4 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l0x005b: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x005d: IPUT  \l  (r4 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l0x005f: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldSampleRate' int)])  \-\> B:23:0x006f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|0x0063: IPUT  \l  (r6 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l0x0065: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l}"];
Node_20 [shape=record,label="{20\:\ 0x0067|0x0067: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newSampleRate' int)])  \-\> B:24:0x0072 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0069|0x0069: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x006a|0x006a: INVOKE  (r4 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x006d: IPUT  \l  (r6 I:int)\l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l}"];
Node_23 [shape=record,label="{23\:\ 0x006f|0x006f: ARITH  (r3 I:int A[D('position' int)]) = (r3 I:int A[D('position' int)]) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0072|0x0072: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0074|0x0074: IGET  (r4 I:int) = (r10 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x0076: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x0078: INVOKE  \l  (r10 I:com.google.android.exoplayer2.audio.Sonic)\l  (r4 I:int)\l com.google.android.exoplayer2.audio.Sonic.removePitchSamples(int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.adjustRate((r10 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r11 I:float A[D('rate' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('originalNumOutputSamples' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0031\-0x0059: r0 'i' int\l  0x000e\-0x007b: r1 'newSampleRate' int\l  0x0010\-0x007b: r2 'oldSampleRate' int\l  0x001d\-0x007b: r3 'position' int\l  ?\-0x007b: r11 'rate' float\l  ?\-0x007b: r12 'originalNumOutputSamples' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_25;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_13;
Node_16 -> Node_10;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_8;
Node_24 -> Node_22;
Node_25 -> Node_2;
}

