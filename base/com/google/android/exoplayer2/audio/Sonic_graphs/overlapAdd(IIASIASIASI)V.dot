digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.overlapAdd(II[SI[SI[SI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:0:0x0000, B:5:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x0025\l|if (r1 \>= r8) goto L_0x0028\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|int r2 = (r10 * r8) + r1\lint r4 = (r14 * r8) + r1\lint r0 = (r12 * r8) + r1\lr3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|LOOP_START\lPHI: r0 r2 r3 r4 \l  PHI: (r0v1 'd' int) = (r0v0 'd' int), (r0v2 'd' int) binds: [B:2:0x0003, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'o' int) = (r2v0 'o' int), (r2v2 'o' int) binds: [B:2:0x0003, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 't' int) = (r3v0 't' int), (r3v2 't' int) binds: [B:2:0x0003, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'u' int) = (r4v0 'u' int), (r4v2 'u' int) binds: [B:2:0x0003, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:3:0x0010\-\>B:4:0x0012\l|if (r3 \>= r7) goto L_0x0025\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|LOOP_END\lLOOP:1: B:3:0x0010\-\>B:4:0x0012\l|r9[r2] = (short) (((r11[r0] * (r7 \- r3)) + (r13[r4] * r3)) \/ r7)\lint r2 = r2 + r8\lint r0 = r0 + r8\lint r4 = r4 + r8\lint r3 = r3 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x0025\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.audio.Sonic.overlapAdd((r7v0 'numSamples' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'numChannels' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'out' short[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'outPos' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'rampDown' short[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'rampDownPos' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'rampUp' short[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'rampUpPos' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_3;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
}

