digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.findPitchPeriod([SIZ)I" {
subgraph cluster_Region_236378796 {
label = "R(5:(1:2)(1:12)|(1:6)(2:13|(4:15|(1:17)|(1:20)|(1:23)(1:24)))|(1:9)(1:25)|10|11) | DECL_VAR: int skip, int period, int retPeriod\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1882898186 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r10.sampleRate \> AMDF_FREQUENCY) goto L_0x0008\l}"];
subgraph cluster_Region_136717295 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|int r4 = r10.sampleRate \/ AMDF_FREQUENCY\l}"];
}
subgraph cluster_Region_2053901639 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x002d|r4 = 1\l}"];
}
}
subgraph cluster_IfRegion_238960612 {
label = "IF [B:4:0x000e, B:5:0x0010] THEN: R(1:6) ELSE: R(2:13|(4:15|(1:17)|(1:20)|(1:23)(1:24)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r10.numChannels == 1) goto L_0x0010\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|ADDED_TO_REGION\l|if (r4 == 1) goto L_0x0012\l}"];
subgraph cluster_Region_103480156 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|int r2 = findPitchPeriodInRange(r11, r12, r10.minPeriod, r10.maxPeriod)\l}"];
}
subgraph cluster_Region_1622382211 {
label = "R(2:13|(4:15|(1:17)|(1:20)|(1:23)(1:24)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002f|downSampleInput(r11, r12, r4)\lint r2 = findPitchPeriodInRange(r10.downSampleBuffer, 0, r10.minPeriod \/ r4, r10.maxPeriod \/ r4)\l}"];
subgraph cluster_IfRegion_26449213 {
label = "IF [B:14:0x003e] THEN: R(4:15|(1:17)|(1:20)|(1:23)(1:24)) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x003e|if (r4 != 1) goto L_0x0040\l}"];
subgraph cluster_Region_2060546708 {
label = "R(4:15|(1:17)|(1:20)|(1:23)(1:24))";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0040|int int r2 = r2 * r4\lint int r1 = r2 \- (r4 * 4)\lint int r0 = r2 + (r4 * 4)\l}"];
subgraph cluster_IfRegion_17323338 {
label = "IF [B:16:0x004b] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x004b|if (r1 \< r10.minPeriod) goto L_0x004d\l}"];
subgraph cluster_Region_1782183030 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x004d|int r1 = r10.minPeriod\l}"];
}
}
subgraph cluster_IfRegion_563946367 {
label = "IF [B:19:0x0051] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0051|if (r0 \> r10.maxPeriod) goto L_0x0053\l}"];
subgraph cluster_Region_1353301548 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0053|int r0 = r10.maxPeriod\l}"];
}
}
subgraph cluster_IfRegion_971566105 {
label = "IF [B:22:0x0057] THEN: R(1:23) ELSE: R(1:24)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0057|if (r10.numChannels == 1) goto L_0x0059\l}"];
subgraph cluster_Region_1068142109 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0059|int r2 = findPitchPeriodInRange(r11, r12, r1, r0)\l}"];
}
subgraph cluster_Region_632728025 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x005e|downSampleInput(r11, r12, 1)\lint r2 = findPitchPeriodInRange(r10.downSampleBuffer, 0, r1, r0)\l}"];
}
}
}
}
}
}
subgraph cluster_IfRegion_470800065 {
label = "IF [B:8:0x0022] THEN: R(1:9) ELSE: R(1:25)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0022|if (previousPeriodBetter(r10.minDiff, r10.maxDiff, r13) == true) goto L_0x0024\l}"];
subgraph cluster_Region_1203986101 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0024|int r3 = r10.prevPeriod\l}"];
}
subgraph cluster_Region_69400958 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0068|r3 = r2\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0026|PHI: r3 \l  PHI: (r3v1 'retPeriod' int) = (r3v0 'retPeriod' int), (r3v2 'retPeriod' int) binds: [B:25:0x0068, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|r10.prevMinDiff = r10.minDiff\lr10.prevPeriod = r2\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|RETURN\l|return r3\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c|PHI: r4 \l  PHI: (r4v1 'skip' int) = (r4v0 'skip' int), (r4v2 'skip' int) binds: [B:12:0x002d, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|PHI: r2 \l  PHI: (r2v4 'period' int) = (r2v0 'period' int), (r2v2 'period' int), (r2v3 'period' int), (r2v5 'period' int) binds: [B:14:0x003e, B:24:0x005e, B:23:0x0059, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x004f|PHI: r1 \l  PHI: (r1v1 'minP' int) = (r1v0 'minP' int), (r1v2 'minP' int) binds: [B:16:0x004b, B:17:0x004d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0055|PHI: r0 \l  PHI: (r0v1 'maxP' int) = (r0v0 'maxP' int), (r0v2 'maxP' int) binds: [B:19:0x0051, B:20:0x0053] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.Sonic.findPitchPeriod((r10v0 'this' com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r11v0 'samples' short[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'position' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'preferNewPeriod' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_12[style=dashed];
Node_2 -> Node_3;
Node_12 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_13[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_13[style=dashed];
Node_6 -> Node_7;
Node_13 -> Node_14;
Node_14 -> Node_7[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21[style=dashed];
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_23 -> Node_7;
Node_24 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_25[style=dashed];
Node_9 -> Node_10;
Node_25 -> Node_10;
Node_10 -> Node_11;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_18 -> Node_19;
Node_21 -> Node_22;
}

