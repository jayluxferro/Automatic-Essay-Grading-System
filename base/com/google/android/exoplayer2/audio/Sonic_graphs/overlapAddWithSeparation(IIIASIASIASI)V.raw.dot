digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.overlapAddWithSeparation(III[SI[SI[SI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r9 I:?[int, byte, short, char] A[D('numChannels' int)])  \-\> B:12:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: ARITH  (r5 I:int) = (r12 I:int A[D('outPos' int)]) * (r9 I:int A[D('numChannels' int)]) \l0x0005: ARITH  (r2 I:int) = (r5 I:int) + (r1 I:int A[D('i' int)]) \l0x0007: ARITH  (r5 I:int) = (r16 I:int A[D('rampUpPos' int)]) * (r9 I:int A[D('numChannels' int)]) \l0x0009: ARITH  (r4 I:int) = (r5 I:int) + (r1 I:int A[D('i' int)]) \l0x000b: ARITH  (r5 I:int) = (r14 I:int A[D('rampDownPos' int)]) * (r9 I:int A[D('numChannels' int)]) \l0x000d: ARITH  (r0 I:int) = (r5 I:int) + (r1 I:int A[D('i' int)]) \l0x000f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: ARITH  (r5 I:int) = (r8 I:int A[D('numSamples' int)]) + (r10 I:int A[D('separation' int)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r3 I:?[int, byte, short, char] A[D('t' int)]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0043 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, byte, short, char] A[D('t' int)]) \>= (r10 I:?[int, byte, short, char] A[D('separation' int)])  \-\> B:8:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: AGET  (r5 I:short A[IMMUTABLE_TYPE]) = \l  (r13 I:short[] A[D('rampDown' short[]), IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('d' int)])\l \l0x0018: ARITH  (r6 I:int) = (r8 I:int A[D('numSamples' int)]) \- (r3 I:int A[D('t' int)]) \l0x001a: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x001b: ARITH  (r5 I:int) = (r5 I:int) \/ (r8 I:int A[D('numSamples' int)]) \l0x001c: CAST  (r5 I:short) = (short) (r5 I:int) \l0x001d: APUT  \l  (r11 I:short[] A[D('out' short[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char] A[D('o' int)])\l  (r5 I:short A[IMMUTABLE_TYPE])\l \l0x001f: ARITH  (r0 I:int A[D('d' int)]) = (r0 I:int A[D('d' int)]) + (r9 I:int A[D('numChannels' int)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: ARITH  (r2 I:int A[D('o' int)]) = (r2 I:int A[D('o' int)]) + (r9 I:int A[D('numChannels' int)]) \l0x0021: ARITH  (r3 I:int A[D('t' int)]) = (r3 I:int A[D('t' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r3 I:?[int, byte, short, char] A[D('t' int)]) \>= (r8 I:?[int, byte, short, char] A[D('numSamples' int)])  \-\> B:10:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: AGET  (r5 I:short A[IMMUTABLE_TYPE]) = \l  (r13 I:short[] A[D('rampDown' short[]), IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('d' int)])\l \l0x0028: ARITH  (r6 I:int) = (r8 I:int A[D('numSamples' int)]) \- (r3 I:int A[D('t' int)]) \l0x002a: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x002b: AGET  (r6 I:short A[IMMUTABLE_TYPE]) = \l  (r15 I:short[] A[D('rampUp' short[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char] A[D('u' int)])\l \l0x002d: ARITH  (r7 I:int) = (r3 I:int A[D('t' int)]) \- (r10 I:int A[D('separation' int)]) \l0x002f: ARITH  (r6 I:int) = (r6 I:int) * (r7 I:int) \l0x0030: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x0031: ARITH  (r5 I:int) = (r5 I:int) \/ (r8 I:int A[D('numSamples' int)]) \l0x0032: CAST  (r5 I:short) = (short) (r5 I:int) \l0x0033: APUT  \l  (r11 I:short[] A[D('out' short[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char] A[D('o' int)])\l  (r5 I:short A[IMMUTABLE_TYPE])\l \l0x0035: ARITH  (r0 I:int A[D('d' int)]) = (r0 I:int A[D('d' int)]) + (r9 I:int A[D('numChannels' int)]) \l0x0036: ARITH  (r4 I:int A[D('u' int)]) = (r4 I:int A[D('u' int)]) + (r9 I:int A[D('numChannels' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: AGET  (r5 I:short A[IMMUTABLE_TYPE]) = \l  (r15 I:short[] A[D('rampUp' short[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char] A[D('u' int)])\l \l0x003a: ARITH  (r6 I:int) = (r3 I:int A[D('t' int)]) \- (r10 I:int A[D('separation' int)]) \l0x003c: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x003d: ARITH  (r5 I:int) = (r5 I:int) \/ (r8 I:int A[D('numSamples' int)]) \l0x003e: CAST  (r5 I:short) = (short) (r5 I:int) \l0x003f: APUT  \l  (r11 I:short[] A[D('out' short[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char] A[D('o' int)])\l  (r5 I:short A[IMMUTABLE_TYPE])\l \l0x0041: ARITH  (r4 I:int A[D('u' int)]) = (r4 I:int A[D('u' int)]) + (r9 I:int A[D('numChannels' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.audio.Sonic.overlapAddWithSeparation((r8 I:int A[D('numSamples' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('numChannels' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('separation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:short[] A[D('out' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('outPos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:short[] A[D('rampDown' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('rampDownPos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:short[] A[D('rampUp' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('rampUpPos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x0046: r0 'd' int\l  0x0007\-0x0046: r2 'o' int\l  0x0010\-0x0046: r3 't' int\l  0x000b\-0x0046: r4 'u' int\l  0x0001\-0x0046: r1 'i' int\l  ?\-0x0046: r8 'numSamples' int\l  ?\-0x0046: r9 'numChannels' int\l  ?\-0x0046: r10 'separation' int\l  ?\-0x0046: r11 'out' short[]\l  ?\-0x0046: r12 'outPos' int\l  ?\-0x0046: r13 'rampDown' short[]\l  ?\-0x0046: r14 'rampDownPos' int\l  ?\-0x0046: r15 'rampUp' short[]\l  ?\-0x0046: r16 'rampUpPos' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_7;
Node_11 -> Node_1;
}

