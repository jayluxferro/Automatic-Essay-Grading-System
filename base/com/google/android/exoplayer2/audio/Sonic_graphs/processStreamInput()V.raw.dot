digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.processStreamInput()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0003: IGET  (r2 I:float) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.speed float \l0x0005: IGET  (r3 I:float) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x0007: ARITH  (r1 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0009: CAST  (r2 I:double) = (double) (r1 I:float A[D('s' float)]) \l0x000a: CONST  (r4 I:?[long, double]) = \l  (4607182463836013682(0x3ff0000a7c5ac472, double:1.00001) ?[long, double])\l \l0x000f: CMP_L  (r2 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: CAST  (r2 I:double) = (double) (r1 I:float A[D('s' float)]) \l0x0014: CONST  (r4 I:?[long, double]) = \l  (4607182328728024861(0x3fefffeb074a771d, double:0.99999) ?[long, double])\l \l0x0019: CMP_G  (r2 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: INVOKE  \l  (r7 I:com.google.android.exoplayer2.audio.Sonic)\l  (r1 I:float A[D('s' float)])\l com.google.android.exoplayer2.audio.Sonic.changeSpeed(float):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IGET  (r2 I:float) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x0022: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0024: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IGET  (r2 I:float) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x002a: INVOKE  \l  (r7 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:float)\l  (r0 I:int A[D('originalNumOutputSamples' int)])\l com.google.android.exoplayer2.audio.Sonic.adjustRate(float, int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IGET  (r2 I:short[]) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x0030: IGET  (r3 I:int) = (r7 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0032: INVOKE  \l  (r7 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:short[])\l  (r6 I:int)\l  (r3 I:int)\l com.google.android.exoplayer2.audio.Sonic.copyToOutput(short[], int, int):void type: DIRECT \l0x0035: IPUT  \l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.processStreamInput((r7 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0003\-0x0037: r0 'originalNumOutputSamples' int\l  0x0009\-0x0037: r1 's' float\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_9 -> Node_5;
}

