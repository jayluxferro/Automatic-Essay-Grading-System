digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.moveNewSamplesToPitchBuffer(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0002: ARITH  (r0 I:int) = (r1 I:int) \- (r7 I:int A[D('originalNumOutputSamples' int)]) \l0x0004: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x0006: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('numSamples' int)]) \l0x0007: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l0x000d: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l0x000f: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0011: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('numSamples' int)]) \l0x0012: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0013: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l0x0015: IGET  (r1 I:short[]) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x0017: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l0x0019: IGET  (r3 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x001b: ARITH  (r2 I:int) = (r2 I:int) * (r3 I:int) \l0x001c: INVOKE  (r1 I:short[]) = (r1 I:short[]), (r2 I:int) java.util.Arrays.copyOf(short[], int):short[] type: STATIC \l0x0020: IPUT  \l  (r1 I:short[])\l  (r6 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: IGET  (r1 I:short[]) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0024: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0026: ARITH  (r2 I:int) = (r2 I:int) * (r7 I:int A[D('originalNumOutputSamples' int)]) \l0x0027: IGET  (r3 I:short[]) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x0029: IGET  (r4 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x002b: IGET  (r5 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x002d: ARITH  (r4 I:int) = (r4 I:int) * (r5 I:int) \l0x002e: IGET  (r5 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0030: ARITH  (r5 I:int) = (r5 I:int) * (r0 I:int A[D('numSamples' int)]) \l0x0031: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0034: IPUT  \l  (r7 I:int A[D('originalNumOutputSamples' int)])\l  (r6 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x0036: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x0038: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('numSamples' int)]) \l0x0039: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.moveNewSamplesToPitchBuffer((r6 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('originalNumOutputSamples' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x003b: r0 'numSamples' int\l  ?\-0x003b: r7 'originalNumOutputSamples' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

