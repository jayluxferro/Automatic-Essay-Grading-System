digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.copyInputToOutput(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0002: IGET  (r2 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l0x0004: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0008: IGET  (r1 I:short[]) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x000a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l  (r1 I:short[])\l  (r4 I:int A[D('position' int)])\l  (r0 I:int A[D('numSamples' int)])\l com.google.android.exoplayer2.audio.Sonic.copyToOutput(short[], int, int):void type: DIRECT \l0x000d: IGET  (r1 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l0x000f: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int A[D('numSamples' int)]) \l0x0010: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN  (r0 I:int A[D('numSamples' int)]) \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.audio.Sonic.copyInputToOutput((r3 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0008\-0x0012: r0 'numSamples' int\l  ?\-0x0012: r4 'position' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

