digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.\<init\>(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0006: IPUT  \l  (r4 I:int A[D('sampleRate' int)])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.sampleRate int \l0x0008: IPUT  \l  (r5 I:int A[D('numChannels' int)])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x000a: ARITH  (r0 I:int) = (r4 I:int A[D('sampleRate' int)]) \/ (400 int) \l0x000c: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.minPeriod int \l0x000e: ARITH  (r0 I:int) = (r4 I:int A[D('sampleRate' int)]) \/ (65 int) \l0x0010: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.maxPeriod int \l0x0012: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxPeriod int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0016: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0018: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x001a: NEW_ARRAY  (r0 I:short[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x001c: IPUT  \l  (r0 I:short[])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.downSampleBuffer short[] \l0x001e: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0020: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.inputBufferSize int \l0x0022: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0024: ARITH  (r0 I:int) = (r0 I:int) * (r5 I:int A[D('numChannels' int)]) \l0x0025: NEW_ARRAY  (r0 I:short[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x0027: IPUT  \l  (r0 I:short[])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x0029: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x002b: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.outputBufferSize int \l0x002d: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x002f: ARITH  (r0 I:int) = (r0 I:int) * (r5 I:int A[D('numChannels' int)]) \l0x0030: NEW_ARRAY  (r0 I:short[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x0032: IPUT  \l  (r0 I:short[])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.outputBuffer short[] \l0x0034: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0036: IPUT  \l  (r0 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.pitchBufferSize int \l0x0038: IGET  (r0 I:int) = (r3 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x003a: ARITH  (r0 I:int) = (r0 I:int) * (r5 I:int A[D('numChannels' int)]) \l0x003b: NEW_ARRAY  (r0 I:short[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x003d: IPUT  \l  (r0 I:short[])\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.pitchBuffer short[] \l0x003f: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.oldRatePosition int \l0x0041: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.newRatePosition int \l0x0043: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.prevPeriod int \l0x0045: IPUT  \l  (r2 I:float)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.speed float \l0x0047: IPUT  \l  (r2 I:float)\l  (r3 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.pitch float \l}"];
Node_1 [shape=record,label="{1\:\ 0x0049|0x0049: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.Sonic.\<init\>((r3 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('sampleRate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('numChannels' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0049: r4 'sampleRate' int\l  ?\-0x0049: r5 'numChannels' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

