digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.changeSpeed(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0002: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:int A[D('position' int)])\l com.google.android.exoplayer2.audio.Sonic.copyInputToOutput(int):int type: DIRECT \l0x0012: ARITH  (r2 I:int A[D('position' int)]) = (r2 I:int A[D('position' int)]) + (r3 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r3 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0015: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int A[D('position' int)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r3 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char] A[D('numSamples' int)])  \-\> B:4:0x000a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r2 I:int A[D('position' int)])\l com.google.android.exoplayer2.audio.Sonic.removeProcessedInputSamples(int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IGET  (r3 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x001e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001f: INVOKE  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r3 I:short[])\l  (r2 I:int A[D('position' int)])\l  (r4 I:boolean)\l com.google.android.exoplayer2.audio.Sonic.findPitchPeriod(short[], int, boolean):int type: DIRECT \l0x0023: CAST  (r4 I:double) = (double) (r9 I:float A[D('speed' float)]) \l0x0024: CONST  (r6 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0026: CMP_L  (r3 I:int) = (r4 I:double), (r6 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IGET  (r3 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x002c: INVOKE  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r3 I:short[])\l  (r2 I:int A[D('position' int)])\l  (r9 I:float A[D('speed' float)])\l  (r1 I:int A[D('period' int)])\l com.google.android.exoplayer2.audio.Sonic.skipPitchPeriod(short[], int, float, int):int type: DIRECT \l0x0030: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int A[D('period' int)]) \l0x0031: ARITH  (r2 I:int A[D('position' int)]) = (r2 I:int A[D('position' int)]) + (r3 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IGET  (r3 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x0035: INVOKE  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r3 I:short[])\l  (r2 I:int A[D('position' int)])\l  (r9 I:float A[D('speed' float)])\l  (r1 I:int A[D('period' int)])\l com.google.android.exoplayer2.audio.Sonic.insertPitchPeriod(short[], int, float, int):int type: DIRECT \l0x0039: ARITH  (r2 I:int A[D('position' int)]) = (r2 I:int A[D('position' int)]) + (r3 I:int) \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.changeSpeed((r8 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r9 I:float A[D('speed' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x003a: r0 'numSamples' int\l  0x0023\-0x003a: r1 'period' int\l  0x000a\-0x003a: r2 'position' int\l  ?\-0x003a: r9 'speed' float\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_2;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_7;
Node_13 -> Node_7;
}

