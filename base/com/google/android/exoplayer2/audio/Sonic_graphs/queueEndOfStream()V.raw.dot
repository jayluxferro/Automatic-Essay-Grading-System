digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.queueEndOfStream()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0003: IGET  (r4 I:float) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.speed float \l0x0005: IGET  (r5 I:float) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x0007: ARITH  (r2 I:float) = (r4 I:float) \/ (r5 I:float) \l0x0009: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l0x000b: CAST  (r5 I:float) = (float) (r1 I:int A[D('remainingSamples' int)]) \l0x000c: ARITH  (r5 I:float) = (r5 I:float) \/ (r2 I:float A[D('s' float)]) \l0x000d: IGET  (r6 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l0x000f: CAST  (r6 I:float) = (float) (r6 I:int) \l0x0010: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x0011: IGET  (r6 I:float) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.pitch float \l0x0013: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x0014: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x0016: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x0017: CAST  (r5 I:int) = (int) (r5 I:float) \l0x0018: ARITH  (r0 I:int) = (r4 I:int) + (r5 I:int) \l0x001a: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x001c: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l0x001e: ARITH  (r4 I:int) = (r4 I:int) + (r1 I:int A[D('remainingSamples' int)]) \l0x001f: INVOKE  \l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l  (r4 I:int)\l com.google.android.exoplayer2.audio.Sonic.enlargeInputBufferIfNeeded(int):void type: DIRECT \l0x0022: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|0x0023: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x0025: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l0x0027: IGET  (r5 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0029: ARITH  (r4 I:int) = (r4 I:int) * (r5 I:int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x002a|0x002a: IF  (r3 I:?[int, byte, short, char] A[D('xSample' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:4:0x0037 \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IGET  (r4 I:short[]) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x002e: IGET  (r5 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0030: ARITH  (r5 I:int) = (r5 I:int) * (r1 I:int A[D('remainingSamples' int)]) \l0x0031: ARITH  (r5 I:int) = (r5 I:int) + (r3 I:int A[D('xSample' int)]) \l0x0032: APUT  \l  (r4 I:short[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r7 I:short A[IMMUTABLE_TYPE])\l \l0x0034: ARITH  (r3 I:int A[D('xSample' int)]) = (r3 I:int A[D('xSample' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0037|0x0037: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0039: IGET  (r5 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.maxRequired int \l0x003b: ARITH  (r5 I:int) = (r5 I:int) * (2 int) \l0x003d: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x003e: IPUT  \l  (r4 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0040: INVOKE  (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.processStreamInput():void type: DIRECT \l0x0043: IGET  (r4 I:int) = (r8 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0045|0x0045: IF  (r4 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char] A[D('expectedOutputSamples' int)])  \-\> B:7:0x0049 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0047|0x0047: IPUT  \l  (r0 I:int A[D('expectedOutputSamples' int)])\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numOutputSamples int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0049|0x0049: IPUT  \l  (r7 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x004b: IPUT  \l  (r7 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.remainingInputToCopy int \l0x004d: IPUT  \l  (r7 I:int)\l  (r8 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numPitchSamples int \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.Sonic.queueEndOfStream((r8 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x001a\-0x004f: r0 'expectedOutputSamples' int\l  0x0003\-0x004f: r1 'remainingSamples' int\l  0x0009\-0x004f: r2 's' float\l  0x0023\-0x004f: r3 'xSample' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

