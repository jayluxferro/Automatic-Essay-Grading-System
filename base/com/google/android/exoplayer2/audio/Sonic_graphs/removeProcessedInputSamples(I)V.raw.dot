digraph "CFG forcom.google.android.exoplayer2.audio.Sonic.removeProcessedInputSamples(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l0x0002: ARITH  (r0 I:int) = (r1 I:int) \- (r7 I:int A[D('position' int)]) \l0x0004: IGET  (r1 I:short[]) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x0006: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x0008: ARITH  (r2 I:int) = (r2 I:int) * (r7 I:int A[D('position' int)]) \l0x0009: IGET  (r3 I:short[]) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.inputBuffer short[] \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: IGET  (r5 I:int) = (r6 I:com.google.android.exoplayer2.audio.Sonic) com.google.android.exoplayer2.audio.Sonic.numChannels int \l0x000e: ARITH  (r5 I:int) = (r5 I:int) * (r0 I:int A[D('remainingSamples' int)]) \l0x000f: INVOKE  \l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0012: IPUT  \l  (r0 I:int A[D('remainingSamples' int)])\l  (r6 I:com.google.android.exoplayer2.audio.Sonic)\l com.google.android.exoplayer2.audio.Sonic.numInputSamples int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.audio.Sonic.removeProcessedInputSamples((r6 'this' I:com.google.android.exoplayer2.audio.Sonic A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0014: r0 'remainingSamples' int\l  ?\-0x0014: r7 'position' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

