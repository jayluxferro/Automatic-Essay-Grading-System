digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPlaybackHeadPosition()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x0002: IGET  (r10 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.stopTimestampUs long \l0x0004: CONST  (r12 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0009: CMP_L  (r7 I:int) = (r10 I:long), (r12 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r8 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC \l0x0011: CONST  (r10 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0013: ARITH  (r8 I:long) = (r8 I:long) * (r10 I:long) \l0x0014: IGET  (r10 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.stopTimestampUs long \l0x0016: ARITH  (r0 I:long) = (r8 I:long) \- (r10 I:long) \l0x0018: IGET  (r7 I:int) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.sampleRate int \l0x001a: CAST  (r8 I:long) = (long) (r7 I:int) \l0x001b: ARITH  (r8 I:long) = (r8 I:long) * (r0 I:long A[D('elapsedTimeSinceStopUs' long)]) \l0x001c: CONST  (r10 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x001f: ARITH  (r2 I:long) = (r8 I:long) \/ (r10 I:long) \l0x0021: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.endPlaybackHeadPosition long \l0x0023: IGET  (r10 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.stopPlaybackHeadPosition long \l0x0025: ARITH  (r10 I:long) = (r10 I:long) + (r2 I:long A[D('framesSinceStop' long)]) \l0x0026: INVOKE  (r8 I:long) = (r8 I:long), (r10 I:long) java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: RETURN  (r8 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: IGET  (r7 I:android.media.AudioTrack) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.audioTrack android.media.AudioTrack \l0x002d: INVOKE  (r6 I:int) = (r7 I:android.media.AudioTrack) android.media.AudioTrack.getPlayState():int type: VIRTUAL \l0x0031: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: CONST  (r10 I:?[long, double]) = \l  (4294967295(0xffffffff, double:2.1219957905E\-314) ?[long, double])\l \l0x0039: IGET  (r7 I:android.media.AudioTrack) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.audioTrack android.media.AudioTrack \l0x003b: INVOKE  (r7 I:int) = (r7 I:android.media.AudioTrack) android.media.AudioTrack.getPlaybackHeadPosition():int type: VIRTUAL \l0x003f: CAST  (r12 I:long) = (long) (r7 I:int) \l0x0040: ARITH  (r4 I:long) = (r10 I:long) & (r12 I:long) \l0x0042: IGET  (r7 I:boolean) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.needsPassthroughWorkaround boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0054 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|0x0046: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|0x0047: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' int)]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0051 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: CMP_L  (r7 I:int) = \l  (r4 I:long A[D('rawPlaybackHeadPosition' long)])\l  (r8 I:long)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0051 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.lastRawPlaybackHeadPosition long \l0x004f: IPUT  \l  (r8 I:long)\l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.passthroughWorkaroundPauseOffset long \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.passthroughWorkaroundPauseOffset long \l0x0053: ARITH  (r4 I:long A[D('rawPlaybackHeadPosition' long)]) = (r4 I:long A[D('rawPlaybackHeadPosition' long)]) + (r8 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.lastRawPlaybackHeadPosition long \l0x0056: CMP_L  (r7 I:int) = \l  (r8 I:long)\l  (r4 I:long A[D('rawPlaybackHeadPosition' long)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0061 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|0x005a: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.rawPlaybackHeadWrapCount long \l0x005c: CONST  (r10 I:?[long, double]) = (1 ?[long, double]) \l0x005e: ARITH  (r8 I:long) = (r8 I:long) + (r10 I:long) \l0x005f: IPUT  \l  (r8 I:long)\l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.rawPlaybackHeadWrapCount long \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: IPUT  \l  (r4 I:long A[D('rawPlaybackHeadPosition' long)])\l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.lastRawPlaybackHeadPosition long \l0x0063: IGET  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.rawPlaybackHeadWrapCount long \l0x0065: CONST  (r7 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0067: ARITH  (r8 I:long) = (r8 I:long) \<\< (r7 I:long) \l0x0068: ARITH  (r8 I:long) = (r8 I:long) + (r4 I:long A[D('rawPlaybackHeadPosition' long)]) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPlaybackHeadPosition((r14 'this' I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0018\-0x002a: r0 'elapsedTimeSinceStopUs' long\l  0x0021\-0x002a: r2 'framesSinceStop' long\l  0x0042\-0x0069: r4 'rawPlaybackHeadPosition' long\l  0x0031\-0x0069: r6 'state' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_3;
}

