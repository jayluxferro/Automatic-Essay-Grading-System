digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPositionUs()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:long) = \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPlaybackHeadPosition():long type: VIRTUAL \l0x0004: CONST  (r2 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x0007: ARITH  (r0 I:long) = (r0 I:long) * (r2 I:long) \l0x0008: IGET  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.sampleRate int \l0x000a: CAST  (r2 I:long) = (long) (r2 I:int) \l0x000b: ARITH  (r0 I:long) = (r0 I:long) \/ (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.getPositionUs((r4 'this' I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

