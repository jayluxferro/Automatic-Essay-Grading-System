digraph "CFG forcom.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.reconfigure(Landroid\/media\/AudioTrack;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0002: IPUT  \l  (r5 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack)])\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.audioTrack android.media.AudioTrack \l0x0004: IPUT  \l  (r6 I:boolean A[D('needsPassthroughWorkaround' boolean)])\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.needsPassthroughWorkaround boolean \l0x0006: CONST  (r0 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x000b: IPUT  \l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.stopTimestampUs long \l0x000d: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.lastRawPlaybackHeadPosition long \l0x000f: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.rawPlaybackHeadWrapCount long \l0x0011: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.passthroughWorkaroundPauseOffset long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioTrack' android.media.AudioTrack)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: INVOKE  (r0 I:int) = \l  (r5 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack)])\l android.media.AudioTrack.getSampleRate():int type: VIRTUAL \l0x0019: IPUT  \l  (r0 I:int)\l  (r4 I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil)\l com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.sampleRate int \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.audio.AudioTrack.AudioTrackUtil.reconfigure((r4 'this' I:com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil A[IMMUTABLE_TYPE, THIS]), (r5 I:android.media.AudioTrack A[D('audioTrack' android.media.AudioTrack), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('needsPassthroughWorkaround' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x001b: r5 'audioTrack' android.media.AudioTrack\l  ?\-0x001b: r6 'needsPassthroughWorkaround' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

