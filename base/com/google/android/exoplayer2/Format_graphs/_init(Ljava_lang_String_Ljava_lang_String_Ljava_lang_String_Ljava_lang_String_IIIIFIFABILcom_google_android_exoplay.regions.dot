digraph "CFG forcom.google.android.exoplayer2.Format.\<init\>(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;IIIIFIF[BILcom\/google\/android\/exoplayer2\/video\/ColorInfo;IIIIIILjava\/lang\/String;IJLjava\/util\/List;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;Lcom\/google\/android\/exoplayer2\/metadata\/Metadata;)V" {
subgraph cluster_Region_1471799161 {
label = "R(2:0|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.f2443id = r4\lr3.containerMimeType = r5\lr3.sampleMimeType = r6\lr3.codecs = r7\lr3.bitrate = r8\lr3.maxInputSize = r9\lr3.width = r10\lr3.height = r11\lr3.frameRate = r12\lr3.rotationDegrees = r13\lr3.pixelWidthHeightRatio = r14\lr3.projectionData = r15\lr3.stereoMode = r16\lr3.colorInfo = r17\lr3.channelCount = r18\lr3.sampleRate = r19\lr3.pcmEncoding = r20\lr3.encoderDelay = r21\lr3.encoderPadding = r22\lr3.selectionFlags = r23\lr3.language = r24\lr3.accessibilityChannel = r25\lr3.subsampleOffsetUs = r26\l}"];
Node_3 [shape=record,label="{3\:\ 0x004d|PHI: r28 \l  PHI: (r28v1 'initializationData' java.util.List\<byte[]\>) = (r28v0 'initializationData' java.util.List\<byte[]\>), (r28v2 'initializationData' java.util.List\<byte[]\>) binds: [B:1:0x0047, B:2:0x0049] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r3.initializationData = r28 == null ? java.util.Collections.emptyList() : r28\lr3.drmInitData = r29\lr3.metadata = r30\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0047}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0049}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0059}"];
MethodNode[shape=record,label="{void com.google.android.exoplayer2.Format.\<init\>((r3v0 'this' com.google.android.exoplayer2.Format A[IMMUTABLE_TYPE, THIS]), (r4v0 'id' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'containerMimeType' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'sampleMimeType' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'codecs' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'bitrate' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'maxInputSize' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'width' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'height' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'frameRate' float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'rotationDegrees' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'pixelWidthHeightRatio' float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'projectionData' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'stereoMode' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'colorInfo' com.google.android.exoplayer2.video.ColorInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'channelCount' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'sampleRate' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'pcmEncoding' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 'encoderDelay' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 'encoderPadding' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'selectionFlags' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'language' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 'accessibilityChannel' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 'subsampleOffsetUs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28v0 'initializationData' java.util.List\<byte[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29v0 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30v0 'metadata' com.google.android.exoplayer2.metadata.Metadata A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/lang\/String;, Ljava\/lang\/String;, Ljava\/lang\/String;, IIIIFIF[BI, Lcom\/google\/android\/exoplayer2\/video\/ColorInfo;, IIIIII, Ljava\/lang\/String;, IJ, Ljava\/util\/List, \<[B\>;, Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;, Lcom\/google\/android\/exoplayer2\/metadata\/Metadata;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
}

