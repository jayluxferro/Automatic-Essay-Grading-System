digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.attemptSplice(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestDequeuedTimestampUs long A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: CMP_L  (r1 I:int) = (r2 I:long), (r6 I:long A[D('timeUs' long)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|SYNTHETIC\lSplitter:B:8:0x000a\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000a\l|0x000a: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char] A[D('retainCount' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0021 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IGET  (r1 I:long[]) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] A[Catch:\{ all \-\> 0x0029 \}]\l0x0010: IGET  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x0029 \}]\l0x0012: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('retainCount' int)]) A[Catch:\{ all \-\> 0x0029 \}]\l0x0013: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x0029 \}]\l0x0015: IGET  (r3 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x0029 \}]\l0x0017: ARITH  (r2 I:int) = (r2 I:int) % (r3 I:int) A[Catch:\{ all \-\> 0x0029 \}]\l0x0018: AGET  (r2 I:?[long, double]) = (r1 I:?[long, double][]), (r2 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0029 \}]\l0x001a: CMP_L  (r1 I:int) = (r2 I:long), (r6 I:long A[D('timeUs' long)]) A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x0021 A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: ARITH  (r0 I:int A[D('retainCount' int)]) = (r0 I:int A[D('retainCount' int)]) + (\-1 int) A[Catch:\{ all \-\> 0x0029 \}]\l0x0020: GOTO  \-\> 0x000c A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.absoluteReadIndex int A[Catch:\{ all \-\> 0x0029 \}]\l0x0023: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('retainCount' int)]) A[Catch:\{ all \-\> 0x0029 \}]\l0x0024: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.discardUpstreamSamples(int):long type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized boolean com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.attemptSplice((r5 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000c\-0x0029: r0 'retainCount' int\l  ?\-0x002b: r6 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

