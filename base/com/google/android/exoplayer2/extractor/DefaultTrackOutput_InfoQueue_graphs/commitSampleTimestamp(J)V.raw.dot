digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSampleTimestamp(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:long) = \l  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestQueuedTimestampUs long A[Catch:\{ all \-\> 0x000b \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:long) = (r0 I:long), (r4 I:long A[D('timeUs' long)]) java.lang.Math.max(long, long):long type: STATIC A[Catch:\{ all \-\> 0x000b \}]\l0x0007: IPUT  \l  (r0 I:long)\l  (r3 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestQueuedTimestampUs long A[Catch:\{ all \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSampleTimestamp((r3 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000d: r4 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

