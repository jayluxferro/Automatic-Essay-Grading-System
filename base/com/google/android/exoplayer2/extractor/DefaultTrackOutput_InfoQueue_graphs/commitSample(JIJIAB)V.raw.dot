digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSample(JIJI[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r10 I:boolean) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.upstreamKeyframeRequired boolean A[Catch:\{ all \-\> 0x00ec \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r16 I:?[int, boolean, short, byte, char] A[D('sampleFlags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MONITOR_EXIT  (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|0x000b: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|SYNTHETIC\lSplitter:B:9:0x000c\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000c\l|0x000c: IPUT  \l  (r10 I:boolean)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.upstreamKeyframeRequired boolean A[Catch:\{ all \-\> 0x00ec \}, TRY_ENTER]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IGET  (r10 I:boolean) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.upstreamFormatRequired boolean A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00ef A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|0x0012: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|0x0013: INVOKE  (r10 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x0016: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l  (r14 I:long A[D('timeUs' long)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSampleTimestamp(long):void type: VIRTUAL A[Catch:\{ all \-\> 0x00ec \}]\l0x0019: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x001b: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x001d: APUT  \l  (r10 I:?[long, double][])\l  (r11 I:?[int, short, byte, char])\l  (r14 I:?[long, double] A[D('timeUs' long)])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x001f: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0021: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0023: APUT  \l  (r10 I:?[long, double][])\l  (r11 I:?[int, short, byte, char])\l  (r17 I:?[long, double] A[D('offset' long)])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0025: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0027: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0029: APUT  \l  (r10 I:?[int, float][])\l  (r11 I:?[int, short, byte, char])\l  (r19 I:?[int, float] A[D('size' int)])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x002b: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.flags int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x002d: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x002f: APUT  \l  (r10 I:?[int, float][])\l  (r11 I:?[int, short, byte, char])\l  (r16 I:?[int, float] A[D('sampleFlags' int)])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0031: IGET  (r10 I:byte[][]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.encryptionKeys byte[][] A[Catch:\{ all \-\> 0x00ec \}]\l0x0033: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0035: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r20 I:?[OBJECT, ARRAY] A[D('encryptionKey' byte[])])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0037: IGET  (r10 I:com.google.android.exoplayer2.Format[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.formats com.google.android.exoplayer2.Format[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0039: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x003b: IGET  (r12 I:com.google.android.exoplayer2.Format) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.upstreamFormat com.google.android.exoplayer2.Format A[Catch:\{ all \-\> 0x00ec \}]\l0x003d: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char])\l  (r12 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x003f: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sourceIds int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0041: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0043: IGET  (r12 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.upstreamSourceId int A[Catch:\{ all \-\> 0x00ec \}]\l0x0045: APUT  \l  (r10 I:?[int, float][])\l  (r11 I:?[int, short, byte, char])\l  (r12 I:?[int, float])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0047: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x00ec \}]\l0x0049: ARITH  (r10 I:int) = (r10 I:int) + (1 int) A[Catch:\{ all \-\> 0x00ec \}]\l0x004b: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x00ec \}]\l0x004d: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x00ec \}]\l0x004f: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00f2 A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l0x0055: ARITH  (r2 I:int) = (r10 I:int) + (1000 int) A[Catch:\{ all \-\> 0x00ec \}]\l0x0057: NEW_ARRAY  (r8 I:int[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0059: NEW_ARRAY  (r6 I:long[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x005b: NEW_ARRAY  (r9 I:long[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x005d: NEW_ARRAY  (r4 I:int[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x005f: NEW_ARRAY  (r7 I:int[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0061: NEW_ARRAY  (r3 I:byte[][]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: byte[][] A[Catch:\{ all \-\> 0x00ec \}]\l0x0063: NEW_ARRAY  (r5 I:com.google.android.exoplayer2.Format[]) = (r2 I:int A[D('newCapacity' int), IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.Format[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0065: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l0x0067: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0069: ARITH  (r1 I:int) = (r10 I:int) \- (r11 I:int) A[Catch:\{ all \-\> 0x00ec \}]\l0x006b: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x006d: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x006f: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0070: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r6 I:java.lang.Object A[D('newOffsets' long[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x0073: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0075: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0077: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0078: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r9 I:java.lang.Object A[D('newTimesUs' long[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x007b: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.flags int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x007d: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x007f: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0080: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r4 I:java.lang.Object A[D('newFlags' int[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x0083: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0085: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0087: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0088: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r7 I:java.lang.Object A[D('newSizes' int[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x008b: IGET  (r10 I:byte[][]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.encryptionKeys byte[][] A[Catch:\{ all \-\> 0x00ec \}]\l0x008d: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x008f: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0090: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r3 I:java.lang.Object A[D('newEncryptionKeys' byte[][])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x0093: IGET  (r10 I:com.google.android.exoplayer2.Format[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.formats com.google.android.exoplayer2.Format[] A[Catch:\{ all \-\> 0x00ec \}]\l0x0095: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x0097: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x0098: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r5 I:java.lang.Object A[D('newFormats' com.google.android.exoplayer2.Format[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x009b: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sourceIds int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x009d: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x009f: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00a0: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r8 I:java.lang.Object A[D('newSourceIds' int[])])\l  (r12 I:int)\l  (r1 I:int A[D('beforeWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00a3: IGET  (r0 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x00a5: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00a7: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00a8: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r6 I:java.lang.Object A[D('newOffsets' long[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00ab: IGET  (r10 I:long[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00ad: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00ae: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r9 I:java.lang.Object A[D('newTimesUs' long[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00b1: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.flags int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00b3: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00b4: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r4 I:java.lang.Object A[D('newFlags' int[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00b7: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00b9: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00ba: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r7 I:java.lang.Object A[D('newSizes' int[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00bd: IGET  (r10 I:byte[][]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.encryptionKeys byte[][] A[Catch:\{ all \-\> 0x00ec \}]\l0x00bf: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00c0: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r3 I:java.lang.Object A[D('newEncryptionKeys' byte[][])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00c3: IGET  (r10 I:com.google.android.exoplayer2.Format[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.formats com.google.android.exoplayer2.Format[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00c5: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00c6: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r5 I:java.lang.Object A[D('newFormats' com.google.android.exoplayer2.Format[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00c9: IGET  (r10 I:int[]) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sourceIds int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00cb: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00cc: INVOKE  \l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r8 I:java.lang.Object A[D('newSourceIds' int[])])\l  (r1 I:int A[D('beforeWrap' int)])\l  (r0 I:int A[D('afterWrap' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x00ec \}]\l0x00cf: IPUT  \l  (r6 I:long[] A[D('newOffsets' long[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00d1: IPUT  \l  (r9 I:long[] A[D('newTimesUs' long[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00d3: IPUT  \l  (r4 I:int[] A[D('newFlags' int[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.flags int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00d5: IPUT  \l  (r7 I:int[] A[D('newSizes' int[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00d7: IPUT  \l  (r3 I:byte[][] A[D('newEncryptionKeys' byte[][])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.encryptionKeys byte[][] A[Catch:\{ all \-\> 0x00ec \}]\l0x00d9: IPUT  \l  (r5 I:com.google.android.exoplayer2.Format[] A[D('newFormats' com.google.android.exoplayer2.Format[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.formats com.google.android.exoplayer2.Format[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00db: IPUT  \l  (r8 I:int[] A[D('newSourceIds' int[])])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sourceIds int[] A[Catch:\{ all \-\> 0x00ec \}]\l0x00dd: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00de: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x00e0: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l0x00e2: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x00e4: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l0x00e6: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x00ec \}]\l0x00e8: IPUT  \l  (r2 I:int A[D('newCapacity' int)])\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x00ec|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x00ec: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x00ed|0x00ed: MONITOR_EXIT  (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ee|0x00ee: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00ef|0x00ef: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x00f2|SYNTHETIC\lSplitter:B:22:0x00f2\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x00f2\l|0x00f2: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}, TRY_ENTER]\l0x00f4: ARITH  (r10 I:int) = (r10 I:int) + (1 int) A[Catch:\{ all \-\> 0x00ec \}]\l0x00f6: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x00f8: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}]\l0x00fa: IGET  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x00fc|0x00fc: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009 A[Catch:\{ all \-\> 0x00ec \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x00fe|0x00fe: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00ec \}]\l0x00ff: IPUT  \l  (r10 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int A[Catch:\{ all \-\> 0x00ec \}, TRY_LEAVE]\l}"];
MethodNode[shape=record,label="{public synchronized void com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSample((r13 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[IMMUTABLE_TYPE, THIS]), (r14 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('sampleFlags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:long A[D('offset' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:byte[] A[D('encryptionKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x00a5\-0x00ec: r0 'afterWrap' int\l  0x006b\-0x00ec: r1 'beforeWrap' int\l  0x0057\-0x00ec: r2 'newCapacity' int\l  0x0063\-0x00ec: r3 'newEncryptionKeys' byte[][]\l  0x005f\-0x00ec: r4 'newFlags' int[]\l  0x0065\-0x00ec: r5 'newFormats' com.google.android.exoplayer2.Format[]\l  0x005b\-0x00ec: r6 'newOffsets' long[]\l  0x0061\-0x00ec: r7 'newSizes' int[]\l  0x0059\-0x00ec: r8 'newSourceIds' int[]\l  0x005d\-0x00ec: r9 'newTimesUs' long[]\l  ?\-0x0102: r14 'timeUs' long\l  ?\-0x0102: r16 'sampleFlags' int\l  ?\-0x0102: r17 'offset' long\l  ?\-0x0102: r19 'size' int\l  ?\-0x0102: r20 'encryptionKey' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_2 -> Node_18;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_6;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_14;
Node_22 -> Node_23;
Node_22 -> Node_18;
Node_23 -> Node_24;
Node_24 -> Node_6;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_6;
}

