digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.discardUpstreamSamples(I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.getWriteIndex():int type: VIRTUAL \l0x0004: ARITH  (r0 I:int) = (r4 I:int) \- (r9 I:int A[D('discardFromIndex' int)]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char] A[D('discardCount' int)]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char] A[D('discardCount' int)]) \> (r4 I:?[int, byte, short, char])  \-\> B:11:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r4 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('discardCount' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.absoluteReadIndex int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: RETURN  (r4 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002e \l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r4 I:int) + (\-1 int) \l0x0023: IGET  (r4 I:long[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] \l0x0025: AGET  (r4 I:?[long, double]) = \l  (r4 I:?[long, double][])\l  (r2 I:?[int, short, byte, char] A[D('lastWriteIndex' int)])\l \l0x0027: IGET  (r6 I:int[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] \l0x0029: AGET  (r6 I:?[int, float]) = \l  (r6 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('lastWriteIndex' int)])\l \l0x002b: CAST  (r6 I:long) = (long) (r6 I:int) \l0x002c: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int \l0x0033: ARITH  (r4 I:int) = (r4 I:int) \- (r0 I:int A[D('discardCount' int)]) \l0x0034: IPUT  \l  (r4 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int \l0x0036: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int \l0x0038: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int \l0x003a: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x003b: ARITH  (r4 I:int) = (r4 I:int) \- (r0 I:int A[D('discardCount' int)]) \l0x003c: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int \l0x003e: ARITH  (r4 I:int) = (r4 I:int) % (r5 I:int) \l0x003f: IPUT  \l  (r4 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int \l0x0041: CONST  (r4 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x0043: IPUT  \l  (r4 I:long)\l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestQueuedTimestampUs long \l0x0045: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int \l0x0047: ARITH  (r1 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \< (0 ?[int, byte, short, char])  \-\> B:21:0x0066 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int \l0x004d: ARITH  (r4 I:int) = (r4 I:int) + (r1 I:int A[D('i' int)]) \l0x004e: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int \l0x0050: ARITH  (r3 I:int) = (r4 I:int) % (r5 I:int) \l0x0052: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestQueuedTimestampUs long \l0x0054: IGET  (r6 I:long[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.timesUs long[] \l0x0056: AGET  (r6 I:?[long, double]) = \l  (r6 I:?[long, double][])\l  (r3 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x0058: INVOKE  (r4 I:long) = (r4 I:long), (r6 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x005c: IPUT  \l  (r4 I:long)\l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.largestQueuedTimestampUs long \l0x005e: IGET  (r4 I:int[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.flags int[] \l0x0060: AGET  (r4 I:?[int, float]) = \l  (r4 I:?[int, float][])\l  (r3 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x0062: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0064|0x0064: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0066|0x0066: IGET  (r4 I:long[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] \l0x0068: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeWriteIndex int \l0x006a: AGET  (r4 I:?[long, double]) = (r4 I:?[long, double][]), (r5 I:?[int, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (\-1 int) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.discardUpstreamSamples((r8 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('discardFromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0023\-0x002e: r2 'lastWriteIndex' int\l  0x0052\-0x0066: r3 'sampleIndex' int\l  0x0006\-0x006f: r0 'discardCount' int\l  0x0049\-0x006f: r1 'i' int\l  0x006d\-0x006f: r3 'sampleIndex' int\l  ?\-0x006f: r9 'discardFromIndex' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_10;
Node_16 -> Node_15;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_10;
Node_22 -> Node_18;
}

