digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.skipAll()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0033 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: RETURN  (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|SYNTHETIC\lSplitter:B:7:0x0009\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0009\l|0x0009: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x0033 \}, TRY_ENTER]\l0x000b: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0033 \}]\l0x000d: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) A[Catch:\{ all \-\> 0x0033 \}]\l0x000e: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x0033 \}]\l0x0010: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x0033 \}]\l0x0012: ARITH  (r0 I:int) = (r1 I:int) % (r2 I:int) A[Catch:\{ all \-\> 0x0033 \}]\l0x0014: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x0033 \}]\l0x0016: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0033 \}]\l0x0018: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) A[Catch:\{ all \-\> 0x0033 \}]\l0x0019: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.capacity int A[Catch:\{ all \-\> 0x0033 \}]\l0x001b: ARITH  (r1 I:int) = (r1 I:int) % (r2 I:int) A[Catch:\{ all \-\> 0x0033 \}]\l0x001c: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.relativeReadIndex int A[Catch:\{ all \-\> 0x0033 \}]\l0x001e: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.absoluteReadIndex int A[Catch:\{ all \-\> 0x0033 \}]\l0x0020: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0033 \}]\l0x0022: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) A[Catch:\{ all \-\> 0x0033 \}]\l0x0023: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.absoluteReadIndex int A[Catch:\{ all \-\> 0x0033 \}]\l0x0025: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0033 \}]\l0x0026: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.queueSize int A[Catch:\{ all \-\> 0x0033 \}]\l0x0028: IGET  (r1 I:long[]) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.offsets long[] A[Catch:\{ all \-\> 0x0033 \}]\l0x002a: AGET  (r2 I:?[long, double]) = \l  (r1 I:?[long, double][])\l  (r0 I:?[int, short, byte, char] A[D('lastSampleIndex' int)])\l A[Catch:\{ all \-\> 0x0033 \}]\l0x002c: IGET  (r1 I:int[]) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.sizes int[] A[Catch:\{ all \-\> 0x0033 \}]\l0x002e: AGET  (r1 I:?[int, float]) = \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char] A[D('lastSampleIndex' int)])\l A[Catch:\{ all \-\> 0x0033 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: CAST  (r4 I:long) = (long) (r1 I:int) \l0x0031: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0033: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized long com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.skipAll((r6 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0014\-0x0033: r0 'lastSampleIndex' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

