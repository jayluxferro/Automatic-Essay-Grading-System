digraph "CFG forcom.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sniff(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0003: INVOKE  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.reset():void type: VIRTUAL \l0x0006: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0008: IGET  (r1 I:byte[]) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000c: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r0 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x000f: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0011: INVOKE  (r1 I:int) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0015: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.HEADER_ID int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sniff((r3 'this' I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x001a: r4 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

