digraph "CFG forcom.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.parseSamples(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.remainingSampleCount int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0026 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0008: INVOKE  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.reset():void type: VIRTUAL \l0x000b: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x000d: IGET  (r0 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000f: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:byte[])\l  (r6 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x0012: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.trackOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x0014: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.dataScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0016: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0019: IGET  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sampleBytesWritten int \l0x001b: ARITH  (r0 I:int) = (r0 I:int) + (3 int) \l0x001d: IPUT  \l  (r0 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sampleBytesWritten int \l0x001f: IGET  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.remainingSampleCount int \l0x0021: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0023: IPUT  \l  (r0 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.remainingSampleCount int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: IGET  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sampleBytesWritten int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.trackOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x002c: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.timestampUs long \l0x002e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002f: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor)\l com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.sampleBytesWritten int \l0x0031: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor.parseSamples((r8 'this' I:com.google.android.exoplayer2.extractor.rawcc.RawCcExtractor A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0035: r9 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

