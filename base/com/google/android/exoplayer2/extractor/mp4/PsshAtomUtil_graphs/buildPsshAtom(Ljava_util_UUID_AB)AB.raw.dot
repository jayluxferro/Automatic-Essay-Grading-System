digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.PsshAtomUtil.buildPsshAtom(Ljava\/util\/UUID;[B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[] A[D('data' byte[])]) \l0x0001: ARITH  (r1 I:int) = (r2 I:int) + (32 int) \l0x0003: INVOKE  (r0 I:java.nio.ByteBuffer) = (r1 I:int A[D('psshBoxLength' int)]) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x0007: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r1 I:int A[D('psshBoxLength' int)])\l java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x000a: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_pssh int \l0x000c: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r2 I:int)\l java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x000f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r2 I:int)\l java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x0013: INVOKE  (r2 I:long) = (r4 I:java.util.UUID A[D('uuid' java.util.UUID)]) java.util.UUID.getMostSignificantBits():long type: VIRTUAL \l0x0017: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r2 I:long)\l java.nio.ByteBuffer.putLong(long):java.nio.ByteBuffer type: VIRTUAL \l0x001a: INVOKE  (r2 I:long) = (r4 I:java.util.UUID A[D('uuid' java.util.UUID)]) java.util.UUID.getLeastSignificantBits():long type: VIRTUAL \l0x001e: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r2 I:long)\l java.nio.ByteBuffer.putLong(long):java.nio.ByteBuffer type: VIRTUAL \l0x0021: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[] A[D('data' byte[])]) \l0x0022: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r2 I:int)\l java.nio.ByteBuffer.putInt(int):java.nio.ByteBuffer type: VIRTUAL \l0x0025: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l  (r5 I:byte[] A[D('data' byte[])])\l java.nio.ByteBuffer.put(byte[]):java.nio.ByteBuffer type: VIRTUAL \l0x0028: INVOKE  (r2 I:byte[]) = \l  (r0 I:java.nio.ByteBuffer A[D('psshBox' java.nio.ByteBuffer)])\l java.nio.ByteBuffer.array():byte[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x002c|0x002c: RETURN  (r2 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.exoplayer2.extractor.mp4.PsshAtomUtil.buildPsshAtom((r4 I:java.util.UUID A[D('uuid' java.util.UUID), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x002c: r0 'psshBox' java.nio.ByteBuffer\l  0x0003\-0x002c: r1 'psshBoxLength' int\l  ?\-0x002c: r4 'uuid' java.util.UUID\l  ?\-0x002c: r5 'data' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

