digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Atom.getAtomTypeString(I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000b: ARITH  (r1 I:int) = (r2 I:int A[D('type' int)]) \>\> (24 int) \l0x000d: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x000f: CAST  (r1 I:char) = (char) (r1 I:int) \l0x0010: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0014: ARITH  (r1 I:int) = (r2 I:int A[D('type' int)]) \>\> (16 int) \l0x0016: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0018: CAST  (r1 I:char) = (char) (r1 I:int) \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x001d: ARITH  (r1 I:int) = (r2 I:int A[D('type' int)]) \>\> (8 int) \l0x001f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0021: CAST  (r1 I:char) = (char) (r1 I:int) \l0x0022: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0026: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('type' int)]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0028: CAST  (r1 I:char) = (char) (r1 I:int) \l0x0029: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0031|0x0031: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.exoplayer2.extractor.mp4.Atom.getAtomTypeString((r2 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0031: r2 'type' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

