digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.init(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Track;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/DefaultSampleValues;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:java.lang.Object A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0004: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) = (com.google.android.exoplayer2.extractor.mp4.Track) (r0 I:?[OBJECT, ARRAY]) \l0x0006: IPUT  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Track)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0008: INVOKE  (r0 I:java.lang.Object) = \l  (r4 I:java.lang.Object A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x000c: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = (com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) (r0 I:?[OBJECT, ARRAY]) \l0x000e: IPUT  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.defaultSampleValues com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l0x0010: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0012: IGET  (r1 I:com.google.android.exoplayer2.Format) = \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.format com.google.android.exoplayer2.Format \l0x0014: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r1 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x0017: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.reset():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.init((r2 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x001a: r3 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  ?\-0x001a: r4 'defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

