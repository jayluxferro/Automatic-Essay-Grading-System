digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.findEsdsPosition(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: ARITH  (r3 I:int) = (r0 I:int A[D('childAtomPosition' int)]) \- (r6 I:int A[D('position' int)]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:11:0x0024 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('childAtomPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x000b: INVOKE  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char] A[D('childAtomSize' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST_STR  (r4 I:java.lang.String) =  \"childAtomSize should be positive\" \l0x0014: INVOKE  (r3 I:boolean), (r4 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean, java.lang.Object):void type: STATIC \l0x0017: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x001b: SGET  (r3 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_esds int \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childType' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN  (r0 I:int A[D('childAtomPosition' int)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: ARITH  (r0 I:int A[D('childAtomPosition' int)]) = (r0 I:int A[D('childAtomPosition' int)]) + (r1 I:int A[D('childAtomSize' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, short, byte, char] A[D('childAtomPosition' int)]) = (\-1 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.extractor.mp4.AtomParsers.findEsdsPosition((r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x001f: r0 'childAtomPosition' int\l  0x000f\-0x001f: r1 'childAtomSize' int\l  0x001b\-0x001f: r2 'childType' int\l  0x0020\-0x0024: r1 'childAtomSize' int\l  0x0022\-0x0024: r2 'childType' int\l  0x0020\-0x0025: r0 'childAtomPosition' int\l  ?\-0x0025: r5 'parent' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0025: r6 'position' int\l  ?\-0x0025: r7 'size' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_9 -> Node_6;
Node_10 -> Node_1;
Node_11 -> Node_8;
}

