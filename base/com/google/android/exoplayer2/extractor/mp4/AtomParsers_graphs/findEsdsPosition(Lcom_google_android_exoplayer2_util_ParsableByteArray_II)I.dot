digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.findEsdsPosition(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5.getPosition()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'childAtomPosition' int) = (r0v0 'childAtomPosition' int), (r0v3 'childAtomPosition' int) binds: [B:0:0x0000, B:9:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0004\-\>B:9:0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if ((r0 \- r6) \>= r7) goto L_0x0024\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|r5.setPosition(r0)\lint r1 = r5.readInt()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r1 \<= 0) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|r3 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v4 boolean) binds: [B:8:0x0020, B:5:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkArgument(r3, \"childAtomSize should be positive\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|if (r5.readInt() != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_esds) goto L_0x0022\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|r3 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:9:0x0022\l|int r0 = r0 + r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.extractor.mp4.AtomParsers.findEsdsPosition((r5v0 'parent' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'position' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'size' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_12[style=dashed];
Node_8 -> Node_6;
Node_9 -> Node_1;
Node_11 -> Node_10;
Node_12 -> Node_13;
}

