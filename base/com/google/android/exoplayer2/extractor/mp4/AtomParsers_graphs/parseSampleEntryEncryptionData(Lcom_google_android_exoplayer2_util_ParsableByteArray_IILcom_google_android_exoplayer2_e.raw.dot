digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSampleEntryEncryptionData(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;IILcom\/google\/android\/exoplayer2\/extractor\/mp4\/AtomParsers$StsdData;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r2 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: ARITH  (r4 I:int) = (r2 I:int A[D('childPosition' int)]) \- (r8 I:int A[D('position' int)]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:11:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('childPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x000c: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char] A[D('childAtomSize' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST_STR  (r6 I:java.lang.String) =  \"childAtomSize should be positive\" \l0x0015: INVOKE  (r4 I:boolean), (r6 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean, java.lang.Object):void type: STATIC \l0x0018: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x001c: SGET  (r4 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sinf int \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r3 I:android.util.Pair) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('childPosition' int)])\l  (r0 I:int A[D('childAtomSize' int)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSinfFromParent(com.google.android.exoplayer2.util.ParsableByteArray, int, int):android.util.Pair type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\>)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IGET  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[]) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.trackEncryptionBoxes com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[] \l0x0028: IGET  (r4 I:java.lang.Object) = \l  (r3 I:android.util.Pair A[D('result' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\>)])\l android.util.Pair.second java.lang.Object \l0x002a: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox) = (com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox) (r4 I:?[OBJECT, ARRAY]) \l0x002c: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char] A[D('entryIndex' int)])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x002e: IGET  (r4 I:java.lang.Object) = \l  (r3 I:android.util.Pair A[D('result' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\>)])\l android.util.Pair.first java.lang.Object \l0x0030: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  (r5 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: RETURN  (r5 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: ARITH  (r2 I:int A[D('childPosition' int)]) = (r2 I:int A[D('childPosition' int)]) + (r0 I:int A[D('childAtomSize' int)]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSampleEntryEncryptionData((r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('entryIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0010\-0x0036: r0 'childAtomSize' int\l  0x001c\-0x0036: r1 'childAtomType' int\l  0x0024\-0x0036: r3 'result' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\>\l  0x0037\-0x003a: r0 'childAtomSize' int\l  0x0039\-0x003a: r1 'childAtomType' int\l  0x0005\-0x003a: r2 'childPosition' int\l  ?\-0x003a: r7 'parent' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x003a: r8 'position' int\l  ?\-0x003a: r9 'size' int\l  ?\-0x003a: r10 'out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData\l  ?\-0x003a: r11 'entryIndex' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_12 -> Node_6;
Node_13 -> Node_1;
}

