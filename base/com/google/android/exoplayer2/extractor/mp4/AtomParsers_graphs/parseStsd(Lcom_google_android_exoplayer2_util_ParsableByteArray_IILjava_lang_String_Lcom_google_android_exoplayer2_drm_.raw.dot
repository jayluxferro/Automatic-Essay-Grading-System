digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseStsd(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;IILjava\/lang\/String;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;Z)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/AtomParsers$StsdData;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0004: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0007: INVOKE  (r20 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000b: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData \l0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('numberOfEntries' int)])\l \l0x000f: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.\<init\>(int):void type: DIRECT \l0x0012: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('numberOfEntries' int)])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r9 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:70:0x00e9 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r3 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x001b: INVOKE  (r4 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r4 I:?[int, byte, short, char] A[D('childAtomSize' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:26:0x0064 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CONST_STR  (r5 I:java.lang.String) =  \"childAtomSize should be positive\" \l0x0024: INVOKE  (r1 I:boolean), (r5 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean, java.lang.Object):void type: STATIC \l0x0027: INVOKE  (r2 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x002b: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_avc1 int \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_avc3 int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_encv int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mp4v int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_hvc1 int \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_hev1 int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_s263 int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_vp08 int \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_vp09 int \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0066 \l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|0x004f: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0051: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackId' int)])\l \l0x0053: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rotationDegrees' int)])\l \l0x0055: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x0057: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int A[D('childAtomType' int)])\l  (r3 I:int A[D('childStartPosition' int)])\l  (r4 I:int A[D('childAtomSize' int)])\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l  (r9 I:int A[D('i' int)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseVideoSampleEntry(com.google.android.exoplayer2.util.ParsableByteArray, int, int, int, int, int, com.google.android.exoplayer2.drm.DrmInitData, com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData, int):void type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|0x005a: ARITH  (r1 I:int) = (r3 I:int A[D('childStartPosition' int)]) + (r4 I:int A[D('childAtomSize' int)]) \l0x005c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x005e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0061: ARITH  (r9 I:int A[D('i' int)]) = (r9 I:int A[D('i' int)]) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0064|0x0064: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0066|0x0066: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mp4a int \l}"];
Node_28 [shape=record,label="{28\:\ 0x0068|0x0068: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_29 [shape=record,label="{29\:\ 0x006a|0x006a: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_enca int \l}"];
Node_30 [shape=record,label="{30\:\ 0x006c|0x006c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_31 [shape=record,label="{31\:\ 0x006e|0x006e: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_ac_3 int \l}"];
Node_32 [shape=record,label="{32\:\ 0x0070|0x0070: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_33 [shape=record,label="{33\:\ 0x0072|0x0072: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_ec_3 int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0074|0x0074: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_35 [shape=record,label="{35\:\ 0x0076|0x0076: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_dtsc int \l}"];
Node_36 [shape=record,label="{36\:\ 0x0078|0x0078: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_37 [shape=record,label="{37\:\ 0x007a|0x007a: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_dtse int \l}"];
Node_38 [shape=record,label="{38\:\ 0x007c|0x007c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_39 [shape=record,label="{39\:\ 0x007e|0x007e: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_dtsh int \l}"];
Node_40 [shape=record,label="{40\:\ 0x0080|0x0080: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_41 [shape=record,label="{41\:\ 0x0082|0x0082: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_dtsl int \l}"];
Node_42 [shape=record,label="{42\:\ 0x0084|0x0084: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_43 [shape=record,label="{43\:\ 0x0086|0x0086: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_samr int \l}"];
Node_44 [shape=record,label="{44\:\ 0x0088|0x0088: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_45 [shape=record,label="{45\:\ 0x008a|0x008a: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sawb int \l}"];
Node_46 [shape=record,label="{46\:\ 0x008c|0x008c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_47 [shape=record,label="{47\:\ 0x008e|0x008e: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_lpcm int \l}"];
Node_48 [shape=record,label="{48\:\ 0x0090|0x0090: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_49 [shape=record,label="{49\:\ 0x0092|0x0092: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sowt int \l}"];
Node_50 [shape=record,label="{50\:\ 0x0094|0x0094: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_51 [shape=record,label="{51\:\ 0x0096|0x0096: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE__mp3 int \l}"];
Node_52 [shape=record,label="{52\:\ 0x0098|0x0098: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x009e \l}"];
Node_53 [shape=record,label="{53\:\ 0x009a|0x009a: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_alac int \l}"];
Node_54 [shape=record,label="{54\:\ 0x009c|0x009c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x00b3 \l}"];
Node_55 [shape=record,label="{55\:\ 0x009e|0x009e: MOVE  (r10 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00a0: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('childAtomType' int)])\l \l0x00a1: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('childStartPosition' int)])\l \l0x00a2: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('childAtomSize' int)])\l \l0x00a3: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackId' int)])\l \l0x00a5: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY] A[D('language' java.lang.String)]) \l0x00a7: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isQuickTime' boolean)])\l \l0x00a9: MOVE  (r17 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x00ab: MOVE  (r18 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x00ad: MOVE  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x00af: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r11 I:int)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:int)\l  (r15 I:java.lang.String)\l  (r16 I:boolean)\l  (r17 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r18 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l  (r19 I:int)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseAudioSampleEntry(com.google.android.exoplayer2.util.ParsableByteArray, int, int, int, int, java.lang.String, boolean, com.google.android.exoplayer2.drm.DrmInitData, com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData, int):void type: STATIC \l}"];
Node_56 [shape=record,label="{56\:\ 0x00b3|0x00b3: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_TTML int \l}"];
Node_57 [shape=record,label="{57\:\ 0x00b5|0x00b5: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00c7 \l}"];
Node_58 [shape=record,label="{58\:\ 0x00b7|0x00b7: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tx3g int \l}"];
Node_59 [shape=record,label="{59\:\ 0x00b9|0x00b9: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00c7 \l}"];
Node_60 [shape=record,label="{60\:\ 0x00bb|0x00bb: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_wvtt int \l}"];
Node_61 [shape=record,label="{61\:\ 0x00bd|0x00bd: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00c7 \l}"];
Node_62 [shape=record,label="{62\:\ 0x00bf|0x00bf: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stpp int \l}"];
Node_63 [shape=record,label="{63\:\ 0x00c1|0x00c1: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00c7 \l}"];
Node_64 [shape=record,label="{64\:\ 0x00c3|0x00c3: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_c608 int \l}"];
Node_65 [shape=record,label="{65\:\ 0x00c5|0x00c5: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x00d3 \l}"];
Node_66 [shape=record,label="{66\:\ 0x00c7|0x00c7: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00c9: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackId' int)])\l \l0x00cb: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY] A[D('language' java.lang.String)]) \l0x00cd: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x00cf: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int A[D('childAtomType' int)])\l  (r3 I:int A[D('childStartPosition' int)])\l  (r4 I:int A[D('childAtomSize' int)])\l  (r5 I:int)\l  (r6 I:java.lang.String)\l  (r7 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTextSampleEntry(com.google.android.exoplayer2.util.ParsableByteArray, int, int, int, int, java.lang.String, com.google.android.exoplayer2.drm.DrmInitData, com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData):void type: STATIC \l}"];
Node_67 [shape=record,label="{67\:\ 0x00d3|0x00d3: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_camm int \l}"];
Node_68 [shape=record,label="{68\:\ 0x00d5|0x00d5: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x005a \l}"];
Node_69 [shape=record,label="{69\:\ 0x00d7|0x00d7: INVOKE  (r1 I:java.lang.String) = (r22 I:int A[D('trackId' int)]) java.lang.Integer.toString(int):java.lang.String type: STATIC \l0x00db: CONST_STR  (r5 I:java.lang.String) =  \"application\/x\-camera\-motion\" \l0x00dd: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00de: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00df: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x00e1: INVOKE  (r1 I:com.google.android.exoplayer2.Format) = \l  (r1 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.String)\l  (r7 I:int)\l  (r0 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.Format.createSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.Format type: STATIC \l0x00e5: IPUT  \l  (r1 I:com.google.android.exoplayer2.Format)\l  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.format com.google.android.exoplayer2.Format \l}"];
Node_70 [shape=record,label="{70\:\ 0x00e9|0x00e9: RETURN  \l  (r8 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseStsd((r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('stsd' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('trackId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[D('rotationDegrees' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:java.lang.String A[D('language' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:boolean A[D('isQuickTime' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002b\-0x0064: r2 'childAtomType' int\l  0x0066\-0x00e9: r2 'childAtomType' int\l  0x001b\-0x00e9: r3 'childStartPosition' int\l  0x001f\-0x00e9: r4 'childAtomSize' int\l  0x0012\-0x00e9: r8 'out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData\l  0x0013\-0x00e9: r9 'i' int\l  0x000b\-0x00e9: r20 'numberOfEntries' int\l  ?\-0x00e9: r21 'stsd' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00e9: r22 'trackId' int\l  ?\-0x00e9: r23 'rotationDegrees' int\l  ?\-0x00e9: r24 'language' java.lang.String\l  ?\-0x00e9: r25 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  ?\-0x00e9: r26 'isQuickTime' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_70;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_24;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_24;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_24;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_1;
Node_26 -> Node_6;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_55;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_55;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_55;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_55;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_55;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_55;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_55;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_55;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_55;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_55;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_55;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_55;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_55;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_25;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_66;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_66;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_66;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_66;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_67;
Node_66 -> Node_25;
Node_67 -> Node_68;
Node_68 -> Node_25;
Node_68 -> Node_69[style=dashed];
Node_69 -> Node_25;
}

