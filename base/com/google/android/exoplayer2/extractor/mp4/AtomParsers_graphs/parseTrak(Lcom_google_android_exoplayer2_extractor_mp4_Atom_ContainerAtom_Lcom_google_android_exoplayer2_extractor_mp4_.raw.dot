digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTrak(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$LeafAtom;JLcom\/google\/android\/exoplayer2\/drm\/DrmInitData;Z)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Track;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mdia int \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r32 I:?[OBJECT, ARRAY] A[D('trak' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0004: INVOKE  (r26 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x0008: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_hdlr int \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('mdia' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x000c: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x0010: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0012: INVOKE  (r30 I:int) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseHdlr(com.google.android.exoplayer2.util.ParsableByteArray):int type: STATIC \l0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0017: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackType' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: RETURN  (r9 I:com.google.android.exoplayer2.extractor.mp4.Track) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tkhd int \l0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r32 I:?[OBJECT, ARRAY] A[D('trak' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0021: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x0025: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0027: INVOKE  (r29 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTkhd(com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData type: STATIC \l0x002b: CONST  (r2 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0030: CMP_L  (r2 I:int) = (r34 I:long A[D('duration' long)]), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: INVOKE  (r34 I:long A[D('duration' long)]) = \l  (r29 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData A[D('tkhdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.TkhdData.access$000(com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData):long type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r33 I:?[OBJECT, ARRAY] A[D('mvhd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l \l0x003a: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x003c: INVOKE  (r6 I:long) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseMvhd(com.google.android.exoplayer2.util.ParsableByteArray):long type: STATIC \l0x0040: CONST  (r2 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0045: CMP_L  (r2 I:int) = (r34 I:long A[D('duration' long)]), (r2 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x009f \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: CONST  (r16 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_minf int \l0x0050: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('mdia' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0052: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x0056: SGET  (r3 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stbl int \l0x0058: INVOKE  (r27 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r3 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x005c: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mdhd int \l0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('mdia' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0060: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x0064: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0066: INVOKE  (r25 I:android.util.Pair) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseMdhd(com.google.android.exoplayer2.util.ParsableByteArray):android.util.Pair type: STATIC \l0x006a: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stsd int \l0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r27 I:?[OBJECT, ARRAY] A[D('stbl' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x006e: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x0072: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0074: INVOKE  (r9 I:int) = \l  (r29 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData A[D('tkhdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.TkhdData.access$100(com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData):int type: STATIC \l0x0078: INVOKE  (r10 I:int) = \l  (r29 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData A[D('tkhdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.TkhdData.access$200(com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData):int type: STATIC \l0x007c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('mdhdData' android.util.Pair\<java.lang.Long, java.lang.String\>)])\l \l0x007e: IGET  (r11 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.second java.lang.Object \l0x0080: CHECK_CAST  (r11 I:java.lang.String) = (java.lang.String) (r11 I:?[OBJECT, ARRAY]) \l0x0082: MOVE  (r12 I:?[OBJECT, ARRAY]) = \l  (r36 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x0084: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r37 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isQuickTime' boolean)])\l \l0x0086: INVOKE  (r28 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:java.lang.String)\l  (r12 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r13 I:boolean)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseStsd(com.google.android.exoplayer2.util.ParsableByteArray, int, int, java.lang.String, com.google.android.exoplayer2.drm.DrmInitData, boolean):com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData type: STATIC \l0x008a: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_edts int \l0x008c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r32 I:?[OBJECT, ARRAY] A[D('trak' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x008e: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x0092: INVOKE  (r24 I:android.util.Pair) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseEdts(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom):android.util.Pair type: STATIC \l0x0096: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x0098: IGET  (r2 I:com.google.android.exoplayer2.Format) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.format com.google.android.exoplayer2.Format \l}"];
Node_11 [shape=record,label="{11\:\ 0x009a|0x009a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x00a9 \l}"];
Node_12 [shape=record,label="{12\:\ 0x009c|0x009c: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x009f|0x009f: CONST  (r4 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x00a2: MOVE  (r2 I:?[long, double]) = (r34 I:?[long, double] A[D('duration' long)]) \l0x00a4: INVOKE  (r16 I:long) = \l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:long A[D('movieTimescale' long)])\l com.google.android.exoplayer2.util.Util.scaleLargeTimestamp(long, long, long):long type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x00a9|0x00a9: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.extractor.mp4.Track) =  com.google.android.exoplayer2.extractor.mp4.Track \l0x00ab: INVOKE  (r10 I:int) = \l  (r29 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData A[D('tkhdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.TkhdData.access$100(com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData):int type: STATIC \l0x00af: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('mdhdData' android.util.Pair\<java.lang.Long, java.lang.String\>)])\l \l0x00b1: IGET  (r2 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.first java.lang.Object \l0x00b3: CHECK_CAST  (r2 I:java.lang.Long) = (java.lang.Long) (r2 I:?[OBJECT, ARRAY]) \l0x00b5: INVOKE  (r12 I:long) = (r2 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x00b9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x00bb: IGET  (r0 I:com.google.android.exoplayer2.Format) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.format com.google.android.exoplayer2.Format \l0x00bd: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00bf: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x00c1: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.requiredSampleTransformation int \l0x00c3: MOVE  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c5: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x00c7: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.trackEncryptionBoxes com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[] \l0x00c9: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00cb: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x00cd: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.nalUnitLengthFieldLength int \l0x00cf: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d1: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('edtsData' android.util.Pair\<long[], long[]\>)])\l \l0x00d3: IGET  (r0 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.first java.lang.Object \l0x00d5: MOVE  (r22 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00d7: CHECK_CAST  (r22 I:long[]) = (long[]) (r22 I:?[OBJECT, ARRAY]) \l0x00d9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('edtsData' android.util.Pair\<long[], long[]\>)])\l \l0x00db: IGET  (r0 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.second java.lang.Object \l0x00dd: MOVE  (r23 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00df: CHECK_CAST  (r23 I:long[]) = (long[]) (r23 I:?[OBJECT, ARRAY]) \l0x00e1: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackType' int)])\l \l0x00e3: MOVE  (r14 I:?[long, double]) = (r6 I:?[long, double] A[D('movieTimescale' long)]) \l0x00e4: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.Track)\l  (r10 I:int)\l  (r11 I:int)\l  (r12 I:long)\l  (r14 I:long)\l  (r16 I:long A[D('durationUs' long)])\l  (r18 I:com.google.android.exoplayer2.Format)\l  (r19 I:int)\l  (r20 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[])\l  (r21 I:int)\l  (r22 I:long[])\l  (r23 I:long[])\l com.google.android.exoplayer2.extractor.mp4.Track.\<init\>(int, int, long, long, long, com.google.android.exoplayer2.Format, int, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[], int, long[], long[]):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.mp4.Track com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTrak((r32 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('trak' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('mvhd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:boolean A[D('isQuickTime' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x004e\-0x009f: r16 'durationUs' long\l  0x0096\-0x009f: r24 'edtsData' android.util.Pair\<long[], long[]\>\l  0x006a\-0x009f: r25 'mdhdData' android.util.Pair\<java.lang.Long, java.lang.String\>\l  0x005c\-0x009f: r27 'stbl' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x008a\-0x009f: r28 'stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData\l  0x0040\-0x00e8: r6 'movieTimescale' long\l  0x00a8\-0x00e8: r16 'durationUs' long\l  0x00a9\-0x00e8: r24 'edtsData' android.util.Pair\<long[], long[]\>\l  0x00a9\-0x00e8: r25 'mdhdData' android.util.Pair\<java.lang.Long, java.lang.String\>\l  0x0008\-0x00e8: r26 'mdia' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x00a9\-0x00e8: r27 'stbl' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x00a9\-0x00e8: r28 'stsdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData\l  0x002b\-0x00e8: r29 'tkhdData' com.google.android.exoplayer2.extractor.mp4.AtomParsers$TkhdData\l  0x0016\-0x00e8: r30 'trackType' int\l  ?\-0x00e8: r32 'trak' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  ?\-0x00e8: r33 'mvhd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  ?\-0x00e8: r34 'duration' long\l  ?\-0x00e8: r36 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  ?\-0x00e8: r37 'isQuickTime' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_3;
Node_13 -> Node_10;
Node_14 -> Node_3;
}

