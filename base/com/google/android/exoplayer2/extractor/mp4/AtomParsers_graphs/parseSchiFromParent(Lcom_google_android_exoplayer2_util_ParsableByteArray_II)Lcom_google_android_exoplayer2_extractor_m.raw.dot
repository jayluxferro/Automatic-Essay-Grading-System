digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSchiFromParent(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;II)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackEncryptionBox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: ARITH  (r2 I:int) = (r9 I:int A[D('position' int)]) + (8 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: ARITH  (r7 I:int) = (r2 I:int A[D('childPosition' int)]) \- (r9 I:int A[D('position' int)]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r7 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:11:0x0037 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('childPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x000b: INVOKE  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000f: INVOKE  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0013: SGET  (r7 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tenc int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0035 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r7 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0018: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x001b: INVOKE  (r7 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0025: CONST  (r7 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0027: NEW_ARRAY  (r5 I:byte[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0029: ARRAY_LENGTH  (r7 I:int) = (r5 I:?[] A[D('defaultKeyId' byte[])]) \l0x002a: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r5 I:byte[] A[D('defaultKeyId' byte[])])\l  (r6 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x002d: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox) =  com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox \l0x002f: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)\l  (r4 I:boolean A[D('defaultIsEncrypted' boolean)])\l  (r3 I:int A[D('defaultInitVectorSize' int)])\l  (r5 I:byte[] A[D('defaultKeyId' byte[])])\l com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox.\<init\>(boolean, int, byte[]):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: RETURN  \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: ARITH  (r2 I:int A[D('childPosition' int)]) = (r2 I:int A[D('childPosition' int)]) + (r0 I:int A[D('childAtomSize' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSchiFromParent((r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x0032: r0 'childAtomSize' int\l  0x0013\-0x0032: r1 'childAtomType' int\l  0x0025\-0x0032: r3 'defaultInitVectorSize' int\l  0x0021\-0x0032: r4 'defaultIsEncrypted' boolean\l  0x0029\-0x0032: r5 'defaultKeyId' byte[]\l  0x0033\-0x0037: r0 'childAtomSize' int\l  0x0033\-0x0037: r1 'childAtomType' int\l  0x0004\-0x0038: r2 'childPosition' int\l  ?\-0x0038: r8 'parent' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0038: r9 'position' int\l  ?\-0x0038: r10 'size' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_1;
Node_11 -> Node_8;
}

