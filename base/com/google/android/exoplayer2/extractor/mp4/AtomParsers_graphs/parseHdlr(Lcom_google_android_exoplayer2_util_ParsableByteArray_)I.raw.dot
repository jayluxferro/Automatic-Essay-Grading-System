digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseHdlr(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('hdlr' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0005: INVOKE  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('hdlr' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0009: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_soun int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_vide int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_text int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_sbtl int \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_subt int \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0025 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_clcp int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0027 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: SGET  (r1 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_meta int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackType' int)]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002d \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|0x002d: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseHdlr((r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('hdlr' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x002e: r0 'trackType' int\l  ?\-0x002e: r2 'hdlr' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_3;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_3;
Node_19 -> Node_3;
}

