digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSinfFromParent(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;II)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: ARITH  (r2 I:int) = (r11 I:int A[D('position' int)]) + (8 int) \l0x0004: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: ARITH  (r8 I:int) = (r2 I:int A[D('childPosition' int)]) \- (r11 I:int A[D('position' int)]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r8 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:17:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('childPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x000e: INVOKE  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0012: INVOKE  (r1 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0016: SGET  (r8 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_frma int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r8 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x001e: INVOKE  (r3 I:java.lang.Integer A[D('dataFormat' java.lang.Integer)]) = (r8 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: ARITH  (r2 I:int A[D('childPosition' int)]) = (r2 I:int A[D('childPosition' int)]) + (r0 I:int A[D('childAtomSize' int)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: SGET  (r8 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_schm int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0029: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r8 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x002c: INVOKE  (r8 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0030: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.AtomParsers.TYPE_cenc int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isCencScheme' boolean)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isCencScheme' boolean)]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: SGET  (r8 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_schi int \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childAtomType' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox A[D('trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('childPosition' int)])\l  (r0 I:int A[D('childAtomSize' int)])\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSchiFromParent(com.google.android.exoplayer2.util.ParsableByteArray, int, int):com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isCencScheme' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dataFormat' java.lang.Integer)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0057 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: CONST_STR  (r9 I:java.lang.String) =  \"frma atom is mandatory\" \l0x0048: INVOKE  (r8 I:boolean), (r9 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean, java.lang.Object):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0059 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: CONST_STR  (r7 I:java.lang.String) =  \"schi\-\>tenc atom is mandatory\" \l0x004f: INVOKE  (r6 I:boolean), (r7 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean, java.lang.Object):void type: STATIC \l0x0052: INVOKE  (r6 I:android.util.Pair) = \l  (r3 I:java.lang.Object A[D('dataFormat' java.lang.Integer)])\l  (r5 I:java.lang.Object A[D('trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)])\l android.util.Pair.create(java.lang.Object, java.lang.Object):android.util.Pair type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: RETURN  \l  (r6 I:android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\>)\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0057|0x0057: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|0x0059: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\> com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseSinfFromParent((r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x0041: r0 'childAtomSize' int\l  0x0016\-0x0041: r1 'childAtomType' int\l  0x0004\-0x005c: r2 'childPosition' int\l  0x0007\-0x005c: r3 'dataFormat' java.lang.Integer\l  0x0005\-0x005c: r4 'isCencScheme' boolean\l  0x0006\-0x005c: r5 'trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\l  ?\-0x005c: r10 'parent' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x005c: r11 'position' int\l  ?\-0x005c: r12 'size' int\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;, II), Landroid\/util\/Pair, \<, Ljava\/lang\/Integer;, Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackEncryptionBox;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_6;
Node_13 -> Node_6;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_6;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_24 -> Node_20;
Node_25 -> Node_22;
Node_26 -> Node_23;
}

