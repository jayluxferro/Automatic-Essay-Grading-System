digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTextSampleEntry(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;IIIILjava\/lang\/String;Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/AtomParsers$StsdData;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r2 I:int) = (r17 I:int A[D('position' int)]) + (8 int) \l0x0002: ARITH  (r2 I:int) = (r2 I:int) + (8 int) \l0x0004: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0007: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r10 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x000d: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_TTML int \l0x000f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atomType' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: CONST_STR  (r3 I:java.lang.String) =  \"application\/ttml+xml\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.String) = (r19 I:int A[D('trackId' int)]) java.lang.Integer.toString(int):java.lang.String type: STATIC \l0x0019: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x001b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x001d: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('language' java.lang.String)]) \l0x001f: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l \l0x0021: INVOKE  (r2 I:com.google.android.exoplayer2.Format) = \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.String)\l  (r8 I:int)\l  (r9 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r10 I:long A[D('subsampleOffsetUs' long)])\l  (r12 I:java.util.List A[D('initializationData' java.util.List\<byte[]\>)])\l com.google.android.exoplayer2.Format.createTextSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.String, int, com.google.android.exoplayer2.drm.DrmInitData, long, java.util.List):com.google.android.exoplayer2.Format type: STATIC \l0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x0027: IPUT  \l  (r2 I:com.google.android.exoplayer2.Format)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.format com.google.android.exoplayer2.Format \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tx3g int \l0x002c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atomType' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0041 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: CONST_STR  (r3 I:java.lang.String) =  \"application\/x\-quicktime\-tx3g\" \l0x0032: ARITH  (r2 I:int) = (r18 I:int A[D('atomSize' int)]) + (\-8 int) \l0x0034: ARITH  (r14 I:int) = (r2 I:int) + (\-8 int) \l0x0036: NEW_ARRAY  (r13 I:byte[]) = \l  (r14 I:int A[D('sampleDescriptionLength' int), IMMUTABLE_TYPE])\l type: byte[] \l0x0038: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0039: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r13 I:byte[] A[D('sampleDescriptionData' byte[])])\l  (r2 I:int)\l  (r14 I:int A[D('sampleDescriptionLength' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x003c: INVOKE  (r12 I:java.util.List A[D('initializationData' java.util.List\<byte[]\>)]) = \l  (r13 I:java.lang.Object A[D('sampleDescriptionData' byte[])])\l java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0041|0x0041: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_wvtt int \l0x0043: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atomType' int)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: CONST_STR  (r3 I:java.lang.String) =  \"application\/x\-mp4\-vtt\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|0x004a: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stpp int \l0x004c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atomType' int)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0055 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: CONST_STR  (r3 I:java.lang.String) =  \"application\/ttml+xml\" \l0x0052: CONST  (r10 I:?[long, double] A[D('subsampleOffsetUs' long)]) = (0 ?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_c608 int \l0x0057: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atomType' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0063 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005b|0x005b: CONST_STR  (r3 I:java.lang.String) =  \"application\/x\-mp4\-cea\-608\" \l0x005d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)])\l \l0x0060: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.StsdData.requiredSampleTransformation int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0065: INVOKE  (r2 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|0x0068: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTextSampleEntry((r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parent' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('atomType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('atomSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[D('trackId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.String A[D('language' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData A[D('out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0015\-0x002a: r3 'mimeType' java.lang.String\l  0x0032\-0x0041: r3 'mimeType' java.lang.String\l  0x0038\-0x0041: r13 'sampleDescriptionData' byte[]\l  0x0036\-0x0041: r14 'sampleDescriptionLength' int\l  0x0049\-0x004a: r3 'mimeType' java.lang.String\l  0x0052\-0x0055: r3 'mimeType' java.lang.String\l  0x005d\-0x0063: r3 'mimeType' java.lang.String\l  0x000d\-0x0068: r10 'subsampleOffsetUs' long\l  0x0008\-0x0068: r12 'initializationData' java.util.List\<byte[]\>\l  ?\-0x0068: r15 'parent' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0068: r16 'atomType' int\l  ?\-0x0068: r17 'position' int\l  ?\-0x0068: r18 'atomSize' int\l  ?\-0x0068: r19 'trackId' int\l  ?\-0x0068: r20 'language' java.lang.String\l  ?\-0x0068: r21 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  ?\-0x0068: r22 'out' com.google.android.exoplayer2.extractor.mp4.AtomParsers$StsdData\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_3;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_3;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_3;
Node_17 -> Node_18;
}

