digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.parseUdta(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$LeafAtom;Z)Lcom\/google\/android\/exoplayer2\/metadata\/Metadata;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r8 == false) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|com.google.android.exoplayer2.util.ParsableByteArray r3 = r7.data\lr3.setPosition(8)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_START\lLOOP:0: B:3:0x000b\-\>B:8:0x002b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r3.bytesLeft() \< 8) goto L_0x0005\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|int r0 = r3.getPosition()\lint r1 = r3.readInt()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r3.readInt() != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_meta) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|r3.setPosition(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|LOOP_END\lLOOP:0: B:3:0x000b\-\>B:8:0x002b\l|r3.skipBytes(r1 + \-8)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return parseMetaAtom(r3, r0 + r1)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.metadata.Metadata com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseUdta((r7v0 'udtaAtom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'isQuickTime' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_3;
Node_9 -> Node_7;
Node_10 -> Node_13;
}

