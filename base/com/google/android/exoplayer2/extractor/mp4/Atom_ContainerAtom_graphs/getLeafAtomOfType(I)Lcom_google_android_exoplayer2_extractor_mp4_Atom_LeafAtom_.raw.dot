digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(I)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$LeafAtom;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0002: INVOKE  (r1 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('childrenSize' int)])  \-\> B:6:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r3 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x000b: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r2 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r0 I:?[OBJECT, ARRAY]) \l0x0011: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType((r4 'this' I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0015: r0 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0016\-0x0019: r0 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0006\-0x001a: r1 'childrenSize' int\l  0x0007\-0x001a: r2 'i' int\l  ?\-0x001a: r5 'type' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_4;
}

