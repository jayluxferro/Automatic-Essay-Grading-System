digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getChildAtomOfTypeCount(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r4 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0003: INVOKE  (r3 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:6:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r4 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.List), (r2 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r0 I:?[OBJECT, ARRAY]) \l0x0012: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: ARITH  (r1 I:int A[D('count' int)]) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IGET  (r4 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x001d: INVOKE  (r3 I:int A[D('size' int)]) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0021: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:12:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r4 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x0026: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.List), (r2 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) (r0 I:?[OBJECT, ARRAY]) \l0x002c: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.type int \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)])  \-\> B:11:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: ARITH  (r1 I:int A[D('count' int)]) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: RETURN  (r1 I:int A[D('count' int)]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getChildAtomOfTypeCount((r5 'this' I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x001b: r0 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x002c\-0x0035: r0 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x0001\-0x0035: r1 'count' int\l  0x0008\-0x0035: r2 'i' int\l  0x0007\-0x0035: r3 'size' int\l  ?\-0x0035: r6 'type' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_7;
}

