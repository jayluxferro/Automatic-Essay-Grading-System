digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.processMoovAtom(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r10 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0005: NEW_INSTANCE  (r25 I:java.util.ArrayList) =  java.util.ArrayList \l0x0007: INVOKE  (r25 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000a: CONST  (r12 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x000f: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: NEW_INSTANCE  (r17 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder) =  com.google.android.exoplayer2.extractor.GaplessInfoHolder \l0x0013: INVOKE  \l  (r17 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.\<init\>():void type: DIRECT \l0x0016: SGET  (r5 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_udta int \l0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x001a: INVOKE  (r26 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r26 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('udta' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0022: IGET  (r5 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.isQuickTime boolean \l0x0024: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('udta' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l \l0x0026: INVOKE  (r20 I:com.google.android.exoplayer2.metadata.Metadata A[D('metadata' com.google.android.exoplayer2.metadata.Metadata)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseUdta(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom, boolean):com.google.android.exoplayer2.metadata.Metadata type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('metadata' com.google.android.exoplayer2.metadata.Metadata)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder)])\l \l0x002e: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('metadata' com.google.android.exoplayer2.metadata.Metadata)])\l \l0x0030: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l  (r1 I:com.google.android.exoplayer2.metadata.Metadata)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.setFromMetadata(com.google.android.exoplayer2.metadata.Metadata):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0037: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x0039: INVOKE  (r5 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x003d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:25:0x0104 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0041|0x0041: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0043: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x0045: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0047: INVOKE  (r4 I:java.lang.Object) = (r5 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004b: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) (r4 I:?[OBJECT, ARRAY]) \l0x004d: IGET  (r5 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.type int \l0x004f: SGET  (r6 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trak int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0056 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|0x0053: ARITH  (r18 I:int A[D('i' int)]) = (r18 I:int A[D('i' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0056|0x0056: SGET  (r5 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mvhd int \l0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x005a: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x005e: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0063: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0064: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0066: IGET  (r9 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.isQuickTime boolean \l0x0068: INVOKE  (r23 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r6 I:long)\l  (r8 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r9 I:boolean)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTrak(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom, com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom, long, com.google.android.exoplayer2.drm.DrmInitData, boolean):com.google.android.exoplayer2.extractor.mp4.Track type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|0x006c: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|0x006e: SGET  (r5 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mdia int \l0x0070: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x0074: SGET  (r6 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_minf int \l0x0076: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x007a: SGET  (r6 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stbl int \l0x007c: INVOKE  (r22 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x0080: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x0082: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('stblAtom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0084: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder)])\l \l0x0086: INVOKE  (r24 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Track)\l  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r2 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseStbl(com.google.android.exoplayer2.extractor.mp4.Track, com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom, com.google.android.exoplayer2.extractor.GaplessInfoHolder):com.google.android.exoplayer2.extractor.mp4.TrackSampleTable type: STATIC \l0x008a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('trackSampleTable' com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)])\l \l0x008c: IGET  (r5 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.sampleCount int \l}"];
Node_14 [shape=record,label="{14\:\ 0x008e|0x008e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0090|0x0090: NEW_INSTANCE  (r21 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track) =  com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track \l0x0092: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0094: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0096: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x0098: IGET  (r6 I:int) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.type int \l0x009a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x009c: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r0 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.ExtractorOutput.track(int, int):com.google.android.exoplayer2.extractor.TrackOutput type: INTERFACE \l0x00a0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x00a2: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00a4: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('trackSampleTable' com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)])\l \l0x00a6: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)\l  (r1 I:com.google.android.exoplayer2.extractor.mp4.Track)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.\<init\>(com.google.android.exoplayer2.extractor.mp4.Track, com.google.android.exoplayer2.extractor.mp4.TrackSampleTable, com.google.android.exoplayer2.extractor.TrackOutput):void type: DIRECT \l0x00a9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('trackSampleTable' com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)])\l \l0x00ab: IGET  (r5 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.maximumSize int \l0x00ad: ARITH  (r19 I:int) = (r5 I:int) + (30 int) \l0x00af: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00b1: IGET  (r5 I:com.google.android.exoplayer2.Format) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.format com.google.android.exoplayer2.Format \l0x00b3: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxInputSize' int)])\l \l0x00b5: INVOKE  (r16 I:com.google.android.exoplayer2.Format) = (r5 I:com.google.android.exoplayer2.Format), (r0 I:int) com.google.android.exoplayer2.Format.copyWithMaxInputSize(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x00b9: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00bb: IGET  (r5 I:int) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.type int \l0x00bd: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x00be|0x00be: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00de \l}"];
Node_17 [shape=record,label="{17\:\ 0x00c0|0x00c0: INVOKE  (r5 I:boolean) = \l  (r17 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder A[D('gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder)])\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.hasGaplessInfo():boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x00c4|0x00c4: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00d4 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00c6|0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder)])\l \l0x00c8: IGET  (r5 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderDelay int \l0x00ca: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder)])\l \l0x00cc: IGET  (r6 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderPadding int \l0x00ce: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x00d0: INVOKE  (r16 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)]) = \l  (r0 I:com.google.android.exoplayer2.Format)\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.Format.copyWithGaplessInfo(int, int):com.google.android.exoplayer2.Format type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x00d4|0x00d4: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('metadata' com.google.android.exoplayer2.metadata.Metadata)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00de \l}"];
Node_21 [shape=record,label="{21\:\ 0x00d6|0x00d6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x00d8: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('metadata' com.google.android.exoplayer2.metadata.Metadata)])\l \l0x00da: INVOKE  (r16 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)]) = \l  (r0 I:com.google.android.exoplayer2.Format)\l  (r1 I:com.google.android.exoplayer2.metadata.Metadata)\l com.google.android.exoplayer2.Format.copyWithMetadata(com.google.android.exoplayer2.metadata.Metadata):com.google.android.exoplayer2.Format type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00de|0x00de: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('mp4Track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l \l0x00e0: IGET  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.trackOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x00e2: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x00e4: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x00e7: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00e9: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.durationUs long \l0x00eb: INVOKE  (r10 I:long A[D('durationUs' long)]) = (r10 I:long A[D('durationUs' long)]), (r6 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x00ef: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('tracks' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\>)])\l \l0x00f1: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('mp4Track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l \l0x00f3: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00f6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('trackSampleTable' com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)])\l \l0x00f8: IGET  (r5 I:long[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.offsets long[] \l0x00fa: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00fb: AGET  (r14 I:?[long, double]) = (r5 I:?[long, double][]), (r6 I:?[int, short, byte, char]) \l0x00fd: CMP_L  (r5 I:int) = \l  (r14 I:long A[D('firstSampleOffset' long)])\l  (r12 I:long A[D('earliestSampleOffset' long)])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ff|0x00ff: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0101|0x0101: MOVE  (r12 I:?[long, double] A[D('earliestSampleOffset' long)]) = (r14 I:?[long, double] A[D('firstSampleOffset' long)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0104|0x0104: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0106: IPUT  \l  (r10 I:long A[D('durationUs' long)])\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.durationUs long \l0x0108: INVOKE  (r5 I:int) = \l  (r25 I:java.util.List A[D('tracks' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\>)])\l java.util.List.size():int type: INTERFACE \l0x010c: NEW_ARRAY  (r5 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[] \l0x010e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('tracks' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\>)])\l \l0x0110: INVOKE  (r5 I:java.lang.Object[]) = (r0 I:java.util.List), (r5 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x0114: CHECK_CAST  (r5 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[]) = (com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[]) (r5 I:?[OBJECT, ARRAY]) \l0x0116: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0118: IPUT  \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[])\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.tracks com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[] \l0x011a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x011c: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x011e: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l com.google.android.exoplayer2.extractor.ExtractorOutput.endTracks():void type: INTERFACE \l0x0121: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0123: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0125: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0127: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r0 I:com.google.android.exoplayer2.extractor.SeekMap)\l com.google.android.exoplayer2.extractor.ExtractorOutput.seekMap(com.google.android.exoplayer2.extractor.SeekMap):void type: INTERFACE \l}"];
Node_26 [shape=record,label="{26\:\ 0x012a|0x012a: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.processMoovAtom((r27 'this' I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[IMMUTABLE_TYPE, THIS]), (r28 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x004d\-0x0104: r4 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x00fd\-0x0104: r14 'firstSampleOffset' long\l  0x00b9\-0x0104: r16 'format' com.google.android.exoplayer2.Format\l  0x00af\-0x0104: r19 'maxInputSize' int\l  0x00a9\-0x0104: r21 'mp4Track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\l  0x0080\-0x0104: r22 'stblAtom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x006c\-0x0104: r23 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  0x008a\-0x0104: r24 'trackSampleTable' com.google.android.exoplayer2.extractor.mp4.TrackSampleTable\l  0x0005\-0x012a: r10 'durationUs' long\l  0x000f\-0x012a: r12 'earliestSampleOffset' long\l  0x0016\-0x012a: r17 'gaplessInfoHolder' com.google.android.exoplayer2.extractor.GaplessInfoHolder\l  0x0035\-0x012a: r18 'i' int\l  0x0011\-0x012a: r20 'metadata' com.google.android.exoplayer2.metadata.Metadata\l  0x000a\-0x012a: r25 'tracks' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\>\l  0x001e\-0x012a: r26 'udta' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  ?\-0x012a: r28 'moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_25;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_10;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_10;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_10;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_10;
Node_25 -> Node_26;
}

