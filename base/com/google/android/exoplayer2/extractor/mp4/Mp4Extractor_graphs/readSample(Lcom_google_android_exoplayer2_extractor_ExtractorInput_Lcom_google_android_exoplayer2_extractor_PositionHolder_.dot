digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readSample(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r18 = getTrackIndexOfEarliestCurrentSample()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r18 != \-1) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|r15 = r20.tracks[r18]\lcom.google.android.exoplayer2.extractor.TrackOutput r3 = r15.trackOutput\lint r14 = r15.sampleIndex\lr12 = r15.sampleTable.offsets[r14]\lr7 = r15.sampleTable.sizes[r14]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|if (r15.track.sampleTransformation != 1) goto L_0x002d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|long r12 = r12 + 8\lint r7 = r7 + \-8\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|PHI: r7 r12 \l  PHI: (r7v1 'sampleSize' int) = (r7v0 'sampleSize' int), (r7v6 'sampleSize' int) binds: [B:4:0x0026, B:5:0x0028] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'position' long) = (r12v0 'position' long), (r12v2 'position' long) binds: [B:4:0x0026, B:5:0x0028] A[DONT_GENERATE, DONT_INLINE]\l|long r16 = (r12 \- r21.getPosition()) + ((long) r20.sampleBytesWritten)\l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|if ((r16 \> 0 ? 1 : (r16 == 0 ? 0 : \-1)) \< 0) goto L_0x0047\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040}"];
Node_9 [shape=record,label="{9\:\ 0x0045|if ((r16 \> 262144 ? 1 : (r16 == 262144 ? 0 : \-1)) \< 0) goto L_0x004d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|r22.position = r12\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|int r4 = (int) r16\lr21.skipFully(r4)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0059|if (r15.track.nalUnitLengthFieldLength == 0) goto L_0x00de\l}"];
Node_13 [shape=record,label="{13\:\ 0x005b|byte[] r2 = r20.nalLength.data\lr2[0] = 0\lr2[1] = 0\lr2[2] = 0\lint r10 = r15.track.nalUnitLengthFieldLength\lint r11 = 4 \- r15.track.nalUnitLengthFieldLength\l}"];
Node_14 [shape=record,label="{14\:\ 0x0077|LOOP_START\lPHI: r7 \l  PHI: (r7v3 'sampleSize' int) = (r7v1 'sampleSize' int), (r7v4 'sampleSize' int) binds: [B:13:0x005b, B:24:0x0077] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:14:0x0077\-\>B:24:0x0077\l}"];
Node_15 [shape=record,label="{15\:\ 0x007b|if (r20.sampleBytesWritten \>= r7) goto L_0x0106\l}"];
Node_16 [shape=record,label="{16\:\ 0x007d}"];
Node_17 [shape=record,label="{17\:\ 0x0081|if (r20.sampleCurrentNalBytesRemaining != 0) goto L_0x00be\l}"];
Node_18 [shape=record,label="{18\:\ 0x0083|r0 = r21\lr0.readFully(r20.nalLength.data, r11, r10)\lr20.nalLength.setPosition(0)\lr20.sampleCurrentNalBytesRemaining = r20.nalLength.readUnsignedIntToInt()\lr20.nalStartCode.setPosition(0)\lr3.sampleData(r20.nalStartCode, 4)\lr20.sampleBytesWritten = r20.sampleBytesWritten + 4\lint r7 = r7 + r11\l}"];
Node_19 [shape=record,label="{19\:\ 0x00be|int r4 = r20.sampleCurrentNalBytesRemaining\lint r19 = r3.sampleData(r21, r4, false)\lr20.sampleBytesWritten = r20.sampleBytesWritten + r19\lr20.sampleCurrentNalBytesRemaining = r20.sampleCurrentNalBytesRemaining \- r19\l}"];
Node_20 [shape=record,label="{20\:\ 0x00de|LOOP_START\lLOOP:1: B:20:0x00de\-\>B:22:0x00e4\l}"];
Node_21 [shape=record,label="{21\:\ 0x00e2|if (r20.sampleBytesWritten \>= r7) goto L_0x0106\l}"];
Node_22 [shape=record,label="{22\:\ 0x00e4|LOOP_END\lLOOP:1: B:20:0x00de\-\>B:22:0x00e4\l|r0 = r21\lint r19 = r3.sampleData(r0, r7 \- r20.sampleBytesWritten, false)\lr20.sampleBytesWritten = r20.sampleBytesWritten + r19\lr20.sampleCurrentNalBytesRemaining = r20.sampleCurrentNalBytesRemaining \- r19\l}"];
Node_23 [shape=record,label="{23\:\ 0x0106|PHI: r7 \l  PHI: (r7v2 'sampleSize' int) = (r7v1 'sampleSize' int), (r7v3 'sampleSize' int) binds: [B:28:0x0106, B:25:0x0106] A[DONT_GENERATE, DONT_INLINE]\l|r3.sampleMetadata(r15.sampleTable.timestampsUs[r14], r15.sampleTable.flags[r14], r7, 0, (byte[]) null)\lr15.sampleIndex = r15.sampleIndex + 1\lr20.sampleBytesWritten = 0\lr20.sampleCurrentNalBytesRemaining = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|LOOP_END\lSYNTHETIC\lPHI: r7 \l  PHI: (r7v4 'sampleSize' int) = (r7v3 'sampleSize' int), (r7v5 'sampleSize' int) binds: [B:27:0x0077, B:26:0x0077] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:14:0x0077\-\>B:24:0x0077\l}"];
Node_25 [shape=record,label="{25\:\ 0x0106|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0077|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0077|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0106|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readSample((r20v0 'this' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[IMMUTABLE_TYPE, THIS]), (r21v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 'positionHolder' com.google.android.exoplayer2.extractor.PositionHolder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_29;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_26;
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_20;
Node_23 -> Node_30;
Node_24 -> Node_14;
Node_25 -> Node_23;
Node_26 -> Node_24;
Node_27 -> Node_24;
Node_28 -> Node_23;
}

