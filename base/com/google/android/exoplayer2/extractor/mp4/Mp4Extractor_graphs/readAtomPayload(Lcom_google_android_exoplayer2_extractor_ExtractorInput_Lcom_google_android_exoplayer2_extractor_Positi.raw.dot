digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readAtomPayload(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomSize long \l0x0002: IGET  (r5 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomHeaderBytesRead int \l0x0004: CAST  (r8 I:long) = (long) (r5 I:int) \l0x0005: ARITH  (r2 I:long) = (r6 I:long) \- (r8 I:long) \l0x0007: INVOKE  (r6 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x000b: ARITH  (r0 I:long) = (r6 I:long) + (r2 I:long A[D('atomPayloadSize' long)]) \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0053 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x0014: IGET  (r5 I:byte[]) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0016: IGET  (r6 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomHeaderBytesRead int \l0x0018: CAST  (r7 I:int) = (int) (r2 I:long A[D('atomPayloadSize' long)]) \l0x0019: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r5 I:byte[])\l  (r6 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x001c: IGET  (r5 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomType int \l0x001e: SGET  (r6 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_ftyp int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0036 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x0024: INVOKE  (r5 I:boolean) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.processFtypAtom(com.google.android.exoplayer2.util.ParsableByteArray):boolean type: STATIC \l0x0028: IPUT  \l  (r5 I:boolean)\l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.isQuickTime boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: INVOKE  \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l  (r0 I:long A[D('atomEndPosition' long)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.processAtomEnded(long):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seekRequired' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0068 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IGET  (r5 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.parserState int \l0x0031: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0068 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: RETURN  (r5 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: IGET  (r5 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.containerAtoms java.util.Stack \l0x0038: INVOKE  (r5 I:boolean) = (r5 I:java.util.Stack) java.util.Stack.isEmpty():boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002a \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IGET  (r5 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.containerAtoms java.util.Stack \l0x0040: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x0044: CHECK_CAST  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) (r5 I:?[OBJECT, ARRAY]) \l0x0046: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) =  com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom \l0x0048: IGET  (r7 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomType int \l0x004a: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x004c: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r7 I:int)\l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.\<init\>(int, com.google.android.exoplayer2.util.ParsableByteArray):void type: DIRECT \l0x004f: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r6 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.add(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: CONST  (r6 I:?[long, double]) = (262144(0x40000, double:1.295163E\-318) ?[long, double]) \l0x0056: CMP_L  (r5 I:int) = (r2 I:long A[D('atomPayloadSize' long)]), (r6 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x005f \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|0x005a: CAST  (r5 I:int) = (int) (r2 I:long A[D('atomPayloadSize' long)]) \l0x005b: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: INVOKE  (r6 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0063: ARITH  (r6 I:long) = (r6 I:long) + (r2 I:long A[D('atomPayloadSize' long)]) \l0x0064: IPUT  \l  (r6 I:long)\l  (r12 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('positionHolder' com.google.android.exoplayer2.extractor.PositionHolder)])\l com.google.android.exoplayer2.extractor.PositionHolder.position long \l0x0066: CONST  (r4 I:?[boolean, int, float, short, byte, char] A[D('seekRequired' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|0x0068: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readAtomPayload((r10 'this' I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('positionHolder' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0069: r0 'atomEndPosition' long\l  0x0007\-0x0069: r2 'atomPayloadSize' long\l  0x000e\-0x0069: r4 'seekRequired' boolean\l  ?\-0x0069: r11 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0069: r12 'positionHolder' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_5;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_5;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_5;
Node_17 -> Node_5;
Node_18 -> Node_10;
}

