digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readSample(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r18 I:int) = \l  (r20 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.getTrackIndexOfEarliestCurrentSample():int type: DIRECT \l0x0004: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndex' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000d: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.tracks com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[] \l0x000f: AGET  (r15 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY][])\l  (r18 I:?[int, short, byte, char] A[D('trackIndex' int)])\l \l0x0011: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.trackOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x0013: IGET  (r14 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleIndex int \l0x0015: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleTable com.google.android.exoplayer2.extractor.mp4.TrackSampleTable \l0x0017: IGET  (r4 I:long[]) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.offsets long[] \l0x0019: AGET  (r12 I:?[long, double]) = \l  (r4 I:?[long, double][])\l  (r14 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x001b: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleTable com.google.android.exoplayer2.extractor.mp4.TrackSampleTable \l0x001d: IGET  (r4 I:int[]) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.sizes int[] \l0x001f: AGET  (r7 I:?[int, float]) = \l  (r4 I:?[int, float][])\l  (r14 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x0021: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0023: IGET  (r4 I:int) = (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.sampleTransformation int \l0x0025: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: CONST  (r4 I:?[long, double]) = (8 ?[long, double]) \l0x002a: ARITH  (r12 I:long A[D('position' long)]) = (r12 I:long A[D('position' long)]) + (r4 I:long) \l0x002b: ARITH  (r7 I:int A[D('sampleSize' int)]) = (r7 I:int A[D('sampleSize' int)]) + (\-8 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: INVOKE  (r4 I:long) = \l  (r21 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0031: ARITH  (r4 I:long) = (r12 I:long A[D('position' long)]) \- (r4 I:long) \l0x0033: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0035: IGET  (r6 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x0037: CAST  (r8 I:long) = (long) (r6 I:int) \l0x0038: ARITH  (r16 I:long) = (r4 I:long) + (r8 I:long) \l0x003a: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x003c: CMP_L  (r4 I:int) = (r16 I:long A[D('skipAmount' long)]), (r4 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0047 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|0x0040: CONST  (r4 I:?[long, double]) = (262144(0x40000, double:1.295163E\-318) ?[long, double]) \l0x0043: CMP_L  (r4 I:int) = (r16 I:long A[D('skipAmount' long)]), (r4 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x004d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('positionHolder' com.google.android.exoplayer2.extractor.PositionHolder)])\l \l0x0049: IPUT  \l  (r12 I:long A[D('position' long)])\l  (r0 I:com.google.android.exoplayer2.extractor.PositionHolder)\l com.google.android.exoplayer2.extractor.PositionHolder.position long \l0x004b: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double] A[D('skipAmount' long)]) \l0x004f: CAST  (r4 I:int) = (int) (r0 I:long) \l0x0050: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0052: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x0055: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0057: IGET  (r4 I:int) = (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.nalUnitLengthFieldLength int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|0x0059: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00de \l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|0x005b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005d: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalLength com.google.android.exoplayer2.util.ParsableByteArray \l0x005f: IGET  (r2 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0061: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0062: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0063: APUT  \l  (r2 I:byte[] A[D('nalLengthData' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0065: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0066: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0067: APUT  \l  (r2 I:byte[] A[D('nalLengthData' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0069: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x006a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006b: APUT  \l  (r2 I:byte[] A[D('nalLengthData' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x006d: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.track com.google.android.exoplayer2.extractor.mp4.Track \l0x006f: IGET  (r10 I:int) = (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.nalUnitLengthFieldLength int \l0x0071: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0073: IGET  (r4 I:int) = (r4 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.nalUnitLengthFieldLength int \l0x0075: ARITH  (r11 I:int) = (4 int) \- (r4 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0077|0x0077: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0079: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|0x007b: IF  (r4 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char] A[D('sampleSize' int)])  \-\> B:24:0x0106 \l}"];
Node_17 [shape=record,label="{17\:\ 0x007d|0x007d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x007f: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0081|0x0081: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00be \l}"];
Node_19 [shape=record,label="{19\:\ 0x0083|0x0083: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0085: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalLength com.google.android.exoplayer2.util.ParsableByteArray \l0x0087: IGET  (r4 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0089: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x008b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r4 I:byte[])\l  (r11 I:int A[D('nalUnitLengthFieldLengthDiff' int)])\l  (r10 I:int A[D('nalUnitLengthFieldLength' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x008e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0090: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalLength com.google.android.exoplayer2.util.ParsableByteArray \l0x0092: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0093: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0096: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0098: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalLength com.google.android.exoplayer2.util.ParsableByteArray \l0x009a: INVOKE  (r4 I:int) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x009e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a0: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x00a2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a4: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalStartCode com.google.android.exoplayer2.util.ParsableByteArray \l0x00a6: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a7: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x00aa: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ac: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.nalStartCode com.google.android.exoplayer2.util.ParsableByteArray \l0x00ae: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x00af: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x00b2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00b4: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00b6: ARITH  (r4 I:int) = (r4 I:int) + (4 int) \l0x00b8: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ba: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00bc: ARITH  (r7 I:int A[D('sampleSize' int)]) = (r7 I:int A[D('sampleSize' int)]) + (r11 I:int A[D('nalUnitLengthFieldLengthDiff' int)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00be|0x00be: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00c0: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x00c2: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x00c5: INVOKE  (r19 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r4 I:int)\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.extractor.ExtractorInput, int, boolean):int type: INTERFACE \l0x00c9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00cb: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00cd: ARITH  (r4 I:int) = (r4 I:int) + (r19 I:int A[D('writtenBytes' int)]) \l0x00cf: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d1: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d5: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x00d7: ARITH  (r4 I:int) = (r4 I:int) \- (r19 I:int A[D('writtenBytes' int)]) \l0x00d9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00db: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l}"];
Node_21 [shape=record,label="{21\:\ 0x00de|0x00de: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00e0: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l}"];
Node_22 [shape=record,label="{22\:\ 0x00e2|0x00e2: IF  (r4 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char] A[D('sampleSize' int)])  \-\> B:24:0x0106 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00e4|0x00e4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00e6: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00e8: ARITH  (r4 I:int) = (r7 I:int A[D('sampleSize' int)]) \- (r4 I:int) \l0x00ea: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00eb: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x00ed: INVOKE  (r19 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r4 I:int)\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.extractor.ExtractorInput, int, boolean):int type: INTERFACE \l0x00f1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00f3: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00f5: ARITH  (r4 I:int) = (r4 I:int) + (r19 I:int A[D('writtenBytes' int)]) \l0x00f7: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00f9: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x00fb: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00fd: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x00ff: ARITH  (r4 I:int) = (r4 I:int) \- (r19 I:int A[D('writtenBytes' int)]) \l0x0101: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0103: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0106|0x0106: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleTable com.google.android.exoplayer2.extractor.mp4.TrackSampleTable \l0x0108: IGET  (r4 I:long[]) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.timestampsUs long[] \l0x010a: AGET  (r4 I:?[long, double]) = \l  (r4 I:?[long, double][])\l  (r14 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x010c: IGET  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleTable com.google.android.exoplayer2.extractor.mp4.TrackSampleTable \l0x010e: IGET  (r6 I:int[]) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.flags int[] \l0x0110: AGET  (r6 I:?[int, float]) = \l  (r6 I:?[int, float][])\l  (r14 I:?[int, short, byte, char] A[D('sampleIndex' int)])\l \l0x0112: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0113: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0114: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('trackOutput' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r4 I:long)\l  (r6 I:int)\l  (r7 I:int A[D('sampleSize' int)])\l  (r8 I:int)\l  (r9 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l0x0117: IGET  (r4 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleIndex int \l0x0119: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x011b: IPUT  \l  (r4 I:int)\l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.Mp4Track.sampleIndex int \l0x011d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0120: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x0122: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0123: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0125: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x0127: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.readSample((r20 'this' I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[IMMUTABLE_TYPE, THIS]), (r21 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('positionHolder' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0061\-0x00de: r2 'nalLengthData' byte[]\l  0x0071\-0x00de: r10 'nalUnitLengthFieldLength' int\l  0x0077\-0x00de: r11 'nalUnitLengthFieldLengthDiff' int\l  0x00c9\-0x00de: r19 'writtenBytes' int\l  0x00f1\-0x0106: r19 'writtenBytes' int\l  0x0013\-0x0129: r3 'trackOutput' com.google.android.exoplayer2.extractor.TrackOutput\l  0x0021\-0x0129: r7 'sampleSize' int\l  0x001b\-0x0129: r12 'position' long\l  0x0015\-0x0129: r14 'sampleIndex' int\l  0x0011\-0x0129: r15 'track' com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track\l  0x003a\-0x0129: r16 'skipAmount' long\l  0x0004\-0x0129: r18 'trackIndex' int\l  ?\-0x0129: r21 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0129: r22 'positionHolder' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_3;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_15;
Node_20 -> Node_15;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_21;
Node_24 -> Node_3;
}

