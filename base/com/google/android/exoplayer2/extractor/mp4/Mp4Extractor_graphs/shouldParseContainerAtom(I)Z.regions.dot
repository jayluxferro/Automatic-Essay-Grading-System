digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.shouldParseContainerAtom(I)Z" {
subgraph cluster_Region_868054929 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moov \|\| r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trak \|\| r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mdia \|\| r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_minf \|\| r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_stbl \|\| r1 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_edts\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e|REMOVE\lADDED_TO_REGION\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0010}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0012|REMOVE\lADDED_TO_REGION\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0014}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0016|REMOVE\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0018|SYNTHETIC\lORIG_RETURN\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.shouldParseContainerAtom((r1v0 'atom' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
}

