digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Mp4Extractor.seek(JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.containerAtoms java.util.Stack \l0x0003: INVOKE  (r0 I:java.util.Stack) java.util.Stack.clear():void type: VIRTUAL \l0x0006: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.atomHeaderBytesRead int \l0x0008: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleBytesWritten int \l0x000a: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.sampleCurrentNalBytesRemaining int \l0x000c: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r0 I:int) = (r4 I:long A[D('position' long)]), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.enterReadingAtomHeaderState():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.tracks com.google.android.exoplayer2.extractor.mp4.Mp4Extractor$Mp4Track[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l  (r6 I:long A[D('timeUs' long)])\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.updateSampleIndices(long):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.seek((r3 'this' I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x001d: r4 'position' long\l  ?\-0x001d: r6 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_3;
}

