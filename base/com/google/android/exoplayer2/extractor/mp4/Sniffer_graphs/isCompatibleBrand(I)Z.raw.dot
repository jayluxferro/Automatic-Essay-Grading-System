digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Sniffer.isCompatibleBrand(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: ARITH  (r3 I:int) = (r6 I:int A[D('brand' int)]) \>\>\> (8 int) \l0x0004: CONST_STR  (r4 I:java.lang.String) =  \"3gp\" \l0x0006: INVOKE  (r4 I:int) = (r4 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: SGET  (r4 I:int[]) =  com.google.android.exoplayer2.extractor.mp4.Sniffer.COMPATIBLE_BRANDS int[] \l0x000f: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x0010: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: AGET  (r0 I:?[int, float]) = (r4 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('compatibleBrand' int)]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('brand' int)])  \-\> B:2:0x000c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.extractor.mp4.Sniffer.isCompatibleBrand((r6 I:int A[D('brand' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0015\-0x001a: r0 'compatibleBrand' int\l  ?\-0x001b: r6 'brand' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_4;
Node_8 -> Node_2;
}

