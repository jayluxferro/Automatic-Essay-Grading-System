digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Sniffer.sniffInternal(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r16 I:long) = \l  (r22 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getLength():long type: INTERFACE \l0x0004: CONST  (r18 I:?[long, double]) = (\-1 ?[long, double]) \l0x0006: CMP_L  (r18 I:int) = (r16 I:long A[D('inputLength' long)]), (r18 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r18 I:?[long, double]) = (4096(0x1000, double:2.0237E\-320) ?[long, double]) \l0x000c: CMP_L  (r18 I:int) = (r16 I:long A[D('inputLength' long)]), (r18 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r18 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r16 I:?[long, double] A[D('inputLength' long)]) = (4096(0x1000, double:2.0237E\-320) ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double] A[D('inputLength' long)]) \l0x0014: CAST  (r11 I:int) = (int) (r0 I:long) \l0x0015: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x0017: CONST  (r18 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x0019: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT \l0x001e: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r10 I:?[int, byte, short, char] A[D('bytesSearched' int)]) \>= (r11 I:?[int, byte, short, char] A[D('bytesToSearch' int)])  \-\> B:21:0x0083 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: CONST  (r13 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0025: INVOKE  \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r13 I:int A[D('headerSize' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.reset(int):void type: VIRTUAL \l0x0028: IGET  (r0 I:byte[]) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x002a: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002c: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0030: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0032: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0034: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r13 I:int A[D('headerSize' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0037: INVOKE  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l0x003b: INVOKE  (r5 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x003f: CONST  (r18 I:?[long, double]) = (1 ?[long, double]) \l0x0041: CMP_L  (r18 I:int) = (r6 I:long A[D('atomSize' long)]), (r18 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|0x0043: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0065 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|0x0045: CONST  (r13 I:?[int, float, short, byte, char] A[D('headerSize' int)]) = (16 ?[int, float, short, byte, char]) \l0x0047: IGET  (r0 I:byte[]) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0049: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004b: CONST  (r19 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x004d: CONST  (r20 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x004f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0051: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0053: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0055: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x005a: CONST  (r18 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x005c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005e: INVOKE  \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setLimit(int):void type: VIRTUAL \l0x0061: INVOKE  (r6 I:long A[D('atomSize' long)]) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedLongToLong():long type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0065|0x0065: CAST  (r0 I:long) = (long) (r13 I:int A[D('headerSize' int)]) \l0x0066: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x0068: CMP_L  (r18 I:int) = (r6 I:long A[D('atomSize' long)]), (r18 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|0x006a: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x006f \l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|0x006c: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|0x006e: RETURN  (r18 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006f|0x006f: ARITH  (r10 I:int A[D('bytesSearched' int)]) = (r10 I:int A[D('bytesSearched' int)]) + (r13 I:int A[D('headerSize' int)]) \l0x0070: SGET  (r18 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moov int \l0x0072: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0074|0x0074: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('atomType' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0076|0x0076: SGET  (r18 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moof int \l0x0078: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x007a|0x007a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('atomType' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0082 \l}"];
Node_18 [shape=record,label="{18\:\ 0x007c|0x007c: SGET  (r18 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mvex int \l0x007e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0080|0x0080: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('atomType' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0082|0x0082: CONST  (r15 I:?[boolean, int, float, short, byte, char] A[D('isFragmented' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0083|0x0083: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('foundGoodFileType' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00f5 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|0x0085: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fragmented' boolean)])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0087|0x0087: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isFragmented' boolean)])  \-\> B:45:0x00f5 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|0x0089: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x008c|0x008c: CAST  (r0 I:long) = (long) (r10 I:int A[D('bytesSearched' int)]) \l0x008d: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x008f: ARITH  (r18 I:long) = (r18 I:long) + (r6 I:long A[D('atomSize' long)]) \l0x0091: CAST  (r0 I:long) = (long) (r13 I:int A[D('headerSize' int)]) \l0x0092: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0094: ARITH  (r18 I:long) = (r18 I:long) \- (r20 I:long) \l0x0096: CAST  (r0 I:long) = (long) (r11 I:int A[D('bytesToSearch' int)]) \l0x0097: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0099: CMP_L  (r18 I:int) = (r18 I:long), (r20 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x009b|0x009b: IF  (r18 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x0083 \l}"];
Node_27 [shape=record,label="{27\:\ 0x009d|0x009d: CAST  (r0 I:long) = (long) (r13 I:int A[D('headerSize' int)]) \l0x009e: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x00a0: ARITH  (r18 I:long) = (r6 I:long A[D('atomSize' long)]) \- (r18 I:long) \l0x00a2: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l0x00a4: CAST  (r4 I:int) = (int) (r0 I:long) \l0x00a5: ARITH  (r10 I:int A[D('bytesSearched' int)]) = (r10 I:int A[D('bytesSearched' int)]) + (r4 I:int A[D('atomDataSize' int)]) \l0x00a6: SGET  (r18 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_ftyp int \l0x00a8: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00aa|0x00aa: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('atomType' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00ec \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ac|0x00ac: CONST  (r18 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x00ae: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b0|0x00b0: IF  (r4 I:?[int, byte, short, char] A[D('atomDataSize' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:32:0x00b5 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b2|0x00b2: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b5|0x00b5: INVOKE  \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r4 I:int A[D('atomDataSize' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.reset(int):void type: VIRTUAL \l0x00b8: IGET  (r0 I:byte[]) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x00ba: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00bc: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00be: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x00c0: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00c2: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c4: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r4 I:int A[D('atomDataSize' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x00c7: ARITH  (r8 I:int) = (r4 I:int A[D('atomDataSize' int)]) \/ (4 int) \l0x00c9: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ca|0x00ca: IF  (r14 I:?[int, byte, short, char] A[D('i' int)]) \>= (r8 I:?[int, byte, short, char] A[D('brandsCount' int)])  \-\> B:41:0x00e7 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00cc|0x00cc: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00ce: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_35 [shape=record,label="{35\:\ 0x00d0|0x00d0: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00dc \l}"];
Node_36 [shape=record,label="{36\:\ 0x00d2|0x00d2: CONST  (r18 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x00d4: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d6: INVOKE  \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00d9|0x00d9: ARITH  (r14 I:int A[D('i' int)]) = (r14 I:int A[D('i' int)]) + (1 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00dc|0x00dc: INVOKE  (r18 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x00e0: INVOKE  (r18 I:boolean) = (r18 I:int) com.google.android.exoplayer2.extractor.mp4.Sniffer.isCompatibleBrand(int):boolean type: STATIC \l}"];
Node_39 [shape=record,label="{39\:\ 0x00e4|0x00e4: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00d9 \l}"];
Node_40 [shape=record,label="{40\:\ 0x00e6|0x00e6: CONST  (r12 I:?[boolean, int, float, short, byte, char] A[D('foundGoodFileType' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00e7|0x00e7: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('foundGoodFileType' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_42 [shape=record,label="{42\:\ 0x00e9|0x00e9: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x00ec|0x00ec: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('atomDataSize' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ee|0x00ee: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x00f0: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r4 I:int A[D('atomDataSize' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l}"];
Node_45 [shape=record,label="{45\:\ 0x00f5|0x00f5: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.extractor.mp4.Sniffer.sniffInternal((r22 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[D('fragmented' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0012: r16 'inputLength' long\l  0x003f\-0x006e: r5 'atomType' int\l  0x003b\-0x006e: r6 'atomSize' long\l  0x0025\-0x006e: r13 'headerSize' int\l  0x006f\-0x0083: r5 'atomType' int\l  0x006f\-0x0083: r6 'atomSize' long\l  0x006f\-0x0083: r13 'headerSize' int\l  0x00c9\-0x00ec: r8 'brandsCount' int\l  0x00ca\-0x00ec: r14 'i' int\l  0x00a5\-0x00f5: r4 'atomDataSize' int\l  0x008c\-0x00f5: r5 'atomType' int\l  0x008c\-0x00f5: r6 'atomSize' long\l  0x008c\-0x00f5: r13 'headerSize' int\l  0x001e\-0x00f8: r9 'buffer' com.google.android.exoplayer2.util.ParsableByteArray\l  0x001f\-0x00f8: r10 'bytesSearched' int\l  0x0015\-0x00f8: r11 'bytesToSearch' int\l  0x0020\-0x00f8: r12 'foundGoodFileType' boolean\l  0x0021\-0x00f8: r15 'isFragmented' boolean\l  ?\-0x00f8: r22 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x00f8: r23 'fragmented' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_45;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_45;
Node_24 -> Node_13;
Node_25 -> Node_26;
Node_26 -> Node_21;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_43;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_13;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_33;
Node_38 -> Node_39;
Node_39 -> Node_37;
Node_39 -> Node_40[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_6;
Node_41 -> Node_42[style=dashed];
Node_42 -> Node_13;
Node_43 -> Node_6;
Node_43 -> Node_44[style=dashed];
Node_44 -> Node_6;
Node_45 -> Node_13;
}

