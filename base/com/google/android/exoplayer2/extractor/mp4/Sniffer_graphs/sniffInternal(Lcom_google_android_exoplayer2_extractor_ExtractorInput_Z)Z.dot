digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.Sniffer.sniffInternal(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long r16 = r22.getLength()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if ((r16 \> \-1 ? 1 : (r16 == \-1 ? 0 : \-1)) == 0) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if ((r16 \> android.support.p000v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM ? 1 : (r16 == android.support.p000v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM ? 0 : \-1)) \<= 0) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|r16 = android.support.p000v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|PHI: r16 \l  PHI: (r16v1 'inputLength' long) = (r16v2 'inputLength' long), (r16v0 'inputLength' long) binds: [B:4:0x0010, B:3:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|int r11 = (int) r16\lcom.google.android.exoplayer2.util.ParsableByteArray r9 = new com.google.android.exoplayer2.util.ParsableByteArray(64)\lr10 = 0\lr12 = false\lr15 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|LOOP_START\lPHI: r10 r12 \l  PHI: (r10v1 'bytesSearched' int) = (r10v0 'bytesSearched' int), (r10v3 'bytesSearched' int) binds: [B:5:0x0012, B:45:0x0021] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'foundGoodFileType' boolean) = (r12v0 'foundGoodFileType' boolean), (r12v2 'foundGoodFileType' boolean) binds: [B:5:0x0012, B:45:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0021\-\>B:45:0x0021\l|if (r10 \>= r11) goto L_0x0083\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|r13 = 8\lr9.reset(8)\lr18 = r9.data\lr22.peekFully(r18, 0, 8)\llong r6 = r9.readUnsignedInt()\lint r5 = r9.readInt()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|if ((r6 \> 1 ? 1 : (r6 == 1 ? 0 : \-1)) != 0) goto L_0x0065\l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|r13 = 16\lr18 = r9.data\lr22.peekFully(r18, 8, 8)\lr9.setLimit(16)\llong r6 = r9.readUnsignedLongToLong()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0065|PHI: r6 r13 \l  PHI: (r6v1 'atomSize' long) = (r6v0 'atomSize' long), (r6v2 'atomSize' long) binds: [B:8:0x0043, B:9:0x0045] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 'headerSize' int) = (r13v0 'headerSize' int), (r13v2 'headerSize' int) binds: [B:8:0x0043, B:9:0x0045] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|if ((r6 \> ((long) r13) ? 1 : (r6 == ((long) r13) ? 0 : \-1)) \>= 0) goto L_0x006f\l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x006f|int r10 = r10 + r13\l}"];
Node_14 [shape=record,label="{14\:\ 0x0074|if (r5 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moov) goto L_0x0021\l}"];
Node_15 [shape=record,label="{15\:\ 0x0076}"];
Node_16 [shape=record,label="{16\:\ 0x007a|if (r5 == com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moof) goto L_0x0082\l}"];
Node_17 [shape=record,label="{17\:\ 0x007c}"];
Node_18 [shape=record,label="{18\:\ 0x0080|if (r5 != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mvex) goto L_0x008c\l}"];
Node_19 [shape=record,label="{19\:\ 0x0082|r15 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x0083|PHI: r15 \l  PHI: (r15v1 'isFragmented' boolean) = (r15v0 'isFragmented' boolean), (r15v2 'isFragmented' boolean), (r15v0 'isFragmented' boolean) binds: [B:48:0x0083, B:19:0x0082, B:47:0x0083] A[DONT_GENERATE, DONT_INLINE]\l|if (r12 == false) goto L_0x00f5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0085}"];
Node_22 [shape=record,label="{22\:\ 0x0087|if (r23 != r15) goto L_0x00f5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0089|SYNTHETIC\lRETURN\l|return true\l}"];
Node_24 [shape=record,label="{24\:\ 0x008c}"];
Node_25 [shape=record,label="{25\:\ 0x009b|if ((((((long) r10) + r6) \- ((long) r13)) \> ((long) r11) ? 1 : (((((long) r10) + r6) \- ((long) r13)) == ((long) r11) ? 0 : \-1)) \>= 0) goto L_0x0083\l}"];
Node_26 [shape=record,label="{26\:\ 0x009d|int r4 = (int) (r6 \- ((long) r13))\lint r10 = r10 + r4\l}"];
Node_27 [shape=record,label="{27\:\ 0x00aa|if (r5 != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_ftyp) goto L_0x00ec\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ac}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|if (r4 \>= 8) goto L_0x00b5\l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|SYNTHETIC\lRETURN\l|return false\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b5|r9.reset(r4)\lr18 = r9.data\lr22.peekFully(r18, 0, r4)\lint r8 = r4 \/ 4\lr14 = 0\l}"];
Node_32 [shape=record,label="{32\:\ 0x00ca|LOOP_START\lPHI: r14 \l  PHI: (r14v1 'i' int) = (r14v0 'i' int), (r14v2 'i' int) binds: [B:31:0x00b5, B:36:0x00d9] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:32:0x00ca\-\>B:36:0x00d9\l|if (r14 \>= r8) goto L_0x00e7\l}"];
Node_33 [shape=record,label="{33\:\ 0x00cc}"];
Node_34 [shape=record,label="{34\:\ 0x00d0|if (r14 != 1) goto L_0x00dc\l}"];
Node_35 [shape=record,label="{35\:\ 0x00d2|r9.skipBytes(4)\l}"];
Node_36 [shape=record,label="{36\:\ 0x00d9|LOOP_END\lLOOP:1: B:32:0x00ca\-\>B:36:0x00d9\l|int r14 = r14 + 1\l}"];
Node_37 [shape=record,label="{37\:\ 0x00dc}"];
Node_38 [shape=record,label="{38\:\ 0x00e4|if (isCompatibleBrand(r9.readInt()) == false) goto L_0x00d9\l}"];
Node_39 [shape=record,label="{39\:\ 0x00e6|r12 = true\l}"];
Node_40 [shape=record,label="{40\:\ 0x00e7|PHI: r12 \l  PHI: (r12v3 'foundGoodFileType' boolean) = (r12v1 'foundGoodFileType' boolean), (r12v4 'foundGoodFileType' boolean) binds: [B:58:0x00e7, B:39:0x00e6] A[DONT_GENERATE, DONT_INLINE]\l|if (r12 != false) goto L_0x0021\l}"];
Node_41 [shape=record,label="{41\:\ 0x00e9|SYNTHETIC\lRETURN\l|return false\l}"];
Node_42 [shape=record,label="{42\:\ 0x00ec|if (r4 == 0) goto L_0x0021\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ee|r22.advancePeekPosition(r4)\l}"];
Node_44 [shape=record,label="{44\:\ 0x00f5|SYNTHETIC\lRETURN\l|return false\l}"];
Node_45 [shape=record,label="{45\:\ 0x0021|LOOP_END\lSYNTHETIC\lPHI: r10 r12 \l  PHI: (r10v3 'bytesSearched' int) = (r10v2 'bytesSearched' int), (r10v4 'bytesSearched' int), (r10v4 'bytesSearched' int), (r10v4 'bytesSearched' int) binds: [B:53:0x0021, B:55:0x0021, B:56:0x0021, B:54:0x0021] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v2 'foundGoodFileType' boolean) = (r12v1 'foundGoodFileType' boolean), (r12v1 'foundGoodFileType' boolean), (r12v1 'foundGoodFileType' boolean), (r12v3 'foundGoodFileType' boolean) binds: [B:53:0x0021, B:55:0x0021, B:56:0x0021, B:54:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0021\-\>B:45:0x0021\l}"];
Node_46 [shape=record,label="{46\:\ 0x0082|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0083|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0083|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x00e9|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x006c|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x00b2|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0082|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0021|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0021|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0021|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0021|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x00e6|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x00e7|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x00d9|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x00d9|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.extractor.mp4.Sniffer.sniffInternal((r22v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'fragmented' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_48;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_50[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_53;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_52;
Node_17 -> Node_18;
Node_18 -> Node_24;
Node_18 -> Node_46[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_44;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_44;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_47;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_42;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_51[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_58;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_59;
Node_36 -> Node_32;
Node_37 -> Node_38;
Node_38 -> Node_57[style=dashed];
Node_38 -> Node_60;
Node_39 -> Node_40;
Node_40 -> Node_49[style=dashed];
Node_40 -> Node_54;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_55;
Node_43 -> Node_56;
Node_45 -> Node_6;
Node_46 -> Node_19;
Node_47 -> Node_20;
Node_48 -> Node_20;
Node_49 -> Node_41;
Node_50 -> Node_12;
Node_51 -> Node_30;
Node_52 -> Node_19;
Node_53 -> Node_45;
Node_54 -> Node_45;
Node_55 -> Node_45;
Node_56 -> Node_45;
Node_57 -> Node_39;
Node_58 -> Node_40;
Node_59 -> Node_36;
Node_60 -> Node_36;
}

