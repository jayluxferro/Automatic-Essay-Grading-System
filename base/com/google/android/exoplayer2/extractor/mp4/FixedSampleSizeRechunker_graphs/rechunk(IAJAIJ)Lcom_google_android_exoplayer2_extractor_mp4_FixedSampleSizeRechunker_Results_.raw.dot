digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.rechunk(I[J[IJ)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FixedSampleSizeRechunker$Results;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l0x0002: ARITH  (r13 I:int) = (r2 I:int) \/ (r23 I:int A[D('fixedSampleSize' int)]) \l0x0004: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY] A[D('chunkSampleCounts' int[])]) \l0x0008: ARRAY_LENGTH  (r8 I:int) = (r0 I:?[]) \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: AGET  (r11 I:?[int, float]) = \l  (r25 I:?[int, float][] A[D('chunkSampleCounts' int[])])\l  (r2 I:?[int, short, byte, char])\l \l0x000e: INVOKE  (r17 I:int) = \l  (r11 I:int A[D('chunkSampleCount' int)])\l  (r13 I:int A[D('maxSampleCount' int)])\l com.google.android.exoplayer2.util.Util.ceilDivide(int, int):int type: STATIC \l0x0012: ARITH  (r16 I:int A[D('rechunkedSampleCount' int)]) = (r16 I:int A[D('rechunkedSampleCount' int)]) + (r17 I:int) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rechunkedSampleCount' int)])\l \l0x0019: NEW_ARRAY  (r3 I:long[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x001b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rechunkedSampleCount' int)])\l \l0x001d: NEW_ARRAY  (r4 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rechunkedSampleCount' int)])\l \l0x0022: NEW_ARRAY  (r6 I:long[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0024: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rechunkedSampleCount' int)])\l \l0x0026: NEW_ARRAY  (r7 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0028: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY] A[D('chunkSampleCounts' int[])]) \l0x002d: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IF  (r10 I:?[int, byte, short, char] A[D('chunkIndex' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x005f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: AGET  (r12 I:?[int, float]) = \l  (r25 I:?[int, float][] A[D('chunkSampleCounts' int[])])\l  (r10 I:?[int, short, byte, char] A[D('chunkIndex' int)])\l \l0x0032: AGET  (r18 I:?[long, double]) = \l  (r24 I:?[long, double][] A[D('chunkOffsets' long[])])\l  (r10 I:?[int, short, byte, char] A[D('chunkIndex' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IF  (r12 I:?[int, byte, short, char] A[D('chunkSamplesRemaining' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x005c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: INVOKE  (r9 I:int) = \l  (r13 I:int A[D('maxSampleCount' int)])\l  (r12 I:int A[D('chunkSamplesRemaining' int)])\l java.lang.Math.min(int, int):int type: STATIC \l0x003a: APUT  \l  (r3 I:?[long, double][] A[D('offsets' long[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l  (r18 I:?[long, double] A[D('sampleOffset' long)])\l \l0x003c: ARITH  (r2 I:int) = (r23 I:int A[D('fixedSampleSize' int)]) * (r9 I:int A[D('bufferSampleCount' int)]) \l0x003e: APUT  \l  (r4 I:?[int, float][] A[D('sizes' int[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l  (r2 I:?[int, float])\l \l0x0040: AGET  (r2 I:?[int, float]) = \l  (r4 I:?[int, float][] A[D('sizes' int[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l \l0x0042: INVOKE  (r5 I:int A[D('maximumSize' int)]) = (r5 I:int A[D('maximumSize' int)]), (r2 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0046: CAST  (r0 I:long) = (long) (r15 I:int A[D('originalSampleIndex' int)]) \l0x0047: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0049: ARITH  (r20 I:long) = (r20 I:long) * (r26 I:long A[D('timestampDeltaInTimeUnits' long)]) \l0x004b: APUT  \l  (r6 I:?[long, double][] A[D('timestamps' long[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l  (r20 I:?[long, double])\l \l0x004d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004e: APUT  \l  (r7 I:?[int, float][] A[D('flags' int[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l  (r2 I:?[int, float])\l \l0x0050: AGET  (r2 I:?[int, float]) = \l  (r4 I:?[int, float][] A[D('sizes' int[])])\l  (r14 I:?[int, short, byte, char] A[D('newSampleIndex' int)])\l \l0x0052: CAST  (r0 I:long) = (long) (r2 I:int) \l0x0053: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0055: ARITH  (r18 I:long A[D('sampleOffset' long)]) = (r18 I:long A[D('sampleOffset' long)]) + (r20 I:long) \l0x0057: ARITH  (r15 I:int A[D('originalSampleIndex' int)]) = (r15 I:int A[D('originalSampleIndex' int)]) + (r9 I:int A[D('bufferSampleCount' int)]) \l0x0058: ARITH  (r12 I:int A[D('chunkSamplesRemaining' int)]) = (r12 I:int A[D('chunkSamplesRemaining' int)]) \- (r9 I:int A[D('bufferSampleCount' int)]) \l0x0059: ARITH  (r14 I:int A[D('newSampleIndex' int)]) = (r14 I:int A[D('newSampleIndex' int)]) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|0x005c: ARITH  (r10 I:int A[D('chunkIndex' int)]) = (r10 I:int A[D('chunkIndex' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x005f|0x005f: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results) =  com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results \l0x0061: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0062: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results)\l  (r3 I:long[] A[D('offsets' long[])])\l  (r4 I:int[] A[D('sizes' int[])])\l  (r5 I:int A[D('maximumSize' int)])\l  (r6 I:long[] A[D('timestamps' long[])])\l  (r7 I:int[] A[D('flags' int[])])\l  (r8 I:com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$1)\l com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.Results.\<init\>(long[], int[], int, long[], int[], com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$1):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0065|0x0065: RETURN  \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results)\l \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.rechunk((r23 I:int A[D('fixedSampleSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long[] A[D('chunkOffsets' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:int[] A[D('chunkSampleCounts' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[D('timestampDeltaInTimeUnits' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0017: r11 'chunkSampleCount' int\l  0x003a\-0x005c: r9 'bufferSampleCount' int\l  0x0032\-0x005f: r12 'chunkSamplesRemaining' int\l  0x0034\-0x005f: r18 'sampleOffset' long\l  0x001b\-0x0065: r3 'offsets' long[]\l  0x001f\-0x0065: r4 'sizes' int[]\l  0x0020\-0x0065: r5 'maximumSize' int\l  0x0024\-0x0065: r6 'timestamps' long[]\l  0x0028\-0x0065: r7 'flags' int[]\l  0x002b\-0x0065: r10 'chunkIndex' int\l  0x0004\-0x0065: r13 'maxSampleCount' int\l  0x002a\-0x0065: r14 'newSampleIndex' int\l  0x0029\-0x0065: r15 'originalSampleIndex' int\l  0x0006\-0x0065: r16 'rechunkedSampleCount' int\l  ?\-0x0065: r23 'fixedSampleSize' int\l  ?\-0x0065: r24 'chunkOffsets' long[]\l  ?\-0x0065: r25 'chunkSampleCounts' int[]\l  ?\-0x0065: r26 'timestampDeltaInTimeUnits' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_4;
Node_10 -> Node_11;
}

