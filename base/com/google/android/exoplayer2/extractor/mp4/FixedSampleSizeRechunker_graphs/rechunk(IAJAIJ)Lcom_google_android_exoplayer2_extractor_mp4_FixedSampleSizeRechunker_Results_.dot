digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.rechunk(I[J[IJ)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FixedSampleSizeRechunker$Results;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r13 = 8192 \/ r23\lr16 = 0\lint r8 = r25.length\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r2 r16 \l  PHI: (r2v2 int) = (r2v1 int), (r2v9 int) binds: [B:0:0x0000, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r16v1 'rechunkedSampleCount' int) = (r16v0 'rechunkedSampleCount' int), (r16v2 'rechunkedSampleCount' int) binds: [B:0:0x0000, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:2:0x000c\l|if (r2 \>= r8) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:2:0x000c\l|int r16 = r16 + com.google.android.exoplayer2.util.Util.ceilDivide(r25[r2], r13)\lint r2 = r2 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|long[] r3 = new long[r16]\lint[] r4 = new int[r16]\lr5 = 0\llong[] r6 = new long[r16]\lint[] r7 = new int[r16]\lr15 = 0\lr14 = 0\lr10 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|LOOP_START\lPHI: r5 r10 r14 r15 \l  PHI: (r5v1 'maximumSize' int) = (r5v0 'maximumSize' int), (r5v2 'maximumSize' int) binds: [B:3:0x0017, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 'chunkIndex' int) = (r10v0 'chunkIndex' int), (r10v2 'chunkIndex' int) binds: [B:3:0x0017, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 'newSampleIndex' int) = (r14v0 'newSampleIndex' int), (r14v2 'newSampleIndex' int) binds: [B:3:0x0017, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v1 'originalSampleIndex' int) = (r15v0 'originalSampleIndex' int), (r15v2 'originalSampleIndex' int) binds: [B:3:0x0017, B:9:0x005c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x002b\-\>B:9:0x005c\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|if (r10 \>= r25.length) goto L_0x005f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|r12 = r25[r10]\lr18 = r24[r10]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|LOOP_START\lPHI: r5 r12 r14 r15 r18 \l  PHI: (r5v2 'maximumSize' int) = (r5v1 'maximumSize' int), (r5v3 'maximumSize' int) binds: [B:6:0x0030, B:8:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'chunkSamplesRemaining' int) = (r12v0 'chunkSamplesRemaining' int), (r12v2 'chunkSamplesRemaining' int) binds: [B:6:0x0030, B:8:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v2 'newSampleIndex' int) = (r14v1 'newSampleIndex' int), (r14v3 'newSampleIndex' int) binds: [B:6:0x0030, B:8:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v2 'originalSampleIndex' int) = (r15v1 'originalSampleIndex' int), (r15v3 'originalSampleIndex' int) binds: [B:6:0x0030, B:8:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r18v1 'sampleOffset' long) = (r18v0 'sampleOffset' long), (r18v2 'sampleOffset' long) binds: [B:6:0x0030, B:8:0x0036] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:7:0x0034\-\>B:8:0x0036\l|if (r12 \<= 0) goto L_0x005c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|LOOP_END\lLOOP:2: B:7:0x0034\-\>B:8:0x0036\l|int r9 = java.lang.Math.min(r13, r12)\lr3[r14] = r18\lr4[r14] = r23 * r9\lint r5 = java.lang.Math.max(r5, r4[r14])\lr6[r14] = ((long) r15) * r26\lr7[r14] = 1\llong r18 = r18 + ((long) r4[r14])\lint r15 = r15 + r9\lint r12 = r12 \- r9\lint r14 = r14 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|LOOP_END\lLOOP:1: B:4:0x002b\-\>B:9:0x005c\l|int r10 = r10 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x005f}"];
Node_11 [shape=record,label="{11\:\ 0x0065|RETURN\l|return new com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.Results(r3, r4, r5, r6, r7, (com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.C12961) null)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker$Results com.google.android.exoplayer2.extractor.mp4.FixedSampleSizeRechunker.rechunk((r23v0 'fixedSampleSize' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'chunkOffsets' long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 'chunkSampleCounts' int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 'timestampDeltaInTimeUnits' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_7;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_12 -> Node_3;
Node_13 -> Node_10;
Node_14 -> Node_9;
}

