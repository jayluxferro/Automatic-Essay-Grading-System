digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.TrackSampleTable.\<init\>([J[II[J[I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0005: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[] A[D('sizes' int[])]) \l0x0006: ARRAY_LENGTH  (r3 I:int) = (r8 I:?[] A[D('timestampsUs' long[])]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x000d: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[] A[D('offsets' long[])]) \l0x000e: ARRAY_LENGTH  (r3 I:int) = (r8 I:?[] A[D('timestampsUs' long[])]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0015: ARRAY_LENGTH  (r0 I:int) = (r9 I:?[] A[D('flags' int[])]) \l0x0016: ARRAY_LENGTH  (r3 I:int) = (r8 I:?[] A[D('timestampsUs' long[])]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x001c: IPUT  \l  (r5 I:long[] A[D('offsets' long[])])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.offsets long[] \l0x001e: IPUT  \l  (r6 I:int[] A[D('sizes' int[])])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.sizes int[] \l0x0020: IPUT  \l  (r7 I:int A[D('maximumSize' int)])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.maximumSize int \l0x0022: IPUT  \l  (r8 I:long[] A[D('timestampsUs' long[])])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.timestampsUs long[] \l0x0024: IPUT  \l  (r9 I:int[] A[D('flags' int[])])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.flags int[] \l0x0026: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[] A[D('offsets' long[])]) \l0x0027: IPUT  \l  (r0 I:int)\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable)\l com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.sampleCount int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.mp4.TrackSampleTable.\<init\>((r4 'this' I:com.google.android.exoplayer2.extractor.mp4.TrackSampleTable A[IMMUTABLE_TYPE, THIS]), (r5 I:long[] A[D('offsets' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int[] A[D('sizes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('maximumSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long[] A[D('timestampsUs' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int[] A[D('flags' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002f: r5 'offsets' long[]\l  ?\-0x002f: r6 'sizes' int[]\l  ?\-0x002f: r7 'maximumSize' int\l  ?\-0x002f: r8 'timestampsUs' long[]\l  ?\-0x002f: r9 'flags' int[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_10 -> Node_3;
Node_11 -> Node_6;
Node_12 -> Node_8;
}

