digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.moveNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.index int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0004: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.index int \l0x0006: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.length int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.chunkOffsetsAreLongs boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.chunkOffsets com.google.android.exoplayer2.util.ParsableByteArray \l0x0012: INVOKE  (r0 I:long) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedLongToLong():long type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IPUT  \l  (r0 I:long)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.offset long \l0x0018: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.index int \l0x001a: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.nextSamplesPerChunkChangeIndex int \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.stsc com.google.android.exoplayer2.util.ParsableByteArray \l0x0020: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x0024: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.numSamples int \l0x0026: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.stsc com.google.android.exoplayer2.util.ParsableByteArray \l0x0028: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0029: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x002c: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.remainingSamplesPerChunkChanges int \l0x002e: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0030: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.remainingSamplesPerChunkChanges int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0047 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.stsc com.google.android.exoplayer2.util.ParsableByteArray \l0x0036: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x003a: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.nextSamplesPerChunkChangeIndex int \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.chunkOffsets com.google.android.exoplayer2.util.ParsableByteArray \l0x0042: INVOKE  (r0 I:long) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.mp4.AtomParsers.ChunkIterator.moveNext((r2 'this' I:com.google.android.exoplayer2.extractor.mp4.AtomParsers$ChunkIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_3;
Node_14 -> Node_7;
Node_15 -> Node_12;
}

