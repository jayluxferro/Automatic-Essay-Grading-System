digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readEncryptionData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x0006: IGET  (r7 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0008: INVOKE  (r5 I:int) = (r7 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r5 I:?[int, byte, short, char] A[D('trackBundlesSize' int)])  \-\> B:8:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r7 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0011: INVOKE  (r7 I:java.lang.Object) = (r7 I:android.util.SparseArray), (r1 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0015: CHECK_CAST  (r7 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r7 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0019: IGET  (r7 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('trackFragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleEncryptionDataNeedsFill boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IGET  (r8 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('trackFragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l0x001f: CMP_L  (r7 I:int) = (r8 I:long), (r2 I:long A[D('nextDataOffset' long)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r2 I:long A[D('nextDataOffset' long)]) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('trackFragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l0x0025: IGET  (r7 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0027: INVOKE  (r4 I:java.lang.Object A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) = (r7 I:android.util.SparseArray), (r1 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x002b: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r4 I:?[OBJECT, ARRAY] A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0036 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0033: IPUT  \l  (r7 I:int)\l  (r10 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parserState int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: INVOKE  (r8 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x003a: ARITH  (r8 I:long) = (r2 I:long A[D('nextDataOffset' long)]) \- (r8 I:long) \l0x003c: CAST  (r0 I:int) = (int) (r8 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r0 I:?[int, byte, short, char] A[D('bytesToSkip' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0047 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: NEW_INSTANCE  (r7 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0041: CONST_STR  (r8 I:java.lang.String) =  \"Offset to encryption data was negative.\" \l0x0043: INVOKE  \l  (r7 I:com.google.android.exoplayer2.ParserException)\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:int A[D('bytesToSkip' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x004a: IGET  (r7 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x004c: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.fillEncryptionData(com.google.android.exoplayer2.extractor.ExtractorInput):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readEncryptionData((r10 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x002b: r4 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x0019\-0x0030: r6 'trackFragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment\l  0x003d\-0x004f: r0 'bytesToSkip' int\l  0x000d\-0x004f: r1 'i' int\l  0x0006\-0x004f: r2 'nextDataOffset' long\l  0x002d\-0x004f: r4 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x000c\-0x004f: r5 'trackBundlesSize' int\l  ?\-0x004f: r11 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_10;
}

