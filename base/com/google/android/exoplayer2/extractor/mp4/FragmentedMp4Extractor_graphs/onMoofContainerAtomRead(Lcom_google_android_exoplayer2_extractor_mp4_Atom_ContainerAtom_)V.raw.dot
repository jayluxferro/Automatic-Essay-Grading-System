digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onMoofContainerAtomRead(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0002: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.flags int \l0x0004: IGET  (r5 I:byte[]) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.extendedTypeScratch byte[] \l0x0006: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('moof' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l  (r3 I:android.util.SparseArray)\l  (r4 I:int)\l  (r5 I:byte[])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseMoof(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom, android.util.SparseArray, int, byte[]):void type: STATIC \l0x0009: IGET  (r3 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('moof' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x000b: INVOKE  (r0 I:com.google.android.exoplayer2.drm.DrmInitData) = (r3 I:java.util.List) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.getDrmInitDataFromAtoms(java.util.List):com.google.android.exoplayer2.drm.DrmInitData type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IGET  (r3 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0013: INVOKE  (r2 I:int) = (r3 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char] A[D('trackCount' int)])  \-\> B:5:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r3 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r6 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x001c: INVOKE  (r3 I:java.lang.Object) = (r3 I:android.util.SparseArray), (r1 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0020: CHECK_CAST  (r3 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r3 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r0 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.updateDrmInitData(com.google.android.exoplayer2.drm.DrmInitData):void type: VIRTUAL \l0x0025: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onMoofContainerAtomRead((r6 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('moof' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0018\-0x0028: r1 'i' int\l  0x0017\-0x0028: r2 'trackCount' int\l  0x000f\-0x0028: r0 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  ?\-0x0028: r7 'moof' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
}

