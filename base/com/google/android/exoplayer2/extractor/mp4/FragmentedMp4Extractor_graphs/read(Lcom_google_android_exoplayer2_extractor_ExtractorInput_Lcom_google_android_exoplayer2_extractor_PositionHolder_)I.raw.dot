digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.read(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parserState int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2] t:[0x000d, 0x0015, 0x0019] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readSample(com.google.android.exoplayer2.extractor.ExtractorInput):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomHeader(com.google.android.exoplayer2.extractor.ExtractorInput):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomPayload(com.google.android.exoplayer2.extractor.ExtractorInput):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readEncryptionData(com.google.android.exoplayer2.extractor.ExtractorInput):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.read((r1 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('seekPosition' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0027: r2 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0027: r3 'seekPosition' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_1 -> Node_9;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_0;
Node_3 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_0;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_5;
Node_9 -> Node_0;
Node_10 -> Node_0;
}

