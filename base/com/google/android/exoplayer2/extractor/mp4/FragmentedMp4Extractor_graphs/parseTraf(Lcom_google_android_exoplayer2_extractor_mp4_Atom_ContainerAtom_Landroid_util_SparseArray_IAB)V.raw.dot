digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTraf(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;Landroid\/util\/SparseArray;I[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tfhd int \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0004: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  (r16 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('tfhd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l \l0x000c: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x000e: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0012: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('trackBundleArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>)])\l \l0x0014: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)])\l \l0x0016: INVOKE  (r17 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:android.util.SparseArray)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTfhd(com.google.android.exoplayer2.util.ParsableByteArray, android.util.SparseArray, int):com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x001f: IGET  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0021: IGET  (r6 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.nextFragmentDecodeTime long \l0x0023: INVOKE  \l  (r17 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.reset():void type: VIRTUAL \l0x0026: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tfdt int \l0x0028: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x002a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: INVOKE  (r15 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0030|0x0030: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tfdtAtom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: ARITH  (r19 I:?[int, boolean, short, byte, char]) = (r23 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_tfdt int \l0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x003a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: INVOKE  (r19 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x0040: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0042: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0044: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0046: INVOKE  (r6 I:long A[D('decodeTime' long)]) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTfdt(com.google.android.exoplayer2.util.ParsableByteArray):long type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x004a|0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x004c: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x004e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)])\l \l0x0050: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r6 I:long A[D('decodeTime' long)])\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTruns(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom, com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle, long, int):void type: STATIC \l0x0053: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_saiz int \l0x0055: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0057: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0059: INVOKE  (r11 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x005d|0x005d: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('saiz' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0082 \l}"];
Node_10 [shape=record,label="{10\:\ 0x005f|0x005f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0061: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0063: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0065: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0067: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[]) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.sampleDescriptionEncryptionBoxes com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox[] \l0x0069: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x006b: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.header com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l0x006d: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x006f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0071: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.sampleDescriptionIndex int \l0x0073: MOVE  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: AGET  (r18 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY][])\l  (r20 I:?[int, short, byte, char])\l \l0x0077: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r11 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('saiz' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0079: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x007b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)])\l \l0x007d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x007f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)\l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaiz(com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox, com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.extractor.mp4.TrackFragment):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0082|0x0082: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_saio int \l0x0084: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0086: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0088: INVOKE  (r10 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x008c|0x008c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('saio' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0097 \l}"];
Node_13 [shape=record,label="{13\:\ 0x008e|0x008e: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('saio' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0090: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0092: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0094: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaio(com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.extractor.mp4.TrackFragment):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0097|0x0097: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_senc int \l0x0099: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x009b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009d: INVOKE  (r13 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a1|0x00a1: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('senc' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x00ac \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a3|0x00a3: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('senc' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x00a5: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00a7: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00a9: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSenc(com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.extractor.mp4.TrackFragment):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x00ac|0x00ac: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sbgp int \l0x00ae: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x00b0: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b2: INVOKE  (r12 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x00b6: SGET  (r19 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sgpd int \l0x00b8: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x00ba: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bc: INVOKE  (r14 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x00c0|0x00c0: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sbgp' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00d3 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00c2|0x00c2: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sgpd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x00d3 \l}"];
Node_20 [shape=record,label="{20\:\ 0x00c4|0x00c4: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r12 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('sbgp' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x00c6: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00c8: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('sgpd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x00ca: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00cc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00ce: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d0: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSgpd(com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.extractor.mp4.TrackFragment):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x00d3|0x00d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x00d5: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x00d7: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00d9: INVOKE  (r9 I:int) = (r19 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x00dd: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x00de|0x00de: IF  (r8 I:?[int, byte, short, char] A[D('i' int)]) \>= (r9 I:?[int, byte, short, char] A[D('leafChildrenSize' int)])  \-\> B:2:0x001c \l}"];
Node_23 [shape=record,label="{23\:\ 0x00e0|0x00e0: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x00e2: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x00e4: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00e8: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r8 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00ec: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r4 I:?[OBJECT, ARRAY]) \l0x00ee: IGET  (r0 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x00f0: MOVE  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f2: SGET  (r20 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_uuid int \l0x00f4: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f6: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00f8|0x00f8: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0105 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00fa|0x00fa: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x00fc: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00fe: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0100: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY] A[D('extendedTypeScratch' byte[])]) \l0x0102: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l  (r1 I:byte[])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseUuid(com.google.android.exoplayer2.util.ParsableByteArray, com.google.android.exoplayer2.extractor.mp4.TrackFragment, byte[]):void type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0105|0x0105: ARITH  (r8 I:int A[D('i' int)]) = (r8 I:int A[D('i' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTraf((r21 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:byte[] A[D('extendedTypeScratch' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0077\-0x0082: r18 'trackEncryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\l  0x00ee\-0x0107: r4 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0021\-0x0107: r5 'fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment\l  0x0023\-0x0107: r6 'decodeTime' long\l  0x00de\-0x0107: r8 'i' int\l  0x00dd\-0x0107: r9 'leafChildrenSize' int\l  0x008c\-0x0107: r10 'saio' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x005d\-0x0107: r11 'saiz' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x00b6\-0x0107: r12 'sbgp' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x00a1\-0x0107: r13 'senc' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x00c0\-0x0107: r14 'sgpd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0030\-0x0107: r15 'tfdtAtom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x000a\-0x0107: r16 'tfhd' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x001a\-0x0107: r17 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  ?\-0x0107: r21 'traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x0000\-0x0107: r22 'trackBundleArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>\l  ?\-0x0107: r23 'flags' int\l  ?\-0x0107: r24 'extendedTypeScratch' byte[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;, Landroid\/util\/SparseArray, \<, Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;, \>;I[B)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_2;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_22;
}

