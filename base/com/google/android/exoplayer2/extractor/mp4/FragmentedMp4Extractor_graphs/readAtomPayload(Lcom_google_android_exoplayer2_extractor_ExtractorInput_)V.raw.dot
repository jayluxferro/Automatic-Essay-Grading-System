digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomPayload(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:long) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0002: CAST  (r1 I:int) = (int) (r2 I:long) \l0x0003: IGET  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0005: ARITH  (r0 I:int) = (r1 I:int) \- (r2 I:int) \l0x0007: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x000d: IGET  (r1 I:byte[]) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0011: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r2 I:int)\l  (r0 I:int A[D('atomPayloadSize' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x0014: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) =  com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom \l0x0016: IGET  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x0018: IGET  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x001a: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r2 I:int)\l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.\<init\>(int, com.google.android.exoplayer2.util.ParsableByteArray):void type: DIRECT \l0x001d: INVOKE  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0021: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r2 I:long)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onLeafAtomRead(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom, long):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|0x0024: INVOKE  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0028: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:long)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.processAtomEnded(long):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:int A[D('atomPayloadSize' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomPayload((r4 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x002f: r0 'atomPayloadSize' int\l  ?\-0x002f: r5 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

