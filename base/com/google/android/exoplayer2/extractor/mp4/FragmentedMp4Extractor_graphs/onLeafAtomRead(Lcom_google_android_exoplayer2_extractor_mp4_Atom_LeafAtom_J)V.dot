digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onLeafAtomRead(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$LeafAtom;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4.containerAtoms.isEmpty() != false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r4.containerAtoms.peek().add(r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r5.type != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sidx) goto L_0x0037\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|android.util.Pair r0 = parseSidx(r5.data, r6)\lr4.segmentIndexEarliestPresentationTimeUs = ((java.lang.Long) r0.first).longValue()\lr4.extractorOutput.seekMap((com.google.android.exoplayer2.extractor.SeekMap) r0.second)\lr4.haveOutputSeekMap = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0037}"];
Node_7 [shape=record,label="{7\:\ 0x003b|if (r5.type != com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_emsg) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|onEmsgLeafAtomRead(r5.data)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onLeafAtomRead((r4v0 'this' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r5v0 'leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'inputPosition' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_12;
}

