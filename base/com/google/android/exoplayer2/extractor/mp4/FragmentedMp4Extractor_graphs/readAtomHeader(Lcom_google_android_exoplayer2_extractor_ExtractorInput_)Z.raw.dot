digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomHeader(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x0006: IGET  (r8 I:byte[]) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0008: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r10 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000b: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: INVOKE  (r8 I:boolean) = \l  (r14 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:byte[])\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:boolean)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int, boolean):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r8 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r8 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0016: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0018: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x001a: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x001e: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x0020: INVOKE  (r8 I:long) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l0x0024: IPUT  \l  (r8 I:long)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0026: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x0028: INVOKE  (r8 I:int) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x002c: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0030: CONST  (r10 I:?[long, double]) = (1 ?[long, double]) \l0x0032: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: CONST  (r5 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0038: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x003a: IGET  (r8 I:byte[]) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x003c: CONST  (r9 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x003e: INVOKE  \l  (r14 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:byte[])\l  (r9 I:int)\l  (r5 I:int A[D('headerBytesRemaining' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x0041: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0043: ARITH  (r8 I:int) = (r8 I:int) + (r5 I:int A[D('headerBytesRemaining' int)]) \l0x0044: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0046: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x0048: INVOKE  (r8 I:long) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedLongToLong():long type: VIRTUAL \l0x004c: IPUT  \l  (r8 I:long)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0050: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0052: CAST  (r10 I:long) = (long) (r10 I:int) \l0x0053: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0055|0x0055: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|0x0057: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0059: CONST_STR  (r9 I:java.lang.String) =  \"Atom size less than header length (unsupported).\" \l0x005b: INVOKE  \l  (r8 I:com.google.android.exoplayer2.ParserException)\l  (r9 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x005e|0x005e: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|0x005f: INVOKE  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0063: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x0065: CAST  (r10 I:long) = (long) (r10 I:int) \l0x0066: ARITH  (r0 I:long) = (r8 I:long) \- (r10 I:long) \l0x0068: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x006a: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_moof int \l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|0x006c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x008a \l}"];
Node_16 [shape=record,label="{16\:\ 0x006e|0x006e: IGET  (r8 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0070: INVOKE  (r7 I:int) = (r8 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x0074: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0075|0x0075: IF  (r6 I:?[int, byte, short, char] A[D('i' int)]) \>= (r7 I:?[int, byte, short, char] A[D('trackCount' int)])  \-\> B:19:0x008a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0077|0x0077: IGET  (r8 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0079: INVOKE  (r8 I:java.lang.Object) = (r8 I:android.util.SparseArray), (r6 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x007d: CHECK_CAST  (r8 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r8 I:?[OBJECT, ARRAY]) \l0x007f: IGET  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r8 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0081: IPUT  \l  (r0 I:long A[D('atomPosition' long)])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.atomPosition long \l0x0083: IPUT  \l  (r0 I:long A[D('atomPosition' long)])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l0x0085: IPUT  \l  (r0 I:long A[D('atomPosition' long)])\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.dataPosition long \l0x0087: ARITH  (r6 I:int A[D('i' int)]) = (r6 I:int A[D('i' int)]) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x008a|0x008a: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x008c: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mdat int \l}"];
Node_20 [shape=record,label="{20\:\ 0x008e|0x008e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00b1 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0090|0x0090: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0091: IPUT  \l  (r8 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.currentTrackBundle com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle \l0x0093: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0095: ARITH  (r8 I:long) = (r8 I:long) + (r0 I:long A[D('atomPosition' long)]) \l0x0096: IPUT  \l  (r8 I:long)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.endOfMdatPosition long \l0x0098: IGET  (r8 I:boolean) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.haveOutputSeekMap boolean \l}"];
Node_22 [shape=record,label="{22\:\ 0x009a|0x009a: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00ab \l}"];
Node_23 [shape=record,label="{23\:\ 0x009c|0x009c: IGET  (r8 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x009e: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.extractor.SeekMap$Unseekable) =  com.google.android.exoplayer2.extractor.SeekMap$Unseekable \l0x00a0: IGET  (r10 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.durationUs long \l0x00a2: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.SeekMap$Unseekable)\l  (r10 I:long)\l com.google.android.exoplayer2.extractor.SeekMap.Unseekable.\<init\>(long):void type: DIRECT \l0x00a5: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r9 I:com.google.android.exoplayer2.extractor.SeekMap)\l com.google.android.exoplayer2.extractor.ExtractorOutput.seekMap(com.google.android.exoplayer2.extractor.SeekMap):void type: INTERFACE \l0x00a8: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a9: IPUT  \l  (r8 I:boolean)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.haveOutputSeekMap boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ab|0x00ab: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00ac: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parserState int \l0x00ae: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00b1|0x00b1: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x00b3: INVOKE  (r8 I:boolean) = (r8 I:int) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.shouldParseContainerAtom(int):boolean type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b7|0x00b7: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00e3 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00b9|0x00b9: INVOKE  (r8 I:long) = \l  (r14 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x00bd: IGET  (r10 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x00bf: ARITH  (r8 I:long) = (r8 I:long) + (r10 I:long) \l0x00c0: CONST  (r10 I:?[long, double]) = (8 ?[long, double]) \l0x00c2: ARITH  (r2 I:long) = (r8 I:long) \- (r10 I:long) \l0x00c4: IGET  (r8 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.containerAtoms java.util.Stack \l0x00c6: NEW_INSTANCE  (r9 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) =  com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom \l0x00c8: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x00ca: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r10 I:int)\l  (r2 I:long A[D('endPosition' long)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.\<init\>(int, long):void type: DIRECT \l0x00cd: INVOKE  (r8 I:java.util.Stack), (r9 I:java.lang.Object) java.util.Stack.add(java.lang.Object):boolean type: VIRTUAL \l0x00d0: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x00d2: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x00d4: CAST  (r10 I:long) = (long) (r10 I:int) \l0x00d5: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00d7|0x00d7: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00df \l}"];
Node_29 [shape=record,label="{29\:\ 0x00d9|0x00d9: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r2 I:long A[D('endPosition' long)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.processAtomEnded(long):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x00dc|0x00dc: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00df|0x00df: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.enterReadingAtomHeaderState():void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x00e3|0x00e3: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomType int \l0x00e5: INVOKE  (r8 I:boolean) = (r8 I:int) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.shouldParseLeafAtom(int):boolean type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x00e9|0x00e9: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0127 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00eb|0x00eb: IGET  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeaderBytesRead int \l0x00ed: CONST  (r9 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ef|0x00ef: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00f9 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00f1|0x00f1: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x00f3: CONST_STR  (r9 I:java.lang.String) =  \"Leaf atom defines extended atom size (unsupported).\" \l0x00f5: INVOKE  \l  (r8 I:com.google.android.exoplayer2.ParserException)\l  (r9 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_37 [shape=record,label="{37\:\ 0x00f8|0x00f8: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00f9|0x00f9: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x00fb: CONST  (r10 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x00fe: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0100|0x0100: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:42:0x010a \l}"];
Node_40 [shape=record,label="{40\:\ 0x0102|0x0102: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0104: CONST_STR  (r9 I:java.lang.String) =  \"Leaf atom with length \> 2147483647 (unsupported).\" \l0x0106: INVOKE  \l  (r8 I:com.google.android.exoplayer2.ParserException)\l  (r9 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x0109|0x0109: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x010a|0x010a: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x010c: IGET  (r10 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x010e: CAST  (r9 I:int) = (int) (r10 I:long) \l0x010f: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT \l0x0112: IPUT  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x0114: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomHeader com.google.android.exoplayer2.util.ParsableByteArray \l0x0116: IGET  (r8 I:byte[]) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0118: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0119: IGET  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x011b: IGET  (r10 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x011d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011e: CONST  (r12 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0120: INVOKE  \l  (r8 I:java.lang.Object)\l  (r9 I:int)\l  (r10 I:java.lang.Object)\l  (r11 I:int)\l  (r12 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0123: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0124: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parserState int \l}"];
Node_43 [shape=record,label="{43\:\ 0x0127|0x0127: IGET  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomSize long \l0x0129: CONST  (r10 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x012c: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_44 [shape=record,label="{44\:\ 0x012e|0x012e: IF  (r8 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:47:0x0138 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0130|0x0130: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0132: CONST_STR  (r9 I:java.lang.String) =  \"Skipping atom with length \> 2147483647 (unsupported).\" \l0x0134: INVOKE  \l  (r8 I:com.google.android.exoplayer2.ParserException)\l  (r9 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_46 [shape=record,label="{46\:\ 0x0137|0x0137: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0138|0x0138: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0139: IPUT  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.atomData com.google.android.exoplayer2.util.ParsableByteArray \l0x013b: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x013c: IPUT  \l  (r8 I:int)\l  (r13 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parserState int \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readAtomHeader((r13 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r14 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0038\-0x004e: r5 'headerBytesRemaining' int\l  0x0081\-0x008a: r4 'fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment\l  0x0075\-0x008a: r6 'i' int\l  0x0074\-0x008a: r7 'trackCount' int\l  0x00c4\-0x00dc: r2 'endPosition' long\l  0x00df\-0x00e3: r2 'endPosition' long\l  0x0068\-0x013e: r0 'atomPosition' long\l  ?\-0x013e: r14 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_17;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_5;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_5;
Node_31 -> Node_30;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_43;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_42 -> Node_30;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_47;
Node_45 -> Node_46;
Node_47 -> Node_30;
}

