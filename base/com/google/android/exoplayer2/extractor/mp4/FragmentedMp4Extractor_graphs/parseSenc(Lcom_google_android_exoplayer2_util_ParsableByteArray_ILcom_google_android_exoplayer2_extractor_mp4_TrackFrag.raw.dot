digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSenc(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;ILcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackFragment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: ARITH  (r5 I:int) = (r8 I:int A[D('offset' int)]) + (8 int) \l0x0003: INVOKE  \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r5 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0006: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000a: INVOKE  (r0 I:int) = (r1 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(int):int type: STATIC \l0x000e: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0014: CONST_STR  (r5 I:java.lang.String) =  \"Overriding TrackEncryptionBox parameters is unsupported.\" \l0x0016: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ParserException)\l  (r5 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r2 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x0023: IGET  (r5 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleCount int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleCount' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0029: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002e: CONST_STR  (r6 I:java.lang.String) =  \"Length mismatch: \" \l0x0030: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r5 I:java.lang.StringBuilder)\l  (r2 I:int A[D('sampleCount' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0038: CONST_STR  (r6 I:java.lang.String) =  \", \" \l0x003a: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: IGET  (r6 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleCount int \l0x0040: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0048: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ParserException)\l  (r5 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('subsampleEncryption' boolean)]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: IGET  (r5 I:boolean[]) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleHasSubsampleEncryptionTable boolean[] \l0x0050: INVOKE  \l  (r5 I:boolean[])\l  (r4 I:int)\l  (r2 I:int A[D('sampleCount' int)])\l  (r3 I:boolean A[D('subsampleEncryption' boolean)])\l java.util.Arrays.fill(boolean[], int, int, boolean):void type: STATIC \l0x0053: INVOKE  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0057: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.initEncryptionData(int):void type: VIRTUAL \l0x005a: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.fillEncryptionData(com.google.android.exoplayer2.util.ParsableByteArray):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|0x005d: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSenc((r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('senc' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0023\-0x004c: r2 'sampleCount' int\l  0x001f\-0x004c: r3 'subsampleEncryption' boolean\l  0x000e\-0x005d: r0 'flags' int\l  0x000a\-0x005d: r1 'fullAtom' int\l  0x004e\-0x005d: r2 'sampleCount' int\l  0x004e\-0x005d: r3 'subsampleEncryption' boolean\l  ?\-0x005d: r7 'senc' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x005d: r8 'offset' int\l  ?\-0x005d: r9 'out' com.google.android.exoplayer2.extractor.mp4.TrackFragment\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_11 -> Node_7;
Node_12 -> Node_13;
}

