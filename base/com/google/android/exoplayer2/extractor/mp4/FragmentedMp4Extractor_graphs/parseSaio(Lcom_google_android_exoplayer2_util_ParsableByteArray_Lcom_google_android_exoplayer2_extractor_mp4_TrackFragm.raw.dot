digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaio(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackFragment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0002: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0006: INVOKE  (r2 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000a: INVOKE  (r1 I:int) = (r2 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(int):int type: STATIC \l0x000e: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r0 I:int) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('entryCount' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x001d: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0022: CONST_STR  (r6 I:java.lang.String) =  \"Unexpected saio entry count: \" \l0x0024: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0028: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r5 I:java.lang.StringBuilder)\l  (r0 I:int A[D('entryCount' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ParserException)\l  (r5 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: INVOKE  (r3 I:int) = (r2 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomVersion(int):int type: STATIC \l0x0038: IGET  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: INVOKE  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0041: IPUT  \l  (r4 I:long)\l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: INVOKE  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedLongToLong():long type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaio((r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saio' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0048: r0 'entryCount' int\l  0x000e\-0x0048: r1 'flags' int\l  0x000a\-0x0048: r2 'fullAtom' int\l  0x0038\-0x0048: r3 'version' int\l  ?\-0x0048: r8 'saio' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0048: r9 'out' com.google.android.exoplayer2.extractor.mp4.TrackFragment\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_10;
}

