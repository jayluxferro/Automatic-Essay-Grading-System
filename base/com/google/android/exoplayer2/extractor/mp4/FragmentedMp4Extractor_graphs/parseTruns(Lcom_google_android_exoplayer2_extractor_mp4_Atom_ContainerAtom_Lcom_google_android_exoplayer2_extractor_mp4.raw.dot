digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTruns(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;JI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0004: IGET  (r11 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0006: INVOKE  (r12 I:int) = \l  (r11 I:java.util.List A[D('leafChildren' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>)])\l java.util.List.size():int type: INTERFACE \l0x000a: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r10 I:?[int, byte, short, char] A[D('i' int)]) \>= (r12 I:?[int, byte, short, char] A[D('leafChildrenSize' int)])  \-\> B:8:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r9 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('leafChildren' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>)])\l  (r10 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r9 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r9 I:?[OBJECT, ARRAY]) \l0x0013: IGET  (r2 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x0015: SGET  (r4 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trun int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x001b: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('trunData' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0021: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0024: INVOKE  (r18 I:int) = \l  (r16 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trunData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: IF  (r18 I:?[int, byte, short, char] A[D('trunSampleCount' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x002e \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: ARITH  (r13 I:int A[D('totalSampleCount' int)]) = (r13 I:int A[D('totalSampleCount' int)]) + (r18 I:int A[D('trunSampleCount' int)]) \l0x002c: ARITH  (r15 I:int A[D('trunCount' int)]) = (r15 I:int A[D('trunCount' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: ARITH  (r10 I:int A[D('i' int)]) = (r10 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0034: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.currentTrackRunIndex int \l0x0036: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0039: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.currentSampleInTrackRun int \l0x003b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x003e: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.currentSampleIndex int \l0x0040: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0042: IGET  (r2 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0044: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l  (r15 I:int A[D('trunCount' int)])\l  (r13 I:int A[D('totalSampleCount' int)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.initTables(int, int):void type: VIRTUAL \l0x0047: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0048: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0049: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x004a|0x004a: IF  (r10 I:?[int, byte, short, char] A[D('i' int)]) \>= (r12 I:?[int, byte, short, char] A[D('leafChildrenSize' int)])  \-\> B:14:0x006b \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: INVOKE  (r14 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('leafChildren' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>)])\l  (r10 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0050: CHECK_CAST  (r14 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r14 I:?[OBJECT, ARRAY]) \l0x0052: IGET  (r2 I:int) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('trun' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x0054: SGET  (r4 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trun int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0056|0x0056: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0068 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0058|0x0058: ARITH  (r17 I:int) = (r3 I:int A[D('trunIndex' int)]) + (1 int) \l0x005a: IGET  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('trun' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x005c: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x005e: MOVE  (r4 I:?[long, double]) = (r22 I:?[long, double] A[D('decodeTime' long)]) \l0x0060: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)])\l \l0x0062: INVOKE  (r8 I:int A[D('trunStartPosition' int)]) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r3 I:int)\l  (r4 I:long)\l  (r6 I:int)\l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int A[D('trunStartPosition' int)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTrun(com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle, int, long, int, com.google.android.exoplayer2.util.ParsableByteArray, int):int type: STATIC \l0x0066: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trunIndex' int)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0068|0x0068: ARITH  (r10 I:int A[D('i' int)]) = (r10 I:int A[D('i' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTruns((r20 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:long A[D('decodeTime' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001d\-0x002e: r16 'trunData' com.google.android.exoplayer2.util.ParsableByteArray\l  0x0028\-0x002e: r18 'trunSampleCount' int\l  0x0013\-0x0031: r9 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0048\-0x005a: r3 'trunIndex' int\l  0x005a\-0x0068: r17 'trunIndex' int\l  0x0052\-0x006b: r14 'trun' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0068\-0x006b: r3 'trunIndex' int\l  0x0049\-0x006b: r8 'trunStartPosition' int\l  0x000b\-0x006b: r10 'i' int\l  0x0006\-0x006b: r11 'leafChildren' java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>\l  0x000a\-0x006b: r12 'leafChildrenSize' int\l  0x0002\-0x006b: r13 'totalSampleCount' int\l  0x0001\-0x006b: r15 'trunCount' int\l  ?\-0x006b: r20 'traf' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  ?\-0x006b: r21 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  ?\-0x006b: r22 'decodeTime' long\l  ?\-0x006b: r24 'flags' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_9;
}

