digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaiz(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackEncryptionBox;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackFragment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r9 I:int) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox A[D('encryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox)])\l com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox.initializationVectorSize int \l0x0002: CONST  (r10 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0004: INVOKE  \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r10 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0007: INVOKE  (r2 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000b: INVOKE  (r1 I:int) = (r2 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(int):int type: STATIC \l0x000f: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l0x0011: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r10 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0016: INVOKE  \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r10 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: INVOKE  (r0 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x001d: INVOKE  (r4 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x0021: IGET  (r10 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleCount int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleCount' int)]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x004a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: NEW_INSTANCE  (r10 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0027: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0029: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002c: CONST_STR  (r12 I:java.lang.String) =  \"Length mismatch: \" \l0x002e: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r4 I:int A[D('sampleCount' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0036: CONST_STR  (r12 I:java.lang.String) =  \", \" \l0x0038: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: IGET  (r12 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleCount int \l0x003e: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0046: INVOKE  \l  (r10 I:com.google.android.exoplayer2.ParserException)\l  (r11 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0049|0x0049: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|0x004a: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('defaultSampleInfoSize' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0061 \l}"];
Node_9 [shape=record,label="{9\:\ 0x004d|0x004d: IGET  (r5 I:boolean[]) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleHasSubsampleEncryptionTable boolean[] \l0x004f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0050|0x0050: IF  (r3 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char] A[D('sampleCount' int)])  \-\> B:19:0x006d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0052|0x0052: INVOKE  (r6 I:int) = \l  (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0056: ARITH  (r8 I:int A[D('totalSize' int)]) = (r8 I:int A[D('totalSize' int)]) + (r6 I:int A[D('sampleInfoSize' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|0x0057: IF  (r6 I:?[int, byte, short, char] A[D('sampleInfoSize' int)]) \<= (r9 I:?[int, byte, short, char] A[D('vectorSize' int)])  \-\> B:15:0x005f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|0x0059: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: APUT  \l  (r5 I:boolean[] A[D('sampleHasSubsampleEncryptionTable' boolean[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char] A[D('i' int)])\l  (r10 I:boolean A[IMMUTABLE_TYPE])\l \l0x005c: ARITH  (r3 I:int A[D('i' int)]) = (r3 I:int A[D('i' int)]) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005f|0x005f: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: IF  (r0 I:?[int, byte, short, char] A[D('defaultSampleInfoSize' int)]) \<= (r9 I:?[int, byte, short, char] A[D('vectorSize' int)])  \-\> B:21:0x0071 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: ARITH  (r10 I:int) = (r0 I:int A[D('defaultSampleInfoSize' int)]) * (r4 I:int A[D('sampleCount' int)]) \l0x0066: ARITH  (r8 I:int A[D('totalSize' int)]) = (r8 I:int A[D('totalSize' int)]) + (r10 I:int) \l0x0067: IGET  (r10 I:boolean[]) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleHasSubsampleEncryptionTable boolean[] \l0x0069: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006a: INVOKE  \l  (r10 I:boolean[])\l  (r11 I:int)\l  (r4 I:int A[D('sampleCount' int)])\l  (r7 I:boolean A[D('subsampleEncryption' boolean)])\l java.util.Arrays.fill(boolean[], int, int, boolean):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x006d|0x006d: INVOKE  \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l  (r8 I:int A[D('totalSize' int)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.initEncryptionData(int):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0070|0x0070: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaiz((r13 I:com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox A[D('encryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('saiz' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('out' com.google.android.exoplayer2.extractor.mp4.TrackFragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0050\-0x0061: r3 'i' int\l  0x004f\-0x0061: r5 'sampleHasSubsampleEncryptionTable' boolean[]\l  0x0056\-0x0061: r6 'sampleInfoSize' int\l  0x0064\-0x006d: r7 'subsampleEncryption' boolean\l  0x001d\-0x0072: r0 'defaultSampleInfoSize' int\l  0x000f\-0x0072: r1 'flags' int\l  0x000b\-0x0072: r2 'fullAtom' int\l  0x0021\-0x0072: r4 'sampleCount' int\l  0x004b\-0x0072: r8 'totalSize' int\l  0x0002\-0x0072: r9 'vectorSize' int\l  ?\-0x0072: r13 'encryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox\l  ?\-0x0072: r14 'saiz' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0072: r15 'out' com.google.android.exoplayer2.extractor.mp4.TrackFragment\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_10;
Node_15 -> Node_14;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_18;
}

