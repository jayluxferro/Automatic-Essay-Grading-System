digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTrun(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;IJILcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r41 I:?[OBJECT, ARRAY] A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0004: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0007: INVOKE  (r15 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000b: INVOKE  (r8 I:int) = (r15 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(int):int type: STATIC \l0x000f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r36 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0011: IGET  (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.track com.google.android.exoplayer2.extractor.mp4.Track \l0x0013: MOVE  (r29 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0015: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r36 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x0017: IGET  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0019: IGET  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.header com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l0x001b: IGET  (r4 I:int[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunLength int[] \l0x001d: INVOKE  (r5 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x0021: APUT  \l  (r4 I:?[int, float][])\l  (r37 I:?[int, short, byte, char] A[D('index' int)])\l  (r5 I:?[int, float])\l \l0x0023: IGET  (r4 I:long[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunDataPosition long[] \l0x0025: IGET  (r0 I:long) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.dataPosition long \l0x0027: MOVE  (r32 I:?[long, double]) = (r0 I:?[long, double]) \l0x0029: APUT  \l  (r4 I:?[long, double][])\l  (r37 I:?[int, short, byte, char] A[D('index' int)])\l  (r32 I:?[long, double])\l \l0x002b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x002f|0x002f: IGET  (r4 I:long[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunDataPosition long[] \l0x0031: AGET  (r32 I:?[long, double]) = \l  (r4 I:?[long, double][])\l  (r37 I:?[int, short, byte, char] A[D('index' int)])\l \l0x0033: INVOKE  (r5 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0037: CAST  (r0 I:long) = (long) (r5 I:int) \l0x0038: MOVE  (r34 I:?[long, double]) = (r0 I:?[long, double]) \l0x003a: ARITH  (r32 I:long) = (r32 I:long) + (r34 I:long) \l0x003c: APUT  \l  (r4 I:?[long, double][])\l  (r37 I:?[int, short, byte, char] A[D('index' int)])\l  (r32 I:?[long, double])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x003e|0x003e: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0040|0x0040: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0104 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0042|0x0042: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0043|0x0043: IGET  (r12 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.flags int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstSampleFlagsPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: INVOKE  (r12 I:int A[D('firstSampleFlags' int)]) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|0x004d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0107 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|0x0051: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (512(0x200, float:7.175E\-43) ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x010b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: CONST  (r28 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0057|0x0057: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x010f \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: CONST  (r23 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (2048(0x800, float:2.87E\-42) ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0113 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|0x0061: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0063|0x0063: CONST  (r10 I:?[long, double]) = (0 ?[long, double]) \l0x0065: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x0067: IGET  (r4 I:long[]) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.editListDurations long[] \l}"];
Node_22 [shape=record,label="{22\:\ 0x0069|0x0069: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0091 \l}"];
Node_23 [shape=record,label="{23\:\ 0x006b|0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x006d: IGET  (r4 I:long[]) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.editListDurations long[] \l0x006f: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0070: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0071|0x0071: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0091 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0073|0x0073: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x0075: IGET  (r4 I:long[]) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.editListDurations long[] \l0x0077: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0078: AGET  (r4 I:?[long, double]) = (r4 I:?[long, double][]), (r5 I:?[int, short, byte, char]) \l0x007a: CONST  (r32 I:?[long, double]) = (0 ?[long, double]) \l0x007c: CMP_L  (r4 I:int) = (r4 I:long), (r32 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x007e|0x007e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0091 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0080|0x0080: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x0082: IGET  (r4 I:long[]) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.editListMediaTimes long[] \l0x0084: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0085: AGET  (r2 I:?[long, double]) = (r4 I:?[long, double][]), (r5 I:?[int, short, byte, char]) \l0x0087: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0089: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x008b: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.timescale long \l0x008d: INVOKE  (r10 I:long A[D('edtsOffset' long)]) = (r2 I:long), (r4 I:long), (r6 I:long) com.google.android.exoplayer2.util.Util.scaleLargeTimestamp(long, long, long):long type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x0091|0x0091: IGET  (r0 I:int[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleSizeTable int[] \l0x0093: MOVE  (r27 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0095: IGET  (r0 I:int[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleCompositionTimeOffsetTable int[] \l0x0097: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0099: IGET  (r0 I:long[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleDecodingTimeTable long[] \l0x009b: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x009d: IGET  (r0 I:boolean[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.sampleIsSyncFrameTable boolean[] \l0x009f: MOVE  (r24 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00a1: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00a3: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.type int \l0x00a5: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a6|0x00a6: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0117 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a8|0x00a8: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r40 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00aa|0x00aa: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0117 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00ac|0x00ac: CONST  (r31 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ae|0x00ae: IGET  (r4 I:int[]) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunLength int[] \l0x00b0: AGET  (r4 I:?[int, float]) = \l  (r4 I:?[int, float][])\l  (r37 I:?[int, short, byte, char] A[D('index' int)])\l \l0x00b2: ARITH  (r30 I:int) = (r42 I:int A[D('trackRunStart' int)]) + (r4 I:int) \l0x00b4: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r29 I:?[OBJECT, ARRAY] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l \l0x00b6: IGET  (r6 I:long) = (r0 I:com.google.android.exoplayer2.extractor.mp4.Track) com.google.android.exoplayer2.extractor.mp4.Track.timescale long \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b8|0x00b8: IF  (r37 I:?[int, byte, short, char] A[D('index' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:60:0x011a \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ba|0x00ba: IGET  (r2 I:long) = \l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.nextFragmentDecodeTime long \l}"];
Node_36 [shape=record,label="{36\:\ 0x00bc|0x00bc: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackRunStart' int)])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x00be|0x00be: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x00c0: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackRunEnd' int)])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c2|0x00c2: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:68:0x0139 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c4|0x00c4: IF  (r21 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleDurationsPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x011d \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c6|0x00c6: INVOKE  (r20 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x00ca|0x00ca: IF  (r28 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleSizesPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0122 \l}"];
Node_42 [shape=record,label="{42\:\ 0x00cc|0x00cc: INVOKE  (r26 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x00d0|0x00d0: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0127 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00d2|0x00d2: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstSampleFlagsPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0127 \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d4|0x00d4: MOVE  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSampleFlags' int)])\l \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d6|0x00d6: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleCompositionTimeOffsetsPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0133 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d8|0x00d8: INVOKE  (r25 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x00dc: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r25 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleOffset' int)])\l \l0x00de: ARITH  (r4 I:int) = (r0 I:int) * (1000 int) \l0x00e0: CAST  (r4 I:long) = (long) (r4 I:int) \l0x00e1: ARITH  (r4 I:long) = (r4 I:long) \/ (r6 I:long A[D('timescale' long)]) \l0x00e2: CAST  (r4 I:int) = (int) (r4 I:long) \l0x00e3: APUT  \l  (r17 I:?[int, float][] A[D('sampleCompositionTimeOffsetTable' int[])])\l  (r16 I:?[int, short, byte, char] A[D('i' int)])\l  (r4 I:?[int, float])\l \l}"];
Node_48 [shape=record,label="{48\:\ 0x00e5|0x00e5: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x00e7: INVOKE  (r4 I:long) = \l  (r2 I:long A[D('cumulativeTime' long)])\l  (r4 I:long)\l  (r6 I:long A[D('timescale' long)])\l com.google.android.exoplayer2.util.Util.scaleLargeTimestamp(long, long, long):long type: STATIC \l0x00eb: ARITH  (r4 I:long) = (r4 I:long) \- (r10 I:long A[D('edtsOffset' long)]) \l0x00ec: APUT  \l  (r19 I:?[long, double][] A[D('sampleDecodingTimeTable' long[])])\l  (r16 I:?[int, short, byte, char] A[D('i' int)])\l  (r4 I:?[long, double])\l \l0x00ee: APUT  \l  (r27 I:?[int, float][] A[D('sampleSizeTable' int[])])\l  (r16 I:?[int, short, byte, char] A[D('i' int)])\l  (r26 I:?[int, float] A[D('sampleSize' int)])\l \l0x00f0: ARITH  (r4 I:int) = (r22 I:int A[D('sampleFlags' int)]) \>\> (16 int) \l0x00f2: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00f4|0x00f4: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0137 \l}"];
Node_50 [shape=record,label="{50\:\ 0x00f6|0x00f6: IF  (r31 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('workaroundEveryVideoFrameIsSyncFrame' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x00fa \l}"];
Node_51 [shape=record,label="{51\:\ 0x00f8|0x00f8: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0137 \l}"];
Node_52 [shape=record,label="{52\:\ 0x00fa|0x00fa: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x00fb|0x00fb: APUT  \l  (r24 I:boolean[] A[D('sampleIsSyncFrameTable' boolean[]), IMMUTABLE_TYPE])\l  (r16 I:?[int, short, byte, char] A[D('i' int)])\l  (r4 I:boolean A[IMMUTABLE_TYPE])\l \l0x00fd: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleDuration' int)])\l \l0x00ff: CAST  (r4 I:long) = (long) (r0 I:int) \l0x0100: ARITH  (r2 I:long A[D('cumulativeTime' long)]) = (r2 I:long A[D('cumulativeTime' long)]) + (r4 I:long) \l0x0101: ARITH  (r16 I:int A[D('i' int)]) = (r16 I:int A[D('i' int)]) + (1 int) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0104|0x0104: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstSampleFlagsPresent' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_55 [shape=record,label="{55\:\ 0x0107|0x0107: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_56 [shape=record,label="{56\:\ 0x010b|0x010b: CONST  (r28 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_57 [shape=record,label="{57\:\ 0x010f|0x010f: CONST  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_58 [shape=record,label="{58\:\ 0x0113|0x0113: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_59 [shape=record,label="{59\:\ 0x0117|0x0117: CONST  (r31 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_60 [shape=record,label="{60\:\ 0x011a|0x011a: MOVE  (r2 I:?[long, double]) = (r38 I:?[long, double] A[D('decodeTime' long)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x011d|0x011d: IGET  (r0 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.duration int \l0x011f: MOVE  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_62 [shape=record,label="{62\:\ 0x0122|0x0122: IGET  (r0 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.size int \l0x0124: MOVE  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_63 [shape=record,label="{63\:\ 0x0127|0x0127: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleFlagsPresent' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x012e \l}"];
Node_64 [shape=record,label="{64\:\ 0x0129|0x0129: INVOKE  (r22 I:int) = \l  (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_65 [shape=record,label="{65\:\ 0x012e|0x012e: IGET  (r0 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.flags int \l0x0130: MOVE  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_66 [shape=record,label="{66\:\ 0x0133|0x0133: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0134: APUT  \l  (r17 I:?[int, float][] A[D('sampleCompositionTimeOffsetTable' int[])])\l  (r16 I:?[int, short, byte, char] A[D('i' int)])\l  (r4 I:?[int, float])\l \l}"];
Node_67 [shape=record,label="{67\:\ 0x0137|0x0137: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_68 [shape=record,label="{68\:\ 0x0139|0x0139: IPUT  \l  (r2 I:long A[D('cumulativeTime' long)])\l  (r14 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment A[D('fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment)])\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.nextFragmentDecodeTime long \l}"];
Node_69 [shape=record,label="{69\:\ 0x013b|0x013b: RETURN  (r30 I:int A[D('trackRunEnd' int)]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTrun((r36 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38 I:long A[D('decodeTime' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r40 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r41 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('trun' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r42 I:int A[D('trackRunStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x00dc\-0x00e5: r25 'sampleOffset' int\l  0x00bc\-0x0104: r2 'cumulativeTime' long\l  0x00b8\-0x0104: r6 'timescale' long\l  0x0065\-0x0104: r10 'edtsOffset' long\l  0x0045\-0x0104: r12 'firstSampleFlags' int\l  0x0043\-0x0104: r13 'firstSampleFlagsPresent' boolean\l  0x00be\-0x0104: r16 'i' int\l  0x0099\-0x0104: r17 'sampleCompositionTimeOffsetTable' int[]\l  0x0063\-0x0104: r18 'sampleCompositionTimeOffsetsPresent' boolean\l  0x009d\-0x0104: r19 'sampleDecodingTimeTable' long[]\l  0x00ca\-0x0104: r20 'sampleDuration' int\l  0x0051\-0x0104: r21 'sampleDurationsPresent' boolean\l  0x00d6\-0x0104: r22 'sampleFlags' int\l  0x005d\-0x0104: r23 'sampleFlagsPresent' boolean\l  0x00a1\-0x0104: r24 'sampleIsSyncFrameTable' boolean[]\l  0x00d0\-0x0104: r26 'sampleSize' int\l  0x0095\-0x0104: r27 'sampleSizeTable' int[]\l  0x0057\-0x0104: r28 'sampleSizesPresent' boolean\l  0x00b4\-0x0104: r30 'trackRunEnd' int\l  0x00ae\-0x0104: r31 'workaroundEveryVideoFrameIsSyncFrame' boolean\l  0x0122\-0x0139: r20 'sampleDuration' int\l  0x0133\-0x0139: r22 'sampleFlags' int\l  0x0127\-0x0139: r26 'sampleSize' int\l  0x011d\-0x013b: r2 'cumulativeTime' long\l  0x011a\-0x013b: r6 'timescale' long\l  0x000f\-0x013b: r8 'atomFlags' int\l  0x001b\-0x013b: r9 'defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\l  0x0117\-0x013b: r10 'edtsOffset' long\l  0x0107\-0x013b: r12 'firstSampleFlags' int\l  0x0107\-0x013b: r13 'firstSampleFlagsPresent' boolean\l  0x0019\-0x013b: r14 'fragment' com.google.android.exoplayer2.extractor.mp4.TrackFragment\l  0x000b\-0x013b: r15 'fullAtom' int\l  0x011d\-0x013b: r16 'i' int\l  0x0117\-0x013b: r17 'sampleCompositionTimeOffsetTable' int[]\l  0x0117\-0x013b: r18 'sampleCompositionTimeOffsetsPresent' boolean\l  0x0117\-0x013b: r19 'sampleDecodingTimeTable' long[]\l  0x010b\-0x013b: r21 'sampleDurationsPresent' boolean\l  0x0113\-0x013b: r23 'sampleFlagsPresent' boolean\l  0x0117\-0x013b: r24 'sampleIsSyncFrameTable' boolean[]\l  0x0117\-0x013b: r27 'sampleSizeTable' int[]\l  0x010f\-0x013b: r28 'sampleSizesPresent' boolean\l  0x0015\-0x013b: r29 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  0x011a\-0x013b: r30 'trackRunEnd' int\l  0x011a\-0x013b: r31 'workaroundEveryVideoFrameIsSyncFrame' boolean\l  ?\-0x013b: r36 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  ?\-0x013b: r37 'index' int\l  ?\-0x013b: r38 'decodeTime' long\l  ?\-0x013b: r40 'flags' int\l  ?\-0x013b: r41 'trun' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x013b: r42 'trackRunStart' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_54;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_55;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_56;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_57;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_58;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_59;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_59;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_60;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_68;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_61;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_62;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_63;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_63;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_66;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_67;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_67;
Node_52 -> Node_53;
Node_53 -> Node_37;
Node_54 -> Node_6;
Node_55 -> Node_12;
Node_56 -> Node_15;
Node_57 -> Node_18;
Node_58 -> Node_21;
Node_59 -> Node_33;
Node_60 -> Node_36;
Node_61 -> Node_41;
Node_62 -> Node_43;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_46;
Node_65 -> Node_46;
Node_66 -> Node_48;
Node_67 -> Node_53;
Node_68 -> Node_69;
}

