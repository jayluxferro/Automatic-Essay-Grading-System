digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onMoovContainerAtomRead(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$ContainerAtom;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r5 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.sideloadedTrack com.google.android.exoplayer2.extractor.mp4.Track \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0057 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST_STR  (r9 I:java.lang.String) =  \"Unexpected moov box.\" \l0x0009: INVOKE  (r5 I:boolean), (r9 I:java.lang.Object) com.google.android.exoplayer2.util.Assertions.checkState(boolean, java.lang.Object):void type: STATIC \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x000e: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0010: INVOKE  (r8 I:com.google.android.exoplayer2.drm.DrmInitData) = (r5 I:java.util.List) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.getDrmInitDataFromAtoms(java.util.List):com.google.android.exoplayer2.drm.DrmInitData type: STATIC \l0x0014: SGET  (r5 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mvex int \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0018: INVOKE  (r13 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getContainerAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom type: VIRTUAL \l0x001c: NEW_INSTANCE  (r10 I:android.util.SparseArray) =  android.util.SparseArray \l0x001e: INVOKE  (r10 I:android.util.SparseArray) android.util.SparseArray.\<init\>():void type: DIRECT \l0x0021: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0026: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('mvex' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0028: INVOKE  (r14 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x002c: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r11 I:?[int, byte, short, char] A[D('i' int)]) \>= (r14 I:?[int, byte, short, char] A[D('mvexChildrenSize' int)])  \-\> B:13:0x0066 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\>) = \l  (r13 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('mvex' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.leafChildren java.util.List \l0x0031: INVOKE  (r4 I:java.lang.Object) = (r5 I:java.util.List), (r11 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0035: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) (r4 I:?[OBJECT, ARRAY]) \l0x0037: IGET  (r5 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x0039: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trex int \l}"];
Node_6 [shape=record,label="{6\:\ 0x003b|0x003b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|0x003d: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x003f: INVOKE  (r19 I:android.util.Pair) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTrex(com.google.android.exoplayer2.util.ParsableByteArray):android.util.Pair type: STATIC \l0x0043: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('trexData' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>)])\l \l0x0045: IGET  (r5 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.first java.lang.Object \l0x0047: CHECK_CAST  (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('trexData' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>)])\l \l0x004f: IGET  (r9 I:java.lang.Object) = (r0 I:android.util.Pair) android.util.Pair.second java.lang.Object \l0x0051: INVOKE  \l  (r10 I:android.util.SparseArray A[D('defaultSampleValuesArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>)])\l  (r5 I:int)\l  (r9 I:java.lang.Object)\l android.util.SparseArray.put(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0054|0x0054: ARITH  (r11 I:int A[D('i' int)]) = (r11 I:int A[D('i' int)]) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0057|0x0057: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: IGET  (r5 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x005b: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mehd int \l}"];
Node_11 [shape=record,label="{11\:\ 0x005d|0x005d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0054 \l}"];
Node_12 [shape=record,label="{12\:\ 0x005f|0x005f: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x0061: INVOKE  (r6 I:long A[D('duration' long)]) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseMehd(com.google.android.exoplayer2.util.ParsableByteArray):long type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0066|0x0066: NEW_INSTANCE  (r18 I:android.util.SparseArray) =  android.util.SparseArray \l0x0068: INVOKE  (r18 I:android.util.SparseArray) android.util.SparseArray.\<init\>():void type: DIRECT \l0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x006d: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x006f: INVOKE  (r12 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0073: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0074|0x0074: IF  (r11 I:?[int, byte, short, char] A[D('i' int)]) \>= (r12 I:?[int, byte, short, char] A[D('moovContainerChildrenSize' int)])  \-\> B:21:0x009f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0076|0x0076: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x0078: IGET  (r5 I:java.util.List\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.containerChildren java.util.List \l0x007a: INVOKE  (r4 I:java.lang.Object) = (r5 I:java.util.List), (r11 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x007e: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) (r4 I:?[OBJECT, ARRAY]) \l0x0080: IGET  (r5 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.type int \l0x0082: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_trak int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0084|0x0084: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x009c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0086|0x0086: SGET  (r5 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_mvhd int \l0x0088: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l \l0x008a: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.getLeafAtomOfType(int):com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom type: VIRTUAL \l0x008e: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008f: INVOKE  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)])\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)\l  (r6 I:long A[D('duration' long)])\l  (r8 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l  (r9 I:boolean)\l com.google.android.exoplayer2.extractor.mp4.AtomParsers.parseTrak(com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom, com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom, long, com.google.android.exoplayer2.drm.DrmInitData, boolean):com.google.android.exoplayer2.extractor.mp4.Track type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0093|0x0093: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x009c \l}"];
Node_19 [shape=record,label="{19\:\ 0x0095|0x0095: IGET  (r5 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.id int \l0x0097: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('tracks' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.Track\>)])\l \l0x0099: INVOKE  \l  (r0 I:android.util.SparseArray)\l  (r5 I:int)\l  (r15 I:java.lang.Object A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l android.util.SparseArray.put(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x009c|0x009c: ARITH  (r11 I:int A[D('i' int)]) = (r11 I:int A[D('i' int)]) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x009f|0x009f: INVOKE  (r17 I:int) = \l  (r18 I:android.util.SparseArray A[D('tracks' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.Track\>)])\l android.util.SparseArray.size():int type: VIRTUAL \l0x00a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00a5: IGET  (r5 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x00a7: INVOKE  (r5 I:int) = (r5 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00ab|0x00ab: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0105 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ad|0x00ad: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ae|0x00ae: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackCount' int)])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x00b0|0x00b0: IF  (r11 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:27:0x00fa \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b2|0x00b2: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('tracks' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.Track\>)])\l \l0x00b4: INVOKE  (r15 I:java.lang.Object) = (r0 I:android.util.SparseArray), (r11 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x00b8: CHECK_CAST  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track) = (com.google.android.exoplayer2.extractor.mp4.Track) (r15 I:?[OBJECT, ARRAY]) \l0x00ba: NEW_INSTANCE  (r16 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) =  com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle \l0x00bc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00be: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x00c0: IGET  (r9 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.type int \l0x00c2: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r11 I:int A[D('i' int)])\l  (r9 I:int)\l com.google.android.exoplayer2.extractor.ExtractorOutput.track(int, int):com.google.android.exoplayer2.extractor.TrackOutput type: INTERFACE \l0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00c8: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.\<init\>(com.google.android.exoplayer2.extractor.TrackOutput):void type: DIRECT \l0x00cb: IGET  (r5 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.id int \l0x00cd: INVOKE  (r5 I:java.lang.Object) = \l  (r10 I:android.util.SparseArray A[D('defaultSampleValuesArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>)])\l  (r5 I:int)\l android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x00d1: CHECK_CAST  (r5 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = (com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) (r5 I:?[OBJECT, ARRAY]) \l0x00d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x00d5: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.init(com.google.android.exoplayer2.extractor.mp4.Track, com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues):void type: VIRTUAL \l0x00d8: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00da: IGET  (r5 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x00dc: IGET  (r9 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.id int \l0x00de: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x00e0: INVOKE  \l  (r5 I:android.util.SparseArray)\l  (r9 I:int)\l  (r0 I:java.lang.Object)\l android.util.SparseArray.put(int, java.lang.Object):void type: VIRTUAL \l0x00e3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00e5: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.durationUs long \l0x00e7: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x00e9: IGET  (r0 I:long) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.durationUs long \l0x00eb: MOVE  (r22 I:?[long, double]) = (r0 I:?[long, double]) \l0x00ed: INVOKE  (r20 I:long) = (r20 I:long), (r22 I:long) java.lang.Math.max(long, long):long type: STATIC \l0x00f1: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x00f3: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00f5: IPUT  \l  (r0 I:long)\l  (r2 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.durationUs long \l0x00f7: ARITH  (r11 I:int A[D('i' int)]) = (r11 I:int A[D('i' int)]) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00fa|0x00fa: INVOKE  \l  (r24 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.maybeInitExtraTracks():void type: DIRECT \l0x00fd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00ff: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0101: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l com.google.android.exoplayer2.extractor.ExtractorOutput.endTracks():void type: INTERFACE \l}"];
Node_28 [shape=record,label="{28\:\ 0x0104|0x0104: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x0105|0x0105: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0107: IGET  (r5 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0109: INVOKE  (r5 I:int) = (r5 I:android.util.SparseArray) android.util.SparseArray.size():int type: VIRTUAL \l0x010d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackCount' int)])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x010f|0x010f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x013c \l}"];
Node_31 [shape=record,label="{31\:\ 0x0111|0x0111: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0112|0x0112: INVOKE  (r5 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0115: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0116|0x0116: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackCount' int)])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x0118|0x0118: IF  (r11 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char])  \-\> B:28:0x0104 \l}"];
Node_35 [shape=record,label="{35\:\ 0x011a|0x011a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('tracks' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.Track\>)])\l \l0x011c: INVOKE  (r15 I:java.lang.Object) = (r0 I:android.util.SparseArray), (r11 I:int A[D('i' int)]) android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0120: CHECK_CAST  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track) = (com.google.android.exoplayer2.extractor.mp4.Track) (r15 I:?[OBJECT, ARRAY]) \l0x0122: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0124: IGET  (r5 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.trackBundles android.util.SparseArray \l0x0126: IGET  (r9 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.id int \l0x0128: INVOKE  (r5 I:java.lang.Object) = (r5 I:android.util.SparseArray), (r9 I:int) android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x012c: CHECK_CAST  (r5 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r5 I:?[OBJECT, ARRAY]) \l0x012e: IGET  (r9 I:int) = \l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l com.google.android.exoplayer2.extractor.mp4.Track.id int \l0x0130: INVOKE  (r9 I:java.lang.Object) = \l  (r10 I:android.util.SparseArray A[D('defaultSampleValuesArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>)])\l  (r9 I:int)\l android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x0134: CHECK_CAST  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = (com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) (r9 I:?[OBJECT, ARRAY]) \l0x0136: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)\l  (r15 I:com.google.android.exoplayer2.extractor.mp4.Track A[D('track' com.google.android.exoplayer2.extractor.mp4.Track)])\l  (r9 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.init(com.google.android.exoplayer2.extractor.mp4.Track, com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues):void type: VIRTUAL \l0x0139: ARITH  (r11 I:int A[D('i' int)]) = (r11 I:int A[D('i' int)]) + (1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x013c|0x013c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onMoovContainerAtomRead((r24 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r25 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom A[D('moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0043\-0x0054: r19 'trexData' android.util.Pair\<java.lang.Integer, com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>\l  0x0037\-0x0057: r4 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0026\-0x0057: r6 'duration' long\l  0x0014\-0x0057: r8 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  0x0021\-0x0057: r10 'defaultSampleValuesArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>\l  0x002d\-0x0057: r11 'i' int\l  0x001c\-0x0057: r13 'mvex' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x002c\-0x0057: r14 'mvexChildrenSize' int\l  0x0059\-0x0066: r4 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  0x0093\-0x009c: r15 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  0x0080\-0x009f: r4 'atom' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x00ba\-0x00fa: r15 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  0x00cb\-0x00fa: r16 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x0122\-0x013c: r15 'track' com.google.android.exoplayer2.extractor.mp4.Track\l  0x0059\-0x013d: r6 'duration' long\l  0x0059\-0x013d: r8 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\l  0x0059\-0x013d: r10 'defaultSampleValuesArray' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\>\l  0x0059\-0x013d: r11 'i' int\l  0x0073\-0x013d: r12 'moovContainerChildrenSize' int\l  0x0059\-0x013d: r13 'mvex' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\l  0x0059\-0x013d: r14 'mvexChildrenSize' int\l  0x00a3\-0x013d: r17 'trackCount' int\l  0x006b\-0x013d: r18 'tracks' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.Track\>\l  ?\-0x013d: r25 'moov' com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_24;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_36;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_28;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_33;
Node_36 -> Node_32;
}

