digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaio(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackFragment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r8.setPosition(8)\lint r2 = r8.readInt()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if ((com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(r2) & 1) != 1) goto L_0x0015\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|r8.skipBytes(8)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|int r0 = r8.readUnsignedIntToInt()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r0 == 1) goto L_0x0034\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b}"];
Node_6 [shape=record,label="{6\:\ 0x0033|throw new com.google.android.exoplayer2.ParserException(new java.lang.StringBuilder().append(\"Unexpected saio entry count: \").append(r0).toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|int r3 = com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomVersion(r2)\llong r6 = r9.auxiliaryDataPosition\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|if (r3 != 0) goto L_0x0044\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|long r4 = r8.readUnsignedInt()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|PHI: r4 \l  PHI: (r4v2 long) = (r4v1 long), (r4v4 long) binds: [B:12:0x0044, B:9:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|r9.auxiliaryDataPosition = r4 + r6\l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|long r4 = r8.readUnsignedLongToLong()\l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaio((r8v0 'saio' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'out' com.google.android.exoplayer2.extractor.mp4.TrackFragment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_10;
}

