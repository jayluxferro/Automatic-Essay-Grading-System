digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readEncryptionData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4 = null\lr2 = Long.MAX_VALUE\lint r5 = r10.trackBundles.size()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r1 r2 r4 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:0:0x0000, B:7:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'nextDataOffset' long) = (r2v0 'nextDataOffset' long), (r2v2 'nextDataOffset' long) binds: [B:0:0x0000, B:7:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (r4v0 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle), (r4v2 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) binds: [B:0:0x0000, B:7:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:7:0x002d\l|if (r1 \>= r5) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|com.google.android.exoplayer2.extractor.mp4.TrackFragment r6 = r10.trackBundles.valueAt(r1).fragment\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|if (r6.sampleEncryptionDataNeedsFill == false) goto L_0x002d\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d}"];
Node_5 [shape=record,label="{5\:\ 0x0021|if ((r6.auxiliaryDataPosition \> r2 ? 1 : (r6.auxiliaryDataPosition == r2 ? 0 : \-1)) \>= 0) goto L_0x002d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|long r2 = r6.auxiliaryDataPosition\lcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle r4 = r10.trackBundles.valueAt(r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|LOOP_END\lPHI: r2 r4 \l  PHI: (r2v2 'nextDataOffset' long) = (r2v1 'nextDataOffset' long), (r2v1 'nextDataOffset' long), (r2v3 'nextDataOffset' long) binds: [B:17:0x002d, B:18:0x002d, B:16:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (r4v1 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle), (r4v1 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle), (r4v4 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) binds: [B:17:0x002d, B:18:0x002d, B:16:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:7:0x002d\l|int r1 = r1 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (r4 != null) goto L_0x0036\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|r10.parserState = 3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|int r0 = (int) (r2 \- r11.getPosition())\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|if (r0 \>= 0) goto L_0x0047\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f}"];
Node_13 [shape=record,label="{13\:\ 0x0046|throw new com.google.android.exoplayer2.ParserException(\"Offset to encryption data was negative.\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|r11.skipFully(r0)\lr4.fragment.fillEncryptionData(r11)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.readEncryptionData((r10v0 'this' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r11v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_16;
Node_7 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_20;
Node_15 -> Node_8;
Node_16 -> Node_7;
Node_17 -> Node_7;
Node_18 -> Node_7;
}

