digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaiz(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackEncryptionBox;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/TrackFragment;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r9 = r13.initializationVectorSize\lr14.setPosition(8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if ((com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(r14.readInt()) & 1) != 1) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|r14.skipBytes(8)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|int r0 = r14.readUnsignedByte()\lint r4 = r14.readUnsignedIntToInt()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r4 == r15.sampleCount) goto L_0x004a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025}"];
Node_6 [shape=record,label="{6\:\ 0x0049|throw new com.google.android.exoplayer2.ParserException(new java.lang.StringBuilder().append(\"Length mismatch: \").append(r4).append(\", \").append(r15.sampleCount).toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|r8 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|if (r0 != 0) goto L_0x0061\l}"];
Node_9 [shape=record,label="{9\:\ 0x004d|boolean[] r5 = r15.sampleHasSubsampleEncryptionTable\lr3 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0050|LOOP_START\lPHI: r3 r8 \l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v2 'i' int) binds: [B:9:0x004d, B:14:0x005a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v3 'totalSize' int) = (r8v0 'totalSize' int), (r8v4 'totalSize' int) binds: [B:9:0x004d, B:14:0x005a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x0050\-\>B:14:0x005a\l|if (r3 \>= r4) goto L_0x006d\l}"];
Node_11 [shape=record,label="{11\:\ 0x0052|int r6 = r14.readUnsignedByte()\lint r8 = r8 + r6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|if (r6 \<= r9) goto L_0x005f\l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|r10 = true\l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|LOOP_END\lPHI: r10 \l  PHI: (r10v6 boolean) = (r10v5 boolean), (r10v7 boolean) binds: [B:24:0x005a, B:23:0x005a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x0050\-\>B:14:0x005a\l|r5[r3] = r10\lint r3 = r3 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x005f|r10 = false\l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|if (r0 \<= r9) goto L_0x0071\l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|r7 = true\l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|PHI: r7 \l  PHI: (r7v1 'subsampleEncryption' boolean) = (r7v0 'subsampleEncryption' boolean), (r7v2 'subsampleEncryption' boolean) binds: [B:21:0x0071, B:17:0x0063] A[DONT_GENERATE, DONT_INLINE]\l|int r8 = 0 + (r0 * r4)\ljava.util.Arrays.fill(r15.sampleHasSubsampleEncryptionTable, 0, r4, r7)\l}"];
Node_19 [shape=record,label="{19\:\ 0x006d|PHI: r8 \l  PHI: (r8v1 'totalSize' int) = (r8v2 'totalSize' int), (r8v3 'totalSize' int) binds: [B:18:0x0064, B:22:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|r15.initEncryptionData(r8)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0070|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|r7 = false\l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x005a|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSaiz((r13v0 'encryptionBox' com.google.android.exoplayer2.extractor.mp4.TrackEncryptionBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'saiz' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'out' com.google.android.exoplayer2.extractor.mp4.TrackFragment A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_22;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_23;
Node_14 -> Node_10;
Node_15 -> Node_24;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_18;
Node_22 -> Node_19;
Node_23 -> Node_14;
Node_24 -> Node_14;
}

