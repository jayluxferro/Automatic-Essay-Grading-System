digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTfhd(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Landroid\/util\/SparseArray;I)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r11 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r11 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0005: INVOKE  (r8 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0009: INVOKE  (r0 I:int) = (r8 I:int A[D('fullAtom' int)]) com.google.android.exoplayer2.extractor.mp4.Atom.parseFullAtomFlags(int):int type: STATIC \l0x000d: INVOKE  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0011: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r15 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: INVOKE  (r9 I:java.lang.Object) = \l  (r14 I:android.util.SparseArray A[D('trackBundles' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>)])\l  (r10 I:int A[D('trackId' int)])\l android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x0019: CHECK_CAST  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackId' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: INVOKE  (r2 I:long) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedLongToLong():long type: VIRTUAL \l0x0029: IGET  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x002b: IPUT  \l  (r2 I:long A[D('baseDataPosition' long)])\l  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.dataPosition long \l0x002d: IGET  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x002f: IPUT  \l  (r2 I:long A[D('baseDataPosition' long)])\l  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.auxiliaryDataPosition long \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IGET  (r7 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.defaultSampleValues com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l0x0033: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: INVOKE  (r11 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x003b: ARITH  (r1 I:int) = (r11 I:int) + (\-1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0062 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: INVOKE  (r4 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0065 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0049|0x0049: INVOKE  (r6 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('atomFlags' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0068 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: INVOKE  (r5 I:int) = \l  (r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0055|0x0055: IGET  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0057: NEW_INSTANCE  (r12 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues) =  com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l0x0059: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l  (r1 I:int A[D('defaultSampleDescriptionIndex' int)])\l  (r4 I:int A[D('defaultSampleDuration' int)])\l  (r6 I:int A[D('defaultSampleSize' int)])\l  (r5 I:int A[D('defaultSampleFlags' int)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.\<init\>(int, int, int, int):void type: DIRECT \l0x005c: IPUT  \l  (r12 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)\l  (r11 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.header com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues \l}"];
Node_23 [shape=record,label="{23\:\ 0x005f|0x005f: IGET  (r1 I:int A[D('defaultSampleDescriptionIndex' int)]) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.sampleDescriptionIndex int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0062|0x0062: IGET  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.duration int \l}"];
Node_25 [shape=record,label="{25\:\ 0x0065|0x0065: IGET  (r6 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.size int \l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|0x0068: IGET  (r5 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues A[D('defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues)])\l com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues.flags int \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseTfhd((r13 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('tfhd' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0015: r10 'trackId' int\l  0x001b\-0x001e: r9 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x001f\-0x0021: r10 'trackId' int\l  0x0029\-0x0031: r2 'baseDataPosition' long\l  0x003d\-0x005f: r1 'defaultSampleDescriptionIndex' int\l  0x0045\-0x005f: r4 'defaultSampleDuration' int\l  0x0055\-0x005f: r5 'defaultSampleFlags' int\l  0x004d\-0x005f: r6 'defaultSampleSize' int\l  0x000d\-0x006a: r0 'atomFlags' int\l  0x0062\-0x006a: r1 'defaultSampleDescriptionIndex' int\l  0x0065\-0x006a: r4 'defaultSampleDuration' int\l  0x0068\-0x006a: r6 'defaultSampleSize' int\l  0x0033\-0x006a: r7 'defaultSampleValues' com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues\l  0x0009\-0x006a: r8 'fullAtom' int\l  0x0021\-0x006a: r9 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  ?\-0x006a: r13 'tfhd' com.google.android.exoplayer2.util.ParsableByteArray\l  0x0000\-0x006a: r14 'trackBundles' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>\l  ?\-0x006a: r15 'flags' int\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;, Landroid\/util\/SparseArray, \<, Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;, \>;I), Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_24;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_22;
Node_22 -> Node_5;
Node_23 -> Node_13;
Node_24 -> Node_16;
Node_25 -> Node_19;
Node_26 -> Node_22;
}

