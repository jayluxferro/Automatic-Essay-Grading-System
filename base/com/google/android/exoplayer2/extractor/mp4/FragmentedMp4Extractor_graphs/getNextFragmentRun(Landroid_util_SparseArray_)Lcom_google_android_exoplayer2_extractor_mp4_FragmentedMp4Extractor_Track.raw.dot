digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.getNextFragmentRun(Landroid\/util\/SparseArray;)Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x0006: INVOKE  (r5 I:int) = \l  (r10 I:android.util.SparseArray A[D('trackBundles' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>)])\l android.util.SparseArray.size():int type: VIRTUAL \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r5 I:?[int, byte, short, char] A[D('trackBundlesSize' int)])  \-\> B:8:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r4 I:java.lang.Object) = \l  (r10 I:android.util.SparseArray A[D('trackBundles' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>)])\l  (r0 I:int A[D('i' int)])\l android.util.SparseArray.valueAt(int):java.lang.Object type: VIRTUAL \l0x0011: CHECK_CAST  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) = (com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle) (r4 I:?[OBJECT, ARRAY]) \l0x0013: IGET  (r8 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.currentTrackRunIndex int \l0x0015: IGET  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0017: IGET  (r9 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunCount int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IGET  (r8 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.fragment com.google.android.exoplayer2.extractor.mp4.TrackFragment \l0x0020: IGET  (r8 I:long[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.mp4.TrackFragment)\l com.google.android.exoplayer2.extractor.mp4.TrackFragment.trunDataPosition long[] \l0x0022: IGET  (r9 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.TrackBundle.currentTrackRunIndex int \l0x0024: AGET  (r6 I:?[long, double]) = (r8 I:?[long, double][]), (r9 I:?[int, short, byte, char]) \l0x0026: CMP_L  (r8 I:int) = \l  (r6 I:long A[D('trunOffset' long)])\l  (r2 I:long A[D('nextTrackRunOffset' long)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:4:0x001b \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: MOVE  (r1 I:?[OBJECT, ARRAY] A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)]) = \l  (r4 I:?[OBJECT, ARRAY] A[D('trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l0x002b: MOVE  (r2 I:?[long, double] A[D('nextTrackRunOffset' long)]) = (r6 I:?[long, double] A[D('trunOffset' long)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: RETURN  \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle A[D('nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle)])\l \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.getNextFragmentRun((r10 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0013\-0x002d: r4 'trackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x0026\-0x002d: r6 'trunOffset' long\l  0x000b\-0x002d: r0 'i' int\l  0x0001\-0x002d: r1 'nextTrackBundle' com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\l  0x0006\-0x002d: r2 'nextTrackRunOffset' long\l  0x000a\-0x002d: r5 'trackBundlesSize' int\l  0x0000\-0x002d: r10 'trackBundles' android.util.SparseArray\<com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor$TrackBundle\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/util\/SparseArray, \<, Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;, \>;), Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/FragmentedMp4Extractor$TrackBundle;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_4;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_4;
}

