digraph "CFG forcom.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onLeafAtomRead(Lcom\/google\/android\/exoplayer2\/extractor\/mp4\/Atom$LeafAtom;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.containerAtoms java.util.Stack \l0x0002: INVOKE  (r1 I:boolean) = (r1 I:java.util.Stack) java.util.Stack.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r1 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom\>) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.containerAtoms java.util.Stack \l0x000a: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x000e: CHECK_CAST  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) = (com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom) (r1 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mp4.Atom$ContainerAtom)\l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.ContainerAtom.add(com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x0016: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_sidx int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0037 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x001c: INVOKE  (r0 I:android.util.Pair) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:long A[D('inputPosition' long)])\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.parseSidx(com.google.android.exoplayer2.util.ParsableByteArray, long):android.util.Pair type: STATIC \l0x0020: IGET  (r1 I:java.lang.Object) = \l  (r0 I:android.util.Pair A[D('result' android.util.Pair\<java.lang.Long, com.google.android.exoplayer2.extractor.ChunkIndex\>)])\l android.util.Pair.first java.lang.Object \l0x0022: CHECK_CAST  (r1 I:java.lang.Long) = (java.lang.Long) (r1 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r2 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0028: IPUT  \l  (r2 I:long)\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.segmentIndexEarliestPresentationTimeUs long \l0x002a: IGET  (r2 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x002c: IGET  (r1 I:java.lang.Object) = \l  (r0 I:android.util.Pair A[D('result' android.util.Pair\<java.lang.Long, com.google.android.exoplayer2.extractor.ChunkIndex\>)])\l android.util.Pair.second java.lang.Object \l0x002e: CHECK_CAST  (r1 I:com.google.android.exoplayer2.extractor.SeekMap) = (com.google.android.exoplayer2.extractor.SeekMap) (r1 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r1 I:com.google.android.exoplayer2.extractor.SeekMap)\l com.google.android.exoplayer2.extractor.ExtractorOutput.seekMap(com.google.android.exoplayer2.extractor.SeekMap):void type: INTERFACE \l0x0033: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0034: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.haveOutputSeekMap boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.type int \l0x0039: SGET  (r2 I:int) =  com.google.android.exoplayer2.extractor.mp4.Atom.TYPE_emsg int \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom)])\l com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom.data com.google.android.exoplayer2.util.ParsableByteArray \l0x003f: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onEmsgLeafAtomRead(com.google.android.exoplayer2.util.ParsableByteArray):void type: DIRECT \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.onLeafAtomRead((r4 'this' I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom A[D('leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('inputPosition' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0020\-0x0037: r0 'result' android.util.Pair\<java.lang.Long, com.google.android.exoplayer2.extractor.ChunkIndex\>\l  ?\-0x0042: r5 'leaf' com.google.android.exoplayer2.extractor.mp4.Atom$LeafAtom\l  ?\-0x0042: r6 'inputPosition' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_3;
}

