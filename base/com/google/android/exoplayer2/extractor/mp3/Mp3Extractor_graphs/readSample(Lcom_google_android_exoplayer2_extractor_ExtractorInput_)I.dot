digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.Mp3Extractor.readSample(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r14.sampleBytesRemaining != 0) goto L_0x0078\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r15.resetPeekPosition()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r15.peekFully(r14.scratch.data, 0, 4, true) != false) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|r14.scratch.setPosition(0)\lint r10 = r14.scratch.readInt()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|if (headersMatch(r10, (long) r14.synchronizedHeaderData) == false) goto L_0x0032\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (com.google.android.exoplayer2.extractor.MpegAudioHeader.getFrameSize(r10) != \-1) goto L_0x003b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|r15.skipFully(1)\lr14.synchronizedHeaderData = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|com.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader(r10, r14.synchronizedHeader)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|if ((r14.basisTimeUs \> com.google.android.exoplayer2.C1260C.TIME_UNSET ? 1 : (r14.basisTimeUs == com.google.android.exoplayer2.C1260C.TIME_UNSET ? 0 : \-1)) != 0) goto L_0x0072\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|r14.basisTimeUs = r14.seeker.getTimeUs(r15.getPosition())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0060|if ((r14.forcedFirstSampleTimestampUs \> com.google.android.exoplayer2.C1260C.TIME_UNSET ? 1 : (r14.forcedFirstSampleTimestampUs == com.google.android.exoplayer2.C1260C.TIME_UNSET ? 0 : \-1)) == 0) goto L_0x0072\l}"];
Node_14 [shape=record,label="{14\:\ 0x0062|long r8 = r14.seeker.getTimeUs(0)\lr14.basisTimeUs = r14.basisTimeUs + (r14.forcedFirstSampleTimestampUs \- r8)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0072|r14.sampleBytesRemaining = r14.synchronizedHeader.frameSize\l}"];
Node_16 [shape=record,label="{16\:\ 0x0078|int r0 = r14.trackOutput.sampleData(r15, r14.sampleBytesRemaining, true)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0082|if (r0 != \-1) goto L_0x0086\l}"];
Node_18 [shape=record,label="{18\:\ 0x0084|SYNTHETIC\lRETURN\l|return \-1\l}"];
Node_19 [shape=record,label="{19\:\ 0x0086|r14.sampleBytesRemaining = r14.sampleBytesRemaining \- r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x008d|if (r14.sampleBytesRemaining \<= 0) goto L_0x0091\l}"];
Node_21 [shape=record,label="{21\:\ 0x008f|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0091|com.google.android.exoplayer2.extractor.TrackOutput r1 = r14.trackOutput\lr1.sampleMetadata(r14.basisTimeUs + ((r14.samplesRead * com.google.android.exoplayer2.C1260C.MICROS_PER_SECOND) \/ ((long) r14.synchronizedHeader.sampleRate)), 1, r14.synchronizedHeader.frameSize, 0, (byte[]) null)\lr14.samplesRead = r14.samplesRead + ((long) r14.synchronizedHeader.samplesPerFrame)\lr14.sampleBytesRemaining = 0\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.readSample((r14v0 'this' com.google.android.exoplayer2.extractor.mp3.Mp3Extractor A[IMMUTABLE_TYPE, THIS]), (r15v0 'extractorInput' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_24;
}

