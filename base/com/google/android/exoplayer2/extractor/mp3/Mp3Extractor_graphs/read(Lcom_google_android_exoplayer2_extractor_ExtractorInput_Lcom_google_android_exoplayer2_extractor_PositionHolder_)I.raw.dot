digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.Mp3Extractor.read(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeaderData int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|SYNTHETIC\lSplitter:B:3:0x000b\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000b\l|0x000b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r1 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r2 I:boolean)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronize(com.google.android.exoplayer2.extractor.ExtractorInput, boolean):boolean type: DIRECT A[Catch:\{ EOFException \-\> 0x008f \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0010: IGET  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x008a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r19 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r20 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.maybeReadSeekFrame(com.google.android.exoplayer2.extractor.ExtractorInput):com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker type: DIRECT \l0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x001a: IPUT  \l  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker)\l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x001e: IGET  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0024: IGET  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l0x0026: INVOKE  (r2 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.Seeker.isSeekable():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x002e: IGET  (r2 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.flags int \l0x0030: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r19 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r20 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.getConstantBitrateSeeker(com.google.android.exoplayer2.extractor.ExtractorInput):com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker type: DIRECT \l0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x003a: IPUT  \l  (r2 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker)\l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x003e: IGET  (r2 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0040: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0042: IGET  (r3 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.seeker com.google.android.exoplayer2.extractor.mp3.Mp3Extractor$Seeker \l0x0044: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r3 I:com.google.android.exoplayer2.extractor.SeekMap)\l com.google.android.exoplayer2.extractor.ExtractorOutput.seekMap(com.google.android.exoplayer2.extractor.SeekMap):void type: INTERFACE \l0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0049: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.trackOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x004b: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0050: IGET  (r3 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeader com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0052: IGET  (r3 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.mimeType java.lang.String \l0x0054: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0055: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0056: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x005a: IGET  (r7 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeader com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x005c: IGET  (r7 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.channels int \l0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0060: IGET  (r8 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeader com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0062: IGET  (r8 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.sampleRate int \l0x0064: CONST  (r9 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0065: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0067: IGET  (r10 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.gaplessInfoHolder com.google.android.exoplayer2.extractor.GaplessInfoHolder \l0x0069: IGET  (r10 I:int) = \l  (r10 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderDelay int \l0x006b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x006d: IGET  (r11 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.gaplessInfoHolder com.google.android.exoplayer2.extractor.GaplessInfoHolder \l0x006f: IGET  (r11 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderPadding int \l0x0071: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0072: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0073: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0074: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0077: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.flags int \l0x0079: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007b: ARITH  (r16 I:?[int, boolean, short, byte, char]) = (r16 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x007d|0x007d: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0092 \l}"];
Node_16 [shape=record,label="{16\:\ 0x007f|0x007f: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0081|0x0081: INVOKE  (r2 I:com.google.android.exoplayer2.Format) = \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:int)\l  (r12 I:java.util.List)\l  (r13 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r14 I:int)\l  (r15 I:java.lang.String)\l  (r16 I:com.google.android.exoplayer2.metadata.Metadata)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String, com.google.android.exoplayer2.metadata.Metadata):com.google.android.exoplayer2.Format type: STATIC \l0x0085: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0087: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x008a|0x008a: INVOKE  (r2 I:int) = \l  (r19 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r20 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.readSample(com.google.android.exoplayer2.extractor.ExtractorInput):int type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x008e|0x008e: RETURN  (r2 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x008f|ExcHandler: EOFException null\lSplitter:B:3:0x000b\l|0x008f: MOVE_EXCEPTION  (r17 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0090|0x0090: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0092|0x0092: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0094: IGET  (r0 I:com.google.android.exoplayer2.metadata.Metadata) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.metadata com.google.android.exoplayer2.metadata.Metadata \l0x0096: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.read((r19 'this' I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor A[IMMUTABLE_TYPE, THIS]), (r20 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('seekPosition' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0090\-0x0092: r17 'e' java.io.EOFException\l  ?\-0x0098: r20 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0098: r21 'seekPosition' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_19;
Node_22 -> Node_17;
}

