digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronize(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sniffing' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l0x000b: INVOKE  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x000f: CONST  (r10 I:?[long, double]) = (0 ?[long, double]) \l0x0011: CMP_L  (r8 I:int) = (r8 I:long), (r10 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.peekId3Data(com.google.android.exoplayer2.extractor.ExtractorInput):void type: DIRECT \l0x0018: INVOKE  (r8 I:long) = \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPeekPosition():long type: INTERFACE \l0x001c: CAST  (r3 I:int A[D('peekedId3Bytes' int)]) = (int) (r8 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sniffing' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r3 I:int A[D('peekedId3Bytes' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0024: IGET  (r9 I:byte[]) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0026: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: CONST  (r11 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r7 I:?[int, byte, short, char] A[D('validFrameCount' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: INVOKE  (r8 I:boolean) = \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r9 I:byte[])\l  (r10 I:int)\l  (r11 I:int)\l  (r8 I:boolean)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int, boolean):boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0041 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sniffing' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0097 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: ARITH  (r8 I:int) = (r3 I:int A[D('peekedId3Bytes' int)]) + (r5 I:int A[D('searchedBytes' int)]) \l0x0035: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IPUT  \l  (r0 I:int A[D('candidateSynchronizedHeaderData' int)])\l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeaderData int \l0x003a: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: RETURN  (r8 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: CONST  (r4 I:?[int, float, short, byte, char] A[D('searchLimitBytes' int)]) = \l  (131072(0x20000, float:1.83671E\-40) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0043: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0044: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0047: IGET  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0049: INVOKE  (r2 I:int) = (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('candidateSynchronizedHeaderData' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0056 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004f|0x004f: CAST  (r8 I:long) = (long) (r0 I:int A[D('candidateSynchronizedHeaderData' int)]) \l0x0050: INVOKE  (r8 I:boolean) = (r2 I:int A[D('headerData' int)]), (r8 I:long) com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.headersMatch(int, long):boolean type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|0x0054: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x005d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: INVOKE  (r1 I:int) = (r2 I:int A[D('headerData' int)]) com.google.android.exoplayer2.extractor.MpegAudioHeader.getFrameSize(int):int type: STATIC \l0x005a: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameSize' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0082 \l}"];
Node_25 [shape=record,label="{25\:\ 0x005d|0x005d: ARITH  (r6 I:int) = (r5 I:int A[D('searchedBytes' int)]) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x005f|0x005f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('searchedBytes' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('searchLimitBytes' int)])  \-\> B:31:0x006e \l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|0x0061: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sniffing' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x006b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|0x0063: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0065: CONST_STR  (r9 I:java.lang.String) =  \"Searched too many bytes.\" \l0x0067: INVOKE  \l  (r8 I:com.google.android.exoplayer2.ParserException)\l  (r9 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x006a|0x006a: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x006b|0x006b: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('searchedBytes' int)])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x006e|0x006e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('validFrameCount' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('candidateSynchronizedHeaderData' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0070|0x0070: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sniffing' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x007c \l}"];
Node_33 [shape=record,label="{33\:\ 0x0072|0x0072: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l0x0075: ARITH  (r8 I:int) = (r3 I:int A[D('peekedId3Bytes' int)]) + (r6 I:int A[D('searchedBytes' int)]) \l0x0077: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l0x007a: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('searchedBytes' int)])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x007c|0x007c: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x007d: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x0080: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('searchedBytes' int)])\l \l}"];
Node_35 [shape=record,label="{35\:\ 0x0082|0x0082: ARITH  (r7 I:int A[D('validFrameCount' int)]) = (r7 I:int A[D('validFrameCount' int)]) + (1 int) \l0x0084: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0085|0x0085: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('validFrameCount' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0093 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0087|0x0087: IGET  (r8 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r12 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronizedHeader com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0089: INVOKE  \l  (r2 I:int A[D('headerData' int)])\l  (r8 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader(int, com.google.android.exoplayer2.extractor.MpegAudioHeader):boolean type: STATIC \l0x008c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('candidateSynchronizedHeaderData' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('headerData' int)])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x008d|0x008d: ARITH  (r8 I:int) = (r1 I:int A[D('frameSize' int)]) + (\-4 int) \l0x008f: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l}"];
Node_39 [shape=record,label="{39\:\ 0x0093|0x0093: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0094|0x0094: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('validFrameCount' int)]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x008d \l}"];
Node_42 [shape=record,label="{42\:\ 0x0097|0x0097: INVOKE  \l  (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronize((r12 'this' I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor A[IMMUTABLE_TYPE, THIS]), (r13 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[D('sniffing' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0008\-0x003c: r4 'searchLimitBytes' int\l  0x005a\-0x005d: r1 'frameSize' int\l  0x0004\-0x005f: r5 'searchedBytes' int\l  0x005f\-0x006d: r6 'searchedBytes' int\l  0x006d\-0x006e: r5 'searchedBytes' int\l  0x006e\-0x007b: r6 'searchedBytes' int\l  0x007b\-0x007c: r5 'searchedBytes' int\l  0x007c\-0x0081: r6 'searchedBytes' int\l  0x0082\-0x0097: r1 'frameSize' int\l  0x004d\-0x0097: r2 'headerData' int\l  0x0002\-0x009a: r0 'candidateSynchronizedHeaderData' int\l  0x0003\-0x009a: r3 'peekedId3Bytes' int\l  0x003f\-0x009a: r4 'searchLimitBytes' int\l  0x0081\-0x009a: r5 'searchedBytes' int\l  0x0001\-0x009a: r7 'validFrameCount' int\l  ?\-0x009a: r13 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x009a: r14 'sniffing' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_19;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_42;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_3;
Node_18 -> Node_11;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_30 -> Node_16;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_8;
Node_34 -> Node_8;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_8;
Node_39 -> Node_40;
Node_40 -> Node_38;
Node_40 -> Node_13[style=dashed];
Node_42 -> Node_15;
}

