digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.VbriSeeker.create(Lcom\/google\/android\/exoplayer2\/extractor\/MpegAudioHeader;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;JJ)Lcom\/google\/android\/exoplayer2\/extractor\/mp3\/VbriSeeker;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0004: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x0007: INVOKE  (r15 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r15 I:?[int, byte, short, char] A[D('numFrames' int)]) \> (0 ?[int, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  \l  (r4 I:com.google.android.exoplayer2.extractor.mp3.VbriSeeker)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x0011: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.sampleRate int \l0x0013: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CAST  (r4 I:long) = (long) (r15 I:int A[D('numFrames' int)]) \l0x0016: CONST  (r8 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x0019: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (32000(0x7d00, float:4.4842E\-41) ?[int, float, short, byte, char])\l \l0x001b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleRate' int)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:12:0x0062 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1152(0x480, float:1.614E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: CAST  (r6 I:long) = (long) (r6 I:int) \l0x0022: ARITH  (r6 I:long) = (r6 I:long) * (r8 I:long) \l0x0023: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleRate' int)])\l \l0x0025: CAST  (r8 I:long) = (long) (r0 I:int) \l0x0026: INVOKE  (r10 I:long) = (r4 I:long), (r6 I:long), (r8 I:long) com.google.android.exoplayer2.util.Util.scaleLargeTimestamp(long, long, long):long type: STATIC \l0x002a: INVOKE  (r12 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x002e: INVOKE  (r18 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x0032: INVOKE  (r13 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x0036: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0037: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0039: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x003e: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.frameSize int \l0x0040: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0041: ARITH  (r24 I:long A[D('position' long)]) = (r24 I:long A[D('position' long)]) + (r4 I:long) \l0x0043: ARITH  (r4 I:int) = (r12 I:int A[D('entryCount' int)]) + (1 int) \l0x0045: NEW_ARRAY  (r0 I:long[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0047: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0049: ARITH  (r4 I:int) = (r12 I:int A[D('entryCount' int)]) + (1 int) \l0x004b: NEW_ARRAY  (r0 I:long[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x004d: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0050: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0052: APUT  \l  (r20 I:?[long, double][] A[D('timesUs' long[])])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x0054: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0055: APUT  \l  (r16 I:?[long, double][] A[D('positions' long[])])\l  (r4 I:?[int, short, byte, char])\l  (r24 I:?[long, double] A[D('position' long)])\l \l0x0057: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0058|0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('timesUs' long[])]) \l0x005a: ARRAY_LENGTH  (r4 I:int) = (r0 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x005b|0x005b: IF  (r14 I:?[int, byte, short, char] A[D('index' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:22:0x0099 \l}"];
Node_10 [shape=record,label="{10\:\ 0x005d|0x005d: SWITCH  \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('entrySize' int)])\l k:[1, 2, 3, 4] t:[0x0065, 0x0081, 0x0086, 0x008b] \l}"];
Node_11 [shape=record,label="{11\:\ 0x0060|0x0060: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0062|0x0062: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (576(0x240, float:8.07E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0065|0x0065: INVOKE  (r19 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0069|0x0069: ARITH  (r4 I:int) = (r19 I:int A[D('segmentSize' int)]) * (r18 I:int A[D('scale' int)]) \l0x006b: CAST  (r4 I:long) = (long) (r4 I:int) \l0x006c: ARITH  (r24 I:long A[D('position' long)]) = (r24 I:long A[D('position' long)]) + (r4 I:long) \l0x006e: CAST  (r4 I:long) = (long) (r14 I:int A[D('index' int)]) \l0x006f: ARITH  (r4 I:long) = (r4 I:long) * (r10 I:long A[D('durationUs' long)]) \l0x0070: CAST  (r6 I:long) = (long) (r12 I:int A[D('entryCount' int)]) \l0x0071: ARITH  (r4 I:long) = (r4 I:long) \/ (r6 I:long) \l0x0072: APUT  \l  (r20 I:?[long, double][] A[D('timesUs' long[])])\l  (r14 I:?[int, short, byte, char] A[D('index' int)])\l  (r4 I:?[long, double])\l \l0x0074: CONST  (r4 I:?[long, double]) = (\-1 ?[long, double]) \l0x0076: CMP_L  (r4 I:int) = (r26 I:long A[D('inputLength' long)]), (r4 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0078|0x0078: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0090 \l}"];
Node_16 [shape=record,label="{16\:\ 0x007a|0x007a: MOVE  (r4 I:?[long, double]) = (r24 I:?[long, double] A[D('position' long)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x007c|0x007c: APUT  \l  (r16 I:?[long, double][] A[D('positions' long[])])\l  (r14 I:?[int, short, byte, char] A[D('index' int)])\l  (r4 I:?[long, double])\l \l0x007e: ARITH  (r14 I:int A[D('index' int)]) = (r14 I:int A[D('index' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0081|0x0081: INVOKE  (r19 I:int A[D('segmentSize' int)]) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0086|0x0086: INVOKE  (r19 I:int A[D('segmentSize' int)]) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x008b|0x008b: INVOKE  (r19 I:int A[D('segmentSize' int)]) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0090|0x0090: MOVE  (r0 I:?[long, double]) = (r26 I:?[long, double] A[D('inputLength' long)]) \l0x0092: MOVE  (r2 I:?[long, double]) = (r24 I:?[long, double] A[D('position' long)]) \l0x0094: INVOKE  (r4 I:long) = (r0 I:long), (r2 I:long) java.lang.Math.min(long, long):long type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|0x0099: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.extractor.mp3.VbriSeeker) =  com.google.android.exoplayer2.extractor.mp3.VbriSeeker \l0x009b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('timesUs' long[])]) \l0x009d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY] A[D('positions' long[])]) \l0x009f: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.mp3.VbriSeeker)\l  (r0 I:long[])\l  (r1 I:long[])\l  (r10 I:long A[D('durationUs' long)])\l com.google.android.exoplayer2.extractor.mp3.VbriSeeker.\<init\>(long[], long[], long):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.mp3.VbriSeeker com.google.android.exoplayer2.extractor.mp3.VbriSeeker.create((r22 I:com.google.android.exoplayer2.extractor.MpegAudioHeader A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[D('inputLength' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002a\-0x0062: r10 'durationUs' long\l  0x002e\-0x0062: r12 'entryCount' int\l  0x0036\-0x0062: r13 'entrySize' int\l  0x0058\-0x0062: r14 'index' int\l  0x004f\-0x0062: r16 'positions' long[]\l  0x0032\-0x0062: r18 'scale' int\l  0x0049\-0x0062: r20 'timesUs' long[]\l  0x0069\-0x0081: r19 'segmentSize' int\l  0x0085\-0x0086: r19 'segmentSize' int\l  0x008a\-0x008b: r19 'segmentSize' int\l  0x008f\-0x0099: r19 'segmentSize' int\l  0x0065\-0x00af: r10 'durationUs' long\l  0x0065\-0x00af: r12 'entryCount' int\l  0x0065\-0x00af: r13 'entrySize' int\l  0x0065\-0x00af: r14 'index' int\l  0x000b\-0x00af: r15 'numFrames' int\l  0x0065\-0x00af: r16 'positions' long[]\l  0x0015\-0x00af: r17 'sampleRate' int\l  0x0065\-0x00af: r18 'scale' int\l  0x0065\-0x00af: r20 'timesUs' long[]\l  ?\-0x00af: r22 'mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader\l  ?\-0x00af: r23 'frame' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00af: r24 'position' long\l  ?\-0x00af: r26 'inputLength' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_10 -> Node_18;
Node_10 -> Node_19;
Node_10 -> Node_20;
Node_11 -> Node_3;
Node_12 -> Node_7;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_8;
Node_18 -> Node_14;
Node_19 -> Node_14;
Node_20 -> Node_14;
Node_21 -> Node_17;
Node_22 -> Node_3;
}

