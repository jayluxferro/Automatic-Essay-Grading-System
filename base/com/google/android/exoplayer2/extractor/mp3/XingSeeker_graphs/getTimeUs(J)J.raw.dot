digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.XingSeeker.getTimeUs(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r15 I:boolean) = \l  (r23 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.isSeekable():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.firstFramePosition long \l0x000a: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x000c: CMP_L  (r15 I:int) = (r24 I:long A[D('position' long)]), (r18 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r15 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r18 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r18 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r18 I:?[long, double]) = \l  (4643211215818981376(0x4070000000000000, double:256.0) ?[long, double])\l \l0x0015: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.firstFramePosition long \l0x0019: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x001b: ARITH  (r20 I:long) = (r24 I:long A[D('position' long)]) \- (r20 I:long) \l0x001d: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x001f: CAST  (r0 I:double) = (double) (r0 I:long) \l0x0020: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0022: ARITH  (r18 I:double) = (r18 I:double) * (r20 I:double) \l0x0024: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0026: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.sizeBytes long \l0x0028: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x002a: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x002c: CAST  (r0 I:double) = (double) (r0 I:long) \l0x002d: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x002f: ARITH  (r8 I:double) = (r18 I:double) \/ (r20 I:double) \l0x0031: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0033: IGET  (r15 I:long[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.tableOfContents long[] \l0x0035: CAST  (r0 I:long) = (long) (r8 I:double A[D('offsetByte' double)]) \l0x0036: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x0038: CONST  (r20 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003a: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l0x003e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0042: INVOKE  (r15 I:int) = (r15 I:long[]), (r0 I:long), (r2 I:boolean), (r3 I:boolean) com.google.android.exoplayer2.util.Util.binarySearchFloor(long[], long, boolean, boolean):int type: STATIC \l0x0046: ARITH  (r14 I:int) = (r15 I:int) + (1 int) \l0x0048: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x004a: INVOKE  (r12 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l  (r14 I:int A[D('previousTocPosition' int)])\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.getTimeUsForTocPosition(int):long type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|0x004e: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousTocPosition' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0069 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|0x0050: CONST  (r10 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0052|0x0052: CONST  (r15 I:?[int, float, short, byte, char]) = (99 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0054|0x0054: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousTocPosition' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0072 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0056|0x0056: CONST  (r4 I:?[long, double]) = (256(0x100, double:1.265E\-321) ?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0058|0x0058: ARITH  (r15 I:int) = (r14 I:int A[D('previousTocPosition' int)]) + (1 int) \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x005c: INVOKE  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l  (r15 I:int)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.getTimeUsForTocPosition(int):long type: DIRECT \l0x0060: CMP_L  (r15 I:int) = \l  (r4 I:long A[D('nextByte' long)])\l  (r10 I:long A[D('previousByte' long)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0079 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|0x0066: ARITH  (r18 I:long) = (r12 I:long A[D('previousTime' long)]) + (r16 I:long A[D('timeOffset' long)]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0069|0x0069: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x006b: IGET  (r15 I:long[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.tableOfContents long[] \l0x006d: ARITH  (r18 I:int) = (r14 I:int A[D('previousTocPosition' int)]) + (\-1 int) \l0x006f: AGET  (r10 I:?[long, double]) = \l  (r15 I:?[long, double][])\l  (r18 I:?[int, short, byte, char])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|0x0072: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0074: IGET  (r15 I:long[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.tableOfContents long[] \l0x0076: AGET  (r4 I:?[long, double]) = \l  (r15 I:?[long, double][])\l  (r14 I:?[int, short, byte, char] A[D('previousTocPosition' int)])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0079|0x0079: ARITH  (r18 I:long) = (r6 I:long A[D('nextTime' long)]) \- (r12 I:long A[D('previousTime' long)]) \l0x007b: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l0x007d: CAST  (r0 I:double) = (double) (r0 I:long) \l0x007e: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x0080: CAST  (r0 I:double) = (double) (r10 I:long A[D('previousByte' long)]) \l0x0081: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x0083: ARITH  (r20 I:double) = (r8 I:double A[D('offsetByte' double)]) \- (r20 I:double) \l0x0085: ARITH  (r18 I:double) = (r18 I:double) * (r20 I:double) \l0x0087: ARITH  (r20 I:long) = (r4 I:long A[D('nextByte' long)]) \- (r10 I:long A[D('previousByte' long)]) \l0x0089: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double]) \l0x008b: CAST  (r0 I:double) = (double) (r0 I:long) \l0x008c: MOVE  (r20 I:?[long, double]) = (r0 I:?[long, double]) \l0x008e: ARITH  (r18 I:double) = (r18 I:double) \/ (r20 I:double) \l0x0090: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l0x0092: CAST  (r0 I:long) = (long) (r0 I:double) \l0x0093: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.extractor.mp3.XingSeeker.getTimeUs((r23 'this' I:com.google.android.exoplayer2.extractor.mp3.XingSeeker A[IMMUTABLE_TYPE, THIS]), (r24 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0058\-0x0069: r4 'nextByte' long\l  0x0060\-0x0069: r6 'nextTime' long\l  0x0052\-0x0069: r10 'previousByte' long\l  0x0066\-0x0069: r16 'timeOffset' long\l  0x0079\-0x0095: r4 'nextByte' long\l  0x0079\-0x0095: r6 'nextTime' long\l  0x0031\-0x0095: r8 'offsetByte' double\l  0x0072\-0x0095: r10 'previousByte' long\l  0x004e\-0x0095: r12 'previousTime' long\l  0x0048\-0x0095: r14 'previousTocPosition' int\l  ?\-0x0095: r24 'position' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_5;
Node_16 -> Node_9;
Node_17 -> Node_12;
Node_18 -> Node_15;
}

