digraph "CFG forcom.google.android.exoplayer2.extractor.mp3.XingSeeker.create(Lcom\/google\/android\/exoplayer2\/extractor\/MpegAudioHeader;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;JJ)Lcom\/google\/android\/exoplayer2\/extractor\/mp3\/XingSeeker;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x0002: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.samplesPerFrame int \l0x0004: MOVE  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x0008: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.sampleRate int \l0x000a: MOVE  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x000e: IGET  (r2 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.frameSize int \l0x0010: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0011: ARITH  (r14 I:long) = (r24 I:long A[D('position' long)]) + (r2 I:long) \l0x0013: INVOKE  (r16 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x0017: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r16 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l0x0019: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: INVOKE  (r17 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameCount' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: RETURN  \l  (r3 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameCount' int)])\l \l0x0026: CAST  (r2 I:long) = (long) (r0 I:int) \l0x0027: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('samplesPerFrame' int)])\l \l0x0029: CAST  (r4 I:long) = (long) (r0 I:int) \l0x002a: CONST  (r8 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x002d: ARITH  (r4 I:long) = (r4 I:long) * (r8 I:long) \l0x002e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleRate' int)])\l \l0x0030: CAST  (r6 I:long) = (long) (r0 I:int) \l0x0031: INVOKE  (r6 I:long) = (r2 I:long), (r4 I:long), (r6 I:long) com.google.android.exoplayer2.util.Util.scaleLargeTimestamp(long, long, long):long type: STATIC \l0x0035: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r16 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (6 ?[int, float, short, byte, char]) \l0x0037: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0043 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker) =  com.google.android.exoplayer2.extractor.mp3.XingSeeker \l0x003c: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double] A[D('firstFramePosition' long)]) \l0x003d: MOVE  (r8 I:?[long, double]) = (r26 I:?[long, double] A[D('inputLength' long)]) \l0x003f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l  (r4 I:long)\l  (r6 I:long A[D('durationUs' long)])\l  (r8 I:long)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.\<init\>(long, long, long):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: INVOKE  (r2 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x0047: CAST  (r11 I:long) = (long) (r2 I:int) \l0x0048: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0049: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x004b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x004e: CONST  (r2 I:?[int, float, short, byte, char]) = (99 ?[int, float, short, byte, char]) \l0x0050: NEW_ARRAY  (r10 I:long[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0052: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0054|0x0054: CONST  (r2 I:?[int, float, short, byte, char]) = (99 ?[int, float, short, byte, char]) \l0x0056: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:13:0x0064 \l}"];
Node_12 [shape=record,label="{12\:\ 0x005a|0x005a: INVOKE  (r2 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x005e: CAST  (r2 I:long) = (long) (r2 I:int) \l0x005f: APUT  \l  (r10 I:?[long, double][] A[D('tableOfContents' long[])])\l  (r18 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[long, double])\l \l0x0061: ARITH  (r18 I:int A[D('i' int)]) = (r18 I:int A[D('i' int)]) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0064|0x0064: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker) =  com.google.android.exoplayer2.extractor.mp3.XingSeeker \l0x0066: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x0068: IGET  (r13 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.frameSize int \l0x006a: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double] A[D('firstFramePosition' long)]) \l0x006b: MOVE  (r8 I:?[long, double]) = (r26 I:?[long, double] A[D('inputLength' long)]) \l0x006d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp3.XingSeeker)\l  (r4 I:long)\l  (r6 I:long A[D('durationUs' long)])\l  (r8 I:long)\l  (r10 I:long[] A[D('tableOfContents' long[])])\l  (r11 I:long A[D('sizeBytes' long)])\l  (r13 I:int)\l com.google.android.exoplayer2.extractor.mp3.XingSeeker.\<init\>(long, long, long, long[], long, int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.mp3.XingSeeker com.google.android.exoplayer2.extractor.mp3.XingSeeker.create((r22 I:com.google.android.exoplayer2.extractor.MpegAudioHeader A[D('mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('frame' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[D('inputLength' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0020\-0x0022: r17 'frameCount' int\l  0x0035\-0x0070: r6 'durationUs' long\l  0x0052\-0x0070: r10 'tableOfContents' long[]\l  0x0048\-0x0070: r11 'sizeBytes' long\l  0x0013\-0x0070: r14 'firstFramePosition' long\l  0x0017\-0x0070: r16 'flags' int\l  0x0024\-0x0070: r17 'frameCount' int\l  0x0054\-0x0070: r18 'i' int\l  0x000c\-0x0070: r19 'sampleRate' int\l  0x0006\-0x0070: r20 'samplesPerFrame' int\l  ?\-0x0070: r22 'mpegAudioHeader' com.google.android.exoplayer2.extractor.MpegAudioHeader\l  ?\-0x0070: r23 'frame' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0070: r24 'position' long\l  ?\-0x0070: r26 'inputLength' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_5;
}

