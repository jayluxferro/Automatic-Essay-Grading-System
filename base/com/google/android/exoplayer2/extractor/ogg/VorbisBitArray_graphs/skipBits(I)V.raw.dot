digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.VorbisBitArray.skipBits(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.getPosition():int type: VIRTUAL \l0x0004: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int A[D('numberOfBits' int)]) \l0x0005: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.limit int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x000d: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.byteOffset int \l0x000f: ARITH  (r1 I:int) = (r3 I:int A[D('numberOfBits' int)]) \/ (8 int) \l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0012: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.byteOffset int \l0x0014: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.bitOffset int \l0x0016: ARITH  (r1 I:int) = (r3 I:int A[D('numberOfBits' int)]) % (8 int) \l0x0018: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0019: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.bitOffset int \l0x001b: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.bitOffset int \l0x001d: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.byteOffset int \l0x0022: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0024: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.byteOffset int \l0x0026: IGET  (r0 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.bitOffset int \l0x0028: ARITH  (r0 I:int) = (r0 I:int) + (\-8 int) \l0x002a: IPUT  \l  (r0 I:int)\l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray)\l com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.bitOffset int \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ogg.VorbisBitArray.skipBits((r2 'this' I:com.google.android.exoplayer2.extractor.ogg.VorbisBitArray A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('numberOfBits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002e: r3 'numberOfBits' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_7 -> Node_3;
}

