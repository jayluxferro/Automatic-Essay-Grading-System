digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.FlacReader.getFlacFrameBlockSize(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0003: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0005: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0007: ARITH  (r0 I:int) = (r2 I:int) \>\> (4 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('blockSizeCode' int)])\l k:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] t:[0x000e, 0x0011, 0x0011, 0x0011, 0x0011, 0x0017, 0x0017, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (576(0x240, float:8.07E\-43) ?[int, float, short, byte, char])\l \l0x0013: ARITH  (r3 I:int) = (r0 I:int A[D('blockSizeCode' int)]) + (\-2 int) \l0x0015: ARITH  (r2 I:int) = (r2 I:int) \<\< (r3 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0018: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x001b: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUtf8EncodedLong():long type: VIRTUAL \l0x001e: CONST  (r2 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('blockSizeCode' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: INVOKE  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0029: ARITH  (r2 I:int) = (r1 I:int A[D('value' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r1 I:int A[D('value' int)]) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l0x0033: ARITH  (r3 I:int) = (r0 I:int A[D('blockSizeCode' int)]) + (\-8 int) \l0x0035: ARITH  (r2 I:int) = (r2 I:int) \<\< (r3 I:int) \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.ogg.FlacReader.getFlacFrameBlockSize((r4 'this' I:com.google.android.exoplayer2.extractor.ogg.FlacReader A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('packet' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0025\-0x002c: r1 'value' int\l  0x0009\-0x0059: r0 'blockSizeCode' int\l  ?\-0x0059: r5 'packet' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_4 -> Node_3;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_10 -> Node_9;
Node_11 -> Node_3;
}

