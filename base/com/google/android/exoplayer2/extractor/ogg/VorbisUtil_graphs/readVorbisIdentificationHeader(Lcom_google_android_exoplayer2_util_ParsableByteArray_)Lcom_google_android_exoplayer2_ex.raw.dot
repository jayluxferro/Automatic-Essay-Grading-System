digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.VorbisUtil.readVorbisIdentificationHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Lcom\/google\/android\/exoplayer2\/extractor\/ogg\/VorbisUtil$VorbisIdHeader;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0005: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:boolean)\l com.google.android.exoplayer2.extractor.ogg.VorbisUtil.verifyVorbisHeaderCapturePattern(int, com.google.android.exoplayer2.util.ParsableByteArray, boolean):boolean type: STATIC \l0x000a: INVOKE  (r3 I:long) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedInt():long type: VIRTUAL \l0x000e: INVOKE  (r5 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0012: INVOKE  (r6 I:long) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedInt():long type: VIRTUAL \l0x0016: INVOKE  (r8 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianInt():int type: VIRTUAL \l0x001a: INVOKE  (r9 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianInt():int type: VIRTUAL \l0x001e: INVOKE  (r10 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianInt():int type: VIRTUAL \l0x0022: INVOKE  (r15 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0026: CONST  (r16 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0028: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r15 I:?[int, boolean, short, byte, char] A[D('blockSize' int)]) & (15 ?[int, float, short, byte, char]) \l0x002a: CAST  (r0 I:double) = (double) (r2 I:int) \l0x002b: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x002d: INVOKE  (r16 I:double) = (r16 I:double), (r18 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0031: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x0033: CAST  (r11 I:int) = (int) (r0 I:double) \l0x0034: CONST  (r16 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0036: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r15 I:?[int, boolean, short, byte, char] A[D('blockSize' int)]) & (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x0038: ARITH  (r2 I:int) = (r2 I:int) \>\> (4 int) \l0x003a: CAST  (r0 I:double) = (double) (r2 I:int) \l0x003b: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x003d: INVOKE  (r16 I:double) = (r16 I:double), (r18 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0041: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x0043: CAST  (r12 I:int) = (int) (r0 I:double) \l0x0044: INVOKE  (r2 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0048: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x004a|0x004a: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0061 \l}"];
Node_2 [shape=record,label="{2\:\ 0x004c|0x004c: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x004d|0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x004f: IGET  (r2 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0051: INVOKE  (r16 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x0055: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: INVOKE  (r14 I:byte[]) = (r2 I:byte[]), (r0 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x005b: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisUtil$VorbisIdHeader) =  com.google.android.exoplayer2.extractor.ogg.VorbisUtil$VorbisIdHeader \l0x005d: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisUtil$VorbisIdHeader)\l  (r3 I:long A[D('version' long)])\l  (r5 I:int A[D('channels' int)])\l  (r6 I:long A[D('sampleRate' long)])\l  (r8 I:int A[D('bitrateMax' int)])\l  (r9 I:int A[D('bitrateNominal' int)])\l  (r10 I:int A[D('bitrateMin' int)])\l  (r11 I:int A[D('blockSize0' int)])\l  (r12 I:int A[D('blockSize1' int)])\l  (r13 I:boolean A[D('framingFlag' boolean)])\l  (r14 I:byte[] A[D('data' byte[])])\l com.google.android.exoplayer2.extractor.ogg.VorbisUtil.VorbisIdHeader.\<init\>(long, int, long, int, int, int, int, int, boolean, byte[]):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0060|0x0060: RETURN  \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.VorbisUtil$VorbisIdHeader)\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0061|0x0061: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('framingFlag' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.ogg.VorbisUtil$VorbisIdHeader com.google.android.exoplayer2.extractor.ogg.VorbisUtil.readVorbisIdentificationHeader((r20 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('headerData' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x004d\-0x0061: r13 'framingFlag' boolean\l  0x005b\-0x0061: r14 'data' byte[]\l  0x000e\-0x0062: r3 'version' long\l  0x0012\-0x0062: r5 'channels' int\l  0x0016\-0x0062: r6 'sampleRate' long\l  0x001a\-0x0062: r8 'bitrateMax' int\l  0x001e\-0x0062: r9 'bitrateNominal' int\l  0x0022\-0x0062: r10 'bitrateMin' int\l  0x0034\-0x0062: r11 'blockSize0' int\l  0x0044\-0x0062: r12 'blockSize1' int\l  0x0026\-0x0062: r15 'blockSize' int\l  ?\-0x0062: r20 'headerData' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

