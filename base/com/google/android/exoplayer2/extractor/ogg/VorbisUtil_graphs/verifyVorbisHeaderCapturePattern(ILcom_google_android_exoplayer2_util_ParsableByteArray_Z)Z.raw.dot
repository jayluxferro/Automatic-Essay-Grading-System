digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.VorbisUtil.verifyVorbisHeaderCapturePattern(ILcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('quiet' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x000d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"too short header: \" \l0x0014: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0018: INVOKE  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0024: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('headerType' int)])  \-\> B:11:0x004d \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('quiet' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0032: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0034: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0037: CONST_STR  (r2 I:java.lang.String) =  \"expected header type \" \l0x0039: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.String) = (r3 I:int A[D('headerType' int)]) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0049: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0051: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (118(0x76, float:1.65E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0059: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (111(0x6f, float:1.56E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|0x005b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_15 [shape=record,label="{15\:\ 0x005d|0x005d: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0061: CONST  (r2 I:?[int, float, short, byte, char]) = (114(0x72, float:1.6E\-43) ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|0x0063: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_17 [shape=record,label="{17\:\ 0x0065|0x0065: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0069: CONST  (r2 I:?[int, float, short, byte, char]) = (98 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x006b|0x006b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_19 [shape=record,label="{19\:\ 0x006d|0x006d: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0071: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (105(0x69, float:1.47E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0073|0x0073: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0075|0x0075: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0079: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (115(0x73, float:1.61E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x007b|0x007b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0087 \l}"];
Node_23 [shape=record,label="{23\:\ 0x007d|0x007d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('quiet' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_24 [shape=record,label="{24\:\ 0x007f|0x007f: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0081: CONST_STR  (r1 I:java.lang.String) =  \"expected characters 'vorbis'\" \l0x0083: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0086|0x0086: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0087|0x0087: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static boolean com.google.android.exoplayer2.extractor.ogg.VorbisUtil.verifyVorbisHeaderCapturePattern((r3 I:int A[D('headerType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('header' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('quiet' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0088: r3 'headerType' int\l  ?\-0x0088: r4 'header' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0088: r5 'quiet' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_23;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_3;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_25;
Node_26 -> Node_3;
}

