digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (103(0x67, float:1.44E\-43) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r4 I:?[long, double]) = (3 ?[long, double]) \l0x0005: ARITH  (r4 I:long) = (r4 I:long) + (r12 I:long A[D('until' long)]) \l0x0006: IGET  (r6 I:long) = \l  (r10 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.endPosition long \l0x0008: INVOKE  (r12 I:long A[D('until' long)]) = (r4 I:long), (r6 I:long) java.lang.Math.min(long, long):long type: STATIC \l0x000c: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2048(0x800, float:2.87E\-42) ?[int, float, short, byte, char])\l \l0x000e: NEW_ARRAY  (r0 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0010: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[] A[D('buffer' byte[])]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0015: CAST  (r6 I:long) = (long) (r2 I:int A[D('peekLength' int)]) \l0x0016: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0017: CMP_L  (r4 I:int) = (r4 I:long), (r12 I:long A[D('until' long)]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x001f: ARITH  (r4 I:long) = (r12 I:long A[D('until' long)]) \- (r4 I:long) \l0x0021: CAST  (r2 I:int A[D('peekLength' int)]) = (int) (r4 I:long) \l0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r2 I:?[int, byte, short, char] A[D('peekLength' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: RETURN  (r3 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:byte[] A[D('buffer' byte[])])\l  (r3 I:int)\l  (r2 I:int A[D('peekLength' int)])\l  (r3 I:boolean)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int, boolean):boolean type: INTERFACE \l0x0029: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: ARITH  (r4 I:int) = (r2 I:int A[D('peekLength' int)]) + (\-3 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:19:0x0050 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0030: CONST  (r5 I:?[int, float, short, byte, char]) = (79 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: ARITH  (r4 I:int) = (r1 I:int A[D('i' int)]) + (1 int) \l0x0036: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: ARITH  (r4 I:int) = (r1 I:int A[D('i' int)]) + (2 int) \l0x003c: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: ARITH  (r4 I:int) = (r1 I:int A[D('i' int)]) + (3 int) \l0x0042: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('buffer' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0044: CONST  (r5 I:?[int, float, short, byte, char]) = (83 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:int A[D('i' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x004b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: ARITH  (r4 I:int) = (r2 I:int A[D('peekLength' int)]) + (\-3 int) \l0x0052: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{boolean com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage((r10 'this' I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0010\-0x0055: r0 'buffer' byte[]\l  0x002a\-0x0055: r1 'i' int\l  0x0011\-0x0055: r2 'peekLength' int\l  ?\-0x0055: r11 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0055: r12 'until' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_5;
Node_18 -> Node_7;
Node_19 -> Node_1;
}

