digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.startSeek(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0003: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.state int \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.state int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0010: CMP_L  (r0 I:int) = (r6 I:long A[D('timeUs' long)]), (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: MOVE  (r0 I:?[long, double]) = (r2 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IPUT  \l  (r0 I:long)\l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.targetGranule long \l0x0017: IPUT  \l  (r4 I:int)\l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.state int \l0x0019: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.resetSeeking():void type: VIRTUAL \l0x001c: IGET  (r0 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.targetGranule long \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: RETURN  (r0 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.StreamReader) = \l  (r5 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.streamReader com.google.android.exoplayer2.extractor.ogg.StreamReader \l0x0023: INVOKE  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.StreamReader)\l  (r6 I:long A[D('timeUs' long)])\l com.google.android.exoplayer2.extractor.ogg.StreamReader.convertTimeToGranule(long):long type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.startSeek((r5 'this' I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0027: r6 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_5;
Node_11 -> Node_8;
}

