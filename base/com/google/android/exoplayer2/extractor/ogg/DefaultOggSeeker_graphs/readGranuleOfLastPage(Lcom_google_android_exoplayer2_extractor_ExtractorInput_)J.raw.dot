digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.readGranuleOfLastPage(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage(com.google.android.exoplayer2.extractor.ExtractorInput):void type: VIRTUAL \l0x0003: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x0005: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.reset():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x000a: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.type int \l0x000c: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r0 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0015: IGET  (r2 I:long) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.endPosition long \l0x0017: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x001d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:boolean)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.populate(com.google.android.exoplayer2.extractor.ExtractorInput, boolean):boolean type: VIRTUAL \l0x0021: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x0023: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.headerSize int \l0x0025: IGET  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x0027: IGET  (r1 I:int) = \l  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.bodySize int \l0x0029: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x002a: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IGET  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) = \l  (r4 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.pageHeader com.google.android.exoplayer2.extractor.ogg.OggPageHeader \l0x0030: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.granulePosition long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{long com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.readGranuleOfLastPage((r4 'this' I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0032: r5 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

