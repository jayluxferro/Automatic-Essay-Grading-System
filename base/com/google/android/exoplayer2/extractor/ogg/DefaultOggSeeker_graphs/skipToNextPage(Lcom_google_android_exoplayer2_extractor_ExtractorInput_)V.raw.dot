digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.endPosition long \l0x0002: INVOKE  (r0 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker)\l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:long)\l com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage(com.google.android.exoplayer2.extractor.ExtractorInput, long):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.io.EOFException) =  java.io.EOFException \l0x000a: INVOKE  (r0 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{void com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.skipToNextPage((r2 'this' I:com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000e: r3 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

