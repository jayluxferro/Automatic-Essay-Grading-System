digraph "CFG forcom.google.android.exoplayer2.extractor.ogg.OggExtractor.sniff(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader) =  com.google.android.exoplayer2.extractor.ogg.OggPageHeader A[Catch:\{ ParserException \-\> 0x004e \}, TRY_ENTER]\l0x0004: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.\<init\>():void type: DIRECT A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0007: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0008: INVOKE  (r6 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader A[D('header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader)])\l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r6 I:boolean)\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.populate(com.google.android.exoplayer2.extractor.ExtractorInput, boolean):boolean type: VIRTUAL A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r6 I:int) = \l  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader A[D('header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader)])\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.type int A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0010: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0012: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r4 I:boolean) A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r6 I:int) = \l  (r1 I:com.google.android.exoplayer2.extractor.ogg.OggPageHeader A[D('header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader)])\l com.google.android.exoplayer2.extractor.ogg.OggPageHeader.bodySize int A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0018: CONST  (r7 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) A[Catch:\{ ParserException \-\> 0x004e \}]\l0x001a: INVOKE  (r2 I:int) = (r6 I:int), (r7 I:int) java.lang.Math.min(int, int):int type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l0x001e: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0020: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int A[D('length' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0023: IGET  (r6 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0025: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0026: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r6 I:byte[])\l  (r7 I:int)\l  (r2 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0029: INVOKE  (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.resetPosition(com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.util.ParsableByteArray type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l0x002d: INVOKE  (r6 I:boolean) = (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.ogg.FlacReader.verifyBitstreamType(com.google.android.exoplayer2.util.ParsableByteArray):boolean type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003c A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.ogg.FlacReader) =  com.google.android.exoplayer2.extractor.ogg.FlacReader A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0035: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.FlacReader)\l com.google.android.exoplayer2.extractor.ogg.FlacReader.\<init\>():void type: DIRECT A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0038: IPUT  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.StreamReader)\l  (r8 I:com.google.android.exoplayer2.extractor.ogg.OggExtractor)\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.streamReader com.google.android.exoplayer2.extractor.ogg.StreamReader A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ ParserException \-\> 0x004e \}]\l0x003b: GOTO  \-\> 0x0015 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: INVOKE  (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.resetPosition(com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.util.ParsableByteArray type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0040: INVOKE  (r6 I:boolean) = (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.ogg.VorbisReader.verifyBitstreamType(com.google.android.exoplayer2.util.ParsableByteArray):boolean type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0050 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.ogg.VorbisReader) =  com.google.android.exoplayer2.extractor.ogg.VorbisReader A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0048: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.VorbisReader)\l com.google.android.exoplayer2.extractor.ogg.VorbisReader.\<init\>():void type: DIRECT A[Catch:\{ ParserException \-\> 0x004e \}]\l0x004b: IPUT  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.StreamReader)\l  (r8 I:com.google.android.exoplayer2.extractor.ogg.OggExtractor)\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.streamReader com.google.android.exoplayer2.extractor.ogg.StreamReader A[Catch:\{ ParserException \-\> 0x004e \}]\l0x004d: GOTO  \-\> 0x003a A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|ExcHandler: ParserException null\lSplitter:B:1:0x0002\l|0x004e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: GOTO  \-\> 0x0015 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: INVOKE  (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.resetPosition(com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.util.ParsableByteArray type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l0x0054: INVOKE  (r6 I:boolean) = (r6 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.extractor.ogg.OpusReader.verifyBitstreamType(com.google.android.exoplayer2.util.ParsableByteArray):boolean type: STATIC A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 A[Catch:\{ ParserException \-\> 0x004e \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x005a|0x005a: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.extractor.ogg.OpusReader) =  com.google.android.exoplayer2.extractor.ogg.OpusReader A[Catch:\{ ParserException \-\> 0x004e \}]\l0x005c: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.OpusReader)\l com.google.android.exoplayer2.extractor.ogg.OpusReader.\<init\>():void type: DIRECT A[Catch:\{ ParserException \-\> 0x004e \}]\l0x005f: IPUT  \l  (r6 I:com.google.android.exoplayer2.extractor.ogg.StreamReader)\l  (r8 I:com.google.android.exoplayer2.extractor.ogg.OggExtractor)\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.streamReader com.google.android.exoplayer2.extractor.ogg.StreamReader A[Catch:\{ ParserException \-\> 0x004e \}, TRY_LEAVE]\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.ogg.OggExtractor.sniff((r8 'this' I:com.google.android.exoplayer2.extractor.ogg.OggExtractor A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x0015: r1 'header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader\l  0x0016\-0x004e: r1 'header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader\l  0x001e\-0x004e: r2 'length' int\l  0x0023\-0x004e: r3 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\l  0x004f\-0x0050: r0 'e' com.google.android.exoplayer2.ParserException\l  0x0050\-0x0061: r1 'header' com.google.android.exoplayer2.extractor.ogg.OggPageHeader\l  0x0050\-0x0061: r2 'length' int\l  0x0050\-0x0061: r3 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0061: r9 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_17 -> Node_6;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_10;
}

