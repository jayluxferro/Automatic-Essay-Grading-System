digraph "CFG forcom.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfData(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('type' int)])\l k:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] t:[0x0005, 0x000a, 0x000f, 0x0014, 0x0003, 0x0003, 0x0003, 0x0003, 0x0019, 0x0003, 0x001e, 0x0023] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r0 I:java.lang.Object) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.Double) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfDouble(com.google.android.exoplayer2.util.ParsableByteArray):java.lang.Double type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.Boolean) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfBoolean(com.google.android.exoplayer2.util.ParsableByteArray):java.lang.Boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r0 I:java.lang.String) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfString(com.google.android.exoplayer2.util.ParsableByteArray):java.lang.String type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r0 I:java.util.HashMap) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfObject(com.google.android.exoplayer2.util.ParsableByteArray):java.util.HashMap type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r0 I:java.util.HashMap) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfEcmaArray(com.google.android.exoplayer2.util.ParsableByteArray):java.util.HashMap type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r0 I:java.util.ArrayList) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfStrictArray(com.google.android.exoplayer2.util.ParsableByteArray):java.util.ArrayList type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r0 I:java.util.Date) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfDate(com.google.android.exoplayer2.util.ParsableByteArray):java.util.Date type: STATIC \l}"];
MethodNode[shape=record,label="{private static java.lang.Object com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfData((r1 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0043: r1 'data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0043: r2 'type' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_0 -> Node_4;
Node_0 -> Node_5;
Node_0 -> Node_6;
Node_0 -> Node_7;
Node_0 -> Node_8;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_3 -> Node_2;
Node_4 -> Node_2;
Node_5 -> Node_2;
Node_6 -> Node_2;
Node_7 -> Node_2;
Node_8 -> Node_2;
Node_9 -> Node_2;
}

