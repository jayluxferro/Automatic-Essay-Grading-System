digraph "CFG forcom.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.parsePayload(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;J)V" {
subgraph cluster_Region_1193991888 {
label = "R(1:(1:3)(1:(2:8|(1:(2:10|(1:(1:12)))))(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_747691969 {
label = "IF [B:1:0x0005] THEN: R(1:3) ELSE: R(1:(2:8|(1:(2:10|(1:(1:12)))))(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (readAmfType(r9) != 2) goto L_0x0007\l}"];
subgraph cluster_Region_311737545 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|throw new com.google.android.exoplayer2.ParserException()\l}"];
}
subgraph cluster_Region_1702320121 {
label = "R(1:(2:8|(1:(2:10|(1:(1:12)))))(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1950009817 {
label = "IF [B:5:0x0017, B:7:0x0020] THEN: R(2:8|(1:(2:10|(1:(1:12))))) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|if (NAME_METADATA.equals(readAmfString(r9)) == true) goto L_0x001a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|ADDED_TO_REGION\l|if (readAmfType(r9) == 8) goto L_0x0022\l}"];
subgraph cluster_Region_806931827 {
label = "R(2:8|(1:(2:10|(1:(1:12)))))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0022|java.util.HashMap java.util.Map\<java.lang.String, java.lang.Object\> r2 = readAmfEcmaArray(r9)\l}"];
subgraph cluster_Region_1593736776 {
label = "R(1:(2:10|(1:(1:12))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_415069586 {
label = "IF [B:9:0x002c] THEN: R(2:10|(1:(1:12))) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002c|if (r2.containsKey(KEY_DURATION) == true) goto L_0x002e\l}"];
subgraph cluster_Region_2103793348 {
label = "R(2:10|(1:(1:12)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002e|double double r0 = ((java.lang.Double) r2.get(KEY_DURATION)).doubleValue()\l}"];
subgraph cluster_Region_1765532586 {
label = "R(1:(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_106635345 {
label = "IF [B:11:0x003e] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x003e|if (r0 \> 0.0d) goto L_0x0040\l}"];
subgraph cluster_Region_1893603004 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0040|r8.durationUs = (long) (1000000.0d * r0)\l}"];
}
}
}
}
}
}
}
subgraph cluster_Region_917289451 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001a}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.parsePayload((r8v0 'this' com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r9v0 'data' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'timeUs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_13[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_14[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_15[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_16[style=dashed];
Node_12 -> Node_17;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

