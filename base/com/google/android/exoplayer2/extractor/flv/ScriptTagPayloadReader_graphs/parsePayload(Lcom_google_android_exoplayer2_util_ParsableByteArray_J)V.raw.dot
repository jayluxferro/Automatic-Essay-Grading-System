digraph "CFG forcom.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.parsePayload(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfType(com.google.android.exoplayer2.util.ParsableByteArray):int type: STATIC \l0x0004: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nameType' int)]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: NEW_INSTANCE  (r6 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0009: INVOKE  (r6 I:com.google.android.exoplayer2.ParserException) com.google.android.exoplayer2.ParserException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r3 I:java.lang.String) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfString(com.google.android.exoplayer2.util.ParsableByteArray):java.lang.String type: STATIC \l0x0011: CONST_STR  (r6 I:java.lang.String) =  \"onMetaData\" \l0x0013: INVOKE  (r6 I:boolean) = \l  (r6 I:java.lang.String)\l  (r3 I:java.lang.Object A[D('name' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r5 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfType(com.google.android.exoplayer2.util.ParsableByteArray):int type: STATIC \l0x001e: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r2 I:java.util.HashMap) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.readAmfEcmaArray(com.google.android.exoplayer2.util.ParsableByteArray):java.util.HashMap type: STATIC \l0x0026: CONST_STR  (r6 I:java.lang.String) =  \"duration\" \l0x0028: INVOKE  (r6 I:boolean) = \l  (r2 I:java.util.Map A[D('metadata' java.util.Map\<java.lang.String, java.lang.Object\>)])\l  (r6 I:java.lang.Object)\l java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: CONST_STR  (r6 I:java.lang.String) =  \"duration\" \l0x0030: INVOKE  (r6 I:java.lang.Object) = \l  (r2 I:java.util.Map A[D('metadata' java.util.Map\<java.lang.String, java.lang.Object\>)])\l  (r6 I:java.lang.Object)\l java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0034: CHECK_CAST  (r6 I:java.lang.Double) = (java.lang.Double) (r6 I:?[OBJECT, ARRAY]) \l0x0036: INVOKE  (r0 I:double) = (r6 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x003a: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x003c: CMP_L  (r6 I:int) = (r0 I:double A[D('durationSeconds' double)]), (r6 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: CONST  (r6 I:?[long, double]) = \l  (4696837146684686336(0x412e848000000000, double:1000000.0) ?[long, double])\l \l0x0045: ARITH  (r6 I:double) = (r6 I:double) * (r0 I:double A[D('durationSeconds' double)]) \l0x0046: CAST  (r6 I:long) = (long) (r6 I:double) \l0x0047: IPUT  \l  (r6 I:long)\l  (r8 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.durationUs long \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.parsePayload((r8 'this' I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003a\-0x0049: r0 'durationSeconds' double\l  0x0026\-0x0049: r2 'metadata' java.util.Map\<java.lang.String, java.lang.Object\>\l  0x0011\-0x0049: r3 'name' java.lang.String\l  0x0004\-0x0049: r4 'nameType' int\l  0x001e\-0x0049: r5 'type' int\l  ?\-0x0049: r9 'data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0049: r10 'timeUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_6;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_6;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_6;
}

