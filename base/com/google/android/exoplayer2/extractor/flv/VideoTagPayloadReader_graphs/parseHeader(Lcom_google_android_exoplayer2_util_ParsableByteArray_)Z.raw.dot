digraph "CFG forcom.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader.parseHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0004: ARITH  (r3 I:int) = (r1 I:int A[D('header' int)]) \>\> (4 int) \l0x0006: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0008: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('header' int)]) & (15 ?[int, float, short, byte, char]) \l0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('videoCodec' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException) =  com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException \l0x000f: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0011: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0014: CONST_STR  (r5 I:java.lang.String) =  \"Video format not supported: \" \l0x0016: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: INVOKE  (r4 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder)\l  (r2 I:int A[D('videoCodec' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x001e: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0022: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException)\l  (r4 I:java.lang.String)\l com.google.android.exoplayer2.extractor.flv.TagPayloadReader.UnsupportedFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: IPUT  \l  (r0 I:int A[D('frameType' int)])\l  (r6 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader.frameType int \l0x0028: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameType' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: RETURN  (r3 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader.parseHeader((r6 'this' I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0008\-0x002e: r0 'frameType' int\l  0x0004\-0x002e: r1 'header' int\l  0x000a\-0x002e: r2 'videoCodec' int\l  ?\-0x002e: r7 'data' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_7;
}

