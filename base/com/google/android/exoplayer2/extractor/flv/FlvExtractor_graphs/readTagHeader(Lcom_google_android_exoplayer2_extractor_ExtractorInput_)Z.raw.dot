digraph "CFG forcom.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagHeader(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0004: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0008: INVOKE  (r2 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r2 I:byte[])\l  (r0 I:int)\l  (r3 I:int)\l  (r1 I:boolean)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int, boolean):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0011: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0014: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0016: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x001a: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagType int \l0x001c: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x001e: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL \l0x0022: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagDataSize int \l0x0024: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0026: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL \l0x002a: CAST  (r2 I:long) = (long) (r0 I:int) \l0x002b: IPUT  \l  (r2 I:long)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x002d: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x002f: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0033: ARITH  (r0 I:int) = (r0 I:int) \<\< (24 int) \l0x0035: CAST  (r2 I:long) = (long) (r0 I:int) \l0x0036: IGET  (r4 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x0038: ARITH  (r2 I:long) = (r2 I:long) \| (r4 I:long) \l0x0039: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x003b: ARITH  (r2 I:long) = (r2 I:long) * (r4 I:long) \l0x003c: IPUT  \l  (r2 I:long)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x003e: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagHeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0040: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0041: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x0044: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0045: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.parserState int \l0x0047: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagHeader((r6 'this' I:com.google.android.exoplayer2.extractor.flv.FlvExtractor A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0048: r7 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_2;
}

