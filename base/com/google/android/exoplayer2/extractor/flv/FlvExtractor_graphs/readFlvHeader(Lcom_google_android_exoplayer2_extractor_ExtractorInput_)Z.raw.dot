digraph "CFG forcom.google.android.exoplayer2.extractor.flv.FlvExtractor.readFlvHeader(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0002: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0003: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.headerBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0007: IGET  (r5 I:byte[]) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0009: INVOKE  (r5 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r5 I:byte[])\l  (r3 I:int)\l  (r8 I:int)\l  (r4 I:boolean)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int, boolean):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r3 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.headerBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0012: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0015: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.headerBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0017: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0018: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x001b: IGET  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.headerBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x001d: INVOKE  (r0 I:int) = (r5 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0021: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0079 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x007b \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasAudio' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IGET  (r3 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.audioReader com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0040 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader) =  com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader \l0x0033: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0035: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0037: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r6 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorOutput.track(int, int):com.google.android.exoplayer2.extractor.TrackOutput type: INTERFACE \l0x003b: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.\<init\>(com.google.android.exoplayer2.extractor.TrackOutput):void type: DIRECT \l0x003e: IPUT  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.audioReader com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasVideo' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0053 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: IGET  (r3 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.videoReader com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0053 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader) =  com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader \l0x0048: IGET  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x004a: INVOKE  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r5 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r8 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.extractor.ExtractorOutput.track(int, int):com.google.android.exoplayer2.extractor.TrackOutput type: INTERFACE \l0x004e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader)\l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader.\<init\>(com.google.android.exoplayer2.extractor.TrackOutput):void type: DIRECT \l0x0051: IPUT  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader)\l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.videoReader com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader \l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|0x0053: IGET  (r3 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.metadataReader com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader \l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|0x0055: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0057|0x0057: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader) =  com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader \l0x0059: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader)\l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.\<init\>(com.google.android.exoplayer2.extractor.TrackOutput):void type: DIRECT \l0x005d: IPUT  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader)\l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.metadataReader com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: IGET  (r3 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0061: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l com.google.android.exoplayer2.extractor.ExtractorOutput.endTracks():void type: INTERFACE \l0x0064: IGET  (r3 I:com.google.android.exoplayer2.extractor.ExtractorOutput) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.extractorOutput com.google.android.exoplayer2.extractor.ExtractorOutput \l0x0066: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorOutput)\l  (r9 I:com.google.android.exoplayer2.extractor.SeekMap)\l com.google.android.exoplayer2.extractor.ExtractorOutput.seekMap(com.google.android.exoplayer2.extractor.SeekMap):void type: INTERFACE \l0x0069: IGET  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.headerBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x006b: INVOKE  (r3 I:int) = (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x006f: ARITH  (r3 I:int) = (r3 I:int) + (\-9 int) \l0x0071: ARITH  (r3 I:int) = (r3 I:int) + (4 int) \l0x0073: IPUT  \l  (r3 I:int)\l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.bytesToNextTagHeader int \l0x0075: IPUT  \l  (r7 I:int)\l  (r9 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.parserState int \l0x0077: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0079|0x0079: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasAudio' boolean)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x007b|0x007b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.flv.FlvExtractor.readFlvHeader((r9 'this' I:com.google.android.exoplayer2.extractor.flv.FlvExtractor A[IMMUTABLE_TYPE, THIS]), (r10 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0026\-0x0079: r1 'hasAudio' boolean\l  0x002b\-0x0079: r2 'hasVideo' boolean\l  0x0021\-0x007c: r0 'flags' int\l  0x007b\-0x007c: r1 'hasAudio' boolean\l  ?\-0x007c: r10 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_2;
Node_21 -> Node_6;
Node_22 -> Node_9;
}

