digraph "CFG forcom.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagType int \l0x0003: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.audioReader com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.audioReader com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader \l0x000d: INVOKE  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.prepareTagData(com.google.android.exoplayer2.extractor.ExtractorInput):com.google.android.exoplayer2.util.ParsableByteArray type: DIRECT \l0x0011: IGET  (r4 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x0013: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.consume(com.google.android.exoplayer2.util.ParsableByteArray, long):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0017: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.bytesToNextTagHeader int \l0x0019: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001a: IPUT  \l  (r1 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.parserState int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN  (r0 I:boolean A[D('wasConsumed' boolean)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagType int \l0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.videoReader com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.videoReader com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader \l0x0029: INVOKE  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.prepareTagData(com.google.android.exoplayer2.extractor.ExtractorInput):com.google.android.exoplayer2.util.ParsableByteArray type: DIRECT \l0x002d: IGET  (r4 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x002f: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader)\l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.flv.VideoTagPayloadReader.consume(com.google.android.exoplayer2.util.ParsableByteArray, long):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagType int \l0x0035: CONST  (r2 I:?[int, float, short, byte, char]) = (18 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0049 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.metadataReader com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: IGET  (r1 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.metadataReader com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader \l0x003f: INVOKE  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.prepareTagData(com.google.android.exoplayer2.extractor.ExtractorInput):com.google.android.exoplayer2.util.ParsableByteArray type: DIRECT \l0x0043: IGET  (r4 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagTimestampUs long \l0x0045: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader)\l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.flv.ScriptTagPayloadReader.consume(com.google.android.exoplayer2.util.ParsableByteArray, long):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.tagDataSize int \l0x004b: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x004e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('wasConsumed' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagData((r6 'this' I:com.google.android.exoplayer2.extractor.flv.FlvExtractor A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x004f: r0 'wasConsumed' boolean\l  ?\-0x004f: r7 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_5;
Node_17 -> Node_5;
}

