digraph "CFG forcom.google.android.exoplayer2.extractor.flv.FlvExtractor.read(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.parserState int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x0007, 0x000e, 0x0012, 0x0019] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.readFlvHeader(com.google.android.exoplayer2.extractor.ExtractorInput):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: RETURN  (r0 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.skipToTagHeader(com.google.android.exoplayer2.extractor.ExtractorInput):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagHeader(com.google.android.exoplayer2.extractor.ExtractorInput):boolean type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l  (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagData(com.google.android.exoplayer2.extractor.ExtractorInput):boolean type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.flv.FlvExtractor.read((r2 'this' I:com.google.android.exoplayer2.extractor.flv.FlvExtractor A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('seekPosition' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002d: r3 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x002d: r4 'seekPosition' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_7;
Node_2 -> Node_8;
Node_2 -> Node_11;
Node_2 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_9 -> Node_6[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_6;
}

