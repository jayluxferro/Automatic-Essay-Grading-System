digraph "CFG forcom.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
subgraph cluster_Region_1808871013 {
label = "R(4:0|(1:4)(1:(1:11)(1:(1:17)(1:16)))|5|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = true\l}"];
subgraph cluster_IfRegion_1553602137 {
label = "IF [B:1:0x0005, B:3:0x0009] THEN: R(1:4) ELSE: R(1:(1:11)(1:(1:17)(1:16)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r6.tagType == 8) goto L_0x0007\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|ADDED_TO_REGION\l|if (r6.audioReader != null) goto L_0x000b\l}"];
subgraph cluster_Region_1718794727 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|r6.audioReader.consume(prepareTagData(r7), r6.tagTimestampUs)\l}"];
}
subgraph cluster_Region_518563620 {
label = "R(1:(1:11)(1:(1:17)(1:16))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1250255882 {
label = "IF [B:8:0x0021, B:10:0x0025] THEN: R(1:11) ELSE: R(1:(1:17)(1:16)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r6.tagType == 9) goto L_0x0023\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|ADDED_TO_REGION\l|if (r6.videoReader != null) goto L_0x0027\l}"];
subgraph cluster_Region_1184996317 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0027|r6.videoReader.consume(prepareTagData(r7), r6.tagTimestampUs)\l}"];
}
subgraph cluster_Region_904900463 {
label = "R(1:(1:17)(1:16)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1852174193 {
label = "IF [B:13:0x0037, B:15:0x003b] THEN: R(1:17) ELSE: R(1:16) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0037|if (r6.tagType != 18) goto L_0x0049\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|ADDED_TO_REGION\l|if (r6.metadataReader == null) goto L_0x0049\l}"];
subgraph cluster_Region_1110319726 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0049|r7.skipFully(r6.tagDataSize)\lr0 = false\l}"];
}
subgraph cluster_Region_262235011 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x003d|r6.metadataReader.consume(prepareTagData(r7), r6.tagTimestampUs)\l}"];
}
}
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x0016|PHI: r0 \l  PHI: (r0v2 'wasConsumed' boolean) = (r0v1 'wasConsumed' boolean), (r0v0 'wasConsumed' boolean), (r0v0 'wasConsumed' boolean), (r0v0 'wasConsumed' boolean) binds: [B:17:0x0049, B:16:0x003d, B:11:0x0027, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|r6.bytesToNextTagHeader = 4\lr6.parserState = 2\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|RETURN\l|return r0\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0023}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0033}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0039}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.flv.FlvExtractor.readTagData((r6v0 'this' com.google.android.exoplayer2.extractor.flv.FlvExtractor A[IMMUTABLE_TYPE, THIS]), (r7v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_5;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_5;
Node_16 -> Node_5;
Node_5 -> Node_6;
Node_2 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

