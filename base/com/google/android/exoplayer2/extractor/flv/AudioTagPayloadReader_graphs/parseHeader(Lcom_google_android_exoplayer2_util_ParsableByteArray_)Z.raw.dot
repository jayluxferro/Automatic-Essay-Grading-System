digraph "CFG forcom.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parseHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasParsedAudioDataHeader boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00af \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r21 I:int) = \l  (r24 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x000a: ARITH  (r1 I:int) = (r21 I:int A[D('header' int)]) \>\> (4 int) \l0x000c: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0010: IPUT  \l  (r1 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r1 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0045 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: ARITH  (r1 I:int) = (r21 I:int A[D('header' int)]) \>\> (2 int) \l0x001b: ARITH  (r22 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l0x001d: SGET  (r1 I:int[]) =  com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.AUDIO_SAMPLING_RATE_TABLE int[] \l0x001f: AGET  (r7 I:?[int, float]) = \l  (r1 I:?[int, float][])\l  (r22 I:?[int, short, byte, char] A[D('sampleRateIndex' int)])\l \l0x0021: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: CONST_STR  (r2 I:java.lang.String) =  \"audio\/mpeg\" \l0x0024: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0026: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0027: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0028: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: INVOKE  (r20 I:com.google.android.exoplayer2.Format) = \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int A[D('sampleRate' int)])\l  (r8 I:java.util.List)\l  (r9 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r10 I:int)\l  (r11 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l0x0030: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0032: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0036: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x0039: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x003c: IPUT  \l  (r1 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasOutputFormat boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x003e|0x003e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0041: IPUT  \l  (r1 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasParsedAudioDataHeader boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0043|0x0043: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0047: IGET  (r1 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0049: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004a|0x004a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0054 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x004e: IGET  (r1 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0050: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0052|0x0052: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|0x0054: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0056: IGET  (r1 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0058: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|0x0059: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0085 \l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|0x005b: CONST_STR  (r9 I:java.lang.String) =  \"audio\/g711\-alaw\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x005d|0x005d: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r21 I:?[int, boolean, short, byte, char] A[D('header' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l0x005f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0060|0x0060: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0088 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0062|0x0062: CONST  (r15 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0063|0x0063: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0064: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0065: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0066: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0067: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0068: CONST  (r14 I:?[int, float, short, byte, char]) = \l  (8000(0x1f40, float:1.121E\-41) ?[int, float, short, byte, char])\l \l0x006a: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006c: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006e: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0070: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0072: INVOKE  (r20 I:com.google.android.exoplayer2.Format) = \l  (r8 I:java.lang.String)\l  (r9 I:java.lang.String A[D('type' java.lang.String)])\l  (r10 I:java.lang.String)\l  (r11 I:int)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:int)\l  (r15 I:int A[D('pcmEncoding' int)])\l  (r16 I:java.util.List)\l  (r17 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r18 I:int)\l  (r19 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l0x0076: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0078: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x007a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x007c: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x007f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0080: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0082: IPUT  \l  (r1 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasOutputFormat boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x0085|0x0085: CONST_STR  (r9 I:java.lang.String A[D('type' java.lang.String)]) =  \"audio\/g711\-mlaw\" \l}"];
Node_20 [shape=record,label="{20\:\ 0x0088|0x0088: CONST  (r15 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x008a|0x008a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x008c: IGET  (r1 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x008e: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0090|0x0090: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x003e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0092|0x0092: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException) =  com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException \l0x0094: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0096: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0099: CONST_STR  (r3 I:java.lang.String) =  \"Audio format not supported: \" \l0x009b: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x00a1: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x00a3: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a7: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00ab: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException)\l  (r2 I:java.lang.String)\l com.google.android.exoplayer2.extractor.flv.TagPayloadReader.UnsupportedFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ae|0x00ae: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00af|0x00af: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00b0: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00b2: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parseHeader((r23 'this' I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r24 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0021\-0x003e: r7 'sampleRate' int\l  0x0030\-0x003e: r20 'format' com.google.android.exoplayer2.Format\l  0x001d\-0x003e: r22 'sampleRateIndex' int\l  0x000a\-0x0043: r21 'header' int\l  0x005d\-0x0085: r9 'type' java.lang.String\l  0x0063\-0x0085: r15 'pcmEncoding' int\l  0x0076\-0x0085: r20 'format' com.google.android.exoplayer2.Format\l  0x0088\-0x008a: r9 'type' java.lang.String\l  0x0045\-0x00af: r21 'header' int\l  ?\-0x00b5: r24 'data' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_5;
Node_19 -> Node_15;
Node_20 -> Node_18;
Node_21 -> Node_22;
Node_22 -> Node_5;
Node_22 -> Node_23[style=dashed];
Node_23 -> Node_24;
Node_25 -> Node_6;
}

