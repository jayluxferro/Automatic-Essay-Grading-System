digraph "CFG forcom.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parsePayload(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x0004: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r7 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x000b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x000d: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x000f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0011: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r7 I:int A[D('sampleSize' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0014: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0016: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0018: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: MOVE  (r4 I:?[long, double]) = (r24 I:?[long, double] A[D('timeUs' long)]) \l0x001d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r4 I:long)\l  (r6 I:int)\l  (r7 I:int A[D('sampleSize' int)])\l  (r8 I:int)\l  (r9 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: INVOKE  (r21 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r21 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('packetType' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0077 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0029: IGET  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasOutputFormat boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0077 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: INVOKE  (r3 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0031: NEW_ARRAY  (r0 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0033: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0035: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY] A[D('audioSpecificConfig' byte[])]) \l0x0038: ARRAY_LENGTH  (r4 I:int) = (r0 I:?[]) \l0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x003b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY] A[D('audioSpecificConfig' byte[])]) \l0x003d: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x0040: INVOKE  (r2 I:android.util.Pair) = (r19 I:byte[] A[D('audioSpecificConfig' byte[])]) com.google.android.exoplayer2.util.CodecSpecificDataUtil.parseAacAudioSpecificConfig(byte[]):android.util.Pair type: STATIC \l0x0044: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: CONST_STR  (r9 I:java.lang.String) =  \"audio\/mp4a\-latm\" \l0x0047: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0048: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0049: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x004a: IGET  (r3 I:java.lang.Object) = \l  (r2 I:android.util.Pair A[D('audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>)])\l android.util.Pair.second java.lang.Object \l0x004c: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) \l0x004e: INVOKE  (r13 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0052: IGET  (r3 I:java.lang.Object) = \l  (r2 I:android.util.Pair A[D('audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>)])\l android.util.Pair.first java.lang.Object \l0x0054: CHECK_CAST  (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:?[OBJECT, ARRAY]) \l0x0056: INVOKE  (r14 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x005a: INVOKE  (r15 I:java.util.List) = (r19 I:java.lang.Object A[D('audioSpecificConfig' byte[])]) java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC \l0x005e: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0060: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0062: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0064: INVOKE  (r20 I:com.google.android.exoplayer2.Format) = \l  (r8 I:java.lang.String)\l  (r9 I:java.lang.String)\l  (r10 I:java.lang.String)\l  (r11 I:int)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:int)\l  (r15 I:java.util.List)\l  (r16 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r17 I:int)\l  (r18 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l0x0068: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x006a: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x006e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x0071: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0072: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0074: IPUT  \l  (r3 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.hasOutputFormat boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0077|0x0077: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0079: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.audioFormat int \l0x007b: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x007d|0x007d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0084 \l}"];
Node_11 [shape=record,label="{11\:\ 0x007f|0x007f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0080: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('packetType' int)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0082|0x0082: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0020 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0084|0x0084: INVOKE  (r7 I:int) = \l  (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0088: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x008a: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x008c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r23 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x008e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r7 I:int A[D('sampleSize' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0091: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0093: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader)\l com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0095: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0096: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0097: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0098: MOVE  (r4 I:?[long, double]) = (r24 I:?[long, double] A[D('timeUs' long)]) \l0x009a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r4 I:long)\l  (r6 I:int)\l  (r7 I:int A[D('sampleSize' int)])\l  (r8 I:int)\l  (r9 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parsePayload((r22 'this' I:com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r23 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000b\-0x0020: r7 'sampleSize' int\l  0x0044\-0x0077: r2 'audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>\l  0x0035\-0x0077: r19 'audioSpecificConfig' byte[]\l  0x0068\-0x0077: r20 'format' com.google.android.exoplayer2.Format\l  0x0088\-0x009d: r7 'sampleSize' int\l  0x0025\-0x009d: r21 'packetType' int\l  ?\-0x009d: r23 'data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x009d: r24 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_3;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_3;
}

