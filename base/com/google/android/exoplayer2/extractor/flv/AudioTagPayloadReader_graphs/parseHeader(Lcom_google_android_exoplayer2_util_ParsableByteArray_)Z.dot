digraph "CFG forcom.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parseHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r23.hasParsedAudioDataHeader != false) goto L_0x00af\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|int r21 = r24.readUnsignedByte()\lr23.audioFormat = (r21 \>\> 4) & 15\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r23.audioFormat != 2) goto L_0x0045\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|r22 = (r21 \>\> 2) & 3\lcom.google.android.exoplayer2.Format r20 = com.google.android.exoplayer2.Format.createAudioSampleFormat((java.lang.String) null, com.google.android.exoplayer2.util.MimeTypes.AUDIO_MPEG, (java.lang.String) null, \-1, \-1, 1, AUDIO_SAMPLING_RATE_TABLE[r22], (java.util.List\<byte[]\>) null, (com.google.android.exoplayer2.drm.DrmInitData) null, 0, (java.lang.String) null)\lr23.output.format(r20)\lr23.hasOutputFormat = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x003e|r23.hasParsedAudioDataHeader = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045}"];
Node_7 [shape=record,label="{7\:\ 0x004a|if (r23.audioFormat == 7) goto L_0x0054\l}"];
Node_8 [shape=record,label="{8\:\ 0x004c}"];
Node_9 [shape=record,label="{9\:\ 0x0052|if (r23.audioFormat != 8) goto L_0x008a\l}"];
Node_10 [shape=record,label="{10\:\ 0x0054}"];
Node_11 [shape=record,label="{11\:\ 0x0059|if (r23.audioFormat != 7) goto L_0x0085\l}"];
Node_12 [shape=record,label="{12\:\ 0x005b|java.lang.String r9 = com.google.android.exoplayer2.util.MimeTypes.AUDIO_ALAW\l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|PHI: r9 \l  PHI: (r9v1 'type' java.lang.String) = (r9v0 'type' java.lang.String), (r9v2 'type' java.lang.String) binds: [B:17:0x0085, B:12:0x005b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|if ((r21 & 1) != 1) goto L_0x0088\l}"];
Node_15 [shape=record,label="{15\:\ 0x0062|r15 = 2\l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|PHI: r15 \l  PHI: (r15v1 'pcmEncoding' int) = (r15v0 'pcmEncoding' int), (r15v2 'pcmEncoding' int) binds: [B:18:0x0088, B:15:0x0062] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.Format r20 = com.google.android.exoplayer2.Format.createAudioSampleFormat((java.lang.String) null, r9, (java.lang.String) null, \-1, \-1, 1, 8000, r15, (java.util.List\<byte[]\>) null, (com.google.android.exoplayer2.drm.DrmInitData) null, 0, (java.lang.String) null)\lr23.output.format(r20)\lr23.hasOutputFormat = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0085|java.lang.String r9 = com.google.android.exoplayer2.util.MimeTypes.AUDIO_ULAW\l}"];
Node_18 [shape=record,label="{18\:\ 0x0088|r15 = 3\l}"];
Node_19 [shape=record,label="{19\:\ 0x008a}"];
Node_20 [shape=record,label="{20\:\ 0x0090|if (r23.audioFormat == 10) goto L_0x003e\l}"];
Node_21 [shape=record,label="{21\:\ 0x0092}"];
Node_22 [shape=record,label="{22\:\ 0x00ae|throw new com.google.android.exoplayer2.extractor.flv.TagPayloadReader.UnsupportedFormatException(new java.lang.StringBuilder().append(\"Audio format not supported: \").append(r23.audioFormat).toString())\l}"];
Node_23 [shape=record,label="{23\:\ 0x00af|r24.skipBytes(1)\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader.parseHeader((r23v0 'this' com.google.android.exoplayer2.extractor.flv.AudioTagPayloadReader A[IMMUTABLE_TYPE, THIS]), (r24v0 'data' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.extractor.flv.TagPayloadReader$UnsupportedFormatException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_5;
Node_17 -> Node_13;
Node_18 -> Node_16;
Node_19 -> Node_20;
Node_20 -> Node_5;
Node_20 -> Node_21[style=dashed];
Node_21 -> Node_22;
Node_23 -> Node_25;
}

