digraph "CFG forcom.google.android.exoplayer2.extractor.ChunkIndex.\<init\>([I[J[J[J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r5 I:int[] A[D('sizes' int[])])\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.sizes int[] \l0x0005: IPUT  \l  (r6 I:long[] A[D('offsets' long[])])\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.offsets long[] \l0x0007: IPUT  \l  (r7 I:long[] A[D('durationsUs' long[])])\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.durationsUs long[] \l0x0009: IPUT  \l  (r8 I:long[] A[D('timesUs' long[])])\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.timesUs long[] \l0x000b: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[] A[D('sizes' int[])]) \l0x000c: IPUT  \l  (r0 I:int)\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.length int \l0x000e: IGET  (r0 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex) com.google.android.exoplayer2.extractor.ChunkIndex.length int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r0 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex) com.google.android.exoplayer2.extractor.ChunkIndex.length int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0016: AGET  (r0 I:?[long, double]) = \l  (r7 I:?[long, double][] A[D('durationsUs' long[])])\l  (r0 I:?[int, short, byte, char])\l \l0x0018: IGET  (r2 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex) com.google.android.exoplayer2.extractor.ChunkIndex.length int \l0x001a: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x001c: AGET  (r2 I:?[long, double]) = \l  (r8 I:?[long, double][] A[D('timesUs' long[])])\l  (r2 I:?[int, short, byte, char])\l \l0x001e: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x001f: IPUT  \l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.durationUs long \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0024: IPUT  \l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.extractor.ChunkIndex)\l com.google.android.exoplayer2.extractor.ChunkIndex.durationUs long \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ChunkIndex.\<init\>((r4 'this' I:com.google.android.exoplayer2.extractor.ChunkIndex A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[D('sizes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long[] A[D('offsets' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long[] A[D('durationsUs' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long[] A[D('timesUs' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0026: r5 'sizes' int[]\l  ?\-0x0026: r6 'offsets' long[]\l  ?\-0x0026: r7 'durationsUs' long[]\l  ?\-0x0026: r8 'timesUs' long[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

