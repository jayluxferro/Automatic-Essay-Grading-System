digraph "CFG forcom.google.android.exoplayer2.extractor.GaplessInfoHolder.setFromXingHeaderValue(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r4 I:int A[D('value' int)]) \>\> (12 int) \l0x0002: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char] A[D('value' int)]) & (4095(0xfff, float:5.738E\-42) ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char] A[D('encoderDelay' int)]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char] A[D('encoderPadding' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IPUT  \l  (r0 I:int A[D('encoderDelay' int)])\l  (r3 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderDelay int \l0x000a: IPUT  \l  (r1 I:int A[D('encoderPadding' int)])\l  (r3 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderPadding int \l0x000c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r2 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.GaplessInfoHolder.setFromXingHeaderValue((r3 'this' I:com.google.android.exoplayer2.extractor.GaplessInfoHolder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0002\-0x000f: r0 'encoderDelay' int\l  0x0004\-0x000f: r1 'encoderPadding' int\l  ?\-0x000f: r4 'value' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_4;
}

