digraph "CFG forcom.google.android.exoplayer2.extractor.GaplessInfoHolder.setFromComment(Ljava\/lang\/String;Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST_STR  (r5 I:java.lang.String) =  \"iTunSMPB\" \l0x0004: INVOKE  (r5 I:boolean) = \l  (r5 I:java.lang.String)\l  (r8 I:java.lang.Object A[D('name' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  (r3 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: SGET  (r5 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.extractor.GaplessInfoHolder.GAPLESS_COMMENT_PATTERN java.util.regex.Pattern \l0x000d: INVOKE  (r2 I:java.util.regex.Matcher) = \l  (r5 I:java.util.regex.Pattern)\l  (r9 I:java.lang.CharSequence A[D('data' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0011: INVOKE  (r5 I:boolean) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.find():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|SYNTHETIC\lSplitter:B:6:0x0018\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0018\l|0x0018: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r5 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0037 \}, TRY_ENTER]\l0x001c: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x001e: INVOKE  (r0 I:int) = (r5 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x0022: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x0023: INVOKE  (r5 I:java.lang.String) = \l  (r2 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r5 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x0027: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x0029: INVOKE  (r1 I:int) = (r5 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r0 I:?[int, byte, short, char] A[D('encoderDelay' int)]) \> (0 ?[int, byte, short, char])  \-\> B:10:0x0031 A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char] A[D('encoderPadding' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:2:0x000a A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IPUT  \l  (r0 I:int A[D('encoderDelay' int)])\l  (r7 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderDelay int A[Catch:\{ NumberFormatException \-\> 0x0037 \}]\l0x0033: IPUT  \l  (r1 I:int A[D('encoderPadding' int)])\l  (r7 I:com.google.android.exoplayer2.extractor.GaplessInfoHolder)\l com.google.android.exoplayer2.extractor.GaplessInfoHolder.encoderPadding int A[Catch:\{ NumberFormatException \-\> 0x0037 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|ExcHandler: NumberFormatException null\lSplitter:B:6:0x0018\l|0x0037: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.GaplessInfoHolder.setFromComment((r7 'this' I:com.google.android.exoplayer2.extractor.GaplessInfoHolder A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('data' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0022\-0x0037: r0 'encoderDelay' int\l  0x002d\-0x0037: r1 'encoderPadding' int\l  0x0011\-0x0038: r2 'matcher' java.util.regex.Matcher\l  ?\-0x0038: r8 'name' java.lang.String\l  ?\-0x0038: r9 'data' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_2;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_2;
Node_12 -> Node_2;
}

