digraph "CFG forcom.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Lcom\/google\/android\/exoplayer2\/extractor\/wav\/WavHeaderReader$ChunkHeader;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:byte[]) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0005: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r5 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0008: INVOKE  \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r5 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x000b: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x000f: INVOKE  (r2 I:long) = \l  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedInt():long type: VIRTUAL \l0x0013: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader) =  com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader \l0x0015: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)\l  (r0 I:int A[D('id' int)])\l  (r2 I:long A[D('size' long)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.\<init\>(int, long):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: RETURN  \l  (r1 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)\l \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek((r6 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x0018: r0 'id' int\l  0x0013\-0x0018: r2 'size' long\l  ?\-0x0018: r6 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0018: r7 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

