digraph "CFG forcom.google.android.exoplayer2.extractor.wav.WavHeader.getDurationUs()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.wav.WavHeader)\l com.google.android.exoplayer2.extractor.wav.WavHeader.dataSize long \l0x0002: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.wav.WavHeader)\l com.google.android.exoplayer2.extractor.wav.WavHeader.blockAlignment int \l0x0004: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0005: ARITH  (r0 I:long) = (r2 I:long) \/ (r4 I:long) \l0x0007: CONST  (r2 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x000a: ARITH  (r2 I:long) = (r2 I:long) * (r0 I:long A[D('numFrames' long)]) \l0x000b: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.wav.WavHeader)\l com.google.android.exoplayer2.extractor.wav.WavHeader.sampleRateHz int \l0x000d: CAST  (r4 I:long) = (long) (r4 I:int) \l0x000e: ARITH  (r2 I:long) = (r2 I:long) \/ (r4 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.extractor.wav.WavHeader.getDurationUs((r6 'this' I:com.google.android.exoplayer2.extractor.wav.WavHeader A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0007\-0x000f: r0 'numFrames' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

