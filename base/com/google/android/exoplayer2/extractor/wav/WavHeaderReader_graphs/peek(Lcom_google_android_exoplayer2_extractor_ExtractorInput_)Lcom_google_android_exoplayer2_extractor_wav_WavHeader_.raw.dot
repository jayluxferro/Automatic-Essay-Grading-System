digraph "CFG forcom.google.android.exoplayer2.extractor.wav.WavHeaderReader.peek(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Lcom\/google\/android\/exoplayer2\/extractor\/wav\/WavHeader;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r18 I:java.lang.Object A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0003: NEW_INSTANCE  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0007: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x000c: INVOKE  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader type: STATIC \l0x0010: IGET  (r2 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x0012: CONST_STR  (r14 I:java.lang.String) =  \"RIFF\" \l0x0014: INVOKE  (r14 I:int) = (r14 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN  \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeader)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r2 I:byte[]) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x001e: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r15 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0022: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r2 I:byte[])\l  (r14 I:int)\l  (r15 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0025: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0029: INVOKE  (r11 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x002d: CONST_STR  (r2 I:java.lang.String) =  \"WAVE\" \l0x002f: INVOKE  (r2 I:int) = (r2 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('riffFormat' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x004f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: CONST_STR  (r2 I:java.lang.String) =  \"WavHeaderReader\" \l0x0037: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003c: CONST_STR  (r15 I:java.lang.String) =  \"Unsupported RIFF format: \" \l0x003e: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r14 I:java.lang.StringBuilder) = \l  (r14 I:java.lang.StringBuilder)\l  (r11 I:int A[D('riffFormat' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004a: INVOKE  (r2 I:java.lang.String), (r14 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x004d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x004f|0x004f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0051: INVOKE  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0055|0x0055: IGET  (r2 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x0057: CONST_STR  (r14 I:java.lang.String) =  \"fmt \" \l0x0059: INVOKE  (r14 I:int) = (r14 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x005d|0x005d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x006e \l}"];
Node_10 [shape=record,label="{10\:\ 0x005f|0x005f: IGET  (r14 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.size long \l0x0061: CAST  (r2 I:int) = (int) (r14 I:long) \l0x0062: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0064: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l0x0067: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0069: INVOKE  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x006e|0x006e: IGET  (r14 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.size long \l0x0070: CONST  (r16 I:?[long, double]) = (16 ?[long, double]) \l0x0072: CMP_L  (r2 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0074|0x0074: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:18:0x00c9 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0076|0x0076: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0077|0x0077: INVOKE  (r2 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x007a: IGET  (r2 I:byte[]) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x007c: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007d: CONST  (r15 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x007f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0081: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r2 I:byte[])\l  (r14 I:int)\l  (r15 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0084: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0085: INVOKE  \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0088: INVOKE  (r13 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedShort():int type: VIRTUAL \l0x008c: INVOKE  (r3 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedShort():int type: VIRTUAL \l0x0090: INVOKE  (r4 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedIntToInt():int type: VIRTUAL \l0x0094: INVOKE  (r5 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedIntToInt():int type: VIRTUAL \l0x0098: INVOKE  (r6 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedShort():int type: VIRTUAL \l0x009c: INVOKE  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedShort():int type: VIRTUAL \l0x00a0: ARITH  (r2 I:int) = (r3 I:int A[D('numChannels' int)]) * (r7 I:int A[D('bitsPerSample' int)]) \l0x00a2: ARITH  (r10 I:int) = (r2 I:int) \/ (8 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a4|0x00a4: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('blockAlignment' int)]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('expectedBlockAlignment' int)])  \-\> B:19:0x00cb \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a6|0x00a6: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x00a8: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00aa: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ad: CONST_STR  (r15 I:java.lang.String) =  \"Expected block alignment: \" \l0x00af: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b3: INVOKE  (r14 I:java.lang.StringBuilder) = \l  (r14 I:java.lang.StringBuilder)\l  (r10 I:int A[D('expectedBlockAlignment' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00b7: CONST_STR  (r15 I:java.lang.String) =  \"; got: \" \l0x00b9: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00bd: INVOKE  (r14 I:java.lang.StringBuilder) = \l  (r14 I:java.lang.StringBuilder)\l  (r6 I:int A[D('blockAlignment' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00c1: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00c5: INVOKE  \l  (r2 I:com.google.android.exoplayer2.ParserException)\l  (r14 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x00c8|0x00c8: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x00c9|0x00c9: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x00cb|0x00cb: INVOKE  (r8 I:int) = (r7 I:int A[D('bitsPerSample' int)]) com.google.android.exoplayer2.util.Util.getPcmEncoding(int):int type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x00cf|0x00cf: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encoding' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00ec \l}"];
Node_21 [shape=record,label="{21\:\ 0x00d1|0x00d1: CONST_STR  (r2 I:java.lang.String) =  \"WavHeaderReader\" \l0x00d3: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00d5: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00d8: CONST_STR  (r15 I:java.lang.String) =  \"Unsupported WAV bit depth: \" \l0x00da: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00de: INVOKE  (r14 I:java.lang.StringBuilder) = \l  (r14 I:java.lang.StringBuilder)\l  (r7 I:int A[D('bitsPerSample' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00e2: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00e6: INVOKE  (r2 I:java.lang.String), (r14 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x00e9: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x00ec|0x00ec: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ed|0x00ed: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x010f \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ef|0x00ef: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (65534(0xfffe, float:9.1833E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x00f2|0x00f2: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x010f \l}"];
Node_26 [shape=record,label="{26\:\ 0x00f4|0x00f4: CONST_STR  (r2 I:java.lang.String) =  \"WavHeaderReader\" \l0x00f6: NEW_INSTANCE  (r14 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00f8: INVOKE  (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00fb: CONST_STR  (r15 I:java.lang.String) =  \"Unsupported WAV format type: \" \l0x00fd: INVOKE  (r14 I:java.lang.StringBuilder) = (r14 I:java.lang.StringBuilder), (r15 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0101: INVOKE  (r14 I:java.lang.StringBuilder) = \l  (r14 I:java.lang.StringBuilder)\l  (r13 I:int A[D('type' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0105: INVOKE  (r14 I:java.lang.String) = (r14 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0109: INVOKE  (r2 I:java.lang.String), (r14 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x010c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x010f|0x010f: IGET  (r14 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.size long \l0x0111: CAST  (r2 I:int) = (int) (r14 I:long) \l0x0112: ARITH  (r2 I:int) = (r2 I:int) + (\-16 int) \l0x0114: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x0116: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l0x0119: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeader) =  com.google.android.exoplayer2.extractor.wav.WavHeader \l0x011b: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeader)\l  (r3 I:int A[D('numChannels' int)])\l  (r4 I:int A[D('sampleRateHz' int)])\l  (r5 I:int A[D('averageBytesPerSecond' int)])\l  (r6 I:int A[D('blockAlignment' int)])\l  (r7 I:int A[D('bitsPerSample' int)])\l  (r8 I:int A[D('encoding' int)])\l com.google.android.exoplayer2.extractor.wav.WavHeader.\<init\>(int, int, int, int, int, int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.extractor.wav.WavHeader com.google.android.exoplayer2.extractor.wav.WavHeaderReader.peek((r18 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0090\-0x00c9: r3 'numChannels' int\l  0x0094\-0x00c9: r4 'sampleRateHz' int\l  0x0098\-0x00c9: r5 'averageBytesPerSecond' int\l  0x009c\-0x00c9: r6 'blockAlignment' int\l  0x00a0\-0x00c9: r7 'bitsPerSample' int\l  0x00a4\-0x00c9: r10 'expectedBlockAlignment' int\l  0x008c\-0x00c9: r13 'type' int\l  0x00cb\-0x011f: r3 'numChannels' int\l  0x00cb\-0x011f: r4 'sampleRateHz' int\l  0x00cb\-0x011f: r5 'averageBytesPerSecond' int\l  0x00cb\-0x011f: r6 'blockAlignment' int\l  0x00cb\-0x011f: r7 'bitsPerSample' int\l  0x00cf\-0x011f: r8 'encoding' int\l  0x0010\-0x011f: r9 'chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader\l  0x00cb\-0x011f: r10 'expectedBlockAlignment' int\l  0x002d\-0x011f: r11 'riffFormat' int\l  0x000a\-0x011f: r12 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\l  0x00cb\-0x011f: r13 'type' int\l  ?\-0x011f: r18 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_3;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_3;
Node_27 -> Node_3;
}

