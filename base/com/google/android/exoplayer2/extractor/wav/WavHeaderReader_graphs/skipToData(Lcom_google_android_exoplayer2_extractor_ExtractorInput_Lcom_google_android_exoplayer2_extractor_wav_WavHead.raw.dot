digraph "CFG forcom.google.android.exoplayer2.extractor.wav.WavHeaderReader.skipToData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/wav\/WavHeader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r9 I:java.lang.Object A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0005: INVOKE  \l  (r10 I:java.lang.Object A[D('wavHeader' com.google.android.exoplayer2.extractor.wav.WavHeader)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0008: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l0x000b: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x000d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT \l0x0010: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader) = \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IGET  (r4 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x0016: CONST_STR  (r5 I:java.lang.String) =  \"data\" \l0x0018: INVOKE  (r5 I:int) = (r5 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0075 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CONST_STR  (r4 I:java.lang.String) =  \"WavHeaderReader\" \l0x0020: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r6 I:java.lang.String) =  \"Ignoring unknown WAV chunk: \" \l0x0027: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002b: IGET  (r6 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x002d: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0035: INVOKE  (r4 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0038: CONST  (r4 I:?[long, double]) = (8 ?[long, double]) \l0x003a: IGET  (r6 I:long) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.size long \l0x003c: ARITH  (r0 I:long) = (r4 I:long) + (r6 I:long) \l0x003e: IGET  (r4 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x0040: CONST_STR  (r5 I:java.lang.String) =  \"RIFF\" \l0x0042: INVOKE  (r5 I:int) = (r5 I:java.lang.String) com.google.android.exoplayer2.util.Util.getIntegerCodeForString(java.lang.String):int type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0046|0x0046: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x004a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0048|0x0048: CONST  (r0 I:?[long, double] A[D('bytesToSkip' long)]) = (12 ?[long, double]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x004a|0x004a: CONST  (r4 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x004d: CMP_L  (r4 I:int) = (r0 I:long A[D('bytesToSkip' long)]), (r4 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004f|0x004f: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x006c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0051|0x0051: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0053: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0055: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0058: CONST_STR  (r6 I:java.lang.String) =  \"Chunk is too large (~2GB+) to skip; id: \" \l0x005a: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005e: IGET  (r6 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.id int \l0x0060: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ParserException)\l  (r5 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x006b|0x006b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x006c|0x006c: CAST  (r4 I:int) = (int) (r0 I:long A[D('bytesToSkip' long)]) \l0x006d: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x0070: INVOKE  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)]) = \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.peek(com.google.android.exoplayer2.extractor.ExtractorInput, com.google.android.exoplayer2.util.ParsableByteArray):com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0075|0x0075: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x0078: INVOKE  (r4 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x007c: IGET  (r6 I:long) = \l  (r2 I:com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader A[D('chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader)])\l com.google.android.exoplayer2.extractor.wav.WavHeaderReader.ChunkHeader.size long \l0x007e: INVOKE  \l  (r10 I:com.google.android.exoplayer2.extractor.wav.WavHeader A[D('wavHeader' com.google.android.exoplayer2.extractor.wav.WavHeader)])\l  (r4 I:long)\l  (r6 I:long)\l com.google.android.exoplayer2.extractor.wav.WavHeader.setDataBounds(long, long):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0081|0x0081: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.google.android.exoplayer2.extractor.wav.WavHeaderReader.skipToData((r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.extractor.wav.WavHeader A[D('wavHeader' com.google.android.exoplayer2.extractor.wav.WavHeader), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003e\-0x0075: r0 'bytesToSkip' long\l  0x0014\-0x0081: r2 'chunkHeader' com.google.android.exoplayer2.extractor.wav.WavHeaderReader$ChunkHeader\l  0x0010\-0x0081: r3 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0081: r9 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0081: r10 'wavHeader' com.google.android.exoplayer2.extractor.wav.WavHeader\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_1;
Node_11 -> Node_12;
}

