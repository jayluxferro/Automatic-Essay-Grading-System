digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorsFactory.createExtractors()[Lcom\/google\/android\/exoplayer2\/extractor\/Extractor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r3 I:java.lang.reflect.Constructor\<? extends com.google.android.exoplayer2.extractor.Extractor\>) =  com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.FLAC_EXTRACTOR_CONSTRUCTOR java.lang.reflect.Constructor A[Catch:\{ all \-\> 0x008f \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0083 A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: NEW_ARRAY  (r1 I:com.google.android.exoplayer2.extractor.Extractor[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.extractor.Extractor[] A[Catch:\{ all \-\> 0x008f \}]\l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x000a: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor) =  com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x000c: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory)\l com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.matroskaFlags int A[Catch:\{ all \-\> 0x008f \}]\l0x000e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.\<init\>(int):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0011: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0013: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0014: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor) =  com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor A[Catch:\{ all \-\> 0x008f \}]\l0x0016: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory)\l com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.fragmentedMp4Flags int A[Catch:\{ all \-\> 0x008f \}]\l0x0018: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mp4.FragmentedMp4Extractor.\<init\>(int):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x001b: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x001e: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor) =  com.google.android.exoplayer2.extractor.mp4.Mp4Extractor A[Catch:\{ all \-\> 0x008f \}]\l0x0020: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp4.Mp4Extractor)\l com.google.android.exoplayer2.extractor.mp4.Mp4Extractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0023: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0025: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0026: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor) =  com.google.android.exoplayer2.extractor.mp3.Mp3Extractor A[Catch:\{ all \-\> 0x008f \}]\l0x0028: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory)\l com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.mp3Flags int A[Catch:\{ all \-\> 0x008f \}]\l0x002a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.mp3.Mp3Extractor)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.\<init\>(int):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x002d: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0030: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsExtractor) =  com.google.android.exoplayer2.extractor.ts.AdtsExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x0032: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsExtractor)\l com.google.android.exoplayer2.extractor.ts.AdtsExtractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0035: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0037: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0038: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Extractor) =  com.google.android.exoplayer2.extractor.ts.Ac3Extractor A[Catch:\{ all \-\> 0x008f \}]\l0x003a: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Extractor)\l com.google.android.exoplayer2.extractor.ts.Ac3Extractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x003d: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x003f: CONST  (r2 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0040: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.ts.TsExtractor) =  com.google.android.exoplayer2.extractor.ts.TsExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x0042: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory)\l com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.tsMode int A[Catch:\{ all \-\> 0x008f \}]\l0x0044: IGET  (r5 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory)\l com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.tsFlags int A[Catch:\{ all \-\> 0x008f \}]\l0x0046: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l  (r4 I:int)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.\<init\>(int, int):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0049: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x004b: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x004c: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor) =  com.google.android.exoplayer2.extractor.flv.FlvExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x004e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.flv.FlvExtractor)\l com.google.android.exoplayer2.extractor.flv.FlvExtractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0051: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0053: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0055: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.ogg.OggExtractor) =  com.google.android.exoplayer2.extractor.ogg.OggExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x0057: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ogg.OggExtractor)\l com.google.android.exoplayer2.extractor.ogg.OggExtractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x005a: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x005c: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x005e: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.ts.PsExtractor) =  com.google.android.exoplayer2.extractor.ts.PsExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x0060: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.PsExtractor)\l com.google.android.exoplayer2.extractor.ts.PsExtractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x0063: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x0065: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x008f \}]\l0x0067: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.extractor.wav.WavExtractor) =  com.google.android.exoplayer2.extractor.wav.WavExtractor A[Catch:\{ all \-\> 0x008f \}]\l0x0069: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.wav.WavExtractor)\l com.google.android.exoplayer2.extractor.wav.WavExtractor.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l0x006c: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008f \}]\l0x006e: SGET  (r2 I:java.lang.reflect.Constructor\<? extends com.google.android.exoplayer2.extractor.Extractor\>) =  com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.FLAC_EXTRACTOR_CONSTRUCTOR java.lang.reflect.Constructor A[Catch:\{ all \-\> 0x008f \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0070|0x0070: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0081 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0072|0x0072: CONST  (r3 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0074|SYNTHETIC\lSplitter:B:8:0x0074\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0074\l|0x0074: SGET  (r2 I:java.lang.reflect.Constructor\<? extends com.google.android.exoplayer2.extractor.Extractor\>) =  com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.FLAC_EXTRACTOR_CONSTRUCTOR java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0086 \}, TRY_ENTER]\l0x0076: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0086 \}]\l0x0077: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x0086 \}]\l0x0079: INVOKE  (r2 I:java.lang.Object) = \l  (r2 I:java.lang.reflect.Constructor)\l  (r4 I:java.lang.Object[])\l java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0086 \}]\l0x007d: CHECK_CAST  (r2 I:com.google.android.exoplayer2.extractor.Extractor) = (com.google.android.exoplayer2.extractor.Extractor) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0086 \}]\l0x007f: APUT  \l  (r1 I:?[OBJECT, ARRAY][] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0086 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0081|0x0081: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0082|0x0082: RETURN  \l  (r1 I:com.google.android.exoplayer2.extractor.Extractor[] A[D('extractors' com.google.android.exoplayer2.extractor.Extractor[])])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0083|0x0083: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0086|ExcHandler: Exception null\lSplitter:B:8:0x0074\l|0x0086: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0087|SYNTHETIC\lSplitter:B:14:0x0087\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0087\l|0x0087: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x008f \}, TRY_ENTER]\l0x0089: CONST_STR  (r3 I:java.lang.String) =  \"Unexpected error creating FLAC extractor\" A[Catch:\{ all \-\> 0x008f \}]\l0x008b: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Throwable A[D('e' java.lang.Exception)])\l java.lang.IllegalStateException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x008f \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x008e|0x008e: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x008f \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x008f: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0090|0x0090: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0091|0x0091: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized com.google.android.exoplayer2.extractor.Extractor[] com.google.android.exoplayer2.extractor.DefaultExtractorsFactory.createExtractors((r6 'this' I:com.google.android.exoplayer2.extractor.DefaultExtractorsFactory A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0009\-0x0083: r1 'extractors' com.google.android.exoplayer2.extractor.Extractor[]\l  0x0087\-0x008f: r0 'e' java.lang.Exception\l  0x0086\-0x008f: r1 'extractors' com.google.android.exoplayer2.extractor.Extractor[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_12 -> Node_5;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

