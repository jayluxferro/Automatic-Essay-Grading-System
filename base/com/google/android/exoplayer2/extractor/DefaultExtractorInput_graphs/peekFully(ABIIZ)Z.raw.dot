digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.peekFully([BIIZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r5 I:int A[D('length' int)])\l  (r6 I:boolean A[D('allowEndOfInput' boolean)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.advancePeekPosition(int, boolean):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:byte[]) = \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBuffer byte[] \l0x000a: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x000c: ARITH  (r1 I:int) = (r1 I:int) \- (r5 I:int A[D('length' int)]) \l0x000d: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r3 I:java.lang.Object A[D('target' byte[])])\l  (r4 I:int A[D('offset' int)])\l  (r5 I:int A[D('length' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekFully((r2 'this' I:com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('allowEndOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0011: r3 'target' byte[]\l  ?\-0x0011: r4 'offset' int\l  ?\-0x0011: r5 'length' int\l  ?\-0x0011: r6 'allowEndOfInput' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

