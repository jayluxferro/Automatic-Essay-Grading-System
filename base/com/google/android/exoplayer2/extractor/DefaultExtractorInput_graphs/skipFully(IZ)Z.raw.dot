digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.skipFully(IZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r8 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.skipFromPeekBuffer(int):int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char] A[D('bytesSkipped' int)]) \>= (r8 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:4:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesSkipped' int)]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: SGET  (r1 I:byte[]) =  com.google.android.exoplayer2.extractor.DefaultExtractorInput.SCRATCH_SPACE byte[] \l0x000b: NEG  (r2 I:int) = (r4 I:int A[D('bytesSkipped' int)]) \l0x000c: SGET  (r0 I:byte[]) =  com.google.android.exoplayer2.extractor.DefaultExtractorInput.SCRATCH_SPACE byte[] \l0x000e: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int A[D('bytesSkipped' int)]) \l0x0010: INVOKE  (r3 I:int) = (r8 I:int A[D('length' int)]), (r0 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0014: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0015: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allowEndOfInput' boolean)])\l \l0x0016: INVOKE  (r4 I:int A[D('bytesSkipped' int)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int A[D('bytesSkipped' int)])\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromDataSource(byte[], int, int, int, boolean):int type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r4 I:int A[D('bytesSkipped' int)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.commitBytesRead(int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesSkipped' int)]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.DefaultExtractorInput.skipFully((r7 'this' I:com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('allowEndOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x0023: r4 'bytesSkipped' int\l  ?\-0x0023: r8 'length' int\l  ?\-0x0023: r9 'allowEndOfInput' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_7;
}

