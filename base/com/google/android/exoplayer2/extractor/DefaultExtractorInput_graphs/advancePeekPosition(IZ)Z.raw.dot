digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.advancePeekPosition(IZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r7 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.ensureSpaceForPeek(int):void type: DIRECT \l0x0003: IGET  (r0 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferLength int \l0x0005: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0008: INVOKE  (r4 I:int) = (r0 I:int), (r7 I:int A[D('length' int)]) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char] A[D('bytesPeeked' int)]) \>= (r7 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:6:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IGET  (r1 I:byte[]) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBuffer byte[] \l0x0010: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0013: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)])\l \l0x0014: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allowEndOfInput' boolean)])\l \l0x0015: INVOKE  (r4 I:int A[D('bytesPeeked' int)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int A[D('bytesPeeked' int)])\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromDataSource(byte[], int, int, int, boolean):int type: DIRECT \l0x0019: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesPeeked' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IGET  (r0 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x0020: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int A[D('length' int)]) \l0x0021: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x0023: IGET  (r0 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferLength int \l0x0025: IGET  (r1 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferPosition int \l0x0027: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x002b: IPUT  \l  (r0 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.peekBufferLength int \l0x002d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.DefaultExtractorInput.advancePeekPosition((r6 'this' I:com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('allowEndOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000c\-0x002e: r4 'bytesPeeked' int\l  ?\-0x002e: r7 'length' int\l  ?\-0x002e: r8 'allowEndOfInput' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_1;
Node_3 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_5;
}

