digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.read([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r8 I:byte[] A[D('target' byte[])])\l  (r9 I:int A[D('offset' int)])\l  (r10 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromPeekBuffer(byte[], int, int):int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesRead' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY] A[D('target' byte[])]) \l0x000a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x000b: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)])\l \l0x000c: INVOKE  (r6 I:int A[D('bytesRead' int)]) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromDataSource(byte[], int, int, int, boolean):int type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultExtractorInput)\l  (r6 I:int A[D('bytesRead' int)])\l com.google.android.exoplayer2.extractor.DefaultExtractorInput.commitBytesRead(int):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN  (r6 I:int A[D('bytesRead' int)]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.DefaultExtractorInput.read((r7 'this' I:com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r8 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0013: r6 'bytesRead' int\l  ?\-0x0013: r8 'target' byte[]\l  ?\-0x0013: r9 'offset' int\l  ?\-0x0013: r10 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

