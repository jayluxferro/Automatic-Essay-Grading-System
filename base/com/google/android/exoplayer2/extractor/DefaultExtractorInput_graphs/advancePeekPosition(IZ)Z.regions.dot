digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.advancePeekPosition(IZ)Z" {
subgraph cluster_Region_667848749 {
label = "R(4:0|(2:2|(1:4))|5|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|ensureSpaceForPeek(r7)\lint int r4 = java.lang.Math.min(r6.peekBufferLength \- r6.peekBufferPosition, r7)\l}"];
subgraph cluster_LoopRegion_244270971 {
label = "LOOP:0: (2:2|(1:4))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r4 \l  PHI: (r4v1 'bytesPeeked' int) = (r4v0 'bytesPeeked' int), (r4v2 'bytesPeeked' int) binds: [B:0:0x0000, B:3:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:3:0x001a\l|if (r4 \< r7) goto L_0x000e\l}"];
subgraph cluster_Region_220837873 {
label = "R(2:2|(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|int r4 = readFromDataSource(r6.peekBuffer, r6.peekBufferPosition, r7, r4, r8)\l}"];
subgraph cluster_IfRegion_683141213 {
label = "IF [B:3:0x001a] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:3:0x001a\l|if (r4 == \-1) goto L_0x001c\l}"];
subgraph cluster_Region_1612885927 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x001e|r6.peekBufferPosition += r7\lr6.peekBufferLength = java.lang.Math.max(r6.peekBufferLength, r6.peekBufferPosition)\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ 0x001c|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.DefaultExtractorInput.advancePeekPosition((r6v0 'this' com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r7v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'allowEndOfInput' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_1[style=dashed];
Node_3 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_4;
Node_7 -> Node_5;
}

