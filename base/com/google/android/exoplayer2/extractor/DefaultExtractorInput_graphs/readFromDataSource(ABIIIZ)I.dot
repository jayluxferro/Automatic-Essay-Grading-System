digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromDataSource([BIIIZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (java.lang.Thread.interrupted() == false) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000c|throw new java.lang.InterruptedException()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|int r0 = r5.dataSource.read(r6, r7 + r9, r8 \- r9)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r0 != \-1) goto L_0x0024\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|if (r9 != 0) goto L_0x001e\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|if (r10 == false) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e}"];
Node_9 [shape=record,label="{9\:\ 0x0023|throw new java.io.EOFException()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return r9 + r0\l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.DefaultExtractorInput.readFromDataSource((r5v0 'this' com.google.android.exoplayer2.extractor.DefaultExtractorInput A[IMMUTABLE_TYPE, THIS]), (r6v0 'target' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'bytesAlreadyRead' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'allowEndOfInput' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_12;
}

