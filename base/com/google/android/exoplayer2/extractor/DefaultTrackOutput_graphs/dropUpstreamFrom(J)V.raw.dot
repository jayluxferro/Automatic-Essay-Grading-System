digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.dropUpstreamFrom(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r6 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesDropped long \l0x0002: ARITH  (r6 I:long) = (r10 I:long A[D('absolutePosition' long)]) \- (r6 I:long) \l0x0004: CAST  (r4 I:int) = (int) (r6 I:long) \l0x0005: IGET  (r5 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocationLength int \l0x0007: ARITH  (r1 I:int) = (r4 I:int A[D('relativePosition' int)]) \/ (r5 I:int) \l0x0009: IGET  (r5 I:int) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocationLength int \l0x000b: ARITH  (r2 I:int) = (r4 I:int A[D('relativePosition' int)]) % (r5 I:int) \l0x000d: IGET  (r5 I:java.util.concurrent.LinkedBlockingDeque\<com.google.android.exoplayer2.upstream.Allocation\>) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dataQueue java.util.concurrent.LinkedBlockingDeque \l0x000f: INVOKE  (r5 I:int) = (r5 I:java.util.concurrent.LinkedBlockingDeque) java.util.concurrent.LinkedBlockingDeque.size():int type: VIRTUAL \l0x0013: ARITH  (r5 I:int) = (r5 I:int) \- (r1 I:int A[D('allocationIndex' int)]) \l0x0014: ARITH  (r0 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allocationOffset' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|0x0018: ARITH  (r0 I:int A[D('allocationDiscardCount' int)]) = (r0 I:int A[D('allocationDiscardCount' int)]) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r3 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char] A[D('allocationDiscardCount' int)])  \-\> B:6:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r6 I:com.google.android.exoplayer2.upstream.Allocator) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocator com.google.android.exoplayer2.upstream.Allocator \l0x001f: IGET  (r5 I:java.util.concurrent.LinkedBlockingDeque\<com.google.android.exoplayer2.upstream.Allocation\>) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dataQueue java.util.concurrent.LinkedBlockingDeque \l0x0021: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.concurrent.LinkedBlockingDeque) java.util.concurrent.LinkedBlockingDeque.removeLast():java.lang.Object type: VIRTUAL \l0x0025: CHECK_CAST  (r5 I:com.google.android.exoplayer2.upstream.Allocation) = (com.google.android.exoplayer2.upstream.Allocation) (r5 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  \l  (r6 I:com.google.android.exoplayer2.upstream.Allocator)\l  (r5 I:com.google.android.exoplayer2.upstream.Allocation)\l com.google.android.exoplayer2.upstream.Allocator.release(com.google.android.exoplayer2.upstream.Allocation):void type: INTERFACE \l0x002a: ARITH  (r3 I:int A[D('i' int)]) = (r3 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IGET  (r5 I:java.util.concurrent.LinkedBlockingDeque\<com.google.android.exoplayer2.upstream.Allocation\>) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dataQueue java.util.concurrent.LinkedBlockingDeque \l0x002f: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.concurrent.LinkedBlockingDeque) java.util.concurrent.LinkedBlockingDeque.peekLast():java.lang.Object type: VIRTUAL \l0x0033: CHECK_CAST  (r5 I:com.google.android.exoplayer2.upstream.Allocation) = (com.google.android.exoplayer2.upstream.Allocation) (r5 I:?[OBJECT, ARRAY]) \l0x0035: IPUT  \l  (r5 I:com.google.android.exoplayer2.upstream.Allocation)\l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocation com.google.android.exoplayer2.upstream.Allocation \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allocationOffset' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IGET  (r2 I:int A[D('allocationOffset' int)]) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocationLength int \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: IPUT  \l  (r2 I:int A[D('allocationOffset' int)])\l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocationOffset int \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.DefaultTrackOutput.dropUpstreamFrom((r9 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('absolutePosition' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x003b: r2 'allocationOffset' int\l  0x0016\-0x003d: r0 'allocationDiscardCount' int\l  0x0009\-0x003d: r1 'allocationIndex' int\l  0x001b\-0x003d: r3 'i' int\l  0x0005\-0x003d: r4 'relativePosition' int\l  ?\-0x003d: r10 'absolutePosition' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

