digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.sampleMetadata(JIII[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.pendingFormatAdjustment boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.google.android.exoplayer2.Format) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastUnadjustedFormat com.google.android.exoplayer2.Format \l0x0006: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.format(com.google.android.exoplayer2.Format):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r0 I:boolean) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.startWriteOperation():boolean type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.infoQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue \l0x0011: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l  (r10 I:long A[D('timeUs' long)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSampleTimestamp(long):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|SYNTHETIC\lSplitter:B:7:0x0015\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0015\l|0x0015: IGET  (r0 I:boolean) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.pendingSplice boolean A[Catch:\{ all \-\> 0x0043 \}, TRY_ENTER]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002c A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char] A[D('flags' int)]) & (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0025 A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.infoQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[Catch:\{ all \-\> 0x0043 \}]\l0x001f: INVOKE  (r0 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l  (r10 I:long A[D('timeUs' long)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.attemptSplice(long):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0043 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0029 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|SYNTHETIC\lSplitter:B:17:0x002a\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x002a\l|0x002a: IPUT  \l  (r0 I:boolean)\l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.pendingSplice boolean A[Catch:\{ all \-\> 0x0043 \}, TRY_ENTER]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|0x002c: IGET  (r0 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.sampleOffsetUs long A[Catch:\{ all \-\> 0x0043 \}]\l0x002e: ARITH  (r10 I:long A[D('timeUs' long)]) = (r10 I:long A[D('timeUs' long)]) + (r0 I:long) A[Catch:\{ all \-\> 0x0043 \}]\l0x002f: IGET  (r0 I:long) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesWritten long A[Catch:\{ all \-\> 0x0043 \}]\l0x0031: CAST  (r2 I:long) = (long) (r13 I:int A[D('size' int)]) A[Catch:\{ all \-\> 0x0043 \}]\l0x0032: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) A[Catch:\{ all \-\> 0x0043 \}]\l0x0033: CAST  (r2 I:long) = (long) (r14 I:int A[D('offset' int)]) A[Catch:\{ all \-\> 0x0043 \}]\l0x0034: ARITH  (r4 I:long) = (r0 I:long) \- (r2 I:long) A[Catch:\{ all \-\> 0x0043 \}]\l0x0036: IGET  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue) = \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.infoQueue com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue A[Catch:\{ all \-\> 0x0043 \}]\l0x0038: MOVE  (r1 I:?[long, double]) = (r10 I:?[long, double] A[D('timeUs' long)]) A[Catch:\{ all \-\> 0x0043 \}]\l0x0039: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)])\l A[Catch:\{ all \-\> 0x0043 \}]\l0x003a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)])\l A[Catch:\{ all \-\> 0x0043 \}]\l0x003b: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY] A[D('encryptionKey' byte[])]) A[Catch:\{ all \-\> 0x0043 \}]\l0x003c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$InfoQueue)\l  (r1 I:long)\l  (r3 I:int)\l  (r4 I:long A[D('absoluteOffset' long)])\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.InfoQueue.commitSample(long, int, long, int, byte[]):void type: VIRTUAL A[Catch:\{ all \-\> 0x0043 \}, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|ExcHandler: all null\lSplitter:B:7:0x0015\l|0x0043: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|0x0044: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.DefaultTrackOutput.sampleMetadata((r9 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:byte[] A[D('encryptionKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0036\-0x0043: r4 'absoluteOffset' long\l  ?\-0x0047: r10 'timeUs' long\l  ?\-0x0047: r12 'flags' int\l  ?\-0x0047: r13 'size' int\l  ?\-0x0047: r14 'offset' int\l  ?\-0x0047: r15 'encryptionKey' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_21;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_6;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

