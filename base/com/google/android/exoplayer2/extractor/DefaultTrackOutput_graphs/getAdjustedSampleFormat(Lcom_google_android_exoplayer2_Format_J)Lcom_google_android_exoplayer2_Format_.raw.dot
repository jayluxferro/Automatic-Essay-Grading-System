digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.getAdjustedSampleFormat(Lcom\/google\/android\/exoplayer2\/Format;J)Lcom\/google\/android\/exoplayer2\/Format;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('format' com.google.android.exoplayer2.Format)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_L  (r0 I:int) = (r6 I:long A[D('sampleOffsetUs' long)]), (r0 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:long) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.subsampleOffsetUs long \l0x000c: CONST  (r2 I:?[long, double]) = \l  (9223372036854775807(0x7fffffffffffffff, double:NaN) ?[long, double])\l \l0x0011: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r0 I:long) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.subsampleOffsetUs long \l0x0017: ARITH  (r0 I:long) = (r0 I:long) + (r6 I:long A[D('sampleOffsetUs' long)]) \l0x0018: INVOKE  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)]) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l  (r0 I:long)\l com.google.android.exoplayer2.Format.copyWithSubsampleOffsetUs(long):com.google.android.exoplayer2.Format type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.Format com.google.android.exoplayer2.extractor.DefaultTrackOutput.getAdjustedSampleFormat((r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('sampleOffsetUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0003: r5 'format' com.google.android.exoplayer2.Format\l  0x0004\-0x001c: r5 'format' com.google.android.exoplayer2.Format\l  ?\-0x001c: r6 'sampleOffsetUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_2;
}

