digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(JLjava\/nio\/ByteBuffer;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r2 I:?[int, byte, short, char] A[D('remaining' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r8 I:long A[D('absolutePosition' long)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dropDownstreamTo(long):void type: DIRECT \l0x0006: IGET  (r4 I:long) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesDropped long \l0x0008: ARITH  (r4 I:long) = (r8 I:long A[D('absolutePosition' long)]) \- (r4 I:long) \l0x000a: CAST  (r1 I:int) = (int) (r4 I:long) \l0x000b: IGET  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocationLength int \l0x000d: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int A[D('positionInAllocation' int)]) \l0x000e: INVOKE  (r3 I:int) = (r2 I:int A[D('remaining' int)]), (r4 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0012: IGET  (r4 I:java.util.concurrent.LinkedBlockingDeque\<com.google.android.exoplayer2.upstream.Allocation\>) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dataQueue java.util.concurrent.LinkedBlockingDeque \l0x0014: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.concurrent.LinkedBlockingDeque) java.util.concurrent.LinkedBlockingDeque.peek():java.lang.Object type: VIRTUAL \l0x0018: CHECK_CAST  (r0 I:com.google.android.exoplayer2.upstream.Allocation) = (com.google.android.exoplayer2.upstream.Allocation) (r0 I:?[OBJECT, ARRAY]) \l0x001a: IGET  (r4 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.upstream.Allocation A[D('allocation' com.google.android.exoplayer2.upstream.Allocation)])\l com.google.android.exoplayer2.upstream.Allocation.data byte[] \l0x001c: INVOKE  (r5 I:int) = \l  (r0 I:com.google.android.exoplayer2.upstream.Allocation A[D('allocation' com.google.android.exoplayer2.upstream.Allocation)])\l  (r1 I:int A[D('positionInAllocation' int)])\l com.google.android.exoplayer2.upstream.Allocation.translateOffset(int):int type: VIRTUAL \l0x0020: INVOKE  \l  (r10 I:java.nio.ByteBuffer A[D('target' java.nio.ByteBuffer)])\l  (r4 I:byte[])\l  (r5 I:int)\l  (r3 I:int A[D('toCopy' int)])\l java.nio.ByteBuffer.put(byte[], int, int):java.nio.ByteBuffer type: VIRTUAL \l0x0023: CAST  (r4 I:long) = (long) (r3 I:int A[D('toCopy' int)]) \l0x0024: ARITH  (r8 I:long A[D('absolutePosition' long)]) = (r8 I:long A[D('absolutePosition' long)]) + (r4 I:long) \l0x0025: ARITH  (r2 I:int A[D('remaining' int)]) = (r2 I:int A[D('remaining' int)]) \- (r3 I:int A[D('toCopy' int)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData((r7 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('absolutePosition' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.nio.ByteBuffer A[D('target' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x0027: r0 'allocation' com.google.android.exoplayer2.upstream.Allocation\l  0x000b\-0x0027: r1 'positionInAllocation' int\l  0x0012\-0x0027: r3 'toCopy' int\l  0x0001\-0x0027: r2 'remaining' int\l  ?\-0x0027: r8 'absolutePosition' long\l  ?\-0x0027: r10 'target' java.nio.ByteBuffer\l  ?\-0x0027: r11 'length' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

