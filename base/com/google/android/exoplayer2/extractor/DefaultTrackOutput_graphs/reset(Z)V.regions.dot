digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.reset(Z)V" {
subgraph cluster_Region_1232751702 {
label = "R(4:0|(1:2)(1:6)|3|(1:(1:5))) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger r3 = r4.state\l}"];
subgraph cluster_IfRegion_1033634878 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5 == true) goto L_0x0005\l}"];
subgraph cluster_Region_1917091434 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|r1 = 0\l}"];
}
subgraph cluster_Region_85090664 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|r1 = 2\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v4 int) binds: [B:6:0x0018, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = r3.getAndSet(r1)\lclearSampleData()\lr4.infoQueue.resetLargestParsedTimestamps()\l}"];
subgraph cluster_Region_1591843471 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_303851771 {
label = "IF [B:4:0x0012] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r0 == 2) goto L_0x0014\l}"];
subgraph cluster_Region_1011045239 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|r4.downstreamFormat = null\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.DefaultTrackOutput.reset((r4v0 'this' com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r5v0 'enable' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_6 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_7;
}

