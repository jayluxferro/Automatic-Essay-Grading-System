digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.sampleData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;IZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r3 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.startWriteOperation():boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.skip(int):int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesSkipped' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowEndOfInput' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bytesSkipped' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r1 I:int A[D('bytesSkipped' int)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: NEW_INSTANCE  (r2 I:java.io.EOFException) =  java.io.EOFException \l0x0013: INVOKE  (r2 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\lSplitter:B:9:0x0017\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0017\l|0x0017: INVOKE  (r8 I:int A[D('length' int)]) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r8 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.prepareForAppend(int):int type: DIRECT A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x001b: IGET  (r3 I:com.google.android.exoplayer2.upstream.Allocation) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocation com.google.android.exoplayer2.upstream.Allocation A[Catch:\{ all \-\> 0x003a \}]\l0x001d: IGET  (r3 I:byte[]) = (r3 I:com.google.android.exoplayer2.upstream.Allocation) com.google.android.exoplayer2.upstream.Allocation.data byte[] A[Catch:\{ all \-\> 0x003a \}]\l0x001f: IGET  (r4 I:com.google.android.exoplayer2.upstream.Allocation) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocation com.google.android.exoplayer2.upstream.Allocation A[Catch:\{ all \-\> 0x003a \}]\l0x0021: IGET  (r5 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocationOffset int A[Catch:\{ all \-\> 0x003a \}]\l0x0023: INVOKE  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.upstream.Allocation)\l  (r5 I:int)\l com.google.android.exoplayer2.upstream.Allocation.translateOffset(int):int type: VIRTUAL A[Catch:\{ all \-\> 0x003a \}]\l0x0027: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r3 I:byte[])\l  (r4 I:int)\l  (r8 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.read(byte[], int, int):int type: INTERFACE A[Catch:\{ all \-\> 0x003a \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesAppended' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowEndOfInput' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l0x0032: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|SYNTHETIC\lSplitter:B:15:0x0034\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0034\l|0x0034: NEW_INSTANCE  (r2 I:java.io.EOFException) =  java.io.EOFException A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x0036: INVOKE  (r2 I:java.io.EOFException) java.io.EOFException.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x003a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003a \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|ExcHandler: all null\lSplitter:B:9:0x0017\l|0x003a: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|0x003e: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|SYNTHETIC\lSplitter:B:21:0x003f\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x003f\l|0x003f: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocationOffset int A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x0041: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('bytesAppended' int)]) A[Catch:\{ all \-\> 0x003a \}]\l0x0042: IPUT  \l  (r2 I:int)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.lastAllocationOffset int A[Catch:\{ all \-\> 0x003a \}]\l0x0044: IGET  (r2 I:long) = \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesWritten long A[Catch:\{ all \-\> 0x003a \}]\l0x0046: CAST  (r4 I:long) = (long) (r0 I:int A[D('bytesAppended' int)]) A[Catch:\{ all \-\> 0x003a \}]\l0x0047: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) A[Catch:\{ all \-\> 0x003a \}]\l0x0048: IPUT  \l  (r2 I:long)\l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesWritten long A[Catch:\{ all \-\> 0x003a \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.endWriteOperation():void type: DIRECT \l0x004d: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bytesAppended' int)])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.DefaultTrackOutput.sampleData((r6 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r7 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('allowEndOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000b\-0x0010: r1 'bytesSkipped' int\l  0x0011\-0x0017: r1 'bytesSkipped' int\l  0x002b\-0x003a: r0 'bytesAppended' int\l  0x003f\-0x004e: r0 'bytesAppended' int\l  ?\-0x004e: r7 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x004e: r8 'length' int\l  ?\-0x004e: r9 'allowEndOfInput' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_18;
Node_10 -> Node_18;
Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_6;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_22 -> Node_18;
Node_23 -> Node_6;
}

