digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.readEncryptionData(Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;Lcom\/google\/android\/exoplayer2\/extractor\/DefaultTrackOutput$BufferExtrasHolder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x0002: IGET  (r12 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.offset long \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0008: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.reset(int):void type: VIRTUAL \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000e: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0010: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0012: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0015: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r12 I:long A[D('offset' long)])\l  (r2 I:byte[])\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(long, byte[], int):void type: DIRECT \l0x0018: CONST  (r6 I:?[long, double]) = (1 ?[long, double]) \l0x001a: ARITH  (r12 I:long A[D('offset' long)]) = (r12 I:long A[D('offset' long)]) + (r6 I:long) \l0x001b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x001d: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x001f: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0021: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: AGET  (r14 I:byte A[IMMUTABLE_TYPE]) = \l  (r2 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l0x0024: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r14 I:?[int, boolean, short, byte, char] A[D('signalByte' byte)]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00c0 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0028|0x0028: CONST  (r16 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r14 I:?[int, boolean, short, byte, char] A[D('signalByte' byte)]) & (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) \l0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x002e: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x0030: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.iv byte[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x0036: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x0038: CONST  (r6 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x003a: NEW_ARRAY  (r6 I:byte[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x003c: IPUT  \l  (r6 I:byte[])\l  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo)\l com.google.android.exoplayer2.decoder.CryptoInfo.iv byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x0040: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x0042: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.iv byte[] \l0x0044: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0046: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r12 I:long A[D('offset' long)])\l  (r2 I:byte[])\l  (r11 I:int A[D('ivSize' int)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(long, byte[], int):void type: DIRECT \l0x0049: CAST  (r6 I:long) = (long) (r11 I:int A[D('ivSize' int)]) \l0x004a: ARITH  (r12 I:long A[D('offset' long)]) = (r12 I:long A[D('offset' long)]) + (r6 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004b|0x004b: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('subsampleEncryption' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00c4 \l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004f: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0051: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0052: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.reset(int):void type: VIRTUAL \l0x0055: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0057: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0059: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x005b: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x005c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r12 I:long A[D('offset' long)])\l  (r2 I:byte[])\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(long, byte[], int):void type: DIRECT \l0x0061: CONST  (r6 I:?[long, double]) = (2 ?[long, double]) \l0x0063: ARITH  (r12 I:long A[D('offset' long)]) = (r12 I:long A[D('offset' long)]) + (r6 I:long) \l0x0064: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0066: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0068: INVOKE  (r3 I:int) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x006c|0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x006e: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x0070: IGET  (r4 I:int[]) = (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.numBytesOfClearData int[] \l}"];
Node_10 [shape=record,label="{10\:\ 0x0072|0x0072: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clearDataSizes' int[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0077 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0074|0x0074: ARRAY_LENGTH  (r2 I:int) = (r4 I:?[] A[D('clearDataSizes' int[])]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0075|0x0075: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char] A[D('subsampleCount' int)])  \-\> B:14:0x0079 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0077|0x0077: NEW_ARRAY  (r4 I:int[] A[D('clearDataSizes' int[])]) = (r3 I:int A[D('subsampleCount' int), IMMUTABLE_TYPE]) type: int[] \l}"];
Node_14 [shape=record,label="{14\:\ 0x0079|0x0079: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x007b: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x007d: IGET  (r5 I:int[]) = (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.numBytesOfEncryptedData int[] \l}"];
Node_15 [shape=record,label="{15\:\ 0x007f|0x007f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('encryptedDataSizes' int[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0084 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0081|0x0081: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[] A[D('encryptedDataSizes' int[])]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0082|0x0082: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char] A[D('subsampleCount' int)])  \-\> B:19:0x0086 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0084|0x0084: NEW_ARRAY  (r5 I:int[] A[D('encryptedDataSizes' int[])]) = (r3 I:int A[D('subsampleCount' int), IMMUTABLE_TYPE]) type: int[] \l}"];
Node_19 [shape=record,label="{19\:\ 0x0086|0x0086: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('subsampleEncryption' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00c6 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0088|0x0088: ARITH  (r15 I:int) = (r3 I:int A[D('subsampleCount' int)]) * (6 int) \l0x008a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008c: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x008e: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r15 I:int A[D('subsampleDataLength' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.reset(int):void type: VIRTUAL \l0x0091: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0093: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0095: IGET  (r2 I:byte[]) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0097: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0099: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r12 I:long A[D('offset' long)])\l  (r2 I:byte[])\l  (r15 I:int A[D('subsampleDataLength' int)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(long, byte[], int):void type: DIRECT \l0x009c: CAST  (r6 I:long) = (long) (r15 I:int A[D('subsampleDataLength' int)]) \l0x009d: ARITH  (r12 I:long A[D('offset' long)]) = (r12 I:long A[D('offset' long)]) + (r6 I:long) \l0x009e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a0: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x00a2: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a3: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x00a6: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a7|0x00a7: IF  (r10 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char] A[D('subsampleCount' int)])  \-\> B:26:0x00dd \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a9|0x00a9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ab: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x00ad: INVOKE  (r2 I:int) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x00b1: APUT  \l  (r4 I:?[int, float][] A[D('clearDataSizes' int[])])\l  (r10 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l0x00b3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00b5: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x00b7: INVOKE  (r2 I:int) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedIntToInt():int type: VIRTUAL \l0x00bb: APUT  \l  (r5 I:?[int, float][] A[D('encryptedDataSizes' int[])])\l  (r10 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l0x00bd: ARITH  (r10 I:int A[D('i' int)]) = (r10 I:int A[D('i' int)]) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x00c0|0x00c0: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('subsampleEncryption' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c4|0x00c4: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c6|0x00c6: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c7: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c8: APUT  \l  (r4 I:?[int, float][] A[D('clearDataSizes' int[])])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l0x00ca: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00cb: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x00cd: IGET  (r6 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.size int \l0x00cf: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x00d1: IGET  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.offset long \l0x00d3: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x00d5: ARITH  (r18 I:long) = (r12 I:long A[D('offset' long)]) \- (r18 I:long) \l0x00d7: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l0x00d9: CAST  (r7 I:int) = (int) (r0 I:long) \l0x00da: ARITH  (r6 I:int) = (r6 I:int) \- (r7 I:int) \l0x00db: APUT  \l  (r5 I:?[int, float][] A[D('encryptedDataSizes' int[])])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[int, float])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00dd|0x00dd: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x00df: IGET  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x00e1: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x00e3: IGET  (r6 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.encryptionKeyId byte[] \l0x00e5: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer)])\l \l0x00e7: IGET  (r7 I:com.google.android.exoplayer2.decoder.CryptoInfo) = \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.cryptoInfo com.google.android.exoplayer2.decoder.CryptoInfo \l0x00e9: IGET  (r7 I:byte[]) = (r7 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.iv byte[] \l0x00eb: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00ec: INVOKE  \l  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo)\l  (r3 I:int A[D('subsampleCount' int)])\l  (r4 I:int[] A[D('clearDataSizes' int[])])\l  (r5 I:int[] A[D('encryptedDataSizes' int[])])\l  (r6 I:byte[])\l  (r7 I:byte[])\l  (r8 I:int)\l com.google.android.exoplayer2.decoder.CryptoInfo.set(int, int[], int[], byte[], byte[], int):void type: VIRTUAL \l0x00ef: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x00f1: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.offset long \l0x00f3: ARITH  (r6 I:long) = (r12 I:long A[D('offset' long)]) \- (r6 I:long) \l0x00f5: CAST  (r9 I:int) = (int) (r6 I:long) \l0x00f6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x00f8: IGET  (r6 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.offset long \l0x00fa: CAST  (r0 I:long) = (long) (r9 I:int A[D('bytesRead' int)]) \l0x00fb: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x00fd: ARITH  (r6 I:long) = (r6 I:long) + (r18 I:long) \l0x00ff: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x0101: IPUT  \l  (r6 I:long)\l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.offset long \l0x0103: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x0105: IGET  (r2 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.size int \l0x0107: ARITH  (r2 I:int) = (r2 I:int) \- (r9 I:int A[D('bytesRead' int)]) \l0x0108: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)])\l \l0x010a: IPUT  \l  (r2 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.BufferExtrasHolder.size int \l}"];
Node_27 [shape=record,label="{27\:\ 0x010c|0x010c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.DefaultTrackOutput.readEncryptionData((r20 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r21 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder A[D('extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x006c\-0x00c0: r3 'subsampleCount' int\l  0x0072\-0x00c0: r4 'clearDataSizes' int[]\l  0x007f\-0x00c0: r5 'encryptedDataSizes' int[]\l  0x00a7\-0x00c0: r10 'i' int\l  0x002c\-0x00c0: r11 'ivSize' int\l  0x008a\-0x00c0: r15 'subsampleDataLength' int\l  0x002a\-0x00c0: r16 'subsampleEncryption' boolean\l  0x00c5\-0x010c: r3 'subsampleCount' int\l  0x00c6\-0x010c: r4 'clearDataSizes' int[]\l  0x00c6\-0x010c: r5 'encryptedDataSizes' int[]\l  0x00f6\-0x010c: r9 'bytesRead' int\l  0x00c4\-0x010c: r11 'ivSize' int\l  0x0004\-0x010c: r12 'offset' long\l  0x0024\-0x010c: r14 'signalByte' byte\l  0x00c4\-0x010c: r16 'subsampleEncryption' boolean\l  ?\-0x010c: r21 'buffer' com.google.android.exoplayer2.decoder.DecoderInputBuffer\l  ?\-0x010c: r22 'extrasHolder' com.google.android.exoplayer2.extractor.DefaultTrackOutput$BufferExtrasHolder\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_21;
Node_23 -> Node_3;
Node_24 -> Node_9;
Node_25 -> Node_26;
Node_26 -> Node_27;
}

