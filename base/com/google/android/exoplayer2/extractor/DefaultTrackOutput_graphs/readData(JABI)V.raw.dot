digraph "CFG forcom.google.android.exoplayer2.extractor.DefaultTrackOutput.readData(J[BI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r1 I:?[int, byte, short, char] A[D('bytesRead' int)]) \>= (r11 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:3:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l  (r8 I:long A[D('absolutePosition' long)])\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dropDownstreamTo(long):void type: DIRECT \l0x0006: IGET  (r4 I:long) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.totalBytesDropped long \l0x0008: ARITH  (r4 I:long) = (r8 I:long A[D('absolutePosition' long)]) \- (r4 I:long) \l0x000a: CAST  (r2 I:int) = (int) (r4 I:long) \l0x000b: ARITH  (r4 I:int) = (r11 I:int A[D('length' int)]) \- (r1 I:int A[D('bytesRead' int)]) \l0x000d: IGET  (r5 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.allocationLength int \l0x000f: ARITH  (r5 I:int) = (r5 I:int) \- (r2 I:int A[D('positionInAllocation' int)]) \l0x0010: INVOKE  (r3 I:int) = (r4 I:int), (r5 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0014: IGET  (r4 I:java.util.concurrent.LinkedBlockingDeque\<com.google.android.exoplayer2.upstream.Allocation\>) = \l  (r7 I:com.google.android.exoplayer2.extractor.DefaultTrackOutput)\l com.google.android.exoplayer2.extractor.DefaultTrackOutput.dataQueue java.util.concurrent.LinkedBlockingDeque \l0x0016: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.concurrent.LinkedBlockingDeque) java.util.concurrent.LinkedBlockingDeque.peek():java.lang.Object type: VIRTUAL \l0x001a: CHECK_CAST  (r0 I:com.google.android.exoplayer2.upstream.Allocation) = (com.google.android.exoplayer2.upstream.Allocation) (r0 I:?[OBJECT, ARRAY]) \l0x001c: IGET  (r4 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.upstream.Allocation A[D('allocation' com.google.android.exoplayer2.upstream.Allocation)])\l com.google.android.exoplayer2.upstream.Allocation.data byte[] \l0x001e: INVOKE  (r5 I:int) = \l  (r0 I:com.google.android.exoplayer2.upstream.Allocation A[D('allocation' com.google.android.exoplayer2.upstream.Allocation)])\l  (r2 I:int A[D('positionInAllocation' int)])\l com.google.android.exoplayer2.upstream.Allocation.translateOffset(int):int type: VIRTUAL \l0x0022: INVOKE  \l  (r4 I:java.lang.Object)\l  (r5 I:int)\l  (r10 I:java.lang.Object A[D('target' byte[])])\l  (r1 I:int A[D('bytesRead' int)])\l  (r3 I:int A[D('toCopy' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0025: CAST  (r4 I:long) = (long) (r3 I:int A[D('toCopy' int)]) \l0x0026: ARITH  (r8 I:long A[D('absolutePosition' long)]) = (r8 I:long A[D('absolutePosition' long)]) + (r4 I:long) \l0x0027: ARITH  (r1 I:int A[D('bytesRead' int)]) = (r1 I:int A[D('bytesRead' int)]) + (r3 I:int A[D('toCopy' int)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.DefaultTrackOutput.readData((r7 'this' I:com.google.android.exoplayer2.extractor.DefaultTrackOutput A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('absolutePosition' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001c\-0x0029: r0 'allocation' com.google.android.exoplayer2.upstream.Allocation\l  0x000b\-0x0029: r2 'positionInAllocation' int\l  0x0014\-0x0029: r3 'toCopy' int\l  0x0001\-0x0029: r1 'bytesRead' int\l  ?\-0x0029: r8 'absolutePosition' long\l  ?\-0x0029: r10 'target' byte[]\l  ?\-0x0029: r11 'length' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

