digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.skipShortTermRefPicSets(Lcom\/google\/android\/exoplayer2\/util\/ParsableNalUnitBitArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  (r5 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r7 I:?[int, byte, short, char] A[D('stRpsIdx' int)]) \>= (r5 I:?[int, byte, short, char] A[D('numShortTermRefPicSets' int)])  \-\> B:18:0x004c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stRpsIdx' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:boolean A[D('interRefPicSetPredictionFlag' boolean)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('interRefPicSetPredictionFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x0015: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char] A[D('j' int)]) \> (r6 I:?[int, byte, short, char] A[D('previousNumDeltaPocs' int)])  \-\> B:17:0x0049 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r8 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: ARITH  (r2 I:int A[D('j' int)]) = (r2 I:int A[D('j' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: INVOKE  (r3 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x002b: INVOKE  (r4 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x002f: ARITH  (r6 I:int A[D('previousNumDeltaPocs' int)]) = (r3 I:int A[D('numNegativePics' int)]) + (r4 I:int A[D('numPositivePics' int)]) \l0x0031: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char] A[D('numNegativePics' int)])  \-\> B:14:0x003d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0037: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x003a: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char] A[D('numPositivePics' int)])  \-\> B:17:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0043: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l  (r9 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x0046: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: ARITH  (r7 I:int A[D('stRpsIdx' int)]) = (r7 I:int A[D('stRpsIdx' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.ts.H265Reader.skipShortTermRefPicSets((r10 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0027: r2 'j' int\l  0x0032\-0x0049: r0 'i' int\l  0x002b\-0x0049: r3 'numNegativePics' int\l  0x002f\-0x0049: r4 'numPositivePics' int\l  0x0006\-0x004c: r1 'interRefPicSetPredictionFlag' boolean\l  0x0005\-0x004c: r5 'numShortTermRefPicSets' int\l  0x0007\-0x004c: r6 'previousNumDeltaPocs' int\l  0x0008\-0x004c: r7 'stRpsIdx' int\l  ?\-0x004c: r10 'bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_12;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_1;
}

