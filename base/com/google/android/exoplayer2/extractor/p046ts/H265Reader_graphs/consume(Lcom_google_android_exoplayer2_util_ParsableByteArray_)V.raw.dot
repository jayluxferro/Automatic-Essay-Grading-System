digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.consume(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r14 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x000a: INVOKE  (r11 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0010: IGET  (r2 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.totalBytesWritten long \l0x0016: INVOKE  (r3 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x001a: CAST  (r0 I:long) = (long) (r3 I:int) \l0x001b: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x001d: ARITH  (r8 I:long) = (r8 I:long) + (r16 I:long) \l0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0021: IPUT  \l  (r8 I:long)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.totalBytesWritten long \l0x0023: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0025: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0027: INVOKE  (r7 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x002b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x002d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r7 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0030|0x0030: IF  (r14 I:?[int, byte, short, char] A[D('offset' int)]) \>= (r11 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:0:0x0000 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0034: IGET  (r3 I:boolean[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.prefixFlags boolean[] \l0x0036: INVOKE  (r12 I:int) = \l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r14 I:int A[D('offset' int)])\l  (r11 I:int A[D('limit' int)])\l  (r3 I:boolean[])\l com.google.android.exoplayer2.util.NalUnitUtil.findNalUnit(byte[], int, int, boolean[]):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nalUnitOffset' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limit' int)])  \-\> B:8:0x0042 \l}"];
Node_6 [shape=record,label="{6\:\ 0x003c|0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x003e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r14 I:int A[D('offset' int)])\l  (r11 I:int A[D('limit' int)])\l com.google.android.exoplayer2.extractor.ts.H265Reader.nalUnitData(byte[], int, int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: INVOKE  (r13 I:int) = \l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r12 I:int A[D('nalUnitOffset' int)])\l com.google.android.exoplayer2.util.NalUnitUtil.getH265NalUnitType(byte[], int):int type: STATIC \l0x0046: ARITH  (r10 I:int) = (r12 I:int A[D('nalUnitOffset' int)]) \- (r14 I:int A[D('offset' int)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: IF  (r10 I:?[int, byte, short, char] A[D('lengthToNalUnit' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x004f \l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x004c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r14 I:int A[D('offset' int)])\l  (r12 I:int A[D('nalUnitOffset' int)])\l com.google.android.exoplayer2.extractor.ts.H265Reader.nalUnitData(byte[], int, int):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: ARITH  (r6 I:int) = (r11 I:int A[D('limit' int)]) \- (r12 I:int A[D('nalUnitOffset' int)]) \l0x0051: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0053: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.totalBytesWritten long \l0x0055: CAST  (r0 I:long) = (long) (r6 I:int A[D('bytesWrittenPastPosition' int)]) \l0x0056: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x0058: ARITH  (r4 I:long) = (r8 I:long) \- (r16 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x005a|0x005a: IF  (r10 I:?[int, byte, short, char] A[D('lengthToNalUnit' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0073 \l}"];
Node_13 [shape=record,label="{13\:\ 0x005c|0x005c: NEG  (r7 I:int) = (r10 I:int A[D('lengthToNalUnit' int)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005d|0x005d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x005f: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.pesTimeUs long \l0x0061: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0063: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l  (r4 I:long A[D('absolutePosition' long)])\l  (r6 I:int A[D('bytesWrittenPastPosition' int)])\l  (r7 I:int)\l  (r8 I:long)\l com.google.android.exoplayer2.extractor.ts.H265Reader.endNalUnit(long, int, int, long):void type: DIRECT \l0x0066: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0068: IGET  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.pesTimeUs long \l0x006a: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x006c: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalUnitType' int)])\l \l0x006d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader)\l  (r4 I:long A[D('absolutePosition' long)])\l  (r6 I:int A[D('bytesWrittenPastPosition' int)])\l  (r7 I:int)\l  (r8 I:long)\l com.google.android.exoplayer2.extractor.ts.H265Reader.startNalUnit(long, int, int, long):void type: DIRECT \l0x0070: ARITH  (r14 I:int A[D('offset' int)]) = (r12 I:int A[D('nalUnitOffset' int)]) + (3 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0073|0x0073: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H265Reader.consume((r18 'this' I:com.google.android.exoplayer2.extractor.ts.H265Reader A[IMMUTABLE_TYPE, THIS]), (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x0041: r2 'dataArray' byte[]\l  0x000e\-0x0041: r11 'limit' int\l  0x003a\-0x0041: r12 'nalUnitOffset' int\l  0x000a\-0x0041: r14 'offset' int\l  0x0042\-0x0074: r2 'dataArray' byte[]\l  0x005a\-0x0074: r4 'absolutePosition' long\l  0x0051\-0x0074: r6 'bytesWrittenPastPosition' int\l  0x0048\-0x0074: r10 'lengthToNalUnit' int\l  0x0042\-0x0074: r11 'limit' int\l  0x0042\-0x0074: r12 'nalUnitOffset' int\l  0x0046\-0x0074: r13 'nalUnitType' int\l  0x0042\-0x0074: r14 'offset' int\l  ?\-0x0074: r19 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_0;
Node_3 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_3;
Node_15 -> Node_14;
}

