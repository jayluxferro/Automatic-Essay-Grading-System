digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.skipScalingList(Lcom\/google\/android\/exoplayer2\/util\/ParsableNalUnitBitArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, byte, short, char] A[D('sizeId' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:20:0x0037 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char] A[D('matrixId' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:19:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  (r4 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sizeId' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: ARITH  (r2 I:int A[D('matrixId' int)]) = (r2 I:int A[D('matrixId' int)]) + (r4 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x001a: ARITH  (r7 I:int) = (r3 I:int A[D('sizeId' int)]) \<\< (1 int) \l0x001c: ARITH  (r7 I:int) = (r7 I:int) + (4 int) \l0x001e: ARITH  (r7 I:int) = (r6 I:int) \<\< (r7 I:int) \l0x0020: INVOKE  (r0 I:int) = (r4 I:int), (r7 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IF  (r3 I:?[int, byte, short, char] A[D('sizeId' int)]) \<= (r6 I:?[int, byte, short, char])  \-\> B:15:0x0029 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r0 I:?[int, byte, short, char] A[D('coefNum' int)])  \-\> B:9:0x0013 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l0x002f: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: ARITH  (r3 I:int A[D('sizeId' int)]) = (r3 I:int A[D('sizeId' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0037|0x0037: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.ts.H265Reader.skipScalingList((r8 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0024\-0x0032: r0 'coefNum' int\l  0x002a\-0x0032: r1 'i' int\l  0x0007\-0x0037: r2 'matrixId' int\l  0x0003\-0x0037: r3 'sizeId' int\l  ?\-0x0037: r8 'bitArray' com.google.android.exoplayer2.util.ParsableNalUnitBitArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_9;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_16;
Node_18 -> Node_11;
Node_19 -> Node_1;
}

