digraph "CFG forcom.google.android.exoplayer2.extractor.ts.MpegAudioReader.readHeaderRemainder(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0004: IGET  (r1 I:int) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0006: ARITH  (r1 I:int) = (4 int) \- (r1 I:int) \l0x0008: INVOKE  (r11 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000c: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x000e: IGET  (r0 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0010: IGET  (r1 I:int) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0012: INVOKE  \l  (r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:byte[])\l  (r1 I:int)\l  (r11 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x0015: IGET  (r0 I:int) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0017: ARITH  (r0 I:int) = (r0 I:int) + (r11 I:int A[D('bytesToRead' int)]) \l0x0018: IPUT  \l  (r0 I:int)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x001a: IGET  (r0 I:int) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x001c: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0022: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0026: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0028: INVOKE  (r0 I:int) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.readInt():int type: VIRTUAL \l0x002c: IGET  (r1 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x002e: INVOKE  (r13 I:boolean) = \l  (r0 I:int)\l  (r1 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader(int, com.google.android.exoplayer2.extractor.MpegAudioHeader):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('parsedHeader' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: IPUT  \l  (r0 I:int)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0037: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0038: IPUT  \l  (r0 I:int)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.state int \l}"];
Node_6 [shape=record,label="{6\:\ 0x003b|0x003b: IGET  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x003d: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.frameSize int \l0x003f: IPUT  \l  (r0 I:int)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameSize int \l0x0041: IGET  (r0 I:boolean) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.hasOutputFormat boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0079 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: CONST  (r0 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x0048: IGET  (r2 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x004a: IGET  (r2 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.samplesPerFrame int \l0x004c: CAST  (r2 I:long) = (long) (r2 I:int) \l0x004d: ARITH  (r0 I:long) = (r0 I:long) * (r2 I:long) \l0x004e: IGET  (r2 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0050: IGET  (r2 I:int) = \l  (r2 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.sampleRate int \l0x0052: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0053: ARITH  (r0 I:long) = (r0 I:long) \/ (r2 I:long) \l0x0054: IPUT  \l  (r0 I:long)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameDurationUs long \l0x0056: IGET  (r0 I:java.lang.String) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.formatId java.lang.String \l0x0058: IGET  (r1 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x005a: IGET  (r1 I:java.lang.String) = \l  (r1 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.mimeType java.lang.String \l0x005c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x005e: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l0x0060: IGET  (r5 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0062: IGET  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.channels int \l0x0064: IGET  (r6 I:com.google.android.exoplayer2.extractor.MpegAudioHeader) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.header com.google.android.exoplayer2.extractor.MpegAudioHeader \l0x0066: IGET  (r6 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l com.google.android.exoplayer2.extractor.MpegAudioHeader.sampleRate int \l0x0068: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0069: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006a: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006b: IGET  (r10 I:java.lang.String) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.language java.lang.String \l0x006d: INVOKE  (r12 I:com.google.android.exoplayer2.Format) = \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.util.List)\l  (r8 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r9 I:int)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l0x0071: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0073: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r12 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x0076: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0077: IPUT  \l  (r0 I:boolean)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.hasOutputFormat boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0079|0x0079: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x007b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x007f: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0081: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0083: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0084: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0087: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0088: IPUT  \l  (r0 I:int)\l  (r14 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.state int \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.MpegAudioReader.readHeaderRemainder((r14 'this' I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader A[IMMUTABLE_TYPE, THIS]), (r15 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0071\-0x0079: r12 'format' com.google.android.exoplayer2.Format\l  0x000c\-0x008a: r11 'bytesToRead' int\l  0x0032\-0x008a: r13 'parsedHeader' boolean\l  ?\-0x008a: r15 'source' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_2;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_2;
}

