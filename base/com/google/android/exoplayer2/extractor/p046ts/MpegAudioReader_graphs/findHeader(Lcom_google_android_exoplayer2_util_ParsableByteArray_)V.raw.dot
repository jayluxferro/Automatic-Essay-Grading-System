digraph "CFG forcom.google.android.exoplayer2.extractor.ts.MpegAudioReader.findHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: IGET  (r1 I:byte[]) = \l  (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0004: INVOKE  (r5 I:int) = \l  (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0008: INVOKE  (r2 I:int) = \l  (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x000c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startOffset' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char] A[D('endOffset' int)])  \-\> B:17:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0011: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0013: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r8 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.lastByteWasFF boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x001e: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (224(0xe0, float:3.14E\-43) ?[int, float, short, byte, char]) \l0x0020: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (224(0xe0, float:3.14E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IPUT  \l  (r0 I:boolean A[D('byteIsFF' boolean)])\l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.lastByteWasFF boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0042 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: ARITH  (r8 I:int) = (r4 I:int A[D('i' int)]) + (1 int) \l0x002b: INVOKE  \l  (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r8 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x002e: IPUT  \l  (r7 I:boolean)\l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.lastByteWasFF boolean \l0x0030: IGET  (r7 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.headerScratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0032: IGET  (r7 I:byte[]) = (r7 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0034: AGET  (r8 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0036: APUT  \l  (r7 I:byte[] A[IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r8 I:byte A[IMMUTABLE_TYPE])\l \l0x0038: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0039: IPUT  \l  (r7 I:int)\l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x003b: IPUT  \l  (r6 I:int)\l  (r10 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.state int \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: ARITH  (r4 I:int A[D('i' int)]) = (r4 I:int A[D('i' int)]) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: INVOKE  \l  (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r2 I:int A[D('endOffset' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.MpegAudioReader.findHeader((r10 'this' I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0018\-0x003d: r0 'byteIsFF' boolean\l  0x0025\-0x003d: r3 'found' boolean\l  0x0040\-0x0045: r0 'byteIsFF' boolean\l  0x0042\-0x0045: r3 'found' boolean\l  0x0004\-0x0048: r1 'data' byte[]\l  0x000c\-0x0048: r2 'endOffset' int\l  0x000d\-0x0048: r4 'i' int\l  0x0008\-0x0048: r5 'startOffset' int\l  ?\-0x0048: r11 'source' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_14 -> Node_5;
Node_15 -> Node_10;
Node_16 -> Node_1;
Node_17 -> Node_13;
}

