digraph "CFG forcom.google.android.exoplayer2.extractor.ts.MpegAudioReader.readFrameRemainder(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0005: IGET  (r2 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameSize int \l0x0007: IGET  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0009: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x000a: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000e: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0010: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0013: IGET  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0015: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('bytesToRead' int)]) \l0x0016: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0018: IGET  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x001a: IGET  (r2 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0021: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.timeUs long \l0x0023: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0024: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameSize int \l0x0026: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l0x002a: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.timeUs long \l0x002c: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameDurationUs long \l0x002e: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x002f: IPUT  \l  (r2 I:long)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.timeUs long \l0x0031: IPUT  \l  (r6 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.frameBytesRead int \l0x0033: IPUT  \l  (r6 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader)\l com.google.android.exoplayer2.extractor.ts.MpegAudioReader.state int \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.MpegAudioReader.readFrameRemainder((r8 'this' I:com.google.android.exoplayer2.extractor.ts.MpegAudioReader A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0035: r0 'bytesToRead' int\l  ?\-0x0035: r9 'source' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_2;
}

