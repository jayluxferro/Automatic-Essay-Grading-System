digraph "CFG forcom.google.android.exoplayer2.extractor.ts.TsExtractor.PmtReader.readEsInfo(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;I)Lcom\/google\/android\/exoplayer2\/extractor\/ts\/TsPayloadReader$EsInfo;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r5 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0004: ARITH  (r4 I:int) = (r5 I:int A[D('descriptorsStartPosition' int)]) + (r20 I:int A[D('length' int)]) \l0x0006: CONST  (r14 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0007: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r15 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r15 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char] A[D('descriptorsEndPosition' int)])  \-\> B:33:0x00ab \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r3 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0013: INVOKE  (r2 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0017: INVOKE  (r15 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x001b: ARITH  (r13 I:int) = (r15 I:int) + (r2 I:int A[D('descriptorLength' int)]) \l0x001d: CONST  (r15 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  (r10 I:long) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt():long type: VIRTUAL \l0x0024: INVOKE  (r16 I:long) =  com.google.android.exoplayer2.extractor.ts.TsExtractor.access$900():long type: STATIC \l0x0028: CMP_L  (r15 I:int) = (r10 I:long A[D('formatIdentifier' long)]), (r16 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = \l  (129(0x81, float:1.81E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: INVOKE  (r15 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0032: ARITH  (r15 I:int) = (r13 I:int A[D('positionOfNextDescriptor' int)]) \- (r15 I:int) \l0x0034: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0036: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r15 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: INVOKE  (r16 I:long) =  com.google.android.exoplayer2.extractor.ts.TsExtractor.access$1000():long type: STATIC \l0x003e: CMP_L  (r15 I:int) = (r10 I:long A[D('formatIdentifier' long)]), (r16 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0045 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = \l  (135(0x87, float:1.89E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: INVOKE  (r16 I:long) =  com.google.android.exoplayer2.extractor.ts.TsExtractor.access$1100():long type: STATIC \l0x0049: CMP_L  (r15 I:int) = (r10 I:long A[D('formatIdentifier' long)]), (r16 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002e \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = (36 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (106(0x6a, float:1.49E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0057 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = \l  (129(0x81, float:1.81E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|0x0059: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005e \l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|0x005b: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = \l  (135(0x87, float:1.89E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|0x005e: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (123(0x7b, float:1.72E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0060|0x0060: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0065 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = \l  (138(0x8a, float:1.93E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0065|0x0065: CONST  (r15 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0067|0x0067: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0075 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: CONST  (r15 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x006a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x006c: INVOKE  (r15 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r15 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readString(int):java.lang.String type: VIRTUAL \l0x0070: INVOKE  (r12 I:java.lang.String A[D('language' java.lang.String)]) = (r15 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0075|0x0075: CONST  (r15 I:?[int, float, short, byte, char]) = (89 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0077|0x0077: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('descriptorTag' int)]) != (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002e \l}"];
Node_29 [shape=record,label="{29\:\ 0x0079|0x0079: CONST  (r14 I:?[int, float, short, byte, char] A[D('streamType' int)]) = (89 ?[int, float, short, byte, char]) \l0x007b: NEW_INSTANCE  (r7 I:java.util.ArrayList A[D('dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>)]) =  java.util.ArrayList \l0x007d: INVOKE  \l  (r7 I:java.util.ArrayList A[D('dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>)])\l java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x0080|0x0080: INVOKE  (r15 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0084|0x0084: IF  (r15 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char] A[D('positionOfNextDescriptor' int)])  \-\> B:8:0x002e \l}"];
Node_32 [shape=record,label="{32\:\ 0x0086|0x0086: CONST  (r15 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0087: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0089: INVOKE  (r15 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r15 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readString(int):java.lang.String type: VIRTUAL \l0x008d: INVOKE  (r6 I:java.lang.String) = (r15 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0091: INVOKE  (r8 I:int) = \l  (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0095: CONST  (r15 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0096: NEW_ARRAY  (r9 I:byte[]) = (r15 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0098: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0099: CONST  (r16 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x009b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x009d: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:byte[] A[D('initializationData' byte[])])\l  (r15 I:int)\l  (r1 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x00a2: NEW_INSTANCE  (r15 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo) =  com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo \l0x00a4: INVOKE  \l  (r15 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo)\l  (r6 I:java.lang.String A[D('dvbLanguage' java.lang.String)])\l  (r8 I:int A[D('dvbSubtitlingType' int)])\l  (r9 I:byte[] A[D('initializationData' byte[])])\l com.google.android.exoplayer2.extractor.ts.TsPayloadReader.DvbSubtitleInfo.\<init\>(java.lang.String, int, byte[]):void type: DIRECT \l0x00a7: INVOKE  \l  (r7 I:java.util.List A[D('dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>)])\l  (r15 I:java.lang.Object)\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ab|0x00ab: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00ad: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:int A[D('descriptorsEndPosition' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x00b0: NEW_INSTANCE  (r15 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader$EsInfo) =  com.google.android.exoplayer2.extractor.ts.TsPayloadReader$EsInfo \l0x00b2: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x00b4: IGET  (r0 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x00b6: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00b8: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00ba: INVOKE  (r16 I:byte[]) = \l  (r0 I:byte[])\l  (r5 I:int A[D('descriptorsStartPosition' int)])\l  (r4 I:int A[D('descriptorsEndPosition' int)])\l java.util.Arrays.copyOfRange(byte[], int, int):byte[] type: STATIC \l0x00be: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00c0: INVOKE  \l  (r15 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader$EsInfo)\l  (r14 I:int A[D('streamType' int)])\l  (r12 I:java.lang.String A[D('language' java.lang.String)])\l  (r7 I:java.util.List A[D('dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>)])\l  (r0 I:byte[])\l com.google.android.exoplayer2.extractor.ts.TsPayloadReader.EsInfo.\<init\>(int, java.lang.String, java.util.List, byte[]):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x00c3|0x00c3: RETURN  \l  (r15 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader$EsInfo)\l \l}"];
MethodNode[shape=record,label="{private com.google.android.exoplayer2.extractor.ts.TsPayloadReader$EsInfo com.google.android.exoplayer2.extractor.ts.TsExtractor.PmtReader.readEsInfo((r18 'this' I:com.google.android.exoplayer2.extractor.ts.TsExtractor$PmtReader A[IMMUTABLE_TYPE, THIS]), (r19 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0024\-0x002e: r10 'formatIdentifier' long\l  0x003a\-0x0050: r10 'formatIdentifier' long\l  0x0009\-0x007d: r7 'dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>\l  0x0017\-0x00ab: r2 'descriptorLength' int\l  0x0013\-0x00ab: r3 'descriptorTag' int\l  0x0091\-0x00ab: r6 'dvbLanguage' java.lang.String\l  0x0095\-0x00ab: r8 'dvbSubtitlingType' int\l  0x0098\-0x00ab: r9 'initializationData' byte[]\l  0x001d\-0x00ab: r13 'positionOfNextDescriptor' int\l  0x0006\-0x00c3: r4 'descriptorsEndPosition' int\l  0x0004\-0x00c3: r5 'descriptorsStartPosition' int\l  0x0080\-0x00c3: r7 'dvbSubtitleInfos' java.util.List\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader$DvbSubtitleInfo\>\l  0x0008\-0x00c3: r12 'language' java.lang.String\l  0x0007\-0x00c3: r14 'streamType' int\l  ?\-0x00c3: r19 'data' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00c3: r20 'length' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_33;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_8;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_8;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_8;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_8;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_8;
Node_27 -> Node_28;
Node_28 -> Node_8;
Node_28 -> Node_29[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_8;
Node_31 -> Node_32[style=dashed];
Node_32 -> Node_30;
Node_33 -> Node_34;
}

