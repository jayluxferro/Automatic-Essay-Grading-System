digraph "CFG forcom.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory.\<init\>(ILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r7 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0004: IPUT  \l  (r8 I:int A[D('flags' int)])\l  (r7 I:com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory)\l com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory.flags int \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0008: INVOKE  (r1 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory.isSet(int):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r1 I:boolean) = \l  (r9 I:java.util.List A[D('closedCaptionFormats' java.util.List\<com.google.android.exoplayer2.Format\>)])\l java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST_STR  (r1 I:java.lang.String) =  \"application\/cea\-608\" \l0x0016: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0017: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0019: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:com.google.android.exoplayer2.Format) = \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:java.lang.String)\l  (r6 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.Format.createTextSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.String, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.Format type: STATIC \l0x001f: INVOKE  (r9 I:java.util.List A[D('closedCaptionFormats' java.util.List\<com.google.android.exoplayer2.Format\>)]) = (r0 I:java.lang.Object) java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IPUT  \l  (r9 I:java.util.List\<com.google.android.exoplayer2.Format\> A[D('closedCaptionFormats' java.util.List\<com.google.android.exoplayer2.Format\>)])\l  (r7 I:com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory)\l com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory.closedCaptionFormats java.util.List \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory.\<init\>((r7 'this' I:com.google.android.exoplayer2.extractor.ts.DefaultTsPayloadReaderFactory A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<com.google.android.exoplayer2.Format\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0025: r8 'flags' int\l  0x0000\-0x0025: r9 'closedCaptionFormats' java.util.List\<com.google.android.exoplayer2.Format\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/Format;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

