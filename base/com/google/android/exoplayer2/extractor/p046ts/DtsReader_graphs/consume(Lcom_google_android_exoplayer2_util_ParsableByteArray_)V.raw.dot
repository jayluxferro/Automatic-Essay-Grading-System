digraph "CFG forcom.google.android.exoplayer2.extractor.ts.DtsReader.consume(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r10 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l0x0002: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: INVOKE  (r1 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x006a \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.state int \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2] t:[0x0010, 0x001c, 0x0039] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r1 I:boolean) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ts.DtsReader.skipToNextSync(com.google.android.exoplayer2.util.ParsableByteArray):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0017: IPUT  \l  (r1 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.bytesRead int \l0x0019: IPUT  \l  (r4 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.state int \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.headerScratchBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x001e: IGET  (r1 I:byte[]) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0020: INVOKE  (r1 I:boolean) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:byte[])\l  (r10 I:int)\l com.google.android.exoplayer2.extractor.ts.DtsReader.continueRead(com.google.android.exoplayer2.util.ParsableByteArray, byte[], int):boolean type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.parseHeader():void type: DIRECT \l0x0029: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.headerScratchBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x002b: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x002e: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0030: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.headerScratchBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x0032: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r10 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0035: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0036: IPUT  \l  (r1 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.state int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: INVOKE  (r1 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x003d: IGET  (r2 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.sampleSize int \l0x003f: IGET  (r3 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.bytesRead int \l0x0041: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0042: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0046: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0048: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x004b: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.bytesRead int \l0x004d: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('bytesToRead' int)]) \l0x004e: IPUT  \l  (r1 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.bytesRead int \l0x0050: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.bytesRead int \l0x0052: IGET  (r2 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.sampleSize int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0058: IGET  (r2 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.timeUs long \l0x005a: IGET  (r5 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.sampleSize int \l0x005c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l0x0060: IGET  (r2 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.timeUs long \l0x0062: IGET  (r8 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.sampleDurationUs long \l0x0064: ARITH  (r2 I:long) = (r2 I:long) + (r8 I:long) \l0x0065: IPUT  \l  (r2 I:long)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.timeUs long \l0x0067: IPUT  \l  (r6 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.ts.DtsReader)\l com.google.android.exoplayer2.extractor.ts.DtsReader.state int \l}"];
Node_15 [shape=record,label="{15\:\ 0x006a|0x006a: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.DtsReader.consume((r11 'this' I:com.google.android.exoplayer2.extractor.ts.DtsReader A[IMMUTABLE_TYPE, THIS]), (r12 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0046\-0x006a: r0 'bytesToRead' int\l  ?\-0x0075: r12 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_9;
Node_4 -> Node_12;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_1;
}

