digraph "CFG forcom.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit([BII)V" {
subgraph cluster_Region_1448010595 {
label = "R(1:(1:(3:2|(1:4)|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_332357288 {
label = "R(1:(3:2|(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_435919616 {
label = "IF [B:1:0x0002] THEN: R(3:2|(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.isFilling != false) goto L_0x0005\l}"];
subgraph cluster_Region_724410157 {
label = "R(3:2|(1:4)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|int int r0 = r6 \- r5\l}"];
subgraph cluster_IfRegion_913559619 {
label = "IF [B:3:0x000d] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r3.nalData.length \< (r3.nalLength + r0)) goto L_0x000f\l}"];
subgraph cluster_Region_1687650210 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|r3.nalData = java.util.Arrays.copyOf(r3.nalData, (r3.nalLength + r0) * 2)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x001c|java.lang.System.arraycopy(r4, r5, r3.nalData, r3.nalLength, r0)\lr3.nalLength += r0\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit((r3v0 'this' com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer A[IMMUTABLE_TYPE, THIS]), (r4v0 'data' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'limit' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_0 -> Node_1;
}

