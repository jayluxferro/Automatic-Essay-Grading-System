digraph "CFG forcom.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.isFilling boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: ARITH  (r0 I:int) = (r6 I:int A[D('limit' int)]) \- (r5 I:int A[D('offset' int)]) \l0x0007: IGET  (r1 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x0009: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x000a: IGET  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x000c: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('readLength' int)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r1 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x0011: IGET  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0013: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('readLength' int)]) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) * (2 int) \l0x0016: INVOKE  (r1 I:byte[]) = (r1 I:byte[]), (r2 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x001a: IPUT  \l  (r1 I:byte[])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r1 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x001e: IGET  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0020: INVOKE  \l  (r4 I:java.lang.Object A[D('data' byte[])])\l  (r5 I:int A[D('offset' int)])\l  (r1 I:java.lang.Object)\l  (r2 I:int)\l  (r0 I:int A[D('readLength' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0023: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0025: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('readLength' int)]) \l0x0026: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit((r3 'this' I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer A[IMMUTABLE_TYPE, THIS]), (r4 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x0028: r0 'readLength' int\l  ?\-0x0028: r4 'data' byte[]\l  ?\-0x0028: r5 'offset' int\l  ?\-0x0028: r6 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_2;
}

