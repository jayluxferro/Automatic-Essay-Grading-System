digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.endNalUnit(JI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.writingParameterSets boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstSlice boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitHasKeyframeData boolean \l0x000a: IPUT  \l  (r1 I:boolean)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.sampleIsKeyframe boolean \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: IPUT  \l  (r1 I:boolean)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.writingParameterSets boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstParameterSet boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstSlice boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readingSample boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: IGET  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitStartPosition long \l0x001e: ARITH  (r2 I:long) = (r6 I:long A[D('position' long)]) \- (r2 I:long) \l0x0020: CAST  (r0 I:int) = (int) (r2 I:long) \l0x0021: ARITH  (r1 I:int) = (r8 I:int A[D('offset' int)]) + (r0 I:int A[D('nalUnitLength' int)]) \l0x0023: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.outputSample(int):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IGET  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitStartPosition long \l0x0028: IPUT  \l  (r2 I:long)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.samplePosition long \l0x002a: IGET  (r2 I:long) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitTimeUs long \l0x002c: IPUT  \l  (r2 I:long)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.sampleTimeUs long \l0x002e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002f: IPUT  \l  (r1 I:boolean)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readingSample boolean \l0x0031: IGET  (r1 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitHasKeyframeData boolean \l0x0033: IPUT  \l  (r1 I:boolean)\l  (r5 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.sampleIsKeyframe boolean \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.endNalUnit((r5 'this' I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0021\-0x0026: r0 'nalUnitLength' int\l  ?\-0x0035: r6 'position' long\l  ?\-0x0035: r8 'offset' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_5;
}

