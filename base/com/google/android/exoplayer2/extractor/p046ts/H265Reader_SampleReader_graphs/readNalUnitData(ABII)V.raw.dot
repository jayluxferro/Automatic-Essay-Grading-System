digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readNalUnitData([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.lookingForFirstSliceFlag boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: ARITH  (r1 I:int) = (r6 I:int A[D('offset' int)]) + (2 int) \l0x0007: IGET  (r3 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitBytesRead int \l0x0009: ARITH  (r0 I:int) = (r1 I:int) \- (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char] A[D('headerOffset' int)]) \>= (r7 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:10:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('headerOffset' int)])\l \l0x000f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IPUT  \l  (r1 I:boolean)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstSlice boolean \l0x0016: IPUT  \l  (r2 I:boolean)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.lookingForFirstSliceFlag boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitBytesRead int \l0x001d: ARITH  (r2 I:int) = (r7 I:int A[D('limit' int)]) \- (r6 I:int A[D('offset' int)]) \l0x001f: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0020: IPUT  \l  (r1 I:int)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitBytesRead int \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readNalUnitData((r4 'this' I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r5 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000b\-0x0018: r0 'headerOffset' int\l  0x0019\-0x0022: r0 'headerOffset' int\l  ?\-0x0022: r5 'data' byte[]\l  ?\-0x0022: r6 'offset' int\l  ?\-0x0022: r7 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_8;
}

