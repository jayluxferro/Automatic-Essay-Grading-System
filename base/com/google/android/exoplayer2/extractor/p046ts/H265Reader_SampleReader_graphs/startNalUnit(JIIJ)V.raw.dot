digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.startNalUnit(JIIJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IPUT  \l  (r2 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstSlice boolean \l0x0004: IPUT  \l  (r2 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstParameterSet boolean \l0x0006: IPUT  \l  (r8 I:long A[D('pesTimeUs' long)])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitTimeUs long \l0x0008: IPUT  \l  (r2 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitBytesRead int \l0x000a: IPUT  \l  (r4 I:long A[D('position' long)])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitStartPosition long \l0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r7 I:?[int, byte, short, char] A[D('nalUnitType' int)]) \< (r0 I:?[int, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r0 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.writingParameterSets boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IGET  (r0 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readingSample boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l  (r6 I:int A[D('offset' int)])\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.outputSample(int):void type: DIRECT \l0x001b: IPUT  \l  (r2 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.readingSample boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r0 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r7 I:?[int, byte, short, char] A[D('nalUnitType' int)]) \> (r0 I:?[int, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IGET  (r0 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.writingParameterSets boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0041 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IPUT  \l  (r0 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.isFirstParameterSet boolean \l0x0028: IPUT  \l  (r1 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.writingParameterSets boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IF  (r7 I:?[int, byte, short, char] A[D('nalUnitType' int)]) \< (r0 I:?[int, byte, short, char])  \-\> B:26:0x0043 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: CONST  (r0 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: IF  (r7 I:?[int, byte, short, char] A[D('nalUnitType' int)]) \> (r0 I:?[int, byte, short, char])  \-\> B:26:0x0043 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: IPUT  \l  (r0 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitHasKeyframeData boolean \l0x0035: IGET  (r0 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.nalUnitHasKeyframeData boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003b|0x003b: IF  (r7 I:?[int, byte, short, char] A[D('nalUnitType' int)]) \> (r0 I:?[int, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|0x003d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x003e|0x003e: IPUT  \l  (r2 I:boolean)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.lookingForFirstSliceFlag boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x0040|0x0040: RETURN   \l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|0x0041: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0043|0x0043: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H265Reader.SampleReader.startNalUnit((r3 'this' I:com.google.android.exoplayer2.extractor.ts.H265Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('nalUnitType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('pesTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0044: r4 'position' long\l  ?\-0x0044: r6 'offset' int\l  ?\-0x0044: r7 'nalUnitType' int\l  ?\-0x0044: r8 'pesTimeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_25;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_26;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_12;
Node_26 -> Node_18;
}

