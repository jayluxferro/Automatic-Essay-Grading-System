digraph "CFG forcom.google.android.exoplayer2.extractor.ts.Id3Reader.consume(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
subgraph cluster_Region_1704268654 {
label = "R(1:(1:(3:2|(2:4|(2:6|(1:13)(2:12|16)))|14)))";
node [shape=record,color=blue];
subgraph cluster_Region_1676497398 {
label = "R(1:(3:2|(2:4|(2:6|(1:13)(2:12|16)))|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1458236002 {
label = "IF [B:1:0x0005] THEN: R(3:2|(2:4|(2:6|(1:13)(2:12|16)))|14) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r9.writingSample != false) goto L_0x0008\l}"];
subgraph cluster_Region_829784836 {
label = "R(3:2|(2:4|(2:6|(1:13)(2:12|16)))|14)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|int int r0 = r10.bytesLeft()\l}"];
subgraph cluster_IfRegion_918945375 {
label = "IF [B:3:0x000e] THEN: R(2:4|(2:6|(1:13)(2:12|16))) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r9.sampleBytesRead \< 10) goto L_0x0010\l}"];
subgraph cluster_Region_1861654055 {
label = "R(2:4|(2:6|(1:13)(2:12|16)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|int int r2 = java.lang.Math.min(r0, 10 \- r9.sampleBytesRead)\ljava.lang.System.arraycopy(r10.data, r10.getPosition(), r9.id3Header.data, r9.sampleBytesRead, r2)\l}"];
subgraph cluster_IfRegion_250914702 {
label = "IF [B:5:0x002a] THEN: R(2:6|(1:13)(2:12|16)) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002a|if ((r9.sampleBytesRead + r2) == 10) goto L_0x002c\l}"];
subgraph cluster_Region_2064029066 {
label = "R(2:6|(1:13)(2:12|16))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002c|r9.id3Header.setPosition(0)\l}"];
subgraph cluster_IfRegion_1928137213 {
label = "IF [B:7:0x0039, B:9:0x0043, B:11:0x004d] THEN: R(1:13) ELSE: R(2:12|16)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0039|if (73 == r9.id3Header.readUnsignedByte()) goto L_0x003b\l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|ADDED_TO_REGION\l|if (68 == r9.id3Header.readUnsignedByte()) goto L_0x0045\l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|ADDED_TO_REGION\l|if (51 == r9.id3Header.readUnsignedByte()) goto L_0x0059\l}"];
subgraph cluster_Region_1943356472 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0059|r9.id3Header.skipBytes(3)\lr9.sampleSize = r9.id3Header.readSynchSafeInt() + 10\l}"];
}
subgraph cluster_Region_1794861851 {
label = "R(2:12|16)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x004f|android.util.Log.w(TAG, \"Discarding invalid ID3 tag\")\lr9.writingSample = false\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0069|int int r1 = java.lang.Math.min(r0, r9.sampleSize \- r9.sampleBytesRead)\lr9.output.sampleData(r10, r1)\lr9.sampleBytesRead += r1\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x003b}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0045}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.Id3Reader.consume((r9v0 'this' com.google.android.exoplayer2.extractor.ts.Id3Reader A[IMMUTABLE_TYPE, THIS]), (r10v0 'data' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_15[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_12[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_12 -> Node_16;
Node_14 -> Node_17;
Node_0 -> Node_1;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

