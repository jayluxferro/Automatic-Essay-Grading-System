digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.consume(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r19 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0004: INVOKE  (r17 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x000a: IGET  (r4 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000e: IGET  (r10 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.totalBytesWritten long \l0x0010: INVOKE  (r5 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0014: CAST  (r14 I:long) = (long) (r5 I:int) \l0x0015: ARITH  (r10 I:long) = (r10 I:long) + (r14 I:long) \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0018: IPUT  \l  (r10 I:long)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.totalBytesWritten long \l0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x001c: IGET  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x001e: INVOKE  (r9 I:int) = \l  (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l \l0x0024: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0027|0x0027: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0029: IGET  (r5 I:boolean[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.prefixFlags boolean[] \l0x002b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x002d: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)])\l \l0x002f: INVOKE  (r18 I:int) = \l  (r4 I:byte[] A[D('dataArray' byte[])])\l  (r0 I:int)\l  (r1 I:int)\l  (r5 I:boolean[])\l com.google.android.exoplayer2.util.NalUnitUtil.findNalUnit(byte[], int, int, boolean[]):int type: STATIC \l0x0033: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalUnitOffset' int)])\l \l0x0035: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0039|0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x003b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x003d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)])\l \l0x003f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l  (r4 I:byte[] A[D('dataArray' byte[])])\l  (r1 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ts.H264Reader.nalUnitData(byte[], int, int):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0042|0x0042: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalUnitOffset' int)])\l \l0x0045: INVOKE  (r13 I:int) = (r4 I:byte[] A[D('dataArray' byte[])]), (r0 I:int) com.google.android.exoplayer2.util.NalUnitUtil.getNalUnitType(byte[], int):int type: STATIC \l0x0049: ARITH  (r16 I:int) = (r18 I:int A[D('nalUnitOffset' int)]) \- (r19 I:int A[D('offset' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x004b|0x004b: IF  (r16 I:?[int, byte, short, char] A[D('lengthToNalUnit' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0056 \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x0051: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalUnitOffset' int)])\l \l0x0053: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l  (r4 I:byte[] A[D('dataArray' byte[])])\l  (r1 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ts.H264Reader.nalUnitData(byte[], int, int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0056|0x0056: ARITH  (r8 I:int) = (r17 I:int A[D('limit' int)]) \- (r18 I:int A[D('nalUnitOffset' int)]) \l0x0058: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005a: IGET  (r10 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.totalBytesWritten long \l0x005c: CAST  (r14 I:long) = (long) (r8 I:int A[D('bytesWrittenPastPosition' int)]) \l0x005d: ARITH  (r6 I:long) = (r10 I:long) \- (r14 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x005f|0x005f: IF  (r16 I:?[int, byte, short, char] A[D('lengthToNalUnit' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x007a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0061|0x0061: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lengthToNalUnit' int)])\l \l0x0063: NEG  (r9 I:int) = (r0 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0064|0x0064: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0066: IGET  (r10 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pesTimeUs long \l0x0068: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x006a: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l  (r6 I:long A[D('absolutePosition' long)])\l  (r8 I:int A[D('bytesWrittenPastPosition' int)])\l  (r9 I:int)\l  (r10 I:long)\l com.google.android.exoplayer2.extractor.ts.H264Reader.endNalUnit(long, int, int, long):void type: DIRECT \l0x006d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x006f: IGET  (r14 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pesTimeUs long \l0x0071: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0073: MOVE  (r11 I:?[long, double]) = (r6 I:?[long, double] A[D('absolutePosition' long)]) \l0x0074: INVOKE  \l  (r10 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l  (r11 I:long)\l  (r13 I:int A[D('nalUnitType' int)])\l  (r14 I:long)\l com.google.android.exoplayer2.extractor.ts.H264Reader.startNalUnit(long, int, long):void type: DIRECT \l0x0077: ARITH  (r19 I:int A[D('offset' int)]) = (r18 I:int A[D('nalUnitOffset' int)]) + (3 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H264Reader.consume((r20 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader A[IMMUTABLE_TYPE, THIS]), (r21 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000c\-0x007b: r4 'dataArray' byte[]\l  0x005f\-0x007b: r6 'absolutePosition' long\l  0x0058\-0x007b: r8 'bytesWrittenPastPosition' int\l  0x0049\-0x007b: r13 'nalUnitType' int\l  0x004b\-0x007b: r16 'lengthToNalUnit' int\l  0x0008\-0x007b: r17 'limit' int\l  0x0033\-0x007b: r18 'nalUnitOffset' int\l  0x0004\-0x007b: r19 'offset' int\l  ?\-0x007b: r21 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_11;
}

