digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.endNalUnit(JIIJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.hasOutputFormat boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x000a: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.needsSpsPps():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00d4 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0012: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0014: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('discardPadding' int)])\l \l0x0016: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.endNalUnit(int):boolean type: VIRTUAL \l0x0019: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x001b: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x001d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('discardPadding' int)])\l \l0x001f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.endNalUnit(int):boolean type: VIRTUAL \l0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0024: IGET  (r3 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.hasOutputFormat boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0120 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x002a: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x002c: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.isCompleted():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00d4 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0034: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0036: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.isCompleted():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00d4 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: NEW_INSTANCE  (r11 I:java.util.ArrayList) =  java.util.ArrayList \l0x003e: INVOKE  (r11 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0041: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0043: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0045: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0049: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x004b: IGET  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x004d: INVOKE  (r3 I:byte[]) = (r3 I:byte[]), (r4 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x0051: INVOKE  \l  (r11 I:java.util.List A[D('initializationData' java.util.List\<byte[]\>)])\l  (r3 I:java.lang.Object)\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0054: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0056: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0058: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x005a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x005c: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x005e: IGET  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0060: INVOKE  (r3 I:byte[]) = (r3 I:byte[]), (r4 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x0064: INVOKE  \l  (r11 I:java.util.List A[D('initializationData' java.util.List\<byte[]\>)])\l  (r3 I:java.lang.Object)\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0067: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0069: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x006b: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x006d: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x006e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0070: IGET  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0072: IGET  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0074: INVOKE  (r16 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData) = (r3 I:byte[]), (r4 I:int), (r5 I:int) com.google.android.exoplayer2.util.NalUnitUtil.parseSpsNalUnit(byte[], int, int):com.google.android.exoplayer2.util.NalUnitUtil$SpsData type: STATIC \l0x0078: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x007a: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x007c: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x007e: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x007f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0081: IGET  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0083: IGET  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0085: INVOKE  (r15 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData) = (r3 I:byte[]), (r4 I:int), (r5 I:int) com.google.android.exoplayer2.util.NalUnitUtil.parsePpsNalUnit(byte[], int, int):com.google.android.exoplayer2.util.NalUnitUtil$PpsData type: STATIC \l0x0089: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x008b: IGET  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x008d: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x008f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0091: IGET  (r3 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.formatId java.lang.String \l0x0093: CONST_STR  (r4 I:java.lang.String) =  \"video\/avc\" \l0x0095: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0096: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0097: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0098: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l \l0x009a: IGET  (r8 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.width int \l0x009c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l \l0x009e: IGET  (r9 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.height int \l0x00a0: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l0x00a2: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l \l0x00a5: IGET  (r13 I:float) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.pixelWidthAspectRatio float \l0x00a7: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a8: INVOKE  (r3 I:com.google.android.exoplayer2.Format) = \l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:float)\l  (r11 I:java.util.List A[D('initializationData' java.util.List\<byte[]\>)])\l  (r12 I:int)\l  (r13 I:float)\l  (r14 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.Format.createVideoSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, float, java.util.List, int, float, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.Format type: STATIC \l0x00ac: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00ae: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r3 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x00b1: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00b2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00b4: IPUT  \l  (r3 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.hasOutputFormat boolean \l0x00b6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00b8: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x00ba: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l \l0x00bc: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.putSps(com.google.android.exoplayer2.util.NalUnitUtil$SpsData):void type: VIRTUAL \l0x00bf: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00c1: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x00c3: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r15 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData A[D('ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData)])\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.putPps(com.google.android.exoplayer2.util.NalUnitUtil$PpsData):void type: VIRTUAL \l0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00c8: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00ca: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.reset():void type: VIRTUAL \l0x00cd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00cf: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00d1: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.reset():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x00d4|0x00d4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00d6: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sei com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00d8: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('discardPadding' int)])\l \l0x00da: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.endNalUnit(int):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x00de|0x00de: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0114 \l}"];
Node_13 [shape=record,label="{13\:\ 0x00e0|0x00e0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00e2: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sei com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00e4: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00e8: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sei com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00ea: IGET  (r4 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x00ec: INVOKE  (r17 I:int) = (r3 I:byte[]), (r4 I:int) com.google.android.exoplayer2.util.NalUnitUtil.unescapeStream(byte[], int):int type: STATIC \l0x00f0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00f2: IGET  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.seiWrapper com.google.android.exoplayer2.util.ParsableByteArray \l0x00f4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00f6: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sei com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x00f8: IGET  (r4 I:byte[]) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x00fa: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('unescapedLength' int)])\l \l0x00fc: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:byte[])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.reset(byte[], int):void type: VIRTUAL \l0x00ff: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0101: IGET  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.seiWrapper com.google.android.exoplayer2.util.ParsableByteArray \l0x0103: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0104: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0107: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0109: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.SeiReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.seiReader com.google.android.exoplayer2.extractor.ts.SeiReader \l0x010b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x010d: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.seiWrapper com.google.android.exoplayer2.util.ParsableByteArray \l0x010f: MOVE  (r0 I:?[long, double]) = (r24 I:?[long, double] A[D('pesTimeUs' long)]) \l0x0111: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.SeiReader)\l  (r0 I:long)\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.extractor.ts.SeiReader.consume(long, com.google.android.exoplayer2.util.ParsableByteArray):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0114|0x0114: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0116: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x0118: MOVE  (r0 I:?[long, double]) = (r20 I:?[long, double] A[D('position' long)]) \l0x011a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x011c: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r0 I:long)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.endNalUnit(long, int):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x011f|0x011f: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0120|0x0120: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0122: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0124: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.isCompleted():boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0128|0x0128: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x014c \l}"];
Node_18 [shape=record,label="{18\:\ 0x012a|0x012a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x012c: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x012e: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x0130: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0131: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0133: IGET  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0135: IGET  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0137: INVOKE  (r16 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData) = (r3 I:byte[]), (r4 I:int), (r5 I:int) com.google.android.exoplayer2.util.NalUnitUtil.parseSpsNalUnit(byte[], int, int):com.google.android.exoplayer2.util.NalUnitUtil$SpsData type: STATIC \l0x013b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x013d: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x013f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l \l0x0141: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.putSps(com.google.android.exoplayer2.util.NalUnitUtil$SpsData):void type: VIRTUAL \l0x0144: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0146: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0148: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.reset():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x014c|0x014c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x014e: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0150: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.isCompleted():boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0154|0x0154: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00d4 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0156|0x0156: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0158: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x015a: IGET  (r3 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalData byte[] \l0x015c: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x015d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x015f: IGET  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0161: IGET  (r5 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.nalLength int \l0x0163: INVOKE  (r15 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData) = (r3 I:byte[]), (r4 I:int), (r5 I:int) com.google.android.exoplayer2.util.NalUnitUtil.parsePpsNalUnit(byte[], int, int):com.google.android.exoplayer2.util.NalUnitUtil$PpsData type: STATIC \l0x0167: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0169: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x016b: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r15 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData A[D('ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData)])\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.putPps(com.google.android.exoplayer2.util.NalUnitUtil$PpsData):void type: VIRTUAL \l0x016e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0170: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0172: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.reset():void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.H264Reader.endNalUnit((r19 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader A[IMMUTABLE_TYPE, THIS]), (r20 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[D('discardPadding' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[D('pesTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0041\-0x00d4: r11 'initializationData' java.util.List\<byte[]\>\l  0x0089\-0x00d4: r15 'ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData\l  0x0078\-0x00d4: r16 'spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData\l  0x00f0\-0x0114: r17 'unescapedLength' int\l  0x013b\-0x014c: r16 'spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData\l  0x0167\-0x0176: r15 'ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData\l  ?\-0x0176: r20 'position' long\l  ?\-0x0176: r22 'offset' int\l  ?\-0x0176: r23 'discardPadding' int\l  ?\-0x0176: r24 'pesTimeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_11;
Node_19 -> Node_20;
Node_20 -> Node_11;
Node_20 -> Node_21[style=dashed];
Node_21 -> Node_11;
}

