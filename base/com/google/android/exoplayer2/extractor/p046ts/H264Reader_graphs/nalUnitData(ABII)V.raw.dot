digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.nalUnitData([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.hasOutputFormat boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x0006: INVOKE  (r0 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.needsSpsPps():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x000e: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r3 I:int A[D('offset' int)])\l  (r4 I:int A[D('limit' int)])\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit(byte[], int, int):void type: VIRTUAL \l0x0011: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.pps com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0013: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r3 I:int A[D('offset' int)])\l  (r4 I:int A[D('limit' int)])\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit(byte[], int, int):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sei com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer \l0x0018: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r3 I:int A[D('offset' int)])\l  (r4 I:int A[D('limit' int)])\l com.google.android.exoplayer2.extractor.ts.NalUnitTargetBuffer.appendToNalUnit(byte[], int, int):void type: VIRTUAL \l0x001b: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader) = \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.sampleReader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader \l0x001d: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r2 I:byte[] A[D('dataArray' byte[])])\l  (r3 I:int A[D('offset' int)])\l  (r4 I:int A[D('limit' int)])\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.appendToNalUnit(byte[], int, int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.H264Reader.nalUnitData((r1 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader A[IMMUTABLE_TYPE, THIS]), (r2 I:byte[] A[D('dataArray' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0020: r2 'dataArray' byte[]\l  ?\-0x0020: r3 'offset' int\l  ?\-0x0020: r4 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

