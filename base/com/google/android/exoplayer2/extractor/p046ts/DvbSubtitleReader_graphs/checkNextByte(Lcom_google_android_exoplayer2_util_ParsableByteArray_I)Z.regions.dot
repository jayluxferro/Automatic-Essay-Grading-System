digraph "CFG forcom.google.android.exoplayer2.extractor.ts.DvbSubtitleReader.checkNextByte(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;I)Z" {
subgraph cluster_Region_1052870795 {
label = "R(1:(2:(1:6)|(3:(1:4)|5|7)))";
node [shape=record,color=blue];
subgraph cluster_Region_226399776 {
label = "R(2:(1:6)|(3:(1:4)|5|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1053285485 {
label = "IF [B:1:0x0005] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r3.bytesLeft() == 0) goto L_?\l}"];
subgraph cluster_Region_1445050859 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1687610996 {
label = "R(3:(1:4)|5|7)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_497070928 {
label = "IF [B:3:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r3.readUnsignedByte() != r4) goto L_0x000e\l}"];
subgraph cluster_Region_486813757 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000e|r2.writingSample = false\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0010|r2.bytesToCheck\-\-\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r2.writingSample\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader.checkNextByte((r2v0 'this' com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader A[IMMUTABLE_TYPE, THIS]), (r3v0 'data' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'expectedValue' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

