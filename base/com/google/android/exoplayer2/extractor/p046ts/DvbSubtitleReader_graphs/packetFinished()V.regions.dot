digraph "CFG forcom.google.android.exoplayer2.extractor.ts.DvbSubtitleReader.packetFinished()V" {
subgraph cluster_Region_316559319 {
label = "R(1:(1:(3:2|(1:4)|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1063695170 {
label = "R(1:(3:2|(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2123780113 {
label = "IF [B:1:0x0003] THEN: R(3:2|(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r10.writingSample == true) goto L_0x0005\l}"];
subgraph cluster_Region_96726575 {
label = "R(3:2|(1:4)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|int int r9 = r10.outputs.length\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_766210117 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:2:0x0005, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|if (r0 \< r9) goto L_0x000b\l}"];
subgraph cluster_Region_2129296689 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_END\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|r1.sampleMetadata(r10.sampleTimeUs, 1, r10.sampleBytesWritten, 0, (byte[]) null)\lr0++\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0019|r10.writingSample = false\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader.packetFinished((r10v0 'this' com.google.android.exoplayer2.extractor.ts.DvbSubtitleReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_3;
Node_5 -> Node_7;
Node_0 -> Node_1;
Node_6 -> Node_5;
}

