digraph "CFG forcom.google.android.exoplayer2.extractor.ts.Ac3Extractor.sniff(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r10 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0002: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x0005: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r10 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(int):void type: DIRECT \l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IGET  (r8 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000b: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:byte[])\l  (r7 I:int)\l  (r10 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x000e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x0011: INVOKE  (r8 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedInt24():int type: VIRTUAL \l0x0015: SGET  (r9 I:int) =  com.google.android.exoplayer2.extractor.ts.Ac3Extractor.ID3_TAG int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l0x001c: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int A[D('startPosition' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l0x001f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startPosition' int)])\l \l0x0020: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IGET  (r8 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0023: CONST  (r9 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0024: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:byte[])\l  (r7 I:int)\l  (r9 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0027: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x002a: INVOKE  (r5 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l0x002e: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (2935(0xb77, float:4.113E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('syncBytes' int)]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0052 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|0x0032: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('validFramesCount' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.resetPeekPosition():void type: INTERFACE \l0x0036: ARITH  (r1 I:int A[D('headerPosition' int)]) = (r1 I:int A[D('headerPosition' int)]) + (1 int) \l0x0038: ARITH  (r8 I:int) = (r1 I:int A[D('headerPosition' int)]) \- (r4 I:int A[D('startPosition' int)]) \l0x003a: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: IF  (r8 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:10:0x004e \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: RETURN  (r7 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0040: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r8 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x0043: INVOKE  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readSynchSafeInt():int type: VIRTUAL \l0x0047: ARITH  (r8 I:int) = (r2 I:int A[D('length' int)]) + (10 int) \l0x0049: ARITH  (r4 I:int A[D('startPosition' int)]) = (r4 I:int A[D('startPosition' int)]) + (r8 I:int) \l0x004a: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r2 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:int A[D('headerPosition' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0052|0x0052: ARITH  (r6 I:int A[D('validFramesCount' int)]) = (r6 I:int A[D('validFramesCount' int)]) + (1 int) \l0x0054: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: IF  (r6 I:?[int, byte, short, char] A[D('validFramesCount' int)]) \< (r8 I:?[int, byte, short, char])  \-\> B:14:0x0059 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|0x0059: IGET  (r8 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('scratch' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x005b: INVOKE  (r0 I:int) = (r8 I:byte[]) com.google.android.exoplayer2.audio.Ac3Util.parseAc3SyncframeSize(byte[]):int type: STATIC \l0x005f: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0060|0x0060: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameSize' int)]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0062|0x0062: ARITH  (r8 I:int) = (r0 I:int A[D('frameSize' int)]) + (\-5 int) \l0x0064: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r8 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.ts.Ac3Extractor.sniff((r11 'this' I:com.google.android.exoplayer2.extractor.ts.Ac3Extractor A[IMMUTABLE_TYPE, THIS]), (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0020\-0x003f: r1 'headerPosition' int\l  0x002e\-0x003f: r5 'syncBytes' int\l  0x0021\-0x003f: r6 'validFramesCount' int\l  0x0047\-0x004e: r2 'length' int\l  0x005f\-0x0067: r0 'frameSize' int\l  0x004e\-0x0067: r1 'headerPosition' int\l  0x0008\-0x0067: r3 'scratch' com.google.android.exoplayer2.util.ParsableByteArray\l  0x0009\-0x0067: r4 'startPosition' int\l  0x004e\-0x0067: r5 'syncBytes' int\l  0x004e\-0x0067: r6 'validFramesCount' int\l  ?\-0x0067: r12 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_9 -> Node_1;
Node_10 -> Node_4;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_8;
Node_14 -> Node_15;
Node_15 -> Node_8;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_4;
}

