digraph "CFG forcom.google.android.exoplayer2.extractor.ts.PesReader.continueRead(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;[BI)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0005: IGET  (r3 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ts.PesReader) com.google.android.exoplayer2.extractor.ts.PesReader.bytesRead int \l0x0007: ARITH  (r3 I:int) = (r7 I:int A[D('targetLength' int)]) \- (r3 I:int) \l0x0009: INVOKE  (r0 I:int) = (r2 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char] A[D('bytesToRead' int)]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('target' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r2 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ts.PesReader) com.google.android.exoplayer2.extractor.ts.PesReader.bytesRead int \l0x0017: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('bytesToRead' int)]) \l0x0018: IPUT  \l  (r2 I:int)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.PesReader)\l com.google.android.exoplayer2.extractor.ts.PesReader.bytesRead int \l0x001a: IGET  (r2 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ts.PesReader) com.google.android.exoplayer2.extractor.ts.PesReader.bytesRead int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('targetLength' int)])  \-\> B:2:0x000f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IGET  (r2 I:int) = (r4 I:com.google.android.exoplayer2.extractor.ts.PesReader) com.google.android.exoplayer2.extractor.ts.PesReader.bytesRead int \l0x0022: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r6 I:byte[] A[D('target' byte[])])\l  (r2 I:int)\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.ts.PesReader.continueRead((r4 'this' I:com.google.android.exoplayer2.extractor.ts.PesReader A[IMMUTABLE_TYPE, THIS]), (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('targetLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0025: r0 'bytesToRead' int\l  ?\-0x0025: r5 'source' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0025: r6 'target' byte[]\l  ?\-0x0025: r7 'targetLength' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_2;
Node_8 -> Node_5;
}

