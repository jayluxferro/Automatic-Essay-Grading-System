digraph "CFG forcom.google.android.exoplayer2.extractor.ts.PsExtractor.sniff(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0002: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r4 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x0007: NEW_ARRAY  (r1 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x000b: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[] A[D('scratch' byte[])])\l  (r3 I:int)\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x000e: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (442(0x1ba, float:6.2E\-43) ?[int, float, short, byte, char])\l \l0x0010: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0012: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0014: ARITH  (r5 I:int) = (r5 I:int) \<\< (24 int) \l0x0016: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0018: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001a: ARITH  (r6 I:int) = (r6 I:int) \<\< (16 int) \l0x001c: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x001d: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x001f: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0021: ARITH  (r6 I:int) = (r6 I:int) \<\< (8 int) \l0x0023: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l0x0024: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0026: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0028: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) \| (r6 I:?[int, boolean, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0029|0x0029: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x002b|0x002b: RETURN  (r3 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l0x002e: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (196(0xc4, float:2.75E\-43) ?[int, float, short, byte, char]) \l0x0030: CONST  (r5 I:?[int, float, short, byte, char]) = (68 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0035: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0037: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|0x003b: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x003d: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x003f: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0041|0x0041: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0045: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0047: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: CONST  (r4 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x004d: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x004f: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|0x0051: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: CONST  (r4 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0055: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0057: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (7 ?[int, float, short, byte, char]) \l0x0059: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:int A[D('packStuffingLength' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.advancePeekPosition(int):void type: INTERFACE \l0x005c: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[] A[D('scratch' byte[])])\l  (r3 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x005f: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0061: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0063: ARITH  (r4 I:int) = (r4 I:int) \<\< (16 int) \l0x0065: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0067: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0069: ARITH  (r5 I:int) = (r5 I:int) \<\< (8 int) \l0x006b: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l0x006c: AGET  (r5 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[D('scratch' byte[]), IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l \l0x006e: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0070: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) \| (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0071|0x0071: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0075 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0073|0x0073: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0075|0x0075: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.ts.PsExtractor.sniff((r10 'this' I:com.google.android.exoplayer2.extractor.ts.PsExtractor A[IMMUTABLE_TYPE, THIS]), (r11 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0059\-0x0076: r0 'packStuffingLength' int\l  0x0009\-0x0076: r1 'scratch' byte[]\l  ?\-0x0076: r11 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_2;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_2;
Node_16 -> Node_15;
}

