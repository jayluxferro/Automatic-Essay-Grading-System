digraph "CFG forcom.google.android.exoplayer2.extractor.ts.AdtsReader.consume(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.state int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x000c, 0x0010, 0x0020, 0x0035] \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ts.AdtsReader.findNextSample(com.google.android.exoplayer2.util.ParsableByteArray):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.id3HeaderBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0012: IGET  (r1 I:byte[]) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0014: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0016: INVOKE  (r1 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:byte[])\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.continueRead(com.google.android.exoplayer2.util.ParsableByteArray, byte[], int):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.parseId3Header():void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r1 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.hasCrc boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0033 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0027: IGET  (r1 I:byte[]) = (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.data byte[] \l0x0029: INVOKE  (r1 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:byte[])\l  (r0 I:int A[D('targetLength' int)])\l com.google.android.exoplayer2.extractor.ts.AdtsReader.continueRead(com.google.android.exoplayer2.util.ParsableByteArray, byte[], int):boolean type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.parseAdtsHeader():void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: CONST  (r0 I:?[int, float, short, byte, char] A[D('targetLength' int)]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.extractor.ts.AdtsReader.readSample(com.google.android.exoplayer2.util.ParsableByteArray):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.AdtsReader.consume((r3 'this' I:com.google.android.exoplayer2.extractor.ts.AdtsReader A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0025\-0x0033: r0 'targetLength' int\l  ?\-0x0045: r4 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_9;
Node_3 -> Node_16;
Node_3 -> Node_0;
Node_5 -> Node_0;
Node_6 -> Node_7;
Node_7 -> Node_0;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_0;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_0;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_0;
Node_15 -> Node_12;
Node_16 -> Node_0;
}

