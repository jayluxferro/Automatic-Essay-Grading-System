digraph "CFG forcom.google.android.exoplayer2.extractor.ts.AdtsReader.readSample(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0004: IGET  (r2 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.sampleSize int \l0x0006: IGET  (r3 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.bytesRead int \l0x0008: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0009: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000d: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.currentOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x000f: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l0x0012: IGET  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.bytesRead int \l0x0014: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('bytesToRead' int)]) \l0x0015: IPUT  \l  (r1 I:int)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.bytesRead int \l0x0017: IGET  (r1 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.bytesRead int \l0x0019: IGET  (r2 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.sampleSize int \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|0x001d: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.currentOutput com.google.android.exoplayer2.extractor.TrackOutput \l0x001f: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.timeUs long \l0x0021: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0022: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.sampleSize int \l0x0024: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0026: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l0x0029: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.timeUs long \l0x002b: IGET  (r4 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.currentSampleDuration long \l0x002d: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x002e: IPUT  \l  (r2 I:long)\l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.timeUs long \l0x0030: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.setFindingSampleState():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.AdtsReader.readSample((r8 'this' I:com.google.android.exoplayer2.extractor.ts.AdtsReader A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('data' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0033: r0 'bytesToRead' int\l  ?\-0x0033: r9 'data' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

