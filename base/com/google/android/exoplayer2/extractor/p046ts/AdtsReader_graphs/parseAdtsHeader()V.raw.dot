digraph "CFG forcom.google.android.exoplayer2.extractor.ts.AdtsReader.parseAdtsHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.setPosition(int):void type: VIRTUAL \l0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x000a: IGET  (r2 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.hasOutputFormat boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x00d0 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0010: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0012: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0013: INVOKE  (r2 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0017: ARITH  (r13 I:int) = (r2 I:int) + (1 int) \l0x0019: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioObjectType' int)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x003b \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: CONST_STR  (r2 I:java.lang.String) =  \"AdtsReader\" \l0x001e: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0020: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0023: CONST_STR  (r4 I:java.lang.String) =  \"Detected audio object type: \" \l0x0025: INVOKE  (r3 I:java.lang.StringBuilder) = (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder) = \l  (r3 I:java.lang.StringBuilder)\l  (r13 I:int A[D('audioObjectType' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002d: CONST_STR  (r4 I:java.lang.String) =  \", but assuming AAC LC.\" \l0x002f: INVOKE  (r3 I:java.lang.StringBuilder) = (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0033: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0037: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x003a: CONST  (r13 I:?[int, float, short, byte, char] A[D('audioObjectType' int)]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|0x003b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x003d: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x003f: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0040: INVOKE  (r18 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0044: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0046: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0048: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0049: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x004c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x004e: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0050: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0051: INVOKE  (r16 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0055: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleRateIndex' int)])\l \l0x0057: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('channelConfig' int)])\l \l0x0059: INVOKE  (r15 I:byte[]) = \l  (r13 I:int A[D('audioObjectType' int)])\l  (r0 I:int)\l  (r1 I:int)\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacAudioSpecificConfig(int, int, int):byte[] type: STATIC \l0x005d: INVOKE  (r14 I:android.util.Pair) = (r15 I:byte[] A[D('audioSpecificConfig' byte[])]) com.google.android.exoplayer2.util.CodecSpecificDataUtil.parseAacAudioSpecificConfig(byte[]):android.util.Pair type: STATIC \l0x0061: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0063: IGET  (r2 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.formatId java.lang.String \l0x0065: CONST_STR  (r3 I:java.lang.String) =  \"audio\/mp4a\-latm\" \l0x0067: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0068: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0069: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x006a: IGET  (r8 I:java.lang.Object) = \l  (r14 I:android.util.Pair A[D('audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>)])\l android.util.Pair.second java.lang.Object \l0x006c: CHECK_CAST  (r8 I:java.lang.Integer) = (java.lang.Integer) (r8 I:?[OBJECT, ARRAY]) \l0x006e: INVOKE  (r7 I:int) = (r8 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0072: IGET  (r8 I:java.lang.Object) = \l  (r14 I:android.util.Pair A[D('audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>)])\l android.util.Pair.first java.lang.Object \l0x0074: CHECK_CAST  (r8 I:java.lang.Integer) = (java.lang.Integer) (r8 I:?[OBJECT, ARRAY]) \l0x0076: INVOKE  (r8 I:int) = (r8 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x007a: INVOKE  (r9 I:java.util.List) = (r15 I:java.lang.Object A[D('audioSpecificConfig' byte[])]) java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC \l0x007e: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007f: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0080: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0082: IGET  (r12 I:java.lang.String) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.language java.lang.String \l0x0084: INVOKE  (r17 I:com.google.android.exoplayer2.Format) = \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:java.util.List)\l  (r10 I:com.google.android.exoplayer2.drm.DrmInitData)\l  (r11 I:int)\l  (r12 I:java.lang.String)\l com.google.android.exoplayer2.Format.createAudioSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, java.util.List, com.google.android.exoplayer2.drm.DrmInitData, int, java.lang.String):com.google.android.exoplayer2.Format type: STATIC \l0x0088: CONST  (r2 I:?[long, double]) = \l  (1024000000(0x3d090000, double:5.059232213E\-315) ?[long, double])\l \l0x008b: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x008d: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.sampleRate int \l0x008f: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0090: ARITH  (r2 I:long) = (r2 I:long) \/ (r4 I:long) \l0x0091: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0093: IPUT  \l  (r2 I:long)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.sampleDurationUs long \l0x0095: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0097: IGET  (r2 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0099: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x009b: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r0 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.extractor.TrackOutput.format(com.google.android.exoplayer2.Format):void type: INTERFACE \l0x009e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x009f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00a1: IPUT  \l  (r2 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.hasOutputFormat boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x00a3|0x00a3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00a5: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00a7: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x00a8: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x00ab: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00ad: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00af: CONST  (r3 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x00b1: INVOKE  (r2 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x00b5: ARITH  (r2 I:int) = (r2 I:int) + (\-2 int) \l0x00b7: ARITH  (r7 I:int) = (r2 I:int) + (\-5 int) \l0x00b9: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00bb: IGET  (r2 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.hasCrc boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x00bd|0x00bd: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x00c1 \l}"];
Node_8 [shape=record,label="{8\:\ 0x00bf|0x00bf: ARITH  (r7 I:int A[D('sampleSize' int)]) = (r7 I:int A[D('sampleSize' int)]) + (\-2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x00c1|0x00c1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00c3: IGET  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x00c5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00c7: IGET  (r4 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.sampleDurationUs long \l0x00c9: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ca: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00cc: INVOKE  \l  (r2 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l  (r3 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r4 I:long)\l  (r6 I:int)\l  (r7 I:int A[D('sampleSize' int)])\l com.google.android.exoplayer2.extractor.ts.AdtsReader.setReadingSampleState(com.google.android.exoplayer2.extractor.TrackOutput, long, int, int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x00cf|0x00cf: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x00d0|0x00d0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00d2: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.AdtsReader)\l com.google.android.exoplayer2.extractor.ts.AdtsReader.adtsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00d4: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x00d6: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.AdtsReader.parseAdtsHeader((r19 'this' I:com.google.android.exoplayer2.extractor.ts.AdtsReader A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0019\-0x00a3: r13 'audioObjectType' int\l  0x0061\-0x00a3: r14 'audioParams' android.util.Pair\<java.lang.Integer, java.lang.Integer\>\l  0x005d\-0x00a3: r15 'audioSpecificConfig' byte[]\l  0x0055\-0x00a3: r16 'channelConfig' int\l  0x0088\-0x00a3: r17 'format' com.google.android.exoplayer2.Format\l  0x0044\-0x00a3: r18 'sampleRateIndex' int\l  0x00b9\-0x00d0: r7 'sampleSize' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_6;
}

