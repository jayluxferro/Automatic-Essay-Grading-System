digraph "CFG forcom.google.android.exoplayer2.extractor.ts.AdtsReader.parseAdtsHeader()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r19.adtsScratch.setPosition(0)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r19.hasOutputFormat != false) goto L_0x00d0\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|int r13 = r19.adtsScratch.readBits(2) + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|if (r13 == 2) goto L_0x003b\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|android.util.Log.w(TAG, new java.lang.StringBuilder().append(\"Detected audio object type: \").append(r13).append(\", but assuming AAC LC.\").toString())\lr13 = 2\l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|PHI: r13 \l  PHI: (r13v1 'audioObjectType' int) = (r13v0 'audioObjectType' int), (r13v2 'audioObjectType' int) binds: [B:3:0x001a, B:4:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|int r18 = r19.adtsScratch.readBits(4)\lr19.adtsScratch.skipBits(1)\lbyte[] r15 = com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacAudioSpecificConfig(r13, r18, r19.adtsScratch.readBits(3))\landroid.util.Pair r14 = com.google.android.exoplayer2.util.CodecSpecificDataUtil.parseAacAudioSpecificConfig(r15)\lcom.google.android.exoplayer2.Format r17 = com.google.android.exoplayer2.Format.createAudioSampleFormat(r19.formatId, com.google.android.exoplayer2.util.MimeTypes.AUDIO_AAC, (java.lang.String) null, \-1, \-1, ((java.lang.Integer) r14.second).intValue(), ((java.lang.Integer) r14.first).intValue(), java.util.Collections.singletonList(r15), (com.google.android.exoplayer2.drm.DrmInitData) null, 0, r19.language)\lr19.sampleDurationUs = 1024000000 \/ ((long) r17.sampleRate)\lr19.output.format(r17)\lr19.hasOutputFormat = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x00a3|r19.adtsScratch.skipBits(4)\lint r7 = (r19.adtsScratch.readBits(13) + \-2) + \-5\l}"];
Node_7 [shape=record,label="{7\:\ 0x00bd|if (r19.hasCrc == false) goto L_0x00c1\l}"];
Node_8 [shape=record,label="{8\:\ 0x00bf|int r7 = r7 + \-2\l}"];
Node_9 [shape=record,label="{9\:\ 0x00c1|PHI: r7 \l  PHI: (r7v1 'sampleSize' int) = (r7v0 'sampleSize' int), (r7v2 'sampleSize' int) binds: [B:7:0x00bd, B:8:0x00bf] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r19\lsetReadingSampleState(r19.output, r19.sampleDurationUs, 0, r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x00cf|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x00d0|r19.adtsScratch.skipBits(10)\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.AdtsReader.parseAdtsHeader((r19v0 'this' com.google.android.exoplayer2.extractor.ts.AdtsReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_6;
}

