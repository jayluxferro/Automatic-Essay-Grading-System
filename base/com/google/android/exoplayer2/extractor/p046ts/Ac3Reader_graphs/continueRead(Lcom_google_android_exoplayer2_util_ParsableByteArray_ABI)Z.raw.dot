digraph "CFG forcom.google.android.exoplayer2.extractor.ts.Ac3Reader.continueRead(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;[BI)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0004: IGET  (r2 I:int) = (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Reader) com.google.android.exoplayer2.extractor.ts.Ac3Reader.bytesRead int \l0x0006: ARITH  (r2 I:int) = (r6 I:int A[D('targetLength' int)]) \- (r2 I:int) \l0x0008: INVOKE  (r0 I:int) = (r1 I:int), (r2 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000c: IGET  (r1 I:int) = (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Reader) com.google.android.exoplayer2.extractor.ts.Ac3Reader.bytesRead int \l0x000e: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r5 I:byte[] A[D('target' byte[])])\l  (r1 I:int)\l  (r0 I:int A[D('bytesToRead' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l0x0011: IGET  (r1 I:int) = (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Reader) com.google.android.exoplayer2.extractor.ts.Ac3Reader.bytesRead int \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('bytesToRead' int)]) \l0x0014: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Reader)\l com.google.android.exoplayer2.extractor.ts.Ac3Reader.bytesRead int \l0x0016: IGET  (r1 I:int) = (r3 I:com.google.android.exoplayer2.extractor.ts.Ac3Reader) com.google.android.exoplayer2.extractor.ts.Ac3Reader.bytesRead int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('targetLength' int)])  \-\> B:4:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN  (r1 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.extractor.ts.Ac3Reader.continueRead((r3 'this' I:com.google.android.exoplayer2.extractor.ts.Ac3Reader A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('source' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('targetLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000c\-0x001d: r0 'bytesToRead' int\l  ?\-0x001d: r4 'source' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x001d: r5 'target' byte[]\l  ?\-0x001d: r6 'targetLength' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

