digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.appendToNalUnit([BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r4 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.isFilling boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: ARITH  (r20 I:int) = (r27 I:int A[D('limit' int)]) \- (r26 I:int A[D('offset' int)]) \l0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x000b: IGET  (r4 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x000d: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0010: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x0012: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: ARITH  (r21 I:int) = (r21 I:int) + (r20 I:int A[D('readLength' int)]) \l0x0016: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x001c: IGET  (r4 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x001e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0020: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x0022: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: ARITH  (r21 I:int) = (r21 I:int) + (r20 I:int A[D('readLength' int)]) \l0x0026: ARITH  (r21 I:int) = (r21 I:int) * (2 int) \l0x0028: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: INVOKE  (r4 I:byte[]) = (r4 I:byte[]), (r0 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x002e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0030: IPUT  \l  (r4 I:byte[])\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|0x0032: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0034: IGET  (r4 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0038: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x003a: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY] A[D('data' byte[])]) \l0x003e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x0040: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0042: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('readLength' int)])\l \l0x0044: INVOKE  \l  (r0 I:java.lang.Object)\l  (r1 I:int)\l  (r4 I:java.lang.Object)\l  (r2 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0049: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x004b: ARITH  (r4 I:int) = (r4 I:int) + (r20 I:int A[D('readLength' int)]) \l0x004d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x004f: IPUT  \l  (r4 I:int)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x0051: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0053: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0055: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0057: IGET  (r0 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x0059: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x005b: CONST  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x005f: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x0061: MOVE  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0063: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0065: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0067: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0069: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:byte[])\l  (r1 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.reset(byte[], int, int):void type: VIRTUAL \l0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x006e: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0070: CONST  (r21 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0072: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0074: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0078|0x0078: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_8 [shape=record,label="{8\:\ 0x007a|0x007a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x007c: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x007e: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0080: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0082: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x0085: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0087: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0089: CONST  (r21 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x008b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008d: INVOKE  (r6 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x0091: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0093: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0095: CONST  (r21 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0097: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0099: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x009c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x009e: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00a0: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x00a4|0x00a4: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_10 [shape=record,label="{10\:\ 0x00a6|0x00a6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00a8: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00aa: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00ad: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00af: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00b1: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x00b5|0x00b5: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_12 [shape=record,label="{12\:\ 0x00b7|0x00b7: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00b9: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00bb: INVOKE  (r7 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00bf: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00c1: IGET  (r4 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.detectAccessUnits boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x00c3|0x00c3: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x00d3 \l}"];
Node_14 [shape=record,label="{14\:\ 0x00c5|0x00c5: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00c8: IPUT  \l  (r4 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.isFilling boolean \l0x00ca: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00cc: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x00ce: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r7 I:int A[D('sliceType' int)])\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.setSliceType(int):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x00d3|0x00d3: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00d5: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00d7: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x00db|0x00db: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_17 [shape=record,label="{17\:\ 0x00dd|0x00dd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00df: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x00e1: INVOKE  (r9 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00e5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00e7: IGET  (r4 I:android.util.SparseArray\<com.google.android.exoplayer2.util.NalUnitUtil$PpsData\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.pps android.util.SparseArray \l0x00e9: INVOKE  (r4 I:int) = \l  (r4 I:android.util.SparseArray)\l  (r9 I:int A[D('picParameterSetId' int)])\l android.util.SparseArray.indexOfKey(int):int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x00ed|0x00ed: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x00f6 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00ef|0x00ef: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00f2: IPUT  \l  (r4 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.isFilling boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x00f6|0x00f6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00f8: IGET  (r4 I:android.util.SparseArray\<com.google.android.exoplayer2.util.NalUnitUtil$PpsData\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.pps android.util.SparseArray \l0x00fa: INVOKE  (r19 I:java.lang.Object) = \l  (r4 I:android.util.SparseArray)\l  (r9 I:int A[D('picParameterSetId' int)])\l android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x00fe: CHECK_CAST  (r19 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData) = (com.google.android.exoplayer2.util.NalUnitUtil$PpsData) (r19 I:?[OBJECT, ARRAY]) \l0x0100: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0102: IGET  (r4 I:android.util.SparseArray\<com.google.android.exoplayer2.util.NalUnitUtil$SpsData\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sps android.util.SparseArray \l0x0104: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData)])\l \l0x0106: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.PpsData.seqParameterSetId int \l0x0108: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010c: INVOKE  (r5 I:java.lang.Object) = (r4 I:android.util.SparseArray), (r0 I:int) android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x0110: CHECK_CAST  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData) = (com.google.android.exoplayer2.util.NalUnitUtil$SpsData) (r5 I:?[OBJECT, ARRAY]) \l0x0112: IGET  (r4 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.separateColorPlaneFlag boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x0114|0x0114: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x012f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0116|0x0116: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0118: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x011a: CONST  (r21 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x011c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011e: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0122|0x0122: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0124|0x0124: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0126: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0128: CONST  (r21 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x012a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x012c: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x012f|0x012f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0131: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0133: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.frameNumLength int \l0x0135: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0137: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0139: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x013d|0x013d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_27 [shape=record,label="{27\:\ 0x013f|0x013f: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0140: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0141: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0142: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0144: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0146: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.frameNumLength int \l0x0148: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x014a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x014c: INVOKE  (r8 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x0150: IGET  (r4 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.frameMbsOnlyFlag boolean \l}"];
Node_28 [shape=record,label="{28\:\ 0x0152|0x0152: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0183 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0154|0x0154: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0156: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0158: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x015a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x015c: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0160|0x0160: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0162|0x0162: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0164: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0166: INVOKE  (r10 I:boolean A[D('fieldPicFlag' boolean)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x016a|0x016a: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fieldPicFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0183 \l}"];
Node_33 [shape=record,label="{33\:\ 0x016c|0x016c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x016e: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0170: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0172: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0174: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x0178|0x0178: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_35 [shape=record,label="{35\:\ 0x017a|0x017a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x017c: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x017e: INVOKE  (r12 I:boolean A[D('bottomFieldFlag' boolean)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l0x0182: CONST  (r11 I:?[boolean, int, float, short, byte, char] A[D('bottomFieldFlagPresent' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0183|0x0183: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0185: IGET  (r4 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x0187: CONST  (r21 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0189: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x018b|0x018b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x01f4 \l}"];
Node_38 [shape=record,label="{38\:\ 0x018d|0x018d: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x018e|0x018e: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x018f|0x018f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('idrPicFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x01a3 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0191|0x0191: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0193: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0195: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_42 [shape=record,label="{42\:\ 0x0199|0x0199: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_43 [shape=record,label="{43\:\ 0x019b|0x019b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x019d: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x019f: INVOKE  (r14 I:int A[D('idrPicId' int)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l}"];
Node_44 [shape=record,label="{44\:\ 0x01a3|0x01a3: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01a4: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01a6: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01a8: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01aa: IGET  (r4 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.picOrderCountType int \l}"];
Node_45 [shape=record,label="{45\:\ 0x01ac|0x01ac: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x01f6 \l}"];
Node_46 [shape=record,label="{46\:\ 0x01ae|0x01ae: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01b0: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x01b2: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.picOrderCntLsbLength int \l0x01b4: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01b6: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01b8: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(int):boolean type: VIRTUAL \l}"];
Node_47 [shape=record,label="{47\:\ 0x01bc|0x01bc: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_48 [shape=record,label="{48\:\ 0x01be|0x01be: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01c0: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x01c2: IGET  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.picOrderCntLsbLength int \l0x01c4: MOVE  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c6: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c8: INVOKE  (r15 I:int A[D('picOrderCntLsb' int)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x01cc: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData)])\l \l0x01ce: IGET  (r4 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.PpsData.bottomFieldPicOrderInFramePresentFlag boolean \l}"];
Node_49 [shape=record,label="{49\:\ 0x01d0|0x01d0: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_50 [shape=record,label="{50\:\ 0x01d2|0x01d2: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fieldPicFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_51 [shape=record,label="{51\:\ 0x01d4|0x01d4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01d6: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x01d8: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_52 [shape=record,label="{52\:\ 0x01dc|0x01dc: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_53 [shape=record,label="{53\:\ 0x01de|0x01de: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01e0: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x01e2: INVOKE  (r16 I:int A[D('deltaPicOrderCntBottom' int)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l}"];
Node_54 [shape=record,label="{54\:\ 0x01e6|0x01e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01e8: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x01ea: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l  (r6 I:int A[D('nalRefIdc' int)])\l  (r7 I:int A[D('sliceType' int)])\l  (r8 I:int A[D('frameNum' int)])\l  (r9 I:int A[D('picParameterSetId' int)])\l  (r10 I:boolean A[D('fieldPicFlag' boolean)])\l  (r11 I:boolean A[D('bottomFieldFlagPresent' boolean)])\l  (r12 I:boolean A[D('bottomFieldFlag' boolean)])\l  (r13 I:boolean A[D('idrPicFlag' boolean)])\l  (r14 I:int A[D('idrPicId' int)])\l  (r15 I:int A[D('picOrderCntLsb' int)])\l  (r16 I:int A[D('deltaPicOrderCntBottom' int)])\l  (r17 I:int A[D('deltaPicOrderCnt0' int)])\l  (r18 I:int A[D('deltaPicOrderCnt1' int)])\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.setAll(com.google.android.exoplayer2.util.NalUnitUtil$SpsData, int, int, int, int, boolean, boolean, boolean, boolean, int, int, int, int, int):void type: VIRTUAL \l0x01ed: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01ee: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x01f0: IPUT  \l  (r4 I:boolean)\l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.isFilling boolean \l}"];
Node_55 [shape=record,label="{55\:\ 0x01f4|0x01f4: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('idrPicFlag' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_56 [shape=record,label="{56\:\ 0x01f6|0x01f6: IGET  (r4 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.picOrderCountType int \l0x01f8: CONST  (r21 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x01fa: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_57 [shape=record,label="{57\:\ 0x01fc|0x01fc: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_58 [shape=record,label="{58\:\ 0x01fe|0x01fe: IGET  (r4 I:boolean) = \l  (r5 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData A[D('spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.deltaPicOrderAlwaysZeroFlag boolean \l}"];
Node_59 [shape=record,label="{59\:\ 0x0200|0x0200: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_60 [shape=record,label="{60\:\ 0x0202|0x0202: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0204: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0206: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_61 [shape=record,label="{61\:\ 0x020a|0x020a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_62 [shape=record,label="{62\:\ 0x020c|0x020c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x020e: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0210: INVOKE  (r17 I:int A[D('deltaPicOrderCnt0' int)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l0x0214: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData)])\l \l0x0216: IGET  (r4 I:boolean) = \l  (r0 I:com.google.android.exoplayer2.util.NalUnitUtil$PpsData)\l com.google.android.exoplayer2.util.NalUnitUtil.PpsData.bottomFieldPicOrderInFramePresentFlag boolean \l}"];
Node_63 [shape=record,label="{63\:\ 0x0218|0x0218: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_64 [shape=record,label="{64\:\ 0x021a|0x021a: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fieldPicFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x01e6 \l}"];
Node_65 [shape=record,label="{65\:\ 0x021c|0x021c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x021e: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0220: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadExpGolombCodedNum():boolean type: VIRTUAL \l}"];
Node_66 [shape=record,label="{66\:\ 0x0224|0x0224: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0006 \l}"];
Node_67 [shape=record,label="{67\:\ 0x0226|0x0226: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0228: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x022a: INVOKE  (r18 I:int A[D('deltaPicOrderCnt1' int)]) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.appendToNalUnit((r24 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r25 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x018e\-0x01f4: r13 'idrPicFlag' boolean\l  0x018f\-0x01f4: r14 'idrPicId' int\l  0x01a4\-0x01f4: r15 'picOrderCntLsb' int\l  0x01a6\-0x01f4: r16 'deltaPicOrderCntBottom' int\l  0x01a8\-0x01f4: r17 'deltaPicOrderCnt0' int\l  0x01aa\-0x01f4: r18 'deltaPicOrderCnt1' int\l  0x0112\-0x022e: r5 'spsData' com.google.android.exoplayer2.util.NalUnitUtil$SpsData\l  0x0091\-0x022e: r6 'nalRefIdc' int\l  0x00bf\-0x022e: r7 'sliceType' int\l  0x0150\-0x022e: r8 'frameNum' int\l  0x00e5\-0x022e: r9 'picParameterSetId' int\l  0x0140\-0x022e: r10 'fieldPicFlag' boolean\l  0x0141\-0x022e: r11 'bottomFieldFlagPresent' boolean\l  0x0142\-0x022e: r12 'bottomFieldFlag' boolean\l  0x01f6\-0x022e: r13 'idrPicFlag' boolean\l  0x01f6\-0x022e: r14 'idrPicId' int\l  0x01f6\-0x022e: r15 'picOrderCntLsb' int\l  0x01f6\-0x022e: r16 'deltaPicOrderCntBottom' int\l  0x01f6\-0x022e: r17 'deltaPicOrderCnt0' int\l  0x01f6\-0x022e: r18 'deltaPicOrderCnt1' int\l  0x0100\-0x022e: r19 'ppsData' com.google.android.exoplayer2.util.NalUnitUtil$PpsData\l  0x0009\-0x022e: r20 'readLength' int\l  ?\-0x022e: r25 'data' byte[]\l  ?\-0x022e: r26 'offset' int\l  ?\-0x022e: r27 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_2;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_2;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_2;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_2;
Node_15 -> Node_16;
Node_16 -> Node_2;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_2;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_2;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_2;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_36;
Node_29 -> Node_30;
Node_30 -> Node_2;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_2;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_55;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_44;
Node_41 -> Node_42;
Node_42 -> Node_2;
Node_42 -> Node_43[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_56;
Node_46 -> Node_47;
Node_47 -> Node_2;
Node_47 -> Node_48[style=dashed];
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_54;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_54;
Node_51 -> Node_52;
Node_52 -> Node_2;
Node_52 -> Node_53[style=dashed];
Node_53 -> Node_54;
Node_54 -> Node_2;
Node_55 -> Node_39;
Node_56 -> Node_57;
Node_57 -> Node_54;
Node_57 -> Node_58[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_54;
Node_59 -> Node_60[style=dashed];
Node_60 -> Node_61;
Node_61 -> Node_2;
Node_61 -> Node_62[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_54;
Node_63 -> Node_64[style=dashed];
Node_64 -> Node_54;
Node_64 -> Node_65[style=dashed];
Node_65 -> Node_66;
Node_66 -> Node_2;
Node_66 -> Node_67[style=dashed];
Node_67 -> Node_54;
}

