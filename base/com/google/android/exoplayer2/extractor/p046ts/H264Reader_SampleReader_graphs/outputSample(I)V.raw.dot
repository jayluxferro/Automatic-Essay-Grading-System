digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.outputSample(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleIsKeyframe boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitStartPosition long \l0x0007: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.samplePosition long \l0x0009: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l0x000a: CAST  (r5 I:int) = (int) (r0 I:long) \l0x000b: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x000d: IGET  (r2 I:long) = \l  (r8 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleTimeUs long \l0x000f: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x0011: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int A[D('flags' int)])\l  (r5 I:int A[D('size' int)])\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.outputSample((r8 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x0015: r4 'flags' int\l  0x000b\-0x0015: r5 'size' int\l  ?\-0x0016: r9 'offset' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

