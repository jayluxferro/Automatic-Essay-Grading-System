digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.startNalUnit(JIJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IPUT  \l  (r7 I:int A[D('type' int)])\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x0003: IPUT  \l  (r8 I:long A[D('pesTimeUs' long)])\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitTimeUs long \l0x0005: IPUT  \l  (r5 I:long A[D('position' long)])\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitStartPosition long \l0x0007: IGET  (r1 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.allowNonIdrKeyframes boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r1 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.detectAccessUnits boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x001e: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: IGET  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.previousSliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0023: IGET  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0025: IPUT  \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.previousSliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0027: IPUT  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData A[D('newSliceHeader' com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)])\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0029: IGET  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x002b: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.clear():void type: VIRTUAL \l0x002e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: IPUT  \l  (r1 I:int)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bufferLength int \l0x0031: IPUT  \l  (r3 I:boolean)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.isFilling boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.startNalUnit((r4 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('pesTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0023\-0x0033: r0 'newSliceHeader' com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData\l  ?\-0x0033: r5 'position' long\l  ?\-0x0033: r7 'type' int\l  ?\-0x0033: r8 'pesTimeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

