digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.\<init\>(Lcom\/google\/android\/exoplayer2\/extractor\/TrackOutput;ZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0005: IPUT  \l  (r4 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('output' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.output com.google.android.exoplayer2.extractor.TrackOutput \l0x0007: IPUT  \l  (r5 I:boolean A[D('allowNonIdrKeyframes' boolean)])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.allowNonIdrKeyframes boolean \l0x0009: IPUT  \l  (r6 I:boolean A[D('detectAccessUnits' boolean)])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.detectAccessUnits boolean \l0x000b: NEW_INSTANCE  (r0 I:android.util.SparseArray) =  android.util.SparseArray \l0x000d: INVOKE  (r0 I:android.util.SparseArray) android.util.SparseArray.\<init\>():void type: DIRECT \l0x0010: IPUT  \l  (r0 I:android.util.SparseArray\<com.google.android.exoplayer2.util.NalUnitUtil$SpsData\>)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sps android.util.SparseArray \l0x0012: NEW_INSTANCE  (r0 I:android.util.SparseArray) =  android.util.SparseArray \l0x0014: INVOKE  (r0 I:android.util.SparseArray) android.util.SparseArray.\<init\>():void type: DIRECT \l0x0017: IPUT  \l  (r0 I:android.util.SparseArray\<com.google.android.exoplayer2.util.NalUnitUtil$PpsData\>)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.pps android.util.SparseArray \l0x0019: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) =  com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x001b: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$1)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.\<init\>(com.google.android.exoplayer2.extractor.ts.H264Reader$1):void type: DIRECT \l0x001e: IPUT  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.previousSliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0020: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) =  com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0022: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r1 I:com.google.android.exoplayer2.extractor.ts.H264Reader$1)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.\<init\>(com.google.android.exoplayer2.extractor.ts.H264Reader$1):void type: DIRECT \l0x0025: IPUT  \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0027: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x0029: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x002b: IPUT  \l  (r0 I:byte[])\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x002d: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) =  com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x002f: IGET  (r1 I:byte[]) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.buffer byte[] \l0x0031: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.\<init\>(byte[], int, int):void type: DIRECT \l0x0034: IPUT  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.bitArray com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0036: INVOKE  \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.reset():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0039|0x0039: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.\<init\>((r3 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('output' com.google.android.exoplayer2.extractor.TrackOutput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('allowNonIdrKeyframes' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('detectAccessUnits' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0039: r4 'output' com.google.android.exoplayer2.extractor.TrackOutput\l  ?\-0x0039: r5 'allowNonIdrKeyframes' boolean\l  ?\-0x0039: r6 'detectAccessUnits' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

