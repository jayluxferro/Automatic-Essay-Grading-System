digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.endNalUnit(JI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: IGET  (r3 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x0004: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r3 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.detectAccessUnits boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x000e: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.previousSliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0010: INVOKE  (r3 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.access$100(com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData, com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0030 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r3 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.readingSample boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IGET  (r4 I:long) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitStartPosition long \l0x001c: ARITH  (r4 I:long) = (r8 I:long A[D('position' long)]) \- (r4 I:long) \l0x001e: CAST  (r0 I:int) = (int) (r4 I:long) \l0x001f: ARITH  (r3 I:int) = (r10 I:int A[D('offset' int)]) + (r0 I:int A[D('nalUnitLength' int)]) \l0x0021: INVOKE  \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l  (r3 I:int)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.outputSample(int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IGET  (r4 I:long) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitStartPosition long \l0x0026: IPUT  \l  (r4 I:long)\l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.samplePosition long \l0x0028: IGET  (r4 I:long) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitTimeUs long \l0x002a: IPUT  \l  (r4 I:long)\l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleTimeUs long \l0x002c: IPUT  \l  (r1 I:boolean)\l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleIsKeyframe boolean \l0x002e: IPUT  \l  (r2 I:boolean)\l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.readingSample boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IGET  (r3 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleIsKeyframe boolean \l0x0032: IGET  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l0x0034: CONST  (r5 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0047 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IGET  (r4 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.allowNonIdrKeyframes boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: IGET  (r4 I:int) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.nalUnitType int \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0048 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: IGET  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData) = \l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sliceHeader com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData \l0x0041: INVOKE  (r4 I:boolean) = \l  (r4 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader$SliceHeaderData)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.SliceHeaderData.isISlice():boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0048 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l0x0049: IPUT  \l  (r1 I:boolean)\l  (r7 I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader)\l com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.sampleIsKeyframe boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.extractor.ts.H264Reader.SampleReader.endNalUnit((r7 'this' I:com.google.android.exoplayer2.extractor.ts.H264Reader$SampleReader A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('position' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001f\-0x0024: r0 'nalUnitLength' int\l  ?\-0x004b: r8 'position' long\l  ?\-0x004b: r10 'offset' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

