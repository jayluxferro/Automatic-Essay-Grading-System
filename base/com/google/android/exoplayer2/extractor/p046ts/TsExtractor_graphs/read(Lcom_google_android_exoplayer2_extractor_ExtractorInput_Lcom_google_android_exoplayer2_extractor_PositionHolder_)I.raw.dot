digraph "CFG forcom.google.android.exoplayer2.extractor.ts.TsExtractor.read(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/PositionHolder;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0004: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r6 I:byte[]) = (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x000e: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r17 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0014: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: ARITH  (r0 I:int) = (940 int) \- (r0 I:int) \l0x0018: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r18 I:?[int, float, short, byte, char]) = \l  (188(0xbc, float:2.63E\-43) ?[int, float, short, byte, char])\l \l0x001c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x004c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0024: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0026: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r4 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IF  (r4 I:?[int, byte, short, char] A[D('bytesLeft' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0030: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0032: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r17 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0038: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003e: INVOKE  \l  (r6 I:java.lang.Object A[D('data' byte[])])\l  (r0 I:int)\l  (r6 I:java.lang.Object A[D('data' byte[])])\l  (r1 I:int)\l  (r4 I:int A[D('bytesLeft' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0041|0x0041: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0043: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0045: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0047: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r6 I:byte[] A[D('data' byte[])])\l  (r4 I:int A[D('bytesLeft' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.reset(byte[], int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x004c|0x004c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004e: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0050: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0052: INVOKE  (r17 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0056: CONST  (r18 I:?[int, float, short, byte, char]) = \l  (188(0xbc, float:2.63E\-43) ?[int, float, short, byte, char])\l \l0x0058: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x005c|0x005c: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x008b \l}"];
Node_8 [shape=record,label="{8\:\ 0x005e|0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0060: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0062: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0064: INVOKE  (r9 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x0068: ARITH  (r0 I:int) = (940 int) \- (r9 I:int A[D('limit' int)]) \l0x006a: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l \l0x006e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0070: INVOKE  (r16 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ExtractorInput)\l  (r6 I:byte[] A[D('data' byte[])])\l  (r9 I:int A[D('limit' int)])\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.read(byte[], int, int):int type: INTERFACE \l0x0074: CONST  (r17 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0076: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('read' int)])\l \l0x0078: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x007a|0x007a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x007f \l}"];
Node_10 [shape=record,label="{10\:\ 0x007c|0x007c: CONST  (r17 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x007e|0x007e: RETURN  (r17 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007f|0x007f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0081: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0083: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0085: ARITH  (r18 I:int) = (r9 I:int A[D('limit' int)]) + (r16 I:int A[D('read' int)]) \l0x0087: INVOKE  \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.setLimit(int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x008b|0x008b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x008d: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x008f: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0091: INVOKE  (r9 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x0095: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0097: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0099: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x009b: INVOKE  (r14 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x009f|0x009f: IF  (r14 I:?[int, byte, short, char] A[D('position' int)]) \>= (r9 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:18:0x00ae \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a1|0x00a1: AGET  (r17 I:byte A[IMMUTABLE_TYPE]) = \l  (r6 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r14 I:?[int, short, byte, char] A[D('position' int)])\l \l0x00a3: CONST  (r18 I:?[int, float, short, byte, char]) = (71 ?[int, float, short, byte, char]) \l0x00a5: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a7: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a9|0x00a9: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x00ae \l}"];
Node_17 [shape=record,label="{17\:\ 0x00ab|0x00ab: ARITH  (r14 I:int A[D('position' int)]) = (r14 I:int A[D('position' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x00ae|0x00ae: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00b0: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x00b2: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00b4: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00b6: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r14 I:int A[D('position' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x00b9: ARITH  (r8 I:int) = (r14 I:int A[D('position' int)]) + (188 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x00bb|0x00bb: IF  (r8 I:?[int, byte, short, char] A[D('endOfPacket' int)]) \<= (r9 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:21:0x00c0 \l}"];
Node_20 [shape=record,label="{20\:\ 0x00bd|0x00bd: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x00c0|0x00c0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00c2: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x00c4: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00c6: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00c8: INVOKE  \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x00cb: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00cd: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x00cf: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00d1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00d3: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00d5: MOVE  (r18 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00d7: CONST  (r19 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x00d9: INVOKE  \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r18 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r19 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(com.google.android.exoplayer2.util.ParsableBitArray, int):void type: VIRTUAL \l0x00dc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00de: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00e0: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00e2: INVOKE  (r17 I:boolean) = (r17 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00e6|0x00e6: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00f6 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00e8|0x00e8: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00ea: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x00ec: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00ee: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00f0: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int A[D('endOfPacket' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x00f3: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x00f6|0x00f6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00f8: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x00fa: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00fc: INVOKE  (r12 I:boolean) = (r17 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l0x0100: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0102: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0104: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0106: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0108: INVOKE  \l  (r17 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x010b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x010d: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x010f: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0111: CONST  (r18 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x0113: INVOKE  (r13 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0117: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0119: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x011b: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x011d: CONST  (r18 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x011f: INVOKE  \l  (r17 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.skipBits(int):void type: VIRTUAL \l0x0122: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0124: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0126: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0128: INVOKE  (r2 I:boolean) = (r17 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l0x012c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x012e: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x0130: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0132: INVOKE  (r10 I:boolean) = (r17 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l0x0136: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0137: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0139: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableBitArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsScratch com.google.android.exoplayer2.util.ParsableBitArray \l0x013b: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x013d: CONST  (r18 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x013f: INVOKE  (r5 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r18 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0143: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0145: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.mode int \l0x0147: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0149: CONST  (r18 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x014b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x014d: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x014f|0x014f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0188 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0151|0x0151: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0153: IGET  (r0 I:android.util.SparseIntArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.continuityCounters android.util.SparseIntArray \l0x0155: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0157: ARITH  (r18 I:int) = (r5 I:int A[D('continuityCounter' int)]) + (\-1 int) \l0x0159: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x015b: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x015d: INVOKE  (r15 I:int) = \l  (r0 I:android.util.SparseIntArray)\l  (r13 I:int A[D('pid' int)])\l  (r1 I:int)\l android.util.SparseIntArray.get(int, int):int type: VIRTUAL \l0x0161: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0163: IGET  (r0 I:android.util.SparseIntArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.continuityCounters android.util.SparseIntArray \l0x0165: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0167: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0169: INVOKE  \l  (r0 I:android.util.SparseIntArray)\l  (r13 I:int A[D('pid' int)])\l  (r5 I:int A[D('continuityCounter' int)])\l android.util.SparseIntArray.put(int, int):void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x016c|0x016c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousCounter' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('continuityCounter' int)])  \-\> B:30:0x017f \l}"];
Node_28 [shape=record,label="{28\:\ 0x016e|0x016e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('payloadExists' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0188 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0170|0x0170: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0172: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0174: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0176: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0178: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int A[D('endOfPacket' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x017b: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x017f|0x017f: ARITH  (r17 I:int) = (r15 I:int A[D('previousCounter' int)]) + (1 int) \l0x0181: ARITH  (r17 I:int) = (r17 I:int) % (16 int) \l0x0183: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0185|0x0185: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('continuityCounter' int)]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0188 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0187|0x0187: CONST  (r7 I:?[boolean, int, float, short, byte, char] A[D('discontinuityFound' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0188|0x0188: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('adaptationFieldExists' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x019f \l}"];
Node_34 [shape=record,label="{34\:\ 0x018a|0x018a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x018c: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x018e: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0190: INVOKE  (r3 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0194: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0196: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x0198: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x019a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x019c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r3 I:int A[D('adaptationFieldLength' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x019f|0x019f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('payloadExists' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x01ea \l}"];
Node_36 [shape=record,label="{36\:\ 0x01a1|0x01a1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01a3: IGET  (r0 I:android.util.SparseArray\<com.google.android.exoplayer2.extractor.ts.TsPayloadReader\>) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPayloadReaders android.util.SparseArray \l0x01a5: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01a7: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x01a9: INVOKE  (r11 I:java.lang.Object) = \l  (r0 I:android.util.SparseArray)\l  (r13 I:int A[D('pid' int)])\l android.util.SparseArray.get(int):java.lang.Object type: VIRTUAL \l0x01ad: CHECK_CAST  (r11 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader) = (com.google.android.exoplayer2.extractor.ts.TsPayloadReader) (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x01af|0x01af: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('payloadReader' com.google.android.exoplayer2.extractor.ts.TsPayloadReader)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x01ea \l}"];
Node_38 [shape=record,label="{38\:\ 0x01b1|0x01b1: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('discontinuityFound' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x01b6 \l}"];
Node_39 [shape=record,label="{39\:\ 0x01b3|0x01b3: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader A[D('payloadReader' com.google.android.exoplayer2.extractor.ts.TsPayloadReader)])\l com.google.android.exoplayer2.extractor.ts.TsPayloadReader.seek():void type: INTERFACE \l}"];
Node_40 [shape=record,label="{40\:\ 0x01b6|0x01b6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01b8: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x01ba: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01bc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x01be: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int A[D('endOfPacket' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setLimit(int):void type: VIRTUAL \l0x01c1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01c3: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x01c5: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01c7: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x01c9: INVOKE  \l  (r11 I:com.google.android.exoplayer2.extractor.ts.TsPayloadReader A[D('payloadReader' com.google.android.exoplayer2.extractor.ts.TsPayloadReader)])\l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r12 I:boolean A[D('payloadUnitStartIndicator' boolean)])\l com.google.android.exoplayer2.extractor.ts.TsPayloadReader.consume(com.google.android.exoplayer2.util.ParsableByteArray, boolean):void type: INTERFACE \l0x01cc: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01ce: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x01d0: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01d2: INVOKE  (r17 I:int) = \l  (r17 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x01d6: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x01d8|0x01d8: IF  (r0 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char] A[D('endOfPacket' int)])  \-\> B:45:0x01f9 \l}"];
Node_42 [shape=record,label="{42\:\ 0x01da|0x01da: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x01dc|0x01dc: INVOKE  (r17 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x01df: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01e1: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x01e3: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01e5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x01e7: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r9 I:int A[D('limit' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setLimit(int):void type: VIRTUAL \l}"];
Node_44 [shape=record,label="{44\:\ 0x01ea|0x01ea: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x01ec: IGET  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.TsExtractor)\l com.google.android.exoplayer2.extractor.ts.TsExtractor.tsPacketBuffer com.google.android.exoplayer2.util.ParsableByteArray \l0x01ee: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01f0: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x01f2: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r8 I:int A[D('endOfPacket' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.setPosition(int):void type: VIRTUAL \l0x01f5: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x01f9|0x01f9: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.extractor.ts.TsExtractor.read((r20 'this' I:com.google.android.exoplayer2.extractor.ts.TsExtractor A[IMMUTABLE_TYPE, THIS]), (r21 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:com.google.android.exoplayer2.extractor.PositionHolder A[D('seekPosition' com.google.android.exoplayer2.extractor.PositionHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002c\-0x004c: r4 'bytesLeft' int\l  0x0074\-0x007e: r16 'read' int\l  0x0068\-0x008b: r9 'limit' int\l  0x007f\-0x008b: r16 'read' int\l  0x0161\-0x0188: r15 'previousCounter' int\l  0x0194\-0x019f: r3 'adaptationFieldLength' int\l  0x01af\-0x01ea: r11 'payloadReader' com.google.android.exoplayer2.extractor.ts.TsPayloadReader\l  0x012c\-0x01fb: r2 'adaptationFieldExists' boolean\l  0x0143\-0x01fb: r5 'continuityCounter' int\l  0x000a\-0x01fb: r6 'data' byte[]\l  0x0137\-0x01fb: r7 'discontinuityFound' boolean\l  0x00bb\-0x01fb: r8 'endOfPacket' int\l  0x0095\-0x01fb: r9 'limit' int\l  0x0136\-0x01fb: r10 'payloadExists' boolean\l  0x01f9\-0x01fb: r11 'payloadReader' com.google.android.exoplayer2.extractor.ts.TsPayloadReader\l  0x0100\-0x01fb: r12 'payloadUnitStartIndicator' boolean\l  0x0117\-0x01fb: r13 'pid' int\l  0x009f\-0x01fb: r14 'position' int\l  ?\-0x01fb: r21 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x01fb: r22 'seekPosition' com.google.android.exoplayer2.extractor.PositionHolder\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_6;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_11;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_11;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_11;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_44;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_44;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_45;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_11;
Node_45 -> Node_43;
}

