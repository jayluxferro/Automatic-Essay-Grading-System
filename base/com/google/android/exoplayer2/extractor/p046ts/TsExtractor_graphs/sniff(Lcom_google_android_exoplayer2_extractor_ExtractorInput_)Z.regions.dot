digraph "CFG forcom.google.android.exoplayer2.extractor.ts.TsExtractor.sniff(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
subgraph cluster_Region_736087543 {
label = "R(3:0|(4:3|(1:(1:9)(1:10))|6|14)|15)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] byte[] r0 = r6.tsPacketBuffer.data\lr7.peekFully(r0, 0, BUFFER_SIZE)\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_423835567 {
label = "LOOP:0: (4:3|(1:(1:9)(1:10))|6|14)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000d|if (r2 \< TS_PACKET_SIZE) goto L_0x000f\l}"];
subgraph cluster_Region_1286009093 {
label = "R(4:3|(1:(1:9)(1:10))|6|14)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|int r1 = 0\l}"];
subgraph cluster_LoopRegion_2010358847 {
label = "LOOP:1: (1:(1:9)(1:10))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r1 != 5) goto L_0x0018\l}"];
subgraph cluster_Region_1186467546 {
label = "R(1:(1:9)(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_222341205 {
label = "IF [B:8:0x001f] THEN: R(1:9) ELSE: R(1:10)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r0[(r1 * TS_PACKET_SIZE) + r2] != 71) goto L_0x0021\l}"];
subgraph cluster_Region_1788553972 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:9:0x0021\l|r2++\l}"];
}
subgraph cluster_Region_1143798468 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0024|LOOP_END\lLOOP:1: B:4:0x0010\-\>B:10:0x0024\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0013|r7.skipFully(r2)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
}
}
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000b|LOOP_START\lPHI: r2 \l  PHI: (r2v1 'j' int) = (r2v0 'j' int), (r2v2 'j' int) binds: [B:0:0x0000, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:9:0x0021\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:3:0x000f, B:10:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0010\-\>B:10:0x0024\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0013|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0017|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.ts.TsExtractor.sniff((r6v0 'this' com.google.android.exoplayer2.extractor.ts.TsExtractor A[IMMUTABLE_TYPE, THIS]), (r7v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_12[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_7;
Node_5 -> Node_11[style=dashed];
Node_8 -> Node_10[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_1;
Node_10 -> Node_4;
Node_6 -> Node_14;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_11 -> Node_6;
Node_12 -> Node_15;
Node_13 -> Node_9;
}

