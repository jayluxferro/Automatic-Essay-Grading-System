digraph "CFG forcom.google.android.exoplayer2.extractor.ts.H262Reader.parseCsdBuffer(Lcom\/google\/android\/exoplayer2\/extractor\/ts\/H262Reader$CsdBuffer;Ljava\/lang\/String;)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('csdBuffer' com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)])\l \l0x0002: IGET  (r2 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)\l com.google.android.exoplayer2.extractor.ts.H262Reader.CsdBuffer.data byte[] \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('csdBuffer' com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)])\l \l0x0006: IGET  (r3 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)\l com.google.android.exoplayer2.extractor.ts.H262Reader.CsdBuffer.length int \l0x0008: INVOKE  (r15 I:byte[]) = (r2 I:byte[]), (r3 I:int) java.util.Arrays.copyOf(byte[], int):byte[] type: STATIC \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x000d: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x000f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0011: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0014: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0016: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0018: MOVE  (r25 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x001b: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x001d: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x001f: MOVE  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: ARITH  (r2 I:int) = (r16 I:int A[D('firstByte' int)]) \<\< (4 int) \l0x0023: ARITH  (r3 I:int) = (r25 I:int A[D('secondByte' int)]) \>\> (4 int) \l0x0025: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l0x0027: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r25 I:?[int, boolean, short, byte, char] A[D('secondByte' int)]) & (15 ?[int, float, short, byte, char]) \l0x0029: ARITH  (r2 I:int) = (r2 I:int) \<\< (8 int) \l0x002b: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) \| (r27 I:?[int, boolean, short, byte, char] A[D('thirdByte' int)]) \l0x002d: CONST  (r12 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0030: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0032: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x0034: ARITH  (r14 I:int) = (r2 I:int) \>\> (4 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0036|0x0036: SWITCH  \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('aspectRatioCode' int)])\l k:[2, 3, 4] t:[0x009d, 0x00a6, 0x00af] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0039|0x0039: CONST_STR  (r3 I:java.lang.String) =  \"video\/mpeg2\" \l0x003b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003c: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x003d: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x003e: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l0x0040: INVOKE  (r10 I:java.util.List) = (r15 I:java.lang.Object A[D('csdData' byte[])]) java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC \l0x0044: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0045: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0046: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r29 I:?[OBJECT, ARRAY] A[D('formatId' java.lang.String)]) \l0x0048: INVOKE  (r17 I:com.google.android.exoplayer2.Format) = \l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int A[D('width' int)])\l  (r8 I:int A[D('height' int)])\l  (r9 I:float)\l  (r10 I:java.util.List)\l  (r11 I:int)\l  (r12 I:float A[D('pixelWidthHeightRatio' float)])\l  (r13 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.Format.createVideoSampleFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int, int, float, java.util.List, int, float, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.Format type: STATIC \l0x004c: CONST  (r18 I:?[long, double]) = (0 ?[long, double]) \l0x004e: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x004f: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0051: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0053: ARITH  (r22 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0055|0x0055: IF  (r22 I:?[int, byte, short, char] A[D('frameRateCodeMinusOne' int)]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x0092 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0057|0x0057: SGET  (r2 I:double[]) =  com.google.android.exoplayer2.extractor.ts.H262Reader.FRAME_RATE_VALUES double[] \l0x0059: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x005a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameRateCodeMinusOne' int)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x005c|0x005c: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0092 \l}"];
Node_6 [shape=record,label="{6\:\ 0x005e|0x005e: SGET  (r2 I:double[]) =  com.google.android.exoplayer2.extractor.ts.H262Reader.FRAME_RATE_VALUES double[] \l0x0060: AGET  (r20 I:?[long, double]) = \l  (r2 I:?[long, double][])\l  (r22 I:?[int, short, byte, char] A[D('frameRateCodeMinusOne' int)])\l \l0x0062: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r28 I:?[OBJECT, ARRAY] A[D('csdBuffer' com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)])\l \l0x0064: IGET  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer)\l com.google.android.exoplayer2.extractor.ts.H262Reader.CsdBuffer.sequenceExtensionPosition int \l0x0066: MOVE  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0068: ARITH  (r2 I:int) = (r26 I:int A[D('sequenceExtensionPosition' int)]) + (9 int) \l0x006a: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x006c: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (96 ?[int, float, short, byte, char]) \l0x006e: ARITH  (r24 I:int) = (r2 I:int) \>\> (5 int) \l0x0070: ARITH  (r2 I:int) = (r26 I:int A[D('sequenceExtensionPosition' int)]) + (9 int) \l0x0072: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r15 I:byte[] A[D('csdData' byte[]), IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0074: ARITH  (r23 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (31 ?[int, float, short, byte, char]) \l0x0076: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameRateExtensionN' int)])\l \l0x0078: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameRateExtensionD' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x007a|0x007a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0088 \l}"];
Node_8 [shape=record,label="{8\:\ 0x007c|0x007c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('frameRateExtensionN' int)])\l \l0x007e: CAST  (r2 I:double) = (double) (r0 I:int) \l0x007f: CONST  (r4 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0081: ARITH  (r2 I:double) = (r2 I:double) + (r4 I:double) \l0x0082: ARITH  (r4 I:int) = (r23 I:int A[D('frameRateExtensionD' int)]) + (1 int) \l0x0084: CAST  (r4 I:double) = (double) (r4 I:int) \l0x0085: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x0086: ARITH  (r20 I:double A[D('frameRate' double)]) = (r20 I:double A[D('frameRate' double)]) * (r2 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0088|0x0088: CONST  (r2 I:?[long, double]) = \l  (4696837146684686336(0x412e848000000000, double:1000000.0) ?[long, double])\l \l0x008d: ARITH  (r2 I:double) = (r2 I:double) \/ (r20 I:double A[D('frameRate' double)]) \l0x008f: CAST  (r0 I:long) = (long) (r2 I:double) \l0x0090: MOVE  (r18 I:?[long, double] A[D('frameDurationUs' long)]) = (r0 I:?[long, double]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0092|0x0092: INVOKE  (r2 I:java.lang.Long) = (r18 I:long A[D('frameDurationUs' long)]) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0096: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('format' com.google.android.exoplayer2.Format)])\l \l0x0098: INVOKE  (r2 I:android.util.Pair) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) android.util.Pair.create(java.lang.Object, java.lang.Object):android.util.Pair type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x009c|0x009c: RETURN  \l  (r2 I:android.util.Pair\<com.google.android.exoplayer2.Format, java.lang.Long\>)\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x009d|0x009d: ARITH  (r2 I:int) = (r8 I:int A[D('height' int)]) * (4 int) \l0x009f: CAST  (r2 I:float) = (float) (r2 I:int) \l0x00a0: ARITH  (r3 I:int) = (r7 I:int A[D('width' int)]) * (3 int) \l0x00a2: CAST  (r3 I:float) = (float) (r3 I:int) \l0x00a3: ARITH  (r12 I:float A[D('pixelWidthHeightRatio' float)]) = (r2 I:float) \/ (r3 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x00a6|0x00a6: ARITH  (r2 I:int) = (r8 I:int A[D('height' int)]) * (16 int) \l0x00a8: CAST  (r2 I:float) = (float) (r2 I:int) \l0x00a9: ARITH  (r3 I:int) = (r7 I:int A[D('width' int)]) * (9 int) \l0x00ab: CAST  (r3 I:float) = (float) (r3 I:int) \l0x00ac: ARITH  (r12 I:float A[D('pixelWidthHeightRatio' float)]) = (r2 I:float) \/ (r3 I:float) \l}"];
Node_14 [shape=record,label="{14\:\ 0x00af|0x00af: ARITH  (r2 I:int) = (r8 I:int A[D('height' int)]) * (121 int) \l0x00b1: CAST  (r2 I:float) = (float) (r2 I:int) \l0x00b2: ARITH  (r3 I:int) = (r7 I:int A[D('width' int)]) * (100 int) \l0x00b4: CAST  (r3 I:float) = (float) (r3 I:int) \l0x00b5: ARITH  (r12 I:float A[D('pixelWidthHeightRatio' float)]) = (r2 I:float) \/ (r3 I:float) \l}"];
MethodNode[shape=record,label="{private static android.util.Pair\<com.google.android.exoplayer2.Format, java.lang.Long\> com.google.android.exoplayer2.extractor.ts.H262Reader.parseCsdBuffer((r28 I:com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer A[D('csdBuffer' com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:java.lang.String A[D('formatId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0062\-0x0092: r20 'frameRate' double\l  0x0076\-0x0092: r23 'frameRateExtensionD' int\l  0x0070\-0x0092: r24 'frameRateExtensionN' int\l  0x0068\-0x0092: r26 'sequenceExtensionPosition' int\l  0x004c\-0x009d: r17 'format' com.google.android.exoplayer2.Format\l  0x004e\-0x009d: r18 'frameDurationUs' long\l  0x0055\-0x009d: r22 'frameRateCodeMinusOne' int\l  0x0027\-0x00c1: r7 'width' int\l  0x002d\-0x00c1: r8 'height' int\l  0x002f\-0x00c1: r12 'pixelWidthHeightRatio' float\l  0x0036\-0x00c1: r14 'aspectRatioCode' int\l  0x000c\-0x00c1: r15 'csdData' byte[]\l  0x0013\-0x00c1: r16 'firstByte' int\l  0x001a\-0x00c1: r25 'secondByte' int\l  0x0021\-0x00c1: r27 'thirdByte' int\l  ?\-0x00c1: r28 'csdBuffer' com.google.android.exoplayer2.extractor.ts.H262Reader$CsdBuffer\l  ?\-0x00c1: r29 'formatId' java.lang.String\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/extractor\/ts\/H262Reader$CsdBuffer;, Ljava\/lang\/String;, ), Landroid\/util\/Pair, \<, Lcom\/google\/android\/exoplayer2\/Format;, Ljava\/lang\/Long;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_1 -> Node_13;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_2;
Node_13 -> Node_2;
Node_14 -> Node_2;
}

