digraph "CFG forcom.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader(ILcom\/google\/android\/exoplayer2\/extractor\/MpegAudioHeader;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((\-2097152 & r13) == \-2097152) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|r1 = (r13 \>\>\> 19) & 3\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r1 != 1) goto L_0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|SYNTHETIC\lRETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|r10 = (r13 \>\>\> 17) & 3\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r10 != 0) goto L_0x001a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|SYNTHETIC\lRETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|r9 = (r13 \>\>\> 12) & 15\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|if (r9 == 0) goto L_0x0024\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020}"];
Node_12 [shape=record,label="{12\:\ 0x0022|if (r9 != 15) goto L_0x0026\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|SYNTHETIC\lRETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|r12 = (r13 \>\>\> 10) & 3\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|if (r12 != 3) goto L_0x002f\l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|SYNTHETIC\lRETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|r4 = SAMPLING_RATE_V1[r12]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|if (r1 != 2) goto L_0x0066\l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|int r4 = r4 \/ 2\l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|PHI: r4 \l  PHI: (r4v2 'sampleRate' int) = (r4v0 'sampleRate' int), (r4v1 'sampleRate' int), (r4v3 'sampleRate' int) binds: [B:30:0x0066, B:31:0x0068, B:19:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|r11 = (r13 \>\>\> 9) & 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|if (r10 != 3) goto L_0x0072\l}"];
Node_22 [shape=record,label="{22\:\ 0x003f}"];
Node_23 [shape=record,label="{23\:\ 0x0040|if (r1 != 3) goto L_0x006b\l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|r8 = BITRATE_V1_L1[r9 + \-1]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|PHI: r8 \l  PHI: (r8v6 'bitrate' int) = (r8v5 'bitrate' int), (r8v7 'bitrate' int) binds: [B:32:0x006b, B:24:0x0042] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = (((r8 * 12000) \/ r4) + r11) * 4\lr7 = 384\l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|PHI: r3 r7 r8 \l  PHI: (r3v2 'frameSize' int) = (r3v0 'frameSize' int), (r3v1 'frameSize' int), (r3v3 'frameSize' int) binds: [B:46:0x00a0, B:38:0x007e, B:25:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v4 'samplesPerFrame' int) = (r7v1 'samplesPerFrame' int), (r7v3 'samplesPerFrame' int), (r7v5 'samplesPerFrame' int) binds: [B:46:0x00a0, B:38:0x007e, B:25:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v4 'bitrate' int) = (r8v0 'bitrate' int), (r8v2 'bitrate' int), (r8v6 'bitrate' int) binds: [B:46:0x00a0, B:38:0x007e, B:25:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|r2 = MIME_TYPE_BY_LAYER[3 \- r10]\l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|if (((r13 \>\> 6) & 3) != 3) goto L_0x00ac\l}"];
Node_28 [shape=record,label="{28\:\ 0x005d|r5 = 1\l}"];
Node_29 [shape=record,label="{29\:\ 0x005e|PHI: r5 \l  PHI: (r5v1 'channels' int) = (r5v0 'channels' int), (r5v2 'channels' int) binds: [B:49:0x00ac, B:28:0x005d] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r14\lr0.setValues(r1, r2, r3, r4, r5, r8 * 1000, r7)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0066|if (r1 != 0) goto L_0x0038\l}"];
Node_31 [shape=record,label="{31\:\ 0x0068|int r4 = r4 \/ 4\l}"];
Node_32 [shape=record,label="{32\:\ 0x006b|r8 = BITRATE_V2_L1[r9 + \-1]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0072}"];
Node_34 [shape=record,label="{34\:\ 0x0073|if (r1 != 3) goto L_0x008f\l}"];
Node_35 [shape=record,label="{35\:\ 0x0075}"];
Node_36 [shape=record,label="{36\:\ 0x0076|if (r10 != 2) goto L_0x0088\l}"];
Node_37 [shape=record,label="{37\:\ 0x0078|r8 = BITRATE_V1_L2[r9 + \-1]\l}"];
Node_38 [shape=record,label="{38\:\ 0x007e|PHI: r8 \l  PHI: (r8v2 'bitrate' int) = (r8v1 'bitrate' int), (r8v3 'bitrate' int) binds: [B:39:0x0088, B:37:0x0078] A[DONT_GENERATE, DONT_INLINE]\l|r7 = 1152\lint r3 = ((144000 * r8) \/ r4) + r11\l}"];
Node_39 [shape=record,label="{39\:\ 0x0088|r8 = BITRATE_V1_L3[r9 + \-1]\l}"];
Node_40 [shape=record,label="{40\:\ 0x008f|r8 = BITRATE_V2[r9 + \-1]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0096|if (r10 != 1) goto L_0x00a5\l}"];
Node_42 [shape=record,label="{42\:\ 0x0098|r7 = 576\l}"];
Node_43 [shape=record,label="{43\:\ 0x009a|PHI: r7 \l  PHI: (r7v1 'samplesPerFrame' int) = (r7v0 'samplesPerFrame' int), (r7v2 'samplesPerFrame' int) binds: [B:47:0x00a5, B:42:0x0098] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_44 [shape=record,label="{44\:\ 0x009b|if (r10 != 1) goto L_0x00a8\l}"];
Node_45 [shape=record,label="{45\:\ 0x009d|r0 = com.google.android.exoplayer2.extractor.ogg.DefaultOggSeeker.MATCH_RANGE\l}"];
Node_46 [shape=record,label="{46\:\ 0x00a0|PHI: r0 \l  PHI: (r0v19 int) = (r0v18 int), (r0v22 int) binds: [B:48:0x00a8, B:45:0x009d] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = ((r0 * r8) \/ r4) + r11\l}"];
Node_47 [shape=record,label="{47\:\ 0x00a5|r7 = 1152\l}"];
Node_48 [shape=record,label="{48\:\ 0x00a8|r0 = 144000\l}"];
Node_49 [shape=record,label="{49\:\ 0x00ac|r5 = 2\l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public static boolean com.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader((r13v0 'headerData' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'header' com.google.android.exoplayer2.extractor.MpegAudioHeader A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_30;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_49;
Node_28 -> Node_29;
Node_29 -> Node_50;
Node_30 -> Node_20;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_20;
Node_32 -> Node_25;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_26;
Node_39 -> Node_38;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_47;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_26;
Node_47 -> Node_43;
Node_48 -> Node_46;
Node_49 -> Node_29;
}

