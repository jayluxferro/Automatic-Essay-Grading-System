digraph "CFG forcom.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader(ILcom\/google\/android\/exoplayer2\/extractor\/MpegAudioHeader;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-2097152(0xffffffffffe00000, float:NaN) ?[int, float, short, byte, char])\l \l0x0002: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r13 I:?[int, boolean, short, byte, char] A[D('headerData' int)]) \l0x0003: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (\-2097152(0xffffffffffe00000, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\>\> (19 int) \l0x000b: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l0x000d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\>\> (17 int) \l0x0014: ARITH  (r10 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\>\> (12 int) \l0x001c: ARITH  (r9 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bitrateIndex' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0024 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: CONST  (r0 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bitrateIndex' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\>\> (10 int) \l0x0028: ARITH  (r12 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l0x002a: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('samplingRateIndex' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.SAMPLING_RATE_V1 int[] \l0x0031: AGET  (r4 I:?[int, float]) = \l  (r0 I:?[int, float][])\l  (r12 I:?[int, short, byte, char] A[D('samplingRateIndex' int)])\l \l0x0033: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0066 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0036|0x0036: ARITH  (r4 I:int A[D('sampleRate' int)]) = (r4 I:int A[D('sampleRate' int)]) \/ (2 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\>\> (9 int) \l0x003a: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l0x003c: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|0x003d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0072 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|0x003f: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x006b \l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|0x0042: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L1 int[] \l0x0044: ARITH  (r6 I:int) = (r9 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x0046: AGET  (r8 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|0x0048: ARITH  (r0 I:int) = (r8 I:int A[D('bitrate' int)]) * (12000 int) \l0x004a: ARITH  (r0 I:int) = (r0 I:int) \/ (r4 I:int A[D('sampleRate' int)]) \l0x004b: ARITH  (r0 I:int) = (r0 I:int) + (r11 I:int A[D('padding' int)]) \l0x004c: ARITH  (r3 I:int) = (r0 I:int) * (4 int) \l0x004e: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (384(0x180, float:5.38E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: SGET  (r0 I:java.lang.String[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.MIME_TYPE_BY_LAYER java.lang.String[] \l0x0052: ARITH  (r6 I:int) = (3 int) \- (r10 I:int A[D('layer' int)]) \l0x0054: AGET  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r6 I:?[int, short, byte, char]) \l0x0056: ARITH  (r0 I:int) = (r13 I:int A[D('headerData' int)]) \>\> (6 int) \l0x0058: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l0x005a: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x005b|0x005b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00ac \l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|0x005d: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|0x005e: ARITH  (r6 I:int) = (r8 I:int A[D('bitrate' int)]) * (1000 int) \l0x0060: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r14 I:?[OBJECT, ARRAY] A[D('header' com.google.android.exoplayer2.extractor.MpegAudioHeader)])\l \l0x0061: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.MpegAudioHeader)\l  (r1 I:int A[D('version' int)])\l  (r2 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r3 I:int A[D('frameSize' int)])\l  (r4 I:int A[D('sampleRate' int)])\l  (r5 I:int A[D('channels' int)])\l  (r6 I:int)\l  (r7 I:int A[D('samplesPerFrame' int)])\l com.google.android.exoplayer2.extractor.MpegAudioHeader.setValues(int, java.lang.String, int, int, int, int, int):void type: DIRECT \l0x0064: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0066|0x0066: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0038 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0068|0x0068: ARITH  (r4 I:int A[D('sampleRate' int)]) = (r4 I:int A[D('sampleRate' int)]) \/ (4 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x006b|0x006b: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V2_L1 int[] \l0x006d: ARITH  (r6 I:int) = (r9 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x006f: AGET  (r8 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0072|0x0072: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0073|0x0073: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x008f \l}"];
Node_36 [shape=record,label="{36\:\ 0x0075|0x0075: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0076|0x0076: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0088 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0078|0x0078: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L2 int[] \l0x007a: ARITH  (r6 I:int) = (r9 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x007c: AGET  (r8 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x007e|0x007e: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1152(0x480, float:1.614E\-42) ?[int, float, short, byte, char])\l \l0x0080: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (144000(0x23280, float:2.01787E\-40) ?[int, float, short, byte, char])\l \l0x0083: ARITH  (r0 I:int) = (r0 I:int) * (r8 I:int A[D('bitrate' int)]) \l0x0084: ARITH  (r0 I:int) = (r0 I:int) \/ (r4 I:int A[D('sampleRate' int)]) \l0x0085: ARITH  (r3 I:int) = (r0 I:int) + (r11 I:int A[D('padding' int)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0088|0x0088: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L3 int[] \l0x008a: ARITH  (r6 I:int) = (r9 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x008c: AGET  (r8 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x008f|0x008f: SGET  (r0 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V2 int[] \l0x0091: ARITH  (r6 I:int) = (r9 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x0093: AGET  (r8 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l0x0095: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0096|0x0096: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00a5 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0098|0x0098: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (576(0x240, float:8.07E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x009a|0x009a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x009b|0x009b: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00a8 \l}"];
Node_46 [shape=record,label="{46\:\ 0x009d|0x009d: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (72000(0x11940, float:1.00893E\-40) ?[int, float, short, byte, char])\l \l}"];
Node_47 [shape=record,label="{47\:\ 0x00a0|0x00a0: ARITH  (r0 I:int) = (r0 I:int) * (r8 I:int A[D('bitrate' int)]) \l0x00a1: ARITH  (r0 I:int) = (r0 I:int) \/ (r4 I:int A[D('sampleRate' int)]) \l0x00a2: ARITH  (r3 I:int) = (r0 I:int) + (r11 I:int A[D('padding' int)]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00a5|0x00a5: CONST  (r7 I:?[int, float, short, byte, char] A[D('samplesPerFrame' int)]) = \l  (1152(0x480, float:1.614E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_49 [shape=record,label="{49\:\ 0x00a8|0x00a8: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (144000(0x23280, float:2.01787E\-40) ?[int, float, short, byte, char])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x00ac|0x00ac: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static boolean com.google.android.exoplayer2.extractor.MpegAudioHeader.populateHeader((r13 I:int A[D('headerData' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.google.android.exoplayer2.extractor.MpegAudioHeader A[D('header' com.google.android.exoplayer2.extractor.MpegAudioHeader), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0056\-0x0066: r2 'mimeType' java.lang.String\l  0x004e\-0x0066: r3 'frameSize' int\l  0x005e\-0x0066: r5 'channels' int\l  0x0050\-0x0066: r7 'samplesPerFrame' int\l  0x0048\-0x0066: r8 'bitrate' int\l  0x003c\-0x0066: r11 'padding' int\l  0x0087\-0x0088: r3 'frameSize' int\l  0x0080\-0x0088: r7 'samplesPerFrame' int\l  0x007e\-0x0088: r8 'bitrate' int\l  0x00a4\-0x00a5: r3 'frameSize' int\l  0x009a\-0x00a5: r7 'samplesPerFrame' int\l  0x000d\-0x00ad: r1 'version' int\l  0x00ac\-0x00ad: r2 'mimeType' java.lang.String\l  0x00ac\-0x00ad: r3 'frameSize' int\l  0x0033\-0x00ad: r4 'sampleRate' int\l  0x00a8\-0x00ad: r7 'samplesPerFrame' int\l  0x0095\-0x00ad: r8 'bitrate' int\l  0x001e\-0x00ad: r9 'bitrateIndex' int\l  0x0016\-0x00ad: r10 'layer' int\l  0x006b\-0x00ad: r11 'padding' int\l  0x002a\-0x00ad: r12 'samplingRateIndex' int\l  ?\-0x00ad: r13 'headerData' int\l  ?\-0x00ad: r14 'header' com.google.android.exoplayer2.extractor.MpegAudioHeader\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_3;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_3;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_34;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_50;
Node_29 -> Node_30;
Node_30 -> Node_3;
Node_31 -> Node_21;
Node_31 -> Node_32[style=dashed];
Node_32 -> Node_21;
Node_33 -> Node_26;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_39;
Node_39 -> Node_27;
Node_40 -> Node_39;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_48;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_49;
Node_46 -> Node_47;
Node_47 -> Node_27;
Node_48 -> Node_44;
Node_49 -> Node_47;
Node_50 -> Node_30;
}

