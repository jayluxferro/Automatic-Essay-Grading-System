digraph "CFG forcom.google.android.exoplayer2.extractor.MpegAudioHeader.getFrameSize(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r12 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (\-2097152(0xffffffffffe00000, float:NaN) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r9 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0005: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0006: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r13 I:?[int, boolean, short, byte, char] A[D('header' int)]) & (r10 I:?[int, boolean, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  (r7 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: ARITH  (r8 I:int) = (r13 I:int A[D('header' int)]) \>\>\> (19 int) \l0x000d: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: ARITH  (r8 I:int) = (r13 I:int A[D('header' int)]) \>\>\> (17 int) \l0x0013: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: ARITH  (r8 I:int) = (r13 I:int A[D('header' int)]) \>\>\> (12 int) \l0x0019: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bitrateIndex' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: CONST  (r8 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bitrateIndex' int)]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: ARITH  (r8 I:int) = (r13 I:int A[D('header' int)]) \>\>\> (10 int) \l0x0023: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('samplingRateIndex' int)]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.SAMPLING_RATE_V1 int[] \l0x0029: AGET  (r4 I:?[int, float]) = \l  (r7 I:?[int, float][])\l  (r5 I:?[int, short, byte, char] A[D('samplingRateIndex' int)])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: ARITH  (r4 I:int A[D('samplingRate' int)]) = (r4 I:int A[D('samplingRate' int)]) \/ (2 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: ARITH  (r7 I:int) = (r13 I:int A[D('header' int)]) \>\>\> (9 int) \l0x0031: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0050 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0049 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L1 int[] \l0x0039: ARITH  (r8 I:int) = (r1 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x003b: AGET  (r0 I:?[int, float]) = (r7 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|0x003d: ARITH  (r7 I:int) = (r0 I:int A[D('bitrate' int)]) * (12000 int) \l0x003f: ARITH  (r7 I:int) = (r7 I:int) \/ (r4 I:int A[D('samplingRate' int)]) \l0x0040: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int A[D('padding' int)]) \l0x0041: ARITH  (r7 I:int) = (r7 I:int) * (4 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: ARITH  (r4 I:int A[D('samplingRate' int)]) = (r4 I:int A[D('samplingRate' int)]) \/ (4 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V2_L1 int[] \l0x004b: ARITH  (r8 I:int) = (r1 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x004d: AGET  (r0 I:?[int, float]) = (r7 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|0x0050: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x006a \l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|0x0052: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0063 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0054|0x0054: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L2 int[] \l0x0056: ARITH  (r8 I:int) = (r1 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x0058: AGET  (r0 I:?[int, float]) = (r7 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x005a|0x005a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('version' int)]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0071 \l}"];
Node_28 [shape=record,label="{28\:\ 0x005c|0x005c: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (144000(0x23280, float:2.01787E\-40) ?[int, float, short, byte, char])\l \l0x005f: ARITH  (r7 I:int) = (r7 I:int) * (r0 I:int A[D('bitrate' int)]) \l0x0060: ARITH  (r7 I:int) = (r7 I:int) \/ (r4 I:int A[D('samplingRate' int)]) \l0x0061: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int A[D('padding' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0063|0x0063: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V1_L3 int[] \l0x0065: ARITH  (r8 I:int) = (r1 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x0067: AGET  (r0 I:?[int, float]) = (r7 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x006a|0x006a: SGET  (r7 I:int[]) =  com.google.android.exoplayer2.extractor.MpegAudioHeader.BITRATE_V2 int[] \l0x006c: ARITH  (r8 I:int) = (r1 I:int A[D('bitrateIndex' int)]) + (\-1 int) \l0x006e: AGET  (r0 I:?[int, float]) = (r7 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0071|0x0071: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layer' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x007a \l}"];
Node_32 [shape=record,label="{32\:\ 0x0073|0x0073: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (72000(0x11940, float:1.00893E\-40) ?[int, float, short, byte, char])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0076|0x0076: ARITH  (r7 I:int) = (r7 I:int) * (r0 I:int A[D('bitrate' int)]) \l0x0077: ARITH  (r7 I:int) = (r7 I:int) \/ (r4 I:int A[D('samplingRate' int)]) \l0x0078: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int A[D('padding' int)]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x007a|0x007a: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (144000(0x23280, float:2.01787E\-40) ?[int, float, short, byte, char])\l \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.extractor.MpegAudioHeader.getFrameSize((r13 I:int A[D('header' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003d\-0x0044: r0 'bitrate' int\l  0x0033\-0x0044: r3 'padding' int\l  0x005a\-0x0063: r0 'bitrate' int\l  0x0070\-0x007d: r0 'bitrate' int\l  0x001b\-0x007d: r1 'bitrateIndex' int\l  0x0015\-0x007d: r2 'layer' int\l  0x0049\-0x007d: r3 'padding' int\l  0x002b\-0x007d: r4 'samplingRate' int\l  0x0025\-0x007d: r5 'samplingRateIndex' int\l  0x000f\-0x007d: r6 'version' int\l  ?\-0x007d: r13 'header' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_2;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_2;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_2;
Node_21 -> Node_16;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_16;
Node_23 -> Node_20;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_2;
Node_29 -> Node_27;
Node_30 -> Node_27;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_2;
Node_34 -> Node_33;
}

