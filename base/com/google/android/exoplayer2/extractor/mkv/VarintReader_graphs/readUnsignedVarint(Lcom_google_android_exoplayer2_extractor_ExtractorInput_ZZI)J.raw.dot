digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.VarintReader.readUnsignedVarint(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;ZZI)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.state int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r1 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.scratch byte[] \l0x0008: INVOKE  (r1 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r3 I:int)\l  (r4 I:int)\l  (r7 I:boolean A[D('allowEndOfInput' boolean)])\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int, boolean):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r2 I:?[long, double]) = (\-1 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r1 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.scratch byte[] \l0x0013: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l0x0015: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r1 I:int) = (r0 I:int A[D('firstByte' int)]) com.google.android.exoplayer2.extractor.mkv.VarintReader.parseUnsignedVarintLength(int):int type: STATIC \l0x001b: IPUT  \l  (r1 I:int)\l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l0x001d: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"No valid varint length mask found\" \l0x0026: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: IPUT  \l  (r4 I:int)\l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.state int \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: IF  (r1 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char] A[D('maximumAllowedLength' int)])  \-\> B:14:0x0035 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IPUT  \l  (r3 I:int)\l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.state int \l0x0032: CONST  (r2 I:?[long, double]) = (\-2 ?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IGET  (r1 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0042 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IGET  (r1 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.scratch byte[] \l0x003b: IGET  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l0x003d: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x003f: INVOKE  \l  (r6 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r4 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: IPUT  \l  (r3 I:int)\l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.state int \l0x0044: IGET  (r1 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.scratch byte[] \l0x0046: IGET  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.length int \l0x0048: INVOKE  (r2 I:long) = \l  (r1 I:byte[])\l  (r2 I:int)\l  (r8 I:boolean A[D('removeLengthMask' boolean)])\l com.google.android.exoplayer2.extractor.mkv.VarintReader.assembleVarint(byte[], int, boolean):long type: STATIC \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.extractor.mkv.VarintReader.readUnsignedVarint((r5 'this' I:com.google.android.exoplayer2.extractor.mkv.VarintReader A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('allowEndOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('removeLengthMask' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('maximumAllowedLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x002c: r0 'firstByte' int\l  ?\-0x004c: r6 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x004c: r7 'allowEndOfInput' boolean\l  ?\-0x004c: r8 'removeLengthMask' boolean\l  ?\-0x004c: r9 'maximumAllowedLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_5;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_5;
}

