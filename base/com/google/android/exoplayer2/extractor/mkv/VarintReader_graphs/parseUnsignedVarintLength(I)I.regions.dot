digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.VarintReader.parseUnsignedVarintLength(I)I" {
subgraph cluster_Region_1475636730 {
label = "R(3:0|(1:(2:(1:9)|(1:6)))|10)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_LoopRegion_1941309459 {
label = "LOOP:0: (1:(2:(1:9)|(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r0 \< VARINT_LENGTH_MASKS.length) goto L_0x0007\l}"];
subgraph cluster_Region_1936994870 {
label = "R(1:(2:(1:9)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_656123980 {
label = "R(2:(1:9)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2124393620 {
label = "IF [B:4:0x0011] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|if ((VARINT_LENGTH_MASKS[r0] & ((long) r6)) != 0) goto L_0x0013\l}"];
subgraph cluster_Region_183538944 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0 + 1\l}"];
}
}
subgraph cluster_Region_736019198 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:6:0x0016\l|r0++\l}"];
}
}
}
}
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:0:0x0000, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:6:0x0016\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0013}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.extractor.mkv.VarintReader.parseUnsignedVarintLength((r6v0 'firstByte' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_6[style=dashed];
Node_4 -> Node_7;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_5 -> Node_9;
Node_7 -> Node_5;
Node_8 -> Node_10;
}

