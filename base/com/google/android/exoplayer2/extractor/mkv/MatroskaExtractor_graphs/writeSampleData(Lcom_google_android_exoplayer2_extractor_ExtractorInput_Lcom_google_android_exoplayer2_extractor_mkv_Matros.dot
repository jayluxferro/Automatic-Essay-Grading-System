digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.writeSampleData(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/mkv\/MatroskaExtractor$Track;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (CODEC_ID_SUBRIP.equals(r23.codecId) == false) goto L_0x006e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|int r15 = SUBRIP_PREFIX.length + r24\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|if (r21.subripSample.capacity() \>= r15) goto L_0x0039\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|r18 = r21.subripSample\lr18.data = java.util.Arrays.copyOf(SUBRIP_PREFIX, r15 + r24)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|r18 = r21.subripSample.data\lr19 = SUBRIP_PREFIX.length\lr22.readFully(r18, r19, r24)\lr21.subripSample.setPosition(0)\lr21.subripSample.setLimit(r15)\l}"];
Node_6 [shape=record,label="{6\:\ 0x006e|com.google.android.exoplayer2.extractor.TrackOutput r11 = r23.output\l}"];
Node_7 [shape=record,label="{7\:\ 0x0078|if (r21.sampleEncodingHandled != false) goto L_0x0360\l}"];
Node_8 [shape=record,label="{8\:\ 0x007a}"];
Node_9 [shape=record,label="{9\:\ 0x0080|if (r23.hasContentEncryption == false) goto L_0x0428\l}"];
Node_10 [shape=record,label="{10\:\ 0x0082|r21.blockFlags = r21.blockFlags & \-1073741825\l}"];
Node_11 [shape=record,label="{11\:\ 0x0099|if (r21.sampleSignalByteRead != false) goto L_0x0108\l}"];
Node_12 [shape=record,label="{12\:\ 0x009b|r18 = r21.scratch.data\lr22.readFully(r18, 0, 1)\lr21.sampleBytesRead = r21.sampleBytesRead + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x00e0|if ((r21.scratch.data[0] & 128) != 128) goto L_0x00ea\l}"];
Node_14 [shape=record,label="{14\:\ 0x00e2}"];
Node_15 [shape=record,label="{15\:\ 0x00e9|throw new com.google.android.exoplayer2.ParserException(\"Extension bit is set in signal byte\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x00ea|r21.sampleSignalByte = r21.scratch.data[0]\lr21.sampleSignalByteRead = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0108}"];
Node_18 [shape=record,label="{18\:\ 0x0116|if ((r21.sampleSignalByte & 1) != 1) goto L_0x02e9\l}"];
Node_19 [shape=record,label="{19\:\ 0x0118|r7 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x0119|PHI: r7 \l  PHI: (r7v1 'isEncrypted' boolean) = (r7v0 'isEncrypted' boolean), (r7v2 'isEncrypted' boolean) binds: [B:46:0x02e9, B:19:0x0118] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L_0x0358\l}"];
Node_21 [shape=record,label="{21\:\ 0x011b}"];
Node_22 [shape=record,label="{22\:\ 0x0129|if ((r21.sampleSignalByte & 2) != 2) goto L_0x02ec\l}"];
Node_23 [shape=record,label="{23\:\ 0x012b|r5 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x012c|PHI: r5 \l  PHI: (r5v1 'hasSubsampleEncryption' boolean) = (r5v0 'hasSubsampleEncryption' boolean), (r5v2 'hasSubsampleEncryption' boolean) binds: [B:47:0x02ec, B:23:0x012b] A[DONT_GENERATE, DONT_INLINE]\l|r21.blockFlags = r21.blockFlags \| 1073741824\l}"];
Node_25 [shape=record,label="{25\:\ 0x0142|if (r21.sampleInitializationVectorRead != false) goto L_0x01e0\l}"];
Node_26 [shape=record,label="{26\:\ 0x0144|r18 = r21.encryptionInitializationVector.data\lr22.readFully(r18, 0, 8)\lr21.sampleBytesRead = r21.sampleBytesRead + 8\lr21.sampleInitializationVectorRead = true\lr19 = r21.scratch.data\l}"];
Node_27 [shape=record,label="{27\:\ 0x0183|if (r5 == false) goto L_0x02ef\l}"];
Node_28 [shape=record,label="{28\:\ 0x0185|r18 = 128\l}"];
Node_29 [shape=record,label="{29\:\ 0x0187|PHI: r18 \l  PHI: (r18v96 int) = (r18v95 int), (r18v107 int) binds: [B:48:0x02ef, B:28:0x0185] A[DONT_GENERATE, DONT_INLINE]\l|r19[0] = (byte) (r18 \| 8)\lr21.scratch.setPosition(0)\lr11.sampleData(r21.scratch, 1)\lr21.sampleBytesWritten = r21.sampleBytesWritten + 1\lr21.encryptionInitializationVector.setPosition(0)\lr11.sampleData(r21.encryptionInitializationVector, 8)\lr21.sampleBytesWritten = r21.sampleBytesWritten + 8\l}"];
Node_30 [shape=record,label="{30\:\ 0x01e0|if (r5 == false) goto L_0x0358\l}"];
Node_31 [shape=record,label="{31\:\ 0x01e2}"];
Node_32 [shape=record,label="{32\:\ 0x01e8|if (r21.samplePartitionCountRead != false) goto L_0x0236\l}"];
Node_33 [shape=record,label="{33\:\ 0x01ea|r18 = r21.scratch.data\lr22.readFully(r18, 0, 1)\lr21.sampleBytesRead = r21.sampleBytesRead + 1\lr21.scratch.setPosition(0)\lr21.samplePartitionCount = r21.scratch.readUnsignedByte()\lr21.samplePartitionCountRead = true\l}"];
Node_34 [shape=record,label="{34\:\ 0x0236|int r14 = r21.samplePartitionCount * 4\lr21.scratch.reset(r14)\lr18 = r21.scratch.data\lr22.readFully(r18, 0, r14)\lr21.sampleBytesRead = r21.sampleBytesRead + r14\lr16 = (short) ((r21.samplePartitionCount \/ 2) + 1)\lint r17 = (r16 * 6) + 2\l}"];
Node_35 [shape=record,label="{35\:\ 0x0287|if (r21.encryptionSubsampleDataBuffer == null) goto L_0x0299\l}"];
Node_36 [shape=record,label="{36\:\ 0x0289}"];
Node_37 [shape=record,label="{37\:\ 0x0297|if (r21.encryptionSubsampleDataBuffer.capacity() \>= r17) goto L_0x02a3\l}"];
Node_38 [shape=record,label="{38\:\ 0x0299|r21.encryptionSubsampleDataBuffer = java.nio.ByteBuffer.allocate(r17)\l}"];
Node_39 [shape=record,label="{39\:\ 0x02a3|r21.encryptionSubsampleDataBuffer.position(0)\lr21.encryptionSubsampleDataBuffer.putShort(r16)\lr12 = 0\lr6 = 0\l}"];
Node_40 [shape=record,label="{40\:\ 0x02bd|LOOP_START\lPHI: r6 r12 \l  PHI: (r6v1 'i' int) = (r6v0 'i' int), (r6v2 'i' int) binds: [B:39:0x02a3, B:45:0x02e6] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 'partitionOffset' int) = (r12v0 'partitionOffset' int), (r12v2 'partitionOffset' int) binds: [B:39:0x02a3, B:45:0x02e6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:40:0x02bd\-\>B:45:0x02e6\l}"];
Node_41 [shape=record,label="{41\:\ 0x02c5|if (r6 \>= r21.samplePartitionCount) goto L_0x02ff\l}"];
Node_42 [shape=record,label="{42\:\ 0x02c7|r13 = r12\lint r12 = r21.scratch.readUnsignedIntToInt()\l}"];
Node_43 [shape=record,label="{43\:\ 0x02d4|if ((r6 % 2) != 0) goto L_0x02f3\l}"];
Node_44 [shape=record,label="{44\:\ 0x02d6|r21.encryptionSubsampleDataBuffer.putShort((short) (r12 \- r13))\l}"];
Node_45 [shape=record,label="{45\:\ 0x02e6|LOOP_END\lLOOP:0: B:40:0x02bd\-\>B:45:0x02e6\l|int r6 = r6 + 1\l}"];
Node_46 [shape=record,label="{46\:\ 0x02e9|r7 = false\l}"];
Node_47 [shape=record,label="{47\:\ 0x02ec|r5 = false\l}"];
Node_48 [shape=record,label="{48\:\ 0x02ef|r18 = 0\l}"];
Node_49 [shape=record,label="{49\:\ 0x02f3|r21.encryptionSubsampleDataBuffer.putInt(r12 \- r13)\l}"];
Node_50 [shape=record,label="{50\:\ 0x02ff|int r4 = (r24 \- r21.sampleBytesRead) \- r12\l}"];
Node_51 [shape=record,label="{51\:\ 0x0317|if ((r21.samplePartitionCount % 2) != 1) goto L_0x040f\l}"];
Node_52 [shape=record,label="{52\:\ 0x0319|r21.encryptionSubsampleDataBuffer.putInt(r4)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0324|r18 = r21.encryptionSubsampleData\lr18.reset(r21.encryptionSubsampleDataBuffer.array(), r17)\lr11.sampleData(r21.encryptionSubsampleData, r17)\lr21.sampleBytesWritten = r21.sampleBytesWritten + r17\l}"];
Node_54 [shape=record,label="{54\:\ 0x0358|r21.sampleEncodingHandled = true\l}"];
Node_55 [shape=record,label="{55\:\ 0x0360|int r24 = r24 + r21.sampleStrippedBytes.limit()\l}"];
Node_56 [shape=record,label="{56\:\ 0x0378|if (CODEC_ID_H264.equals(r23.codecId) != false) goto L_0x0388\l}"];
Node_57 [shape=record,label="{57\:\ 0x037a}"];
Node_58 [shape=record,label="{58\:\ 0x0386|if (CODEC_ID_H265.equals(r23.codecId) == false) goto L_0x046c\l}"];
Node_59 [shape=record,label="{59\:\ 0x0388|byte[] r8 = r21.nalLength.data\lr8[0] = 0\lr8[1] = 0\lr8[2] = 0\lint r9 = r23.nalUnitLengthFieldLength\lint r10 = 4 \- r23.nalUnitLengthFieldLength\l}"];
Node_60 [shape=record,label="{60\:\ 0x03b0|LOOP_START\lLOOP:1: B:60:0x03b0\-\>B:79:0x03b0\l}"];
Node_61 [shape=record,label="{61\:\ 0x03ba|if (r21.sampleBytesRead \>= r24) goto L_0x048a\l}"];
Node_62 [shape=record,label="{62\:\ 0x03bc}"];
Node_63 [shape=record,label="{63\:\ 0x03c2|if (r21.sampleCurrentNalBytesRemaining != 0) goto L_0x044c\l}"];
Node_64 [shape=record,label="{64\:\ 0x03c4|readToTarget(r22, r8, r10, r9)\lr21.nalLength.setPosition(0)\lr21.sampleCurrentNalBytesRemaining = r21.nalLength.readUnsignedIntToInt()\lr21.nalStartCode.setPosition(0)\lr11.sampleData(r21.nalStartCode, 4)\lr21.sampleBytesWritten = r21.sampleBytesWritten + 4\l}"];
Node_65 [shape=record,label="{65\:\ 0x040f|r21.encryptionSubsampleDataBuffer.putShort((short) r4)\lr21.encryptionSubsampleDataBuffer.putInt(0)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0428}"];
Node_67 [shape=record,label="{67\:\ 0x042e|if (r23.sampleStrippedBytes == null) goto L_0x0358\l}"];
Node_68 [shape=record,label="{68\:\ 0x0430|r21.sampleStrippedBytes.reset(r23.sampleStrippedBytes, r23.sampleStrippedBytes.length)\l}"];
Node_69 [shape=record,label="{69\:\ 0x044c|r18 = r21.sampleCurrentNalBytesRemaining\lr19 = r21.sampleCurrentNalBytesRemaining\lr21.sampleCurrentNalBytesRemaining = r18 \- readToOutput(r22, r11, r19)\l}"];
Node_70 [shape=record,label="{70\:\ 0x046c|LOOP_START\lLOOP:2: B:70:0x046c\-\>B:72:0x0478\l}"];
Node_71 [shape=record,label="{71\:\ 0x0476|if (r21.sampleBytesRead \>= r24) goto L_0x048a\l}"];
Node_72 [shape=record,label="{72\:\ 0x0478|LOOP_END\lLOOP:2: B:70:0x046c\-\>B:72:0x0478\l|readToOutput(r22, r11, r24 \- r21.sampleBytesRead)\l}"];
Node_73 [shape=record,label="{73\:\ 0x048a}"];
Node_74 [shape=record,label="{74\:\ 0x0496|if (CODEC_ID_VORBIS.equals(r23.codecId) == false) goto L_?\l}"];
Node_75 [shape=record,label="{75\:\ 0x0498|r21.vorbisNumPageSamples.setPosition(0)\lr11.sampleData(r21.vorbisNumPageSamples, 4)\lr21.sampleBytesWritten = r21.sampleBytesWritten + 4\l}"];
Node_76 [shape=record,label="{76\:\ 0x02ff|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x02e6|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x02e6|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x03b0|LOOP_END\lSYNTHETIC\lLOOP:1: B:60:0x03b0\-\>B:79:0x03b0\l}"];
Node_80 [shape=record,label="{80\:\ 0x048a|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x03b0|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x03b0|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x048a|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_85 [shape=record,label="{85\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.writeSampleData((r21v0 'this' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r22v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'size' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_84;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_55;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_66;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_46;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_54;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_47;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_48;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_54;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_76;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_77;
Node_45 -> Node_40;
Node_46 -> Node_20;
Node_47 -> Node_24;
Node_48 -> Node_29;
Node_49 -> Node_78;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_65;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_70;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_80;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_69;
Node_64 -> Node_81;
Node_65 -> Node_53;
Node_66 -> Node_67;
Node_67 -> Node_54;
Node_67 -> Node_68[style=dashed];
Node_68 -> Node_54;
Node_69 -> Node_82;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_83;
Node_72 -> Node_70;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_85;
Node_75 -> Node_86;
Node_76 -> Node_50;
Node_77 -> Node_45;
Node_78 -> Node_45;
Node_79 -> Node_60;
Node_80 -> Node_73;
Node_81 -> Node_79;
Node_82 -> Node_79;
Node_83 -> Node_73;
}

