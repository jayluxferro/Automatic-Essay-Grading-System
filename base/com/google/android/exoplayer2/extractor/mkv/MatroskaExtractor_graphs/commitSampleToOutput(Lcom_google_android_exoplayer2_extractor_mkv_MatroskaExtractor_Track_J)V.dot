digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.commitSampleToOutput(Lcom\/google\/android\/exoplayer2\/extractor\/mkv\/MatroskaExtractor$Track;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (CODEC_ID_SUBRIP.equals(r9.codecId) == false) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|writeSubripSample(r9)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|r2 = r10\lr9.output.sampleMetadata(r2, r8.blockFlags, r8.sampleBytesWritten, 0, r9.encryptionKeyId)\lr8.sampleRead = true\lresetSample()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.commitSampleToOutput((r8v0 'this' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r9v0 'track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'timeUs' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

