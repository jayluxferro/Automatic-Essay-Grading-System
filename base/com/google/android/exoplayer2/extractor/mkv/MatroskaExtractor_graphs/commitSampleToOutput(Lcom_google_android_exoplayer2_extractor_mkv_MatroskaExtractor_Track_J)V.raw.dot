digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.commitSampleToOutput(Lcom\/google\/android\/exoplayer2\/extractor\/mkv\/MatroskaExtractor$Track;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"S_TEXT\/UTF8\" \l0x0002: IGET  (r1 I:java.lang.String) = \l  (r9 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[D('track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)])\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.codecId java.lang.String \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l  (r9 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[D('track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)])\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.writeSubripSample(com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput) = \l  (r9 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[D('track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)])\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.output com.google.android.exoplayer2.extractor.TrackOutput \l0x000f: IGET  (r4 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.blockFlags int \l0x0011: IGET  (r5 I:int) = \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesWritten int \l0x0013: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: IGET  (r7 I:byte[]) = \l  (r9 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[D('track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)])\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.encryptionKeyId byte[] \l0x0016: MOVE  (r2 I:?[long, double]) = (r10 I:?[long, double] A[D('timeUs' long)]) \l0x0017: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.TrackOutput)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:byte[])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleMetadata(long, int, int, int, byte[]):void type: INTERFACE \l0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001b: IPUT  \l  (r0 I:boolean)\l  (r8 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleRead boolean \l0x001d: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.resetSample():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.commitSampleToOutput((r8 'this' I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[D('track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0020: r9 'track' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track\l  ?\-0x0020: r10 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

