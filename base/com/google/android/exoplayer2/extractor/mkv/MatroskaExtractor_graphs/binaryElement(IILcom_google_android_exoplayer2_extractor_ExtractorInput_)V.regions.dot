digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.binaryElement(IILcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)V" {
subgraph cluster_Region_1931259631 {
label = "R(1:0) | DECL_VAR: int byteValue, int null, int null\l";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_635877429 {
label = "Switch: 6, default: R(1:2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|switch(r31) \{\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_BLOCK :int: goto L_0x011d;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_SIMPLE_BLOCK :int: goto L_0x011d;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_CONTENT_COMPRESSION_SETTINGS :int: goto L_0x00c3;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_CONTENT_ENCRYPTION_KEY_ID :int: goto L_0x00f0;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_SEEK_ID :int: goto L_0x0020;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_CODEC_PRIVATE :int: goto L_0x006b;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_PROJECTION_PRIVATE :int: goto L_0x0097;\l    default: goto L_0x0003;\l\}\l}"];
subgraph cluster_Region_1743667314 {
label = "R(3:(1:10)|11|(2:(2:13|113)|(2:(7:16|(1:18)(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))|19|20|(1:30)(1:92)|(1:32)(1:93)|33)|(2:(3:(1:38)|94|114)|(2:95|115)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1185432393 {
label = "IF [B:9:0x0123] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0123|if (r30.blockState == 0) goto L_0x0125\l}"];
subgraph cluster_Region_1353136433 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0125|r30.blockTrackNumber = (int) r30.varintReader.readUnsignedVarint(r33, false, true, 8)\lr30.blockTrackNumberLength = r30.varintReader.getLastLength()\lr30.blockDurationUs = com.google.android.exoplayer2.C1260C.TIME_UNSET\lr30.blockState = 1\lr30.scratch.reset()\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0176|com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track r24 = r30.tracks.get(r30.blockTrackNumber)\l}"];
subgraph cluster_Region_1180339740 {
label = "R(2:(2:13|113)|(2:(7:16|(1:18)(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))|19|20|(1:30)(1:92)|(1:32)(1:93)|33)|(2:(3:(1:38)|94|114)|(2:95|115))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_19934987 {
label = "IF [B:12:0x0188] THEN: R(2:13|113) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0188|if (r24 == null) goto L_0x018a\l}"];
subgraph cluster_Region_1458414066 {
label = "R(2:13|113)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x018a|r33.skipFully(r32 \- r30.blockTrackNumberLength)\lr30.blockState = 0\l}"];
Node_113 [shape=record,label="{113\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1381700205 {
label = "R(2:(7:16|(1:18)(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))|19|20|(1:30)(1:92)|(1:32)(1:93)|33)|(2:(3:(1:38)|94|114)|(2:95|115)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_995936166 {
label = "IF [B:15:0x01af] THEN: R(7:16|(1:18)(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))|19|20|(1:30)(1:92)|(1:32)(1:93)|33) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x01af|if (r30.blockState == 1) goto L_0x01b1\l}"];
subgraph cluster_Region_1579802081 {
label = "R(7:16|(1:18)(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))|19|20|(1:30)(1:92)|(1:32)(1:93)|33)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x01b1|readScratch(r33, 3)\lint int r13 = (r30.scratch.data[2] & 6) \>\> 1\l}"];
subgraph cluster_IfRegion_1835576074 {
label = "IF [B:17:0x01d0] THEN: R(1:18) ELSE: R(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x01d0|if (r13 == 0) goto L_0x01d2\l}"];
subgraph cluster_Region_694453439 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x01d2|r30.blockLacingSampleCount = 1\lr30.blockLacingSampleSizes = ensureArrayCapacity(r30.blockLacingSampleSizes, 1)\lr30.blockLacingSampleSizes[0] = (r32 \- r30.blockTrackNumberLength) \- 3\l}"];
}
subgraph cluster_Region_314397264 {
label = "R(1:(1:42)(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_419422736 {
label = "IF [B:40:0x0329] THEN: R(1:42) ELSE: R(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0329|if (r31 != ID_SIMPLE_BLOCK) goto L_0x032b\l}"];
subgraph cluster_Region_1162045278 {
label = "R(1:42)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0332|throw new com.google.android.exoplayer2.ParserException(\"Lacing only supported in SimpleBlocks.\")\l}"];
}
subgraph cluster_Region_1208963637 {
label = "R(2:43|(1:45)(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89))))";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0333|readScratch(r33, 4)\lr30.blockLacingSampleCount = (r30.scratch.data[3] & 255) + 1\lr30.blockLacingSampleSizes = ensureArrayCapacity(r30.blockLacingSampleSizes, r30.blockLacingSampleCount)\l}"];
subgraph cluster_IfRegion_1754795642 {
label = "IF [B:44:0x0376] THEN: R(1:45) ELSE: R(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)))";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0376|if (r13 == 2) goto L_0x0378\l}"];
subgraph cluster_Region_819504822 {
label = "R(1:45)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0378|java.util.Arrays.fill(r30.blockLacingSampleSizes, 0, r30.blockLacingSampleCount, ((r32 \- r30.blockTrackNumberLength) \- 4) \/ r30.blockLacingSampleCount)\l}"];
}
subgraph cluster_Region_1464876511 {
label = "R(1:(3:48|(3:51|(1:52)|54)|55)(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_962746825 {
label = "IF [B:47:0x03a7] THEN: R(3:48|(3:51|(1:52)|54)|55) ELSE: R(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x03a7|if (r13 == 1) goto L_0x03a9\l}"];
subgraph cluster_Region_743464189 {
label = "R(3:48|(3:51|(1:52)|54)|55)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x03a9|int r23 = 0\lint r8 = 4\lint r17 = 0\l}"];
subgraph cluster_LoopRegion_1736267644 {
label = "LOOP:1: (3:51|(1:52)|54)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x03ba|if (r17 \< (r30.blockLacingSampleCount \- 1)) goto L_0x03bc\l}"];
subgraph cluster_Region_1011810744 {
label = "R(3:51|(1:52)|54)";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x03bc|r30.blockLacingSampleSizes[r17] = 0\l}"];
subgraph cluster_LoopRegion_1231313114 {
label = "LOOP:2: (1:52)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x03f3|LOOP_END\lLOOP:2: B:52:0x03c6\-\>B:53:0x03f3\l|if (r7 == 255) goto L_0x03c6\l}"];
subgraph cluster_Region_2033677201 {
label = "R(1:52)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x03c6|LOOP_START\lPHI: r8 \l  PHI: (r8v7 'headerSize' int) = (r8v6 'headerSize' int), (r8v8 'headerSize' int) binds: [B:51:0x03bc, B:53:0x03f3] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:52:0x03c6\-\>B:53:0x03f3\l|r8++\lreadScratch(r33, r8)\lr7 = r30.scratch.data[r8 \- 1] & 255\lint[] r25 = r30.blockLacingSampleSizes\lr25[r17] = r25[r17] + r7\l}"];
}
}
Node_54 [shape=record,label="{54\:\ 0x03f5|LOOP_END\lLOOP:1: B:49:0x03ae\-\>B:54:0x03f5\l|r23 += r30.blockLacingSampleSizes[r17]\lr17++\l}"];
}
}
Node_55 [shape=record,label="{55\:\ 0x0402|r30.blockLacingSampleSizes[r30.blockLacingSampleCount \- 1] = ((r32 \- r30.blockTrackNumberLength) \- r8) \- r23\l}"];
}
subgraph cluster_Region_158845436 {
label = "R(1:(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)(1:89)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_691297745 {
label = "IF [B:57:0x0424] THEN: R(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87) ELSE: R(1:89) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x0424|if (r13 == 3) goto L_0x0426\l}"];
subgraph cluster_Region_695187095 {
label = "R(3:58|(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))|87)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0426|int r23 = 0\lint r8 = 4\lint r17 = 0\l}"];
subgraph cluster_LoopRegion_330479351 {
label = "LOOP:3: (2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0437|if (r17 \< (r30.blockLacingSampleCount \- 1)) goto L_0x0439\l}"];
subgraph cluster_Region_154734891 {
label = "R(2:61|(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))))";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x0439|r30.blockLacingSampleSizes[r17] = 0\lr8++\lreadScratch(r33, r8)\l}"];
subgraph cluster_Region_1004256285 {
label = "R(2:(1:64)|(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_954683309 {
label = "IF [B:62:0x045c] THEN: R(1:64) ELSE: null";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x045c|if (r30.scratch.data[r8 \- 1] == 0) goto L_0x045e\l}"];
subgraph cluster_Region_1313034438 {
label = "R(1:64)";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x0465|throw new com.google.android.exoplayer2.ParserException(\"No valid varint length mask found\")\l}"];
}
}
subgraph cluster_Region_1504118374 {
label = "R(3:65|(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))|(2:(1:81)|(3:83|(1:86)(0)|85)))";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x0466|long r18 = 0\lint r9 = 0\l}"];
subgraph cluster_LoopRegion_413872660 {
label = "LOOP:4: (1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))";
node [shape=record,color=blue];
subgraph cluster_Region_799289556 {
label = "R(1:(2:68|(3:70|(1:73)|(1:75))(1:82))(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_301635832 {
label = "IF [B:67:0x046d] THEN: R(2:68|(3:70|(1:73)|(1:75))(1:82)) ELSE: R(0)";
node [shape=record,color=blue];
Node_67 [shape=record,label="{67\:\ 0x046d|if (r9 \< 8) goto L_0x046f\l}"];
subgraph cluster_Region_1890438948 {
label = "R(2:68|(3:70|(1:73)|(1:75))(1:82))";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x046f|int int r14 = 1 \<\< (7 \- r9)\l}"];
subgraph cluster_IfRegion_2050936285 {
label = "IF [B:69:0x0487] THEN: R(3:70|(1:73)|(1:75)) ELSE: R(1:82)";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x0487|if ((r30.scratch.data[r8 \- 1] & r14) != 0) goto L_0x0489\l}"];
subgraph cluster_Region_1827182505 {
label = "R(3:70|(1:73)|(1:75))";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x0489|int int r15 = r8 \- 1\lr8 += r9\lreadScratch(r33, r8)\lint int r16 = r15 + 1\lr18 = (long) (r30.scratch.data[r15] & 255 & (r14 ^ \-1))\l}"];
subgraph cluster_LoopRegion_1003432952 {
label = "LOOP:5: (1:73)";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x04b4|if (r16 \< r8) goto L_0x04b6\l}"];
subgraph cluster_Region_917173136 {
label = "R(1:73)";
node [shape=record,color=blue];
Node_73 [shape=record,label="{73\:\ 0x04b6|LOOP_END\lLOOP:5: B:71:0x04b2\-\>B:73:0x04b6\l|long r18 = (r18 \<\< 8) \| ((long) (r30.scratch.data[r16] & 255))\lr16++\l}"];
}
}
subgraph cluster_IfRegion_296360203 {
label = "IF [B:74:0x04da] THEN: R(1:75) ELSE: null";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x04da|if (r17 \> 0) goto L_0x04dc\l}"];
subgraph cluster_Region_411319832 {
label = "R(1:75)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x04dc|r18 \-= (1 \<\< ((r9 * 7) + 6)) \- 1\l}"];
}
}
}
subgraph cluster_Region_674699032 {
label = "R(1:82)";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0500|LOOP_END\lLOOP:4: B:66:0x0469\-\>B:82:0x0500\l|r9++\l}"];
}
}
}
subgraph cluster_Region_1241074281 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
subgraph cluster_Region_501806832 {
label = "R(2:(1:81)|(3:83|(1:86)(0)|85))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1229106272 {
label = "IF [B:77:0x04ef, B:79:0x04f6] THEN: R(1:81) ELSE: null";
node [shape=record,color=blue];
Node_77 [shape=record,label="{77\:\ 0x04ef|if (r18 \< \-2147483648L) goto L_0x04f8\l}"];
Node_79 [shape=record,label="{79\:\ 0x04f6|ADDED_TO_REGION\l|if (r18 \> 2147483647L) goto L_0x04f8\l}"];
subgraph cluster_Region_1544707275 {
label = "R(1:81)";
node [shape=record,color=blue];
Node_81 [shape=record,label="{81\:\ 0x04ff|throw new com.google.android.exoplayer2.ParserException(\"EBML lacing sample size out of range.\")\l}"];
}
}
subgraph cluster_Region_40377954 {
label = "R(3:83|(1:86)(0)|85)";
node [shape=record,color=blue];
Node_83 [shape=record,label="{83\:\ 0x0504|int int r10 = (int) r18\lint[] r25 = r30.blockLacingSampleSizes\l}"];
subgraph cluster_IfRegion_502689478 {
label = "IF [B:84:0x050d] THEN: R(1:86) ELSE: R(0)";
node [shape=record,color=blue];
Node_84 [shape=record,label="{84\:\ 0x050d|if (r17 != 0) goto L_0x051f\l}"];
subgraph cluster_Region_1604589163 {
label = "R(1:86)";
node [shape=record,color=blue];
Node_86 [shape=record,label="{86\:\ 0x051f|r10 += r30.blockLacingSampleSizes[r17 \- 1]\l}"];
}
subgraph cluster_Region_1388246285 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_85 [shape=record,label="{85\:\ 0x050f|LOOP_END\lPHI: r10 \l  PHI: (r10v2 'intReadValue' int) = (r10v0 'intReadValue' int), (r10v1 'intReadValue' int) binds: [B:103:0x050f, B:104:0x050f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:59:0x042b\-\>B:85:0x050f\l|r25[r17] = r10\lr23 += r30.blockLacingSampleSizes[r17]\lr17++\l}"];
}
}
}
}
}
}
Node_87 [shape=record,label="{87\:\ 0x052c|r30.blockLacingSampleSizes[r30.blockLacingSampleCount \- 1] = ((r32 \- r30.blockTrackNumberLength) \- r8) \- r23\l}"];
}
subgraph cluster_Region_28087046 {
label = "R(1:89)";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0564|throw new com.google.android.exoplayer2.ParserException(\"Unexpected lacing value: \" + r13)\l}"];
}
}
}
}
}
}
}
}
}
}
Node_19 [shape=record,label="{19\:\ 0x0200|r30.blockTimeUs = r30.clusterTimecodeUs + scaleTimecodeToUs((long) ((r30.scratch.data[0] \<\< 8) \| (r30.scratch.data[1] & 255)))\l}"];
Node_20 [shape=record,label="{20\:\ 0x025d|boolean r11 = (r30.scratch.data[2] & 8) == 8\l}"];
subgraph cluster_IfRegion_1875613489 {
label = "IF [B:29:0x0295] THEN: R(1:30) ELSE: R(1:92)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0295|PHI: r12 \l  PHI: (r12v0 'isKeyframe' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r24.type == 2 \|\| (r31 == ID_SIMPLE_BLOCK && (r30.scratch.data[2] & 128) == 128)) == true) goto L_0x0297\l}"];
subgraph cluster_Region_1111550835 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0297|r26 = 1\l}"];
}
subgraph cluster_Region_1326158681 {
label = "R(1:92)";
node [shape=record,color=blue];
Node_92 [shape=record,label="{92\:\ 0x056b|r26 = 0\l}"];
}
}
subgraph cluster_IfRegion_232964751 {
label = "IF [B:31:0x029b] THEN: R(1:32) ELSE: R(1:93)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x029b|PHI: r26 \l  PHI: (r26v50 int) = (r26v49 int), (r26v51 int) binds: [B:92:0x056b, B:30:0x0297] A[DONT_GENERATE, DONT_INLINE]\l|if (r11 == true) goto L_0x029d\l}"];
subgraph cluster_Region_853839997 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x029d|r25 = Integer.MIN_VALUE\l}"];
}
subgraph cluster_Region_688511337 {
label = "R(1:93)";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x0571|r25 = 0\l}"];
}
}
Node_33 [shape=record,label="{33\:\ 0x029f|PHI: r25 \l  PHI: (r25v92 int) = (r25v91 int), (r25v96 int) binds: [B:93:0x0571, B:32:0x029d] A[DONT_GENERATE, DONT_INLINE]\l|r30.blockFlags = r25 \| r26\lr30.blockState = 2\lr30.blockLacingSampleIndex = 0\l}"];
}
}
subgraph cluster_Region_1360484145 {
label = "R(2:(3:(1:38)|94|114)|(2:95|115))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_185758869 {
label = "IF [B:35:0x02bd] THEN: R(3:(1:38)|94|114) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x02bd|if (r31 == ID_SIMPLE_BLOCK) goto L_0x02bf\l}"];
subgraph cluster_Region_1168672056 {
label = "R(3:(1:38)|94|114)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1612383773 {
label = "LOOP:0: (1:38)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x02cf|if (r30.blockLacingSampleIndex \< r30.blockLacingSampleCount) goto L_0x02d1\l}"];
subgraph cluster_Region_1268370832 {
label = "R(1:38)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x02d1|LOOP_END\lLOOP:0: B:36:0x02bf\-\>B:38:0x02d1\l|writeSampleData(r33, r24, r30.blockLacingSampleSizes[r30.blockLacingSampleIndex])\lcommitSampleToOutput(r24, r30.blockTimeUs + ((long) ((r30.blockLacingSampleIndex * r24.defaultSampleDurationNs) \/ 1000)))\lr30.blockLacingSampleIndex++\l}"];
}
}
Node_94 [shape=record,label="{94\:\ 0x0575|r30.blockState = 0\l}"];
Node_114 [shape=record,label="{114\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1591863617 {
label = "R(2:95|115)";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x057f|writeSampleData(r33, r24, r30.blockLacingSampleSizes[0])\l}"];
Node_115 [shape=record,label="{115\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
}
}
subgraph cluster_Region_190737392 {
label = "R(2:6|111)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x00c3|r30.currentTrack.sampleStrippedBytes = new byte[r32]\lr33.readFully(r30.currentTrack.sampleStrippedBytes, 0, r32)\l}"];
Node_111 [shape=record,label="{111\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
subgraph cluster_Region_326107346 {
label = "R(2:7|112)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x00f0|r30.currentTrack.encryptionKeyId = new byte[r32]\lr33.readFully(r30.currentTrack.encryptionKeyId, 0, r32)\l}"];
Node_112 [shape=record,label="{112\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
subgraph cluster_Region_317773505 {
label = "R(2:3|108)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0020|java.util.Arrays.fill(r30.seekEntryIdBytes.data, (byte) 0)\lr33.readFully(r30.seekEntryIdBytes.data, 4 \- r32, r32)\lr30.seekEntryIdBytes.setPosition(0)\lr30.seekEntryId = (int) r30.seekEntryIdBytes.readUnsignedInt()\l}"];
Node_108 [shape=record,label="{108\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
subgraph cluster_Region_719520108 {
label = "R(2:4|109)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x006b|r30.currentTrack.codecPrivate = new byte[r32]\lr33.readFully(r30.currentTrack.codecPrivate, 0, r32)\l}"];
Node_109 [shape=record,label="{109\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
subgraph cluster_Region_1377500715 {
label = "R(2:5|110)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0097|r30.currentTrack.projectionData = new byte[r32]\lr33.readFully(r30.currentTrack.projectionData, 0, r32)\l}"];
Node_110 [shape=record,label="{110\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
subgraph cluster_Region_1098846762 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001f|throw new com.google.android.exoplayer2.ParserException(\"Unexpected id: \" + r31)\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0003}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x011d}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x01a3}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x025f}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0260|PHI: r11 \l  PHI: (r11v1 'isInvisible' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x026c}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x026e}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0274|REMOVE\lADDED_TO_REGION\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0276}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0292|REMOVE\lADDED_TO_REGION\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0294}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x02b7}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x02bf|LOOP_START\lLOOP:0: B:36:0x02bf\-\>B:38:0x02d1\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0323}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x032b}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x03a3}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x03ae|LOOP_START\lPHI: r8 r17 r23 \l  PHI: (r8v6 'headerSize' int) = (r8v5 'headerSize' int), (r8v8 'headerSize' int) binds: [B:48:0x03a9, B:54:0x03f5] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v4 'sampleIndex' int) = (r17v3 'sampleIndex' int), (r17v5 'sampleIndex' int) binds: [B:48:0x03a9, B:54:0x03f5] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r23v4 'totalSamplesSize' int) = (r23v3 'totalSamplesSize' int), (r23v5 'totalSamplesSize' int) binds: [B:48:0x03a9, B:54:0x03f5] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:49:0x03ae\-\>B:54:0x03f5\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x0420}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x042b|LOOP_START\lPHI: r8 r17 r23 \l  PHI: (r8v1 'headerSize' int) = (r8v0 'headerSize' int), (r8v3 'headerSize' int) binds: [B:58:0x0426, B:85:0x050f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v1 'sampleIndex' int) = (r17v0 'sampleIndex' int), (r17v2 'sampleIndex' int) binds: [B:58:0x0426, B:85:0x050f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r23v1 'totalSamplesSize' int) = (r23v0 'totalSamplesSize' int), (r23v2 'totalSamplesSize' int) binds: [B:58:0x0426, B:85:0x050f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:59:0x042b\-\>B:85:0x050f\l}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x045e}"];
Node_66 [shape=record,color=red,label="{66\:\ 0x0469|LOOP_START\lPHI: r9 \l  PHI: (r9v1 'i' int) = (r9v0 'i' int), (r9v2 'i' int) binds: [B:65:0x0466, B:82:0x0500] A[DONT_GENERATE, DONT_INLINE]\lLOOP:4: B:66:0x0469\-\>B:82:0x0500\l}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x04b2|LOOP_START\lPHI: r16 r18 \l  PHI: (r16v1 'readPosition' int) = (r16v0 'readPosition' int), (r16v2 'readPosition' int) binds: [B:70:0x0489, B:73:0x04b6] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r18v3 'readValue' long) = (r18v2 'readValue' long), (r18v6 'readValue' long) binds: [B:70:0x0489, B:73:0x04b6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:5: B:71:0x04b2\-\>B:73:0x04b6\l}"];
Node_76 [shape=record,color=red,label="{76\:\ 0x04ea|PHI: r8 r18 \l  PHI: (r8v3 'headerSize' int) = (r8v2 'headerSize' int), (r8v4 'headerSize' int), (r8v4 'headerSize' int) binds: [B:106:0x04ea, B:74:0x04da, B:75:0x04dc] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r18v1 'readValue' long) = (r18v0 'readValue' long), (r18v3 'readValue' long), (r18v4 'readValue' long) binds: [B:106:0x04ea, B:74:0x04da, B:75:0x04dc] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x04f1}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x04f8}"];
Node_88 [shape=record,color=red,label="{88\:\ 0x054a}"];
Node_90 [shape=record,color=red,label="{90\:\ 0x0565}"];
Node_91 [shape=record,color=red,label="{91\:\ 0x0568}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x0575|SYNTHETIC\l}"];
Node_97 [shape=record,color=red,label="{97\:\ 0x0402|SYNTHETIC\l}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x03f5|SYNTHETIC\l}"];
Node_99 [shape=record,color=red,label="{99\:\ 0x04f8|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_100 [shape=record,color=red,label="{100\:\ 0x04f8|SYNTHETIC\l}"];
Node_101 [shape=record,color=red,label="{101\:\ 0x052c|SYNTHETIC\l}"];
Node_102 [shape=record,color=red,label="{102\:\ 0x045e|SYNTHETIC\l}"];
Node_103 [shape=record,color=red,label="{103\:\ 0x050f|SYNTHETIC\l}"];
Node_104 [shape=record,color=red,label="{104\:\ 0x050f|SYNTHETIC\l}"];
Node_105 [shape=record,color=red,label="{105\:\ 0x0489|SYNTHETIC\l}"];
Node_106 [shape=record,color=red,label="{106\:\ 0x04ea|SYNTHETIC\l}"];
Node_107 [shape=record,color=red,label="{107\:\ 0x04da|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.binaryElement((r30v0 'this' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r31v0 'id' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32v0 'contentSize' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_0 -> Node_4;
Node_0 -> Node_5;
Node_0 -> Node_6;
Node_0 -> Node_7;
Node_0 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_113;
Node_15 -> Node_16;
Node_15 -> Node_34[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_39[style=dashed];
Node_18 -> Node_19;
Node_40 -> Node_41;
Node_40 -> Node_43[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_44 -> Node_46[style=dashed];
Node_45 -> Node_19;
Node_47 -> Node_48;
Node_47 -> Node_56[style=dashed];
Node_48 -> Node_49;
Node_50 -> Node_51;
Node_50 -> Node_97[style=dashed];
Node_51 -> Node_52;
Node_53 -> Node_52;
Node_53 -> Node_98[style=dashed];
Node_52 -> Node_53;
Node_54 -> Node_49;
Node_55 -> Node_19;
Node_57 -> Node_58;
Node_57 -> Node_88[style=dashed];
Node_58 -> Node_59;
Node_60 -> Node_61;
Node_60 -> Node_101[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_65[style=dashed];
Node_62 -> Node_102;
Node_65 -> Node_66;
Node_67 -> Node_68;
Node_67 -> Node_106[style=dashed];
Node_68 -> Node_69;
Node_69 -> Node_82[style=dashed];
Node_69 -> Node_105;
Node_70 -> Node_71;
Node_72 -> Node_73;
Node_72 -> Node_107[style=dashed];
Node_73 -> Node_71;
Node_74 -> Node_75;
Node_74 -> Node_76[style=dashed];
Node_75 -> Node_76;
Node_82 -> Node_66;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_99;
Node_79 -> Node_83[style=dashed];
Node_79 -> Node_100;
Node_83 -> Node_84;
Node_84 -> Node_86;
Node_84 -> Node_103[style=dashed];
Node_86 -> Node_104;
Node_85 -> Node_59;
Node_87 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_90;
Node_29 -> Node_30;
Node_29 -> Node_92[style=dashed];
Node_30 -> Node_31;
Node_92 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_93[style=dashed];
Node_32 -> Node_33;
Node_93 -> Node_33;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_35 -> Node_95[style=dashed];
Node_37 -> Node_38;
Node_37 -> Node_96[style=dashed];
Node_38 -> Node_36;
Node_94 -> Node_114;
Node_95 -> Node_115;
Node_6 -> Node_111;
Node_7 -> Node_112;
Node_3 -> Node_108;
Node_4 -> Node_109;
Node_5 -> Node_110;
Node_1 -> Node_2;
Node_8 -> Node_9;
Node_14 -> Node_15;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_91;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_91;
Node_28 -> Node_29;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_46 -> Node_47;
Node_49 -> Node_50;
Node_56 -> Node_57;
Node_59 -> Node_60;
Node_63 -> Node_64;
Node_66 -> Node_67;
Node_71 -> Node_72;
Node_76 -> Node_77;
Node_78 -> Node_79;
Node_80 -> Node_81;
Node_88 -> Node_89;
Node_90 -> Node_22;
Node_91 -> Node_29;
Node_96 -> Node_94;
Node_97 -> Node_55;
Node_98 -> Node_54;
Node_99 -> Node_80;
Node_100 -> Node_80;
Node_101 -> Node_87;
Node_102 -> Node_63;
Node_103 -> Node_85;
Node_104 -> Node_85;
Node_105 -> Node_70;
Node_106 -> Node_76;
Node_107 -> Node_74;
}

