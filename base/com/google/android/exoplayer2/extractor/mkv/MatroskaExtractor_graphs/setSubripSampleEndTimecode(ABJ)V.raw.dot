digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.setSubripSampleEndTimecode([BJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[long, double]) = \l  (3600000000(0xd693a400, double:1.778636325E\-314) ?[long, double])\l \l0x0005: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r6 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x000b: CMP_L  (r5 I:int) = (r12 I:long A[D('timeUs' long)]), (r6 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: SGET  (r4 I:byte[]) =  com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.SUBRIP_TIMECODE_EMPTY byte[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r5 I:?[int, float, short, byte, char]) = (19 ?[int, float, short, byte, char]) \l0x0013: CONST  (r6 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0015: INVOKE  \l  (r4 I:java.lang.Object A[D('timeCodeData' byte[])])\l  (r10 I:int)\l  (r11 I:java.lang.Object A[D('subripSampleData' byte[])])\l  (r5 I:int)\l  (r6 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: ARITH  (r6 I:long) = (r12 I:long A[D('timeUs' long)]) \/ (r8 I:long) \l0x001b: CAST  (r0 I:int) = (int) (r6 I:long) \l0x001c: CAST  (r6 I:long) = (long) (r0 I:int A[D('hours' int)]) \l0x001d: ARITH  (r6 I:long) = (r6 I:long) * (r8 I:long) \l0x001e: ARITH  (r12 I:long A[D('timeUs' long)]) = (r12 I:long A[D('timeUs' long)]) \- (r6 I:long) \l0x001f: CONST  (r6 I:?[long, double]) = \l  (60000000(0x3938700, double:2.96439388E\-316) ?[long, double])\l \l0x0022: ARITH  (r6 I:long) = (r12 I:long A[D('timeUs' long)]) \/ (r6 I:long) \l0x0024: CAST  (r2 I:int) = (int) (r6 I:long) \l0x0025: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (60000000(0x3938700, float:8.670878E\-37) ?[int, float, short, byte, char])\l \l0x0028: ARITH  (r5 I:int) = (r5 I:int) * (r2 I:int A[D('minutes' int)]) \l0x0029: CAST  (r6 I:long) = (long) (r5 I:int) \l0x002a: ARITH  (r12 I:long A[D('timeUs' long)]) = (r12 I:long A[D('timeUs' long)]) \- (r6 I:long) \l0x002b: CONST  (r6 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x002e: ARITH  (r6 I:long) = (r12 I:long A[D('timeUs' long)]) \/ (r6 I:long) \l0x0030: CAST  (r3 I:int) = (int) (r6 I:long) \l0x0031: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1000000(0xf4240, float:1.401298E\-39) ?[int, float, short, byte, char])\l \l0x0034: ARITH  (r5 I:int) = (r5 I:int) * (r3 I:int A[D('seconds' int)]) \l0x0035: CAST  (r6 I:long) = (long) (r5 I:int) \l0x0036: ARITH  (r12 I:long A[D('timeUs' long)]) = (r12 I:long A[D('timeUs' long)]) \- (r6 I:long) \l0x0037: CONST  (r6 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0039: ARITH  (r6 I:long) = (r12 I:long A[D('timeUs' long)]) \/ (r6 I:long) \l0x003b: CAST  (r1 I:int) = (int) (r6 I:long) \l0x003c: SGET  (r5 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x003e: CONST_STR  (r6 I:java.lang.String) =  \"%02d:%02d:%02d,%03d\" \l0x0040: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0041: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0043: INVOKE  (r8 I:java.lang.Integer) = (r0 I:int A[D('hours' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0047: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0049: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x004a: INVOKE  (r9 I:java.lang.Integer) = (r2 I:int A[D('minutes' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x004e: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0050: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0051: INVOKE  (r9 I:java.lang.Integer) = (r3 I:int A[D('seconds' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0055: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0057: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0058: INVOKE  (r9 I:java.lang.Integer) = (r1 I:int A[D('milliseconds' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x005c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x005e: INVOKE  (r5 I:java.lang.String) = \l  (r5 I:java.util.Locale)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.Object[])\l java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String type: STATIC \l0x0062: INVOKE  (r4 I:byte[]) = (r5 I:java.lang.String) com.google.android.exoplayer2.util.Util.getUtf8Bytes(java.lang.String):byte[] type: STATIC \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.setSubripSampleEndTimecode((r11 I:byte[] A[D('subripSampleData' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0019: r4 'timeCodeData' byte[]\l  0x001c\-0x0066: r0 'hours' int\l  0x003c\-0x0066: r1 'milliseconds' int\l  0x0025\-0x0066: r2 'minutes' int\l  0x0031\-0x0066: r3 'seconds' int\l  0x0066\-0x0066: r4 'timeCodeData' byte[]\l  ?\-0x0066: r11 'subripSampleData' byte[]\l  ?\-0x0066: r12 'timeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

