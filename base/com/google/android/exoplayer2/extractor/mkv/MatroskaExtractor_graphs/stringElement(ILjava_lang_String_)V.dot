digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.stringElement(ILjava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|switch(r4) \{\l    case 134: goto L_0x0033;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_DOC_TYPE :int: goto L_0x0004;\l    case com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.ID_LANGUAGE :int: goto L_0x0038;\l    default: goto L_0x0003;\l\}\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (DOC_TYPE_WEBM.equals(r5) != false) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (DOC_TYPE_MATROSKA.equals(r5) != false) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014}"];
Node_6 [shape=record,label="{6\:\ 0x0032|throw new com.google.android.exoplayer2.ParserException(new java.lang.StringBuilder().append(\"DocType \").append(r5).append(\" not supported\").toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|r3.currentTrack.codecId = r5\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.access$202(r3.currentTrack, r5)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.stringElement((r3v0 'this' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r4v0 'id' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'value' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_0 -> Node_8;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_7 -> Node_12;
Node_8 -> Node_13;
}

