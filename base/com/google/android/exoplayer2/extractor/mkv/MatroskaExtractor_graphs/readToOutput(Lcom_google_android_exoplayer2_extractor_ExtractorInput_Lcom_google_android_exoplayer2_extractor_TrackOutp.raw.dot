digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToOutput(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/TrackOutput;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleStrippedBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x0002: INVOKE  (r1 I:int) = (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char] A[D('strippedBytesLeft' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = \l  (r6 I:int A[D('length' int)])\l  (r1 I:int A[D('strippedBytesLeft' int)])\l java.lang.Math.min(int, int):int type: STATIC \l0x000c: IGET  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleStrippedBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x000e: INVOKE  \l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('output' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r0 I:int A[D('bytesRead' int)])\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.util.ParsableByteArray, int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesRead int \l0x0013: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('bytesRead' int)]) \l0x0014: IPUT  \l  (r2 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesRead int \l0x0016: IGET  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesWritten int \l0x0018: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('bytesRead' int)]) \l0x0019: IPUT  \l  (r2 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesWritten int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN  (r0 I:int A[D('bytesRead' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  (r0 I:int) = \l  (r5 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('output' com.google.android.exoplayer2.extractor.TrackOutput)])\l  (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r6 I:int A[D('length' int)])\l  (r2 I:boolean)\l com.google.android.exoplayer2.extractor.TrackOutput.sampleData(com.google.android.exoplayer2.extractor.ExtractorInput, int, boolean):int type: INTERFACE \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToOutput((r3 'this' I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.google.android.exoplayer2.extractor.TrackOutput A[D('output' com.google.android.exoplayer2.extractor.TrackOutput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000c\-0x001c: r0 'bytesRead' int\l  0x0021\-0x0021: r0 'bytesRead' int\l  0x0006\-0x0021: r1 'strippedBytesLeft' int\l  ?\-0x0021: r4 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x0021: r5 'output' com.google.android.exoplayer2.extractor.TrackOutput\l  ?\-0x0021: r6 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

