digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToTarget(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;[BII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleStrippedBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x0002: INVOKE  (r1 I:int) = (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l0x0006: INVOKE  (r0 I:int) = (r7 I:int A[D('length' int)]), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x000a: ARITH  (r1 I:int) = (r6 I:int A[D('offset' int)]) + (r0 I:int A[D('pendingStrippedBytes' int)]) \l0x000c: ARITH  (r2 I:int) = (r7 I:int A[D('length' int)]) \- (r0 I:int A[D('pendingStrippedBytes' int)]) \l0x000e: INVOKE  \l  (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r5 I:byte[] A[D('target' byte[])])\l  (r1 I:int)\l  (r2 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char] A[D('pendingStrippedBytes' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IGET  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleStrippedBytes com.google.android.exoplayer2.util.ParsableByteArray \l0x0015: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r5 I:byte[] A[D('target' byte[])])\l  (r6 I:int A[D('offset' int)])\l  (r0 I:int A[D('pendingStrippedBytes' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.readBytes(byte[], int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesRead int \l0x001a: ARITH  (r1 I:int) = (r1 I:int) + (r7 I:int A[D('length' int)]) \l0x001b: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.sampleBytesRead int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToTarget((r3 'this' I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r4 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte[] A[D('target' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000a\-0x001d: r0 'pendingStrippedBytes' int\l  ?\-0x001d: r4 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x001d: r5 'target' byte[]\l  ?\-0x001d: r6 'offset' int\l  ?\-0x001d: r7 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

