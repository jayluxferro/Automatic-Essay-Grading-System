digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToOutput(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;Lcom\/google\/android\/exoplayer2\/extractor\/TrackOutput;I)I" {
subgraph cluster_Region_1399033067 {
label = "R(4:0|(1:2)(1:5)|3|4) | DECL_VAR: int bytesRead\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r1 = r3.sampleStrippedBytes.bytesLeft()\l}"];
subgraph cluster_IfRegion_1261416651 {
label = "IF [B:1:0x0006] THEN: R(1:2) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r1 \> 0) goto L_0x0008\l}"];
subgraph cluster_Region_1735346579 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|int r0 = java.lang.Math.min(r6, r1)\lr5.sampleData(r3.sampleStrippedBytes, r0)\l}"];
}
subgraph cluster_Region_1806517624 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001c|int r0 = r5.sampleData(r4, r6, false)\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0011|PHI: r0 \l  PHI: (r0v1 'bytesRead' int) = (r0v0 'bytesRead' int), (r0v2 'bytesRead' int) binds: [B:5:0x001c, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|r3.sampleBytesRead += r0\lr3.sampleBytesWritten += r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|RETURN\l|return r0\l}"];
}
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.readToOutput((r3v0 'this' com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor A[IMMUTABLE_TYPE, THIS]), (r4v0 'input' com.google.android.exoplayer2.extractor.ExtractorInput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'output' com.google.android.exoplayer2.extractor.TrackOutput A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'length' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_3;
Node_3 -> Node_4;
}

