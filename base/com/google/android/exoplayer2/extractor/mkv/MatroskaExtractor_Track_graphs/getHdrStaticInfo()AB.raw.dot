digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.getHdrStaticInfo()[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1195593728(0x47435000, float:50000.0) ?[int, float, short, byte, char])\l \l0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x0005: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (\-1082130432(0xffffffffbf800000, float:\-1.0) ?[int, float, short, byte, char])\l \l0x0007: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryRChromaticityX float \l0x0009: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryRChromaticityY float \l0x000f: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryGChromaticityX float \l0x0015: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryGChromaticityY float \l0x001b: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryBChromaticityX float \l0x0021: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryBChromaticityY float \l0x0027: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.whitePointChromaticityX float \l0x002d: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.whitePointChromaticityY float \l0x0033: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.maxMasteringLuminance float \l0x0039: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.minMasteringLuminance float \l0x003f: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0045 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: RETURN  (r1 I:byte[]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: CONST  (r2 I:?[int, float, short, byte, char]) = (25 ?[int, float, short, byte, char]) \l0x0047: NEW_ARRAY  (r1 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0049: INVOKE  (r0 I:java.nio.ByteBuffer) = (r1 I:byte[] A[D('hdrStaticInfoData' byte[])]) java.nio.ByteBuffer.wrap(byte[]):java.nio.ByteBuffer type: STATIC \l0x004d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:byte)\l java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x0051: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryRChromaticityX float \l0x0053: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0054: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0055: CAST  (r2 I:int) = (int) (r2 I:float) \l0x0056: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0057: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x005a: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryRChromaticityY float \l0x005c: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x005d: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x005e: CAST  (r2 I:int) = (int) (r2 I:float) \l0x005f: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0060: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0063: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryGChromaticityX float \l0x0065: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0066: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0067: CAST  (r2 I:int) = (int) (r2 I:float) \l0x0068: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0069: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x006c: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryGChromaticityY float \l0x006e: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x006f: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0070: CAST  (r2 I:int) = (int) (r2 I:float) \l0x0071: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0072: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0075: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryBChromaticityX float \l0x0077: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0078: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0079: CAST  (r2 I:int) = (int) (r2 I:float) \l0x007a: CAST  (r2 I:short) = (short) (r2 I:int) \l0x007b: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x007e: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.primaryBChromaticityY float \l0x0080: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0081: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0082: CAST  (r2 I:int) = (int) (r2 I:float) \l0x0083: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0084: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0087: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.whitePointChromaticityX float \l0x0089: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x008a: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x008b: CAST  (r2 I:int) = (int) (r2 I:float) \l0x008c: CAST  (r2 I:short) = (short) (r2 I:int) \l0x008d: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0090: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.whitePointChromaticityY float \l0x0092: ARITH  (r2 I:float) = (r2 I:float) * (r5 I:float) \l0x0093: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0094: CAST  (r2 I:int) = (int) (r2 I:float) \l0x0095: CAST  (r2 I:short) = (short) (r2 I:int) \l0x0096: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x0099: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.maxMasteringLuminance float \l0x009b: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x009c: CAST  (r2 I:int) = (int) (r2 I:float) \l0x009d: CAST  (r2 I:short) = (short) (r2 I:int) \l0x009e: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x00a1: IGET  (r2 I:float) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.minMasteringLuminance float \l0x00a3: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x00a4: CAST  (r2 I:int) = (int) (r2 I:float) \l0x00a5: CAST  (r2 I:short) = (short) (r2 I:int) \l0x00a6: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x00a9: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.maxContentLuminance int \l0x00ab: CAST  (r2 I:short) = (short) (r2 I:int) \l0x00ac: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l0x00af: IGET  (r2 I:int) = \l  (r6 I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track)\l com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.maxFrameAverageLuminance int \l0x00b1: CAST  (r2 I:short) = (short) (r2 I:int) \l0x00b2: INVOKE  \l  (r0 I:java.nio.ByteBuffer A[D('hdrStaticInfo' java.nio.ByteBuffer)])\l  (r2 I:short)\l java.nio.ByteBuffer.putShort(short):java.nio.ByteBuffer type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private byte[] com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.getHdrStaticInfo((r6 'this' I:com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor$Track A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x004d\-0x00b5: r0 'hdrStaticInfo' java.nio.ByteBuffer\l  0x0049\-0x00b5: r1 'hdrStaticInfoData' byte[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_22 -> Node_21;
}

