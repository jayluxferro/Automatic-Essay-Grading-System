digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.parseFourCcVc1Private(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r7 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}, TRY_ENTER]\l0x0005: INVOKE  (r2 I:long) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLittleEndianUnsignedInt():long type: VIRTUAL A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0009: CONST  (r8 I:?[long, double]) = \l  (826496599(0x31435657, double:4.08343576E\-315) ?[long, double])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x000c: CMP_L  (r7 I:int) = (r2 I:long A[D('compression' long)]), (r8 I:long) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0012 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: RETURN  (r7 I:java.util.List\<byte[]\>) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r7 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0016: ARITH  (r6 I:int) = (r7 I:int) + (20 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0018: IGET  (r0 I:byte[]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x001a: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startOffset' int)])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: ARRAY_LENGTH  (r7 I:int) = (r0 I:?[] A[D('bufferData' byte[])]) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x001c: ARITH  (r7 I:int) = (r7 I:int) + (\-4 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r5 I:?[int, byte, short, char] A[D('offset' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:19:0x0046 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('bufferData' byte[]), IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char] A[D('offset' int)])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0043 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: ARITH  (r7 I:int) = (r5 I:int A[D('offset' int)]) + (1 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0026: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('bufferData' byte[]), IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0043 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: ARITH  (r7 I:int) = (r5 I:int A[D('offset' int)]) + (2 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x002c: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('bufferData' byte[]), IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x002e: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0043 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: ARITH  (r7 I:int) = (r5 I:int A[D('offset' int)]) + (3 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0033: AGET  (r7 I:byte A[IMMUTABLE_TYPE]) = \l  (r0 I:byte[] A[D('bufferData' byte[]), IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0035: CONST  (r8 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0043 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: ARRAY_LENGTH  (r7 I:int) = (r0 I:?[] A[D('bufferData' byte[])]) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x003a: INVOKE  (r4 I:byte[]) = \l  (r0 I:byte[] A[D('bufferData' byte[])])\l  (r5 I:int A[D('offset' int)])\l  (r7 I:int)\l java.util.Arrays.copyOfRange(byte[], int, int):byte[] type: STATIC A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x003e: INVOKE  (r7 I:java.util.List) = (r4 I:java.lang.Object A[D('initializationData' byte[])]) java.util.Collections.singletonList(java.lang.Object):java.util.List type: STATIC A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0042: GOTO  \-\> 0x0011 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: ARITH  (r5 I:int A[D('offset' int)]) = (r5 I:int A[D('offset' int)]) + (1 int) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0045: GOTO  \-\> 0x001b A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: NEW_INSTANCE  (r7 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x0048: CONST_STR  (r8 I:java.lang.String) =  \"Failed to find FourCC VC1 initialization data\" A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l0x004a: INVOKE  \l  (r7 I:com.google.android.exoplayer2.ParserException)\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: THROW  (r7 I:java.lang.Throwable) A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x004e \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|ExcHandler: ArrayIndexOutOfBoundsException null\lSplitter:B:1:0x0002\l|0x004e: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x004f|0x004f: NEW_INSTANCE  (r7 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0051: CONST_STR  (r8 I:java.lang.String) =  \"Error parsing FourCC VC1 codec private\" \l0x0053: INVOKE  \l  (r7 I:com.google.android.exoplayer2.ParserException)\l  (r8 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static java.util.List\<byte[]\> com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor.Track.parseFourCcVc1Private((r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('buffer' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x003e\-0x0043: r4 'initializationData' byte[]\l  0x001a\-0x004e: r0 'bufferData' byte[]\l  0x0009\-0x004e: r2 'compression' long\l  0x001b\-0x004e: r5 'offset' int\l  0x0018\-0x004e: r6 'startOffset' int\l  0x004f\-0x0056: r1 'e' java.lang.ArrayIndexOutOfBoundsException\l  ?\-0x0056: r10 'buffer' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ParserException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;, ), Ljava\/util\/List, \<[B\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_5;
Node_18 -> Node_7;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

