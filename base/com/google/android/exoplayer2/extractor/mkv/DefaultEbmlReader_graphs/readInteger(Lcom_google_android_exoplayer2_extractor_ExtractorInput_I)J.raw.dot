digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.readInteger(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:byte[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.scratch byte[] \l0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  \l  (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:byte[])\l  (r4 I:int)\l  (r10 I:int A[D('byteLength' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.readFully(byte[], int, int):void type: INTERFACE \l0x0006: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r10 I:?[int, byte, short, char] A[D('byteLength' int)])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000d: ARITH  (r4 I:long) = (r2 I:long A[D('value' long)]) \<\< (r1 I:long) \l0x000f: IGET  (r1 I:byte[]) = \l  (r8 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.scratch byte[] \l0x0011: AGET  (r1 I:byte A[IMMUTABLE_TYPE]) = \l  (r1 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0013: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0015: CAST  (r6 I:long) = (long) (r1 I:int) \l0x0016: ARITH  (r2 I:long A[D('value' long)]) = (r4 I:long) \| (r6 I:long) \l0x0018: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN  (r2 I:long A[D('value' long)]) \l}"];
MethodNode[shape=record,label="{private long com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.readInteger((r8 'this' I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader A[IMMUTABLE_TYPE, THIS]), (r9 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('byteLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x001b: r0 'i' int\l  0x0008\-0x001b: r2 'value' long\l  ?\-0x001b: r9 'input' com.google.android.exoplayer2.extractor.ExtractorInput\l  ?\-0x001b: r10 'byteLength' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

