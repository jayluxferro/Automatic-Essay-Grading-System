digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.read(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement\>) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.masterElementsStack java.util.Stack \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.util.Stack) java.util.Stack.isEmpty():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r4 I:long) = \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x0014: IGET  (r0 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement\>) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.masterElementsStack java.util.Stack \l0x0016: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x001a: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement) = (com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement) (r0 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.MasterElement.access$000(com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement):long type: STATIC \l0x0020: CMP_L  (r0 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r1 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x0026: IGET  (r0 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement\>) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.masterElementsStack java.util.Stack \l0x0028: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Stack) java.util.Stack.pop():java.lang.Object type: VIRTUAL \l0x002c: CHECK_CAST  (r0 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement) = (com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement) (r0 I:?[OBJECT, ARRAY]) \l0x002e: INVOKE  (r0 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.MasterElement.access$100(com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement):int type: STATIC \l0x0032: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.endMasterElement(int):void type: INTERFACE \l0x0035: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: RETURN  (r0 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IGET  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005e \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.VarintReader) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.varintReader com.google.android.exoplayer2.extractor.mkv.VarintReader \l0x003f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0040: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0042: INVOKE  (r8 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:boolean)\l  (r4 I:boolean)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.readUnsignedVarint(com.google.android.exoplayer2.extractor.ExtractorInput, boolean, boolean, int):long type: VIRTUAL \l0x0046: CONST  (r0 I:?[long, double]) = (\-2 ?[long, double]) \l0x0048: CMP_L  (r0 I:int) = (r8 I:long A[D('result' long)]), (r0 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0050 \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: INVOKE  (r8 I:long A[D('result' long)]) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.maybeResyncToNextLevel1Element(com.google.android.exoplayer2.extractor.ExtractorInput):long type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: CONST  (r0 I:?[long, double]) = (\-1 ?[long, double]) \l0x0052: CMP_L  (r0 I:int) = (r8 I:long A[D('result' long)]), (r0 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0058 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: CAST  (r0 I:int) = (int) (r8 I:long A[D('result' long)]) \l0x0059: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x005b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x005c: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l}"];
Node_20 [shape=record,label="{20\:\ 0x005e|0x005e: IGET  (r0 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x0060: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0072 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0063|0x0063: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.VarintReader) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.varintReader com.google.android.exoplayer2.extractor.mkv.VarintReader \l0x0065: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0066: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0067: CONST  (r5 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0069: INVOKE  (r0 I:long) = \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.VarintReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r1 I:boolean)\l  (r4 I:boolean)\l  (r5 I:int)\l com.google.android.exoplayer2.extractor.mkv.VarintReader.readUnsignedVarint(com.google.android.exoplayer2.extractor.ExtractorInput, boolean, boolean, int):long type: VIRTUAL \l0x006d: IPUT  \l  (r0 I:long)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x006f: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0070: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|0x0072: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x0074: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x0076: INVOKE  (r10 I:int) = \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.getElementType(int):int type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x007a|0x007a: SWITCH  \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('type' int)])\l k:[0, 1, 2, 3, 4, 5] t:[0x0178, 0x0096, 0x00ba, 0x0130, 0x0168, 0x00f1] \l}"];
Node_25 [shape=record,label="{25\:\ 0x007d|0x007d: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x007f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0081: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0084: CONST_STR  (r4 I:java.lang.String) =  \"Invalid element type \" \l0x0086: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008a: INVOKE  (r1 I:java.lang.StringBuilder) = \l  (r1 I:java.lang.StringBuilder)\l  (r10 I:int A[D('type' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x008e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0092: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0095|0x0095: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0096|0x0096: INVOKE  (r2 I:long) = \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.ExtractorInput.getPosition():long type: INTERFACE \l0x009a: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x009c: ARITH  (r6 I:long) = (r2 I:long A[D('elementContentPosition' long)]) + (r0 I:long) \l0x009e: IGET  (r0 I:java.util.Stack\<com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement\>) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.masterElementsStack java.util.Stack \l0x00a0: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement) =  com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement \l0x00a2: IGET  (r4 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x00a4: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a5: INVOKE  \l  (r1 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$MasterElement)\l  (r4 I:int)\l  (r6 I:long A[D('elementEndPosition' long)])\l  (r5 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$1)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.MasterElement.\<init\>(int, long, com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader$1):void type: DIRECT \l0x00a8: INVOKE  (r0 I:java.util.Stack), (r1 I:java.lang.Object) java.util.Stack.add(java.lang.Object):boolean type: VIRTUAL \l0x00ab: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x00ad: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x00af: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00b1: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l  (r2 I:long A[D('elementContentPosition' long)])\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.startMasterElement(int, long, long):void type: INTERFACE \l0x00b4: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b5: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x00b7: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00ba|0x00ba: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00bc: CONST  (r4 I:?[long, double]) = (8 ?[long, double]) \l0x00be: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c0|0x00c0: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:32:0x00dd \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c2|0x00c2: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x00c4: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00c6: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00c9: CONST_STR  (r4 I:java.lang.String) =  \"Invalid integer size: \" \l0x00cb: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00cf: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00d1: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x00d5: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00d9: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x00dc|0x00dc: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00dd|0x00dd: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x00df: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x00e1: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00e3: CAST  (r4 I:int) = (int) (r4 I:long) \l0x00e4: INVOKE  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.readInteger(com.google.android.exoplayer2.extractor.ExtractorInput, int):long type: DIRECT \l0x00e8: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l  (r4 I:long)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.integerElement(int, long):void type: INTERFACE \l0x00eb: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ec: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x00ee: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00f1|0x00f1: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00f3: CONST  (r4 I:?[long, double]) = (4 ?[long, double]) \l0x00f5: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00f7|0x00f7: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x011c \l}"];
Node_35 [shape=record,label="{35\:\ 0x00f9|0x00f9: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x00fb: CONST  (r4 I:?[long, double]) = (8 ?[long, double]) \l0x00fd: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00ff|0x00ff: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x011c \l}"];
Node_37 [shape=record,label="{37\:\ 0x0101|0x0101: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x0103: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0105: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0108: CONST_STR  (r4 I:java.lang.String) =  \"Invalid float size: \" \l0x010a: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x010e: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x0110: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0114: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0118: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_38 [shape=record,label="{38\:\ 0x011b|0x011b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x011c|0x011c: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x011e: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x0120: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x0122: CAST  (r4 I:int) = (int) (r4 I:long) \l0x0123: INVOKE  (r4 I:double) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.readFloat(com.google.android.exoplayer2.extractor.ExtractorInput, int):double type: DIRECT \l0x0127: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l  (r4 I:double)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.floatElement(int, double):void type: INTERFACE \l0x012a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x012b: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x012d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0130|0x0130: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x0132: CONST  (r4 I:?[long, double]) = \l  (2147483647(0x7fffffff, double:1.060997895E\-314) ?[long, double])\l \l0x0135: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0137|0x0137: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:44:0x0154 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0139|0x0139: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.ParserException) =  com.google.android.exoplayer2.ParserException \l0x013b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x013d: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0140: CONST_STR  (r4 I:java.lang.String) =  \"String element size: \" \l0x0142: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0146: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x0148: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r4 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x014c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0150: INVOKE  \l  (r0 I:com.google.android.exoplayer2.ParserException)\l  (r1 I:java.lang.String)\l com.google.android.exoplayer2.ParserException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x0153|0x0153: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0154|0x0154: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x0156: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x0158: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x015a: CAST  (r4 I:int) = (int) (r4 I:long) \l0x015b: INVOKE  (r4 I:java.lang.String) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:int)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.readString(com.google.android.exoplayer2.extractor.ExtractorInput, int):java.lang.String type: DIRECT \l0x015f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l  (r4 I:java.lang.String)\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.stringElement(int, java.lang.String):void type: INTERFACE \l0x0162: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0163: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x0165: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0168|0x0168: IGET  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.output com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput \l0x016a: IGET  (r1 I:int) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementId int \l0x016c: IGET  (r4 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x016e: CAST  (r4 I:int) = (int) (r4 I:long) \l0x016f: INVOKE  \l  (r0 I:com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput)\l  (r1 I:int)\l  (r4 I:int)\l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l com.google.android.exoplayer2.extractor.mkv.EbmlReaderOutput.binaryElement(int, int, com.google.android.exoplayer2.extractor.ExtractorInput):void type: INTERFACE \l0x0172: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0173: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l0x0175: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0178|0x0178: IGET  (r0 I:long) = \l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementContentSize long \l0x017a: CAST  (r0 I:int) = (int) (r0 I:long) \l0x017b: INVOKE  \l  (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r0 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.skipFully(int):void type: INTERFACE \l0x017e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x017f: IPUT  \l  (r0 I:int)\l  (r11 I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader)\l com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.elementState int \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader.read((r11 'this' I:com.google.android.exoplayer2.extractor.mkv.DefaultEbmlReader A[IMMUTABLE_TYPE, THIS]), (r12 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0046\-0x005e: r8 'result' long\l  0x009a\-0x00ba: r2 'elementContentPosition' long\l  0x009e\-0x00ba: r6 'elementEndPosition' long\l  0x007a\-0x0193: r10 'type' int\l  ?\-0x0193: r12 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_10 -> Node_3;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_9;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_27;
Node_24 -> Node_28;
Node_24 -> Node_33;
Node_24 -> Node_40;
Node_24 -> Node_45;
Node_24 -> Node_46;
Node_25 -> Node_26;
Node_27 -> Node_9;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_32 -> Node_9;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_39 -> Node_9;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_44 -> Node_9;
Node_45 -> Node_9;
Node_46 -> Node_4;
}

