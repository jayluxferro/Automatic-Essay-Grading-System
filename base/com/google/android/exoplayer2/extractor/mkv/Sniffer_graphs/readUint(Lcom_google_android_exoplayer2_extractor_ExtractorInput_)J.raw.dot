digraph "CFG forcom.google.android.exoplayer2.extractor.mkv.Sniffer.readUint(Lcom\/google\/android\/exoplayer2\/extractor\/ExtractorInput;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer) com.google.android.exoplayer2.extractor.mkv.Sniffer.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0004: IGET  (r4 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0006: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:byte[])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x0009: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer) com.google.android.exoplayer2.extractor.mkv.Sniffer.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x000b: IGET  (r4 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x000d: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x000f: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: CONST  (r4 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  (r4 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char] A[D('value' int)]) & (r2 I:?[int, boolean, short, byte, char] A[D('mask' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: ARITH  (r2 I:int A[D('mask' int)]) = (r2 I:int A[D('mask' int)]) \>\> (1 int) \l0x001f: ARITH  (r1 I:int A[D('length' int)]) = (r1 I:int A[D('length' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char] A[D('mask' int)]) ^ (\-1 ?[int, float, short, byte, char]) \l0x0024: ARITH  (r3 I:?[int, boolean, short, byte, char] A[D('value' int)]) = (r3 I:?[int, boolean, short, byte, char] A[D('value' int)]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0025: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer) com.google.android.exoplayer2.extractor.mkv.Sniffer.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0027: IGET  (r4 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0029: INVOKE  \l  (r8 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput)])\l  (r4 I:byte[])\l  (r6 I:int)\l  (r1 I:int A[D('length' int)])\l com.google.android.exoplayer2.extractor.ExtractorInput.peekFully(byte[], int, int):void type: INTERFACE \l0x002c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:11:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: ARITH  (r3 I:int A[D('value' int)]) = (r3 I:int A[D('value' int)]) \<\< (8 int) \l0x0031: IGET  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) = (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer) com.google.android.exoplayer2.extractor.mkv.Sniffer.scratch com.google.android.exoplayer2.util.ParsableByteArray \l0x0033: IGET  (r4 I:byte[]) = (r4 I:com.google.android.exoplayer2.util.ParsableByteArray) com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0035: ARITH  (r5 I:int) = (r0 I:int A[D('i' int)]) + (1 int) \l0x0037: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l0x0039: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x003b: ARITH  (r3 I:int A[D('value' int)]) = (r3 I:int A[D('value' int)]) + (r4 I:int) \l0x003c: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: IGET  (r4 I:int) = (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer) com.google.android.exoplayer2.extractor.mkv.Sniffer.peekLength int \l0x0041: ARITH  (r5 I:int) = (r1 I:int A[D('length' int)]) + (1 int) \l0x0043: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0044: IPUT  \l  (r4 I:int)\l  (r7 I:com.google.android.exoplayer2.extractor.mkv.Sniffer)\l com.google.android.exoplayer2.extractor.mkv.Sniffer.peekLength int \l0x0046: CAST  (r4 I:long) = (long) (r3 I:int A[D('value' int)]) \l}"];
MethodNode[shape=record,label="{private long com.google.android.exoplayer2.extractor.mkv.Sniffer.readUint((r7 'this' I:com.google.android.exoplayer2.extractor.mkv.Sniffer A[IMMUTABLE_TYPE, THIS]), (r8 I:com.google.android.exoplayer2.extractor.ExtractorInput A[D('input' com.google.android.exoplayer2.extractor.ExtractorInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002d\-0x0047: r0 'i' int\l  0x0019\-0x0047: r1 'length' int\l  0x0018\-0x0047: r2 'mask' int\l  0x0011\-0x0047: r3 'value' int\l  ?\-0x0047: r8 'input' com.google.android.exoplayer2.extractor.ExtractorInput\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_3;
}

