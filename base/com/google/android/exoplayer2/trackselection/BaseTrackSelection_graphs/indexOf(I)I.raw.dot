digraph "CFG forcom.google.android.exoplayer2.trackselection.BaseTrackSelection.indexOf(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IGET  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.trackselection.BaseTrackSelection)\l com.google.android.exoplayer2.trackselection.BaseTrackSelection.length int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r1 I:int[]) = \l  (r2 I:com.google.android.exoplayer2.trackselection.BaseTrackSelection)\l com.google.android.exoplayer2.trackselection.BaseTrackSelection.tracks int[] \l0x0007: AGET  (r1 I:?[int, float]) = \l  (r1 I:?[int, float][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('indexInTrackGroup' int)])  \-\> B:6:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r0 I:int A[D('i' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, short, byte, char] A[D('i' int)]) = (\-1 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public final int com.google.android.exoplayer2.trackselection.BaseTrackSelection.indexOf((r2 'this' I:com.google.android.exoplayer2.trackselection.BaseTrackSelection A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('indexInTrackGroup' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x000b: r0 'i' int\l  0x000c\-0x0010: r0 'i' int\l  ?\-0x0010: r3 'indexInTrackGroup' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_5;
}

