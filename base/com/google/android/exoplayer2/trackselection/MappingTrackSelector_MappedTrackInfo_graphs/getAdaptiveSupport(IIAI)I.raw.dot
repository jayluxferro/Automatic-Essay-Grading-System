digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport(II[I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0003: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: ARRAY_LENGTH  (r8 I:int) = (r12 I:?[] A[D('trackIndices' int[])]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char] A[D('i' int)]) \>= (r8 I:?[int, byte, short, char])  \-\> B:12:0x003b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: AGET  (r7 I:?[int, float]) = \l  (r12 I:?[int, float][] A[D('trackIndices' int[])])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x000b: IGET  (r8 I:com.google.android.exoplayer2.source.TrackGroupArray[]) = \l  (r9 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.trackGroups com.google.android.exoplayer2.source.TrackGroupArray[] \l0x000d: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x000f: INVOKE  (r8 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r8 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r11 I:int A[D('groupIndex' int)])\l com.google.android.exoplayer2.source.TrackGroupArray.get(int):com.google.android.exoplayer2.source.TrackGroup type: VIRTUAL \l0x0013: INVOKE  (r8 I:com.google.android.exoplayer2.Format) = \l  (r8 I:com.google.android.exoplayer2.source.TrackGroup)\l  (r7 I:int A[D('trackIndex' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0017: IGET  (r6 I:java.lang.String) = (r8 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0019: ARITH  (r3 I:int) = (r2 I:int A[D('handledTrackCount' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('handledTrackCount' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: MOVE  (r1 I:?[OBJECT, ARRAY] A[D('firstSampleMimeType' java.lang.String)]) = \l  (r6 I:?[OBJECT, ARRAY] A[D('sampleMimeType' java.lang.String)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IGET  (r8 I:int[][][]) = \l  (r9 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.formatSupport int[][][] \l0x0020: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x0022: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY][])\l  (r11 I:?[int, short, byte, char] A[D('groupIndex' int)])\l \l0x0024: AGET  (r8 I:?[int, float]) = \l  (r8 I:?[int, float][])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0026: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (12 ?[int, float, short, byte, char]) \l0x0028: INVOKE  (r0 I:int A[D('adaptiveSupport' int)]) = (r0 I:int A[D('adaptiveSupport' int)]), (r8 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x002c: ARITH  (r4 I:int A[D('i' int)]) = (r4 I:int A[D('i' int)]) + (1 int) \l0x002e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('handledTrackCount' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: INVOKE  (r8 I:boolean) = \l  (r1 I:java.lang.Object A[D('firstSampleMimeType' java.lang.String)])\l  (r6 I:java.lang.Object A[D('sampleMimeType' java.lang.String)])\l com.google.android.exoplayer2.util.Util.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: ARITH  (r5 I:?[int, boolean, short, byte, char] A[D('multipleMimeTypes' boolean)]) = (r5 I:?[int, boolean, short, byte, char] A[D('multipleMimeTypes' boolean)]) \| (r8 I:?[int, boolean, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('multipleMimeTypes' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0045 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IGET  (r8 I:int[]) = \l  (r9 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.mixedMimeTypeAdaptiveSupport int[] \l0x003f: AGET  (r8 I:?[int, float]) = \l  (r8 I:?[int, float][])\l  (r10 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x0041: INVOKE  (r0 I:int A[D('adaptiveSupport' int)]) = (r0 I:int A[D('adaptiveSupport' int)]), (r8 I:int) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: RETURN  (r0 I:int A[D('adaptiveSupport' int)]) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport((r9 'this' I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[D('rendererIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('groupIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int[] A[D('trackIndices' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x001b: r2 'handledTrackCount' int\l  0x001b\-0x002f: r3 'handledTrackCount' int\l  0x002f\-0x0030: r2 'handledTrackCount' int\l  0x0030\-0x003b: r3 'handledTrackCount' int\l  0x0019\-0x003b: r6 'sampleMimeType' java.lang.String\l  0x000b\-0x003b: r7 'trackIndex' int\l  0x0003\-0x0045: r0 'adaptiveSupport' int\l  0x0005\-0x0045: r1 'firstSampleMimeType' java.lang.String\l  0x003b\-0x0045: r2 'handledTrackCount' int\l  0x0006\-0x0045: r4 'i' int\l  0x0004\-0x0045: r5 'multipleMimeTypes' boolean\l  ?\-0x0045: r10 'rendererIndex' int\l  ?\-0x0045: r11 'groupIndex' int\l  ?\-0x0045: r12 'trackIndices' int[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_11 -> Node_10;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

