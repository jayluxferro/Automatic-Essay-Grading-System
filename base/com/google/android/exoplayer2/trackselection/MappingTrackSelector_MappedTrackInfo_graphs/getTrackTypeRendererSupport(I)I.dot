digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getTrackTypeRendererSupport(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v1 'bestRendererSupport' int) = (r0v0 'bestRendererSupport' int), (r0v2 'bestRendererSupport' int) binds: [B:0:0x0000, B:6:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:0:0x0000, B:6:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:6:0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r1 \>= r3.length) goto L_0x0017\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r3.rendererTrackTypes[r1] != r4) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|int r0 = java.lang.Math.max(r0, getRendererSupport(r1))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|LOOP_END\lPHI: r0 \l  PHI: (r0v2 'bestRendererSupport' int) = (r0v1 'bestRendererSupport' int), (r0v3 'bestRendererSupport' int) binds: [B:10:0x0014, B:9:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:6:0x0014\l|int r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getTrackTypeRendererSupport((r3v0 'this' com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo A[IMMUTABLE_TYPE, THIS]), (r4v0 'trackType' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

