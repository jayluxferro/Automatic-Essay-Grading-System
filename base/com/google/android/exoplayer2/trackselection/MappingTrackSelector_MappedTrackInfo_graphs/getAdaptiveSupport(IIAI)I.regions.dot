digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport(II[I)I" {
subgraph cluster_Region_560523004 {
label = "R(3:0|(3:3|(1:5)(1:10)|6)|12)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r2 = 0\lint r0 = 8\lboolean r5 = false\ljava.lang.String r1 = null\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_530092878 {
label = "LOOP:0: (3:3|(1:5)(1:10)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r4 \< r12.length) goto L_0x0009\l}"];
subgraph cluster_Region_740200582 {
label = "R(3:3|(1:5)(1:10)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|java.lang.String java.lang.String r6 = r9.trackGroups[r10].get(r11).getFormat(r12[r4]).sampleMimeType\lint int r3 = r2 + 1\l}"];
subgraph cluster_IfRegion_161008000 {
label = "IF [B:4:0x001b] THEN: R(1:5) ELSE: R(1:10)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r2 == 0) goto L_0x001d\l}"];
subgraph cluster_Region_1205514643 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|r1 = r6\l}"];
}
subgraph cluster_Region_568589397 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0037|PHI: r8 \l  PHI: (r8v9 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r5 \|= !com.google.android.exoplayer2.util.Util.areEqual(r1, r6)\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x001e|LOOP_END\lPHI: r1 r5 \l  PHI: (r1v2 'firstSampleMimeType' java.lang.String) = (r1v1 'firstSampleMimeType' java.lang.String), (r1v3 'firstSampleMimeType' java.lang.String) binds: [B:16:0x001e, B:15:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 'multipleMimeTypes' boolean) = (r5v2 'multipleMimeTypes' boolean), (r5v1 'multipleMimeTypes' boolean) binds: [B:16:0x001e, B:15:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:6:0x001e\l|int r0 = java.lang.Math.min(r0, r9.formatSupport[r10][r11][r4] & 12)\lr4++\lr2 = r3\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x003b|RETURN\l|return r5 ? java.lang.Math.min(r0, r9.mixedMimeTypeAdaptiveSupport[r10]) : r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lPHI: r0 r1 r2 r4 r5 \l  PHI: (r0v1 'adaptiveSupport' int) = (r0v0 'adaptiveSupport' int), (r0v3 'adaptiveSupport' int) binds: [B:0:0x0000, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'firstSampleMimeType' java.lang.String) = (r1v0 'firstSampleMimeType' java.lang.String), (r1v2 'firstSampleMimeType' java.lang.String) binds: [B:0:0x0000, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'handledTrackCount' int) = (r2v0 'handledTrackCount' int), (r2v2 'handledTrackCount' int) binds: [B:0:0x0000, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v2 'i' int) binds: [B:0:0x0000, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 'multipleMimeTypes' boolean) = (r5v0 'multipleMimeTypes' boolean), (r5v3 'multipleMimeTypes' boolean) binds: [B:0:0x0000, B:6:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:6:0x001e\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0030}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0034}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0036}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0039}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x003d}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x003b|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x001e|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001e|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport((r9v0 'this' com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo A[IMMUTABLE_TYPE, THIS]), (r10v0 'rendererIndex' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'groupIndex' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'trackIndices' int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_14[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_15;
Node_10 -> Node_16;
Node_6 -> Node_1;
Node_12 -> Node_13;
Node_12 -> Node_18;
Node_1 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_10;
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_15 -> Node_6;
Node_16 -> Node_6;
}

