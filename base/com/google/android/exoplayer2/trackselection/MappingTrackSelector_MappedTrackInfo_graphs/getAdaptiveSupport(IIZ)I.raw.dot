digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport(IIZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r6 I:com.google.android.exoplayer2.source.TrackGroupArray[]) = \l  (r7 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.trackGroups com.google.android.exoplayer2.source.TrackGroupArray[] \l0x0002: AGET  (r6 I:?[OBJECT, ARRAY]) = \l  (r6 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x0004: INVOKE  (r6 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r6 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r9 I:int A[D('groupIndex' int)])\l com.google.android.exoplayer2.source.TrackGroupArray.get(int):com.google.android.exoplayer2.source.TrackGroup type: VIRTUAL \l0x0008: IGET  (r2 I:int) = (r6 I:com.google.android.exoplayer2.source.TrackGroup) com.google.android.exoplayer2.source.TrackGroup.length int \l0x000a: NEW_ARRAY  (r5 I:int[]) = (r2 I:int A[D('trackCount' int), IMMUTABLE_TYPE]) type: int[] \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndexCount' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char] A[D('trackCount' int)])  \-\> B:9:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l  (r8 I:int A[D('rendererIndex' int)])\l  (r9 I:int A[D('groupIndex' int)])\l  (r1 I:int A[D('i' int)])\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getTrackFormatSupport(int, int, int):int type: VIRTUAL \l0x0015: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixedSupport' int)]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('includeCapabilitiesExceededTracks' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixedSupport' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: ARITH  (r3 I:int) = (r4 I:int A[D('trackIndexCount' int)]) + (1 int) \l0x001f: APUT  \l  (r5 I:?[int, float][] A[D('trackIndices' int[])])\l  (r4 I:?[int, short, byte, char] A[D('trackIndexCount' int)])\l  (r1 I:?[int, float] A[D('i' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l0x0023: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndexCount' int)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: INVOKE  (r5 I:int[] A[D('trackIndices' int[])]) = \l  (r5 I:int[] A[D('trackIndices' int[])])\l  (r4 I:int A[D('trackIndexCount' int)])\l java.util.Arrays.copyOf(int[], int):int[] type: STATIC \l0x0029: INVOKE  (r6 I:int) = \l  (r7 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l  (r8 I:int A[D('rendererIndex' int)])\l  (r9 I:int A[D('groupIndex' int)])\l  (r5 I:int[] A[D('trackIndices' int[])])\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport(int, int, int[]):int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  (r6 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndexCount' int)])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getAdaptiveSupport((r7 'this' I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('rendererIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('groupIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('includeCapabilitiesExceededTracks' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x000f: r3 'trackIndexCount' int\l  0x000f\-0x001f: r4 'trackIndexCount' int\l  0x001f\-0x0024: r3 'trackIndexCount' int\l  0x0015\-0x0025: r0 'fixedSupport' int\l  0x0024\-0x002f: r4 'trackIndexCount' int\l  0x002e\-0x002f: r0 'fixedSupport' int\l  0x000e\-0x002f: r1 'i' int\l  0x000a\-0x002f: r2 'trackCount' int\l  0x002f\-0x002f: r3 'trackIndexCount' int\l  0x000c\-0x002f: r5 'trackIndices' int[]\l  ?\-0x002f: r8 'rendererIndex' int\l  ?\-0x002f: r9 'groupIndex' int\l  ?\-0x002f: r10 'includeCapabilitiesExceededTracks' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_8;
}

