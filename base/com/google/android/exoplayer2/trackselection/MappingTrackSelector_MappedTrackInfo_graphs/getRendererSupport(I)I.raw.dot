digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getRendererSupport(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r5 I:int[][][]) = \l  (r6 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.formatSupport int[][][] \l0x0003: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r5 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: ARRAY_LENGTH  (r5 I:int) = (r3 I:?[] A[D('rendererFormatSupport' int[][])]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r5 I:?[int, byte, short, char])  \-\> B:14:0x0027 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r3 I:?[OBJECT, ARRAY][] A[D('rendererFormatSupport' int[][])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x000c: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char] A[D('j' int)]) \>= (r5 I:?[int, byte, short, char])  \-\> B:13:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r3 I:?[OBJECT, ARRAY][] A[D('rendererFormatSupport' int[][])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0011: AGET  (r5 I:?[int, float]) = \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('j' int)])\l \l0x0013: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3] t:[0x0022, 0x0020] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: INVOKE  (r0 I:int A[D('bestRendererSupport' int)]) = \l  (r0 I:int A[D('bestRendererSupport' int)])\l  (r4 I:int A[D('trackRendererSupport' int)])\l java.lang.Math.max(int, int):int type: STATIC \l0x001d: ARITH  (r2 I:int A[D('j' int)]) = (r2 I:int A[D('j' int)]) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r5 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestRendererSupport' int)])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo.getRendererSupport((r6 'this' I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$MappedTrackInfo A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('rendererIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0020: r4 'trackRendererSupport' int\l  0x000a\-0x0021: r2 'j' int\l  0x0023\-0x0024: r4 'trackRendererSupport' int\l  0x0022\-0x0027: r2 'j' int\l  0x0001\-0x0031: r0 'bestRendererSupport' int\l  0x0006\-0x0031: r1 'i' int\l  0x0005\-0x0031: r3 'rendererFormatSupport' int[][]\l  ?\-0x0031: r7 'rendererIndex' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_12 -> Node_9;
Node_13 -> Node_1;
Node_14 -> Node_11;
}

