digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.Parameters.withAllowNonSeamlessAdaptiveness(Z)Lcom\/google\/android\/exoplayer2\/trackselection\/DefaultTrackSelector$Parameters;" {
subgraph cluster_Region_697125336 {
label = "R(1:(2:(1:3)|(2:2|4)))";
node [shape=record,color=blue];
subgraph cluster_Region_859986503 {
label = "R(2:(1:3)|(2:2|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_653530548 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r14 == r13.allowNonSeamlessAdaptiveness) goto L_?\l}"];
subgraph cluster_Region_90746701 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r13\l}"];
}
}
subgraph cluster_Region_1181283761 {
label = "R(2:2|4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\l|return new com.google.android.exoplayer2.trackselection.DefaultTrackSelector.Parameters(r13.preferredAudioLanguage, r13.preferredTextLanguage, r13.allowMixedMimeAdaptiveness, r14, r13.maxVideoWidth, r13.maxVideoHeight, r13.maxVideoBitrate, r13.exceedVideoConstraintsIfNecessary, r13.exceedRendererCapabilitiesIfNecessary, r13.viewportWidth, r13.viewportHeight, r13.orientationMayChange)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters com.google.android.exoplayer2.trackselection.DefaultTrackSelector.Parameters.withAllowNonSeamlessAdaptiveness((r13v0 'this' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$Parameters A[IMMUTABLE_TYPE, THIS]), (r14v0 'allowNonSeamlessAdaptiveness' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug info: failed to restart local var, previous not found, register: 13\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_0 -> Node_1;
}

