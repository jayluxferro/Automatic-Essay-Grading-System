digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectAudioTrack(Lcom\/google\/android\/exoplayer2\/source\/TrackGroupArray;[[ILjava\/lang\/String;ZZLcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection$Factory;)Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0002: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IGET  (r12 I:int) = \l  (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l com.google.android.exoplayer2.source.TrackGroupArray.length int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char] A[D('groupIndex' int)]) \>= (r12 I:?[int, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r9 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l  (r3 I:int A[D('groupIndex' int)])\l com.google.android.exoplayer2.source.TrackGroupArray.get(int):com.google.android.exoplayer2.source.TrackGroup type: VIRTUAL \l0x000c: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY][] A[D('formatSupport' int[][])])\l  (r3 I:?[int, short, byte, char] A[D('groupIndex' int)])\l \l0x000e: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IGET  (r12 I:int) = \l  (r9 I:com.google.android.exoplayer2.source.TrackGroup A[D('trackGroup' com.google.android.exoplayer2.source.TrackGroup)])\l com.google.android.exoplayer2.source.TrackGroup.length int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r10 I:?[int, byte, short, char] A[D('trackIndex' int)]) \>= (r12 I:?[int, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: AGET  (r12 I:?[int, float]) = \l  (r8 I:?[int, float][] A[D('trackFormatSupport' int[])])\l  (r10 I:?[int, short, byte, char] A[D('trackIndex' int)])\l \l0x0015: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('exceedRendererCapabilitiesIfNecessary' boolean)])\l \l0x0017: INVOKE  (r12 I:boolean) = (r12 I:int), (r0 I:boolean) com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupported(int, boolean):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  (r2 I:com.google.android.exoplayer2.Format) = \l  (r9 I:com.google.android.exoplayer2.source.TrackGroup A[D('trackGroup' com.google.android.exoplayer2.source.TrackGroup)])\l  (r10 I:int A[D('trackIndex' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0021: AGET  (r12 I:?[int, float]) = \l  (r8 I:?[int, float][] A[D('trackFormatSupport' int[])])\l  (r10 I:?[int, short, byte, char] A[D('trackIndex' int)])\l \l0x0023: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('preferredAudioLanguage' java.lang.String)])\l \l0x0025: INVOKE  (r11 I:int) = \l  (r12 I:int)\l  (r0 I:java.lang.String)\l  (r2 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAudioTrackScore(int, java.lang.String, com.google.android.exoplayer2.Format):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r11 I:?[int, byte, short, char] A[D('trackScore' int)]) \<= (r7 I:?[int, byte, short, char] A[D('selectedTrackScore' int)])  \-\> B:11:0x002e \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedGroupIndex' int)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('groupIndex' int)])\l \l0x002c: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedTrackIndex' int)]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndex' int)])\l \l0x002d: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedTrackScore' int)]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackScore' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: ARITH  (r10 I:int A[D('trackIndex' int)]) = (r10 I:int A[D('trackIndex' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: ARITH  (r3 I:int A[D('groupIndex' int)]) = (r3 I:int A[D('groupIndex' int)]) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: CONST  (r12 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('selectedGroupIndex' int)]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: RETURN  \l  (r12 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: INVOKE  (r4 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l  (r5 I:int A[D('selectedGroupIndex' int)])\l com.google.android.exoplayer2.source.TrackGroupArray.get(int):com.google.android.exoplayer2.source.TrackGroup type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0051 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: AGET  (r12 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY][] A[D('formatSupport' int[][])])\l  (r5 I:?[int, short, byte, char] A[D('selectedGroupIndex' int)])\l \l0x0041: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allowMixedMimeAdaptiveness' boolean)])\l \l0x0043: INVOKE  (r1 I:int[]) = \l  (r4 I:com.google.android.exoplayer2.source.TrackGroup A[D('selectedGroup' com.google.android.exoplayer2.source.TrackGroup)])\l  (r12 I:int[])\l  (r0 I:boolean)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveAudioTracks(com.google.android.exoplayer2.source.TrackGroup, int[], boolean):int[] type: STATIC \l0x0047: ARRAY_LENGTH  (r12 I:int) = (r1 I:?[] A[D('adaptiveTracks' int[])]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|0x0048: IF  (r12 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0051 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r19 I:?[OBJECT, ARRAY] A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory)])\l \l0x004c: INVOKE  (r12 I:com.google.android.exoplayer2.trackselection.TrackSelection) = \l  (r0 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory)\l  (r4 I:com.google.android.exoplayer2.source.TrackGroup A[D('selectedGroup' com.google.android.exoplayer2.source.TrackGroup)])\l  (r1 I:int[] A[D('adaptiveTracks' int[])])\l com.google.android.exoplayer2.trackselection.TrackSelection.Factory.createTrackSelection(com.google.android.exoplayer2.source.TrackGroup, int[]):com.google.android.exoplayer2.trackselection.TrackSelection type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0051|0x0051: NEW_INSTANCE  (r12 I:com.google.android.exoplayer2.trackselection.FixedTrackSelection) =  com.google.android.exoplayer2.trackselection.FixedTrackSelection \l0x0053: INVOKE  \l  (r12 I:com.google.android.exoplayer2.trackselection.FixedTrackSelection)\l  (r4 I:com.google.android.exoplayer2.source.TrackGroup A[D('selectedGroup' com.google.android.exoplayer2.source.TrackGroup)])\l  (r6 I:int A[D('selectedTrackIndex' int)])\l com.google.android.exoplayer2.trackselection.FixedTrackSelection.\<init\>(com.google.android.exoplayer2.source.TrackGroup, int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.trackselection.TrackSelection com.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectAudioTrack((r13 'this' I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector A[IMMUTABLE_TYPE, THIS]), (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int[][] A[D('formatSupport' int[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:java.lang.String A[D('preferredAudioLanguage' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:boolean A[D('exceedRendererCapabilitiesIfNecessary' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:boolean A[D('allowMixedMimeAdaptiveness' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0021\-0x002e: r2 'format' com.google.android.exoplayer2.Format\l  0x0029\-0x002e: r11 'trackScore' int\l  0x000e\-0x0034: r8 'trackFormatSupport' int[]\l  0x000c\-0x0034: r9 'trackGroup' com.google.android.exoplayer2.source.TrackGroup\l  0x000f\-0x0034: r10 'trackIndex' int\l  0x0047\-0x0051: r1 'adaptiveTracks' int[]\l  0x0004\-0x0056: r3 'groupIndex' int\l  0x003d\-0x0056: r4 'selectedGroup' com.google.android.exoplayer2.source.TrackGroup\l  0x0001\-0x0056: r5 'selectedGroupIndex' int\l  0x0002\-0x0056: r6 'selectedTrackIndex' int\l  0x0003\-0x0056: r7 'selectedTrackScore' int\l  ?\-0x0056: r14 'groups' com.google.android.exoplayer2.source.TrackGroupArray\l  ?\-0x0056: r15 'formatSupport' int[][]\l  ?\-0x0056: r16 'preferredAudioLanguage' java.lang.String\l  ?\-0x0056: r17 'exceedRendererCapabilitiesIfNecessary' boolean\l  ?\-0x0056: r18 'allowMixedMimeAdaptiveness' boolean\l  ?\-0x0056: r19 'adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_16;
Node_22 -> Node_16;
}

