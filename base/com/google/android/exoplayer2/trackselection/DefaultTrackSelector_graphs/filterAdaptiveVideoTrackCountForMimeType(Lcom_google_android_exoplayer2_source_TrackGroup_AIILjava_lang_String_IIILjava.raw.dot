digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.filterAdaptiveVideoTrackCountForMimeType(Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;[IILjava\/lang\/String;IIILjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = \l  (r17 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l java.util.List.size():int type: INTERFACE \l0x0004: ARITH  (r8 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r8 I:?[int, byte, short, char] A[D('i' int)]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l \l0x000a: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.List), (r8 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r9 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0014: INVOKE  (r1 I:com.google.android.exoplayer2.Format) = \l  (r10 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r9 I:int A[D('trackIndex' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0018: AGET  (r3 I:?[int, float]) = \l  (r11 I:?[int, float][] A[D('formatSupport' int[])])\l  (r9 I:?[int, short, byte, char] A[D('trackIndex' int)])\l \l0x001a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY] A[D('mimeType' java.lang.String)]) \l0x001b: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('requiredAdaptiveSupport' int)])\l \l0x001c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x001d: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x001e: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x0020: INVOKE  (r1 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.Format)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupportedAdaptiveVideoTrack(com.google.android.exoplayer2.Format, java.lang.String, int, int, int, int, int):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r17 I:?[OBJECT, ARRAY] A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l \l0x0028: INVOKE  (r0 I:java.util.List), (r8 I:int A[D('i' int)]) java.util.List.remove(int):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: ARITH  (r8 I:int A[D('i' int)]) = (r8 I:int A[D('i' int)]) + (\-1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.trackselection.DefaultTrackSelector.filterAdaptiveVideoTrackCountForMimeType((r10 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[D('formatSupport' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('requiredAdaptiveSupport' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:java.util.List\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x002e: r9 'trackIndex' int\l  0x0006\-0x002e: r8 'i' int\l  ?\-0x002e: r10 'group' com.google.android.exoplayer2.source.TrackGroup\l  ?\-0x002e: r11 'formatSupport' int[]\l  ?\-0x002e: r12 'requiredAdaptiveSupport' int\l  ?\-0x002e: r13 'mimeType' java.lang.String\l  ?\-0x002e: r14 'maxVideoWidth' int\l  ?\-0x002e: r15 'maxVideoHeight' int\l  ?\-0x002e: r16 'maxVideoBitrate' int\l  0x0000\-0x002e: r17 'selectedTrackIndices' java.util.List\<java.lang.Integer\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;, [II, Ljava\/lang\/String;, III, Ljava\/util\/List, \<, Ljava\/lang\/Integer;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
}

