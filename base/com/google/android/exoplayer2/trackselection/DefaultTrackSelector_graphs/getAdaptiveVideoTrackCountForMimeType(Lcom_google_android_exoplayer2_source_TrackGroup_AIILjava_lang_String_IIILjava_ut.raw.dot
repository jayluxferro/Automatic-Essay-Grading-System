digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTrackCountForMimeType(Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;[IILjava\/lang\/String;IIILjava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r1 I:int) = \l  (r18 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r9 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x002c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l \l0x000a: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.List), (r9 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r10 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0014: INVOKE  (r1 I:com.google.android.exoplayer2.Format) = \l  (r11 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r10 I:int A[D('trackIndex' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0018: AGET  (r3 I:?[int, float]) = \l  (r12 I:?[int, float][] A[D('formatSupport' int[])])\l  (r10 I:?[int, short, byte, char] A[D('trackIndex' int)])\l \l0x001a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY] A[D('mimeType' java.lang.String)]) \l0x001b: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('requiredAdaptiveSupport' int)])\l \l0x001c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x001d: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x001f: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x0021: INVOKE  (r1 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.Format)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupportedAdaptiveVideoTrack(com.google.android.exoplayer2.Format, java.lang.String, int, int, int, int, int):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: ARITH  (r8 I:int A[D('adaptiveTrackCount' int)]) = (r8 I:int A[D('adaptiveTrackCount' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: ARITH  (r9 I:int A[D('i' int)]) = (r9 I:int A[D('i' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: RETURN  (r8 I:int A[D('adaptiveTrackCount' int)]) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTrackCountForMimeType((r11 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int[] A[D('formatSupport' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('requiredAdaptiveSupport' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:java.util.List\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x002c: r10 'trackIndex' int\l  0x0001\-0x002c: r8 'adaptiveTrackCount' int\l  0x0002\-0x002c: r9 'i' int\l  ?\-0x002c: r11 'group' com.google.android.exoplayer2.source.TrackGroup\l  ?\-0x002c: r12 'formatSupport' int[]\l  ?\-0x002c: r13 'requiredAdaptiveSupport' int\l  ?\-0x002c: r14 'mimeType' java.lang.String\l  ?\-0x002c: r15 'maxVideoWidth' int\l  ?\-0x002c: r16 'maxVideoHeight' int\l  ?\-0x002c: r17 'maxVideoBitrate' int\l  0x0000\-0x002c: r18 'selectedTrackIndices' java.util.List\<java.lang.Integer\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;, [II, Ljava\/lang\/String;, III, Ljava\/util\/List, \<, Ljava\/lang\/Integer;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

