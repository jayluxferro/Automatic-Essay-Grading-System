digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectAdaptiveVideoTrack(Lcom\/google\/android\/exoplayer2\/RendererCapabilities;Lcom\/google\/android\/exoplayer2\/source\/TrackGroupArray;[[IIIIZZIIZLcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection$Factory;)Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowNonSeamlessAdaptiveness' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowMixedMimeAdaptiveness' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r2 I:int) = \l  (r13 I:com.google.android.exoplayer2.RendererCapabilities A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities)])\l com.google.android.exoplayer2.RendererCapabilities.supportsMixedMimeTypeAdaptation():int type: INTERFACE \l0x000a: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char] A[D('requiredAdaptiveSupport' int)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IGET  (r2 I:int) = \l  (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l com.google.android.exoplayer2.source.TrackGroupArray.length int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r12 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:16:0x003b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE  (r1 I:com.google.android.exoplayer2.source.TrackGroup) = \l  (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l  (r12 I:int A[D('i' int)])\l com.google.android.exoplayer2.source.TrackGroupArray.get(int):com.google.android.exoplayer2.source.TrackGroup type: VIRTUAL \l0x0017: AGET  (r2 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY][] A[D('formatSupport' int[][])])\l  (r12 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0019: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x001b: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x001d: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x001f: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportWidth' int)])\l \l0x0021: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportHeight' int)])\l \l0x0023: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('orientationMayChange' boolean)])\l \l0x0025: INVOKE  (r11 I:int[]) = \l  (r1 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r2 I:int[])\l  (r3 I:boolean A[D('allowMixedMimeTypes' boolean)])\l  (r4 I:int A[D('requiredAdaptiveSupport' int)])\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:boolean)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTracksForGroup(com.google.android.exoplayer2.source.TrackGroup, int[], boolean, int, int, int, int, int, int, boolean):int[] type: STATIC \l0x0029: ARRAY_LENGTH  (r2 I:int) = (r11 I:?[] A[D('adaptiveTracks' int[])]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r24 I:?[OBJECT, ARRAY] A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory)])\l \l0x002e: INVOKE  (r2 I:com.google.android.exoplayer2.trackselection.TrackSelection) = \l  (r0 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory)\l  (r1 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r11 I:int[] A[D('adaptiveTracks' int[])])\l com.google.android.exoplayer2.trackselection.TrackSelection.Factory.createTrackSelection(com.google.android.exoplayer2.source.TrackGroup, int[]):com.google.android.exoplayer2.trackselection.TrackSelection type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN  \l  (r2 I:com.google.android.exoplayer2.trackselection.TrackSelection)\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r4 I:?[int, float, short, byte, char] A[D('requiredAdaptiveSupport' int)]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: ARITH  (r12 I:int A[D('i' int)]) = (r12 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|0x003b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static com.google.android.exoplayer2.trackselection.TrackSelection com.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectAdaptiveVideoTrack((r13 I:com.google.android.exoplayer2.RendererCapabilities A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int[][] A[D('formatSupport' int[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[D('allowNonSeamlessAdaptiveness' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[D('allowMixedMimeAdaptiveness' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[D('viewportWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('viewportHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[D('orientationMayChange' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x0032: r1 'group' com.google.android.exoplayer2.source.TrackGroup\l  0x0029\-0x0032: r11 'adaptiveTracks' int[]\l  0x000e\-0x0033: r3 'allowMixedMimeTypes' boolean\l  0x0004\-0x0033: r4 'requiredAdaptiveSupport' int\l  0x000f\-0x0033: r12 'i' int\l  0x0038\-0x003b: r1 'group' com.google.android.exoplayer2.source.TrackGroup\l  0x0038\-0x003b: r11 'adaptiveTracks' int[]\l  0x0038\-0x003c: r3 'allowMixedMimeTypes' boolean\l  0x0036\-0x003c: r4 'requiredAdaptiveSupport' int\l  0x0038\-0x003c: r12 'i' int\l  ?\-0x003c: r13 'rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities\l  ?\-0x003c: r14 'groups' com.google.android.exoplayer2.source.TrackGroupArray\l  ?\-0x003c: r15 'formatSupport' int[][]\l  ?\-0x003c: r16 'maxVideoWidth' int\l  ?\-0x003c: r17 'maxVideoHeight' int\l  ?\-0x003c: r18 'maxVideoBitrate' int\l  ?\-0x003c: r19 'allowNonSeamlessAdaptiveness' boolean\l  ?\-0x003c: r20 'allowMixedMimeAdaptiveness' boolean\l  ?\-0x003c: r21 'viewportWidth' int\l  ?\-0x003c: r22 'viewportHeight' int\l  ?\-0x003c: r23 'orientationMayChange' boolean\l  ?\-0x003c: r24 'adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_13;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_13 -> Node_2;
Node_14 -> Node_6;
Node_15 -> Node_7;
Node_16 -> Node_12;
}

