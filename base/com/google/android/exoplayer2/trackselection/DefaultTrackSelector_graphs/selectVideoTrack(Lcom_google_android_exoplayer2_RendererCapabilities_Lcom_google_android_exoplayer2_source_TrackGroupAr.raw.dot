digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectVideoTrack(Lcom\/google\/android\/exoplayer2\/RendererCapabilities;Lcom\/google\/android\/exoplayer2\/source\/TrackGroupArray;[[IIIIZZIIZLcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection$Factory;ZZ)Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r10 I:com.google.android.exoplayer2.trackselection.TrackSelection A[D('selection' com.google.android.exoplayer2.trackselection.TrackSelection)]) = \l  (r12 I:com.google.android.exoplayer2.RendererCapabilities A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities)])\l  (r13 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l  (r14 I:int[][] A[D('formatSupport' int[][])])\l  (r15 I:int A[D('maxVideoWidth' int)])\l  (r16 I:int A[D('maxVideoHeight' int)])\l  (r17 I:int A[D('maxVideoBitrate' int)])\l  (r18 I:boolean A[D('allowNonSeamlessAdaptiveness' boolean)])\l  (r19 I:boolean A[D('allowMixedMimeAdaptiveness' boolean)])\l  (r20 I:int A[D('viewportWidth' int)])\l  (r21 I:int A[D('viewportHeight' int)])\l  (r22 I:boolean A[D('orientationMayChange' boolean)])\l  (r23 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory)])\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectAdaptiveVideoTrack(com.google.android.exoplayer2.RendererCapabilities, com.google.android.exoplayer2.source.TrackGroupArray, int[][], int, int, int, boolean, boolean, int, int, boolean, com.google.android.exoplayer2.trackselection.TrackSelection$Factory):com.google.android.exoplayer2.trackselection.TrackSelection type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('selection' com.google.android.exoplayer2.trackselection.TrackSelection)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY] A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray)])\l \l0x000a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY] A[D('formatSupport' int[][])]) \l0x000b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x000c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x000e: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x0010: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportWidth' int)])\l \l0x0012: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportHeight' int)])\l \l0x0014: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('orientationMayChange' boolean)])\l \l0x0016: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('exceedConstraintsIfNecessary' boolean)])\l \l0x0018: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r25 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('exceedRendererCapabilitiesIfNecessary' boolean)])\l \l0x001a: INVOKE  (r10 I:com.google.android.exoplayer2.trackselection.TrackSelection A[D('selection' com.google.android.exoplayer2.trackselection.TrackSelection)]) = \l  (r0 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r1 I:int[][])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l  (r8 I:boolean)\l  (r9 I:boolean)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectFixedVideoTrack(com.google.android.exoplayer2.source.TrackGroupArray, int[][], int, int, int, int, int, boolean, boolean, boolean):com.google.android.exoplayer2.trackselection.TrackSelection type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  \l  (r10 I:com.google.android.exoplayer2.trackselection.TrackSelection A[D('selection' com.google.android.exoplayer2.trackselection.TrackSelection)])\l \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.trackselection.TrackSelection com.google.android.exoplayer2.trackselection.DefaultTrackSelector.selectVideoTrack((r11 'this' I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector A[IMMUTABLE_TYPE, THIS]), (r12 I:com.google.android.exoplayer2.RendererCapabilities A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:com.google.android.exoplayer2.source.TrackGroupArray A[D('groups' com.google.android.exoplayer2.source.TrackGroupArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int[][] A[D('formatSupport' int[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:boolean A[D('allowNonSeamlessAdaptiveness' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[D('allowMixedMimeAdaptiveness' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[D('viewportWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[D('viewportHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:boolean A[D('orientationMayChange' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:com.google.android.exoplayer2.trackselection.TrackSelection$Factory A[D('adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:boolean A[D('exceedConstraintsIfNecessary' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:boolean A[D('exceedRendererCapabilitiesIfNecessary' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x001e: r10 'selection' com.google.android.exoplayer2.trackselection.TrackSelection\l  ?\-0x001e: r12 'rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities\l  ?\-0x001e: r13 'groups' com.google.android.exoplayer2.source.TrackGroupArray\l  ?\-0x001e: r14 'formatSupport' int[][]\l  ?\-0x001e: r15 'maxVideoWidth' int\l  ?\-0x001e: r16 'maxVideoHeight' int\l  ?\-0x001e: r17 'maxVideoBitrate' int\l  ?\-0x001e: r18 'allowNonSeamlessAdaptiveness' boolean\l  ?\-0x001e: r19 'allowMixedMimeAdaptiveness' boolean\l  ?\-0x001e: r20 'viewportWidth' int\l  ?\-0x001e: r21 'viewportHeight' int\l  ?\-0x001e: r22 'orientationMayChange' boolean\l  ?\-0x001e: r23 'adaptiveTrackSelectionFactory' com.google.android.exoplayer2.trackselection.TrackSelection$Factory\l  ?\-0x001e: r24 'exceedConstraintsIfNecessary' boolean\l  ?\-0x001e: r25 'exceedRendererCapabilitiesIfNecessary' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

