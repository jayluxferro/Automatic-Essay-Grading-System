digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupportedAdaptiveVideoTrack(Lcom\/google\/android\/exoplayer2\/Format;Ljava\/lang\/String;IIIII)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r1 I:boolean) = (r5 I:int A[D('formatSupport' int)]), (r0 I:boolean) com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupported(int, boolean):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char] A[D('formatSupport' int)]) & (r6 I:?[int, boolean, short, byte, char] A[D('requiredAdaptiveSupport' int)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mimeType' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r1 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0010: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.Object)\l  (r4 I:java.lang.Object A[D('mimeType' java.lang.String)])\l com.google.android.exoplayer2.util.Util.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char] A[D('maxVideoWidth' int)])  \-\> B:20:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IF  (r1 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char] A[D('maxVideoHeight' int)])  \-\> B:20:0x002f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.bitrate int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.bitrate int \l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|0x002c: IF  (r1 I:?[int, byte, short, char]) \> (r9 I:?[int, byte, short, char] A[D('maxVideoBitrate' int)])  \-\> B:20:0x002f \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupportedAdaptiveVideoTrack((r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('formatSupport' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('requiredAdaptiveSupport' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x002f: r3 'format' com.google.android.exoplayer2.Format\l  ?\-0x002f: r4 'mimeType' java.lang.String\l  ?\-0x002f: r5 'formatSupport' int\l  ?\-0x002f: r6 'requiredAdaptiveSupport' int\l  ?\-0x002f: r7 'maxVideoWidth' int\l  ?\-0x002f: r8 'maxVideoHeight' int\l  ?\-0x002f: r9 'maxVideoBitrate' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_20;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
}

