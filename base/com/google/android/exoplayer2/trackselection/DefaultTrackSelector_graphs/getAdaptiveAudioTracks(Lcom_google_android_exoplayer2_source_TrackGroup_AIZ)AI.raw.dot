digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveAudioTracks(Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;[IZ)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: NEW_INSTANCE  (r7 I:java.util.HashSet) =  java.util.HashSet \l0x0004: INVOKE  (r7 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0007: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l com.google.android.exoplayer2.source.TrackGroup.length int \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r4 I:?[int, byte, short, char] A[D('i' int)]) \>= (r10 I:?[int, byte, short, char])  \-\> B:13:0x0030 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r3 I:com.google.android.exoplayer2.Format) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r4 I:int A[D('i' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0010: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple) =  com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple \l0x0012: IGET  (r11 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.channelCount int \l0x0014: IGET  (r12 I:int) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleRate int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowMixedMimeTypes' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  \l  (r1 I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)\l  (r11 I:int)\l  (r12 I:int)\l  (r10 I:java.lang.String)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.AudioConfigurationTuple.\<init\>(int, int, java.lang.String):void type: DIRECT \l0x001c: INVOKE  (r10 I:boolean) = \l  (r7 I:java.util.HashSet A[D('seenConfigurationTuples' java.util.HashSet\<com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple\>)])\l  (r1 I:java.lang.Object A[D('configuration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)])\l java.util.HashSet.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: INVOKE  (r2 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r14 I:int[] A[D('formatSupport' int[])])\l  (r1 I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple A[D('configuration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)])\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveAudioTrackCount(com.google.android.exoplayer2.source.TrackGroup, int[], com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r2 I:?[int, byte, short, char] A[D('configurationCount' int)]) \<= (r9 I:?[int, byte, short, char] A[D('selectedConfigurationTrackCount' int)])  \-\> B:11:0x002a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: MOVE  (r8 I:?[OBJECT, ARRAY] A[D('selectedConfiguration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)]) = \l  (r1 I:?[OBJECT, ARRAY] A[D('configuration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)])\l \l0x0029: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedConfigurationTrackCount' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('configurationCount' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: ARITH  (r4 I:int A[D('i' int)]) = (r4 I:int A[D('i' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IGET  (r10 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: IF  (r9 I:?[int, byte, short, char] A[D('selectedConfigurationTrackCount' int)]) \<= (r10 I:?[int, byte, short, char])  \-\> B:22:0x004f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: NEW_ARRAY  (r0 I:int[]) = \l  (r9 I:int A[D('selectedConfigurationTrackCount' int), IMMUTABLE_TYPE])\l type: int[] \l0x0035: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0036: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IGET  (r10 I:int) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l com.google.android.exoplayer2.source.TrackGroup.length int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: IF  (r4 I:?[int, byte, short, char] A[D('i' int)]) \>= (r10 I:?[int, byte, short, char])  \-\> B:23:0x0051 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: INVOKE  (r10 I:com.google.android.exoplayer2.Format) = \l  (r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r4 I:int A[D('i' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x003f: AGET  (r11 I:?[int, float]) = \l  (r14 I:?[int, float][] A[D('formatSupport' int[])])\l  (r4 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0041: INVOKE  (r10 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.Format)\l  (r11 I:int)\l  (r8 I:com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple A[D('selectedConfiguration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple)])\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.isSupportedAdaptiveAudioTrack(com.google.android.exoplayer2.Format, int, com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple):boolean type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: ARITH  (r6 I:int) = (r5 I:int A[D('index' int)]) + (1 int) \l0x0049: APUT  \l  (r0 I:?[int, float][] A[D('adaptiveIndices' int[])])\l  (r5 I:?[int, short, byte, char] A[D('index' int)])\l  (r4 I:?[int, float] A[D('i' int)])\l \l0x004b: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: ARITH  (r4 I:int A[D('i' int)]) = (r4 I:int A[D('i' int)]) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004f|0x004f: SGET  (r0 I:int[] A[D('adaptiveIndices' int[])]) =  com.google.android.exoplayer2.trackselection.DefaultTrackSelector.NO_TRACKS int[] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0051|0x0051: RETURN  (r0 I:int[]) \l}"];
MethodNode[shape=record,label="{private static int[] com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveAudioTracks((r13 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int[] A[D('formatSupport' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:boolean A[D('allowMixedMimeTypes' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0026\-0x002a: r2 'configurationCount' int\l  0x001c\-0x002d: r1 'configuration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple\l  0x0010\-0x0030: r3 'format' com.google.android.exoplayer2.Format\l  0x0036\-0x0049: r5 'index' int\l  0x0049\-0x004c: r6 'index' int\l  0x0035\-0x004f: r0 'adaptiveIndices' int[]\l  0x004c\-0x004f: r5 'index' int\l  0x0008\-0x0051: r4 'i' int\l  0x0007\-0x0051: r7 'seenConfigurationTuples' java.util.HashSet\<com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple\>\l  0x0002\-0x0051: r8 'selectedConfiguration' com.google.android.exoplayer2.trackselection.DefaultTrackSelector$AudioConfigurationTuple\l  0x0001\-0x0051: r9 'selectedConfigurationTrackCount' int\l  ?\-0x0051: r13 'group' com.google.android.exoplayer2.source.TrackGroup\l  ?\-0x0051: r14 'formatSupport' int[]\l  ?\-0x0051: r15 'allowMixedMimeTypes' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_6;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_16;
Node_22 -> Node_23;
}

