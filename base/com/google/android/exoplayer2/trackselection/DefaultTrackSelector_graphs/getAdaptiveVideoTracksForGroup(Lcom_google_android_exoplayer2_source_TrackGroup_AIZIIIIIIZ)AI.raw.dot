digraph "CFG forcom.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTracksForGroup(Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;[IZIIIIIIZ)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l \l0x0002: IGET  (r4 I:int) = (r0 I:com.google.android.exoplayer2.source.TrackGroup) com.google.android.exoplayer2.source.TrackGroup.length int \l0x0004: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: SGET  (r4 I:int[]) =  com.google.android.exoplayer2.trackselection.DefaultTrackSelector.NO_TRACKS int[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r4 I:int[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l \l0x000c: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r32 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportWidth' int)])\l \l0x000e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewportHeight' int)])\l \l0x0010: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r34 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('orientationMayChange' boolean)])\l \l0x0012: INVOKE  (r11 I:java.util.List) = \l  (r0 I:com.google.android.exoplayer2.source.TrackGroup)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:boolean)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getViewportFilteredTrackIndices(com.google.android.exoplayer2.source.TrackGroup, int, int, boolean):java.util.List type: STATIC \l0x0016: INVOKE  (r4 I:int) = \l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l java.util.List.size():int type: INTERFACE \l0x001a: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:7:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: SGET  (r4 I:int[]) =  com.google.android.exoplayer2.trackselection.DefaultTrackSelector.NO_TRACKS int[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r27 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowMixedMimeTypes' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: NEW_INSTANCE  (r22 I:java.util.HashSet) =  java.util.HashSet \l0x0025: INVOKE  (r22 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0028: CONST  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r4 I:int) = \l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l java.util.List.size():int type: INTERFACE \l0x0030: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:18:0x006e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0036: INVOKE  (r4 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l  (r0 I:int)\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003a: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x003c: INVOKE  (r24 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0040: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l \l0x0042: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('trackIndex' int)])\l \l0x0044: INVOKE  (r4 I:com.google.android.exoplayer2.Format) = \l  (r0 I:com.google.android.exoplayer2.source.TrackGroup)\l  (r1 I:int)\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0048: IGET  (r7 I:java.lang.String) = (r4 I:com.google.android.exoplayer2.Format) com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r22 I:?[OBJECT, ARRAY] A[D('seenMimeTypes' java.util.HashSet\<java.lang.String\>)])\l \l0x004c: INVOKE  (r4 I:boolean) = \l  (r0 I:java.util.HashSet)\l  (r7 I:java.lang.Object A[D('sampleMimeType' java.lang.String)])\l java.util.HashSet.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x006b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: MOVE  (r4 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l \l0x0054: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r26 I:?[OBJECT, ARRAY] A[D('formatSupport' int[])]) \l0x0056: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r28 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('requiredAdaptiveSupport' int)])\l \l0x0058: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x005a: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x005c: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r31 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x005e: INVOKE  (r20 I:int) = \l  (r4 I:com.google.android.exoplayer2.source.TrackGroup)\l  (r5 I:int[])\l  (r6 I:int)\l  (r7 I:java.lang.String A[D('sampleMimeType' java.lang.String)])\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTrackCountForMimeType(com.google.android.exoplayer2.source.TrackGroup, int[], int, java.lang.String, int, int, int, java.util.List):int type: STATIC \l0x0062: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('countForMimeType' int)])\l \l0x0064: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedMimeTypeTrackCount' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|0x0066: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:17:0x006b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0068|0x0068: MOVE  (r15 I:?[OBJECT, ARRAY] A[D('selectedMimeType' java.lang.String)]) = \l  (r7 I:?[OBJECT, ARRAY] A[D('sampleMimeType' java.lang.String)])\l \l0x0069: MOVE  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('selectedMimeTypeTrackCount' int)]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('countForMimeType' int)])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x006b|0x006b: ARITH  (r21 I:int A[D('i' int)]) = (r21 I:int A[D('i' int)]) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x006e|0x006e: MOVE  (r12 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l \l0x0070: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r26 I:?[OBJECT, ARRAY] A[D('formatSupport' int[])]) \l0x0072: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r28 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('requiredAdaptiveSupport' int)])\l \l0x0074: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoWidth' int)])\l \l0x0076: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoHeight' int)])\l \l0x0078: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r31 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxVideoBitrate' int)])\l \l0x007a: MOVE  (r19 I:?[OBJECT, ARRAY]) = \l  (r11 I:?[OBJECT, ARRAY] A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l \l0x007c: INVOKE  \l  (r12 I:com.google.android.exoplayer2.source.TrackGroup)\l  (r13 I:int[])\l  (r14 I:int)\l  (r15 I:java.lang.String A[D('selectedMimeType' java.lang.String)])\l  (r16 I:int)\l  (r17 I:int)\l  (r18 I:int)\l  (r19 I:java.util.List)\l com.google.android.exoplayer2.trackselection.DefaultTrackSelector.filterAdaptiveVideoTrackCountForMimeType(com.google.android.exoplayer2.source.TrackGroup, int[], int, java.lang.String, int, int, int, java.util.List):void type: STATIC \l0x007f: INVOKE  (r4 I:int) = \l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l java.util.List.size():int type: INTERFACE \l0x0083: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0084|0x0084: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:21:0x0089 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0086|0x0086: SGET  (r4 I:int[]) =  com.google.android.exoplayer2.trackselection.DefaultTrackSelector.NO_TRACKS int[] \l}"];
Node_21 [shape=record,label="{21\:\ 0x0089|0x0089: INVOKE  (r4 I:int[]) = \l  (r11 I:java.util.List A[D('selectedTrackIndices' java.util.List\<java.lang.Integer\>)])\l com.google.android.exoplayer2.util.Util.toArray(java.util.List):int[] type: STATIC \l}"];
MethodNode[shape=record,label="{private static int[] com.google.android.exoplayer2.trackselection.DefaultTrackSelector.getAdaptiveVideoTracksForGroup((r25 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:int[] A[D('formatSupport' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:boolean A[D('allowMixedMimeTypes' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:int A[D('requiredAdaptiveSupport' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:int A[D('maxVideoWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:int A[D('maxVideoHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:int A[D('maxVideoBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:int A[D('viewportWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:int A[D('viewportHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:boolean A[D('orientationMayChange' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0062\-0x006b: r20 'countForMimeType' int\l  0x004a\-0x006e: r7 'sampleMimeType' java.lang.String\l  0x002c\-0x006e: r21 'i' int\l  0x0028\-0x006e: r22 'seenMimeTypes' java.util.HashSet\<java.lang.String\>\l  0x002a\-0x006e: r23 'selectedMimeTypeTrackCount' int\l  0x0040\-0x006e: r24 'trackIndex' int\l  0x0016\-0x008e: r11 'selectedTrackIndices' java.util.List\<java.lang.Integer\>\l  0x0021\-0x008e: r15 'selectedMimeType' java.lang.String\l  ?\-0x008e: r25 'group' com.google.android.exoplayer2.source.TrackGroup\l  ?\-0x008e: r26 'formatSupport' int[]\l  ?\-0x008e: r27 'allowMixedMimeTypes' boolean\l  ?\-0x008e: r28 'requiredAdaptiveSupport' int\l  ?\-0x008e: r29 'maxVideoWidth' int\l  ?\-0x008e: r30 'maxVideoHeight' int\l  ?\-0x008e: r31 'maxVideoBitrate' int\l  ?\-0x008e: r32 'viewportWidth' int\l  ?\-0x008e: r33 'viewportHeight' int\l  ?\-0x008e: r34 'orientationMayChange' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_3;
Node_21 -> Node_3;
}

