digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.rendererSupportsTunneling([[ILcom\/google\/android\/exoplayer2\/source\/TrackGroupArray;Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r8 != null) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r2 = r7.indexOf(r8.getTrackGroup())\lr0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:2:0x0004, B:7:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000d\-\>B:7:0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r0 \>= r8.length()) goto L_0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if ((r6[r2][r8.getIndexInTrackGroup(r0)] & 16) != 16) goto L_0x0003\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:7:0x0021\l|int r0 = r0 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|SYNTHETIC\lRETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.trackselection.MappingTrackSelector.rendererSupportsTunneling((r6v0 'formatSupport' int[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'trackGroups' com.google.android.exoplayer2.source.TrackGroupArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'selection' com.google.android.exoplayer2.trackselection.TrackSelection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_3;
Node_9 -> Node_8;
Node_10 -> Node_12;
}

