digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.findRenderer([Lcom\/google\/android\/exoplayer2\/RendererCapabilities;Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r1 I:int) = \l  (r8 I:?[] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[])])\l \l0x0001: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: ARRAY_LENGTH  (r7 I:int) = \l  (r8 I:?[] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[])])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r5 I:?[int, byte, short, char] A[D('rendererIndex' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:14:0x0026 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY][] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[])])\l  (r5 I:?[int, short, byte, char] A[D('rendererIndex' int)])\l \l0x0008: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r7 I:int) = \l  (r9 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l com.google.android.exoplayer2.source.TrackGroup.length int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r6 I:?[int, byte, short, char] A[D('trackIndex' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:13:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r7 I:com.google.android.exoplayer2.Format) = \l  (r9 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r6 I:int A[D('trackIndex' int)])\l com.google.android.exoplayer2.source.TrackGroup.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0011: INVOKE  (r7 I:int) = \l  (r4 I:com.google.android.exoplayer2.RendererCapabilities A[D('rendererCapability' com.google.android.exoplayer2.RendererCapabilities)])\l  (r7 I:com.google.android.exoplayer2.Format)\l com.google.android.exoplayer2.RendererCapabilities.supportsFormat(com.google.android.exoplayer2.Format):int type: INTERFACE \l0x0015: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) & (3 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r3 I:?[int, byte, short, char] A[D('formatSupportLevel' int)]) \<= (r0 I:?[int, byte, short, char] A[D('bestFormatSupportLevel' int)])  \-\> B:12:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestRendererIndex' int)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rendererIndex' int)])\l \l0x001a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestFormatSupportLevel' int)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('formatSupportLevel' int)])\l \l0x001b: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bestFormatSupportLevel' int)]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestRendererIndex' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r2 I:int A[D('bestRendererIndex' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: ARITH  (r6 I:int A[D('trackIndex' int)]) = (r6 I:int A[D('trackIndex' int)]) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: ARITH  (r5 I:int A[D('rendererIndex' int)]) = (r5 I:int A[D('rendererIndex' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestRendererIndex' int)])\l \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.trackselection.MappingTrackSelector.findRenderer((r8 I:com.google.android.exoplayer2.RendererCapabilities[] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0001\-0x001f: r1 'bestRendererIndex' int\l  0x0017\-0x001f: r3 'formatSupportLevel' int\l  0x0008\-0x001f: r4 'rendererCapability' com.google.android.exoplayer2.RendererCapabilities\l  0x0009\-0x001f: r6 'trackIndex' int\l  0x001f\-0x0020: r2 'bestRendererIndex' int\l  0x0020\-0x0023: r3 'formatSupportLevel' int\l  0x0020\-0x0026: r4 'rendererCapability' com.google.android.exoplayer2.RendererCapabilities\l  0x0020\-0x0026: r6 'trackIndex' int\l  0x0020\-0x0027: r1 'bestRendererIndex' int\l  0x0002\-0x0027: r0 'bestFormatSupportLevel' int\l  0x0027\-0x0027: r2 'bestRendererIndex' int\l  0x0003\-0x0027: r5 'rendererIndex' int\l  ?\-0x0027: r8 'rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[]\l  ?\-0x0027: r9 'group' com.google.android.exoplayer2.source.TrackGroup\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_4;
Node_13 -> Node_1;
Node_14 -> Node_11;
}

