digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.maybeConfigureRenderersForTunneling([Lcom\/google\/android\/exoplayer2\/RendererCapabilities;[Lcom\/google\/android\/exoplayer2\/source\/TrackGroupArray;[[[I[Lcom\/google\/android\/exoplayer2\/RendererConfiguration;[Lcom\/google\/android\/exoplayer2\/trackselection\/TrackSelection;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tunnelingAudioSessionId' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0004: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: ARRAY_LENGTH  (r7 I:int) = \l  (r9 I:?[] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[])])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:17:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: AGET  (r7 I:?[OBJECT, ARRAY]) = \l  (r9 I:?[OBJECT, ARRAY][] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x000c: INVOKE  (r2 I:int) = (r7 I:com.google.android.exoplayer2.RendererCapabilities) com.google.android.exoplayer2.RendererCapabilities.getTrackType():int type: INTERFACE \l0x0010: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY][] A[D('trackSelections' com.google.android.exoplayer2.trackselection.TrackSelection[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0012: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rendererType' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rendererType' int)]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trackSelection' com.google.android.exoplayer2.trackselection.TrackSelection)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: AGET  (r7 I:?[OBJECT, ARRAY]) = \l  (r11 I:?[OBJECT, ARRAY][] A[D('rendererFormatSupports' int[][][])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x001c: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][] A[D('rendererTrackGroupArrays' com.google.android.exoplayer2.source.TrackGroupArray[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l0x001e: INVOKE  (r7 I:boolean) = \l  (r7 I:int[][])\l  (r8 I:com.google.android.exoplayer2.source.TrackGroupArray)\l  (r3 I:com.google.android.exoplayer2.trackselection.TrackSelection A[D('trackSelection' com.google.android.exoplayer2.trackselection.TrackSelection)])\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.rendererSupportsTunneling(int[][], com.google.android.exoplayer2.source.TrackGroupArray, com.google.android.exoplayer2.trackselection.TrackSelection):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0040 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rendererType' int)]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0043 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tunnelingAudioRendererIndex' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003f \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('enableTunneling' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|0x002b: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|0x002c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tunnelingAudioRendererIndex' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x004a \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tunnelingVideoRendererIndex' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x004a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0032|0x0032: ARITH  (r0 I:?[int, boolean, short, byte, char] A[D('enableTunneling' boolean)]) = (r0 I:?[int, boolean, short, byte, char] A[D('enableTunneling' boolean)]) & (r7 I:?[int, boolean, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enableTunneling' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0002 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0035|0x0035: NEW_INSTANCE  (r5 I:com.google.android.exoplayer2.RendererConfiguration) =  com.google.android.exoplayer2.RendererConfiguration \l0x0037: INVOKE  \l  (r5 I:com.google.android.exoplayer2.RendererConfiguration)\l  (r14 I:int A[D('tunnelingAudioSessionId' int)])\l com.google.android.exoplayer2.RendererConfiguration.\<init\>(int):void type: DIRECT \l0x003a: APUT  \l  (r12 I:?[OBJECT, ARRAY][] A[D('rendererConfigurations' com.google.android.exoplayer2.RendererConfiguration[])])\l  (r4 I:?[int, short, byte, char] A[D('tunnelingAudioRendererIndex' int)])\l  (r5 I:?[OBJECT, ARRAY] A[D('tunnelingRendererConfiguration' com.google.android.exoplayer2.RendererConfiguration)])\l \l0x003c: APUT  \l  (r12 I:?[OBJECT, ARRAY][] A[D('rendererConfigurations' com.google.android.exoplayer2.RendererConfiguration[])])\l  (r6 I:?[int, short, byte, char] A[D('tunnelingVideoRendererIndex' int)])\l  (r5 I:?[OBJECT, ARRAY] A[D('tunnelingRendererConfiguration' com.google.android.exoplayer2.RendererConfiguration)])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x003f|0x003f: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tunnelingAudioRendererIndex' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0040|0x0040: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0043|0x0043: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0044|0x0044: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tunnelingVideoRendererIndex' int)]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0048 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0046|0x0046: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('enableTunneling' boolean)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0048|0x0048: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tunnelingVideoRendererIndex' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x004a|0x004a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.trackselection.MappingTrackSelector.maybeConfigureRenderersForTunneling((r9 I:com.google.android.exoplayer2.RendererCapabilities[] A[D('rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.source.TrackGroupArray[] A[D('rendererTrackGroupArrays' com.google.android.exoplayer2.source.TrackGroupArray[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[][][] A[D('rendererFormatSupports' int[][][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:com.google.android.exoplayer2.RendererConfiguration[] A[D('rendererConfigurations' com.google.android.exoplayer2.RendererConfiguration[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:com.google.android.exoplayer2.trackselection.TrackSelection[] A[D('trackSelections' com.google.android.exoplayer2.trackselection.TrackSelection[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('tunnelingAudioSessionId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0010\-0x002b: r2 'rendererType' int\l  0x0012\-0x002b: r3 'trackSelection' com.google.android.exoplayer2.trackselection.TrackSelection\l  0x003a\-0x003f: r5 'tunnelingRendererConfiguration' com.google.android.exoplayer2.RendererConfiguration\l  0x003f\-0x004a: r2 'rendererType' int\l  0x003f\-0x004a: r3 'trackSelection' com.google.android.exoplayer2.trackselection.TrackSelection\l  0x0006\-0x004b: r0 'enableTunneling' boolean\l  0x0007\-0x004b: r1 'i' int\l  0x0004\-0x004b: r4 'tunnelingAudioRendererIndex' int\l  0x0005\-0x004b: r6 'tunnelingVideoRendererIndex' int\l  ?\-0x004b: r9 'rendererCapabilities' com.google.android.exoplayer2.RendererCapabilities[]\l  ?\-0x004b: r10 'rendererTrackGroupArrays' com.google.android.exoplayer2.source.TrackGroupArray[]\l  ?\-0x004b: r11 'rendererFormatSupports' int[][][]\l  ?\-0x004b: r12 'rendererConfigurations' com.google.android.exoplayer2.RendererConfiguration[]\l  ?\-0x004b: r13 'trackSelections' com.google.android.exoplayer2.trackselection.TrackSelection[]\l  ?\-0x004b: r14 'tunnelingAudioSessionId' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_26;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_26;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_26;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_31;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_1;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_1;
Node_25 -> Node_26;
Node_26 -> Node_3;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_17;
Node_30 -> Node_26;
Node_31 -> Node_22;
}

