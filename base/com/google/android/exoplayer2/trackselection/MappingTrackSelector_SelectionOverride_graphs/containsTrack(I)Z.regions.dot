digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride.containsTrack(I)Z" {
subgraph cluster_Region_1174306518 {
label = "R(3:0|(1:(2:(1:4)|(1:5)))|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r4 = r5.tracks.length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_509819052 {
label = "LOOP:0: (1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x000d\l|if (r2 \< r4) goto L_0x0007\l}"];
subgraph cluster_Region_2139952052 {
label = "R(1:(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_131173393 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1241586546 {
label = "IF [B:3:0x0009] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r0 == r6) goto L_0x000b\l}"];
subgraph cluster_Region_1302392006 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_197278596 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x000d\l|r2++\l}"];
}
}
}
}
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride.containsTrack((r5v0 'this' com.google.android.exoplayer2.trackselection.MappingTrackSelector$SelectionOverride A[IMMUTABLE_TYPE, THIS]), (r6v0 'track' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_8;
Node_7 -> Node_4;
}

