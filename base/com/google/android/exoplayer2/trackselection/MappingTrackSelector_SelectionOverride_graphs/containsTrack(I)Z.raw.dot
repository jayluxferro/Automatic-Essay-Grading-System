digraph "CFG forcom.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride.containsTrack(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r3 I:int[]) = \l  (r5 I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$SelectionOverride)\l com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride.tracks int[] \l0x0003: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x0004: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: AGET  (r0 I:?[int, float]) = (r3 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('overrideTrack' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('track' int)])  \-\> B:6:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r1 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride.containsTrack((r5 'this' I:com.google.android.exoplayer2.trackselection.MappingTrackSelector$SelectionOverride A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('track' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0009\-0x000c: r0 'overrideTrack' int\l  0x000d\-0x000f: r0 'overrideTrack' int\l  ?\-0x000f: r6 'track' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
}

