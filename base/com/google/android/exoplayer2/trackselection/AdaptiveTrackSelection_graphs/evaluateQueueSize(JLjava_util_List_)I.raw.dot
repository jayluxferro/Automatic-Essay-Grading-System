digraph "CFG forcom.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.evaluateQueueSize(JLjava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r12 I:boolean) = \l  (r18 I:java.util.List A[D('queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\>)])\l java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r11 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r11 I:int) = \l  (r18 I:java.util.List A[D('queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\>)])\l java.util.List.size():int type: INTERFACE \l0x000c: ARITH  (r12 I:int) = (r11 I:int A[D('queueSize' int)]) + (\-1 int) \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\>)])\l \l0x0010: INVOKE  (r12 I:java.lang.Object) = (r0 I:java.util.List), (r12 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r12 I:com.google.android.exoplayer2.source.chunk.MediaChunk) = (com.google.android.exoplayer2.source.chunk.MediaChunk) (r12 I:?[OBJECT, ARRAY]) \l0x0016: IGET  (r12 I:long) = \l  (r12 I:com.google.android.exoplayer2.source.chunk.MediaChunk)\l com.google.android.exoplayer2.source.chunk.MediaChunk.endTimeUs long \l0x0018: ARITH  (r2 I:long) = (r12 I:long) \- (r16 I:long A[D('playbackPositionUs' long)]) \l0x001a: IGET  (r12 I:long) = \l  (r15 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.minDurationToRetainAfterDiscardUs long \l0x001c: CMP_L  (r12 I:int) = (r2 I:long A[D('bufferedDurationUs' long)]), (r12 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r12 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: INVOKE  (r12 I:long) =  android.os.SystemClock.elapsedRealtime():long type: STATIC \l0x0024: INVOKE  (r10 I:int) = \l  (r15 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l  (r12 I:long)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.determineIdealSelectedIndex(long):int type: DIRECT \l0x0028: INVOKE  (r9 I:com.google.android.exoplayer2.Format) = \l  (r15 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l  (r10 I:int A[D('idealSelectedIndex' int)])\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x002c: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r8 I:?[int, byte, short, char] A[D('i' int)]) \>= (r11 I:?[int, byte, short, char] A[D('queueSize' int)])  \-\> B:3:0x0007 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r18 I:?[OBJECT, ARRAY] A[D('queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\>)])\l \l0x0031: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.List), (r8 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0035: CHECK_CAST  (r4 I:com.google.android.exoplayer2.source.chunk.MediaChunk) = (com.google.android.exoplayer2.source.chunk.MediaChunk) (r4 I:?[OBJECT, ARRAY]) \l0x0037: IGET  (r5 I:com.google.android.exoplayer2.Format) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.MediaChunk A[D('chunk' com.google.android.exoplayer2.source.chunk.MediaChunk)])\l com.google.android.exoplayer2.source.chunk.MediaChunk.trackFormat com.google.android.exoplayer2.Format \l0x0039: IGET  (r12 I:long) = \l  (r4 I:com.google.android.exoplayer2.source.chunk.MediaChunk A[D('chunk' com.google.android.exoplayer2.source.chunk.MediaChunk)])\l com.google.android.exoplayer2.source.chunk.MediaChunk.startTimeUs long \l0x003b: ARITH  (r6 I:long) = (r12 I:long) \- (r16 I:long A[D('playbackPositionUs' long)]) \l0x003d: IGET  (r12 I:long) = \l  (r15 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.minDurationToRetainAfterDiscardUs long \l0x003f: CMP_L  (r12 I:int) = \l  (r6 I:long A[D('durationBeforeThisChunkUs' long)])\l  (r12 I:long)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: IF  (r12 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.bitrate int \l0x0045: IGET  (r13 I:int) = \l  (r9 I:com.google.android.exoplayer2.Format A[D('idealFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.bitrate int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: IF  (r12 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l0x004b: CONST  (r13 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l0x0050: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (720(0x2d0, float:1.009E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: IF  (r12 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|0x0054: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l0x0056: CONST  (r13 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.width int \l0x005b: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (1280(0x500, float:1.794E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: IF  (r12 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: IGET  (r12 I:int) = \l  (r5 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l0x0061: IGET  (r13 I:int) = \l  (r9 I:com.google.android.exoplayer2.Format A[D('idealFormat' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.height int \l}"];
Node_21 [shape=record,label="{21\:\ 0x0063|0x0063: IF  (r12 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:23:0x0067 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0065|0x0065: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('queueSize' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0067|0x0067: ARITH  (r8 I:int A[D('i' int)]) = (r8 I:int A[D('i' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.evaluateQueueSize((r15 'this' I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection A[IMMUTABLE_TYPE, THIS]), (r16 I:long A[D('playbackPositionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x0069: r2 'bufferedDurationUs' long\l  0x0037\-0x0069: r4 'chunk' com.google.android.exoplayer2.source.chunk.MediaChunk\l  0x0039\-0x0069: r5 'format' com.google.android.exoplayer2.Format\l  0x003d\-0x0069: r6 'durationBeforeThisChunkUs' long\l  0x002d\-0x0069: r8 'i' int\l  0x002c\-0x0069: r9 'idealFormat' com.google.android.exoplayer2.Format\l  0x0028\-0x0069: r10 'idealSelectedIndex' int\l  0x000c\-0x0069: r11 'queueSize' int\l  ?\-0x0069: r16 'playbackPositionUs' long\l  0x0000\-0x0069: r18 'queue' java.util.List\<? extends com.google.android.exoplayer2.source.chunk.MediaChunk\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(J, Ljava\/util\/List, \<+, Lcom\/google\/android\/exoplayer2\/source\/chunk\/MediaChunk;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_3;
Node_23 -> Node_7;
}

