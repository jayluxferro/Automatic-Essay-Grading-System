digraph "CFG forcom.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.determineIdealSelectedIndex(J)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r7 I:com.google.android.exoplayer2.upstream.BandwidthMeter) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.bandwidthMeter com.google.android.exoplayer2.upstream.BandwidthMeter \l0x0002: INVOKE  (r0 I:long) = \l  (r7 I:com.google.android.exoplayer2.upstream.BandwidthMeter)\l com.google.android.exoplayer2.upstream.BandwidthMeter.getBitrateEstimate():long type: INTERFACE \l0x0006: CONST  (r8 I:?[long, double]) = (\-1 ?[long, double]) \l0x0008: CMP_L  (r7 I:int) = (r0 I:long A[D('bitrateEstimate' long)]), (r8 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IGET  (r7 I:int) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.maxInitialBitrate int \l0x000e: CAST  (r2 I:long) = (long) (r7 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r7 I:int) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.length int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r5 I:?[int, byte, short, char] A[D('i' int)]) \>= (r7 I:?[int, byte, short, char])  \-\> B:16:0x0037 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST  (r8 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x0017: CMP_L  (r7 I:int) = (r12 I:long A[D('nowMs' long)]), (r8 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: INVOKE  (r7 I:boolean) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l  (r5 I:int A[D('i' int)])\l  (r12 I:long A[D('nowMs' long)])\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.isBlacklisted(int, long):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: INVOKE  (r4 I:com.google.android.exoplayer2.Format) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l  (r5 I:int A[D('i' int)])\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.getFormat(int):com.google.android.exoplayer2.Format type: VIRTUAL \l0x0025: IGET  (r7 I:int) = \l  (r4 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.bitrate int \l0x0027: CAST  (r8 I:long) = (long) (r7 I:int) \l0x0028: CMP_L  (r7 I:int) = (r8 I:long), (r2 I:long A[D('effectiveBitrate' long)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:14:0x0033 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: RETURN  (r5 I:int A[D('i' int)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: CAST  (r7 I:float) = (float) (r0 I:long A[D('bitrateEstimate' long)]) \l0x002e: IGET  (r8 I:float) = \l  (r11 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.bandwidthFraction float \l0x0030: ARITH  (r7 I:float) = (r7 I:float) * (r8 I:float) \l0x0031: CAST  (r2 I:long) = (long) (r7 I:float) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lowestBitrateNonBlacklistedIndex' int)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: ARITH  (r5 I:int A[D('i' int)]) = (r5 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lowestBitrateNonBlacklistedIndex' int)])\l \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.determineIdealSelectedIndex((r11 'this' I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection A[IMMUTABLE_TYPE, THIS]), (r12 I:long A[D('nowMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0025\-0x002c: r4 'format' com.google.android.exoplayer2.Format\l  0x0011\-0x002c: r5 'i' int\l  0x000f\-0x002d: r2 'effectiveBitrate' long\l  0x0010\-0x002d: r6 'lowestBitrateNonBlacklistedIndex' int\l  0x0033\-0x0034: r4 'format' com.google.android.exoplayer2.Format\l  0x0006\-0x0038: r0 'bitrateEstimate' long\l  0x0033\-0x0038: r2 'effectiveBitrate' long\l  0x0033\-0x0038: r5 'i' int\l  0x0033\-0x0038: r6 'lowestBitrateNonBlacklistedIndex' int\l  ?\-0x0038: r12 'nowMs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_13 -> Node_3;
Node_14 -> Node_15;
Node_15 -> Node_4;
Node_16 -> Node_12;
}

