digraph "CFG forcom.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.\<init\>(Lcom\/google\/android\/exoplayer2\/source\/TrackGroup;[ILcom\/google\/android\/exoplayer2\/upstream\/BandwidthMeter;IJJJF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0002: INVOKE  \l  (r7 I:com.google.android.exoplayer2.trackselection.BaseTrackSelection)\l  (r8 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup)])\l  (r9 I:int[] A[D('tracks' int[])])\l com.google.android.exoplayer2.trackselection.BaseTrackSelection.\<init\>(com.google.android.exoplayer2.source.TrackGroup, int[]):void type: DIRECT \l0x0005: IPUT  \l  (r10 I:com.google.android.exoplayer2.upstream.BandwidthMeter A[D('bandwidthMeter' com.google.android.exoplayer2.upstream.BandwidthMeter)])\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.bandwidthMeter com.google.android.exoplayer2.upstream.BandwidthMeter \l0x0007: IPUT  \l  (r11 I:int A[D('maxInitialBitrate' int)])\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.maxInitialBitrate int \l0x0009: ARITH  (r2 I:long) = (r12 I:long A[D('minDurationForQualityIncreaseMs' long)]) * (r4 I:long) \l0x000b: IPUT  \l  (r2 I:long)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.minDurationForQualityIncreaseUs long \l0x000d: ARITH  (r2 I:long) = (r14 I:long A[D('maxDurationForQualityDecreaseMs' long)]) * (r4 I:long) \l0x000f: IPUT  \l  (r2 I:long)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.maxDurationForQualityDecreaseUs long \l0x0011: ARITH  (r2 I:long) = (r16 I:long A[D('minDurationToRetainAfterDiscardMs' long)]) * (r4 I:long) \l0x0013: IPUT  \l  (r2 I:long)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.minDurationToRetainAfterDiscardUs long \l0x0015: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bandwidthFraction' float)])\l \l0x0017: IPUT  \l  (r0 I:float)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.bandwidthFraction float \l0x0019: CONST  (r2 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x001b: INVOKE  (r2 I:int) = \l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l  (r2 I:long)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.determineIdealSelectedIndex(long):int type: DIRECT \l0x001f: IPUT  \l  (r2 I:int)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.selectedIndex int \l0x0021: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0022: IPUT  \l  (r2 I:int)\l  (r7 I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection)\l com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.reason int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection.\<init\>((r7 'this' I:com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection A[IMMUTABLE_TYPE, THIS]), (r8 I:com.google.android.exoplayer2.source.TrackGroup A[D('group' com.google.android.exoplayer2.source.TrackGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int[] A[D('tracks' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.upstream.BandwidthMeter A[D('bandwidthMeter' com.google.android.exoplayer2.upstream.BandwidthMeter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('maxInitialBitrate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('minDurationForQualityIncreaseMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('maxDurationForQualityDecreaseMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:long A[D('minDurationToRetainAfterDiscardMs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:float A[D('bandwidthFraction' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0024: r8 'group' com.google.android.exoplayer2.source.TrackGroup\l  ?\-0x0024: r9 'tracks' int[]\l  ?\-0x0024: r10 'bandwidthMeter' com.google.android.exoplayer2.upstream.BandwidthMeter\l  ?\-0x0024: r11 'maxInitialBitrate' int\l  ?\-0x0024: r12 'minDurationForQualityIncreaseMs' long\l  ?\-0x0024: r14 'maxDurationForQualityDecreaseMs' long\l  ?\-0x0024: r16 'minDurationToRetainAfterDiscardMs' long\l  ?\-0x0024: r18 'bandwidthFraction' float\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

