digraph "CFG forcom.google.android.exoplayer2.util.ColorParser.parseColorInternal(Ljava\/lang\/String;Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r6 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0006: INVOKE  (r2 I:boolean) = \l  (r9 I:java.lang.CharSequence A[D('colorExpression' java.lang.String)])\l android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \" \" \l0x0012: CONST_STR  (r5 I:java.lang.String) =  \"\" \l0x0014: INVOKE  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)]) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l  (r2 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence):java.lang.String type: VIRTUAL \l0x0018: INVOKE  (r2 I:char) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l  (r4 I:int)\l java.lang.String.charAt(int):char type: VIRTUAL \l0x001c: CONST  (r4 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  (r2 I:java.lang.String) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l  (r3 I:int)\l java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0024: CONST  (r3 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0026: INVOKE  (r2 I:long) = (r2 I:java.lang.String), (r3 I:int) java.lang.Long.parseLong(java.lang.String, int):long type: STATIC \l0x002a: CAST  (r0 I:int) = (int) (r2 I:long) \l0x002b: INVOKE  (r2 I:int) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l java.lang.String.length():int type: VIRTUAL \l0x002f: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (\-16777216(0xffffffffff000000, float:\-1.7014118E38) ?[int, float, short, byte, char])\l \l0x0034: ARITH  (r0 I:?[int, boolean, short, byte, char] A[D('color' int)]) = (r0 I:?[int, boolean, short, byte, char] A[D('color' int)]) \| (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: RETURN  (r0 I:int A[D('color' int)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: INVOKE  (r2 I:int) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l java.lang.String.length():int type: VIRTUAL \l0x003c: CONST  (r3 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0049 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char] A[D('color' int)]) & (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char]) \l0x0042: ARITH  (r2 I:int) = (r2 I:int) \<\< (24 int) \l0x0044: ARITH  (r3 I:int) = (r0 I:int A[D('color' int)]) \>\>\> (8 int) \l0x0046: ARITH  (r0 I:?[int, boolean, short, byte, char] A[D('color' int)]) = (r2 I:?[int, boolean, short, byte, char]) \| (r3 I:?[int, boolean, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004b: INVOKE  (r2 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: CONST_STR  (r2 I:java.lang.String) =  \"rgba\" \l0x0051: INVOKE  (r2 I:boolean) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l  (r2 I:java.lang.String)\l java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0055|0x0055: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x009e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('alphaHasFloatFormat' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0091 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: SGET  (r2 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.util.ColorParser.RGBA_PATTERN_FLOAT_ALPHA java.util.regex.Pattern \l}"];
Node_19 [shape=record,label="{19\:\ 0x005b|0x005b: INVOKE  (r1 I:java.util.regex.Matcher) = \l  (r2 I:java.util.regex.Pattern)\l  (r9 I:java.lang.CharSequence A[D('colorExpression' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x005f: INVOKE  (r2 I:boolean) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00e4 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0065|0x0065: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('alphaHasFloatFormat' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0094 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0067|0x0067: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1132396544(0x437f0000, float:255.0) ?[int, float, short, byte, char])\l \l0x0069: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x006a: INVOKE  (r4 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r4 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x006e: INVOKE  (r4 I:float) = (r4 I:java.lang.String) java.lang.Float.parseFloat(java.lang.String):float type: STATIC \l0x0072: ARITH  (r2 I:float) = (r2 I:float) * (r4 I:float) \l0x0073: CAST  (r2 I:int) = (int) (r2 I:float) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|0x0074: INVOKE  (r3 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r3 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0078: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x007c: INVOKE  (r4 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r7 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0080: INVOKE  (r4 I:int) = (r4 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x0084: INVOKE  (r5 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r8 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0088: INVOKE  (r5 I:int) = (r5 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x008c: INVOKE  (r0 I:int) = (r2 I:int), (r3 I:int), (r4 I:int), (r5 I:int) com.google.android.exoplayer2.util.ColorParser.argb(int, int, int, int):int type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x0091|0x0091: SGET  (r2 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.util.ColorParser.RGBA_PATTERN_INT_ALPHA java.util.regex.Pattern \l}"];
Node_25 [shape=record,label="{25\:\ 0x0094|0x0094: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0095: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r2 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0099: INVOKE  (r2 I:int) = (r2 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x009e|0x009e: CONST_STR  (r2 I:java.lang.String) =  \"rgb\" \l0x00a0: INVOKE  (r2 I:boolean) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l  (r2 I:java.lang.String)\l java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a4|0x00a4: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00d0 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a6|0x00a6: SGET  (r2 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.util.ColorParser.RGB_PATTERN java.util.regex.Pattern \l0x00a8: INVOKE  (r1 I:java.util.regex.Matcher) = \l  (r2 I:java.util.regex.Pattern)\l  (r9 I:java.lang.CharSequence A[D('colorExpression' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x00ac: INVOKE  (r2 I:boolean) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|0x00b0: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00e4 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|0x00b2: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r3 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x00b6: INVOKE  (r2 I:int) = (r2 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x00ba: INVOKE  (r3 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r7 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x00be: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x00c2: INVOKE  (r4 I:java.lang.String) = \l  (r1 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r8 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x00c6: INVOKE  (r4 I:int) = (r4 I:java.lang.String), (r6 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x00ca: INVOKE  (r0 I:int) = (r2 I:int), (r3 I:int), (r4 I:int) com.google.android.exoplayer2.util.ColorParser.rgb(int, int, int):int type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d0|0x00d0: SGET  (r2 I:java.util.Map\<java.lang.String, java.lang.Integer\>) =  com.google.android.exoplayer2.util.ColorParser.COLOR_MAP java.util.Map \l0x00d2: INVOKE  (r3 I:java.lang.String) = \l  (r9 I:java.lang.String A[D('colorExpression' java.lang.String)])\l com.google.android.exoplayer2.util.Util.toLowerInvariant(java.lang.String):java.lang.String type: STATIC \l0x00d6: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x00da: CHECK_CAST  (r0 I:java.lang.Integer) = (java.lang.Integer) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00dc|0x00dc: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('color' java.lang.Integer)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00e4 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00de|0x00de: INVOKE  (r0 I:int A[D('color' java.lang.Integer)]) = (r0 I:java.lang.Integer A[D('color' java.lang.Integer)]) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x00e4|0x00e4: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00e6: INVOKE  (r2 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e9|0x00e9: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.util.ColorParser.parseColorInternal((r9 I:java.lang.String A[D('colorExpression' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('alphaHasFloatFormat' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002b\-0x0035: r0 'color' int\l  0x0038\-0x004f: r0 'color' int\l  0x005f\-0x0091: r1 'matcher' java.util.regex.Matcher\l  0x0094\-0x009e: r1 'matcher' java.util.regex.Matcher\l  0x00ac\-0x00d0: r1 'matcher' java.util.regex.Matcher\l  0x00dc\-0x00e4: r0 'color' java.lang.Integer\l  ?\-0x00e9: r9 'colorExpression' java.lang.String\l  ?\-0x00e9: r10 'alphaHasFloatFormat' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_8;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_34;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_8;
Node_24 -> Node_19;
Node_25 -> Node_23;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_8;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_8;
Node_34 -> Node_35;
}

