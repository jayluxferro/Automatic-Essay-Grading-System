digraph "CFG forcom.google.android.exoplayer2.util.MimeTypes.getAudioMediaMimeType(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0005|java.lang.String[] r1 = r7.split(\",\")\lint r5 = r1.length\lr4 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|LOOP_START\lPHI: r4 \l  PHI: (r4v2 int) = (r4v1 int), (r4v3 int) binds: [B:3:0x0005, B:9:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000d\-\>B:9:0x001d\l|if (r4 \>= r5) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|java.lang.String r2 = getMediaMimeType(r1[r4])\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|if (r2 == null) goto L_0x001d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017}"];
Node_8 [shape=record,label="{8\:\ 0x001b|if (isAudio(r2) != false) goto L_0x0004\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|LOOP_END\lLOOP:0: B:4:0x000d\-\>B:9:0x001d\l|int r4 = r4 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0004|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.exoplayer2.util.MimeTypes.getAudioMediaMimeType((r7v0 'codecs' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_8 -> Node_14[style=dashed];
Node_9 -> Node_4;
Node_10 -> Node_16;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

