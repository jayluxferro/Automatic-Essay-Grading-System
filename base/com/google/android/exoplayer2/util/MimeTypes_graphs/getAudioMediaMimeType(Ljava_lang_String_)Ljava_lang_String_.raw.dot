digraph "CFG forcom.google.android.exoplayer2.util.MimeTypes.getAudioMediaMimeType(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('codecs' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: RETURN  (r2 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST_STR  (r4 I:java.lang.String) =  \",\" \l0x0007: INVOKE  (r1 I:java.lang.String[]) = \l  (r7 I:java.lang.String A[D('codecs' java.lang.String)])\l  (r4 I:java.lang.String)\l java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x000b: ARRAY_LENGTH  (r5 I:int) = (r1 I:?[] A[D('codecList' java.lang.String[])]) \l0x000c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: AGET  (r0 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY][] A[D('codecList' java.lang.String[])])\l  (r4 I:?[int, short, byte, char])\l \l0x0011: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.String A[D('codec' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.getMediaMimeType(java.lang.String):java.lang.String type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mimeType' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: INVOKE  (r6 I:boolean) = (r2 I:java.lang.String A[D('mimeType' java.lang.String)]) com.google.android.exoplayer2.util.MimeTypes.isAudio(java.lang.String):boolean type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: MOVE  (r2 I:?[OBJECT, ARRAY] A[D('mimeType' java.lang.String)]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.exoplayer2.util.MimeTypes.getAudioMediaMimeType((r7 I:java.lang.String A[D('codecs' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0020: r0 'codec' java.lang.String\l  0x0015\-0x0020: r2 'mimeType' java.lang.String\l  0x000b\-0x0021: r1 'codecList' java.lang.String[]\l  ?\-0x0021: r7 'codecs' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_5;
Node_11 -> Node_3;
}

