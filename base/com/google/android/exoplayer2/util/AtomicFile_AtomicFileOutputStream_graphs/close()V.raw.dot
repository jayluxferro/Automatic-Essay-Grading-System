digraph "CFG forcom.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:boolean) = \l  (r3 I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream)\l com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.closed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: IPUT  \l  (r1 I:boolean)\l  (r3 I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream)\l com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.closed boolean \l0x0008: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream)\l com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.flush():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|SYNTHETIC\lSplitter:B:4:0x000b\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000b\l|0x000b: IGET  (r1 I:java.io.FileOutputStream) = \l  (r3 I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream)\l com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.fileOutputStream java.io.FileOutputStream A[Catch:\{ IOException \-\> 0x001a \}, TRY_ENTER]\l0x000d: INVOKE  (r1 I:java.io.FileDescriptor) = (r1 I:java.io.FileOutputStream) java.io.FileOutputStream.getFD():java.io.FileDescriptor type: VIRTUAL A[Catch:\{ IOException \-\> 0x001a \}]\l0x0011: INVOKE  (r1 I:java.io.FileDescriptor) java.io.FileDescriptor.sync():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r1 I:java.io.FileOutputStream) = \l  (r3 I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream)\l com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.fileOutputStream java.io.FileOutputStream \l0x0016: INVOKE  (r1 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|ExcHandler: IOException null\lSplitter:B:4:0x000b\l|0x001a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: CONST_STR  (r1 I:java.lang.String) =  \"AtomicFile\" \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"Failed to sync file descriptor:\" \l0x001f: INVOKE  \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Throwable A[D('e' java.io.IOException)])\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.util.AtomicFile.AtomicFileOutputStream.close((r3 'this' I:com.google.android.exoplayer2.util.AtomicFile$AtomicFileOutputStream A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x001b\-0x0022: r0 'e' java.io.IOException\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_6;
}

