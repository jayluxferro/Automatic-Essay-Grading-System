digraph "CFG forcom.google.android.exoplayer2.util.NalUnitUtil.findNalUnit([BII[Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: ARITH  (r1 I:int) = (r9 I:int A[D('endOffset' int)]) \- (r8 I:int A[D('startOffset' int)]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r3 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r9 I:int A[D('endOffset' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prefixFlags' boolean[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: INVOKE  (r10 I:boolean[] A[D('prefixFlags' boolean[])]) com.google.android.exoplayer2.util.NalUnitUtil.clearPrefixFlags(boolean[]):void type: STATIC \l0x0019: ARITH  (r9 I:int A[D('endOffset' int)]) = (r8 I:int A[D('startOffset' int)]) + (\-3 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char] A[D('startOffset' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: INVOKE  (r10 I:boolean[] A[D('prefixFlags' boolean[])]) com.google.android.exoplayer2.util.NalUnitUtil.clearPrefixFlags(boolean[]):void type: STATIC \l0x0029: ARITH  (r9 I:int A[D('endOffset' int)]) = (r8 I:int A[D('startOffset' int)]) + (\-2 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \<= (r6 I:?[int, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|0x002e: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0030|0x0030: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|0x0032: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char] A[D('startOffset' int)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: ARITH  (r3 I:int) = (r8 I:int A[D('startOffset' int)]) + (1 int) \l0x0038: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|0x003a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_24 [shape=record,label="{24\:\ 0x003c|0x003c: INVOKE  (r10 I:boolean[] A[D('prefixFlags' boolean[])]) com.google.android.exoplayer2.util.NalUnitUtil.clearPrefixFlags(boolean[]):void type: STATIC \l0x003f: ARITH  (r9 I:int A[D('endOffset' int)]) = (r8 I:int A[D('startOffset' int)]) + (\-1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|0x0042: ARITH  (r2 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x0044: ARITH  (r0 I:int) = (r8 I:int A[D('startOffset' int)]) + (2 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0046|0x0046: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:40:0x006c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0048|0x0048: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x004a: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (254(0xfe, float:3.56E\-43) ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x004c|0x004c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0051 \l}"];
Node_29 [shape=record,label="{29\:\ 0x004e|0x004e: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (3 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|0x0051: ARITH  (r3 I:int) = (r0 I:int A[D('i' int)]) + (\-2 int) \l0x0053: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0055|0x0055: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0069 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0057|0x0057: ARITH  (r3 I:int) = (r0 I:int A[D('i' int)]) + (\-1 int) \l0x0059: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x005b|0x005b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0069 \l}"];
Node_34 [shape=record,label="{34\:\ 0x005d|0x005d: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_35 [shape=record,label="{35\:\ 0x005f|0x005f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0069 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0061|0x0061: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prefixFlags' boolean[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0066 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0063|0x0063: INVOKE  (r10 I:boolean[] A[D('prefixFlags' boolean[])]) com.google.android.exoplayer2.util.NalUnitUtil.clearPrefixFlags(boolean[]):void type: STATIC \l}"];
Node_38 [shape=record,label="{38\:\ 0x0066|0x0066: ARITH  (r9 I:int A[D('endOffset' int)]) = (r0 I:int A[D('i' int)]) + (\-2 int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0069|0x0069: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (\-2 int) \l}"];
Node_40 [shape=record,label="{40\:\ 0x006c|0x006c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prefixFlags' boolean[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_41 [shape=record,label="{41\:\ 0x006e|0x006e: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \<= (r6 I:?[int, byte, short, char])  \-\> B:60:0x00a2 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0070|0x0070: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-3 int) \l0x0072: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x0074|0x0074: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x00a0 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0076|0x0076: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-2 int) \l0x0078: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x007a|0x007a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x00a0 \l}"];
Node_46 [shape=record,label="{46\:\ 0x007c|0x007c: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x007e: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_47 [shape=record,label="{47\:\ 0x0080|0x0080: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x00a0 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0082|0x0082: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_49 [shape=record,label="{49\:\ 0x0083|0x0083: APUT  \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:boolean A[IMMUTABLE_TYPE])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x0085|0x0085: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:76:0x00c8 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0087|0x0087: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-2 int) \l0x0089: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_52 [shape=record,label="{52\:\ 0x008b|0x008b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x00c6 \l}"];
Node_53 [shape=record,label="{53\:\ 0x008d|0x008d: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x008f: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_54 [shape=record,label="{54\:\ 0x0091|0x0091: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x00c6 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0093|0x0093: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_56 [shape=record,label="{56\:\ 0x0094|0x0094: APUT  \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:boolean A[IMMUTABLE_TYPE])\l \l0x0096: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x0098: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_57 [shape=record,label="{57\:\ 0x009a|0x009a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x00d6 \l}"];
Node_58 [shape=record,label="{58\:\ 0x009c|0x009c: APUT  \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l  (r4 I:boolean A[IMMUTABLE_TYPE])\l \l}"];
Node_59 [shape=record,label="{59\:\ 0x00a0|0x00a0: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_60 [shape=record,label="{60\:\ 0x00a2|0x00a2: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x00b8 \l}"];
Node_61 [shape=record,label="{61\:\ 0x00a4|0x00a4: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l}"];
Node_62 [shape=record,label="{62\:\ 0x00a6|0x00a6: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00b6 \l}"];
Node_63 [shape=record,label="{63\:\ 0x00a8|0x00a8: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-2 int) \l0x00aa: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_64 [shape=record,label="{64\:\ 0x00ac|0x00ac: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00b6 \l}"];
Node_65 [shape=record,label="{65\:\ 0x00ae|0x00ae: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x00b0: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_66 [shape=record,label="{66\:\ 0x00b2|0x00b2: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00b6 \l}"];
Node_67 [shape=record,label="{67\:\ 0x00b4|0x00b4: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_68 [shape=record,label="{68\:\ 0x00b6|0x00b6: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_69 [shape=record,label="{69\:\ 0x00b8|0x00b8: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l}"];
Node_70 [shape=record,label="{70\:\ 0x00ba|0x00ba: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x00c4 \l}"];
Node_71 [shape=record,label="{71\:\ 0x00bc|0x00bc: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x00be: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_72 [shape=record,label="{72\:\ 0x00c0|0x00c0: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x00c4 \l}"];
Node_73 [shape=record,label="{73\:\ 0x00c2|0x00c2: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_74 [shape=record,label="{74\:\ 0x00c4|0x00c4: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_75 [shape=record,label="{75\:\ 0x00c6|0x00c6: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_76 [shape=record,label="{76\:\ 0x00c8|0x00c8: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char])\l \l}"];
Node_77 [shape=record,label="{77\:\ 0x00ca|0x00ca: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x00d4 \l}"];
Node_78 [shape=record,label="{78\:\ 0x00cc|0x00cc: ARITH  (r3 I:int) = (r9 I:int A[D('endOffset' int)]) + (\-1 int) \l0x00ce: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_79 [shape=record,label="{79\:\ 0x00d0|0x00d0: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x00d4 \l}"];
Node_80 [shape=record,label="{80\:\ 0x00d2|0x00d2: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_81 [shape=record,label="{81\:\ 0x00d4|0x00d4: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_82 [shape=record,label="{82\:\ 0x00d6|0x00d6: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.NalUnitUtil.findNalUnit((r7 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('startOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('endOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean[] A[D('prefixFlags' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000d: r9 'endOffset' int\l  0x0046\-0x00d7: r0 'i' int\l  0x0005\-0x00d7: r1 'length' int\l  0x0044\-0x00d7: r2 'limit' int\l  ?\-0x00d7: r7 'data' byte[]\l  ?\-0x00d7: r8 'startOffset' int\l  0x000e\-0x00d7: r9 'endOffset' int\l  ?\-0x00d7: r10 'prefixFlags' boolean[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_25;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_5;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_5;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_5;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_40;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_26;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_39;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_5;
Node_39 -> Node_29;
Node_40 -> Node_5;
Node_40 -> Node_41[style=dashed];
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_60;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_59;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_59;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_59;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_76;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_75;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_75;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_82;
Node_58 -> Node_5;
Node_59 -> Node_49;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_69;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_68;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_68;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_49;
Node_68 -> Node_49;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_74;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_73 -> Node_49;
Node_74 -> Node_49;
Node_75 -> Node_56;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_81;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_81;
Node_80 -> Node_56;
Node_81 -> Node_56;
Node_82 -> Node_58;
}

