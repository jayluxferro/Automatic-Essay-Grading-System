digraph "CFG forcom.google.android.exoplayer2.util.NalUnitUtil.findNextUnescapeIndex([BII)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r4\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v3 'i' int) binds: [B:0:0x0000, B:9:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:9:0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r0 \>= (r5 + \-2)) goto L_0x001a\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if (r3[r0] != 0) goto L_0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009}"];
Node_6 [shape=record,label="{6\:\ 0x000d|if (r3[r0 + 1] != 0) goto L_0x0017\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f}"];
Node_8 [shape=record,label="{8\:\ 0x0014|if (r3[r0 + 2] != 3) goto L_0x0017\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:9:0x0017\l|int r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a}"];
Node_11 [shape=record,label="{11\:\ 0x001a|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0017|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r5\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.util.NalUnitUtil.findNextUnescapeIndex((r3v0 'bytes' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'offset' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'limit' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_12[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_1;
Node_10 -> Node_16;
Node_11 -> Node_10;
Node_12 -> Node_17;
Node_13 -> Node_9;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

