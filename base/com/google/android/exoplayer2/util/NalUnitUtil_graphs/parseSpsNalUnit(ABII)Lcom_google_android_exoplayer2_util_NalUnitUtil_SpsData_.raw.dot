digraph "CFG forcom.google.android.exoplayer2.util.NalUnitUtil.parseSpsNalUnit([BII)Lcom\/google\/android\/exoplayer2\/util\/NalUnitUtil$SpsData;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray) =  com.google.android.exoplayer2.util.ParsableNalUnitBitArray \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r44 I:?[OBJECT, ARRAY] A[D('nalData' byte[])]) \l0x0006: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalOffset' int)])\l \l0x0008: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nalLimit' int)])\l \l0x000a: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r3 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.\<init\>(byte[], int, int):void type: DIRECT \l0x000d: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x0011: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x0014: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0016: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x0018: INVOKE  (r33 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x001c: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x001e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x0020: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x0023: INVOKE  (r5 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0027: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0029: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: CONST  (r4 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x002c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0030|0x0030: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (110(0x6e, float:1.54E\-43) ?[int, float, short, byte, char])\l \l0x0032: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0034|0x0034: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l0x0038: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_6 [shape=record,label="{6\:\ 0x003c|0x003c: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (244(0xf4, float:3.42E\-43) ?[int, float, short, byte, char])\l \l0x003e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: CONST  (r4 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0044: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: CONST  (r4 I:?[int, float, short, byte, char]) = (83 ?[int, float, short, byte, char]) \l0x004a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: CONST  (r4 I:?[int, float, short, byte, char]) = (86 ?[int, float, short, byte, char]) \l0x0050: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (118(0x76, float:1.65E\-43) ?[int, float, short, byte, char])\l \l0x0056: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|0x005a: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x005c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|0x0060: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (138(0x8a, float:1.93E\-43) ?[int, float, short, byte, char])\l \l0x0062: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('profileIdc' int)])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|0x0064: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x00af \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: INVOKE  (r17 I:int A[D('chromaFormatIdc' int)]) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x006a: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x006b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('chromaFormatIdc' int)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x006d|0x006d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0073 \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: INVOKE  (r9 I:boolean A[D('separateColorPlaneFlag' boolean)]) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0073|0x0073: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0076: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0079: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x007a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x007c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x007f: INVOKE  (r37 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0083|0x0083: IF  (r37 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seqScalingMatrixPresentFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x00af \l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|0x0085: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0086: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('chromaFormatIdc' int)])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0088|0x0088: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00a9 \l}"];
Node_27 [shape=record,label="{27\:\ 0x008a|0x008a: CONST  (r28 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x008c|0x008c: CONST  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x008e|0x008e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0090: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r28 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|0x0092: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:40:0x00af \l}"];
Node_31 [shape=record,label="{31\:\ 0x0094|0x0094: INVOKE  (r36 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x0098|0x0098: IF  (r36 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seqScalingListPresentFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00a6 \l}"];
Node_33 [shape=record,label="{33\:\ 0x009a|0x009a: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x009b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x009d|0x009d: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:39:0x00ac \l}"];
Node_35 [shape=record,label="{35\:\ 0x009f|0x009f: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00a1|0x00a1: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x00a3: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.NalUnitUtil.skipScalingList(com.google.android.exoplayer2.util.ParsableNalUnitBitArray, int):void type: STATIC \l}"];
Node_37 [shape=record,label="{37\:\ 0x00a6|0x00a6: ARITH  (r27 I:int A[D('i' int)]) = (r27 I:int A[D('i' int)]) + (1 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00a9|0x00a9: CONST  (r28 I:?[int, float, short, byte, char] A[D('limit' int)]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00ac|0x00ac: CONST  (r4 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00af|0x00af: INVOKE  (r4 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00b3: ARITH  (r11 I:int) = (r4 I:int) + (4 int) \l0x00b5: INVOKE  (r12 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00b9: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ba: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x00bb|0x00bb: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('picOrderCntType' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x015c \l}"];
Node_42 [shape=record,label="{42\:\ 0x00bd|0x00bd: INVOKE  (r4 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00c1: ARITH  (r13 I:int A[D('picOrderCntLsbLength' int)]) = (r4 I:int) + (4 int) \l}"];
Node_43 [shape=record,label="{43\:\ 0x00c3|0x00c3: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00c6: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00c7: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x00c9: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x00cc: INVOKE  (r4 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00d0: ARITH  (r32 I:int) = (r4 I:int) + (1 int) \l0x00d2: INVOKE  (r4 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00d6: ARITH  (r29 I:int) = (r4 I:int) + (1 int) \l0x00d8: INVOKE  (r10 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_44 [shape=record,label="{44\:\ 0x00dc|0x00dc: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameMbsOnlyFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0181 \l}"];
Node_45 [shape=record,label="{45\:\ 0x00de|0x00de: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x00df|0x00df: ARITH  (r4 I:int) = (2 int) \- (r4 I:int) \l0x00e1: ARITH  (r26 I:int) = (r4 I:int) * (r29 I:int A[D('picHeightInMapUnits' int)]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x00e3|0x00e3: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameMbsOnlyFlag' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00eb \l}"];
Node_48 [shape=record,label="{48\:\ 0x00e5|0x00e5: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x00e8: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l}"];
Node_49 [shape=record,label="{49\:\ 0x00eb|0x00eb: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00ec: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x00ee: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(int):void type: VIRTUAL \l0x00f1: ARITH  (r6 I:int) = (r32 I:int A[D('picWidthInMbs' int)]) * (16 int) \l0x00f3: ARITH  (r7 I:int) = (r26 I:int A[D('frameHeightInMbs' int)]) * (16 int) \l0x00f5: INVOKE  (r25 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_50 [shape=record,label="{50\:\ 0x00f9|0x00f9: IF  (r25 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameCroppingFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x011e \l}"];
Node_51 [shape=record,label="{51\:\ 0x00fb|0x00fb: INVOKE  (r22 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x00ff: INVOKE  (r23 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0103: INVOKE  (r24 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x0107: INVOKE  (r21 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l}"];
Node_52 [shape=record,label="{52\:\ 0x010b|0x010b: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('chromaFormatIdc' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0186 \l}"];
Node_53 [shape=record,label="{53\:\ 0x010d|0x010d: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x010f|0x010f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameMbsOnlyFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0184 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0111|0x0111: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0112|0x0112: ARITH  (r19 I:int) = (2 int) \- (r4 I:int) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0114|0x0114: ARITH  (r4 I:int) = (r22 I:int A[D('frameCropLeftOffset' int)]) + (r23 I:int A[D('frameCropRightOffset' int)]) \l0x0116: ARITH  (r4 I:int) = (r4 I:int) * (r18 I:int A[D('cropUnitX' int)]) \l0x0118: ARITH  (r6 I:int A[D('frameWidth' int)]) = (r6 I:int A[D('frameWidth' int)]) \- (r4 I:int) \l0x0119: ARITH  (r4 I:int) = (r24 I:int A[D('frameCropTopOffset' int)]) + (r21 I:int A[D('frameCropBottomOffset' int)]) \l0x011b: ARITH  (r4 I:int) = (r4 I:int) * (r19 I:int A[D('cropUnitY' int)]) \l0x011d: ARITH  (r7 I:int A[D('frameHeight' int)]) = (r7 I:int A[D('frameHeight' int)]) \- (r4 I:int) \l}"];
Node_58 [shape=record,label="{58\:\ 0x011e|0x011e: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0120: INVOKE  (r40 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_59 [shape=record,label="{59\:\ 0x0124|0x0124: IF  (r40 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('vuiParametersPresentFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0156 \l}"];
Node_60 [shape=record,label="{60\:\ 0x0126|0x0126: INVOKE  (r16 I:boolean) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_61 [shape=record,label="{61\:\ 0x012a|0x012a: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('aspectRatioInfoPresentFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0156 \l}"];
Node_62 [shape=record,label="{62\:\ 0x012c|0x012c: CONST  (r4 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x012e: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x0130: INVOKE  (r15 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x0134: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_63 [shape=record,label="{63\:\ 0x0136|0x0136: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('aspectRatioIdc' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x01a7 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0138|0x0138: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x013a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x013c: INVOKE  (r35 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l0x0140: CONST  (r4 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0142: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r20 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l \l0x0144: INVOKE  (r34 I:int) = \l  (r0 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_65 [shape=record,label="{65\:\ 0x0148|0x0148: IF  (r35 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sarWidth' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0156 \l}"];
Node_66 [shape=record,label="{66\:\ 0x014a|0x014a: IF  (r34 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sarHeight' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0156 \l}"];
Node_67 [shape=record,label="{67\:\ 0x014c|0x014c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r35 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sarWidth' int)])\l \l0x014e: CAST  (r4 I:float) = (float) (r0 I:int) \l0x014f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r34 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sarHeight' int)])\l \l0x0151: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0152: MOVE  (r41 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0154: ARITH  (r8 I:float A[D('pixelWidthHeightRatio' float)]) = (r4 I:float) \/ (r41 I:float) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0156|0x0156: NEW_INSTANCE  (r4 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData) =  com.google.android.exoplayer2.util.NalUnitUtil$SpsData \l0x0158: INVOKE  \l  (r4 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l  (r5 I:int A[D('seqParameterSetId' int)])\l  (r6 I:int A[D('frameWidth' int)])\l  (r7 I:int A[D('frameHeight' int)])\l  (r8 I:float A[D('pixelWidthHeightRatio' float)])\l  (r9 I:boolean A[D('separateColorPlaneFlag' boolean)])\l  (r10 I:boolean A[D('frameMbsOnlyFlag' boolean)])\l  (r11 I:int A[D('frameNumLength' int)])\l  (r12 I:int A[D('picOrderCntType' int)])\l  (r13 I:int A[D('picOrderCntLsbLength' int)])\l  (r14 I:boolean A[D('deltaPicOrderAlwaysZeroFlag' boolean)])\l com.google.android.exoplayer2.util.NalUnitUtil.SpsData.\<init\>(int, int, int, float, boolean, boolean, int, int, int, boolean):void type: DIRECT \l}"];
Node_69 [shape=record,label="{69\:\ 0x015b|0x015b: RETURN  \l  (r4 I:com.google.android.exoplayer2.util.NalUnitUtil$SpsData)\l \l}"];
Node_70 [shape=record,label="{70\:\ 0x015c|0x015c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x015d|0x015d: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('picOrderCntType' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00c3 \l}"];
Node_72 [shape=record,label="{72\:\ 0x015f|0x015f: INVOKE  (r14 I:boolean A[D('deltaPicOrderAlwaysZeroFlag' boolean)]) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readBit():boolean type: VIRTUAL \l0x0163: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l0x0166: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readSignedExpGolombCodedInt():int type: VIRTUAL \l0x0169: INVOKE  (r4 I:int) = \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x016d: CAST  (r0 I:long) = (long) (r4 I:int) \l0x016e: MOVE  (r30 I:?[long, double]) = (r0 I:?[long, double]) \l0x0170: CONST  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_73 [shape=record,label="{73\:\ 0x0172|0x0172: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l0x0174: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0175: MOVE  (r42 I:?[long, double]) = (r0 I:?[long, double]) \l0x0177: CMP_L  (r4 I:int) = \l  (r42 I:long)\l  (r30 I:long A[D('numRefFramesInPicOrderCntCycle' long)])\l \l}"];
Node_74 [shape=record,label="{74\:\ 0x0179|0x0179: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:43:0x00c3 \l}"];
Node_75 [shape=record,label="{75\:\ 0x017b|0x017b: INVOKE  \l  (r20 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[D('data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.readUnsignedExpGolombCodedInt():int type: VIRTUAL \l0x017e: ARITH  (r27 I:int A[D('i' int)]) = (r27 I:int A[D('i' int)]) + (1 int) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0181|0x0181: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_77 [shape=record,label="{77\:\ 0x0184|0x0184: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_78 [shape=record,label="{78\:\ 0x0186|0x0186: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0187: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('chromaFormatIdc' int)])\l \l}"];
Node_79 [shape=record,label="{79\:\ 0x0189|0x0189: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x019f \l}"];
Node_80 [shape=record,label="{80\:\ 0x018b|0x018b: CONST  (r39 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x018d|0x018d: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x018e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('chromaFormatIdc' int)])\l \l}"];
Node_82 [shape=record,label="{82\:\ 0x0190|0x0190: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x01a2 \l}"];
Node_83 [shape=record,label="{83\:\ 0x0192|0x0192: CONST  (r38 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_84 [shape=record,label="{84\:\ 0x0194|0x0194: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r39 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('subWidthC' int)])\l \l}"];
Node_85 [shape=record,label="{85\:\ 0x0196|0x0196: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frameMbsOnlyFlag' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x01a5 \l}"];
Node_86 [shape=record,label="{86\:\ 0x0198|0x0198: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x0199|0x0199: ARITH  (r4 I:int) = (2 int) \- (r4 I:int) \l0x019b: ARITH  (r19 I:int) = (r38 I:int A[D('subHeightC' int)]) * (r4 I:int) \l}"];
Node_88 [shape=record,label="{88\:\ 0x019f|0x019f: CONST  (r39 I:?[int, float, short, byte, char] A[D('subWidthC' int)]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_89 [shape=record,label="{89\:\ 0x01a2|0x01a2: CONST  (r38 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_90 [shape=record,label="{90\:\ 0x01a5|0x01a5: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_91 [shape=record,label="{91\:\ 0x01a7|0x01a7: SGET  (r4 I:float[]) =  com.google.android.exoplayer2.util.NalUnitUtil.ASPECT_RATIO_IDC_VALUES float[] \l0x01a9: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_92 [shape=record,label="{92\:\ 0x01aa|0x01aa: IF  (r15 I:?[int, byte, short, char] A[D('aspectRatioIdc' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:94:0x01b1 \l}"];
Node_93 [shape=record,label="{93\:\ 0x01ac|0x01ac: SGET  (r4 I:float[]) =  com.google.android.exoplayer2.util.NalUnitUtil.ASPECT_RATIO_IDC_VALUES float[] \l0x01ae: AGET  (r8 I:?[int, float] A[D('pixelWidthHeightRatio' float)]) = \l  (r4 I:?[int, float][])\l  (r15 I:?[int, short, byte, char] A[D('aspectRatioIdc' int)])\l \l}"];
Node_94 [shape=record,label="{94\:\ 0x01b1|0x01b1: CONST_STR  (r4 I:java.lang.String) =  \"NalUnitUtil\" \l0x01b3: NEW_INSTANCE  (r41 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x01b5: INVOKE  (r41 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x01b8: CONST_STR  (r42 I:java.lang.String) =  \"Unexpected aspect_ratio_idc value: \" \l0x01ba: INVOKE  (r41 I:java.lang.StringBuilder) = (r41 I:java.lang.StringBuilder), (r42 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x01be: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r41 I:?[OBJECT, ARRAY]) \l0x01c0: INVOKE  (r41 I:java.lang.StringBuilder) = \l  (r0 I:java.lang.StringBuilder)\l  (r15 I:int A[D('aspectRatioIdc' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x01c4: INVOKE  (r41 I:java.lang.String) = (r41 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x01c8: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r41 I:?[OBJECT, ARRAY]) \l0x01ca: INVOKE  (r4 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
MethodNode[shape=record,label="{public static com.google.android.exoplayer2.util.NalUnitUtil$SpsData com.google.android.exoplayer2.util.NalUnitUtil.parseSpsNalUnit((r44 I:byte[] A[D('nalData' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r45 I:int A[D('nalOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r46 I:int A[D('nalLimit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x008e\-0x00a9: r27 'i' int\l  0x008c\-0x00a9: r28 'limit' int\l  0x0098\-0x00a9: r36 'seqScalingListPresentFlag' boolean\l  0x00ac\-0x00af: r27 'i' int\l  0x00ac\-0x00af: r28 'limit' int\l  0x00ac\-0x00af: r36 'seqScalingListPresentFlag' boolean\l  0x0083\-0x00af: r37 'seqScalingMatrixPresentFlag' boolean\l  0x010f\-0x011e: r18 'cropUnitX' int\l  0x0114\-0x011e: r19 'cropUnitY' int\l  0x010b\-0x011e: r21 'frameCropBottomOffset' int\l  0x00ff\-0x011e: r22 'frameCropLeftOffset' int\l  0x0103\-0x011e: r23 'frameCropRightOffset' int\l  0x0107\-0x011e: r24 'frameCropTopOffset' int\l  0x0134\-0x0156: r15 'aspectRatioIdc' int\l  0x012a\-0x0156: r16 'aspectRatioInfoPresentFlag' boolean\l  0x0148\-0x0156: r34 'sarHeight' int\l  0x0140\-0x0156: r35 'sarWidth' int\l  0x00f3\-0x015c: r6 'frameWidth' int\l  0x00f5\-0x015c: r7 'frameHeight' int\l  0x0120\-0x015c: r8 'pixelWidthHeightRatio' float\l  0x00dc\-0x015c: r10 'frameMbsOnlyFlag' boolean\l  0x00f9\-0x015c: r25 'frameCroppingFlag' boolean\l  0x00e3\-0x015c: r26 'frameHeightInMbs' int\l  0x00d8\-0x015c: r29 'picHeightInMapUnits' int\l  0x00d2\-0x015c: r32 'picWidthInMbs' int\l  0x0124\-0x015c: r40 'vuiParametersPresentFlag' boolean\l  0x0172\-0x0181: r27 'i' int\l  0x0170\-0x0181: r30 'numRefFramesInPicOrderCntCycle' long\l  0x0184\-0x0186: r18 'cropUnitX' int\l  0x0196\-0x019f: r18 'cropUnitX' int\l  0x019d\-0x019f: r19 'cropUnitY' int\l  0x0194\-0x019f: r38 'subHeightC' int\l  0x018d\-0x019f: r39 'subWidthC' int\l  0x01a5\-0x01a7: r18 'cropUnitX' int\l  0x0184\-0x01a7: r21 'frameCropBottomOffset' int\l  0x0184\-0x01a7: r22 'frameCropLeftOffset' int\l  0x0184\-0x01a7: r23 'frameCropRightOffset' int\l  0x0184\-0x01a7: r24 'frameCropTopOffset' int\l  0x01a5\-0x01a7: r38 'subHeightC' int\l  0x01a2\-0x01a7: r39 'subWidthC' int\l  0x0027\-0x01cd: r5 'seqParameterSetId' int\l  0x0184\-0x01cd: r6 'frameWidth' int\l  0x0184\-0x01cd: r7 'frameHeight' int\l  0x01a7\-0x01cd: r8 'pixelWidthHeightRatio' float\l  0x002a\-0x01cd: r9 'separateColorPlaneFlag' boolean\l  0x0181\-0x01cd: r10 'frameMbsOnlyFlag' boolean\l  0x00b5\-0x01cd: r11 'frameNumLength' int\l  0x00b9\-0x01cd: r12 'picOrderCntType' int\l  0x00ba\-0x01cd: r13 'picOrderCntLsbLength' int\l  0x00bb\-0x01cd: r14 'deltaPicOrderAlwaysZeroFlag' boolean\l  0x01a7\-0x01cd: r15 'aspectRatioIdc' int\l  0x01a7\-0x01cd: r16 'aspectRatioInfoPresentFlag' boolean\l  0x0029\-0x01cd: r17 'chromaFormatIdc' int\l  0x000d\-0x01cd: r20 'data' com.google.android.exoplayer2.util.ParsableNalUnitBitArray\l  0x0184\-0x01cd: r25 'frameCroppingFlag' boolean\l  0x0184\-0x01cd: r26 'frameHeightInMbs' int\l  0x0181\-0x01cd: r29 'picHeightInMapUnits' int\l  0x0181\-0x01cd: r32 'picWidthInMbs' int\l  0x001c\-0x01cd: r33 'profileIdc' int\l  0x01a7\-0x01cd: r40 'vuiParametersPresentFlag' boolean\l  ?\-0x01cd: r44 'nalData' byte[]\l  ?\-0x01cd: r45 'nalOffset' int\l  ?\-0x01cd: r46 'nalLimit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_40;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_40;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_40;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_29;
Node_38 -> Node_28;
Node_39 -> Node_36;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_70;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_76;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_58;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_78;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_77;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_68;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_68;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_91;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_68;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_70 -> Node_71;
Node_71 -> Node_43;
Node_71 -> Node_72[style=dashed];
Node_72 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_43;
Node_74 -> Node_75[style=dashed];
Node_75 -> Node_73;
Node_76 -> Node_46;
Node_77 -> Node_56;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_88;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_89;
Node_83 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_90;
Node_86 -> Node_87;
Node_87 -> Node_57;
Node_88 -> Node_81;
Node_89 -> Node_84;
Node_90 -> Node_87;
Node_91 -> Node_92;
Node_92 -> Node_93[style=dashed];
Node_92 -> Node_94;
Node_93 -> Node_68;
Node_94 -> Node_68;
}

