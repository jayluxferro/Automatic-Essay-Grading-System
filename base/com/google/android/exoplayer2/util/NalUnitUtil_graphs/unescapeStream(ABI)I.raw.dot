digraph "CFG forcom.google.android.exoplayer2.util.NalUnitUtil.unescapeStream([BI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r12 I:java.lang.Object) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositionsLock java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r12 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scratchEscapeCount' int)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r4 I:?[int, byte, short, char] A[D('position' int)]) \>= (r15 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:15:0x002a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|SYNTHETIC\lSplitter:B:4:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0008\l|0x0008: INVOKE  (r4 I:int A[D('position' int)]) = \l  (r14 I:byte[] A[D('data' byte[])])\l  (r4 I:int A[D('position' int)])\l  (r15 I:int A[D('limit' int)])\l com.google.android.exoplayer2.util.NalUnitUtil.findNextUnescapeIndex(byte[], int, int):int type: STATIC A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char] A[D('position' int)]) \>= (r15 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:3:0x0006 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: SGET  (r11 I:int[]) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}]\l0x0010: ARRAY_LENGTH  (r11 I:int) = (r11 I:?[]) A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r11 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char] A[D('scratchEscapeCount' int)])  \-\> B:10:0x0020 A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: SGET  (r11 I:int[]) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}]\l0x0015: SGET  (r13 I:int[]) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}]\l0x0017: ARRAY_LENGTH  (r13 I:int) = (r13 I:?[]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0018: ARITH  (r13 I:int) = (r13 I:int) * (2 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x001a: INVOKE  (r11 I:int[]) = (r11 I:int[]), (r13 I:int) java.util.Arrays.copyOf(int[], int):int[] type: STATIC A[Catch:\{ all \-\> 0x0052 \}]\l0x001e: SPUT  (r11 I:int[]) com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: SGET  (r11 I:int[]) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: ARITH  (r6 I:int) = (r7 I:int A[D('scratchEscapeCount' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|SYNTHETIC\lSplitter:B:12:0x0024\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0024\l|0x0024: APUT  \l  (r11 I:?[int, float][])\l  (r7 I:?[int, short, byte, char] A[D('scratchEscapeCount' int)])\l  (r4 I:?[int, float] A[D('position' int)])\l A[Catch:\{ all \-\> 0x0056 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: ARITH  (r4 I:int A[D('position' int)]) = (r4 I:int A[D('position' int)]) + (3 int) \l0x0028: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scratchEscapeCount' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: ARITH  (r8 I:int) = (r15 I:int A[D('limit' int)]) \- (r7 I:int A[D('scratchEscapeCount' int)]) \l0x002c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r7 I:?[int, byte, short, char] A[D('scratchEscapeCount' int)])  \-\> B:19:0x004b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|SYNTHETIC\lSplitter:B:17:0x0031\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0031\l|0x0031: SGET  (r11 I:int[]) =  com.google.android.exoplayer2.util.NalUnitUtil.scratchEscapePositions int[] A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER]\l0x0033: AGET  (r3 I:?[int, float]) = \l  (r11 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x0035: ARITH  (r0 I:int) = (r3 I:int A[D('nextEscapePosition' int)]) \- (r1 I:int A[D('escapedPosition' int)]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0037: INVOKE  \l  (r14 I:java.lang.Object A[D('data' byte[])])\l  (r1 I:int A[D('escapedPosition' int)])\l  (r14 I:java.lang.Object A[D('data' byte[])])\l  (r9 I:int A[D('unescapedPosition' int)])\l  (r0 I:int A[D('copyLength' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x0052 \}]\l0x003a: ARITH  (r9 I:int A[D('unescapedPosition' int)]) = (r9 I:int A[D('unescapedPosition' int)]) + (r0 I:int A[D('copyLength' int)]) A[Catch:\{ all \-\> 0x0052 \}]\l0x003b: ARITH  (r10 I:int) = (r9 I:int A[D('unescapedPosition' int)]) + (1 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x003d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x003e: APUT  \l  (r14 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r9 I:?[int, short, byte, char])\l  (r11 I:byte A[IMMUTABLE_TYPE])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x0040: ARITH  (r9 I:int) = (r10 I:int A[D('unescapedPosition' int)]) + (1 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x0042: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x0043: APUT  \l  (r14 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r11 I:byte A[IMMUTABLE_TYPE])\l A[Catch:\{ all \-\> 0x0052 \}]\l0x0045: ARITH  (r11 I:int) = (r0 I:int A[D('copyLength' int)]) + (3 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x0047: ARITH  (r1 I:int A[D('escapedPosition' int)]) = (r1 I:int A[D('escapedPosition' int)]) + (r11 I:int) A[Catch:\{ all \-\> 0x0052 \}]\l0x0048: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) A[Catch:\{ all \-\> 0x0052 \}]\l0x004a: GOTO  \-\> 0x002f A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: ARITH  (r5 I:int) = (r8 I:int A[D('unescapedLength' int)]) \- (r9 I:int A[D('unescapedPosition' int)]) A[Catch:\{ all \-\> 0x0052 \}]\l0x004d: INVOKE  \l  (r14 I:java.lang.Object A[D('data' byte[])])\l  (r1 I:int A[D('escapedPosition' int)])\l  (r14 I:java.lang.Object A[D('data' byte[])])\l  (r9 I:int A[D('unescapedPosition' int)])\l  (r5 I:int A[D('remainingLength' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x0052 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: RETURN  (r8 I:int A[D('unescapedLength' int)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0052|ExcHandler: all null\lSplitter:B:4:0x0008\l|0x0052: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  \l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|0x0053: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scratchEscapeCount' int)])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|SYNTHETIC\lSplitter:B:24:0x0054\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0054\l|0x0054: MONITOR_EXIT  (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0056 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|0x0055: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|ExcHandler: all null\lSplitter:B:12:0x0024\l|0x0056: MOVE_EXCEPTION  (r11 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.NalUnitUtil.unescapeStream((r14 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x0006: r6 'scratchEscapeCount' int\l  0x0006\-0x0024: r7 'scratchEscapeCount' int\l  0x0024\-0x0029: r6 'scratchEscapeCount' int\l  0x002e\-0x003d: r9 'unescapedPosition' int\l  0x003d\-0x0042: r10 'unescapedPosition' int\l  0x0037\-0x004b: r0 'copyLength' int\l  0x0035\-0x004b: r3 'nextEscapePosition' int\l  0x002d\-0x0052: r1 'escapedPosition' int\l  0x002f\-0x0052: r2 'i' int\l  0x004d\-0x0052: r5 'remainingLength' int\l  0x002c\-0x0052: r8 'unescapedLength' int\l  0x0042\-0x0052: r9 'unescapedPosition' int\l  0x0029\-0x0054: r7 'scratchEscapeCount' int\l  0x0004\-0x0057: r4 'position' int\l  0x0054\-0x0057: r6 'scratchEscapeCount' int\l  ?\-0x0057: r14 'data' byte[]\l  ?\-0x0057: r15 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_4 -> Node_22;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_27;
Node_13 -> Node_14;
Node_13 -> Node_27;
Node_14 -> Node_3;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_17 -> Node_22;
Node_18 -> Node_16;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_24;
}

