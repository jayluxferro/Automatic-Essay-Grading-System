digraph "CFG forcom.google.android.exoplayer2.util.ParsableNalUnitBitArray.assertValidOffset()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.byteOffset \< 0) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.bitOffset \< 0) goto L_0x0023\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r2.bitOffset \>= 8) goto L_0x0023\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r2.byteOffset \< r2.byteLimit) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014}"];
Node_9 [shape=record,label="{9\:\ 0x0018|if (r2.byteOffset != r2.byteLimit) goto L_0x0023\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a}"];
Node_11 [shape=record,label="{11\:\ 0x001c|if (r2.bitOffset != 0) goto L_0x0023\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|r0 = true\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v6 boolean) binds: [B:15:0x0023, B:12:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkState(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|r0 = false\l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.util.ParsableNalUnitBitArray.assertValidOffset((r2v0 'this' com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_13;
}

