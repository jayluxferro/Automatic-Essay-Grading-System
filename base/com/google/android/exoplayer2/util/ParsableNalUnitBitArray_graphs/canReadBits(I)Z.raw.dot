digraph "CFG forcom.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.byteOffset int \l0x0002: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.byteOffset int \l0x0004: ARITH  (r5 I:int) = (r7 I:int A[D('n' int)]) \/ (8 int) \l0x0006: ARITH  (r2 I:int) = (r4 I:int) + (r5 I:int) \l0x0008: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.bitOffset int \l0x000a: ARITH  (r5 I:int) = (r7 I:int A[D('n' int)]) % (8 int) \l0x000c: ARITH  (r1 I:int) = (r4 I:int) + (r5 I:int) \l0x000e: CONST  (r4 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char] A[D('newBitOffset' int)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: ARITH  (r2 I:int A[D('newByteOffset' int)]) = (r2 I:int A[D('newByteOffset' int)]) + (1 int) \l0x0013: ARITH  (r1 I:int A[D('newBitOffset' int)]) = (r1 I:int A[D('newBitOffset' int)]) + (\-8 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: ARITH  (r0 I:int) = (r3 I:int A[D('oldByteOffset' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \> (r2 I:?[int, byte, short, char] A[D('newByteOffset' int)])  \-\> B:11:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.byteLimit int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r2 I:?[int, byte, short, char] A[D('newByteOffset' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: INVOKE  (r4 I:boolean) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l  (r0 I:int A[D('i' int)])\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.shouldSkipByte(int):boolean type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: ARITH  (r2 I:int A[D('newByteOffset' int)]) = (r2 I:int A[D('newByteOffset' int)]) + (1 int) \l0x0025: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (2 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.byteLimit int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IF  (r2 I:?[int, byte, short, char] A[D('newByteOffset' int)]) \< (r4 I:?[int, byte, short, char])  \-\> B:16:0x0034 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IGET  (r4 I:int) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray)\l com.google.android.exoplayer2.util.ParsableNalUnitBitArray.byteLimit int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newByteOffset' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newBitOffset' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|0x0034: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: RETURN  (r4 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.util.ParsableNalUnitBitArray.canReadBits((r6 'this' I:com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0017\-0x0037: r0 'i' int\l  0x000e\-0x0037: r1 'newBitOffset' int\l  0x0008\-0x0037: r2 'newByteOffset' int\l  0x0002\-0x0037: r3 'oldByteOffset' int\l  ?\-0x0037: r7 'n' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_4;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_17;
}

