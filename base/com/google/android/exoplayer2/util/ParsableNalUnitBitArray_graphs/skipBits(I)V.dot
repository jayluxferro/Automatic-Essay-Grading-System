digraph "CFG forcom.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = r4.byteOffset\lr4.byteOffset = r4.byteOffset + (r5 \/ 8)\lr4.bitOffset = r4.bitOffset + (r5 % 8)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|if (r4.bitOffset \<= 7) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|r4.byteOffset = r4.byteOffset + 1\lr4.bitOffset = r4.bitOffset + \-8\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|int r0 = r1 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v3 'i' int) binds: [B:3:0x0021, B:9:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0023\-\>B:9:0x0035\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|if (r0 \> r4.byteOffset) goto L_0x0038\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027}"];
Node_7 [shape=record,label="{7\:\ 0x002b|if (shouldSkipByte(r0) == false) goto L_0x0035\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|r4.byteOffset = r4.byteOffset + 1\lint r0 = r0 + 2\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|LOOP_END\lPHI: r0 \l  PHI: (r0v2 'i' int) = (r0v1 'i' int), (r0v4 'i' int) binds: [B:14:0x0035, B:13:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0023\-\>B:9:0x0035\l|int r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|assertValidOffset()\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.util.ParsableNalUnitBitArray.skipBits((r4v0 'this' com.google.android.exoplayer2.util.ParsableNalUnitBitArray A[IMMUTABLE_TYPE, THIS]), (r5v0 'n' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_13;
Node_9 -> Node_4;
Node_10 -> Node_11;
Node_12 -> Node_10;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

