digraph "CFG forcom.google.android.exoplayer2.util.SlidingPercentile.getPercentile(F)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|ensureSortedByValue()\lfloat r2 = r7 * ((float) r6.totalWeight)\lr0 = 0\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r0 r3 \l  PHI: (r0v1 'accumulatedWeight' int) = (r0v0 'accumulatedWeight' int), (r0v2 'accumulatedWeight' int) binds: [B:0:0x0000, B:6:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v2 'i' int) binds: [B:0:0x0000, B:6:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:6:0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|if (r3 \>= r6.samples.size()) goto L_0x0028\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|com.google.android.exoplayer2.util.SlidingPercentile$Sample r1 = r6.samples.get(r3)\lint r0 = r0 + r1.weight\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|if ((((float) r0) \> r2 ? 1 : (((float) r0) == r2 ? 0 : \-1)) \< 0) goto L_0x0025\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022}"];
Node_6 [shape=record,label="{6\:\ 0x0025|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:6:0x0025\l|int r3 = r3 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028}"];
Node_8 [shape=record,label="{8\:\ 0x002e|if (r6.samples.isEmpty() == false) goto L_0x0033\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|SYNTHETIC\lRETURN\l|return Float.NaN\l}"];
Node_10 [shape=record,label="{10\:\ 0x0033}"];
Node_11 [shape=record,label="{11\:\ 0x0022|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r1.value\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r6.samples.get(r6.samples.size() + \-1).value\l}"];
MethodNode[shape=record,label="{public float com.google.android.exoplayer2.util.SlidingPercentile.getPercentile((r6v0 'this' com.google.android.exoplayer2.util.SlidingPercentile A[IMMUTABLE_TYPE, THIS]), (r7v0 'percentile' float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_11[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_14;
Node_11 -> Node_5;
Node_12 -> Node_7;
}

