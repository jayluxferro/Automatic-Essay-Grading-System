digraph "CFG forcom.google.android.exoplayer2.util.SlidingPercentile.getPercentile(F)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.ensureSortedByValue():void type: DIRECT \l0x0003: IGET  (r4 I:int) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.totalWeight int \l0x0005: CAST  (r4 I:float) = (float) (r4 I:int) \l0x0006: ARITH  (r2 I:float) = (r7 I:float A[D('percentile' float)]) * (r4 I:float) \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IGET  (r4 I:java.util.ArrayList\<com.google.android.exoplayer2.util.SlidingPercentile$Sample\>) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.samples java.util.ArrayList \l0x000c: INVOKE  (r4 I:int) = (r4 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r3 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IGET  (r4 I:java.util.ArrayList\<com.google.android.exoplayer2.util.SlidingPercentile$Sample\>) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.samples java.util.ArrayList \l0x0014: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int A[D('i' int)]) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0018: CHECK_CAST  (r1 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample) = (com.google.android.exoplayer2.util.SlidingPercentile$Sample) (r1 I:?[OBJECT, ARRAY]) \l0x001a: IGET  (r4 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('currentSample' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.weight int \l0x001c: ARITH  (r0 I:int A[D('accumulatedWeight' int)]) = (r0 I:int A[D('accumulatedWeight' int)]) + (r4 I:int) \l0x001d: CAST  (r4 I:float) = (float) (r0 I:int A[D('accumulatedWeight' int)]) \l0x001e: CMP_L  (r4 I:int) = (r4 I:float), (r2 I:float A[D('desiredWeight' float)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IGET  (r4 I:float) = \l  (r1 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('currentSample' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: RETURN  (r4 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: ARITH  (r3 I:int A[D('i' int)]) = (r3 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IGET  (r4 I:java.util.ArrayList\<com.google.android.exoplayer2.util.SlidingPercentile$Sample\>) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.samples java.util.ArrayList \l0x002a: INVOKE  (r4 I:boolean) = (r4 I:java.util.ArrayList) java.util.ArrayList.isEmpty():boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0033 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2143289344(0x7fc00000, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IGET  (r4 I:java.util.ArrayList\<com.google.android.exoplayer2.util.SlidingPercentile$Sample\>) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.samples java.util.ArrayList \l0x0035: IGET  (r5 I:java.util.ArrayList\<com.google.android.exoplayer2.util.SlidingPercentile$Sample\>) = (r6 I:com.google.android.exoplayer2.util.SlidingPercentile) com.google.android.exoplayer2.util.SlidingPercentile.samples java.util.ArrayList \l0x0037: INVOKE  (r5 I:int) = (r5 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x003b: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x003d: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r5 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0041: CHECK_CAST  (r4 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample) = (com.google.android.exoplayer2.util.SlidingPercentile$Sample) (r4 I:?[OBJECT, ARRAY]) \l0x0043: IGET  (r4 I:float) = \l  (r4 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample)\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l}"];
MethodNode[shape=record,label="{public float com.google.android.exoplayer2.util.SlidingPercentile.getPercentile((r6 'this' I:com.google.android.exoplayer2.util.SlidingPercentile A[IMMUTABLE_TYPE, THIS]), (r7 I:float A[D('percentile' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x0024: r1 'currentSample' com.google.android.exoplayer2.util.SlidingPercentile$Sample\l  0x0025\-0x0028: r1 'currentSample' com.google.android.exoplayer2.util.SlidingPercentile$Sample\l  0x0009\-0x0045: r0 'accumulatedWeight' int\l  0x0008\-0x0045: r2 'desiredWeight' float\l  0x000a\-0x0045: r3 'i' int\l  ?\-0x0045: r7 'percentile' float\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_6;
Node_11 -> Node_6;
}

