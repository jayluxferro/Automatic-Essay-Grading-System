digraph "CFG forcom.google.android.exoplayer2.util.TimestampAdjuster.adjustTsTimestamp(J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r14 \> com.google.android.exoplayer2.C1260C.TIME_UNSET ? 1 : (r14 == com.google.android.exoplayer2.C1260C.TIME_UNSET ? 0 : \-1)) != 0) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|SYNTHETIC\lRETURN\lORIG_RETURN\l|return com.google.android.exoplayer2.C1260C.TIME_UNSET\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if ((r13.lastSampleTimestamp \> com.google.android.exoplayer2.C1260C.TIME_UNSET ? 1 : (r13.lastSampleTimestamp == com.google.android.exoplayer2.C1260C.TIME_UNSET ? 0 : \-1)) == 0) goto L_0x0052\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|long r2 = usToPts(r13.lastSampleTimestamp)\llong r0 = (4294967296L + r2) \/ MAX_PTS_PLUS_ONE\llong r6 = r14 + (MAX_PTS_PLUS_ONE * (r0 \- 1))\llong r4 = r14 + (MAX_PTS_PLUS_ONE * r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x004f|if ((java.lang.Math.abs(r6 \- r2) \> java.lang.Math.abs(r4 \- r2) ? 1 : (java.lang.Math.abs(r6 \- r2) == java.lang.Math.abs(r4 \- r2) ? 0 : \-1)) \>= 0) goto L_0x005b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0051|r14 = r6\l}"];
Node_8 [shape=record,label="{8\:\ 0x0052|PHI: r14 \l  PHI: (r14v1 'pts' long) = (r14v0 'pts' long), (r14v2 'pts' long), (r14v3 'pts' long) binds: [B:4:0x0018, B:9:0x005b, B:7:0x0051] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x005b|r14 = r4\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return adjustSampleTimestamp(ptsToUs(r14))\l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.util.TimestampAdjuster.adjustTsTimestamp((r13v0 'this' com.google.android.exoplayer2.util.TimestampAdjuster A[IMMUTABLE_TYPE, THIS]), (r14v0 'pts' long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_9 -> Node_8;
}

