digraph "CFG forcom.google.android.exoplayer2.util.ParsableByteArray.readUtf8EncodedLong()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r11 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: IGET  (r6 I:byte[]) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0005: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.position int \l0x0007: AGET  (r6 I:byte A[IMMUTABLE_TYPE]) = \l  (r6 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x0009: CAST  (r4 I:long) = (long) (r6 I:int) \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char] A[D('j' int)]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: ARITH  (r6 I:int) = (r10 I:int) \<\< (r1 I:int A[D('j' int)]) \l0x000f: CAST  (r6 I:long) = (long) (r6 I:int) \l0x0010: ARITH  (r6 I:long) = (r6 I:long) & (r4 I:long A[D('value' long)]) \l0x0011: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x0013: CMP_L  (r6 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r1 I:?[int, byte, short, char] A[D('j' int)]) \>= (r11 I:?[int, byte, short, char])  \-\> B:9:0x003c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: ARITH  (r6 I:int) = (r10 I:int) \<\< (r1 I:int A[D('j' int)]) \l0x001b: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l0x001d: CAST  (r6 I:long) = (long) (r6 I:int) \l0x001e: ARITH  (r4 I:long A[D('value' long)]) = (r4 I:long A[D('value' long)]) & (r6 I:long) \l0x001f: ARITH  (r2 I:int A[D('length' int)]) = (7 int) \- (r1 I:int A[D('j' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: NEW_INSTANCE  (r6 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x0025: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002a: CONST_STR  (r8 I:java.lang.String) =  \"Invalid UTF\-8 sequence first byte: \" \l0x002c: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r4 I:long A[D('value' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  \l  (r6 I:java.lang.NumberFormatException)\l  (r7 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: CONST  (r6 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('j' int)]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: CONST  (r2 I:?[boolean, int, float, short, byte, char] A[D('length' int)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: ARITH  (r1 I:int A[D('j' int)]) = (r1 I:int A[D('j' int)]) + (\-1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:20:0x0077 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: IGET  (r6 I:byte[]) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0049: IGET  (r7 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.position int \l0x004b: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int A[D('i' int)]) \l0x004c: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r6 I:byte[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l \l0x004e: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char] A[D('x' int)]) & (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char]) \l0x0050: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x006d \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: NEW_INSTANCE  (r6 I:java.lang.NumberFormatException) =  java.lang.NumberFormatException \l0x0056: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005b: CONST_STR  (r8 I:java.lang.String) =  \"Invalid UTF\-8 sequence continuation byte: \" \l0x005d: INVOKE  (r7 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0061: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r7 I:java.lang.StringBuilder)\l  (r4 I:long A[D('value' long)])\l java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0065: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0069: INVOKE  \l  (r6 I:java.lang.NumberFormatException)\l  (r7 I:java.lang.String)\l java.lang.NumberFormatException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|0x006c: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006d|0x006d: ARITH  (r6 I:long) = (r4 I:long A[D('value' long)]) \<\< (r11 I:long) \l0x006f: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char] A[D('x' int)]) & (63 ?[int, float, short, byte, char]) \l0x0071: CAST  (r8 I:long) = (long) (r8 I:int) \l0x0072: ARITH  (r4 I:long A[D('value' long)]) = (r6 I:long) \| (r8 I:long) \l0x0074: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0077|0x0077: IGET  (r6 I:int) = \l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.position int \l0x0079: ARITH  (r6 I:int) = (r6 I:int) + (r2 I:int A[D('length' int)]) \l0x007a: IPUT  \l  (r6 I:int)\l  (r12 I:com.google.android.exoplayer2.util.ParsableByteArray)\l com.google.android.exoplayer2.util.ParsableByteArray.position int \l}"];
Node_21 [shape=record,label="{21\:\ 0x007c|0x007c: RETURN  (r4 I:long A[D('value' long)]) \l}"];
MethodNode[shape=record,label="{public long com.google.android.exoplayer2.util.ParsableByteArray.readUtf8EncodedLong((r12 'this' I:com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x004e\-0x0077: r3 'x' int\l  0x0045\-0x007c: r0 'i' int\l  0x000b\-0x007c: r1 'j' int\l  0x0003\-0x007c: r2 'length' int\l  0x000a\-0x007c: r4 'value' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_6;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_14;
Node_20 -> Node_21;
}

