digraph "CFG forcom.google.android.exoplayer2.util.ParsableByteArray.readNullTerminatedString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (bytesLeft() != 0) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|int r1 = r5.position\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'stringLimit' int) = (r1v0 'stringLimit' int), (r1v2 'stringLimit' int) binds: [B:3:0x0008, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000a\-\>B:8:0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r1 \>= r5.limit) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r5.data[r1] == 0) goto L_0x0017\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:0: B:4:0x000a\-\>B:8:0x0014\l|int r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|java.lang.String r0 = new java.lang.String(r5.data, r5.position, r1 \- r5.position)\lr5.position = r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|if (r5.position \>= r5.limit) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|r5.position = r5.position + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public java.lang.String com.google.android.exoplayer2.util.ParsableByteArray.readNullTerminatedString((r5v0 'this' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_15;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

