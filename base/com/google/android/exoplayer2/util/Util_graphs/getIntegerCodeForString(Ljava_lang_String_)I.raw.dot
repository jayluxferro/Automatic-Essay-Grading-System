digraph "CFG forcom.google.android.exoplayer2.util.Util.getIntegerCodeForString(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = (r4 I:java.lang.String A[D('string' java.lang.String)]) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char] A[D('length' int)]) \> (r3 I:?[int, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r3 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:7:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: ARITH  (r2 I:int A[D('result' int)]) = (r2 I:int A[D('result' int)]) \<\< (8 int) \l0x0011: INVOKE  (r3 I:char) = \l  (r4 I:java.lang.String A[D('string' java.lang.String)])\l  (r0 I:int A[D('i' int)])\l java.lang.String.charAt(int):char type: VIRTUAL \l0x0015: ARITH  (r2 I:?[int, boolean, short, byte, char] A[D('result' int)]) = (r2 I:?[int, boolean, short, byte, char] A[D('result' int)]) \| (r3 I:?[int, boolean, short, byte, char]) \l0x0016: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN  (r2 I:int A[D('result' int)]) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.Util.getIntegerCodeForString((r4 I:java.lang.String A[D('string' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000d\-0x0019: r0 'i' int\l  0x000c\-0x0019: r2 'result' int\l  0x001b\-0x001b: r0 'i' int\l  0x0004\-0x001b: r1 'length' int\l  0x001b\-0x001b: r2 'result' int\l  ?\-0x001b: r4 'string' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_4;
Node_6 -> Node_3;
}

