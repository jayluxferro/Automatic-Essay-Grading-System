digraph "CFG forcom.google.android.exoplayer2.util.Util.scaleLargeTimestamps(Ljava\/util\/List;JJ)[J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x0002: INVOKE  (r6 I:int) = \l  (r11 I:java.util.List A[D('timestamps' java.util.List\<java.lang.Long\>)])\l java.util.List.size():int type: INTERFACE \l0x0006: NEW_ARRAY  (r3 I:long[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0008: CMP_L  (r6 I:int) = \l  (r14 I:long A[D('divisor' long)])\l  (r12 I:long A[D('multiplier' long)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: ARITH  (r6 I:long) = (r14 I:long A[D('divisor' long)]) % (r12 I:long A[D('multiplier' long)]) \l0x000e: CMP_L  (r6 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: ARITH  (r0 I:long) = (r14 I:long A[D('divisor' long)]) \/ (r12 I:long A[D('multiplier' long)]) \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: ARRAY_LENGTH  (r6 I:int) = (r3 I:?[] A[D('scaledTimestamps' long[])]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r6 I:?[int, byte, short, char])  \-\> B:20:0x0062 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r6 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('timestamps' java.util.List\<java.lang.Long\>)])\l  (r2 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001c: CHECK_CAST  (r6 I:java.lang.Long) = (java.lang.Long) (r6 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r6 I:long) = (r6 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0022: ARITH  (r6 I:long) = (r6 I:long) \/ (r0 I:long A[D('divisionFactor' long)]) \l0x0023: APUT  \l  (r3 I:?[long, double][] A[D('scaledTimestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x0025: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: CMP_L  (r6 I:int) = \l  (r14 I:long A[D('divisor' long)])\l  (r12 I:long A[D('multiplier' long)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0048 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: ARITH  (r6 I:long) = (r12 I:long A[D('multiplier' long)]) % (r14 I:long A[D('divisor' long)]) \l0x002e: CMP_L  (r6 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: ARITH  (r4 I:long) = (r12 I:long A[D('multiplier' long)]) \/ (r14 I:long A[D('divisor' long)]) \l0x0034: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: ARRAY_LENGTH  (r6 I:int) = (r3 I:?[] A[D('scaledTimestamps' long[])]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r6 I:?[int, byte, short, char])  \-\> B:20:0x0062 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: INVOKE  (r6 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('timestamps' java.util.List\<java.lang.Long\>)])\l  (r2 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003c: CHECK_CAST  (r6 I:java.lang.Long) = (java.lang.Long) (r6 I:?[OBJECT, ARRAY]) \l0x003e: INVOKE  (r6 I:long) = (r6 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0042: ARITH  (r6 I:long) = (r6 I:long) * (r4 I:long A[D('multiplicationFactor' long)]) \l0x0043: APUT  \l  (r3 I:?[long, double][] A[D('scaledTimestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x0045: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: CAST  (r6 I:double) = (double) (r12 I:long A[D('multiplier' long)]) \l0x0049: CAST  (r8 I:double) = (double) (r14 I:long A[D('divisor' long)]) \l0x004a: ARITH  (r4 I:double) = (r6 I:double) \/ (r8 I:double) \l0x004c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: ARRAY_LENGTH  (r6 I:int) = (r3 I:?[] A[D('scaledTimestamps' long[])]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r6 I:?[int, byte, short, char])  \-\> B:20:0x0062 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: INVOKE  (r6 I:java.lang.Object) = \l  (r11 I:java.util.List A[D('timestamps' java.util.List\<java.lang.Long\>)])\l  (r2 I:int A[D('i' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0054: CHECK_CAST  (r6 I:java.lang.Long) = (java.lang.Long) (r6 I:?[OBJECT, ARRAY]) \l0x0056: INVOKE  (r6 I:long) = (r6 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x005a: CAST  (r6 I:double) = (double) (r6 I:long) \l0x005b: ARITH  (r6 I:double) = (r6 I:double) * (r4 I:double A[D('multiplicationFactor' double)]) \l0x005c: CAST  (r6 I:long) = (long) (r6 I:double) \l0x005d: APUT  \l  (r3 I:?[long, double][] A[D('scaledTimestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x005f: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|0x0062: RETURN  (r3 I:long[] A[D('scaledTimestamps' long[])]) \l}"];
MethodNode[shape=record,label="{public static long[] com.google.android.exoplayer2.util.Util.scaleLargeTimestamps((r11 I:java.util.List\<java.lang.Long\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('multiplier' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('divisor' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0014\-0x0028: r0 'divisionFactor' long\l  0x0015\-0x0028: r2 'i' int\l  0x0035\-0x0048: r2 'i' int\l  0x0034\-0x0048: r4 'multiplicationFactor' long\l  0x004c\-0x0062: r4 'multiplicationFactor' double\l  0x004d\-0x0062: r2 'i' int\l  0x0008\-0x0062: r3 'scaledTimestamps' long[]\l  0x0000\-0x0062: r11 'timestamps' java.util.List\<java.lang.Long\>\l  ?\-0x0062: r12 'multiplier' long\l  ?\-0x0062: r14 'divisor' long\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List, \<, Ljava\/lang\/Long;, \>;JJ)[J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_20;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_17;
}

