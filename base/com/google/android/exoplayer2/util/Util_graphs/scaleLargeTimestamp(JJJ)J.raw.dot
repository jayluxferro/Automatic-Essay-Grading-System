digraph "CFG forcom.google.android.exoplayer2.util.Util.scaleLargeTimestamp(JJJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r4 I:int) = \l  (r12 I:long A[D('divisor' long)])\l  (r10 I:long A[D('multiplier' long)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARITH  (r4 I:long) = (r12 I:long A[D('divisor' long)]) % (r10 I:long A[D('multiplier' long)]) \l0x0008: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r0 I:long) = (r12 I:long A[D('divisor' long)]) \/ (r10 I:long A[D('multiplier' long)]) \l0x000e: ARITH  (r4 I:long) = (r8 I:long A[D('timestamp' long)]) \/ (r0 I:long A[D('divisionFactor' long)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r4 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CMP_L  (r4 I:int) = \l  (r12 I:long A[D('divisor' long)])\l  (r10 I:long A[D('multiplier' long)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: ARITH  (r4 I:long) = (r10 I:long A[D('multiplier' long)]) % (r12 I:long A[D('divisor' long)]) \l0x0017: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: ARITH  (r2 I:long) = (r10 I:long A[D('multiplier' long)]) \/ (r12 I:long A[D('divisor' long)]) \l0x001d: ARITH  (r4 I:long) = (r8 I:long A[D('timestamp' long)]) * (r2 I:long A[D('multiplicationFactor' long)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: CAST  (r4 I:double) = (double) (r10 I:long A[D('multiplier' long)]) \l0x0021: CAST  (r6 I:double) = (double) (r12 I:long A[D('divisor' long)]) \l0x0022: ARITH  (r2 I:double) = (r4 I:double) \/ (r6 I:double) \l0x0024: CAST  (r4 I:double) = (double) (r8 I:long A[D('timestamp' long)]) \l0x0025: ARITH  (r4 I:double) = (r4 I:double) * (r2 I:double A[D('multiplicationFactor' double)]) \l0x0026: CAST  (r4 I:long) = (long) (r4 I:double) \l}"];
MethodNode[shape=record,label="{public static long com.google.android.exoplayer2.util.Util.scaleLargeTimestamp((r8 I:long A[D('timestamp' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('multiplier' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('divisor' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x0010: r0 'divisionFactor' long\l  0x001d\-0x0020: r2 'multiplicationFactor' long\l  0x0024\-0x0027: r2 'multiplicationFactor' double\l  ?\-0x0027: r8 'timestamp' long\l  ?\-0x0027: r10 'multiplier' long\l  ?\-0x0027: r12 'divisor' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_5;
Node_11 -> Node_5;
}

