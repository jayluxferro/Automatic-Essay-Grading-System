digraph "CFG forcom.google.android.exoplayer2.util.Util.unescapeFileName(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = (r10 I:java.lang.String A[D('fileName' java.lang.String)]) java.lang.String.length():int type: VIRTUAL \l0x0004: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char] A[D('i' int)]) \>= (r4 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:6:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r8 I:char) = \l  (r10 I:java.lang.String A[D('fileName' java.lang.String)])\l  (r3 I:int A[D('i' int)])\l java.lang.String.charAt(int):char type: VIRTUAL \l0x000c: CONST  (r9 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: ARITH  (r6 I:int A[D('percentCharacterCount' int)]) = (r6 I:int A[D('percentCharacterCount' int)]) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: ARITH  (r3 I:int A[D('i' int)]) = (r3 I:int A[D('i' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('percentCharacterCount' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN  (r10 I:java.lang.String A[D('fileName' java.lang.String)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: ARITH  (r8 I:int) = (r6 I:int A[D('percentCharacterCount' int)]) * (2 int) \l0x001a: ARITH  (r2 I:int) = (r4 I:int A[D('length' int)]) \- (r8 I:int) \l0x001c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001e: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:int A[D('expectedLength' int)])\l java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0021: SGET  (r8 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.util.Util.ESCAPED_CHARACTER_PATTERN java.util.regex.Pattern \l0x0023: INVOKE  (r5 I:java.util.regex.Matcher) = \l  (r8 I:java.util.regex.Pattern)\l  (r10 I:java.lang.CharSequence A[D('fileName' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0027: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r6 I:?[int, byte, short, char] A[D('percentCharacterCount' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x004e \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r8 I:boolean) = \l  (r5 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.find():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0031: INVOKE  (r8 I:java.lang.String) = \l  (r5 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r8 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0035: CONST  (r9 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0037: INVOKE  (r8 I:int) = (r8 I:java.lang.String), (r9 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x003b: CAST  (r7 I:char) = (char) (r8 I:int) \l0x003c: INVOKE  (r8 I:int) = \l  (r5 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.start():int type: VIRTUAL \l0x0040: INVOKE  (r8 I:java.lang.StringBuilder) = \l  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)])\l  (r10 I:java.lang.CharSequence A[D('fileName' java.lang.String)])\l  (r1 I:int A[D('endOfLastMatch' int)])\l  (r8 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  \l  (r8 I:java.lang.StringBuilder)\l  (r7 I:char A[D('unescapedCharacter' char)])\l java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r1 I:int A[D('endOfLastMatch' int)]) = \l  (r5 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.end():int type: VIRTUAL \l0x004b: ARITH  (r6 I:int A[D('percentCharacterCount' int)]) = (r6 I:int A[D('percentCharacterCount' int)]) + (\-1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004e|0x004e: IF  (r1 I:?[int, byte, short, char] A[D('endOfLastMatch' int)]) \>= (r4 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:15:0x0053 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)])\l  (r10 I:java.lang.CharSequence A[D('fileName' java.lang.String)])\l  (r1 I:int A[D('endOfLastMatch' int)])\l  (r4 I:int A[D('length' int)])\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0053|0x0053: INVOKE  (r8 I:int) = \l  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)])\l java.lang.StringBuilder.length():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('expectedLength' int)])  \-\> B:18:0x005b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fileName' java.lang.String)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: INVOKE  (r10 I:java.lang.String A[D('fileName' java.lang.String)]) = \l  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.exoplayer2.util.Util.unescapeFileName((r10 I:java.lang.String A[D('fileName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0017: r10 'fileName' java.lang.String\l  0x003c\-0x004e: r7 'unescapedCharacter' char\l  0x0021\-0x005f: r0 'builder' java.lang.StringBuilder\l  0x0028\-0x005f: r1 'endOfLastMatch' int\l  0x001c\-0x005f: r2 'expectedLength' int\l  0x0006\-0x005f: r3 'i' int\l  0x0004\-0x005f: r4 'length' int\l  0x0027\-0x005f: r5 'matcher' java.util.regex.Matcher\l  0x0005\-0x005f: r6 'percentCharacterCount' int\l  0x0018\-0x005f: r10 'fileName' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_7;
Node_18 -> Node_7;
}

