digraph "CFG forcom.google.android.exoplayer2.util.Util.isLocalFileUri(Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r2 I:android.net.Uri A[D('uri' android.net.Uri)]) android.net.Uri.getScheme():java.lang.String type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = \l  (r0 I:java.lang.CharSequence A[D('scheme' java.lang.String)])\l android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r1 I:java.lang.String) =  \"file\" \l0x000c: INVOKE  (r1 I:boolean) = \l  (r0 I:java.lang.String A[D('scheme' java.lang.String)])\l  (r1 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r1 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static boolean com.google.android.exoplayer2.util.Util.isLocalFileUri((r2 I:android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0015: r0 'scheme' java.lang.String\l  ?\-0x0015: r2 'uri' android.net.Uri\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

