digraph "CFG forcom.google.android.exoplayer2.util.Util.binarySearchCeil(Ljava\/util\/List;Ljava\/lang\/Object;ZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r3 I:java.util.List A[D('list' java.util.List\<? extends java.lang.Comparable\<? super T\>\>)])\l  (r4 I:java.lang.Object A[D('value' T)])\l java.util.Collections.binarySearch(java.util.List, java.lang.Object):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char] A[D('index' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARITH  (r0 I:?[int, boolean, short, byte, char] A[D('index' int)]) = (r0 I:?[int, boolean, short, byte, char] A[D('index' int)]) ^ (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stayInBounds' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r2 I:int) = \l  (r3 I:java.util.List A[D('list' java.util.List\<? extends java.lang.Comparable\<? super T\>\>)])\l java.util.List.size():int type: INTERFACE \l0x000e: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0010: INVOKE  (r0 I:int A[D('index' int)]) = (r2 I:int), (r0 I:int A[D('index' int)]) java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN  (r0 I:int A[D('index' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r1 I:int) = \l  (r3 I:java.util.List A[D('list' java.util.List\<? extends java.lang.Comparable\<? super T\>\>)])\l java.util.List.size():int type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: ARITH  (r0 I:int A[D('index' int)]) = (r0 I:int A[D('index' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char] A[D('index' int)]) \>= (r1 I:?[int, byte, short, char] A[D('listSize' int)])  \-\> B:11:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: INVOKE  (r2 I:java.lang.Object) = \l  (r3 I:java.util.List A[D('list' java.util.List\<? extends java.lang.Comparable\<? super T\>\>)])\l  (r0 I:int A[D('index' int)])\l java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r2 I:java.lang.Comparable) = (java.lang.Comparable) (r2 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r2 I:int) = \l  (r2 I:java.lang.Comparable)\l  (r4 I:java.lang.Object A[D('value' T)])\l java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inclusive' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: ARITH  (r0 I:int A[D('index' int)]) = (r0 I:int A[D('index' int)]) + (\-1 int) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.Util.binarySearchCeil((r3 I:java.util.List\<? extends java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('inclusive' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('stayInBounds' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0014: r0 'index' int\l  0x0015\-0x002d: r0 'index' int\l  0x0019\-0x002d: r1 'listSize' int\l  0x0000\-0x002d: r3 'list' java.util.List\<? extends java.lang.Comparable\<? super T\>\>\l  0x0000\-0x002d: r4 'value' T\l  ?\-0x002d: r5 'inclusive' boolean\l  ?\-0x002d: r6 'stayInBounds' boolean\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List, \<+, Ljava\/lang\/Comparable, \<\-TT;\>;\>;TT;ZZ)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_3;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_3;
}

