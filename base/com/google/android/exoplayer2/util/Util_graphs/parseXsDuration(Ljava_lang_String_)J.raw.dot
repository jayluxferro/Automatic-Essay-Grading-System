digraph "CFG forcom.google.android.exoplayer2.util.Util.parseXsDuration(Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r14 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.util.Util.XS_DURATION_PATTERN java.util.regex.Pattern \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY] A[D('value' java.lang.String)]) \l0x0004: INVOKE  (r8 I:java.util.regex.Matcher) = \l  (r14 I:java.util.regex.Pattern)\l  (r0 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0008: INVOKE  (r14 I:boolean) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00a3 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  (r14 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0013: INVOKE  (r14 I:boolean) = (r14 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x008f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r14 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001b: INVOKE  (r13 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('years' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0091 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r14 I:double) = (r13 I:java.lang.String A[D('years' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x0025: CONST  (r16 I:?[long, double]) = \l  (4719236203218468864(0x417e1852c0000000, double:3.1556908E7) ?[long, double])\l \l0x002a: ARITH  (r6 I:double) = (r14 I:double) * (r16 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: CONST  (r14 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x002d: INVOKE  (r10 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('months' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0094 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: INVOKE  (r14 I:double) = (r10 I:java.lang.String A[D('months' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x0037: CONST  (r16 I:?[long, double]) = \l  (4702901732848435200(0x4144103580000000, double:2629739.0) ?[long, double])\l \l0x003c: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: ARITH  (r6 I:double A[D('durationSeconds' double)]) = (r6 I:double A[D('durationSeconds' double)]) + (r14 I:double) \l0x003f: CONST  (r14 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0040: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('days' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0097 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: INVOKE  (r14 I:double) = (r2 I:java.lang.String A[D('days' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x004a: CONST  (r16 I:?[long, double]) = \l  (4680673776000565248(0x40f5180000000000, double:86400.0) ?[long, double])\l \l0x004f: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0051|0x0051: ARITH  (r6 I:double A[D('durationSeconds' double)]) = (r6 I:double A[D('durationSeconds' double)]) + (r14 I:double) \l0x0052: CONST  (r14 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0054: INVOKE  (r3 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hours' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x009a \l}"];
Node_16 [shape=record,label="{16\:\ 0x005a|0x005a: INVOKE  (r14 I:double) = (r3 I:java.lang.String A[D('hours' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x005e: CONST  (r16 I:?[long, double]) = \l  (4660134898793709568(0x40ac200000000000, double:3600.0) ?[long, double])\l \l0x0063: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0065|0x0065: ARITH  (r6 I:double A[D('durationSeconds' double)]) = (r6 I:double A[D('durationSeconds' double)]) + (r14 I:double) \l0x0066: CONST  (r14 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0068: INVOKE  (r9 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|0x006c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('minutes' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x009d \l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|0x006e: INVOKE  (r14 I:double) = (r9 I:java.lang.String A[D('minutes' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x0072: CONST  (r16 I:?[long, double]) = \l  (4633641066610819072(0x404e000000000000, double:60.0) ?[long, double])\l \l0x0074: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0076|0x0076: ARITH  (r6 I:double A[D('durationSeconds' double)]) = (r6 I:double A[D('durationSeconds' double)]) + (r14 I:double) \l0x0077: CONST  (r14 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l0x0079: INVOKE  (r12 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r14 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x007d|0x007d: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seconds' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00a0 \l}"];
Node_22 [shape=record,label="{22\:\ 0x007f|0x007f: INVOKE  (r14 I:double) = (r12 I:java.lang.String A[D('seconds' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0083|0x0083: ARITH  (r6 I:double A[D('durationSeconds' double)]) = (r6 I:double A[D('durationSeconds' double)]) + (r14 I:double) \l0x0084: CONST  (r14 I:?[long, double]) = \l  (4652007308841189376(0x408f400000000000, double:1000.0) ?[long, double])\l \l0x0089: ARITH  (r14 I:double) = (r14 I:double) * (r6 I:double A[D('durationSeconds' double)]) \l0x008a: CAST  (r4 I:long) = (long) (r14 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x008b|0x008b: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('negated' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008e \l}"];
Node_25 [shape=record,label="{25\:\ 0x008d|0x008d: NEG  (r4 I:long A[D('durationMillis' long)]) = (r4 I:long A[D('durationMillis' long)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x008e|0x008e: RETURN  (r4 I:long A[D('durationMillis' long)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x008f|0x008f: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0091|0x0091: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0094|0x0094: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0097|0x0097: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x009a|0x009a: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x009d|0x009d: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a0|0x00a0: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a3|0x00a3: INVOKE  (r14 I:double) = (r18 I:java.lang.String A[D('value' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x00a7: CONST  (r16 I:?[long, double]) = \l  (4660134898793709568(0x40ac200000000000, double:3600.0) ?[long, double])\l \l0x00ac: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l0x00ae: CONST  (r16 I:?[long, double]) = \l  (4652007308841189376(0x408f400000000000, double:1000.0) ?[long, double])\l \l0x00b3: ARITH  (r14 I:double) = (r14 I:double) * (r16 I:double) \l0x00b5: CAST  (r4 I:long) = (long) (r14 I:double) \l}"];
MethodNode[shape=record,label="{public static long com.google.android.exoplayer2.util.Util.parseXsDuration((r18 I:java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0044\-0x008e: r2 'days' java.lang.String\l  0x0058\-0x008e: r3 'hours' java.lang.String\l  0x008b\-0x008e: r4 'durationMillis' long\l  0x002c\-0x008e: r6 'durationSeconds' double\l  0x006c\-0x008e: r9 'minutes' java.lang.String\l  0x0031\-0x008e: r10 'months' java.lang.String\l  0x001a\-0x008e: r11 'negated' boolean\l  0x007d\-0x008e: r12 'seconds' java.lang.String\l  0x001f\-0x008e: r13 'years' java.lang.String\l  0x0097\-0x00a3: r2 'days' java.lang.String\l  0x009a\-0x00a3: r3 'hours' java.lang.String\l  0x0094\-0x00a3: r6 'durationSeconds' double\l  0x009d\-0x00a3: r9 'minutes' java.lang.String\l  0x0094\-0x00a3: r10 'months' java.lang.String\l  0x0091\-0x00a3: r11 'negated' boolean\l  0x00a0\-0x00a3: r12 'seconds' java.lang.String\l  0x0091\-0x00a3: r13 'years' java.lang.String\l  0x0008\-0x00b6: r8 'matcher' java.util.regex.Matcher\l  ?\-0x00b6: r18 'value' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_34;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_27;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_28;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_29;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_30;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_31;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_32;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_27 -> Node_5;
Node_28 -> Node_8;
Node_29 -> Node_11;
Node_30 -> Node_14;
Node_31 -> Node_17;
Node_32 -> Node_20;
Node_33 -> Node_23;
Node_34 -> Node_26;
}

