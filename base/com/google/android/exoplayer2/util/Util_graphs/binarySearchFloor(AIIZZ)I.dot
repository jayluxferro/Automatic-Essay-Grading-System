digraph "CFG forcom.google.android.exoplayer2.util.Util.binarySearchFloor([IIZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = java.util.Arrays.binarySearch(r2, r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 \>= 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|int r0 = \-(r0 + 2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|PHI: r0 \l  PHI: (r0v4 'index' int) = (r0v2 'index' int), (r0v3 'index' int), (r0v6 'index' int) binds: [B:9:0x0019, B:10:0x001b, B:2:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0011|LOOP_START\lPHI: r0 \l  PHI: (r0v1 'index' int) = (r0v0 'index' int), (r0v2 'index' int) binds: [B:1:0x0004, B:8:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0011\-\>B:8:0x0017\l|int r0 = r0 + \-1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r0 \< 0) goto L_0x0019\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x0017|LOOP_END\lLOOP:0: B:5:0x0011\-\>B:8:0x0017\l|if (r2[r0] == r3) goto L_0x0011\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|if (r4 == false) goto L_0x0009\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|int r0 = r0 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.lang.Math.max(0, r0)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.Util.binarySearchFloor((r2v0 'array' int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'value' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'inclusive' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'stayInBounds' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_12[style=dashed];
Node_9 -> Node_3;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_3;
Node_11 -> Node_9;
Node_12 -> Node_9;
}

