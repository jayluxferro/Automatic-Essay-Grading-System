digraph "CFG forcom.google.android.exoplayer2.util.Util.scaleLargeTimestampsInPlace([JJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r3 I:int) = \l  (r14 I:long A[D('divisor' long)])\l  (r12 I:long A[D('multiplier' long)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARITH  (r6 I:long) = (r14 I:long A[D('divisor' long)]) % (r12 I:long A[D('multiplier' long)]) \l0x0008: CMP_L  (r3 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r0 I:long) = (r14 I:long A[D('divisor' long)]) \/ (r12 I:long A[D('multiplier' long)]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: ARRAY_LENGTH  (r3 I:int) = (r11 I:?[] A[D('timestamps' long[])]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:20:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: AGET  (r6 I:?[long, double]) = \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0014: ARITH  (r6 I:long) = (r6 I:long) \/ (r0 I:long A[D('divisionFactor' long)]) \l0x0015: APUT  \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x0017: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CMP_L  (r3 I:int) = \l  (r14 I:long A[D('divisor' long)])\l  (r12 I:long A[D('multiplier' long)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: ARITH  (r6 I:long) = (r12 I:long A[D('multiplier' long)]) % (r14 I:long A[D('divisor' long)]) \l0x0020: CMP_L  (r3 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: ARITH  (r4 I:long) = (r12 I:long A[D('multiplier' long)]) \/ (r14 I:long A[D('divisor' long)]) \l0x0026: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: ARRAY_LENGTH  (r3 I:int) = (r11 I:?[] A[D('timestamps' long[])]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:20:0x0044 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: AGET  (r6 I:?[long, double]) = \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l \l0x002c: ARITH  (r6 I:long) = (r6 I:long) * (r4 I:long A[D('multiplicationFactor' long)]) \l0x002d: APUT  \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x002f: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: CAST  (r6 I:double) = (double) (r12 I:long A[D('multiplier' long)]) \l0x0033: CAST  (r8 I:double) = (double) (r14 I:long A[D('divisor' long)]) \l0x0034: ARITH  (r4 I:double) = (r6 I:double) \/ (r8 I:double) \l0x0036: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: ARRAY_LENGTH  (r3 I:int) = (r11 I:?[] A[D('timestamps' long[])]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IF  (r2 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:20:0x0044 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: AGET  (r6 I:?[long, double]) = \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l \l0x003c: CAST  (r6 I:double) = (double) (r6 I:long) \l0x003d: ARITH  (r6 I:double) = (r6 I:double) * (r4 I:double A[D('multiplicationFactor' double)]) \l0x003e: CAST  (r6 I:long) = (long) (r6 I:double) \l0x003f: APUT  \l  (r11 I:?[long, double][] A[D('timestamps' long[])])\l  (r2 I:?[int, short, byte, char] A[D('i' int)])\l  (r6 I:?[long, double])\l \l0x0041: ARITH  (r2 I:int A[D('i' int)]) = (r2 I:int A[D('i' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: RETURN   \l}"];
MethodNode[shape=record,label="{public static void com.google.android.exoplayer2.util.Util.scaleLargeTimestampsInPlace((r11 I:long[] A[D('timestamps' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('multiplier' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:long A[D('divisor' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000e\-0x001a: r0 'divisionFactor' long\l  0x000f\-0x001a: r2 'i' int\l  0x0027\-0x0032: r2 'i' int\l  0x0026\-0x0032: r4 'multiplicationFactor' long\l  0x0036\-0x0044: r4 'multiplicationFactor' double\l  0x0037\-0x0044: r2 'i' int\l  ?\-0x0044: r11 'timestamps' long[]\l  ?\-0x0044: r12 'multiplier' long\l  ?\-0x0044: r14 'divisor' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_20;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_17;
}

