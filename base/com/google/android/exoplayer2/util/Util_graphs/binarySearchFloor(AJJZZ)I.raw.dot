digraph "CFG forcom.google.android.exoplayer2.util.Util.binarySearchFloor([JJZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r5 I:long[] A[D('array' long[])])\l  (r6 I:long A[D('value' long)])\l java.util.Arrays.binarySearch(long[], long):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char] A[D('index' int)]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARITH  (r1 I:int) = (r0 I:int A[D('index' int)]) + (2 int) \l0x0008: NEG  (r0 I:int A[D('index' int)]) = (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stayInBounds' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: INVOKE  (r0 I:int A[D('index' int)]) = (r1 I:int), (r0 I:int A[D('index' int)]) java.lang.Math.max(int, int):int type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r0 I:int A[D('index' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: ARITH  (r0 I:int A[D('index' int)]) = (r0 I:int A[D('index' int)]) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char] A[D('index' int)]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: AGET  (r2 I:?[long, double]) = \l  (r5 I:?[long, double][] A[D('array' long[])])\l  (r0 I:?[int, short, byte, char] A[D('index' int)])\l \l0x0017: CMP_L  (r1 I:int) = (r2 I:long), (r6 I:long A[D('value' long)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inclusive' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: ARITH  (r0 I:int A[D('index' int)]) = (r0 I:int A[D('index' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.exoplayer2.util.Util.binarySearchFloor((r5 I:long[] A[D('array' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('value' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('inclusive' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('stayInBounds' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0010: r0 'index' int\l  0x0011\-0x001f: r0 'index' int\l  ?\-0x001f: r5 'array' long[]\l  ?\-0x001f: r6 'value' long\l  ?\-0x001f: r8 'inclusive' boolean\l  ?\-0x001f: r9 'stayInBounds' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_3;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_3;
}

