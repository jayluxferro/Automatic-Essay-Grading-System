digraph "CFG forcom.google.android.exoplayer2.util.Util.toByteArray(Ljava\/io\/InputStream;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l0x0002: NEW_ARRAY  (r0 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0004: NEW_INSTANCE  (r2 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0006: INVOKE  (r2 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r1 I:int) = \l  (r4 I:java.io.InputStream A[D('inputStream' java.io.InputStream)])\l  (r0 I:byte[] A[D('buffer' byte[])])\l java.io.InputStream.read(byte[]):int type: VIRTUAL \l0x000d: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytesRead' int)]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INVOKE  \l  (r2 I:java.io.ByteArrayOutputStream A[D('outputStream' java.io.ByteArrayOutputStream)])\l  (r0 I:byte[] A[D('buffer' byte[])])\l  (r3 I:int)\l  (r1 I:int A[D('bytesRead' int)])\l java.io.ByteArrayOutputStream.write(byte[], int, int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: INVOKE  (r3 I:byte[]) = \l  (r2 I:java.io.ByteArrayOutputStream A[D('outputStream' java.io.ByteArrayOutputStream)])\l java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r3 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.exoplayer2.util.Util.toByteArray((r4 I:java.io.InputStream A[D('inputStream' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0019: r0 'buffer' byte[]\l  0x000d\-0x0019: r1 'bytesRead' int\l  0x0009\-0x0019: r2 'outputStream' java.io.ByteArrayOutputStream\l  ?\-0x0019: r4 'inputStream' java.io.InputStream\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

