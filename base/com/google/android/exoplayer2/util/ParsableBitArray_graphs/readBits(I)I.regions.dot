digraph "CFG forcom.google.android.exoplayer2.util.ParsableBitArray.readBits(I)I" {
subgraph cluster_Region_2134604250 {
label = "R(1:(2:(1:2)|(5:3|(2:(1:7)(1:9)|8)|(3:11|(1:13)(2:16|(1:18))|14)|15|22))) | DECL_VAR: int returnValue, int byteValue\l";
node [shape=record,color=blue];
subgraph cluster_Region_106236609 {
label = "R(2:(1:2)|(5:3|(2:(1:7)(1:9)|8)|(3:11|(1:13)(2:16|(1:18))|14)|15|22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_630915823 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r11 == 0) goto L_0x0004\l}"];
subgraph cluster_Region_2059063870 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_681403314 {
label = "R(5:3|(2:(1:7)(1:9)|8)|(3:11|(1:13)(2:16|(1:18))|14)|15|22)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|int r3 = 0\lint int r4 = r11 \/ 8\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_532934043 {
label = "LOOP:0: (2:(1:7)(1:9)|8)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_START\lPHI: r1 r3 r11 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:3:0x0006, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'returnValue' int) = (r3v0 'returnValue' int), (r3v6 'returnValue' int) binds: [B:3:0x0006, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'numBits' int) = (r11v0 'numBits' int), (r11v2 'numBits' int) binds: [B:3:0x0006, B:8:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000a\-\>B:8:0x002c\l|if (r1 \< r4) goto L_0x000c\l}"];
subgraph cluster_Region_2042311389 {
label = "R(2:(1:7)(1:9)|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1584103706 {
label = "IF [B:6:0x000e] THEN: R(1:7) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r10.bitOffset != 0) goto L_0x0010\l}"];
subgraph cluster_Region_344899230 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|r0 = ((r10.data[r10.byteOffset] & 255) \<\< r10.bitOffset) \| ((r10.data[r10.byteOffset + 1] & 255) \>\>\> (8 \- r10.bitOffset))\l}"];
}
subgraph cluster_Region_1604545078 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003b|byte r0 = r10.data[r10.byteOffset]\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x002c|LOOP_END\lPHI: r0 \l  PHI: (r0v1 'byteValue' int) = (r0v0 'byteValue' byte), (r0v2 'byteValue' int) binds: [B:21:0x002c, B:20:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x000a\-\>B:8:0x002c\l|r11 \-= 8\lr3 = r3 \| ((r0 & 255) \<\< r11)\lr10.byteOffset++\lr1++\l}"];
}
}
subgraph cluster_IfRegion_1892059924 {
label = "IF [B:10:0x0042] THEN: R(3:11|(1:13)(2:16|(1:18))|14) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0042|if (r11 \> 0) goto L_0x0044\l}"];
subgraph cluster_Region_132747749 {
label = "R(3:11|(1:13)(2:16|(1:18))|14)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0044|int int r2 = r10.bitOffset + r11\lbyte int r5 = (byte) (255 \>\> (8 \- r11))\l}"];
subgraph cluster_IfRegion_122031030 {
label = "IF [B:12:0x004e] THEN: R(1:13) ELSE: R(2:16|(1:18))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x004e|if (r2 \> 8) goto L_0x0050\l}"];
subgraph cluster_Region_660894222 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0050|r3 \|= (((r10.data[r10.byteOffset] & 255) \<\< (r2 \- 8)) \| ((r10.data[r10.byteOffset + 1] & 255) \>\> (16 \- r2))) & r5\lr10.byteOffset++\l}"];
}
subgraph cluster_Region_1688673755 {
label = "R(2:16|(1:18))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0079|r3 \|= ((r10.data[r10.byteOffset] & 255) \>\> (8 \- r2)) & r5\l}"];
subgraph cluster_IfRegion_1540589376 {
label = "IF [B:17:0x0086] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0086|if (r2 == 8) goto L_0x0088\l}"];
subgraph cluster_Region_230122393 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0088|r10.byteOffset++\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0071|PHI: r3 \l  PHI: (r3v4 'returnValue' int) = (r3v3 'returnValue' int), (r3v3 'returnValue' int), (r3v5 'returnValue' int) binds: [B:17:0x0086, B:18:0x0088, B:13:0x0050] A[DONT_GENERATE, DONT_INLINE]\l|r10.bitOffset = r2 % 8\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0075|PHI: r3 \l  PHI: (r3v2 'returnValue' int) = (r3v1 'returnValue' int), (r3v4 'returnValue' int) binds: [B:10:0x0042, B:14:0x0071] A[DONT_GENERATE, DONT_INLINE]\l|assertValidOffset()\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0042|SYNTHETIC\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x002c|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.util.ParsableBitArray.readBits((r10v0 'this' com.google.android.exoplayer2.util.ParsableBitArray A[IMMUTABLE_TYPE, THIS]), (r11v0 'numBits' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lIncorrect type for immutable var: ssa=byte, code=int, for r0v0, types: [byte]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_19[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_20;
Node_9 -> Node_21;
Node_8 -> Node_4;
Node_10 -> Node_11;
Node_10 -> Node_15[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
Node_13 -> Node_14;
Node_16 -> Node_17;
Node_17 -> Node_14[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_22;
Node_0 -> Node_1;
Node_5 -> Node_6;
Node_19 -> Node_10;
Node_20 -> Node_8;
Node_21 -> Node_8;
}

