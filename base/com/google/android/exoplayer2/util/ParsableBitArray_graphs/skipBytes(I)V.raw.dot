digraph "CFG forcom.google.android.exoplayer2.util.ParsableBitArray.skipBytes(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.bitOffset int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x0008: IGET  (r0 I:int) = (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.byteOffset int \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int A[D('length' int)]) \l0x000b: IPUT  \l  (r0 I:int)\l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray)\l com.google.android.exoplayer2.util.ParsableBitArray.byteOffset int \l0x000d: INVOKE  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) com.google.android.exoplayer2.util.ParsableBitArray.assertValidOffset():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.util.ParsableBitArray.skipBytes((r1 'this' I:com.google.android.exoplayer2.util.ParsableBitArray A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0012: r2 'length' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

