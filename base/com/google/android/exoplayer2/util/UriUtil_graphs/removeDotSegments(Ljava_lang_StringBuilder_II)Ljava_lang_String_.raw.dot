digraph "CFG forcom.google.android.exoplayer2.util.UriUtil.removeDotSegments(Ljava\/lang\/StringBuilder;II)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l0x0002: CONST  (r7 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r10 I:?[int, byte, short, char] A[D('offset' int)]) \< (r11 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r5 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r5 I:char) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r10 I:int A[D('offset' int)])\l java.lang.StringBuilder.charAt(int):char type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: ARITH  (r10 I:int A[D('offset' int)]) = (r10 I:int A[D('offset' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l0x0014: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \> (r11 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:32:0x0066 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limit' int)])  \-\> B:16:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: ARITH  (r5 I:int) = (r4 I:int A[D('segmentStart' int)]) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0038 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: INVOKE  (r5 I:char) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r4 I:int A[D('segmentStart' int)])\l java.lang.StringBuilder.charAt(int):char type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0038 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: INVOKE  \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r4 I:int A[D('segmentStart' int)])\l  (r1 I:int A[D('nextSegmentStart' int)])\l java.lang.StringBuilder.delete(int, int):java.lang.StringBuilder type: VIRTUAL \l0x0027: ARITH  (r5 I:int) = (r1 I:int A[D('nextSegmentStart' int)]) \- (r4 I:int A[D('segmentStart' int)]) \l0x0029: ARITH  (r11 I:int A[D('limit' int)]) = (r11 I:int A[D('limit' int)]) \- (r5 I:int) \l0x002a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('segmentStart' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: INVOKE  (r5 I:char) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r0 I:int A[D('i' int)])\l java.lang.StringBuilder.charAt(int):char type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0035 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: ARITH  (r1 I:int) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0035|0x0035: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: ARITH  (r5 I:int) = (r4 I:int A[D('segmentStart' int)]) + (2 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0062 \l}"];
Node_22 [shape=record,label="{22\:\ 0x003c|0x003c: INVOKE  (r5 I:char) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r4 I:int A[D('segmentStart' int)])\l java.lang.StringBuilder.charAt(int):char type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0040|0x0040: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0062 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|0x0042: ARITH  (r5 I:int) = (r4 I:int A[D('segmentStart' int)]) + (1 int) \l0x0044: INVOKE  (r5 I:char) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l java.lang.StringBuilder.charAt(int):char type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|0x0048: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0062 \l}"];
Node_26 [shape=record,label="{26\:\ 0x004a|0x004a: CONST_STR  (r5 I:java.lang.String) =  \"\/\" \l0x004c: ARITH  (r6 I:int) = (r4 I:int A[D('segmentStart' int)]) + (\-2 int) \l0x004e: INVOKE  (r5 I:int) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:java.lang.String)\l  (r6 I:int)\l java.lang.StringBuilder.lastIndexOf(java.lang.String, int):int type: VIRTUAL \l0x0052: ARITH  (r2 I:int) = (r5 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0054|0x0054: IF  (r2 I:?[int, byte, short, char] A[D('prevSegmentStart' int)]) \<= (r10 I:?[int, byte, short, char] A[D('offset' int)])  \-\> B:30:0x0060 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0056|0x0056: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('prevSegmentStart' int)])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0057|0x0057: INVOKE  \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r3 I:int A[D('removeFrom' int)])\l  (r1 I:int A[D('nextSegmentStart' int)])\l java.lang.StringBuilder.delete(int, int):java.lang.StringBuilder type: VIRTUAL \l0x005a: ARITH  (r5 I:int) = (r1 I:int A[D('nextSegmentStart' int)]) \- (r3 I:int A[D('removeFrom' int)]) \l0x005c: ARITH  (r11 I:int A[D('limit' int)]) = (r11 I:int A[D('limit' int)]) \- (r5 I:int) \l0x005d: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('segmentStart' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('prevSegmentStart' int)])\l \l0x005e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('prevSegmentStart' int)])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|0x0060: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('removeFrom' int)]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0062|0x0062: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l0x0064: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('segmentStart' int)]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0066|0x0066: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.util.UriUtil.removeDotSegments((r9 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001a\-0x002c: r1 'nextSegmentStart' int\l  0x0034\-0x0035: r1 'nextSegmentStart' int\l  0x0057\-0x0060: r3 'removeFrom' int\l  0x0054\-0x0062: r2 'prevSegmentStart' int\l  0x0038\-0x0066: r1 'nextSegmentStart' int\l  0x0015\-0x006a: r0 'i' int\l  0x0014\-0x006a: r4 'segmentStart' int\l  ?\-0x006a: r9 'uri' java.lang.StringBuilder\l  ?\-0x006a: r10 'offset' int\l  ?\-0x006a: r11 'limit' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_32;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_8;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_11;
Node_19 -> Node_8;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_31;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_8;
Node_30 -> Node_29;
Node_31 -> Node_8;
Node_32 -> Node_3;
}

