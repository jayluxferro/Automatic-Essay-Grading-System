digraph "CFG forcom.google.android.exoplayer2.util.UriUtil.resolve(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: CONST  (r10 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l0x0003: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0004: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0008: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('baseUri' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: CONST_STR  (r12 I:java.lang.String A[D('baseUri' java.lang.String)]) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('referenceUri' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST_STR  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)]) =  \"\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r3 I:int[]) = \l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l com.google.android.exoplayer2.util.UriUtil.getUriIndices(java.lang.String):int[] type: STATIC \l0x0017: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r8 I:?[int, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001e: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0020: AGET  (r6 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x0022: INVOKE  \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.util.UriUtil.removeDotSegments(java.lang.StringBuilder, int, int):java.lang.String type: STATIC \l0x0025: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: RETURN  (r5 I:java.lang.String) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: INVOKE  (r0 I:int[]) = (r12 I:java.lang.String A[D('baseUri' java.lang.String)]) com.google.android.exoplayer2.util.UriUtil.getUriIndices(java.lang.String):int[] type: STATIC \l0x002e: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x002f: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r5 I:?[int, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0043 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0034: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r5 I:?[int, short, byte, char])\l \l0x0036: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x0049: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x004d: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0070 \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r8 I:?[int, short, byte, char])\l \l0x005c: ARITH  (r1 I:int) = (r5 I:int) + (1 int) \l0x005e: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r1 I:int A[D('baseLimit' int)])\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0065: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0067: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int A[D('baseLimit' int)]) \l0x0068: AGET  (r6 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x006a: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int A[D('baseLimit' int)]) \l0x006b: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.util.UriUtil.removeDotSegments(java.lang.StringBuilder, int, int):java.lang.String type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|0x0070: AGET  (r5 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0072: INVOKE  (r5 I:char) = \l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l  (r5 I:int)\l java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0076|0x0076: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0078|0x0078: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x007a: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x007e: INVOKE  \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0081: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0083: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0085: AGET  (r7 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x0087: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x0088: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.util.UriUtil.removeDotSegments(java.lang.StringBuilder, int, int):java.lang.String type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x008d|0x008d: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r8 I:?[int, short, byte, char])\l \l0x008f: ARITH  (r5 I:int) = (r5 I:int) + (2 int) \l0x0091: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0093|0x0093: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:26:0x00b7 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0095|0x0095: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x0097: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0099|0x0099: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00b7 \l}"];
Node_25 [shape=record,label="{25\:\ 0x009b|0x009b: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x009d: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x00a1: INVOKE  (r5 I:java.lang.StringBuilder) = (r5 I:java.lang.StringBuilder), (r10 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x00a5: INVOKE  \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a8: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x00aa: AGET  (r6 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x00ac: AGET  (r7 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x00ae: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x00af: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x00b1: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.util.UriUtil.removeDotSegments(java.lang.StringBuilder, int, int):java.lang.String type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b7|0x00b7: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x00b9: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x00bb: INVOKE  (r2 I:int) = \l  (r12 I:java.lang.String A[D('baseUri' java.lang.String)])\l  (r10 I:int)\l  (r5 I:int)\l java.lang.String.lastIndexOf(int, int):int type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x00bf|0x00bf: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastSlashIndex' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00d5 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c1|0x00c1: AGET  (r1 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c3|0x00c3: INVOKE  (r5 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r12 I:java.lang.CharSequence A[D('baseUri' java.lang.String)])\l  (r8 I:int)\l  (r1 I:int A[D('baseLimit' int)])\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x00c7: INVOKE  \l  (r5 I:java.lang.StringBuilder)\l  (r13 I:java.lang.String A[D('referenceUri' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ca: AGET  (r5 I:?[int, float]) = \l  (r0 I:?[int, float][] A[D('baseIndices' int[])])\l  (r7 I:?[int, short, byte, char])\l \l0x00cc: AGET  (r6 I:?[int, float]) = \l  (r3 I:?[int, float][] A[D('refIndices' int[])])\l  (r9 I:?[int, short, byte, char])\l \l0x00ce: ARITH  (r6 I:int) = (r6 I:int) + (r1 I:int A[D('baseLimit' int)]) \l0x00cf: INVOKE  (r5 I:java.lang.String) = \l  (r4 I:java.lang.StringBuilder A[D('uri' java.lang.StringBuilder)])\l  (r5 I:int)\l  (r6 I:int)\l com.google.android.exoplayer2.util.UriUtil.removeDotSegments(java.lang.StringBuilder, int, int):java.lang.String type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ 0x00d5|0x00d5: ARITH  (r1 I:int A[D('baseLimit' int)]) = (r2 I:int A[D('lastSlashIndex' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.exoplayer2.util.UriUtil.resolve((r12 I:java.lang.String A[D('baseUri' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.String A[D('referenceUri' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x005e\-0x0070: r1 'baseLimit' int\l  0x00c3\-0x00d5: r1 'baseLimit' int\l  0x002e\-0x00d7: r0 'baseIndices' int[]\l  0x00bf\-0x00d7: r2 'lastSlashIndex' int\l  0x0017\-0x00d7: r3 'refIndices' int[]\l  0x000b\-0x00d7: r4 'uri' java.lang.StringBuilder\l  ?\-0x00d7: r12 'baseUri' java.lang.String\l  ?\-0x00d7: r13 'referenceUri' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_8;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_8;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_8;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_8;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_8;
Node_30 -> Node_29;
}

