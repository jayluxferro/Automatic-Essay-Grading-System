digraph "CFG forcom.google.android.exoplayer2.util.UriUtil.getUriIndices(Ljava\/lang\/String;)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r12 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l0x0004: CONST  (r11 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0005: CONST  (r10 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0006: NEW_ARRAY  (r2 I:int[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0008: INVOKE  (r10 I:boolean) = \l  (r13 I:java.lang.CharSequence A[D('uriString' java.lang.String)])\l android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: APUT  \l  (r2 I:?[int, float][] A[D('indices' int[])])\l  (r9 I:?[int, short, byte, char])\l  (r11 I:?[int, float])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r2 I:int[] A[D('indices' int[])]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r3 I:int) = (r13 I:java.lang.String A[D('uriString' java.lang.String)]) java.lang.String.length():int type: VIRTUAL \l0x0015: CONST  (r10 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r0 I:int) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r10 I:int)\l java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fragmentIndex' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fragmentIndex' int)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r10 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l0x0020: INVOKE  (r5 I:int) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r10 I:int)\l java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queryIndex' int)]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r5 I:?[int, byte, short, char] A[D('queryIndex' int)]) \<= (r0 I:?[int, byte, short, char] A[D('fragmentIndex' int)])  \-\> B:11:0x0029 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('queryIndex' int)]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fragmentIndex' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r7 I:int) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r12 I:int)\l java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('schemeIndexLimit' int)]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: IF  (r7 I:?[int, byte, short, char] A[D('schemeIndexLimit' int)]) \<= (r5 I:?[int, byte, short, char] A[D('queryIndex' int)])  \-\> B:15:0x0032 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('schemeIndexLimit' int)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('queryIndex' int)])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: CONST  (r10 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0034: INVOKE  (r6 I:int) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r10 I:int)\l java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r6 I:?[int, byte, short, char] A[D('schemeIndex' int)]) \<= (r7 I:?[int, byte, short, char] A[D('schemeIndexLimit' int)])  \-\> B:18:0x003b \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: CONST  (r6 I:?[int, float, short, byte, char] A[D('schemeIndex' int)]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: ARITH  (r10 I:int) = (r6 I:int A[D('schemeIndex' int)]) + (2 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: IF  (r10 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char] A[D('queryIndex' int)])  \-\> B:31:0x0068 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003f|0x003f: ARITH  (r10 I:int) = (r6 I:int A[D('schemeIndex' int)]) + (1 int) \l0x0041: INVOKE  (r10 I:char) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r10 I:int)\l java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: ARITH  (r10 I:int) = (r6 I:int A[D('schemeIndex' int)]) + (2 int) \l0x0049: INVOKE  (r10 I:char) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r10 I:int)\l java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0068 \l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|0x004f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0050|0x0050: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasAuthority' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x006a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0052|0x0052: ARITH  (r10 I:int) = (r6 I:int A[D('schemeIndex' int)]) + (3 int) \l0x0054: INVOKE  (r4 I:int) = \l  (r13 I:java.lang.String A[D('uriString' java.lang.String)])\l  (r12 I:int)\l  (r10 I:int)\l java.lang.String.indexOf(int, int):int type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|0x0058: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pathIndex' int)]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005c \l}"];
Node_28 [shape=record,label="{28\:\ 0x005a|0x005a: IF  (r4 I:?[int, byte, short, char] A[D('pathIndex' int)]) \<= (r5 I:?[int, byte, short, char] A[D('queryIndex' int)])  \-\> B:30:0x005d \l}"];
Node_29 [shape=record,label="{29\:\ 0x005c|0x005c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pathIndex' int)]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('queryIndex' int)])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x005d|0x005d: APUT  \l  (r2 I:?[int, float][] A[D('indices' int[])])\l  (r9 I:?[int, short, byte, char])\l  (r6 I:?[int, float] A[D('schemeIndex' int)])\l \l0x005f: APUT  \l  (r2 I:?[int, float][] A[D('indices' int[])])\l  (r8 I:?[int, short, byte, char])\l  (r4 I:?[int, float] A[D('pathIndex' int)])\l \l0x0061: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0062: APUT  \l  (r2 I:?[int, float][] A[D('indices' int[])])\l  (r8 I:?[int, short, byte, char])\l  (r5 I:?[int, float] A[D('queryIndex' int)])\l \l0x0064: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0065: APUT  \l  (r2 I:?[int, float][] A[D('indices' int[])])\l  (r8 I:?[int, short, byte, char])\l  (r0 I:?[int, float] A[D('fragmentIndex' int)])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x0068|0x0068: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hasAuthority' boolean)]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x006a|0x006a: ARITH  (r4 I:int) = (r6 I:int A[D('schemeIndex' int)]) + (1 int) \l}"];
MethodNode[shape=record,label="{private static int[] com.google.android.exoplayer2.util.UriUtil.getUriIndices((r13 I:java.lang.String A[D('uriString' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0050\-0x0068: r1 'hasAuthority' boolean\l  0x0058\-0x0068: r4 'pathIndex' int\l  0x001b\-0x006c: r0 'fragmentIndex' int\l  0x006a\-0x006c: r1 'hasAuthority' boolean\l  0x0008\-0x006c: r2 'indices' int[]\l  0x0015\-0x006c: r3 'length' int\l  0x006c\-0x006c: r4 'pathIndex' int\l  0x0024\-0x006c: r5 'queryIndex' int\l  0x0038\-0x006c: r6 'schemeIndex' int\l  0x002d\-0x006c: r7 'schemeIndexLimit' int\l  ?\-0x006c: r13 'uriString' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_31;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_3;
Node_31 -> Node_25;
Node_32 -> Node_30;
}

