digraph "CFG forcom.google.android.exoplayer2.util.SlidingPercentile.2.compare(Lcom\/google\/android\/exoplayer2\/util\/SlidingPercentile$Sample;Lcom\/google\/android\/exoplayer2\/util\/SlidingPercentile$Sample;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = \l  (r3 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('a' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l0x0002: IGET  (r1 I:float) = \l  (r4 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('b' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l0x0004: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:float) = \l  (r4 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('b' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l0x000c: IGET  (r1 I:float) = \l  (r3 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('a' com.google.android.exoplayer2.util.SlidingPercentile$Sample)])\l com.google.android.exoplayer2.util.SlidingPercentile.Sample.value float \l0x000e: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public int com.google.android.exoplayer2.util.SlidingPercentile.2.compare((r2 'this' I:com.google.android.exoplayer2.util.SlidingPercentile$2 A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('a' com.google.android.exoplayer2.util.SlidingPercentile$Sample), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.util.SlidingPercentile$Sample A[D('b' com.google.android.exoplayer2.util.SlidingPercentile$Sample), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0015: r3 'a' com.google.android.exoplayer2.util.SlidingPercentile$Sample\l  ?\-0x0015: r4 'b' com.google.android.exoplayer2.util.SlidingPercentile$Sample\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_3;
}

