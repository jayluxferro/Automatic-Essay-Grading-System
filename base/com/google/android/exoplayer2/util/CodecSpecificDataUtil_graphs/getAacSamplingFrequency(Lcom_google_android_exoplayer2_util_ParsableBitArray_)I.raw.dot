digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacSamplingFrequency(Lcom\/google\/android\/exoplayer2\/util\/ParsableBitArray;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r0 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frequencyIndex' int)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l0x000b: INVOKE  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r1 I:int A[D('samplingFrequency' int)]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char] A[D('frequencyIndex' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r2 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0018: SGET  (r2 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE int[] \l0x001a: AGET  (r1 I:?[int, float]) = \l  (r2 I:?[int, float][])\l  (r0 I:?[int, short, byte, char] A[D('frequencyIndex' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacSamplingFrequency((r3 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x0010: r1 'samplingFrequency' int\l  0x001c\-0x001d: r1 'samplingFrequency' int\l  0x0005\-0x001e: r0 'frequencyIndex' int\l  ?\-0x001e: r3 'bitArray' com.google.android.exoplayer2.util.ParsableBitArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_7;
}

