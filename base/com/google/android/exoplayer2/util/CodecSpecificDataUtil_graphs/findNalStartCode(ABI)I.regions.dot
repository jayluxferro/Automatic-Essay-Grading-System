digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.findNalStartCode([BI)I" {
subgraph cluster_Region_67830907 {
label = "R(3:0|(1:(2:(1:8)|(1:4)))|5)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.length \- NAL_START_CODE.length\lint r1 = r5\l}"];
subgraph cluster_LoopRegion_1107085182 {
label = "LOOP:0: (1:(2:(1:8)|(1:4)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v3 'i' int) binds: [B:0:0x0000, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:4:0x0010\l|if (r1 \<= r0) goto L_0x0009\l}"];
subgraph cluster_Region_1338634777 {
label = "R(1:(2:(1:8)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_2005817051 {
label = "R(2:(1:8)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1142660862 {
label = "IF [B:3:0x000d] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (isNalStartCode(r4, r1) == true) goto L_0x000f\l}"];
subgraph cluster_Region_418341594 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_128908496 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_END\lLOOP:0: B:1:0x0007\-\>B:4:0x0010\l|r1++\l}"];
}
}
}
}
Node_5 [shape=record,label="{5\:\ 0x0013|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.util.CodecSpecificDataUtil.findNalStartCode((r4v0 'data' byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'index' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_5;
Node_7 -> Node_8;
}

