digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.parseAacAudioSpecificConfig([B)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0001: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) =  com.google.android.exoplayer2.util.ParsableBitArray \l0x0003: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r7 I:byte[] A[D('audioSpecificConfig' byte[])])\l com.google.android.exoplayer2.util.ParsableBitArray.\<init\>(byte[]):void type: DIRECT \l0x0006: INVOKE  (r0 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacAudioObjectType(com.google.android.exoplayer2.util.ParsableBitArray):int type: STATIC \l0x000a: INVOKE  (r4 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacSamplingFrequency(com.google.android.exoplayer2.util.ParsableBitArray):int type: STATIC \l0x000e: INVOKE  (r2 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0012: CONST  (r5 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioObjectType' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, short, byte, char]) = (29 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioObjectType' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: INVOKE  (r4 I:int A[D('sampleRate' int)]) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacSamplingFrequency(com.google.android.exoplayer2.util.ParsableBitArray):int type: STATIC \l0x001d: INVOKE  (r0 I:int A[D('audioObjectType' int)]) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.getAacAudioObjectType(com.google.android.exoplayer2.util.ParsableBitArray):int type: STATIC \l0x0021: CONST  (r5 I:?[int, float, short, byte, char]) = (22 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('audioObjectType' int)]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: INVOKE  (r2 I:int A[D('channelConfiguration' int)]) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('bitArray' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r6 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: SGET  (r5 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE int[] \l0x002b: AGET  (r3 I:?[int, float]) = \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char] A[D('channelConfiguration' int)])\l \l0x002d: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('channelCount' int)]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: INVOKE  (r5 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC \l0x0034: INVOKE  (r5 I:java.lang.Integer) = (r4 I:int A[D('sampleRate' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0038: INVOKE  (r6 I:java.lang.Integer) = (r3 I:int A[D('channelCount' int)]) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x003c: INVOKE  (r5 I:android.util.Pair) = (r5 I:java.lang.Object), (r6 I:java.lang.Object) android.util.Pair.create(java.lang.Object, java.lang.Object):android.util.Pair type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: RETURN  \l  (r5 I:android.util.Pair\<java.lang.Integer, java.lang.Integer\>)\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static android.util.Pair\<java.lang.Integer, java.lang.Integer\> com.google.android.exoplayer2.util.CodecSpecificDataUtil.parseAacAudioSpecificConfig((r7 I:byte[] A[D('audioSpecificConfig' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000a\-0x0042: r0 'audioObjectType' int\l  0x0006\-0x0042: r1 'bitArray' com.google.android.exoplayer2.util.ParsableBitArray\l  0x0012\-0x0042: r2 'channelConfiguration' int\l  0x002d\-0x0042: r3 'channelCount' int\l  0x000e\-0x0042: r4 'sampleRate' int\l  ?\-0x0042: r7 'audioSpecificConfig' byte[]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([B), Landroid\/util\/Pair, \<, Ljava\/lang\/Integer;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_10;
}

