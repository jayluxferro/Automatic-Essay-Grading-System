digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacLcAudioSpecificConfig(II)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = \-1\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v5 'i' int) binds: [B:0:0x0000, B:6:0x000f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'sampleRateIndex' int) = (r2v0 'sampleRateIndex' int), (r2v2 'sampleRateIndex' int) binds: [B:0:0x0000, B:6:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:6:0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (r1 \>= AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE.length) goto L_0x0012\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r6 != AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[r1]) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|r2 = r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|LOOP_END\lPHI: r2 \l  PHI: (r2v2 'sampleRateIndex' int) = (r2v1 'sampleRateIndex' int), (r2v3 'sampleRateIndex' int) binds: [B:22:0x000f, B:21:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:6:0x000f\l|int r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|r0 = \-1\lr1 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v1 'channelConfig' int) = (r0v0 'channelConfig' int), (r0v2 'channelConfig' int) binds: [B:7:0x0012, B:13:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v3 'i' int) = (r1v2 'i' int), (r1v4 'i' int) binds: [B:7:0x0012, B:13:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0014\-\>B:13:0x0020\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|if (r1 \>= AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE.length) goto L_0x0023\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019}"];
Node_11 [shape=record,label="{11\:\ 0x001d|if (r7 != AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[r1]) goto L_0x0020\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|r0 = r1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|LOOP_END\lPHI: r0 \l  PHI: (r0v2 'channelConfig' int) = (r0v1 'channelConfig' int), (r0v3 'channelConfig' int) binds: [B:25:0x0020, B:24:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0014\-\>B:13:0x0020\l|int r1 = r1 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|if (r6 == \-1) goto L_0x0027\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|if (r0 != \-1) goto L_0x004a\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027}"];
Node_17 [shape=record,label="{17\:\ 0x0049|throw new java.lang.IllegalArgumentException(new java.lang.StringBuilder().append(\"Invalid sample rate or number of channels: \").append(r6).append(\", \").append(r7).toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a}"];
Node_19 [shape=record,label="{19\:\ 0x004f|RETURN\l|return buildAacAudioSpecificConfig(2, r2, r0)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0023|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacLcAudioSpecificConfig((r6v0 'sampleRate' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'numChannels' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_22;
Node_5 -> Node_21;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_24;
Node_13 -> Node_8;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_7;
Node_21 -> Node_6;
Node_22 -> Node_6;
Node_23 -> Node_14;
Node_24 -> Node_13;
Node_25 -> Node_13;
}

