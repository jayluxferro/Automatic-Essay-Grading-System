digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacLcAudioSpecificConfig(II)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE int[] \l0x0005: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE int[] \l0x000a: AGET  (r3 I:?[int, float]) = \l  (r3 I:?[int, float][])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRate' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sampleRateIndex' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0013: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE int[] \l0x0016: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char])  \-\> B:14:0x0023 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: SGET  (r3 I:int[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE int[] \l0x001b: AGET  (r3 I:?[int, float]) = \l  (r3 I:?[int, float][])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('numChannels' int)]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0020 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('channelConfig' int)]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleRate' int)]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0027 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('channelConfig' int)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0029: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002e: CONST_STR  (r5 I:java.lang.String) =  \"Invalid sample rate or number of channels: \" \l0x0030: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r4 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder)\l  (r6 I:int A[D('sampleRate' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0038: CONST_STR  (r5 I:java.lang.String) =  \", \" \l0x003a: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r4 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder)\l  (r7 I:int A[D('numChannels' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0046: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004b: INVOKE  (r3 I:byte[]) = \l  (r3 I:int)\l  (r2 I:int A[D('sampleRateIndex' int)])\l  (r0 I:int A[D('channelConfig' int)])\l com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacAudioSpecificConfig(int, int, int):byte[] type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: RETURN  (r3 I:byte[]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildAacLcAudioSpecificConfig((r6 I:int A[D('sampleRate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('numChannels' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0013\-0x004f: r0 'channelConfig' int\l  0x0003\-0x004f: r1 'i' int\l  0x0002\-0x004f: r2 'sampleRateIndex' int\l  ?\-0x004f: r6 'sampleRate' int\l  ?\-0x004f: r7 'numChannels' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

