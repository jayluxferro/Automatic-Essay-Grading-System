digraph "CFG forcom.google.android.exoplayer2.util.CodecSpecificDataUtil.buildNalUnit([BII)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: SGET  (r1 I:byte[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.NAL_START_CODE byte[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0004: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int A[D('length' int)]) \l0x0005: NEW_ARRAY  (r0 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0007: SGET  (r1 I:byte[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.NAL_START_CODE byte[] \l0x0009: SGET  (r2 I:byte[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.NAL_START_CODE byte[] \l0x000b: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x000c: INVOKE  \l  (r1 I:java.lang.Object)\l  (r3 I:int)\l  (r0 I:java.lang.Object A[D('nalUnit' byte[])])\l  (r3 I:int)\l  (r2 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x000f: SGET  (r1 I:byte[]) =  com.google.android.exoplayer2.util.CodecSpecificDataUtil.NAL_START_CODE byte[] \l0x0011: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0012: INVOKE  \l  (r4 I:java.lang.Object A[D('data' byte[])])\l  (r5 I:int A[D('offset' int)])\l  (r0 I:java.lang.Object A[D('nalUnit' byte[])])\l  (r1 I:int)\l  (r6 I:int A[D('length' int)])\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN  (r0 I:byte[] A[D('nalUnit' byte[])]) \l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.exoplayer2.util.CodecSpecificDataUtil.buildNalUnit((r4 I:byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x0015: r0 'nalUnit' byte[]\l  ?\-0x0015: r4 'data' byte[]\l  ?\-0x0015: r5 'offset' int\l  ?\-0x0015: r6 'length' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

