digraph "CFG forcom.google.android.exoplayer2.drm.OfflineLicenseHelper.openBlockingKeyRequest(I[BLcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)Lcom\/google\/android\/exoplayer2\/drm\/DrmSession;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager\<T\>) = \l  (r3 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.drmSessionManager com.google.android.exoplayer2.drm.DefaultDrmSessionManager \l0x0002: INVOKE  \l  (r1 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager)\l  (r4 I:int A[D('licenseMode' int)])\l  (r5 I:byte[] A[D('offlineLicenseKeySetId' byte[])])\l com.google.android.exoplayer2.drm.DefaultDrmSessionManager.setMode(int, byte[]):void type: VIRTUAL \l0x0005: IGET  (r1 I:android.os.ConditionVariable) = \l  (r3 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.conditionVariable android.os.ConditionVariable \l0x0007: INVOKE  (r1 I:android.os.ConditionVariable) android.os.ConditionVariable.close():void type: VIRTUAL \l0x000a: IGET  (r1 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager\<T\>) = \l  (r3 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.drmSessionManager com.google.android.exoplayer2.drm.DefaultDrmSessionManager \l0x000c: IGET  (r2 I:android.os.HandlerThread) = \l  (r3 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.handlerThread android.os.HandlerThread \l0x000e: INVOKE  (r2 I:android.os.Looper) = (r2 I:android.os.HandlerThread) android.os.HandlerThread.getLooper():android.os.Looper type: VIRTUAL \l0x0012: INVOKE  (r0 I:com.google.android.exoplayer2.drm.DrmSession) = \l  (r1 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager)\l  (r2 I:android.os.Looper)\l  (r6 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l com.google.android.exoplayer2.drm.DefaultDrmSessionManager.acquireSession(android.os.Looper, com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.drm.DrmSession type: VIRTUAL \l0x0016: IGET  (r1 I:android.os.ConditionVariable) = \l  (r3 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.conditionVariable android.os.ConditionVariable \l0x0018: INVOKE  (r1 I:android.os.ConditionVariable) android.os.ConditionVariable.block():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: RETURN  \l  (r0 I:com.google.android.exoplayer2.drm.DrmSession\<T\> A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l \l}"];
MethodNode[shape=record,label="{private com.google.android.exoplayer2.drm.DrmSession\<T\> com.google.android.exoplayer2.drm.OfflineLicenseHelper.openBlockingKeyRequest((r3 'this' I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('licenseMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte[] A[D('offlineLicenseKeySetId' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0016\-0x001b: r0 'drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>\l  0x0000\-0x001b: r3 'this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>\l  ?\-0x001b: r4 'licenseMode' int\l  ?\-0x001b: r5 'offlineLicenseKeySetId' byte[]\l  ?\-0x001b: r6 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I[B, Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;, ), Lcom\/google\/android\/exoplayer2\/drm\/DrmSession, \<TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

