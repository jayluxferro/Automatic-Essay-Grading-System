digraph "CFG forcom.google.android.exoplayer2.drm.OfflineLicenseHelper.downloadLicense(Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: INVOKE  (r0 I:boolean) com.google.android.exoplayer2.util.Assertions.checkArgument(boolean):void type: STATIC A[Catch:\{ all \-\> 0x0011 \}, TRY_ENTER]\l0x0007: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0011 \}]\l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0011 \}]\l0x0009: INVOKE  (r0 I:byte[]) = \l  (r2 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l  (r0 I:int)\l  (r1 I:byte[])\l  (r3 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.blockingKeyRequest(int, byte[], com.google.android.exoplayer2.drm.DrmInitData):byte[] type: DIRECT A[Catch:\{ all \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN  (r0 I:byte[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|ExcHandler: all null\lSplitter:B:3:0x0004\l|0x0011: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: MONITOR_EXIT  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized byte[] com.google.android.exoplayer2.drm.OfflineLicenseHelper.downloadLicense((r2 'this' I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0000\-0x0013: r2 'this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>\l  ?\-0x0013: r3 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, java.lang.InterruptedException, com.google.android.exoplayer2.drm.DrmSession$DrmSessionException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_4 -> Node_9;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

