digraph "CFG forcom.google.android.exoplayer2.drm.OfflineLicenseHelper.blockingKeyRequest(I[BLcom\/google\/android\/exoplayer2\/drm\/DrmInitData;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.google.android.exoplayer2.drm.DrmSession) = \l  (r4 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l  (r5 I:int A[D('licenseMode' int)])\l  (r6 I:byte[] A[D('offlineLicenseKeySetId' byte[])])\l  (r7 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.openBlockingKeyRequest(int, byte[], com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.drm.DrmSession type: DIRECT \l0x0004: INVOKE  (r1 I:com.google.android.exoplayer2.drm.DrmSession$DrmSessionException) = \l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.DrmSession.getError():com.google.android.exoplayer2.drm.DrmSession$DrmSessionException type: INTERFACE \l0x0008: INVOKE  (r2 I:byte[]) = \l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.DrmSession.getOfflineLicenseKeySetId():byte[] type: INTERFACE \l0x000c: IGET  (r3 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager\<T\>) = \l  (r4 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.drmSessionManager com.google.android.exoplayer2.drm.DefaultDrmSessionManager \l0x000e: INVOKE  \l  (r3 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager)\l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.DefaultDrmSessionManager.releaseSession(com.google.android.exoplayer2.drm.DrmSession):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: THROW  \l  (r1 I:java.lang.Throwable A[D('error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r2 I:byte[] A[D('keySetId' byte[])]) \l}"];
MethodNode[shape=record,label="{private byte[] com.google.android.exoplayer2.drm.OfflineLicenseHelper.blockingKeyRequest((r4 'this' I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('licenseMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte[] A[D('offlineLicenseKeySetId' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.google.android.exoplayer2.drm.DrmInitData A[D('drmInitData' com.google.android.exoplayer2.drm.DrmInitData), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0004\-0x0014: r0 'drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>\l  0x0008\-0x0014: r1 'error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException\l  0x000c\-0x0014: r2 'keySetId' byte[]\l  0x0000\-0x0014: r4 'this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>\l  ?\-0x0014: r5 'licenseMode' int\l  ?\-0x0014: r6 'offlineLicenseKeySetId' byte[]\l  ?\-0x0014: r7 'drmInitData' com.google.android.exoplayer2.drm.DrmInitData\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.drm.DrmSession$DrmSessionException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
}

