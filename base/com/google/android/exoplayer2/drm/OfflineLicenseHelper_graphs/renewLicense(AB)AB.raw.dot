digraph "CFG forcom.google.android.exoplayer2.drm.OfflineLicenseHelper.renewLicense([B)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  \l  (r3 I:java.lang.Object A[D('offlineLicenseKeySetId' byte[])])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC A[Catch:\{ all \-\> 0x000c \}, TRY_ENTER]\l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x000c \}]\l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x000c \}]\l0x0006: INVOKE  (r0 I:byte[]) = \l  (r2 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l  (r0 I:int)\l  (r3 I:byte[] A[D('offlineLicenseKeySetId' byte[])])\l  (r1 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.blockingKeyRequest(int, byte[], com.google.android.exoplayer2.drm.DrmInitData):byte[] type: DIRECT A[Catch:\{ all \-\> 0x000c \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: MONITOR_EXIT  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r0 I:byte[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: MONITOR_EXIT  \l  (r2 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized byte[] com.google.android.exoplayer2.drm.OfflineLicenseHelper.renewLicense((r2 'this' I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[D('offlineLicenseKeySetId' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0000\-0x000e: r2 'this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>\l  ?\-0x000e: r3 'offlineLicenseKeySetId' byte[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.drm.DrmSession$DrmSessionException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_6;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

