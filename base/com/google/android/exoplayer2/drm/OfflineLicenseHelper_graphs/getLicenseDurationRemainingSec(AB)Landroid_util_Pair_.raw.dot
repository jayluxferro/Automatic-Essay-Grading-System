digraph "CFG forcom.google.android.exoplayer2.drm.OfflineLicenseHelper.getLicenseDurationRemainingSec([B)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  \l  (r6 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  \l  (r7 I:java.lang.Object A[D('offlineLicenseKeySetId' byte[])])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC A[Catch:\{ all \-\> 0x0034 \}, TRY_ENTER]\l0x0004: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0034 \}]\l0x0005: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0034 \}]\l0x0006: INVOKE  (r0 I:com.google.android.exoplayer2.drm.DrmSession) = \l  (r6 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l  (r3 I:int)\l  (r7 I:byte[] A[D('offlineLicenseKeySetId' byte[])])\l  (r4 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.openBlockingKeyRequest(int, byte[], com.google.android.exoplayer2.drm.DrmInitData):com.google.android.exoplayer2.drm.DrmSession type: DIRECT A[Catch:\{ all \-\> 0x0034 \}]\l0x000a: INVOKE  (r1 I:com.google.android.exoplayer2.drm.DrmSession$DrmSessionException) = \l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.DrmSession.getError():com.google.android.exoplayer2.drm.DrmSession$DrmSessionException type: INTERFACE A[Catch:\{ all \-\> 0x0034 \}]\l0x000e: INVOKE  (r2 I:android.util.Pair) = \l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.WidevineUtil.getLicenseDurationRemainingSec(com.google.android.exoplayer2.drm.DrmSession):android.util.Pair type: STATIC A[Catch:\{ all \-\> 0x0034 \}]\l0x0012: IGET  (r3 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager\<T\>) = \l  (r6 I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l com.google.android.exoplayer2.drm.OfflineLicenseHelper.drmSessionManager com.google.android.exoplayer2.drm.DefaultDrmSessionManager A[Catch:\{ all \-\> 0x0034 \}]\l0x0014: INVOKE  \l  (r3 I:com.google.android.exoplayer2.drm.DefaultDrmSessionManager)\l  (r0 I:com.google.android.exoplayer2.drm.DrmSession A[D('drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>)])\l com.google.android.exoplayer2.drm.DefaultDrmSessionManager.releaseSession(com.google.android.exoplayer2.drm.DrmSession):void type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0031 A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: INVOKE  (r3 I:java.lang.Throwable) = \l  (r1 I:com.google.android.exoplayer2.drm.DrmSession$DrmSessionException A[D('error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException)])\l com.google.android.exoplayer2.drm.DrmSession.DrmSessionException.getCause():java.lang.Throwable type: VIRTUAL A[Catch:\{ all \-\> 0x0034 \}]\l0x001d: INSTANCE_OF  (r3 I:boolean) = (r3 I:?[OBJECT, ARRAY]) com.google.android.exoplayer2.drm.KeysExpiredException A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0033 A[Catch:\{ all \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0034 \}]\l0x0023: INVOKE  (r3 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0034 \}]\l0x0027: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0034 \}]\l0x0029: INVOKE  (r4 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0034 \}]\l0x002d: INVOKE  (r2 I:android.util.Pair A[D('licenseDurationRemainingSec' android.util.Pair\<java.lang.Long, java.lang.Long\>)]) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) android.util.Pair.create(java.lang.Object, java.lang.Object):android.util.Pair type: STATIC A[Catch:\{ all \-\> 0x0034 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: MONITOR_EXIT  \l  (r6 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: RETURN  (r2 I:android.util.Pair\<java.lang.Long, java.lang.Long\>) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|SYNTHETIC\lSplitter:B:10:0x0033\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0033\l|0x0033: THROW  \l  (r1 I:java.lang.Throwable A[D('error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException)])\l A[Catch:\{ all \-\> 0x0034 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0034: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: MONITOR_EXIT  \l  (r6 I:?[OBJECT, ARRAY] A[D('this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>)])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized android.util.Pair\<java.lang.Long, java.lang.Long\> com.google.android.exoplayer2.drm.OfflineLicenseHelper.getLicenseDurationRemainingSec((r6 'this' I:com.google.android.exoplayer2.drm.OfflineLicenseHelper A[IMMUTABLE_TYPE, THIS]), (r7 I:byte[] A[D('offlineLicenseKeySetId' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x0031: r2 'licenseDurationRemainingSec' android.util.Pair\<java.lang.Long, java.lang.Long\>\l  0x000a\-0x0034: r0 'drmSession' com.google.android.exoplayer2.drm.DrmSession\<T\>\l  0x000e\-0x0034: r1 'error' com.google.android.exoplayer2.drm.DrmSession$DrmSessionException\l  0x0033\-0x0034: r2 'licenseDurationRemainingSec' android.util.Pair\<java.lang.Long, java.lang.Long\>\l  0x0000\-0x0036: r6 'this' com.google.android.exoplayer2.drm.OfflineLicenseHelper\<T\>\l  ?\-0x0036: r7 'offlineLicenseKeySetId' byte[]\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.drm.DrmSession$DrmSessionException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([B), Landroid\/util\/Pair, \<, Ljava\/lang\/Long;, Ljava\/lang\/Long;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

