digraph "CFG forcom.google.android.exoplayer2.drm.DrmInitData.\<init\>(Z[Lcom\/google\/android\/exoplayer2\/drm\/DrmInitData$SchemeData;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cloneSchemeDatas' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r6 I:java.lang.Object A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])]) = \l  (r6 I:java.lang.Object A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l java.lang.Object.clone():java.lang.Object type: VIRTUAL \l0x0009: CHECK_CAST  (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])]) = (com.google.android.exoplayer2.drm.DrmInitData$SchemeData[]) (r6 I:?[OBJECT, ARRAY] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  \l  (r6 I:java.lang.Object[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l  (r4 I:java.util.Comparator)\l java.util.Arrays.sort(java.lang.Object[], java.util.Comparator):void type: STATIC \l0x000e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARRAY_LENGTH  (r1 I:int) = \l  (r6 I:?[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:11:0x0048 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: ARITH  (r1 I:int) = (r0 I:int A[D('i' int)]) + (\-1 int) \l0x0014: AGET  (r1 I:?[OBJECT, ARRAY]) = \l  (r6 I:?[OBJECT, ARRAY][] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l  (r1 I:?[int, short, byte, char])\l \l0x0016: INVOKE  (r1 I:java.util.UUID) = \l  (r1 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l com.google.android.exoplayer2.drm.DrmInitData.SchemeData.access$000(com.google.android.exoplayer2.drm.DrmInitData$SchemeData):java.util.UUID type: STATIC \l0x001a: AGET  (r2 I:?[OBJECT, ARRAY]) = \l  (r6 I:?[OBJECT, ARRAY][] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x001c: INVOKE  (r2 I:java.util.UUID) = \l  (r2 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l com.google.android.exoplayer2.drm.DrmInitData.SchemeData.access$000(com.google.android.exoplayer2.drm.DrmInitData$SchemeData):java.util.UUID type: STATIC \l0x0020: INVOKE  (r1 I:boolean) = (r1 I:java.util.UUID), (r2 I:java.lang.Object) java.util.UUID.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0028: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002d: CONST_STR  (r3 I:java.lang.String) =  \"Duplicate data for uuid: \" \l0x002f: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0033: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r6 I:?[OBJECT, ARRAY][] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l \l0x0035: INVOKE  (r3 I:java.util.UUID) = \l  (r3 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData)\l com.google.android.exoplayer2.drm.DrmInitData.SchemeData.access$000(com.google.android.exoplayer2.drm.DrmInitData$SchemeData):java.util.UUID type: STATIC \l0x0039: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: IPUT  \l  (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l  (r4 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.drm.DrmInitData.schemeDatas com.google.android.exoplayer2.drm.DrmInitData$SchemeData[] \l0x004a: ARRAY_LENGTH  (r1 I:int) = \l  (r6 I:?[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[])])\l \l0x004b: IPUT  \l  (r1 I:int)\l  (r4 I:com.google.android.exoplayer2.drm.DrmInitData)\l com.google.android.exoplayer2.drm.DrmInitData.schemeDataCount int \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.drm.DrmInitData.\<init\>((r4 'this' I:com.google.android.exoplayer2.drm.DrmInitData A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[D('cloneSchemeDatas' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.google.android.exoplayer2.drm.DrmInitData$SchemeData[] A[D('schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0009: r6 'schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[]\l  0x000f\-0x004d: r0 'i' int\l  ?\-0x004d: r5 'cloneSchemeDatas' boolean\l  0x000b\-0x004d: r6 'schemeDatas' com.google.android.exoplayer2.drm.DrmInitData$SchemeData[]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_4;
Node_11 -> Node_12;
}

