digraph "CFG forcom.google.android.exoplayer2.DefaultLoadControl.getBufferTimeState(J)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r3 I:com.google.android.exoplayer2.DefaultLoadControl) com.google.android.exoplayer2.DefaultLoadControl.maxBufferUs long \l0x0002: CMP_L  (r0 I:int) = (r4 I:long A[D('bufferedDurationUs' long)]), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:long) = (r3 I:com.google.android.exoplayer2.DefaultLoadControl) com.google.android.exoplayer2.DefaultLoadControl.minBufferUs long \l0x000a: CMP_L  (r0 I:int) = (r4 I:long A[D('bufferedDurationUs' long)]), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private int com.google.android.exoplayer2.DefaultLoadControl.getBufferTimeState((r3 'this' I:com.google.android.exoplayer2.DefaultLoadControl A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('bufferedDurationUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0011: r4 'bufferedDurationUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_3;
}

