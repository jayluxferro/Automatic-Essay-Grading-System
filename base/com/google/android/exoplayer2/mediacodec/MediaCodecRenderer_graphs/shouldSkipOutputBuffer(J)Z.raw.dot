digraph "CFG forcom.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:java.util.List\<java.lang.Long\>) = \l  (r5 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.decodeOnlyPresentationTimestamps java.util.List \l0x0002: INVOKE  (r1 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:7:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r2 I:java.util.List\<java.lang.Long\>) = \l  (r5 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.decodeOnlyPresentationTimestamps java.util.List \l0x000b: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int A[D('i' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x000f: CHECK_CAST  (r2 I:java.lang.Long) = (java.lang.Long) (r2 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:long) = (r2 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0015: CMP_L  (r2 I:int) = (r2 I:long), (r6 I:long A[D('presentationTimeUs' long)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r2 I:java.util.List\<java.lang.Long\>) = \l  (r5 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.decodeOnlyPresentationTimestamps java.util.List \l0x001b: INVOKE  (r2 I:java.util.List), (r0 I:int A[D('i' int)]) java.util.List.remove(int):java.lang.Object type: INTERFACE \l0x001e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer((r5 'this' I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[D('presentationTimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0007\-0x0024: r0 'i' int\l  0x0006\-0x0024: r1 'size' int\l  ?\-0x0024: r6 'presentationTimeUs' long\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_1;
Node_7 -> Node_5;
}

