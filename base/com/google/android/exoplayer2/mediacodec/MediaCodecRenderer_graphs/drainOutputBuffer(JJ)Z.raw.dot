digraph "CFG forcom.google.android.exoplayer2.mediacodec.MediaCodecRenderer.drainOutputBuffer(JJ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:27:0x0083 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecNeedsEosOutputExceptionWorkaround boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecReceivedEos boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|SYNTHETIC\lSplitter:B:6:0x000c\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x000c\l|0x000c: IGET  (r1 I:android.media.MediaCodec) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codec android.media.MediaCodec A[Catch:\{ IllegalStateException \-\> 0x0032 \}, TRY_ENTER]\l0x000e: IGET  (r2 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo A[Catch:\{ IllegalStateException \-\> 0x0032 \}]\l0x0010: INVOKE  (r4 I:long) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.getDequeueOutputBufferTimeoutUs():long type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0032 \}]\l0x0014: INVOKE  (r1 I:int) = \l  (r1 I:android.media.MediaCodec)\l  (r2 I:android.media.MediaCodec$BufferInfo)\l  (r4 I:long)\l android.media.MediaCodec.dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long):int type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0032 \}]\l0x0018: IPUT  \l  (r1 I:int)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int A[Catch:\{ IllegalStateException \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IGET  (r1 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:36:0x00b7 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipAdaptationWorkaroundOutputBuffer boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x004e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: IPUT  \l  (r1 I:boolean)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipAdaptationWorkaroundOutputBuffer boolean \l0x0025: IGET  (r1 I:android.media.MediaCodec) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codec android.media.MediaCodec \l0x0027: IGET  (r2 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x0029: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002a: INVOKE  (r1 I:android.media.MediaCodec), (r2 I:int), (r3 I:boolean) android.media.MediaCodec.releaseOutputBuffer(int, boolean):void type: VIRTUAL \l0x002d: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x002e: IPUT  \l  (r1 I:int)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x0030: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|ExcHandler: IllegalStateException null\lSplitter:B:6:0x000c\l|0x0032: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processEndOfStream():void type: DIRECT \l0x0036: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputStreamEnded boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003d \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.releaseCodec():void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IGET  (r1 I:android.media.MediaCodec) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codec android.media.MediaCodec \l0x0041: IGET  (r2 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x0043: INVOKE  (r4 I:long) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.getDequeueOutputBufferTimeoutUs():long type: VIRTUAL \l0x0047: INVOKE  (r1 I:int) = \l  (r1 I:android.media.MediaCodec)\l  (r2 I:android.media.MediaCodec$BufferInfo)\l  (r4 I:long)\l android.media.MediaCodec.dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long):int type: VIRTUAL \l0x004b: IPUT  \l  (r1 I:int)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l}"];
Node_20 [shape=record,label="{20\:\ 0x004e|0x004e: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x0050: IGET  (r1 I:int) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.flags int \l0x0052: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|0x0054: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x005e \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processEndOfStream():void type: DIRECT \l0x0059: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x005a: IPUT  \l  (r1 I:int)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x005c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|0x005e: IGET  (r1 I:java.nio.ByteBuffer[]) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBuffers java.nio.ByteBuffer[] \l0x0060: IGET  (r2 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x0062: AGET  (r13 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|0x0064: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('outputBuffer' java.nio.ByteBuffer)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0079 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|0x0066: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x0068: IGET  (r1 I:int) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.offset int \l0x006a: INVOKE  \l  (r13 I:java.nio.ByteBuffer A[D('outputBuffer' java.nio.ByteBuffer)])\l  (r1 I:int)\l java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x006d: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x006f: IGET  (r1 I:int) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.offset int \l0x0071: IGET  (r2 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x0073: IGET  (r2 I:int) = (r2 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.size int \l0x0075: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0076: INVOKE  \l  (r13 I:java.nio.ByteBuffer A[D('outputBuffer' java.nio.ByteBuffer)])\l  (r1 I:int)\l java.nio.ByteBuffer.limit(int):java.nio.Buffer type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0079|0x0079: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x007b: IGET  (r2 I:long) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.presentationTimeUs long \l0x007d: INVOKE  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l  (r2 I:long)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer(long):boolean type: DIRECT \l0x0081: IPUT  \l  (r1 I:boolean)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x0083|0x0083: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecNeedsEosOutputExceptionWorkaround boolean \l}"];
Node_28 [shape=record,label="{28\:\ 0x0085|0x0085: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00ee \l}"];
Node_29 [shape=record,label="{29\:\ 0x0087|0x0087: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecReceivedEos boolean \l}"];
Node_30 [shape=record,label="{30\:\ 0x0089|0x0089: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00ee \l}"];
Node_31 [shape=record,label="{31\:\ 0x008b|SYNTHETIC\lSplitter:B:31:0x008b\l}"];
Node_32 [shape=record,label="{32\:\ ?|Splitter:B:31:0x008b\l|0x008b: IGET  (r6 I:android.media.MediaCodec) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codec android.media.MediaCodec A[Catch:\{ IllegalStateException \-\> 0x00e0 \}, TRY_ENTER]\l0x008d: IGET  (r1 I:java.nio.ByteBuffer[]) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBuffers java.nio.ByteBuffer[] A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x008f: IGET  (r2 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x0091: AGET  (r7 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x0093: IGET  (r8 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x0095: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x0097: IGET  (r9 I:int) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.flags int A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x0099: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x009b: IGET  (r10 I:long) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.presentationTimeUs long A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x009d: IGET  (r12 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer boolean A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x009f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x00a0: MOVE  (r2 I:?[long, double]) = (r16 I:?[long, double] A[D('positionUs' long)]) A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x00a2: MOVE  (r4 I:?[long, double]) = (r18 I:?[long, double] A[D('elapsedRealtimeUs' long)]) A[Catch:\{ IllegalStateException \-\> 0x00e0 \}]\l0x00a4: INVOKE  (r14 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:android.media.MediaCodec)\l  (r7 I:java.nio.ByteBuffer)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:long)\l  (r12 I:boolean)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processOutputBuffer(long, long, android.media.MediaCodec, java.nio.ByteBuffer, int, int, long, boolean):boolean type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x00e0 \}, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x00a8|0x00a8: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('processedOutputBuffer' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x010c \l}"];
Node_35 [shape=record,label="{35\:\ 0x00aa|0x00aa: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x00ac: IGET  (r2 I:long) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.presentationTimeUs long \l0x00ae: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l  (r2 I:long)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.onProcessedOutputBuffer(long):void type: VIRTUAL \l0x00b1: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00b2: IPUT  \l  (r1 I:int)\l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x00b4: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b7|0x00b7: IGET  (r1 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x00b9: CONST  (r2 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ba|0x00ba: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00c2 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00bc|0x00bc: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processOutputFormat():void type: DIRECT \l0x00bf: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c2|0x00c2: IGET  (r1 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x00c4: CONST  (r2 I:?[int, float, short, byte, char]) = (\-3 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c5|0x00c5: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00cd \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c7|0x00c7: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processOutputBuffersChanged():void type: DIRECT \l0x00ca: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00cd|0x00cd: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecNeedsEosPropagationWorkaround boolean \l}"];
Node_43 [shape=record,label="{43\:\ 0x00cf|0x00cf: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00dd \l}"];
Node_44 [shape=record,label="{44\:\ 0x00d1|0x00d1: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.inputStreamEnded boolean \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d3|0x00d3: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00da \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d5|0x00d5: IGET  (r1 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codecReinitializationState int \l0x00d7: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d8|0x00d8: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00dd \l}"];
Node_48 [shape=record,label="{48\:\ 0x00da|0x00da: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processEndOfStream():void type: DIRECT \l}"];
Node_49 [shape=record,label="{49\:\ 0x00dd|0x00dd: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x00e0|ExcHandler: IllegalStateException null\lSplitter:B:31:0x008b\l|0x00e0: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_51 [shape=record,label="{51\:\ 0x00e1|0x00e1: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processEndOfStream():void type: DIRECT \l0x00e4: IGET  (r1 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputStreamEnded boolean \l}"];
Node_52 [shape=record,label="{52\:\ 0x00e6|0x00e6: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00eb \l}"];
Node_53 [shape=record,label="{53\:\ 0x00e8|0x00e8: INVOKE  \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.releaseCodec():void type: VIRTUAL \l}"];
Node_54 [shape=record,label="{54\:\ 0x00eb|0x00eb: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_55 [shape=record,label="{55\:\ 0x00ee|0x00ee: IGET  (r6 I:android.media.MediaCodec) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.codec android.media.MediaCodec \l0x00f0: IGET  (r1 I:java.nio.ByteBuffer[]) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBuffers java.nio.ByteBuffer[] \l0x00f2: IGET  (r2 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x00f4: AGET  (r7 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x00f6: IGET  (r8 I:int) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputIndex int \l0x00f8: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x00fa: IGET  (r9 I:int) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.flags int \l0x00fc: IGET  (r1 I:android.media.MediaCodec$BufferInfo) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.outputBufferInfo android.media.MediaCodec$BufferInfo \l0x00fe: IGET  (r10 I:long) = (r1 I:android.media.MediaCodec$BufferInfo) android.media.MediaCodec.BufferInfo.presentationTimeUs long \l0x0100: IGET  (r12 I:boolean) = \l  (r15 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.shouldSkipOutputBuffer boolean \l0x0102: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x0103: MOVE  (r2 I:?[long, double]) = (r16 I:?[long, double] A[D('positionUs' long)]) \l0x0105: MOVE  (r4 I:?[long, double]) = (r18 I:?[long, double] A[D('elapsedRealtimeUs' long)]) \l0x0107: INVOKE  (r14 I:boolean) = \l  (r1 I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer)\l  (r2 I:long)\l  (r4 I:long)\l  (r6 I:android.media.MediaCodec)\l  (r7 I:java.nio.ByteBuffer)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:long)\l  (r12 I:boolean)\l com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.processOutputBuffer(long, long, android.media.MediaCodec, java.nio.ByteBuffer, int, int, long, boolean):boolean type: VIRTUAL \l}"];
Node_56 [shape=record,label="{56\:\ 0x010c|0x010c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.drainOutputBuffer((r15 'this' I:com.google.android.exoplayer2.mediacodec.MediaCodecRenderer A[IMMUTABLE_TYPE, THIS]), (r16 I:long A[D('positionUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:long A[D('elapsedRealtimeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0033\-0x003f: r0 'e' java.lang.IllegalStateException\l  0x0064\-0x0083: r13 'outputBuffer' java.nio.ByteBuffer\l  0x00a8\-0x00b7: r14 'processedOutputBuffer' boolean\l  0x00e1\-0x00ee: r0 'e' java.lang.IllegalStateException\l  0x010b\-0x010e: r14 'processedOutputBuffer' boolean\l  ?\-0x010e: r16 'positionUs' long\l  ?\-0x010e: r18 'elapsedRealtimeUs' long\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.ExoPlaybackException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_27;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_36;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_13;
Node_19 -> Node_8;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_13;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_55;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_55;
Node_31 -> Node_32;
Node_31 -> Node_50;
Node_32 -> Node_50;
Node_32 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_56;
Node_35 -> Node_13;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_13;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_13;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_13;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_54 -> Node_13;
Node_55 -> Node_34;
Node_56 -> Node_13;
}

