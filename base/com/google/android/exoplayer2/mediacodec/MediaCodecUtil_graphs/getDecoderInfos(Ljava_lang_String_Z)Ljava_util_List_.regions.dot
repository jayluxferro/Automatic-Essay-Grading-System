digraph "CFG forcom.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfos(Ljava\/lang\/String;Z)Ljava\/util\/List;" {
subgraph cluster_Region_35184189 {
label = "R(3:0|4|7) | DECL_VAR: com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat mediaCodecList, java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> decoderInfos\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_632813380 {
label = "Synchronized:R(2:1|(2:3|(1:5)(4:(1:11)(1:24)|12|(2:20|(1:22))|23)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004}"];
subgraph cluster_Region_1432479689 {
label = "R(2:3|(1:5)(4:(1:11)(1:24)|12|(2:20|(1:22))|23))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey com.google.android.exoplayer2.mediacodec.MediaCodecUtil.CodecKey r2 = new com.google.android.exoplayer2.mediacodec.MediaCodecUtil.CodecKey(r8, r9)     \/\/ Catch:\{  \}\ljava.util.List java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> r0 = decoderInfosCache.get(r2)\l}"];
subgraph cluster_IfRegion_355340132 {
label = "IF [B:4:0x0012] THEN: R(1:5) ELSE: R(4:(1:11)(1:24)|12|(2:20|(1:22))|23)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r0 != null) goto L_0x0014\l}"];
subgraph cluster_Region_1336667559 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|r1 = r0\l}"];
}
subgraph cluster_Region_699923248 {
label = "R(4:(1:11)(1:24)|12|(2:20|(1:22))|23)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_49865179 {
label = "IF [B:10:0x0019] THEN: R(1:11) ELSE: R(1:24)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0019|if (com.google.android.exoplayer2.util.Util.SDK_INT \>= 21) goto L_0x001b\l}"];
subgraph cluster_Region_1471986113 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001b|com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21 r3 = new com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV21(r9)     \/\/ Catch:\{  \}\l}"];
}
subgraph cluster_Region_1498673433 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x007c|com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16 r3 = new com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV16()     \/\/ Catch:\{  \}\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0020|PHI: r3 \l  PHI: (r3v1 'mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat) = (r3v0 'mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat), (r3v3 'mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat) binds: [B:24:0x007c, B:11:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|java.util.List java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> r0 = getDecoderInfosInternal(r2, r3)\l}"];
subgraph cluster_IfRegion_839698813 {
label = "IF [B:13:0x0024, B:15:0x002a, B:17:0x002e, B:19:0x0034] THEN: R(2:20|(1:22)) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0024|ADDED_TO_REGION\l|if (r9 == true) goto L_0x0026\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|ADDED_TO_REGION\l|if (r0.isEmpty() == true) goto L_0x002c\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|ADDED_TO_REGION\l|if (21 \<= com.google.android.exoplayer2.util.Util.SDK_INT) goto L_0x0030\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|ADDED_TO_REGION\l|if (com.google.android.exoplayer2.util.Util.SDK_INT \<= 23) goto L_0x0036\l}"];
subgraph cluster_Region_938947264 {
label = "R(2:20|(1:22))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0036|java.util.List r0 = getDecoderInfosInternal(r2, new com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV16())\l}"];
subgraph cluster_IfRegion_584764494 {
label = "IF [B:21:0x0044] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0044|if (r0.isEmpty() == false) goto L_0x0046\l}"];
subgraph cluster_Region_1682389557 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0046|android.util.Log.w(TAG, \"MediaCodecList API didn't list secure decoder for: \" + r8 + \". Assuming: \" + r0.get(0).name)\l}"];
}
}
}
}
Node_23 [shape=record,label="{23\:\ 0x0071|PHI: r0 \l  PHI: (r0v3 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>) = (r0v2 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r0v2 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r0v2 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r0v2 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r0v5 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r0v5 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>) binds: [B:13:0x0024, B:15:0x002a, B:17:0x002e, B:19:0x0034, B:21:0x0044, B:22:0x0046] A[DONT_GENERATE, DONT_INLINE]\l|java.util.List java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> r0 = java.util.Collections.unmodifiableList(r0)\ldecoderInfosCache.put(r2, r0)\lr1 = r0\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r1\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005|SYNTHETIC\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0015|DONT_GENERATE\lPHI: r1 \l  PHI: (r1v1 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>) = (r1v0 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>), (r1v2 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>) binds: [B:23:0x0071, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(\l\/\/ error: 0x0015: MONITOR_EXIT  \l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017|SYNTHETIC\lSplitter:B:8:0x0017\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|Splitter:B:8:0x0017\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0026}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x002c}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0030}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0083|REMOVE\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0084|REMOVE\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0085|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public static synchronized java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfos((r8v0 'mimeType' java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'secure' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Z), Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_25;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_10 -> Node_11;
Node_10 -> Node_24[style=dashed];
Node_11 -> Node_12;
Node_24 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_23[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_23[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_23[style=dashed];
Node_19 -> Node_20;
Node_19 -> Node_23[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_25;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_25;
Node_9 -> Node_10;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_25 -> Node_26;
Node_26 -> Node_27;
}

