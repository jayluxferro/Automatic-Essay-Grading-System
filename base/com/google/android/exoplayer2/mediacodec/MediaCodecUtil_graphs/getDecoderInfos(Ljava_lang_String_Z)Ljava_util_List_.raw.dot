digraph "CFG forcom.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfos(Ljava\/lang\/String;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[int, float, short, byte, char]) = (21 ?[int, float, short, byte, char]) \l0x0002: CONST_CLASS  (r5 I:java.lang.Class\<com.google.android.exoplayer2.mediacodec.MediaCodecUtil\>) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil.class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: NEW_INSTANCE  (r2 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey A[Catch:\{ all \-\> 0x0083 \}, TRY_ENTER]\l0x0007: INVOKE  \l  (r2 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey)\l  (r8 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r9 I:boolean A[D('secure' boolean)])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.CodecKey.\<init\>(java.lang.String, boolean):void type: DIRECT A[Catch:\{ all \-\> 0x0083 \}]\l0x000a: SGET  (r4 I:java.util.HashMap\<com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey, java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\>) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil.decoderInfosCache java.util.HashMap A[Catch:\{ all \-\> 0x0083 \}]\l0x000c: INVOKE  (r0 I:java.lang.Object) = \l  (r4 I:java.util.HashMap)\l  (r2 I:java.lang.Object A[D('key' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey)])\l java.util.HashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x0010: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0083 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY] A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN  \l  (r1 I:java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|SYNTHETIC\lSplitter:B:8:0x0017\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0017\l|0x0017: SGET  (r4 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int A[Catch:\{ all \-\> 0x0083 \}, TRY_ENTER]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r4 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:24:0x007c A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21 A[Catch:\{ all \-\> 0x0083 \}]\l0x001d: INVOKE  \l  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV21)\l  (r9 I:boolean A[D('secure' boolean)])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV21.\<init\>(boolean):void type: DIRECT A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: INVOKE  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)]) = \l  (r2 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey A[D('key' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey)])\l  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat A[D('mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey, com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat):java.util.List type: STATIC A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('secure' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0071 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: INVOKE  (r4 I:boolean) = \l  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l java.util.List.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0071 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: SGET  (r4 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: IF  (r6 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:23:0x0071 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|0x0030: SGET  (r4 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int A[Catch:\{ all \-\> 0x0083 \}]\l0x0032: CONST  (r6 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: IF  (r4 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:23:0x0071 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0036|0x0036: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16 A[D('mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)]) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16 A[Catch:\{ all \-\> 0x0083 \}]\l0x0038: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0083 \}]\l0x0039: INVOKE  \l  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16)\l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$1)\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV16.\<init\>(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$1):void type: DIRECT A[Catch:\{ all \-\> 0x0083 \}]\l0x003c: INVOKE  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)]) = \l  (r2 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey A[D('key' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey)])\l  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat A[D('mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfosInternal(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey, com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat):java.util.List type: STATIC A[Catch:\{ all \-\> 0x0083 \}]\l0x0040: INVOKE  (r4 I:boolean) = \l  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l java.util.List.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0071 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: CONST_STR  (r6 I:java.lang.String) =  \"MediaCodecUtil\" A[Catch:\{ all \-\> 0x0083 \}]\l0x0048: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0083 \}]\l0x004a: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0083 \}]\l0x004d: CONST_STR  (r7 I:java.lang.String) =  \"MediaCodecList API didn't list secure decoder for: \" A[Catch:\{ all \-\> 0x0083 \}]\l0x004f: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x0053: INVOKE  (r4 I:java.lang.StringBuilder) = \l  (r4 I:java.lang.StringBuilder)\l  (r8 I:java.lang.String A[D('mimeType' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x0057: CONST_STR  (r7 I:java.lang.String) =  \". Assuming: \" A[Catch:\{ all \-\> 0x0083 \}]\l0x0059: INVOKE  (r7 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x005d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0083 \}]\l0x005e: INVOKE  (r4 I:java.lang.Object) = \l  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l  (r4 I:int)\l java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0083 \}]\l0x0062: CHECK_CAST  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo) = (com.google.android.exoplayer2.mediacodec.MediaCodecInfo) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0083 \}]\l0x0064: IGET  (r4 I:java.lang.String) = \l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecInfo)\l com.google.android.exoplayer2.mediacodec.MediaCodecInfo.name java.lang.String A[Catch:\{ all \-\> 0x0083 \}]\l0x0066: INVOKE  (r4 I:java.lang.StringBuilder) = (r7 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x006a: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x006e: INVOKE  (r6 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0071|0x0071: INVOKE  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)]) = \l  (r0 I:java.util.List A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l java.util.Collections.unmodifiableList(java.util.List):java.util.List type: STATIC A[Catch:\{ all \-\> 0x0083 \}]\l0x0075: SGET  (r4 I:java.util.HashMap\<com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey, java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\>) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil.decoderInfosCache java.util.HashMap A[Catch:\{ all \-\> 0x0083 \}]\l0x0077: INVOKE  \l  (r4 I:java.util.HashMap)\l  (r2 I:java.lang.Object A[D('key' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey)])\l  (r0 I:java.lang.Object A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0083 \}]\l0x007a: MOVE  (r1 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY] A[D('decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>)])\l A[Catch:\{ all \-\> 0x0083 \}]\l0x007b: GOTO  \-\> 0x0015 A[Catch:\{ all \-\> 0x0083 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x007c|0x007c: NEW_INSTANCE  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16 A[D('mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat)]) =  com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16 A[Catch:\{ all \-\> 0x0083 \}]\l0x007e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0083 \}]\l0x007f: INVOKE  \l  (r3 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompatV16)\l  (r4 I:com.google.android.exoplayer2.mediacodec.MediaCodecUtil$1)\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.MediaCodecListCompatV16.\<init\>(com.google.android.exoplayer2.mediacodec.MediaCodecUtil$1):void type: DIRECT A[Catch:\{ all \-\> 0x0083 \}, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0083|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x0083: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x0084|0x0084: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0085|0x0085: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static synchronized java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\> com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getDecoderInfos((r8 I:java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('secure' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x0015: r0 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\l  0x0015\-0x0017: r1 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\l  0x0020\-0x0038: r3 'mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat\l  0x0017\-0x007b: r0 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\l  0x007b\-0x007c: r1 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\l  0x003c\-0x007c: r3 'mediaCodecList' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$MediaCodecListCompat\l  0x007c\-0x0083: r0 'decoderInfos' java.util.List\<com.google.android.exoplayer2.mediacodec.MediaCodecInfo\>\l  0x000a\-0x0083: r2 'key' com.google.android.exoplayer2.mediacodec.MediaCodecUtil$CodecKey\l  ?\-0x0085: r8 'mimeType' java.lang.String\l  ?\-0x0085: r9 'secure' boolean\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.mediacodec.MediaCodecUtil$DecoderQueryException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Z), Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/mediacodec\/MediaCodecInfo;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_26;
Node_3 -> Node_4;
Node_3 -> Node_26;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_24;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_6;
Node_24 -> Node_12;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

