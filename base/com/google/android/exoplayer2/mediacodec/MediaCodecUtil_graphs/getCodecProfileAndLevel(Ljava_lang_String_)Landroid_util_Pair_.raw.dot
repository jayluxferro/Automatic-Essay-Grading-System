digraph "CFG forcom.google.android.exoplayer2.mediacodec.MediaCodecUtil.getCodecProfileAndLevel(Ljava\/lang\/String;)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('codec' java.lang.String)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  \l  (r1 I:android.util.Pair\<java.lang.Integer, java.lang.Integer\>)\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST_STR  (r3 I:java.lang.String) =  \".\" \l0x0007: INVOKE  (r0 I:java.lang.String[]) = \l  (r6 I:java.lang.String A[D('codec' java.lang.String)])\l  (r3 I:java.lang.String)\l java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x000b: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY][] A[D('parts' java.lang.String[])])\l  (r2 I:?[int, short, byte, char])\l \l0x000d: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000e: INVOKE  (r5 I:int) = (r4 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[3006243, 3006244, 3199032, 3214780] t:[0x0032, 0x003c, 0x001f, 0x0028] \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x001a, 0x001a, 0x0046, 0x0046] \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  (r1 I:android.util.Pair) = \l  (r6 I:java.lang.String A[D('codec' java.lang.String)])\l  (r0 I:java.lang.String[] A[D('parts' java.lang.String[])])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getHevcProfileAndLevel(java.lang.String, java.lang.String[]):android.util.Pair type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: CONST_STR  (r5 I:java.lang.String) =  \"hev1\" \l0x0021: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: CONST_STR  (r2 I:java.lang.String) =  \"hvc1\" \l0x002a: INVOKE  (r2 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: CONST_STR  (r2 I:java.lang.String) =  \"avc1\" \l0x0034: INVOKE  (r2 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: CONST_STR  (r2 I:java.lang.String) =  \"avc2\" \l0x003e: INVOKE  (r2 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|0x0046: INVOKE  (r1 I:android.util.Pair) = \l  (r6 I:java.lang.String A[D('codec' java.lang.String)])\l  (r0 I:java.lang.String[] A[D('parts' java.lang.String[])])\l com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getAvcProfileAndLevel(java.lang.String, java.lang.String[]):android.util.Pair type: STATIC \l}"];
MethodNode[shape=record,label="{public static android.util.Pair\<java.lang.Integer, java.lang.Integer\> com.google.android.exoplayer2.mediacodec.MediaCodecUtil.getCodecProfileAndLevel((r6 I:java.lang.String A[D('codec' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000b\-0x0069: r0 'parts' java.lang.String[]\l  ?\-0x0069: r6 'codec' java.lang.String\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Landroid\/util\/Pair, \<, Ljava\/lang\/Integer;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_4 -> Node_12;
Node_4 -> Node_15;
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_21;
Node_6 -> Node_2;
Node_8 -> Node_2;
Node_9 -> Node_10;
Node_10 -> Node_5;
Node_10 -> Node_6[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_5;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_6;
Node_15 -> Node_16;
Node_16 -> Node_5;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_6;
Node_18 -> Node_19;
Node_19 -> Node_5;
Node_19 -> Node_20[style=dashed];
Node_20 -> Node_6;
Node_21 -> Node_2;
}

