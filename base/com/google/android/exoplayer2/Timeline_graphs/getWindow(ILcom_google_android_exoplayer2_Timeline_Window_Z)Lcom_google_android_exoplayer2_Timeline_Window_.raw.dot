digraph "CFG forcom.google.android.exoplayer2.Timeline.getWindow(ILcom\/google\/android\/exoplayer2\/Timeline$Window;Z)Lcom\/google\/android\/exoplayer2\/Timeline$Window;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('windowIndex' int)])\l \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = \l  (r8 I:?[OBJECT, ARRAY] A[D('window' com.google.android.exoplayer2.Timeline$Window)])\l \l0x0005: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('setIds' boolean)])\l \l0x0006: INVOKE  (r0 I:com.google.android.exoplayer2.Timeline$Window) = \l  (r0 I:com.google.android.exoplayer2.Timeline)\l  (r1 I:int)\l  (r2 I:com.google.android.exoplayer2.Timeline$Window)\l  (r3 I:boolean)\l  (r4 I:long)\l com.google.android.exoplayer2.Timeline.getWindow(int, com.google.android.exoplayer2.Timeline$Window, boolean, long):com.google.android.exoplayer2.Timeline$Window type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: RETURN  (r0 I:com.google.android.exoplayer2.Timeline$Window) \l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.Timeline$Window com.google.android.exoplayer2.Timeline.getWindow((r6 'this' I:com.google.android.exoplayer2.Timeline A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('windowIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.google.android.exoplayer2.Timeline$Window A[D('window' com.google.android.exoplayer2.Timeline$Window), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('setIds' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000a: r7 'windowIndex' int\l  ?\-0x000a: r8 'window' com.google.android.exoplayer2.Timeline$Window\l  ?\-0x000a: r9 'setIds' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

