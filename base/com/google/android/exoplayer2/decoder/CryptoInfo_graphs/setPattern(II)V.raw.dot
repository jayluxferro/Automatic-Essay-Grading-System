digraph "CFG forcom.google.android.exoplayer2.decoder.CryptoInfo.setPattern(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r3 I:int A[D('patternBlocksToEncrypt' int)])\l  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo)\l com.google.android.exoplayer2.decoder.CryptoInfo.patternBlocksToEncrypt int \l0x0002: IPUT  \l  (r4 I:int A[D('patternBlocksToSkip' int)])\l  (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo)\l com.google.android.exoplayer2.decoder.CryptoInfo.patternBlocksToSkip int \l0x0004: SGET  (r0 I:int) =  com.google.android.exoplayer2.util.Util.SDK_INT int \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (24 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24) = (r2 I:com.google.android.exoplayer2.decoder.CryptoInfo) com.google.android.exoplayer2.decoder.CryptoInfo.patternHolder com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24 \l0x000c: INVOKE  \l  (r0 I:com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24)\l  (r3 I:int A[D('patternBlocksToEncrypt' int)])\l  (r4 I:int A[D('patternBlocksToSkip' int)])\l com.google.android.exoplayer2.decoder.CryptoInfo.PatternHolderV24.access$100(com.google.android.exoplayer2.decoder.CryptoInfo$PatternHolderV24, int, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.decoder.CryptoInfo.setPattern((r2 'this' I:com.google.android.exoplayer2.decoder.CryptoInfo A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('patternBlocksToEncrypt' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('patternBlocksToSkip' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x000f: r3 'patternBlocksToEncrypt' int\l  ?\-0x000f: r4 'patternBlocksToSkip' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

