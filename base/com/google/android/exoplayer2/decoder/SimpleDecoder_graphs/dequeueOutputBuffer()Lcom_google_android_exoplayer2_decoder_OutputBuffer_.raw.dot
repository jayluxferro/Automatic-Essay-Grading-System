digraph "CFG forcom.google.android.exoplayer2.decoder.SimpleDecoder.dequeueOutputBuffer()Lcom\/google\/android\/exoplayer2\/decoder\/OutputBuffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:java.lang.Object) = \l  (r2 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.lock java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: INVOKE  \l  (r2 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.maybeThrowException():void type: DIRECT A[Catch:\{ all \-\> 0x001b \}, TRY_ENTER]\l0x0006: IGET  (r0 I:java.util.LinkedList\<O\>) = \l  (r2 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.queuedOutputBuffers java.util.LinkedList A[Catch:\{ all \-\> 0x001b \}]\l0x0008: INVOKE  (r0 I:boolean) = (r0 I:java.util.LinkedList) java.util.LinkedList.isEmpty():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: RETURN  (r0 I:O) A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IGET  (r0 I:java.util.LinkedList\<O\>) = \l  (r2 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.queuedOutputBuffers java.util.LinkedList A[Catch:\{ all \-\> 0x001b \}]\l0x0013: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.LinkedList) java.util.LinkedList.removeFirst():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x001b \}]\l0x0017: CHECK_CAST  (r0 I:com.google.android.exoplayer2.decoder.OutputBuffer) = (com.google.android.exoplayer2.decoder.OutputBuffer) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: GOTO  \-\> 0x0010 A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x001b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final O com.google.android.exoplayer2.decoder.SimpleDecoder.dequeueOutputBuffer((r2 'this' I:com.google.android.exoplayer2.decoder.SimpleDecoder A[IMMUTABLE_TYPE, THIS]))  | Debug Info:\l  0x0000\-0x001d: r2 'this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TO;^TE;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

