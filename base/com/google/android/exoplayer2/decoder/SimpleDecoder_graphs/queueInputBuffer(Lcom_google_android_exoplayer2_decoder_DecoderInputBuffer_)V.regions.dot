digraph "CFG forcom.google.android.exoplayer2.decoder.SimpleDecoder.queueInputBuffer(Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;)V" {
subgraph cluster_Region_1183662662 {
label = "R(1:2)";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_1417749014 {
label = "Synchronized:R(2:1|(2:3|6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_951847418 {
label = "R(2:3|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|maybeThrowException()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r0 \l  PHI: (r0v3 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkArgument(r3 == r2.dequeuedInputBuffer)\lr2.queuedInputBuffers.addLast(r3)\lmaybeNotifyDecodeLoop()\lr2.dequeuedInputBuffer = null\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0019|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x0019: MONITOR_EXIT  \l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001b}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001d|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001e|REMOVE\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001f|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public final void com.google.android.exoplayer2.decoder.SimpleDecoder.queueInputBuffer((r2v0 'this' com.google.android.exoplayer2.decoder.SimpleDecoder A[IMMUTABLE_TYPE, THIS]), (r3v0 'inputBuffer' I A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TI;)V^TE;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

