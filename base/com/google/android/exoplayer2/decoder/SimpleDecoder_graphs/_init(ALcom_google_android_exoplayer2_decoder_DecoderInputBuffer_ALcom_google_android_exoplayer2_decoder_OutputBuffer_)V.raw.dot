digraph "CFG forcom.google.android.exoplayer2.decoder.SimpleDecoder.\<init\>([Lcom\/google\/android\/exoplayer2\/decoder\/DecoderInputBuffer;[Lcom\/google\/android\/exoplayer2\/decoder\/OutputBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:java.lang.Object A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r1 I:java.lang.Object) =  java.lang.Object \l0x0005: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r1 I:java.lang.Object)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.lock java.lang.Object \l0x000a: NEW_INSTANCE  (r1 I:java.util.LinkedList) =  java.util.LinkedList \l0x000c: INVOKE  (r1 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x000f: IPUT  \l  (r1 I:java.util.LinkedList\<I\>)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.queuedInputBuffers java.util.LinkedList \l0x0011: NEW_INSTANCE  (r1 I:java.util.LinkedList) =  java.util.LinkedList \l0x0013: INVOKE  (r1 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x0016: IPUT  \l  (r1 I:java.util.LinkedList\<O\>)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.queuedOutputBuffers java.util.LinkedList \l0x0018: IPUT  \l  (r4 I:I[] A[D('inputBuffers' I[])])\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBuffers com.google.android.exoplayer2.decoder.DecoderInputBuffer[] \l0x001a: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[] A[D('inputBuffers' I[])]) \l0x001b: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBufferCount int \l0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBufferCount int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: IGET  (r1 I:I[]) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBuffers com.google.android.exoplayer2.decoder.DecoderInputBuffer[] \l0x0024: INVOKE  (r2 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.createInputBuffer():com.google.android.exoplayer2.decoder.DecoderInputBuffer type: VIRTUAL \l0x0028: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x002a: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IPUT  \l  (r5 I:O[] A[D('outputBuffers' O[])])\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableOutputBuffers com.google.android.exoplayer2.decoder.OutputBuffer[] \l0x002f: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[] A[D('outputBuffers' O[])]) \l0x0030: IPUT  \l  (r1 I:int)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableOutputBufferCount int \l0x0032: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: IGET  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableOutputBufferCount int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: IF  (r0 I:?[int, byte, short, char] A[D('i' int)]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IGET  (r1 I:O[]) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableOutputBuffers com.google.android.exoplayer2.decoder.OutputBuffer[] \l0x0039: INVOKE  (r2 I:com.google.android.exoplayer2.decoder.OutputBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.createOutputBuffer():com.google.android.exoplayer2.decoder.OutputBuffer type: VIRTUAL \l0x003d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x003f: ARITH  (r0 I:int A[D('i' int)]) = (r0 I:int A[D('i' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.decoder.SimpleDecoder$1) =  com.google.android.exoplayer2.decoder.SimpleDecoder$1 \l0x0044: INVOKE  \l  (r1 I:com.google.android.exoplayer2.decoder.SimpleDecoder$1)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.1.\<init\>(com.google.android.exoplayer2.decoder.SimpleDecoder):void type: DIRECT \l0x0047: IPUT  \l  (r1 I:java.lang.Thread)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.decodeThread java.lang.Thread \l0x0049: IGET  (r1 I:java.lang.Thread) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.decodeThread java.lang.Thread \l0x004b: INVOKE  (r1 I:java.lang.Thread) java.lang.Thread.start():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x004e|0x004e: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.google.android.exoplayer2.decoder.SimpleDecoder.\<init\>((r3 'this' I:com.google.android.exoplayer2.decoder.SimpleDecoder A[IMMUTABLE_TYPE, THIS]), (r4 I:I[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:O[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001e\-0x004e: r0 'i' int\l  0x0000\-0x004e: r3 'this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>\l  0x0000\-0x004e: r4 'inputBuffers' I[]\l  0x0000\-0x004e: r5 'outputBuffers' O[]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([TI;[TO;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
}

