digraph "CFG forcom.google.android.exoplayer2.decoder.SimpleDecoder.setInitialInputBufferSize(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBufferCount int \l0x0003: IGET  (r3 I:I[]) = \l  (r4 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBuffers com.google.android.exoplayer2.decoder.DecoderInputBuffer[] \l0x0005: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r1 I:boolean) com.google.android.exoplayer2.util.Assertions.checkState(boolean):void type: STATIC \l0x000c: IGET  (r1 I:I[]) = \l  (r4 I:com.google.android.exoplayer2.decoder.SimpleDecoder A[D('this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>)])\l com.google.android.exoplayer2.decoder.SimpleDecoder.availableInputBuffers com.google.android.exoplayer2.decoder.DecoderInputBuffer[] \l0x000e: ARRAY_LENGTH  (r3 I:int) = (r1 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: AGET  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0013: INVOKE  \l  (r0 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[D('inputBuffer' I)])\l  (r5 I:int A[D('size' int)])\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.ensureSpaceForWrite(int):void type: VIRTUAL \l0x0016: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{protected final void com.google.android.exoplayer2.decoder.SimpleDecoder.setInitialInputBufferSize((r4 'this' I:com.google.android.exoplayer2.decoder.SimpleDecoder A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0013\-0x0019: r0 'inputBuffer' I\l  0x0000\-0x001b: r4 'this' com.google.android.exoplayer2.decoder.SimpleDecoder\<I, O, E\>\l  ?\-0x001b: r5 'size' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_4;
Node_6 -> Node_3;
}

