digraph "CFG forcom.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer(I)Ljava\/nio\/ByteBuffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.bufferReplacementMode int \l0x0002: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r1 I:java.nio.ByteBuffer) = (r5 I:int A[D('requiredCapacity' int)]) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r1 I:java.nio.ByteBuffer) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.bufferReplacementMode int \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r1 I:java.nio.ByteBuffer) = (r5 I:int A[D('requiredCapacity' int)]) java.nio.ByteBuffer.allocateDirect(int):java.nio.ByteBuffer type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r1 I:java.nio.ByteBuffer) = \l  (r4 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0042 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001b: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001d: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"Buffer too small (\" \l0x0022: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0026: INVOKE  (r2 I:java.lang.StringBuilder) = \l  (r2 I:java.lang.StringBuilder)\l  (r0 I:int A[D('currentCapacity' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002a: CONST_STR  (r3 I:java.lang.String) =  \" \< \" \l0x002c: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r2 I:java.lang.StringBuilder) = \l  (r2 I:java.lang.StringBuilder)\l  (r5 I:int A[D('requiredCapacity' int)])\l java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0034: CONST_STR  (r3 I:java.lang.String) =  \")\" \l0x0036: INVOKE  (r2 I:java.lang.StringBuilder) = (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003e: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: IGET  (r1 I:java.nio.ByteBuffer) = \l  (r4 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x0044: INVOKE  (r0 I:int) = (r1 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private java.nio.ByteBuffer com.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer((r4 'this' I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('requiredCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0019\-0x0042: r0 'currentCapacity' int\l  ?\-0x0048: r5 'requiredCapacity' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_10;
}

