digraph "CFG forcom.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer(I)Ljava\/nio\/ByteBuffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.bufferReplacementMode != 1) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x000a}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (r4.bufferReplacementMode != 2) goto L_0x0014\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r4.data != null) goto L_0x0042\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|r0 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|PHI: r0 \l  PHI: (r0v1 'currentCapacity' int) = (r0v0 'currentCapacity' int), (r0v2 'currentCapacity' int) binds: [B:11:0x0042, B:8:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|throw new java.lang.IllegalStateException(new java.lang.StringBuilder().append(\"Buffer too small (\").append(r0).append(\" \< \").append(r5).append(\")\").toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|int r0 = r4.data.capacity()\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return java.nio.ByteBuffer.allocate(r5)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return java.nio.ByteBuffer.allocateDirect(r5)\l}"];
MethodNode[shape=record,label="{private java.nio.ByteBuffer com.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer((r4v0 'this' com.google.android.exoplayer2.decoder.DecoderInputBuffer A[IMMUTABLE_TYPE, THIS]), (r5v0 'requiredCapacity' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_9;
}

