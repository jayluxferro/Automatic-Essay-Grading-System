digraph "CFG forcom.google.android.exoplayer2.decoder.DecoderInputBuffer.ensureSpaceForWrite(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l  (r7 I:int A[D('length' int)])\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer(int):java.nio.ByteBuffer type: DIRECT \l0x0008: IPUT  \l  (r4 I:java.nio.ByteBuffer)\l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x000d: INVOKE  (r0 I:int) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l0x0011: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x0013: INVOKE  (r2 I:int) = (r4 I:java.nio.ByteBuffer) java.nio.ByteBuffer.position():int type: VIRTUAL \l0x0017: ARITH  (r3 I:int) = (r2 I:int A[D('position' int)]) + (r7 I:int A[D('length' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r0 I:?[int, byte, short, char] A[D('capacity' int)]) \>= (r3 I:?[int, byte, short, char] A[D('requiredCapacity' int)])  \-\> B:3:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: INVOKE  (r1 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l  (r3 I:int A[D('requiredCapacity' int)])\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer(int):java.nio.ByteBuffer type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r2 I:?[int, byte, short, char] A[D('position' int)]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x0023: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: INVOKE  (r4 I:java.nio.ByteBuffer), (r5 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0027: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x0029: INVOKE  (r4 I:java.nio.ByteBuffer), (r2 I:int A[D('position' int)]) java.nio.ByteBuffer.limit(int):java.nio.Buffer type: VIRTUAL \l0x002c: IGET  (r4 I:java.nio.ByteBuffer) = \l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l0x002e: INVOKE  \l  (r1 I:java.nio.ByteBuffer A[D('newData' java.nio.ByteBuffer)])\l  (r4 I:java.nio.ByteBuffer)\l java.nio.ByteBuffer.put(java.nio.ByteBuffer):java.nio.ByteBuffer type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IPUT  \l  (r1 I:java.nio.ByteBuffer A[D('newData' java.nio.ByteBuffer)])\l  (r6 I:com.google.android.exoplayer2.decoder.DecoderInputBuffer)\l com.google.android.exoplayer2.decoder.DecoderInputBuffer.data java.nio.ByteBuffer \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.decoder.DecoderInputBuffer.ensureSpaceForWrite((r6 'this' I:com.google.android.exoplayer2.decoder.DecoderInputBuffer A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0011\-0x0033: r0 'capacity' int\l  0x001f\-0x0033: r1 'newData' java.nio.ByteBuffer\l  0x0017\-0x0033: r2 'position' int\l  0x0019\-0x0033: r3 'requiredCapacity' int\l  ?\-0x0033: r7 'length' int\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalStateException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_3;
}

