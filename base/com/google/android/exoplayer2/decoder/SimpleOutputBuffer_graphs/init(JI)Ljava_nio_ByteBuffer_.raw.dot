digraph "CFG forcom.google.android.exoplayer2.decoder.SimpleOutputBuffer.init(JI)Ljava\/nio\/ByteBuffer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r4 I:long A[D('timeUs' long)])\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.timeUs long \l0x0002: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l0x0008: INVOKE  (r0 I:int) = (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.capacity():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char] A[D('size' int)])  \-\> B:5:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r0 I:java.nio.ByteBuffer) = (r6 I:int A[D('size' int)]) java.nio.ByteBuffer.allocateDirect(int):java.nio.ByteBuffer type: STATIC \l0x0012: INVOKE  (r1 I:java.nio.ByteOrder) =  java.nio.ByteOrder.nativeOrder():java.nio.ByteOrder type: STATIC \l0x0016: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:java.nio.ByteBuffer), (r1 I:java.nio.ByteOrder) java.nio.ByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL \l0x001a: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  (r0 I:java.nio.ByteBuffer), (r1 I:int) java.nio.ByteBuffer.position(int):java.nio.Buffer type: VIRTUAL \l0x0022: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l0x0024: INVOKE  (r0 I:java.nio.ByteBuffer), (r6 I:int A[D('size' int)]) java.nio.ByteBuffer.limit(int):java.nio.Buffer type: VIRTUAL \l0x0027: IGET  (r0 I:java.nio.ByteBuffer) = \l  (r3 I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer)\l com.google.android.exoplayer2.decoder.SimpleOutputBuffer.data java.nio.ByteBuffer \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: RETURN  (r0 I:java.nio.ByteBuffer) \l}"];
MethodNode[shape=record,label="{public java.nio.ByteBuffer com.google.android.exoplayer2.decoder.SimpleOutputBuffer.init((r3 'this' I:com.google.android.exoplayer2.decoder.SimpleOutputBuffer A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('timeUs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0029: r4 'timeUs' long\l  ?\-0x0029: r6 'size' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

