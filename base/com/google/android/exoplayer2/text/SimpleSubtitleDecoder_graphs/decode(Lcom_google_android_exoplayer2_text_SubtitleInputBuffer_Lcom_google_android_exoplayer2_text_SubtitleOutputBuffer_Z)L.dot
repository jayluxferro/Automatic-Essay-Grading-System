digraph "CFG forcom.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode(Lcom\/google\/android\/exoplayer2\/text\/SubtitleInputBuffer;Lcom\/google\/android\/exoplayer2\/text\/SubtitleOutputBuffer;Z)Lcom\/google\/android\/exoplayer2\/text\/SubtitleDecoderException;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ SubtitleDecoderException \-\> 0x001d \}\lSplitter:B:0:0x0000\l|java.nio.ByteBuffer r7 = r9.data     \/\/ Catch:\{ SubtitleDecoderException \-\> 0x001d \}\lcom.google.android.exoplayer2.text.Subtitle r3 = decode(r7.array(), r7.limit(), r11)     \/\/ Catch:\{ SubtitleDecoderException \-\> 0x001d \}\lr0 = r10     \/\/ Catch:\{ SubtitleDecoderException \-\> 0x001d \}\lr0.setContent(r9.timeUs, r3, r9.subsampleOffsetUs)     \/\/ Catch:\{ SubtitleDecoderException \-\> 0x001d \}\lr10.clearFlag(Integer.MIN_VALUE)     \/\/ Catch:\{ SubtitleDecoderException \-\> 0x001d \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|ExcHandler: SubtitleDecoderException (r6v0 'e' com.google.android.exoplayer2.text.SubtitleDecoderException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|com.google.android.exoplayer2.text.SubtitleDecoderException r6 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\l|return r6\l}"];
MethodNode[shape=record,label="{protected final com.google.android.exoplayer2.text.SubtitleDecoderException com.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode((r8v0 'this' com.google.android.exoplayer2.text.SimpleSubtitleDecoder A[IMMUTABLE_TYPE, THIS]), (r9v0 'inputBuffer' com.google.android.exoplayer2.text.SubtitleInputBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'outputBuffer' com.google.android.exoplayer2.text.SubtitleOutputBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'reset' boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
}

