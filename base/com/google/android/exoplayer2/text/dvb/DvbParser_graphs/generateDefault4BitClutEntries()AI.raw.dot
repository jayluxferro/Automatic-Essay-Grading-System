digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.generateDefault4BitClutEntries()[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0007: NEW_ARRAY  (r0 I:int[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0009: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r4 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[] A[D('entries' int[])]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:32:0x004d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:19:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: INVOKE  (r2 I:int) = (r3 I:int), (r7 I:int), (r6 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x0026: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|0x0031: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0047 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|0x0035: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0038|0x0038: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0049 \l}"];
Node_24 [shape=record,label="{24\:\ 0x003a|0x003a: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x003b|0x003b: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|0x003d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x004b \l}"];
Node_27 [shape=record,label="{27\:\ 0x003f|0x003f: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0040|0x0040: INVOKE  (r2 I:int) = (r3 I:int), (r7 I:int), (r6 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x0044: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0047|0x0047: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0049|0x0049: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x004b|0x004b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x004d|0x004d: RETURN  (r0 I:int[] A[D('entries' int[])]) \l}"];
MethodNode[shape=record,label="{private static int[] com.google.android.exoplayer2.text.dvb.DvbParser.generateDefault4BitClutEntries()  | Debug Info:\l  0x0009\-0x004d: r0 'entries' int[]\l  0x000c\-0x004d: r1 'i' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_32;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_8;
Node_17 -> Node_11;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_15;
Node_29 -> Node_22;
Node_30 -> Node_25;
Node_31 -> Node_28;
}

