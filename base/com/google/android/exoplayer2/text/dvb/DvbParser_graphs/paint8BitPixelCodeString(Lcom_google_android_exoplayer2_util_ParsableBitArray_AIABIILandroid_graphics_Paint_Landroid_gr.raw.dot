digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.paint8BitPixelCodeString(Lcom\/google\/android\/exoplayer2\/util\/ParsableBitArray;[I[BIILandroid\/graphics\/Paint;Landroid\/graphics\/Canvas;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0005: INVOKE  (r8 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('peek' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r9 I:?[boolean, int, float, short, byte, char] A[D('runLength' int)]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('clutIndex' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('peek' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('runLength' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('paint' android.graphics.Paint)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clutMapTable' byte[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: AGET  (r6 I:byte A[D('clutIndex' int), IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[D('clutMapTable' byte[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('clutIndex' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: AGET  (r0 I:?[int, float]) = \l  (r11 I:?[int, float][] A[D('clutEntries' int[])])\l  (r6 I:?[int, short, byte, char] A[D('clutIndex' int)])\l \l0x0017: INVOKE  \l  (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r0 I:int)\l android.graphics.Paint.setColor(int):void type: VIRTUAL \l0x001a: CAST  (r1 I:float) = (float) (r13 I:int A[D('column' int)]) \l0x001b: CAST  (r2 I:float) = (float) (r14 I:int A[D('line' int)]) \l0x001c: ARITH  (r0 I:int) = (r13 I:int A[D('column' int)]) + (r9 I:int A[D('runLength' int)]) \l0x001e: CAST  (r3 I:float) = (float) (r0 I:int) \l0x001f: ARITH  (r0 I:int) = (r14 I:int A[D('line' int)]) + (1 int) \l0x0021: CAST  (r4 I:float) = (float) (r0 I:int) \l0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])\l \l0x0024: MOVE  (r5 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])\l \l0x0025: INVOKE  \l  (r0 I:android.graphics.Canvas)\l  (r1 I:float)\l  (r2 I:float)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawRect(float, float, float, float, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: ARITH  (r13 I:int A[D('column' int)]) = (r13 I:int A[D('column' int)]) + (r9 I:int A[D('runLength' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endOfPixelCodeString' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: RETURN  (r13 I:int A[D('column' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: INVOKE  (r0 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0033: INVOKE  (r8 I:int A[D('peek' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('peek' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('runLength' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('peek' int)])\l \l0x003a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('clutIndex' int)]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: CONST  (r7 I:?[boolean, int, float, short, byte, char] A[D('endOfPixelCodeString' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x003f: INVOKE  (r9 I:int A[D('runLength' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0043: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0045: INVOKE  (r6 I:int A[D('clutIndex' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.text.dvb.DvbParser.paint8BitPixelCodeString((r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[D('clutEntries' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:byte[] A[D('clutMapTable' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('column' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('line' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0003\-0x0015: r6 'clutIndex' int\l  0x002c\-0x0049: r6 'clutIndex' int\l  0x0001\-0x0049: r7 'endOfPixelCodeString' boolean\l  0x0009\-0x0049: r8 'peek' int\l  0x0002\-0x0049: r9 'runLength' int\l  ?\-0x0049: r10 'data' com.google.android.exoplayer2.util.ParsableBitArray\l  ?\-0x0049: r11 'clutEntries' int[]\l  ?\-0x0049: r12 'clutMapTable' byte[]\l  ?\-0x0049: r13 'column' int\l  ?\-0x0049: r14 'line' int\l  ?\-0x0049: r15 'paint' android.graphics.Paint\l  ?\-0x0049: r16 'canvas' android.graphics.Canvas\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_4;
Node_17 -> Node_4;
Node_18 -> Node_4;
}

