digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.buildClutMapTable(IILcom\/google\/android\/exoplayer2\/util\/ParsableBitArray;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_ARRAY  (r0 I:byte[]) = (r3 I:int A[D('length' int), IMMUTABLE_TYPE]) type: byte[] \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r3 I:?[int, byte, short, char] A[D('length' int)])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r4 I:int A[D('bitsPerEntry' int)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0009: CAST  (r2 I:byte) = (byte) (r2 I:int) \l0x000a: APUT  \l  (r0 I:byte[] A[D('clutMapTable' byte[]), IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:byte A[IMMUTABLE_TYPE])\l \l0x000c: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r0 I:byte[] A[D('clutMapTable' byte[])]) \l}"];
MethodNode[shape=record,label="{private static byte[] com.google.android.exoplayer2.text.dvb.DvbParser.buildClutMapTable((r3 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('bitsPerEntry' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0002\-0x000f: r0 'clutMapTable' byte[]\l  0x0003\-0x000f: r1 'i' int\l  ?\-0x000f: r3 'length' int\l  ?\-0x000f: r4 'bitsPerEntry' int\l  ?\-0x000f: r5 'data' com.google.android.exoplayer2.util.ParsableBitArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

