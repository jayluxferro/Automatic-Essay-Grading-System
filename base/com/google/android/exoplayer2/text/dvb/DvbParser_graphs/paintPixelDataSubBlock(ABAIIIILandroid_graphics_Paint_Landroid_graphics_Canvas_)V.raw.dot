digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.paintPixelDataSubBlock([B[IIIILandroid\/graphics\/Paint;Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray) =  com.google.android.exoplayer2.util.ParsableBitArray \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('pixelData' byte[])]) \l0x0004: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r0 I:byte[])\l com.google.android.exoplayer2.util.ParsableBitArray.\<init\>(byte[]):void type: DIRECT \l0x0007: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('horizontalAddress' int)])\l \l0x0009: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('verticalAddress' int)])\l \l0x000b: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r2 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.bitsLeft():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0096 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r19 I:int) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r2 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: SWITCH  \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dataType' int)])\l k:[16, 17, 18, 32, 33, 34, 240] t:[0x0021, 0x004a, 0x0069, 0x0078, 0x007f, 0x0087, 0x0090] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0022: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('regionDepth' int)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clutMapTable2To8' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: SGET  (r3 I:byte[]) =  com.google.android.exoplayer2.text.dvb.DvbParser.defaultMap2To8 byte[] \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('clutEntries' int[])]) \l0x002c: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])\l \l0x002e: MOVE  (r7 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])\l \l0x0030: INVOKE  (r4 I:int A[D('column' int)]) = \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r2 I:int[])\l  (r3 I:byte[] A[D('clutMapTable2ToX' byte[])])\l  (r4 I:int A[D('column' int)])\l  (r5 I:int A[D('line' int)])\l  (r6 I:android.graphics.Paint)\l  (r7 I:android.graphics.Canvas)\l com.google.android.exoplayer2.text.dvb.DvbParser.paint2BitPixelCodeString(com.google.android.exoplayer2.util.ParsableBitArray, int[], byte[], int, int, android.graphics.Paint, android.graphics.Canvas):int type: STATIC \l0x0034: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.byteAlign():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: MOVE  (r3 I:?[OBJECT, ARRAY] A[D('clutMapTable2ToX' byte[])]) = (r17 I:?[OBJECT, ARRAY] A[D('clutMapTable2To8' byte[])]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003c: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('regionDepth' int)])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clutMapTable2To4' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0045 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: SGET  (r3 I:byte[]) =  com.google.android.exoplayer2.text.dvb.DvbParser.defaultMap2To4 byte[] \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: MOVE  (r3 I:?[OBJECT, ARRAY] A[D('clutMapTable2ToX' byte[])]) = (r16 I:?[OBJECT, ARRAY] A[D('clutMapTable2To4' byte[])]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x004b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('regionDepth' int)])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0067 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004f|0x004f: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clutMapTable4To8' byte[])]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0064 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0051|0x0051: SGET  (r8 I:byte[]) =  com.google.android.exoplayer2.text.dvb.DvbParser.defaultMap4To8 byte[] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|0x0053: MOVE  (r6 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l \l0x0054: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('clutEntries' int[])]) \l0x0056: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('column' int)])\l \l0x0057: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('line' int)])\l \l0x0058: MOVE  (r11 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])\l \l0x005a: MOVE  (r12 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])\l \l0x005c: INVOKE  (r4 I:int A[D('column' int)]) = \l  (r6 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r7 I:int[])\l  (r8 I:byte[] A[D('clutMapTable4ToX' byte[])])\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:android.graphics.Paint)\l  (r12 I:android.graphics.Canvas)\l com.google.android.exoplayer2.text.dvb.DvbParser.paint4BitPixelCodeString(com.google.android.exoplayer2.util.ParsableBitArray, int[], byte[], int, int, android.graphics.Paint, android.graphics.Canvas):int type: STATIC \l0x0060: INVOKE  \l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.byteAlign():void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|0x0064: MOVE  (r8 I:?[OBJECT, ARRAY] A[D('clutMapTable4ToX' byte[])]) = (r18 I:?[OBJECT, ARRAY] A[D('clutMapTable4To8' byte[])]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0067|0x0067: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006a: MOVE  (r9 I:?[OBJECT, ARRAY]) = \l  (r1 I:?[OBJECT, ARRAY] A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l \l0x006b: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY] A[D('clutEntries' int[])]) \l0x006d: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('column' int)])\l \l0x006e: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('line' int)])\l \l0x006f: MOVE  (r14 I:?[OBJECT, ARRAY]) = \l  (r25 I:?[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])\l \l0x0071: MOVE  (r15 I:?[OBJECT, ARRAY]) = \l  (r26 I:?[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])\l \l0x0073: INVOKE  (r4 I:int A[D('column' int)]) = \l  (r9 I:com.google.android.exoplayer2.util.ParsableBitArray)\l  (r10 I:int[])\l  (r11 I:byte[])\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:android.graphics.Paint)\l  (r15 I:android.graphics.Canvas)\l com.google.android.exoplayer2.text.dvb.DvbParser.paint8BitPixelCodeString(com.google.android.exoplayer2.util.ParsableBitArray, int[], byte[], int, int, android.graphics.Paint, android.graphics.Canvas):int type: STATIC \l}"];
Node_27 [shape=record,label="{27\:\ 0x0078|0x0078: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0079: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x007a: INVOKE  (r16 I:byte[] A[D('clutMapTable2To4' byte[])]) = \l  (r2 I:int)\l  (r6 I:int)\l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.text.dvb.DvbParser.buildClutMapTable(int, int, com.google.android.exoplayer2.util.ParsableBitArray):byte[] type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x007f|0x007f: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0080: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0082: INVOKE  (r17 I:byte[] A[D('clutMapTable2To8' byte[])]) = \l  (r2 I:int)\l  (r6 I:int)\l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.text.dvb.DvbParser.buildClutMapTable(int, int, com.google.android.exoplayer2.util.ParsableBitArray):byte[] type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x0087|0x0087: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0089: CONST  (r6 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x008b: INVOKE  (r17 I:byte[] A[D('clutMapTable2To8' byte[])]) = \l  (r2 I:int)\l  (r6 I:int)\l  (r1 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.text.dvb.DvbParser.buildClutMapTable(int, int, com.google.android.exoplayer2.util.ParsableBitArray):byte[] type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ 0x0090|0x0090: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('column' int)]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('horizontalAddress' int)])\l \l0x0092: ARITH  (r5 I:int A[D('line' int)]) = (r5 I:int A[D('line' int)]) + (2 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0096|0x0096: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.text.dvb.DvbParser.paintPixelDataSubBlock((r20 I:byte[] A[D('pixelData' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int[] A[D('clutEntries' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('regionDepth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[D('horizontalAddress' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:int A[D('verticalAddress' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:android.graphics.Paint A[D('paint' android.graphics.Paint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002a\-0x0038: r3 'clutMapTable2ToX' byte[]\l  0x0044\-0x0045: r3 'clutMapTable2ToX' byte[]\l  0x0049\-0x004a: r3 'clutMapTable2ToX' byte[]\l  0x0053\-0x0064: r8 'clutMapTable4ToX' byte[]\l  0x0068\-0x0069: r8 'clutMapTable4ToX' byte[]\l  0x001d\-0x0096: r19 'dataType' int\l  0x0007\-0x00b5: r1 'data' com.google.android.exoplayer2.util.ParsableBitArray\l  0x0009\-0x00b5: r4 'column' int\l  0x000b\-0x00b5: r5 'line' int\l  0x000d\-0x00b5: r16 'clutMapTable2To4' byte[]\l  0x000f\-0x00b5: r17 'clutMapTable2To8' byte[]\l  0x0011\-0x00b5: r18 'clutMapTable4To8' byte[]\l  ?\-0x00b5: r20 'pixelData' byte[]\l  ?\-0x00b5: r21 'clutEntries' int[]\l  ?\-0x00b5: r22 'regionDepth' int\l  ?\-0x00b5: r23 'horizontalAddress' int\l  ?\-0x00b5: r24 'verticalAddress' int\l  ?\-0x00b5: r25 'paint' android.graphics.Paint\l  ?\-0x00b5: r26 'canvas' android.graphics.Canvas\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_31;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_19;
Node_4 -> Node_26;
Node_4 -> Node_27;
Node_4 -> Node_28;
Node_4 -> Node_29;
Node_4 -> Node_30;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_10;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_10;
Node_17 -> Node_10;
Node_18 -> Node_10;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_1;
Node_24 -> Node_23;
Node_25 -> Node_23;
Node_26 -> Node_1;
Node_27 -> Node_1;
Node_28 -> Node_1;
Node_29 -> Node_1;
Node_30 -> Node_1;
}

