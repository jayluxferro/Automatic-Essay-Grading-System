digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.paint2BitPixelCodeString(Lcom\/google\/android\/exoplayer2\/util\/ParsableBitArray;[I[BIILandroid\/graphics\/Paint;Landroid\/graphics\/Canvas;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0004: INVOKE  (r8 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0008: INVOKE  (r0 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST  (r9 I:?[boolean, int, float, short, byte, char] A[D('runLength' int)]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('clutIndex' int)]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('peek' int)])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('runLength' int)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('paint' android.graphics.Paint)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clutMapTable' byte[])]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: AGET  (r6 I:byte A[D('clutIndex' int), IMMUTABLE_TYPE]) = \l  (r12 I:byte[] A[D('clutMapTable' byte[]), IMMUTABLE_TYPE])\l  (r6 I:?[int, short, byte, char] A[D('clutIndex' int)])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: AGET  (r0 I:?[int, float]) = \l  (r11 I:?[int, float][] A[D('clutEntries' int[])])\l  (r6 I:?[int, short, byte, char] A[D('clutIndex' int)])\l \l0x001a: INVOKE  \l  (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r0 I:int)\l android.graphics.Paint.setColor(int):void type: VIRTUAL \l0x001d: CAST  (r1 I:float) = (float) (r13 I:int A[D('column' int)]) \l0x001e: CAST  (r2 I:float) = (float) (r14 I:int A[D('line' int)]) \l0x001f: ARITH  (r0 I:int) = (r13 I:int A[D('column' int)]) + (r9 I:int A[D('runLength' int)]) \l0x0021: CAST  (r3 I:float) = (float) (r0 I:int) \l0x0022: ARITH  (r0 I:int) = (r14 I:int A[D('line' int)]) + (1 int) \l0x0024: CAST  (r4 I:float) = (float) (r0 I:int) \l0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r16 I:?[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])\l \l0x0027: MOVE  (r5 I:?[OBJECT, ARRAY]) = \l  (r15 I:?[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])\l \l0x0028: INVOKE  \l  (r0 I:android.graphics.Canvas)\l  (r1 I:float)\l  (r2 I:float)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawRect(float, float, float, float, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: ARITH  (r13 I:int A[D('column' int)]) = (r13 I:int A[D('column' int)]) + (r9 I:int A[D('runLength' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endOfPixelCodeString' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: RETURN  (r13 I:int A[D('column' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: INVOKE  (r0 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x003a: ARITH  (r9 I:int A[D('runLength' int)]) = (r0 I:int) + (3 int) \l0x003c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003d: INVOKE  (r6 I:int A[D('clutIndex' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: INVOKE  (r0 I:boolean) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l com.google.android.exoplayer2.util.ParsableBitArray.readBit():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0049: INVOKE  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x0051, 0x0053, 0x0055, 0x0062] \l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|0x0051: CONST  (r7 I:?[boolean, int, float, short, byte, char] A[D('endOfPixelCodeString' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: CONST  (r9 I:?[int, float, short, byte, char] A[D('runLength' int)]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0055|0x0055: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0056: INVOKE  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x005a: ARITH  (r9 I:int A[D('runLength' int)]) = (r0 I:int) + (12 int) \l0x005c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x005d: INVOKE  (r6 I:int A[D('clutIndex' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x0064: INVOKE  (r0 I:int) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l0x0068: ARITH  (r9 I:int A[D('runLength' int)]) = (r0 I:int) + (29 int) \l0x006a: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x006b: INVOKE  (r6 I:int A[D('clutIndex' int)]) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableBitArray.readBits(int):int type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.text.dvb.DvbParser.paint2BitPixelCodeString((r10 I:com.google.android.exoplayer2.util.ParsableBitArray A[D('data' com.google.android.exoplayer2.util.ParsableBitArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[D('clutEntries' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:byte[] A[D('clutMapTable' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('column' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('line' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0003\-0x0018: r6 'clutIndex' int\l  0x002f\-0x007b: r6 'clutIndex' int\l  0x0001\-0x007b: r7 'endOfPixelCodeString' boolean\l  0x0008\-0x007b: r8 'peek' int\l  0x0002\-0x007b: r9 'runLength' int\l  ?\-0x007b: r10 'data' com.google.android.exoplayer2.util.ParsableBitArray\l  ?\-0x007b: r11 'clutEntries' int[]\l  ?\-0x007b: r12 'clutMapTable' byte[]\l  ?\-0x007b: r13 'column' int\l  ?\-0x007b: r14 'line' int\l  ?\-0x007b: r15 'paint' android.graphics.Paint\l  ?\-0x007b: r16 'canvas' android.graphics.Canvas\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_4;
Node_15 -> Node_16;
Node_16 -> Node_4;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_21;
Node_18 -> Node_22;
Node_18 -> Node_23;
Node_18 -> Node_4;
Node_20 -> Node_4;
Node_21 -> Node_4;
Node_22 -> Node_4;
Node_23 -> Node_4;
}

