digraph "CFG forcom.google.android.exoplayer2.text.dvb.DvbParser.generateDefault8BitClutEntries()[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (170(0xaa, float:2.38E\-43) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r8 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l0x0006: CONST  (r6 I:?[int, float, short, byte, char]) = (85 ?[int, float, short, byte, char]) \l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l \l0x000b: NEW_ARRAY  (r0 I:int[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000d: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r4 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[] A[D('entries' int[])]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:122:0x011d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char] A[D('i' int)]) \>= (r2 I:?[int, byte, short, char])  \-\> B:19:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST  (r10 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l0x0019: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0035 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r2 I:int) = (r10 I:int), (r9 I:int), (r7 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x002c: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: ARITH  (r1 I:int A[D('i' int)]) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|0x0037: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (136(0x88, float:1.9E\-43) ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 8, 128, 136] t:[0x003d, 0x0073, 0x00ab, 0x00e6] \l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|0x003d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|0x003f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0067 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|0x0041: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|0x0042: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0044|0x0044: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0069 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0046|0x0046: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0047|0x0047: ARITH  (r9 I:int) = (r7 I:int) + (r2 I:int) \l0x0049: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004b|0x004b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x006b \l}"];
Node_30 [shape=record,label="{30\:\ 0x004d|0x004d: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x004e|0x004e: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0050|0x0050: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x006d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0052|0x0052: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x0053|0x0053: ARITH  (r10 I:int) = (r7 I:int) + (r2 I:int) \l0x0055: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0057|0x0057: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x006f \l}"];
Node_36 [shape=record,label="{36\:\ 0x0059|0x0059: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x005a|0x005a: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x005c|0x005c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0071 \l}"];
Node_39 [shape=record,label="{39\:\ 0x005e|0x005e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x005f|0x005f: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x0060: INVOKE  (r2 I:int) = (r3 I:int), (r9 I:int), (r10 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x0064: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x0067|0x0067: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_42 [shape=record,label="{42\:\ 0x0069|0x0069: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x006b|0x006b: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x006d|0x006d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x006f|0x006f: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_46 [shape=record,label="{46\:\ 0x0071|0x0071: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_47 [shape=record,label="{47\:\ 0x0073|0x0073: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x0075: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0077|0x0077: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x009f \l}"];
Node_49 [shape=record,label="{49\:\ 0x0079|0x0079: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x007a|0x007a: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x007c|0x007c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x00a1 \l}"];
Node_52 [shape=record,label="{52\:\ 0x007e|0x007e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_53 [shape=record,label="{53\:\ 0x007f|0x007f: ARITH  (r10 I:int) = (r7 I:int) + (r2 I:int) \l0x0081: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0083|0x0083: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x00a3 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0085|0x0085: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_56 [shape=record,label="{56\:\ 0x0086|0x0086: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0088|0x0088: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x00a5 \l}"];
Node_58 [shape=record,label="{58\:\ 0x008a|0x008a: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_59 [shape=record,label="{59\:\ 0x008b|0x008b: ARITH  (r11 I:int) = (r7 I:int) + (r2 I:int) \l0x008d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x008f|0x008f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x00a7 \l}"];
Node_61 [shape=record,label="{61\:\ 0x0091|0x0091: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_62 [shape=record,label="{62\:\ 0x0092|0x0092: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0094|0x0094: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x00a9 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0096|0x0096: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_65 [shape=record,label="{65\:\ 0x0097|0x0097: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x0098: INVOKE  (r2 I:int) = (r9 I:int), (r10 I:int), (r11 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x009c: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_66 [shape=record,label="{66\:\ 0x009f|0x009f: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_67 [shape=record,label="{67\:\ 0x00a1|0x00a1: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_68 [shape=record,label="{68\:\ 0x00a3|0x00a3: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_69 [shape=record,label="{69\:\ 0x00a5|0x00a5: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_70 [shape=record,label="{70\:\ 0x00a7|0x00a7: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_71 [shape=record,label="{71\:\ 0x00a9|0x00a9: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_72 [shape=record,label="{72\:\ 0x00ab|0x00ab: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x00ad|0x00ad: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x00da \l}"];
Node_74 [shape=record,label="{74\:\ 0x00af|0x00af: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_75 [shape=record,label="{75\:\ 0x00b0|0x00b0: ARITH  (r7 I:int) = (r2 I:int) + (127 int) \l0x00b2: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x00b4|0x00b4: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:92:0x00dc \l}"];
Node_77 [shape=record,label="{77\:\ 0x00b6|0x00b6: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_78 [shape=record,label="{78\:\ 0x00b7|0x00b7: ARITH  (r7 I:int) = (r7 I:int) + (r2 I:int) \l0x00b8: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x00ba|0x00ba: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:93:0x00de \l}"];
Node_80 [shape=record,label="{80\:\ 0x00bc|0x00bc: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_81 [shape=record,label="{81\:\ 0x00bd|0x00bd: ARITH  (r9 I:int) = (r2 I:int) + (127 int) \l0x00bf: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_82 [shape=record,label="{82\:\ 0x00c1|0x00c1: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x00e0 \l}"];
Node_83 [shape=record,label="{83\:\ 0x00c3|0x00c3: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_84 [shape=record,label="{84\:\ 0x00c4|0x00c4: ARITH  (r9 I:int) = (r9 I:int) + (r2 I:int) \l0x00c5: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_85 [shape=record,label="{85\:\ 0x00c7|0x00c7: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x00e2 \l}"];
Node_86 [shape=record,label="{86\:\ 0x00c9|0x00c9: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_87 [shape=record,label="{87\:\ 0x00ca|0x00ca: ARITH  (r10 I:int) = (r2 I:int) + (127 int) \l0x00cc: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_88 [shape=record,label="{88\:\ 0x00ce|0x00ce: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x00e4 \l}"];
Node_89 [shape=record,label="{89\:\ 0x00d0|0x00d0: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_90 [shape=record,label="{90\:\ 0x00d1|0x00d1: ARITH  (r2 I:int) = (r2 I:int) + (r10 I:int) \l0x00d2: INVOKE  (r2 I:int) = (r3 I:int), (r7 I:int), (r9 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x00d6: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_91 [shape=record,label="{91\:\ 0x00da|0x00da: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_92 [shape=record,label="{92\:\ 0x00dc|0x00dc: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_93 [shape=record,label="{93\:\ 0x00de|0x00de: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_94 [shape=record,label="{94\:\ 0x00e0|0x00e0: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_95 [shape=record,label="{95\:\ 0x00e2|0x00e2: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_96 [shape=record,label="{96\:\ 0x00e4|0x00e4: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_97 [shape=record,label="{97\:\ 0x00e6|0x00e6: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_98 [shape=record,label="{98\:\ 0x00e8|0x00e8: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:116:0x0111 \l}"];
Node_99 [shape=record,label="{99\:\ 0x00ea|0x00ea: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_100 [shape=record,label="{100\:\ 0x00eb|0x00eb: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_101 [shape=record,label="{101\:\ 0x00ed|0x00ed: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:117:0x0113 \l}"];
Node_102 [shape=record,label="{102\:\ 0x00ef|0x00ef: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_103 [shape=record,label="{103\:\ 0x00f0|0x00f0: ARITH  (r9 I:int) = (r7 I:int) + (r2 I:int) \l0x00f2: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_104 [shape=record,label="{104\:\ 0x00f4|0x00f4: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:118:0x0115 \l}"];
Node_105 [shape=record,label="{105\:\ 0x00f6|0x00f6: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_106 [shape=record,label="{106\:\ 0x00f7|0x00f7: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_107 [shape=record,label="{107\:\ 0x00f9|0x00f9: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:119:0x0117 \l}"];
Node_108 [shape=record,label="{108\:\ 0x00fb|0x00fb: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_109 [shape=record,label="{109\:\ 0x00fc|0x00fc: ARITH  (r10 I:int) = (r7 I:int) + (r2 I:int) \l0x00fe: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_110 [shape=record,label="{110\:\ 0x0100|0x0100: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:120:0x0119 \l}"];
Node_111 [shape=record,label="{111\:\ 0x0102|0x0102: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_112 [shape=record,label="{112\:\ 0x0103|0x0103: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char] A[D('i' int)]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_113 [shape=record,label="{113\:\ 0x0105|0x0105: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:121:0x011b \l}"];
Node_114 [shape=record,label="{114\:\ 0x0107|0x0107: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_115 [shape=record,label="{115\:\ 0x0108|0x0108: ARITH  (r2 I:int) = (r2 I:int) + (r7 I:int) \l0x0109: INVOKE  (r2 I:int) = (r3 I:int), (r9 I:int), (r10 I:int), (r2 I:int) com.google.android.exoplayer2.text.dvb.DvbParser.getColor(int, int, int, int):int type: STATIC \l0x010d: APUT  \l  (r0 I:?[int, float][] A[D('entries' int[])])\l  (r1 I:?[int, short, byte, char] A[D('i' int)])\l  (r2 I:?[int, float])\l \l}"];
Node_116 [shape=record,label="{116\:\ 0x0111|0x0111: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_117 [shape=record,label="{117\:\ 0x0113|0x0113: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_118 [shape=record,label="{118\:\ 0x0115|0x0115: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_119 [shape=record,label="{119\:\ 0x0117|0x0117: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_120 [shape=record,label="{120\:\ 0x0119|0x0119: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_121 [shape=record,label="{121\:\ 0x011b|0x011b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_122 [shape=record,label="{122\:\ 0x011d|0x011d: RETURN  (r0 I:int[] A[D('entries' int[])]) \l}"];
MethodNode[shape=record,label="{private static int[] com.google.android.exoplayer2.text.dvb.DvbParser.generateDefault8BitClutEntries()  | Debug Info:\l  0x000d\-0x012f: r0 'entries' int[]\l  0x0010\-0x012f: r1 'i' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_122;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_8;
Node_17 -> Node_11;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_47;
Node_20 -> Node_72;
Node_20 -> Node_97;
Node_20 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_41;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_42;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_43;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_44;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_45;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_46;
Node_39 -> Node_40;
Node_40 -> Node_15;
Node_41 -> Node_25;
Node_42 -> Node_28;
Node_43 -> Node_31;
Node_44 -> Node_34;
Node_45 -> Node_37;
Node_46 -> Node_40;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_66;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_67;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_68;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_69;
Node_58 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_70;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_71;
Node_64 -> Node_65;
Node_65 -> Node_15;
Node_66 -> Node_50;
Node_67 -> Node_53;
Node_68 -> Node_56;
Node_69 -> Node_59;
Node_70 -> Node_62;
Node_71 -> Node_65;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_91;
Node_74 -> Node_75;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_92;
Node_77 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_93;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_94;
Node_83 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_95;
Node_86 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_96;
Node_89 -> Node_90;
Node_90 -> Node_15;
Node_91 -> Node_75;
Node_92 -> Node_78;
Node_93 -> Node_81;
Node_94 -> Node_84;
Node_95 -> Node_87;
Node_96 -> Node_90;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_116;
Node_99 -> Node_100;
Node_100 -> Node_101;
Node_101 -> Node_102[style=dashed];
Node_101 -> Node_117;
Node_102 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_105[style=dashed];
Node_104 -> Node_118;
Node_105 -> Node_106;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_119;
Node_108 -> Node_109;
Node_109 -> Node_110;
Node_110 -> Node_111[style=dashed];
Node_110 -> Node_120;
Node_111 -> Node_112;
Node_112 -> Node_113;
Node_113 -> Node_114[style=dashed];
Node_113 -> Node_121;
Node_114 -> Node_115;
Node_115 -> Node_15;
Node_116 -> Node_100;
Node_117 -> Node_103;
Node_118 -> Node_106;
Node_119 -> Node_109;
Node_120 -> Node_112;
Node_121 -> Node_115;
}

