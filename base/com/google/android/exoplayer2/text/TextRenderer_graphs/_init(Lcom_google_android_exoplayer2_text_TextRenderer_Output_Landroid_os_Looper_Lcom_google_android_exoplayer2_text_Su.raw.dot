digraph "CFG forcom.google.android.exoplayer2.text.TextRenderer.\<init\>(Lcom\/google\/android\/exoplayer2\/text\/TextRenderer$Output;Landroid\/os\/Looper;Lcom\/google\/android\/exoplayer2\/text\/SubtitleDecoderFactory;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0001: INVOKE  \l  (r1 I:com.google.android.exoplayer2.BaseRenderer)\l  (r0 I:int)\l com.google.android.exoplayer2.BaseRenderer.\<init\>(int):void type: DIRECT \l0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:java.lang.Object A[D('output' com.google.android.exoplayer2.text.TextRenderer$Output)])\l com.google.android.exoplayer2.util.Assertions.checkNotNull(java.lang.Object):java.lang.Object type: STATIC \l0x0008: CHECK_CAST  (r0 I:com.google.android.exoplayer2.text.TextRenderer$Output) = (com.google.android.exoplayer2.text.TextRenderer$Output) (r0 I:?[OBJECT, ARRAY]) \l0x000a: IPUT  \l  (r0 I:com.google.android.exoplayer2.text.TextRenderer$Output)\l  (r1 I:com.google.android.exoplayer2.text.TextRenderer)\l com.google.android.exoplayer2.text.TextRenderer.output com.google.android.exoplayer2.text.TextRenderer$Output \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('outputLooper' android.os.Looper)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IPUT  \l  (r0 I:android.os.Handler)\l  (r1 I:com.google.android.exoplayer2.text.TextRenderer)\l com.google.android.exoplayer2.text.TextRenderer.outputHandler android.os.Handler \l0x0011: IPUT  \l  (r4 I:com.google.android.exoplayer2.text.SubtitleDecoderFactory A[D('decoderFactory' com.google.android.exoplayer2.text.SubtitleDecoderFactory)])\l  (r1 I:com.google.android.exoplayer2.text.TextRenderer)\l com.google.android.exoplayer2.text.TextRenderer.decoderFactory com.google.android.exoplayer2.text.SubtitleDecoderFactory \l0x0013: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.FormatHolder) =  com.google.android.exoplayer2.FormatHolder \l0x0015: INVOKE  (r0 I:com.google.android.exoplayer2.FormatHolder) com.google.android.exoplayer2.FormatHolder.\<init\>():void type: DIRECT \l0x0018: IPUT  \l  (r0 I:com.google.android.exoplayer2.FormatHolder)\l  (r1 I:com.google.android.exoplayer2.text.TextRenderer)\l com.google.android.exoplayer2.text.TextRenderer.formatHolder com.google.android.exoplayer2.FormatHolder \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:android.os.Handler) =  android.os.Handler \l0x001d: INVOKE  \l  (r0 I:android.os.Handler)\l  (r3 I:android.os.Looper A[D('outputLooper' android.os.Looper)])\l  (r1 I:android.os.Handler$Callback)\l android.os.Handler.\<init\>(android.os.Looper, android.os.Handler$Callback):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.text.TextRenderer.\<init\>((r1 'this' I:com.google.android.exoplayer2.text.TextRenderer A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.exoplayer2.text.TextRenderer$Output A[D('output' com.google.android.exoplayer2.text.TextRenderer$Output), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.os.Looper A[D('outputLooper' android.os.Looper), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.google.android.exoplayer2.text.SubtitleDecoderFactory A[D('decoderFactory' com.google.android.exoplayer2.text.SubtitleDecoderFactory), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0020: r2 'output' com.google.android.exoplayer2.text.TextRenderer$Output\l  ?\-0x0020: r3 'outputLooper' android.os.Looper\l  ?\-0x0020: r4 'decoderFactory' com.google.android.exoplayer2.text.SubtitleDecoderFactory\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

