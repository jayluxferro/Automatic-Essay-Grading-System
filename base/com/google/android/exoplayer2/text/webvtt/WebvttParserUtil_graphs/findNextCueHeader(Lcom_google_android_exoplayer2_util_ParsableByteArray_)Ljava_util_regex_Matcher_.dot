digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttParserUtil.findNextCueHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/util\/regex\/Matcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:11:0x0000\l|java.lang.String r1 = r3.readLine()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r1 == null) goto L_0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (COMMENT.matcher(r1).matches() == false) goto L_0x001f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|LOOP_START\lLOOP:1: B:4:0x0012\-\>B:7:0x001c\l|java.lang.String r1 = r3.readLine()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r1 == null) goto L_0x0000\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018}"];
Node_7 [shape=record,label="{7\:\ 0x001c|LOOP_END\lLOOP:1: B:4:0x0012\-\>B:7:0x001c\l|if (r1.isEmpty() != false) goto L_0x0000\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|java.util.regex.Matcher r0 = com.google.android.exoplayer2.text.webvtt.WebvttCueParser.CUE_HEADER_PATTERN.matcher(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|if (r0.matches() == false) goto L_0x0000\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:0:0x0000\-\>B:11:0x0000\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public static java.util.regex.Matcher com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.findNextCueHeader((r3v0 'input' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_4[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_13[style=dashed];
Node_9 -> Node_16;
Node_11 -> Node_0;
Node_12 -> Node_10;
Node_13 -> Node_17;
Node_14 -> Node_11;
Node_15 -> Node_11;
Node_16 -> Node_11;
}

