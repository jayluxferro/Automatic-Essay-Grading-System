digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttParserUtil.findNextCueHeader(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/util\/regex\/Matcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('line' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r2 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.COMMENT java.util.regex.Pattern \l0x0008: INVOKE  (r2 I:java.util.regex.Matcher) = \l  (r2 I:java.util.regex.Pattern)\l  (r1 I:java.lang.CharSequence A[D('line' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x000c: INVOKE  (r2 I:boolean) = (r2 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r1 I:java.lang.String A[D('line' java.lang.String)]) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('line' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String A[D('line' java.lang.String)]) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: SGET  (r2 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.text.webvtt.WebvttCueParser.CUE_HEADER_PATTERN java.util.regex.Pattern \l0x0021: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r2 I:java.util.regex.Pattern)\l  (r1 I:java.lang.CharSequence A[D('line' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0025: INVOKE  (r2 I:boolean) = \l  (r0 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: RETURN  \l  (r0 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static java.util.regex.Matcher com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.findNextCueHeader((r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0025\-0x002b: r0 'cueHeaderMatcher' java.util.regex.Matcher\l  0x0004\-0x002d: r1 'line' java.lang.String\l  ?\-0x002d: r3 'input' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_0;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_0;
Node_7 -> Node_4[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_0;
Node_10 -> Node_11[style=dashed];
Node_12 -> Node_11;
}

