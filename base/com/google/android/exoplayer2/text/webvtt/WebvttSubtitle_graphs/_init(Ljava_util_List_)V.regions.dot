digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttSubtitle.\<init\>(Ljava\/util\/List;)V" {
subgraph cluster_Region_923720606 {
label = "R(3:0|(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r8.cues = r9\lr8.numCues = r9.size()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1068974108 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|if (r2 \< r8.numCues) goto L_0x0018\l}"];
subgraph cluster_Region_407013645 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|LOOP_END\lLOOP:0: B:1:0x0014\-\>B:3:0x0018\l|com.google.android.exoplayer2.text.webvtt.WebvttCue com.google.android.exoplayer2.text.webvtt.WebvttCue r1 = r9.get(r2)\lint int r0 = r2 * 2\lr8.cueTimesUs[r0] = r1.startTime\lr8.cueTimesUs[r0 + 1] = r1.endTime\lr2++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0031|r8.sortedCueTimesUs = java.util.Arrays.copyOf(r8.cueTimesUs, r8.cueTimesUs.length)\ljava.util.Arrays.sort(r8.sortedCueTimesUs)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0014|LOOP_START\lPHI: r2 \l  PHI: (r2v1 'cueIndex' int) = (r2v0 'cueIndex' int), (r2v2 'cueIndex' int) binds: [B:0:0x0000, B:3:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:3:0x0018\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0041}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.text.webvtt.WebvttSubtitle.\<init\>((r8v0 'this' com.google.android.exoplayer2.text.webvtt.WebvttSubtitle A[IMMUTABLE_TYPE, THIS]), (r9v0 'cues' java.util.List\<com.google.android.exoplayer2.text.webvtt.WebvttCue\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCue;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_6[style=dashed];
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_1 -> Node_2;
Node_6 -> Node_4;
}

