digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttCueParser.isSupportedTag(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0003: INVOKE  (r3 I:int) = (r4 I:java.lang.String A[D('tagName' java.lang.String)]) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[98, 99, 105, 117, 118, 3314158] t:[0x000f, 0x0019, 0x0023, 0x0037, 0x0041, 0x002d] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5] t:[0x000e, 0x000e, 0x000e, 0x000e, 0x000e, 0x000e] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST_STR  (r3 I:java.lang.String) =  \"b\" \l0x0011: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: CONST_STR  (r3 I:java.lang.String) =  \"c\" \l0x001b: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: CONST_STR  (r3 I:java.lang.String) =  \"i\" \l0x0025: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: CONST_STR  (r3 I:java.lang.String) =  \"lang\" \l0x002f: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: CONST_STR  (r3 I:java.lang.String) =  \"u\" \l0x0039: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: CONST_STR  (r3 I:java.lang.String) =  \"v\" \l0x0043: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.String A[D('tagName' java.lang.String)])\l  (r3 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.text.webvtt.WebvttCueParser.isSupportedTag((r4 I:java.lang.String A[D('tagName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0075: r4 'tagName' java.lang.String\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_1 -> Node_8;
Node_1 -> Node_11;
Node_1 -> Node_14;
Node_1 -> Node_17;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_2;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_2;
Node_8 -> Node_9;
Node_9 -> Node_2;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_2;
Node_11 -> Node_12;
Node_12 -> Node_2;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_2;
Node_14 -> Node_15;
Node_15 -> Node_2;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_2;
Node_17 -> Node_18;
Node_18 -> Node_2;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_2;
Node_20 -> Node_21;
Node_21 -> Node_2;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_2;
}

