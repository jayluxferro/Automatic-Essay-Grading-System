digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCue(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCue$Builder;Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r6 = r9.readLine()\ljava.util.regex.Matcher r1 = CUE_HEADER_PATTERN.matcher(r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r1.matches() == false) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|r2 = r9\lr3 = r10\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|java.lang.String r7 = r9.readLine()\ljava.util.regex.Matcher r1 = CUE_HEADER_PATTERN.matcher(r7)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|if (r1.matches() == false) goto L_0x0039\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|r2 = r9\lr3 = r10\l}"];
Node_6 [shape=record,label="{6\:\ 0x0039|SYNTHETIC\lRETURN\l|return false\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return parseCue((java.lang.String) null, r1, r2, r3, r8.textBuilder, r11)\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return parseCue(r6.trim(), r1, r2, r3, r8.textBuilder, r11)\l}"];
MethodNode[shape=record,label="{boolean com.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCue((r8v0 'this' com.google.android.exoplayer2.text.webvtt.WebvttCueParser A[IMMUTABLE_TYPE, THIS]), (r9v0 'webvttData' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'styles' java.util.List\<com.google.android.exoplayer2.text.webvtt.WebvttCssStyle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;, Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCue$Builder;, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCssStyle;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_8;
}

