digraph "CFG forcom.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCue(Ljava\/lang\/String;Ljava\/util\/regex\/Matcher;Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCue$Builder;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0003\l|0x0003: INVOKE  (r4 I:java.lang.String) = \l  (r9 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l  (r4 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0045 \}, TRY_ENTER]\l0x0007: INVOKE  (r4 I:long) = (r4 I:java.lang.String) com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.parseTimestampUs(java.lang.String):long type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0045 \}]\l0x000b: INVOKE  (r4 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder) = \l  (r11 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder A[D('builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder)])\l  (r4 I:long)\l com.google.android.exoplayer2.text.webvtt.WebvttCue.Builder.setStartTime(long):com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0045 \}]\l0x000f: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ NumberFormatException \-\> 0x0045 \}]\l0x0010: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l  (r5 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0045 \}]\l0x0014: INVOKE  (r6 I:long) = (r5 I:java.lang.String) com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.parseTimestampUs(java.lang.String):long type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0045 \}]\l0x0018: INVOKE  \l  (r4 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder)\l  (r6 I:long)\l com.google.android.exoplayer2.text.webvtt.WebvttCue.Builder.setEndTime(long):com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x0045 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001c: INVOKE  (r4 I:java.lang.String) = \l  (r9 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l  (r4 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0020: INVOKE  \l  (r4 I:java.lang.String)\l  (r11 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder A[D('builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder)])\l com.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCueSettingsList(java.lang.String, com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder):void type: STATIC \l0x0023: INVOKE  \l  (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder)])\l  (r3 I:int)\l java.lang.StringBuilder.setLength(int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: INVOKE  (r1 I:java.lang.String) = \l  (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('webvttData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('line' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0064 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r3 I:boolean) = (r1 I:java.lang.String A[D('line' java.lang.String)]) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0064 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: INVOKE  (r3 I:int) = \l  (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder)])\l java.lang.StringBuilder.length():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x003d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: CONST_STR  (r3 I:java.lang.String) =  \"\l\" \l0x003a: INVOKE  \l  (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder)])\l  (r3 I:java.lang.String)\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.String A[D('line' java.lang.String)]) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0041: INVOKE  \l  (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder)])\l  (r3 I:java.lang.String)\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|ExcHandler: NumberFormatException null\lSplitter:B:1:0x0003\l|0x0045: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: CONST_STR  (r2 I:java.lang.String) =  \"WebvttCueParser\" \l0x0048: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004a: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004d: CONST_STR  (r5 I:java.lang.String) =  \"Skipping cue with bad header: \" \l0x004f: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.group():java.lang.String type: VIRTUAL \l0x0057: INVOKE  (r4 I:java.lang.StringBuilder) = (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005f: INVOKE  (r2 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x0062: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0063|0x0063: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: INVOKE  (r3 I:java.lang.String) = \l  (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  \l  (r8 I:java.lang.String A[D('id' java.lang.String)])\l  (r3 I:java.lang.String)\l  (r11 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder A[D('builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder)])\l  (r13 I:java.util.List A[D('styles' java.util.List\<com.google.android.exoplayer2.text.webvtt.WebvttCssStyle\>)])\l com.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCueText(java.lang.String, java.lang.String, com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder, java.util.List):void type: STATIC \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.text.webvtt.WebvttCueParser.parseCue((r8 I:java.lang.String A[D('id' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.regex.Matcher A[D('cueHeaderMatcher' java.util.regex.Matcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('webvttData' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder A[D('builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.StringBuilder A[D('textBuilder' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.util.List\<com.google.android.exoplayer2.text.webvtt.WebvttCssStyle\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x002a\-0x0045: r1 'line' java.lang.String\l  0x0046\-0x0063: r0 'e' java.lang.NumberFormatException\l  0x0064\-0x006b: r1 'line' java.lang.String\l  ?\-0x006b: r8 'id' java.lang.String\l  ?\-0x006b: r9 'cueHeaderMatcher' java.util.regex.Matcher\l  ?\-0x006b: r10 'webvttData' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x006b: r11 'builder' com.google.android.exoplayer2.text.webvtt.WebvttCue$Builder\l  ?\-0x006b: r12 'textBuilder' java.lang.StringBuilder\l  0x0000\-0x006b: r13 'styles' java.util.List\<com.google.android.exoplayer2.text.webvtt.WebvttCssStyle\>\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/util\/regex\/Matcher;, Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;, Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCue$Builder;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List, \<, Lcom\/google\/android\/exoplayer2\/text\/webvtt\/WebvttCssStyle;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_14;
}

