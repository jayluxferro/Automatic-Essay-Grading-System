digraph "CFG forcom.google.android.exoplayer2.text.webvtt.CssParser.parseNextToken(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Ljava\/lang\/StringBuilder;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.text.webvtt.CssParser.skipWhitespaceAndComments(com.google.android.exoplayer2.util.ParsableByteArray):void type: STATIC \l0x0003: INVOKE  (r1 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r0 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r4 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l com.google.android.exoplayer2.text.webvtt.CssParser.parseIdentifier(com.google.android.exoplayer2.util.ParsableByteArray, java.lang.StringBuilder):java.lang.String type: STATIC \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0011: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('identifier' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001c: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x001e: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r2 I:int) = \l  (r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedByte():int type: VIRTUAL \l0x0026: CAST  (r2 I:char) = (char) (r2 I:int) \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder) = (r1 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002b: INVOKE  (r0 I:java.lang.String A[D('identifier' java.lang.String)]) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
MethodNode[shape=record,label="{static java.lang.String com.google.android.exoplayer2.text.webvtt.CssParser.parseNextToken((r3 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x002f: r0 'identifier' java.lang.String\l  ?\-0x002f: r3 'input' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x002f: r4 'stringBuilder' java.lang.StringBuilder\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_3;
}

