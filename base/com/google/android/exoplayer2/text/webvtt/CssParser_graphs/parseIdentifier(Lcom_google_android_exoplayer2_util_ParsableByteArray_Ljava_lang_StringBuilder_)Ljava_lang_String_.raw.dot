digraph "CFG forcom.google.android.exoplayer2.text.webvtt.CssParser.parseIdentifier(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Ljava\/lang\/StringBuilder;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l  (r4 I:int)\l java.lang.StringBuilder.setLength(int):void type: VIRTUAL \l0x0004: INVOKE  (r3 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0008: INVOKE  (r2 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.limit():int type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char] A[D('position' int)]) \>= (r2 I:?[int, byte, short, char] A[D('limit' int)])  \-\> B:25:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('identifierEndFound' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0046 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r4 I:byte[]) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.data byte[] \l0x0013: AGET  (r4 I:byte A[IMMUTABLE_TYPE]) = \l  (r4 I:byte[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char] A[D('position' int)])\l \l0x0015: CAST  (r0 I:char) = (char) (r4 I:int) \l0x0016: CONST  (r4 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \< (r4 I:?[int, byte, short, char])  \-\> B:7:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r4 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r4 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \< (r4 I:?[int, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: CONST  (r4 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \< (r4 I:?[int, byte, short, char])  \-\> B:15:0x002e \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: CONST  (r4 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IF  (r0 I:?[int, byte, short, char] A[D('c' char)]) \<= (r4 I:?[int, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: CONST  (r4 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' char)]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: CONST  (r4 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|0x0034: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' char)]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|0x0036: CONST  (r4 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' char)]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003e \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: CONST  (r4 I:?[int, float, short, byte, char]) = (95 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' char)]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0044 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003e|0x003e: ARITH  (r3 I:int A[D('position' int)]) = (r3 I:int A[D('position' int)]) + (1 int) \l0x0040: INVOKE  \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l  (r0 I:char A[D('c' char)])\l java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|0x0044: CONST  (r1 I:?[boolean, int, float, short, byte, char] A[D('identifierEndFound' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0046|0x0046: INVOKE  (r4 I:int) = \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x004a: ARITH  (r4 I:int) = (r3 I:int A[D('position' int)]) \- (r4 I:int) \l0x004c: INVOKE  \l  (r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r4 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l0x004f: INVOKE  (r4 I:java.lang.String) = \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0053|0x0053: RETURN  (r4 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.text.webvtt.CssParser.parseIdentifier((r5 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0016\-0x0046: r0 'c' char\l  0x000d\-0x0053: r1 'identifierEndFound' boolean\l  0x000c\-0x0053: r2 'limit' int\l  0x0008\-0x0053: r3 'position' int\l  ?\-0x0053: r5 'input' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x0053: r6 'stringBuilder' java.lang.StringBuilder\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_25;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_23;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_23;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_1;
Node_24 -> Node_1;
Node_25 -> Node_26;
}

