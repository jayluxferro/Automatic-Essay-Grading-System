digraph "CFG forcom.google.android.exoplayer2.text.webvtt.CssParser.maybeSkipWhitespace(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: INVOKE  (r1 I:int) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.getPosition():int type: VIRTUAL \l0x0005: INVOKE  (r1 I:char) = \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:int)\l com.google.android.exoplayer2.text.webvtt.CssParser.peekCharAtPosition(com.google.android.exoplayer2.util.ParsableByteArray, int):char type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[9, 10, 12, 13, 32] t:[0x000e, 0x000e, 0x000e, 0x000e, 0x000e] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  \l  (r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r0 I:int)\l com.google.android.exoplayer2.util.ParsableByteArray.skipBytes(int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.exoplayer2.text.webvtt.CssParser.maybeSkipWhitespace((r2 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('input' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0027: r2 'input' com.google.android.exoplayer2.util.ParsableByteArray\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

