digraph "CFG forcom.google.android.exoplayer2.text.webvtt.CssParser.readCueTarget(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r3 = r6.getPosition()\lint r2 = r6.limit()\lr1 = false\lr4 = r3\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r1 r4 \l  PHI: (r1v1 'cueTargetEndFound' boolean) = (r1v0 'cueTargetEndFound' boolean), (r1v3 'cueTargetEndFound' boolean) binds: [B:0:0x0000, B:6:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'position' int) = (r4v0 'position' int), (r4v2 'position' int) binds: [B:0:0x0000, B:6:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:6:0x001a\l|if (r4 \>= r2) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r1 != false) goto L_0x001e\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|int r3 = r4 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|if (((char) r6.data[r4]) != ')') goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|r1 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|LOOP_END\lPHI: r1 \l  PHI: (r1v3 'cueTargetEndFound' boolean) = (r1v2 'cueTargetEndFound' boolean), (r1v4 'cueTargetEndFound' boolean) binds: [B:13:0x001a, B:12:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:6:0x001a\l|r4 = r3\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|r1 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e}"];
Node_9 [shape=record,label="{9\:\ 0x002e|RETURN\l|return r6.readString((r4 + \-1) \- r6.getPosition()).trim()\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.text.webvtt.CssParser.readCueTarget((r6v0 'input' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_12;
Node_6 -> Node_1;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_10 -> Node_8;
Node_11 -> Node_8;
Node_12 -> Node_6;
Node_13 -> Node_6;
}

