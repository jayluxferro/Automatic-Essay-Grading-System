digraph "CFG forcom.google.android.exoplayer2.text.tx3g.Tx3gDecoder.readSubtitleText(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4.bytesLeft() \< 2) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v13 boolean) binds: [B:6:0x0014, B:2:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|assertTrue(r2)\lint r1 = r4.readUnsignedShort()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r1 != 0) goto L_0x0016\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"\"\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r2 = false\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016}"];
Node_8 [shape=record,label="{8\:\ 0x001a|if (r4.bytesLeft() \< 2) goto L_0x0035\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|char r0 = r4.peekChar()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r0 == 65279) goto L_0x002a\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025}"];
Node_12 [shape=record,label="{12\:\ 0x0028|if (r0 != 65534) goto L_0x0035\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a}"];
Node_14 [shape=record,label="{14\:\ 0x0035}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r4.readString(r1, java.nio.charset.Charset.forName(com.google.android.exoplayer2.C1260C.UTF16_NAME))\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r4.readString(r1, java.nio.charset.Charset.forName(com.google.android.exoplayer2.C1260C.UTF8_NAME))\l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.text.tx3g.Tx3gDecoder.readSubtitleText((r4v0 'parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.text.SubtitleDecoderException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_6 -> Node_3;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_16;
}

