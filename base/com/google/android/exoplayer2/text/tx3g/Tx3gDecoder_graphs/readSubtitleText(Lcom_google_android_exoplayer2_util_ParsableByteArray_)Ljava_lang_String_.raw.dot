digraph "CFG forcom.google.android.exoplayer2.text.tx3g.Tx3gDecoder.readSubtitleText(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: INVOKE  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:boolean) com.google.android.exoplayer2.text.tx3g.Tx3gDecoder.assertTrue(boolean):void type: STATIC \l0x000b: INVOKE  (r1 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readUnsignedShort():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('textLength' int)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST_STR  (r2 I:java.lang.String) =  \"\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r2 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: INVOKE  (r2 I:int) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.bytesLeft():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: INVOKE  (r0 I:char) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.peekChar():char type: VIRTUAL \l0x0020: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (65279(0xfeff, float:9.1475E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (65534(0xfffe, float:9.1833E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: CONST_STR  (r2 I:java.lang.String) =  \"UTF\-16\" \l0x002c: INVOKE  (r2 I:java.nio.charset.Charset) = (r2 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x0030: INVOKE  (r2 I:java.lang.String) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:int A[D('textLength' int)])\l  (r2 I:java.nio.charset.Charset)\l com.google.android.exoplayer2.util.ParsableByteArray.readString(int, java.nio.charset.Charset):java.lang.String type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: CONST_STR  (r2 I:java.lang.String) =  \"UTF\-8\" \l0x0037: INVOKE  (r2 I:java.nio.charset.Charset) = (r2 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x003b: INVOKE  (r2 I:java.lang.String) = \l  (r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray)])\l  (r1 I:int A[D('textLength' int)])\l  (r2 I:java.nio.charset.Charset)\l com.google.android.exoplayer2.util.ParsableByteArray.readString(int, java.nio.charset.Charset):java.lang.String type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.exoplayer2.text.tx3g.Tx3gDecoder.readSubtitleText((r4 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x000f\-0x0014: r1 'textLength' int\l  0x0020\-0x0035: r0 'firstChar' char\l  0x0016\-0x003f: r1 'textLength' int\l  ?\-0x003f: r4 'parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.text.SubtitleDecoderException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_7 -> Node_3;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_6;
Node_15 -> Node_6;
}

