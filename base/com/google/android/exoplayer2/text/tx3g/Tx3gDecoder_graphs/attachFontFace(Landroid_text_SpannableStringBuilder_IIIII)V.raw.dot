digraph "CFG forcom.google.android.exoplayer2.text.tx3g.Tx3gDecoder.attachFontFace(Landroid\/text\/SpannableStringBuilder;IIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fontFace' int)]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('defaultFontFace' int)])  \-\> B:19:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char] A[D('spanPriority' int)]) \| (33 ?[int, float, short, byte, char]) \l0x0006: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('fontFace' int)]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x003a \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('fontFace' int)]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003c \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isBold' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0047 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isItalic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: NEW_INSTANCE  (r5 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x0016: CONST  (r6 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r5 I:android.text.style.StyleSpan), (r6 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x001a: INVOKE  \l  (r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder)])\l  (r5 I:java.lang.Object)\l  (r10 I:int A[D('start' int)])\l  (r11 I:int A[D('end' int)])\l  (r0 I:int A[D('flags' int)])\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char] A[D('fontFace' int)]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0053 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isUnderlined' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: NEW_INSTANCE  (r5 I:android.text.style.UnderlineSpan) =  android.text.style.UnderlineSpan \l0x0025: INVOKE  (r5 I:android.text.style.UnderlineSpan) android.text.style.UnderlineSpan.\<init\>():void type: DIRECT \l0x0028: INVOKE  \l  (r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder)])\l  (r5 I:java.lang.Object)\l  (r10 I:int A[D('start' int)])\l  (r11 I:int A[D('end' int)])\l  (r0 I:int A[D('flags' int)])\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isUnderlined' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isBold' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0039 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isItalic' boolean)]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0039 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: NEW_INSTANCE  (r5 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x0033: INVOKE  (r5 I:android.text.style.StyleSpan), (r4 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x0036: INVOKE  \l  (r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder)])\l  (r5 I:java.lang.Object)\l  (r10 I:int A[D('start' int)])\l  (r11 I:int A[D('end' int)])\l  (r0 I:int A[D('flags' int)])\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x003a|0x003a: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|0x003c: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x003e|0x003e: NEW_INSTANCE  (r5 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x0040: INVOKE  (r5 I:android.text.style.StyleSpan), (r3 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x0043: INVOKE  \l  (r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder)])\l  (r5 I:java.lang.Object)\l  (r10 I:int A[D('start' int)])\l  (r11 I:int A[D('end' int)])\l  (r0 I:int A[D('flags' int)])\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isItalic' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001d \l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|0x0049: NEW_INSTANCE  (r5 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x004b: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x004c: INVOKE  (r5 I:android.text.style.StyleSpan), (r6 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x004f: INVOKE  \l  (r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder)])\l  (r5 I:java.lang.Object)\l  (r10 I:int A[D('start' int)])\l  (r11 I:int A[D('end' int)])\l  (r0 I:int A[D('flags' int)])\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0053|0x0053: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static void com.google.android.exoplayer2.text.tx3g.Tx3gDecoder.attachFontFace((r7 I:android.text.SpannableStringBuilder A[D('cueText' android.text.SpannableStringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('fontFace' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('defaultFontFace' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('spanPriority' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0006\-0x0039: r0 'flags' int\l  0x000b\-0x0039: r1 'isBold' boolean\l  0x0010\-0x0039: r2 'isItalic' boolean\l  0x0021\-0x0039: r3 'isUnderlined' boolean\l  0x003a\-0x0054: r0 'flags' int\l  0x003c\-0x0054: r1 'isBold' boolean\l  0x003e\-0x0054: r2 'isItalic' boolean\l  ?\-0x0054: r7 'cueText' android.text.SpannableStringBuilder\l  ?\-0x0054: r8 'fontFace' int\l  ?\-0x0054: r9 'defaultFontFace' int\l  ?\-0x0054: r10 'start' int\l  ?\-0x0054: r11 'end' int\l  ?\-0x0054: r12 'spanPriority' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_20;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_20 -> Node_5;
Node_21 -> Node_8;
Node_22 -> Node_11;
Node_23 -> Node_11;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_11;
Node_25 -> Node_13;
}

