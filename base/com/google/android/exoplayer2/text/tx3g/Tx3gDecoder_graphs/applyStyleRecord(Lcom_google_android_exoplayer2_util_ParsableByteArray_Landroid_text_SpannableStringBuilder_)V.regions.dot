digraph "CFG forcom.google.android.exoplayer2.text.tx3g.Tx3gDecoder.applyStyleRecord(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;Landroid\/text\/SpannableStringBuilder;)V" {
subgraph cluster_Region_117550395 {
label = "R(2:(1:2)(1:5)|3) | DECL_VAR: boolean null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_157426813 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r13.bytesLeft() \>= 12) goto L_0x000a\l}"];
subgraph cluster_Region_854128581 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|r0 = true\l}"];
}
subgraph cluster_Region_2060971661 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0035|r0 = false\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v5 boolean) binds: [B:5:0x0035, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|assertTrue(r0)\lint int r3 = r13.readUnsignedShort()\lint int r4 = r13.readUnsignedShort()\lr13.skipBytes(2)\lint int r1 = r13.readUnsignedByte()\lr13.skipBytes(1)\lint int r7 = r13.readInt()\lattachFontFace(r14, r1, r12.defaultFontFace, r3, r4, 0)\lattachColor(r14, r7, r12.defaultColorRgba, r3, r4, 0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0034}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.text.tx3g.Tx3gDecoder.applyStyleRecord((r12v0 'this' com.google.android.exoplayer2.text.tx3g.Tx3gDecoder A[IMMUTABLE_TYPE, THIS]), (r13v0 'parsableByteArray' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'cueText' android.text.SpannableStringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.text.SubtitleDecoderException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_5 -> Node_3;
Node_3 -> Node_4;
Node_0 -> Node_1;
}

