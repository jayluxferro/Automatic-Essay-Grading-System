digraph "CFG forcom.google.android.exoplayer2.text.subrip.SubripDecoder.decode([BIZ)Lcom\/google\/android\/exoplayer2\/text\/subrip\/SubripSubtitle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r2 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r0 I:com.google.android.exoplayer2.util.LongArray) =  com.google.android.exoplayer2.util.LongArray \l0x0007: INVOKE  (r0 I:com.google.android.exoplayer2.util.LongArray) com.google.android.exoplayer2.util.LongArray.\<init\>():void type: DIRECT \l0x000a: NEW_INSTANCE  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray) =  com.google.android.exoplayer2.util.ParsableByteArray \l0x000c: INVOKE  \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray)\l  (r14 I:byte[] A[D('bytes' byte[])])\l  (r15 I:int A[D('length' int)])\l com.google.android.exoplayer2.util.ParsableByteArray.\<init\>(byte[], int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r4 I:java.lang.String) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('subripData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentLine' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00c2 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r10 I:int) = \l  (r4 I:java.lang.String A[D('currentLine' java.lang.String)])\l java.lang.String.length():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|SYNTHETIC\lSplitter:B:5:0x001b\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x001b\l|0x001b: INVOKE  \l  (r4 I:java.lang.String A[D('currentLine' java.lang.String)])\l java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0074 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: INVOKE  (r4 I:java.lang.String A[D('currentLine' java.lang.String)]) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('subripData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l0x0023: SGET  (r10 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.text.subrip.SubripDecoder.SUBRIP_TIMING_LINE java.util.regex.Pattern \l0x0025: INVOKE  (r7 I:java.util.regex.Matcher) = \l  (r10 I:java.util.regex.Pattern)\l  (r4 I:java.lang.CharSequence A[D('currentLine' java.lang.String)])\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0029: INVOKE  (r10 I:boolean) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008e \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0030: INVOKE  (r10 I:long) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r10 I:int)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.parseTimecode(java.util.regex.Matcher, int):long type: STATIC \l0x0034: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.LongArray A[D('cueTimesUs' com.google.android.exoplayer2.util.LongArray)])\l  (r10 I:long)\l com.google.android.exoplayer2.util.LongArray.add(long):void type: VIRTUAL \l0x0037: CONST  (r10 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0038: INVOKE  (r10 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r10 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x003c: INVOKE  (r10 I:boolean) = (r10 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|0x0042: CONST  (r6 I:?[boolean, int, float, short, byte, char] A[D('haveEndTimecode' boolean)]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0043: CONST  (r10 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0044: INVOKE  (r10 I:long) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r10 I:int)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.parseTimecode(java.util.regex.Matcher, int):long type: STATIC \l0x0048: INVOKE  \l  (r0 I:com.google.android.exoplayer2.util.LongArray A[D('cueTimesUs' com.google.android.exoplayer2.util.LongArray)])\l  (r10 I:long)\l com.google.android.exoplayer2.util.LongArray.add(long):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: IGET  (r10 I:java.lang.StringBuilder) = \l  (r13 I:com.google.android.exoplayer2.text.subrip.SubripDecoder)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.textBuilder java.lang.StringBuilder \l0x004d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:int) java.lang.StringBuilder.setLength(int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0051|0x0051: INVOKE  (r4 I:java.lang.String A[D('currentLine' java.lang.String)]) = \l  (r8 I:com.google.android.exoplayer2.util.ParsableByteArray A[D('subripData' com.google.android.exoplayer2.util.ParsableByteArray)])\l com.google.android.exoplayer2.util.ParsableByteArray.readLine():java.lang.String type: VIRTUAL \l0x0055: INVOKE  (r10 I:boolean) = \l  (r4 I:java.lang.CharSequence A[D('currentLine' java.lang.String)])\l android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|0x0059: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00a8 \l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|0x005b: IGET  (r10 I:java.lang.StringBuilder) = \l  (r13 I:com.google.android.exoplayer2.text.subrip.SubripDecoder)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.textBuilder java.lang.StringBuilder \l0x005d: INVOKE  (r10 I:int) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.length():int type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x006a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|0x0063: IGET  (r10 I:java.lang.StringBuilder) = \l  (r13 I:com.google.android.exoplayer2.text.subrip.SubripDecoder)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.textBuilder java.lang.StringBuilder \l0x0065: CONST_STR  (r11 I:java.lang.String) =  \"\<br\>\" \l0x0067: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x006a|0x006a: IGET  (r10 I:java.lang.StringBuilder) = \l  (r13 I:com.google.android.exoplayer2.text.subrip.SubripDecoder)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.textBuilder java.lang.StringBuilder \l0x006c: INVOKE  (r11 I:java.lang.String) = \l  (r4 I:java.lang.String A[D('currentLine' java.lang.String)])\l java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0070: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0074|ExcHandler: NumberFormatException null\lSplitter:B:5:0x001b\l|0x0074: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|0x0075: CONST_STR  (r10 I:java.lang.String) =  \"SubripDecoder\" \l0x0077: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0079: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007c: CONST_STR  (r12 I:java.lang.String) =  \"Skipping invalid index: \" \l0x007e: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0082: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r4 I:java.lang.String A[D('currentLine' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0086: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008a: INVOKE  (r10 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x008e|0x008e: CONST_STR  (r10 I:java.lang.String) =  \"SubripDecoder\" \l0x0090: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0092: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0095: CONST_STR  (r12 I:java.lang.String) =  \"Skipping invalid timing: \" \l0x0097: INVOKE  (r11 I:java.lang.StringBuilder) = (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009b: INVOKE  (r11 I:java.lang.StringBuilder) = \l  (r11 I:java.lang.StringBuilder)\l  (r4 I:java.lang.String A[D('currentLine' java.lang.String)])\l java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009f: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a3: INVOKE  (r10 I:java.lang.String), (r11 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a8|0x00a8: IGET  (r10 I:java.lang.StringBuilder) = \l  (r13 I:com.google.android.exoplayer2.text.subrip.SubripDecoder)\l com.google.android.exoplayer2.text.subrip.SubripDecoder.textBuilder java.lang.StringBuilder \l0x00aa: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00ae: INVOKE  (r9 I:android.text.Spanned) = (r10 I:java.lang.String) android.text.Html.fromHtml(java.lang.String):android.text.Spanned type: STATIC \l0x00b2: NEW_INSTANCE  (r10 I:com.google.android.exoplayer2.text.Cue) =  com.google.android.exoplayer2.text.Cue \l0x00b4: INVOKE  \l  (r10 I:com.google.android.exoplayer2.text.Cue)\l  (r9 I:java.lang.CharSequence A[D('text' android.text.Spanned)])\l com.google.android.exoplayer2.text.Cue.\<init\>(java.lang.CharSequence):void type: DIRECT \l0x00b7: INVOKE  \l  (r2 I:java.util.ArrayList A[D('cues' java.util.ArrayList\<com.google.android.exoplayer2.text.Cue\>)])\l  (r10 I:java.lang.Object)\l java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x00ba|0x00ba: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('haveEndTimecode' boolean)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000f \l}"];
Node_24 [shape=record,label="{24\:\ 0x00bc|0x00bc: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bd: INVOKE  \l  (r2 I:java.util.ArrayList A[D('cues' java.util.ArrayList\<com.google.android.exoplayer2.text.Cue\>)])\l  (r10 I:java.lang.Object)\l java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c2|0x00c2: INVOKE  (r10 I:int) = \l  (r2 I:java.util.ArrayList A[D('cues' java.util.ArrayList\<com.google.android.exoplayer2.text.Cue\>)])\l java.util.ArrayList.size():int type: VIRTUAL \l0x00c6: NEW_ARRAY  (r3 I:com.google.android.exoplayer2.text.Cue[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.text.Cue[] \l0x00c8: INVOKE  \l  (r2 I:java.util.ArrayList A[D('cues' java.util.ArrayList\<com.google.android.exoplayer2.text.Cue\>)])\l  (r3 I:java.lang.Object[] A[D('cuesArray' com.google.android.exoplayer2.text.Cue[])])\l java.util.ArrayList.toArray(java.lang.Object[]):java.lang.Object[] type: VIRTUAL \l0x00cb: INVOKE  (r1 I:long[]) = \l  (r0 I:com.google.android.exoplayer2.util.LongArray A[D('cueTimesUs' com.google.android.exoplayer2.util.LongArray)])\l com.google.android.exoplayer2.util.LongArray.toArray():long[] type: VIRTUAL \l0x00cf: NEW_INSTANCE  (r10 I:com.google.android.exoplayer2.text.subrip.SubripSubtitle) =  com.google.android.exoplayer2.text.subrip.SubripSubtitle \l0x00d1: INVOKE  \l  (r10 I:com.google.android.exoplayer2.text.subrip.SubripSubtitle)\l  (r3 I:com.google.android.exoplayer2.text.Cue[] A[D('cuesArray' com.google.android.exoplayer2.text.Cue[])])\l  (r1 I:long[] A[D('cueTimesUsArray' long[])])\l com.google.android.exoplayer2.text.subrip.SubripSubtitle.\<init\>(com.google.android.exoplayer2.text.Cue[], long[]):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d4|0x00d4: RETURN  \l  (r10 I:com.google.android.exoplayer2.text.subrip.SubripSubtitle)\l \l}"];
MethodNode[shape=record,label="{protected com.google.android.exoplayer2.text.subrip.SubripSubtitle com.google.android.exoplayer2.text.subrip.SubripDecoder.decode((r13 'this' I:com.google.android.exoplayer2.text.subrip.SubripDecoder A[IMMUTABLE_TYPE, THIS]), (r14 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:boolean A[D('reset' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001f\-0x0074: r6 'haveEndTimecode' boolean\l  0x0029\-0x0074: r7 'matcher' java.util.regex.Matcher\l  0x0075\-0x008e: r5 'e' java.lang.NumberFormatException\l  0x008e\-0x00c2: r6 'haveEndTimecode' boolean\l  0x008e\-0x00c2: r7 'matcher' java.util.regex.Matcher\l  0x00b2\-0x00c2: r9 'text' android.text.Spanned\l  0x000a\-0x00d4: r0 'cueTimesUs' com.google.android.exoplayer2.util.LongArray\l  0x00cf\-0x00d4: r1 'cueTimesUsArray' long[]\l  0x0005\-0x00d4: r2 'cues' java.util.ArrayList\<com.google.android.exoplayer2.text.Cue\>\l  0x00c8\-0x00d4: r3 'cuesArray' com.google.android.exoplayer2.text.Cue[]\l  0x0013\-0x00d4: r4 'currentLine' java.lang.String\l  0x000f\-0x00d4: r8 'subripData' com.google.android.exoplayer2.util.ParsableByteArray\l  ?\-0x00d4: r14 'bytes' byte[]\l  ?\-0x00d4: r15 'length' int\l  ?\-0x00d4: r16 'reset' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_6 -> Node_19;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_21;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_21 -> Node_1;
Node_22 -> Node_23;
Node_23 -> Node_1;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_1;
Node_25 -> Node_26;
}

