digraph "CFG forcom.google.android.exoplayer2.text.subrip.SubripDecoder.parseTimecode(Ljava\/util\/regex\/Matcher;I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (60 ?[long, double]) \l0x0002: CONST  (r4 I:?[long, double]) = (1000(0x3e8, double:4.94E\-321) ?[long, double]) \l0x0004: ARITH  (r2 I:int) = (r9 I:int A[D('groupOffset' int)]) + (1 int) \l0x0006: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r2 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r2 I:long) = (r2 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x000e: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x000f: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x0010: ARITH  (r0 I:long) = (r2 I:long) * (r4 I:long) \l0x0012: ARITH  (r2 I:int) = (r9 I:int A[D('groupOffset' int)]) + (2 int) \l0x0014: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r2 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0018: INVOKE  (r2 I:long) = (r2 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x001c: ARITH  (r2 I:long) = (r2 I:long) * (r6 I:long) \l0x001d: ARITH  (r2 I:long) = (r2 I:long) * (r4 I:long) \l0x001e: ARITH  (r0 I:long A[D('timestampMs' long)]) = (r0 I:long A[D('timestampMs' long)]) + (r2 I:long) \l0x001f: ARITH  (r2 I:int) = (r9 I:int A[D('groupOffset' int)]) + (3 int) \l0x0021: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r2 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0025: INVOKE  (r2 I:long) = (r2 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x0029: ARITH  (r2 I:long) = (r2 I:long) * (r4 I:long) \l0x002a: ARITH  (r0 I:long A[D('timestampMs' long)]) = (r0 I:long A[D('timestampMs' long)]) + (r2 I:long) \l0x002b: ARITH  (r2 I:int) = (r9 I:int A[D('groupOffset' int)]) + (4 int) \l0x002d: INVOKE  (r2 I:java.lang.String) = \l  (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r2 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0031: INVOKE  (r2 I:long) = (r2 I:java.lang.String) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x0035: ARITH  (r0 I:long A[D('timestampMs' long)]) = (r0 I:long A[D('timestampMs' long)]) + (r2 I:long) \l0x0036: ARITH  (r2 I:long) = (r0 I:long A[D('timestampMs' long)]) * (r4 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{private static long com.google.android.exoplayer2.text.subrip.SubripDecoder.parseTimecode((r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('groupOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0012\-0x0038: r0 'timestampMs' long\l  ?\-0x0038: r8 'matcher' java.util.regex.Matcher\l  ?\-0x0038: r9 'groupOffset' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

