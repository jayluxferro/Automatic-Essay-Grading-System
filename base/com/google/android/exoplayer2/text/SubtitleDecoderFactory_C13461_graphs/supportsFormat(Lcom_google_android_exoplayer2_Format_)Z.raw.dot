digraph "CFG forcom.google.android.exoplayer2.text.SubtitleDecoderFactory.1.supportsFormat(Lcom\/google\/android\/exoplayer2\/Format;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = \l  (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format)])\l com.google.android.exoplayer2.Format.sampleMimeType java.lang.String \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"text\/vtt\" \l0x0004: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r1 I:java.lang.String) =  \"application\/ttml+xml\" \l0x000c: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST_STR  (r1 I:java.lang.String) =  \"application\/x\-mp4\-vtt\" \l0x0014: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST_STR  (r1 I:java.lang.String) =  \"application\/x\-subrip\" \l0x001c: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: CONST_STR  (r1 I:java.lang.String) =  \"application\/x\-quicktime\-tx3g\" \l0x0024: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CONST_STR  (r1 I:java.lang.String) =  \"application\/cea\-608\" \l0x002c: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: CONST_STR  (r1 I:java.lang.String) =  \"application\/x\-mp4\-cea\-608\" \l0x0034: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: CONST_STR  (r1 I:java.lang.String) =  \"application\/cea\-708\" \l0x003c: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: CONST_STR  (r1 I:java.lang.String) =  \"application\/dvbsubs\" \l0x0044: INVOKE  (r1 I:boolean) = \l  (r1 I:java.lang.String)\l  (r0 I:java.lang.Object A[D('mimeType' java.lang.String)])\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x004c \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: RETURN  (r1 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|0x004c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.exoplayer2.text.SubtitleDecoderFactory.1.supportsFormat((r2 'this' I:com.google.android.exoplayer2.text.SubtitleDecoderFactory$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:com.google.android.exoplayer2.Format A[D('format' com.google.android.exoplayer2.Format), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0002\-0x004d: r0 'mimeType' java.lang.String\l  ?\-0x004d: r3 'format' com.google.android.exoplayer2.Format\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_19;
}

