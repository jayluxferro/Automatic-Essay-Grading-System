digraph "CFG forcom.google.android.exoplayer2.text.ttml.TtmlNode.addChild(Lcom\/google\/android\/exoplayer2\/text\/ttml\/TtmlNode;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.text.ttml.TtmlNode\>) = (r1 I:com.google.android.exoplayer2.text.ttml.TtmlNode) com.google.android.exoplayer2.text.ttml.TtmlNode.children java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0009: IPUT  \l  (r0 I:java.util.List\<com.google.android.exoplayer2.text.ttml.TtmlNode\>)\l  (r1 I:com.google.android.exoplayer2.text.ttml.TtmlNode)\l com.google.android.exoplayer2.text.ttml.TtmlNode.children java.util.List \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.text.ttml.TtmlNode\>) = (r1 I:com.google.android.exoplayer2.text.ttml.TtmlNode) com.google.android.exoplayer2.text.ttml.TtmlNode.children java.util.List \l0x000d: INVOKE  \l  (r0 I:java.util.List)\l  (r2 I:java.lang.Object A[D('child' com.google.android.exoplayer2.text.ttml.TtmlNode)])\l java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.text.ttml.TtmlNode.addChild((r1 'this' I:com.google.android.exoplayer2.text.ttml.TtmlNode A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.exoplayer2.text.ttml.TtmlNode A[D('child' com.google.android.exoplayer2.text.ttml.TtmlNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0010: r2 'child' com.google.android.exoplayer2.text.ttml.TtmlNode\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

