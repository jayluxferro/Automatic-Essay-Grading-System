digraph "CFG forcom.google.android.exoplayer2.text.ttml.TtmlNode.getChild(I)Lcom\/google\/android\/exoplayer2\/text\/ttml\/TtmlNode;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.text.ttml.TtmlNode\>) = (r1 I:com.google.android.exoplayer2.text.ttml.TtmlNode) com.google.android.exoplayer2.text.ttml.TtmlNode.children java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException \l0x0006: INVOKE  (r0 I:java.lang.IndexOutOfBoundsException) java.lang.IndexOutOfBoundsException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:java.util.List\<com.google.android.exoplayer2.text.ttml.TtmlNode\>) = (r1 I:com.google.android.exoplayer2.text.ttml.TtmlNode) com.google.android.exoplayer2.text.ttml.TtmlNode.children java.util.List \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int A[D('index' int)]) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlNode) = (com.google.android.exoplayer2.text.ttml.TtmlNode) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlNode) \l}"];
MethodNode[shape=record,label="{public com.google.android.exoplayer2.text.ttml.TtmlNode com.google.android.exoplayer2.text.ttml.TtmlNode.getChild((r1 'this' I:com.google.android.exoplayer2.text.ttml.TtmlNode A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x0012: r2 'index' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

