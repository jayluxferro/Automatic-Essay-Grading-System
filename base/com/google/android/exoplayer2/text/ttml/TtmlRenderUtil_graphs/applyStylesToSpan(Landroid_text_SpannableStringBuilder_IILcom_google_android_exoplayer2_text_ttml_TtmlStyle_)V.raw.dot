digraph "CFG forcom.google.android.exoplayer2.text.ttml.TtmlRenderUtil.applyStylesToSpan(Landroid\/text\/SpannableStringBuilder;IILcom\/google\/android\/exoplayer2\/text\/ttml\/TtmlStyle;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getStyle():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:android.text.style.StyleSpan) =  android.text.style.StyleSpan \l0x000b: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getStyle():int type: VIRTUAL \l0x000f: INVOKE  (r0 I:android.text.style.StyleSpan), (r1 I:int) android.text.style.StyleSpan.\<init\>(int):void type: DIRECT \l0x0012: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.isLinethrough():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:android.text.style.StrikethroughSpan) =  android.text.style.StrikethroughSpan \l0x001d: INVOKE  (r0 I:android.text.style.StrikethroughSpan) android.text.style.StrikethroughSpan.\<init\>():void type: DIRECT \l0x0020: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  (r0 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.isUnderline():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: NEW_INSTANCE  (r0 I:android.text.style.UnderlineSpan) =  android.text.style.UnderlineSpan \l0x002b: INVOKE  (r0 I:android.text.style.UnderlineSpan) android.text.style.UnderlineSpan.\<init\>():void type: DIRECT \l0x002e: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: INVOKE  (r0 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.hasFontColor():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0043 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:android.text.style.ForegroundColorSpan) =  android.text.style.ForegroundColorSpan \l0x0039: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontColor():int type: VIRTUAL \l0x003d: INVOKE  (r0 I:android.text.style.ForegroundColorSpan), (r1 I:int) android.text.style.ForegroundColorSpan.\<init\>(int):void type: DIRECT \l0x0040: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: INVOKE  (r0 I:boolean) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.hasBackgroundColor():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: NEW_INSTANCE  (r0 I:android.text.style.BackgroundColorSpan) =  android.text.style.BackgroundColorSpan \l0x004b: INVOKE  (r1 I:int) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getBackgroundColor():int type: VIRTUAL \l0x004f: INVOKE  (r0 I:android.text.style.BackgroundColorSpan), (r1 I:int) android.text.style.BackgroundColorSpan.\<init\>(int):void type: DIRECT \l0x0052: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: INVOKE  (r0 I:java.lang.String) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontFamily():java.lang.String type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0067 \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: NEW_INSTANCE  (r0 I:android.text.style.TypefaceSpan) =  android.text.style.TypefaceSpan \l0x005d: INVOKE  (r1 I:java.lang.String) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontFamily():java.lang.String type: VIRTUAL \l0x0061: INVOKE  \l  (r0 I:android.text.style.TypefaceSpan)\l  (r1 I:java.lang.String)\l android.text.style.TypefaceSpan.\<init\>(java.lang.String):void type: DIRECT \l0x0064: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0067|0x0067: INVOKE  (r0 I:android.text.Layout$Alignment) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getTextAlign():android.text.Layout$Alignment type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x006b|0x006b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0079 \l}"];
Node_20 [shape=record,label="{20\:\ 0x006d|0x006d: NEW_INSTANCE  (r0 I:android.text.style.AlignmentSpan$Standard) =  android.text.style.AlignmentSpan$Standard \l0x006f: INVOKE  (r1 I:android.text.Layout$Alignment) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getTextAlign():android.text.Layout$Alignment type: VIRTUAL \l0x0073: INVOKE  \l  (r0 I:android.text.style.AlignmentSpan$Standard)\l  (r1 I:android.text.Layout$Alignment)\l android.text.style.AlignmentSpan.Standard.\<init\>(android.text.Layout$Alignment):void type: DIRECT \l0x0076: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0079|0x0079: INVOKE  (r0 I:int) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontSizeUnit():int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x007d|0x007d: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0081, 0x0090, 0x009d] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0080|0x0080: RETURN   \l}"];
Node_24 [shape=record,label="{24\:\ 0x0081|0x0081: NEW_INSTANCE  (r0 I:android.text.style.AbsoluteSizeSpan) =  android.text.style.AbsoluteSizeSpan \l0x0083: INVOKE  (r1 I:float) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontSize():float type: VIRTUAL \l0x0087: CAST  (r1 I:int) = (int) (r1 I:float) \l0x0088: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0089: INVOKE  \l  (r0 I:android.text.style.AbsoluteSizeSpan)\l  (r1 I:int)\l  (r2 I:boolean)\l android.text.style.AbsoluteSizeSpan.\<init\>(int, boolean):void type: DIRECT \l0x008c: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0090|0x0090: NEW_INSTANCE  (r0 I:android.text.style.RelativeSizeSpan) =  android.text.style.RelativeSizeSpan \l0x0092: INVOKE  (r1 I:float) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontSize():float type: VIRTUAL \l0x0096: INVOKE  (r0 I:android.text.style.RelativeSizeSpan), (r1 I:float) android.text.style.RelativeSizeSpan.\<init\>(float):void type: DIRECT \l0x0099: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x009d|0x009d: NEW_INSTANCE  (r0 I:android.text.style.RelativeSizeSpan) =  android.text.style.RelativeSizeSpan \l0x009f: INVOKE  (r1 I:float) = \l  (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle)])\l com.google.android.exoplayer2.text.ttml.TtmlStyle.getFontSize():float type: VIRTUAL \l0x00a3: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1120403456(0x42c80000, float:100.0) ?[int, float, short, byte, char])\l \l0x00a5: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x00a6: INVOKE  (r0 I:android.text.style.RelativeSizeSpan), (r1 I:float) android.text.style.RelativeSizeSpan.\<init\>(float):void type: DIRECT \l0x00a9: INVOKE  \l  (r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder)])\l  (r0 I:java.lang.Object)\l  (r5 I:int A[D('start' int)])\l  (r6 I:int A[D('end' int)])\l  (r3 I:int)\l android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public static void com.google.android.exoplayer2.text.ttml.TtmlRenderUtil.applyStylesToSpan((r4 I:android.text.SpannableStringBuilder A[D('builder' android.text.SpannableStringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.google.android.exoplayer2.text.ttml.TtmlStyle A[D('style' com.google.android.exoplayer2.text.ttml.TtmlStyle), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  ?\-0x00b7: r4 'builder' android.text.SpannableStringBuilder\l  ?\-0x00b7: r5 'start' int\l  ?\-0x00b7: r6 'end' int\l  ?\-0x00b7: r7 'style' com.google.android.exoplayer2.text.ttml.TtmlStyle\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_22 -> Node_25;
Node_22 -> Node_26;
Node_24 -> Node_23;
Node_25 -> Node_23;
Node_26 -> Node_23;
}

