digraph "CFG forcom.google.android.exoplayer2.text.ttml.TtmlDecoder.parseTimeExpression(Ljava\/lang\/String;Lcom\/google\/android\/exoplayer2\/text\/ttml\/TtmlDecoder$FrameAndTickRate;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r15 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.text.ttml.TtmlDecoder.CLOCK_TIME java.util.regex.Pattern \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('time' java.lang.String)]) \l0x0004: INVOKE  (r7 I:java.util.regex.Matcher) = \l  (r15 I:java.util.regex.Pattern)\l  (r0 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0008: INVOKE  (r15 I:boolean) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x00a4 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  (r6 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0013: INVOKE  (r16 I:long) = (r6 I:java.lang.String A[D('hours' java.lang.String)]) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x0017: CONST  (r18 I:?[long, double]) = (3600(0xe10, double:1.7786E\-320) ?[long, double]) \l0x0019: ARITH  (r16 I:long) = (r16 I:long) * (r18 I:long) \l0x001b: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x001d: CAST  (r2 I:double) = (double) (r0 I:long) \l0x001e: CONST  (r15 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001f: INVOKE  (r8 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r16 I:long) = (r8 I:java.lang.String A[D('minutes' java.lang.String)]) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x0027: CONST  (r18 I:?[long, double]) = (60 ?[long, double]) \l0x0029: ARITH  (r16 I:long) = (r16 I:long) * (r18 I:long) \l0x002b: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x002d: CAST  (r0 I:double) = (double) (r0 I:long) \l0x002e: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x0030: ARITH  (r2 I:double A[D('durationSeconds' double)]) = (r2 I:double A[D('durationSeconds' double)]) + (r16 I:double) \l0x0032: CONST  (r15 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0033: INVOKE  (r9 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0037: INVOKE  (r16 I:long) = (r9 I:java.lang.String A[D('seconds' java.lang.String)]) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x003b: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x003d: CAST  (r0 I:double) = (double) (r0 I:long) \l0x003e: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x0040: ARITH  (r2 I:double A[D('durationSeconds' double)]) = (r2 I:double A[D('durationSeconds' double)]) + (r16 I:double) \l0x0042: CONST  (r15 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0043: INVOKE  (r4 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0047|0x0047: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fraction' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x009b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0049|0x0049: INVOKE  (r16 I:double) = (r4 I:java.lang.String A[D('fraction' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|0x004d: ARITH  (r2 I:double A[D('durationSeconds' double)]) = (r2 I:double A[D('durationSeconds' double)]) + (r16 I:double) \l0x004f: CONST  (r15 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0050: INVOKE  (r5 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0054|0x0054: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frames' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x009e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0056|0x0056: INVOKE  (r16 I:long) = (r5 I:java.lang.String A[D('frames' java.lang.String)]) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x005a: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x005c: CAST  (r15 I:float) = (float) (r0 I:long) \l0x005d: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)])\l \l0x005f: IGET  (r0 I:float) = \l  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)\l com.google.android.exoplayer2.text.ttml.TtmlDecoder.FrameAndTickRate.effectiveFrameRate float \l0x0061: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0063: ARITH  (r15 I:float) = (r15 I:float) \/ (r16 I:float) \l0x0065: CAST  (r0 I:double) = (double) (r15 I:float) \l0x0066: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0068|0x0068: ARITH  (r2 I:double A[D('durationSeconds' double)]) = (r2 I:double A[D('durationSeconds' double)]) + (r16 I:double) \l0x006a: CONST  (r15 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x006b: INVOKE  (r12 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x006f|0x006f: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('subframes' java.lang.String)]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x00a1 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0071|0x0071: INVOKE  (r16 I:long) = (r12 I:java.lang.String A[D('subframes' java.lang.String)]) java.lang.Long.parseLong(java.lang.String):long type: STATIC \l0x0075: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x0077: CAST  (r0 I:double) = (double) (r0 I:long) \l0x0078: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x007a: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)])\l \l0x007c: IGET  (r15 I:int) = \l  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)\l com.google.android.exoplayer2.text.ttml.TtmlDecoder.FrameAndTickRate.subFrameRate int \l0x007e: CAST  (r0 I:double) = (double) (r15 I:int) \l0x007f: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x0081: ARITH  (r16 I:double) = (r16 I:double) \/ (r18 I:double) \l0x0083: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)])\l \l0x0085: IGET  (r15 I:float) = \l  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)\l com.google.android.exoplayer2.text.ttml.TtmlDecoder.FrameAndTickRate.effectiveFrameRate float \l0x0087: CAST  (r0 I:double) = (double) (r15 I:float) \l0x0088: MOVE  (r18 I:?[long, double]) = (r0 I:?[long, double]) \l0x008a: ARITH  (r16 I:double) = (r16 I:double) \/ (r18 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x008c|0x008c: ARITH  (r2 I:double A[D('durationSeconds' double)]) = (r2 I:double A[D('durationSeconds' double)]) + (r16 I:double) \l0x008e: CONST  (r16 I:?[long, double]) = \l  (4696837146684686336(0x412e848000000000, double:1000000.0) ?[long, double])\l \l0x0093: ARITH  (r16 I:double) = (r16 I:double) * (r2 I:double A[D('durationSeconds' double)]) \l0x0095: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x0097: CAST  (r0 I:long) = (long) (r0 I:double) \l0x0098: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x009a|0x009a: RETURN  (r16 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x009b|0x009b: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x009e|0x009e: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a1|0x00a1: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a4|0x00a4: SGET  (r15 I:java.util.regex.Pattern) =  com.google.android.exoplayer2.text.ttml.TtmlDecoder.OFFSET_TIME java.util.regex.Pattern \l0x00a6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('time' java.lang.String)]) \l0x00a8: INVOKE  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) = \l  (r15 I:java.util.regex.Pattern)\l  (r0 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x00ac: INVOKE  (r15 I:boolean) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x00b0|0x00b0: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0149 \l}"];
Node_18 [shape=record,label="{18\:\ 0x00b2|0x00b2: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00b3: INVOKE  (r13 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x00b7: INVOKE  (r10 I:double) = (r13 I:java.lang.String A[D('timeValue' java.lang.String)]) java.lang.Double.parseDouble(java.lang.String):double type: STATIC \l0x00bb: CONST  (r15 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00bc: INVOKE  (r14 I:java.lang.String) = \l  (r7 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r15 I:int)\l java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x00c0: CONST  (r15 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x00c1: INVOKE  (r16 I:int) = (r14 I:java.lang.String A[D('unit' java.lang.String)]) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x00c5|0x00c5: SWITCH  \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[102, 104, 109, 115, 116, 3494] t:[0x0108, 0x00d8, 0x00e4, 0x00f0, 0x0114, 0x00fc] \l}"];
Node_20 [shape=record,label="{20\:\ 0x00c8|0x00c8: SWITCH  \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5] t:[0x0120, 0x0128, 0x00cb, 0x012d, 0x0135, 0x013f] \l}"];
Node_21 [shape=record,label="{21\:\ 0x00cb|0x00cb: CONST  (r16 I:?[long, double]) = \l  (4696837146684686336(0x412e848000000000, double:1000000.0) ?[long, double])\l \l0x00d0: ARITH  (r16 I:double) = (r16 I:double) * (r10 I:double A[D('offsetSeconds' double)]) \l0x00d2: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x00d4: CAST  (r0 I:long) = (long) (r0 I:double) \l0x00d5: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00d8|0x00d8: CONST_STR  (r16 I:java.lang.String) =  \"h\" \l0x00da: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00dc: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x00e0|0x00e0: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_24 [shape=record,label="{24\:\ 0x00e2|0x00e2: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x00e4|0x00e4: CONST_STR  (r16 I:java.lang.String) =  \"m\" \l0x00e6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00e8: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x00ec|0x00ec: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ee|0x00ee: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00f0|0x00f0: CONST_STR  (r16 I:java.lang.String) =  \"s\" \l0x00f2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00f4: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x00f8|0x00f8: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00fa|0x00fa: CONST  (r15 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00fc|0x00fc: CONST_STR  (r16 I:java.lang.String) =  \"ms\" \l0x00fe: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0100: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x0104|0x0104: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0106|0x0106: CONST  (r15 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0108|0x0108: CONST_STR  (r16 I:java.lang.String) =  \"f\" \l0x010a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x010c: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x0110|0x0110: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0112|0x0112: CONST  (r15 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0114|0x0114: CONST_STR  (r16 I:java.lang.String) =  \"t\" \l0x0116: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0118: INVOKE  (r16 I:boolean) = \l  (r14 I:java.lang.String A[D('unit' java.lang.String)])\l  (r0 I:java.lang.Object)\l java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x011c|0x011c: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00c8 \l}"];
Node_39 [shape=record,label="{39\:\ 0x011e|0x011e: CONST  (r15 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0120|0x0120: CONST  (r16 I:?[long, double]) = \l  (4660134898793709568(0x40ac200000000000, double:3600.0) ?[long, double])\l \l0x0125: ARITH  (r10 I:double A[D('offsetSeconds' double)]) = (r10 I:double A[D('offsetSeconds' double)]) * (r16 I:double) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0128|0x0128: CONST  (r16 I:?[long, double]) = \l  (4633641066610819072(0x404e000000000000, double:60.0) ?[long, double])\l \l0x012a: ARITH  (r10 I:double A[D('offsetSeconds' double)]) = (r10 I:double A[D('offsetSeconds' double)]) * (r16 I:double) \l}"];
Node_42 [shape=record,label="{42\:\ 0x012d|0x012d: CONST  (r16 I:?[long, double]) = \l  (4652007308841189376(0x408f400000000000, double:1000.0) ?[long, double])\l \l0x0132: ARITH  (r10 I:double A[D('offsetSeconds' double)]) = (r10 I:double A[D('offsetSeconds' double)]) \/ (r16 I:double) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0135|0x0135: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)])\l \l0x0137: IGET  (r15 I:float) = \l  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)\l com.google.android.exoplayer2.text.ttml.TtmlDecoder.FrameAndTickRate.effectiveFrameRate float \l0x0139: CAST  (r0 I:double) = (double) (r15 I:float) \l0x013a: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x013c: ARITH  (r10 I:double A[D('offsetSeconds' double)]) = (r10 I:double A[D('offsetSeconds' double)]) \/ (r16 I:double) \l}"];
Node_44 [shape=record,label="{44\:\ 0x013f|0x013f: MOVE  (r0 I:?[OBJECT, ARRAY]) = \l  (r21 I:?[OBJECT, ARRAY] A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)])\l \l0x0141: IGET  (r15 I:int) = \l  (r0 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate)\l com.google.android.exoplayer2.text.ttml.TtmlDecoder.FrameAndTickRate.tickRate int \l0x0143: CAST  (r0 I:double) = (double) (r15 I:int) \l0x0144: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x0146: ARITH  (r10 I:double A[D('offsetSeconds' double)]) = (r10 I:double A[D('offsetSeconds' double)]) \/ (r16 I:double) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0149|0x0149: NEW_INSTANCE  (r15 I:com.google.android.exoplayer2.text.SubtitleDecoderException) =  com.google.android.exoplayer2.text.SubtitleDecoderException \l0x014b: NEW_INSTANCE  (r16 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x014d: INVOKE  (r16 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0150: CONST_STR  (r17 I:java.lang.String) =  \"Malformed time expression: \" \l0x0152: INVOKE  (r16 I:java.lang.StringBuilder) = (r16 I:java.lang.StringBuilder), (r17 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0156: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0158: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY] A[D('time' java.lang.String)]) \l0x015a: INVOKE  (r16 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x015e: INVOKE  (r16 I:java.lang.String) = (r16 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0162: INVOKE  \l  (r15 I:com.google.android.exoplayer2.text.SubtitleDecoderException)\l  (r16 I:java.lang.String)\l com.google.android.exoplayer2.text.SubtitleDecoderException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_46 [shape=record,label="{46\:\ 0x0165|0x0165: THROW  (r15 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static long com.google.android.exoplayer2.text.ttml.TtmlDecoder.parseTimeExpression((r20 I:java.lang.String A[D('time' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate A[D('frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x001e\-0x009a: r2 'durationSeconds' double\l  0x0047\-0x009a: r4 'fraction' java.lang.String\l  0x0054\-0x009a: r5 'frames' java.lang.String\l  0x0013\-0x009a: r6 'hours' java.lang.String\l  0x0023\-0x009a: r8 'minutes' java.lang.String\l  0x0037\-0x009a: r9 'seconds' java.lang.String\l  0x006f\-0x009a: r12 'subframes' java.lang.String\l  0x009b\-0x00a4: r2 'durationSeconds' double\l  0x009b\-0x00a4: r4 'fraction' java.lang.String\l  0x009e\-0x00a4: r5 'frames' java.lang.String\l  0x009b\-0x00a4: r6 'hours' java.lang.String\l  0x009b\-0x00a4: r8 'minutes' java.lang.String\l  0x009b\-0x00a4: r9 'seconds' java.lang.String\l  0x00a1\-0x00a4: r12 'subframes' java.lang.String\l  0x00bb\-0x0149: r10 'offsetSeconds' double\l  0x00b7\-0x0149: r13 'timeValue' java.lang.String\l  0x00c0\-0x0149: r14 'unit' java.lang.String\l  0x0008\-0x018f: r7 'matcher' java.util.regex.Matcher\l  ?\-0x018f: r20 'time' java.lang.String\l  ?\-0x018f: r21 'frameAndTickRate' com.google.android.exoplayer2.text.ttml.TtmlDecoder$FrameAndTickRate\lAnnotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.text.SubtitleDecoderException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_5;
Node_14 -> Node_8;
Node_15 -> Node_11;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_45;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_19 -> Node_25;
Node_19 -> Node_28;
Node_19 -> Node_31;
Node_19 -> Node_34;
Node_19 -> Node_37;
Node_20 -> Node_21;
Node_20 -> Node_40;
Node_20 -> Node_41;
Node_20 -> Node_42;
Node_20 -> Node_43;
Node_20 -> Node_44;
Node_21 -> Node_12;
Node_22 -> Node_23;
Node_23 -> Node_20;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_20;
Node_25 -> Node_26;
Node_26 -> Node_20;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_20;
Node_28 -> Node_29;
Node_29 -> Node_20;
Node_29 -> Node_30[style=dashed];
Node_30 -> Node_20;
Node_31 -> Node_32;
Node_32 -> Node_20;
Node_32 -> Node_33[style=dashed];
Node_33 -> Node_20;
Node_34 -> Node_35;
Node_35 -> Node_20;
Node_35 -> Node_36[style=dashed];
Node_36 -> Node_20;
Node_37 -> Node_38;
Node_38 -> Node_20;
Node_38 -> Node_39[style=dashed];
Node_39 -> Node_20;
Node_40 -> Node_21;
Node_41 -> Node_21;
Node_42 -> Node_21;
Node_43 -> Node_21;
Node_44 -> Node_21;
Node_45 -> Node_46;
}

