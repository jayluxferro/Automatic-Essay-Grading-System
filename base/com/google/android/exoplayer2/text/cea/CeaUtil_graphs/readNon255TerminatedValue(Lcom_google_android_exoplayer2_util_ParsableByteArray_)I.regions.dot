digraph "CFG forcom.google.android.exoplayer2.text.cea.CeaUtil.readNon255TerminatedValue(Lcom\/google\/android\/exoplayer2\/util\/ParsableByteArray;)I" {
subgraph cluster_Region_222318072 {
label = "R(3:0|(2:4|(1:9))|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
subgraph cluster_LoopRegion_1020611285 {
label = "LOOP:0: (2:4|(1:9))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r3.bytesLeft() != 0) goto L_0x0009\l}"];
subgraph cluster_Region_970341079 {
label = "R(2:4|(1:9))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|int int r0 = r3.readUnsignedByte()\lr1 += r0\l}"];
subgraph cluster_IfRegion_2047040868 {
label = "IF [B:5:0x0010] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:5:0x0010\l|if (r0 != 255) goto L_0x0012\l}"];
subgraph cluster_Region_1532349756 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
}
}
Node_3 [shape=record,label="{3\:\ 0x0007|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|LOOP_START\lPHI: r1 \l  PHI: (r1v1 'value' int) = (r1v0 'value' int), (r1v2 'value' int) binds: [B:0:0x0000, B:5:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:5:0x0010\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0012|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0007|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.android.exoplayer2.text.cea.CeaUtil.readNon255TerminatedValue((r3v0 'buffer' com.google.android.exoplayer2.util.ParsableByteArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_1[style=dashed];
Node_5 -> Node_7;
Node_1 -> Node_2;
Node_6 -> Node_9;
Node_7 -> Node_6;
Node_8 -> Node_3;
}

