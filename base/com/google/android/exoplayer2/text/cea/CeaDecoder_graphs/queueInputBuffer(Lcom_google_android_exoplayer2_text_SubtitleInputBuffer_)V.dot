digraph "CFG forcom.google.android.exoplayer2.text.cea.CeaDecoder.queueInputBuffer(Lcom\/google\/android\/exoplayer2\/text\/SubtitleInputBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 == null) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v6 boolean) binds: [B:10:0x001c, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkArgument(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r4 != r3.dequeuedInputBuffer) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v0 boolean), (r1v1 boolean) binds: [B:4:0x000a, B:11:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.exoplayer2.util.Assertions.checkArgument(r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r4.isDecodeOnly() == false) goto L_0x0020\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|releaseInputBuffer(r4)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|r3.dequeuedInputBuffer = null\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|r0 = false\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|r1 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|r3.queuedInputBuffers.add(r4)\l}"];
MethodNode[shape=record,label="{public void com.google.android.exoplayer2.text.cea.CeaDecoder.queueInputBuffer((r3v0 'this' com.google.android.exoplayer2.text.cea.CeaDecoder A[IMMUTABLE_TYPE, THIS]), (r4v0 'inputBuffer' com.google.android.exoplayer2.text.SubtitleInputBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[com.google.android.exoplayer2.text.SubtitleDecoderException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_3;
Node_11 -> Node_5;
Node_12 -> Node_8;
}

