digraph "CFG forcom.google.android.exoplayer2.SimpleExoPlayer.setVideoSurfaceInternal(Landroid\/view\/Surface;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r4 I:int) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.videoRendererCount int \l0x0002: NEW_ARRAY  (r2 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[] \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IGET  (r5 I:com.google.android.exoplayer2.Renderer[]) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.renderers com.google.android.exoplayer2.Renderer[] \l0x0007: ARRAY_LENGTH  (r6 I:int) = (r5 I:?[]) \l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x000e: INVOKE  (r7 I:int) = \l  (r3 I:com.google.android.exoplayer2.Renderer A[D('renderer' com.google.android.exoplayer2.Renderer)])\l com.google.android.exoplayer2.Renderer.getTrackType():int type: INTERFACE \l0x0012: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0044 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: ARITH  (r0 I:int) = (r1 I:int A[D('count' int)]) + (1 int) \l0x0017: NEW_INSTANCE  (r7 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage) =  com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage \l0x0019: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001a: INVOKE  \l  (r7 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage)\l  (r3 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerComponent A[D('renderer' com.google.android.exoplayer2.Renderer)])\l  (r8 I:int)\l  (r10 I:java.lang.Object A[D('surface' android.view.Surface)])\l com.google.android.exoplayer2.ExoPlayer.ExoPlayerMessage.\<init\>(com.google.android.exoplayer2.ExoPlayer$ExoPlayerComponent, int, java.lang.Object):void type: DIRECT \l0x001d: APUT  \l  (r2 I:?[OBJECT, ARRAY][] A[D('messages' com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0021: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r4 I:android.view.Surface) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.surface android.view.Surface \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IGET  (r4 I:android.view.Surface) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.surface android.view.Surface \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('surface' android.view.Surface)])  \-\> B:16:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IGET  (r4 I:boolean) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.ownsSurface boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IGET  (r4 I:android.view.Surface) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.surface android.view.Surface \l0x0031: INVOKE  (r4 I:android.view.Surface) android.view.Surface.release():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IGET  (r4 I:com.google.android.exoplayer2.ExoPlayer) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.player com.google.android.exoplayer2.ExoPlayer \l0x0036: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ExoPlayer)\l  (r2 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[] A[D('messages' com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])])\l com.google.android.exoplayer2.ExoPlayer.blockingSendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[]):void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IPUT  \l  (r10 I:android.view.Surface A[D('surface' android.view.Surface)])\l  (r9 I:com.google.android.exoplayer2.SimpleExoPlayer)\l com.google.android.exoplayer2.SimpleExoPlayer.surface android.view.Surface \l0x003b: IPUT  \l  (r11 I:boolean A[D('ownsSurface' boolean)])\l  (r9 I:com.google.android.exoplayer2.SimpleExoPlayer)\l com.google.android.exoplayer2.SimpleExoPlayer.ownsSurface boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: IGET  (r4 I:com.google.android.exoplayer2.ExoPlayer) = (r9 I:com.google.android.exoplayer2.SimpleExoPlayer) com.google.android.exoplayer2.SimpleExoPlayer.player com.google.android.exoplayer2.ExoPlayer \l0x0040: INVOKE  \l  (r4 I:com.google.android.exoplayer2.ExoPlayer)\l  (r2 I:com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[] A[D('messages' com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])])\l com.google.android.exoplayer2.ExoPlayer.sendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[]):void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0044|0x0044: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])\l \l}"];
MethodNode[shape=record,label="{private void com.google.android.exoplayer2.SimpleExoPlayer.setVideoSurfaceInternal((r9 'this' I:com.google.android.exoplayer2.SimpleExoPlayer A[IMMUTABLE_TYPE, THIS]), (r10 I:android.view.Surface A[D('surface' android.view.Surface), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('ownsSurface' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0005\-0x000a: r0 'count' int\l  0x000a\-0x0017: r1 'count' int\l  0x0017\-0x0022: r0 'count' int\l  0x000e\-0x0023: r3 'renderer' com.google.android.exoplayer2.Renderer\l  0x0022\-0x0045: r1 'count' int\l  0x0045\-0x0045: r0 'count' int\l  0x0004\-0x0045: r2 'messages' com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[]\l  0x0044\-0x0045: r3 'renderer' com.google.android.exoplayer2.Renderer\l  ?\-0x0045: r10 'surface' android.view.Surface\l  ?\-0x0045: r11 'ownsSurface' boolean\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_14;
Node_17 -> Node_5;
}

