digraph "CFG forcom.pnikosis.materialishprogress.ProgressWheel.setInstantProgress(F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r4.isSpinning == false) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r4.mProgress = 0.0f\lr4.isSpinning = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if ((r5 \> 1.0f ? 1 : (r5 == 1.0f ? 0 : \-1)) \<= 0) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|float r5 = r5 \- 1.0f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|PHI: r5 \l  PHI: (r5v2 'progress' float) = (r5v0 'progress' float), (r5v1 'progress' float), (r5v3 'progress' float) binds: [B:9:0x001c, B:10:0x001e, B:5:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if ((r5 \> r4.mTargetProgress ? 1 : (r5 == r4.mTargetProgress ? 0 : \-1)) != 0) goto L_0x0020\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a}"];
Node_9 [shape=record,label="{9\:\ 0x001c|if ((r5 \> 0.0f ? 1 : (r5 == 0.0f ? 0 : \-1)) \>= 0) goto L_0x0013\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|r5 = 0.0f\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|r4.mTargetProgress = java.lang.Math.min(r5 * 360.0f, 360.0f)\lr4.mProgress = r4.mTargetProgress\lr4.lastTimeAnimated = android.os.SystemClock.uptimeMillis()\linvalidate()\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.pnikosis.materialishprogress.ProgressWheel.setInstantProgress((r4v0 'this' com.pnikosis.materialishprogress.ProgressWheel A[IMMUTABLE_TYPE, THIS]), (r5v0 'progress' float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_11;
Node_7 -> Node_12[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_6;
Node_11 -> Node_13;
}

