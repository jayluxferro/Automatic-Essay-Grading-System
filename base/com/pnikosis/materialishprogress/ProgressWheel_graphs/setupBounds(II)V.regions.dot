digraph "CFG forcom.pnikosis.materialishprogress.ProgressWheel.setupBounds(II)V" {
subgraph cluster_Region_1600857583 {
label = "R(2:0|(2:(2:2|4)|(1:3)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r5 = getPaddingTop()\lint int r2 = getPaddingBottom()\lint int r3 = getPaddingLeft()\lint int r4 = getPaddingRight()\l}"];
subgraph cluster_Region_1205924002 {
label = "R(2:(2:2|4)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1043583674 {
label = "IF [B:1:0x0012] THEN: R(2:2|4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0012|if (r14.fillRadius == false) goto L_0x0014\l}"];
subgraph cluster_Region_1544867804 {
label = "R(2:2|4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0014|int int r0 = java.lang.Math.min(java.lang.Math.min((r15 \- r3) \- r4, (r16 \- r2) \- r5), (r14.circleRadius * 2) \- (r14.barWidth * 2))\lint int r6 = ((((r15 \- r3) \- r4) \- r0) \/ 2) + r3\lint int r7 = ((((r16 \- r5) \- r2) \- r0) \/ 2) + r5\lr14.circleBounds = new android.graphics.RectF((float) (r14.barWidth + r6), (float) (r14.barWidth + r7), (float) ((r6 + r0) \- r14.barWidth), (float) ((r7 + r0) \- r14.barWidth))\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_659463212 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0057|r14.circleBounds = new android.graphics.RectF((float) (r14.barWidth + r3), (float) (r14.barWidth + r5), (float) ((r15 \- r4) \- r14.barWidth), (float) ((r16 \- r2) \- r14.barWidth))\l}"];
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.pnikosis.materialishprogress.ProgressWheel.setupBounds((r14v0 'this' com.pnikosis.materialishprogress.ProgressWheel A[IMMUTABLE_TYPE, THIS]), (r15v0 'layout_width' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'layout_height' int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
}

