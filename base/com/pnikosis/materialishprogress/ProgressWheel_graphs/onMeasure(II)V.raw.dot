digraph "CFG forcom.pnikosis.materialishprogress.ProgressWheel.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r11 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l0x0002: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l \l0x0004: INVOKE  \l  (r12 I:android.view.View)\l  (r13 I:int A[D('widthMeasureSpec' int)])\l  (r14 I:int A[D('heightMeasureSpec' int)])\l android.view.View.onMeasure(int, int):void type: SUPER \l0x0007: IGET  (r8 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.circleRadius int \l0x0009: INVOKE  (r9 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.getPaddingLeft():int type: VIRTUAL \l0x000d: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l0x000e: INVOKE  (r9 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.getPaddingRight():int type: VIRTUAL \l0x0012: ARITH  (r4 I:int) = (r8 I:int) + (r9 I:int) \l0x0014: IGET  (r8 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.circleRadius int \l0x0016: INVOKE  (r9 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.getPaddingTop():int type: VIRTUAL \l0x001a: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l0x001b: INVOKE  (r9 I:int) = (r12 I:com.pnikosis.materialishprogress.ProgressWheel) com.pnikosis.materialishprogress.ProgressWheel.getPaddingBottom():int type: VIRTUAL \l0x001f: ARITH  (r3 I:int) = (r8 I:int) + (r9 I:int) \l0x0021: INVOKE  (r6 I:int) = (r13 I:int A[D('widthMeasureSpec' int)]) android.view.View.MeasureSpec.getMode(int):int type: STATIC \l0x0025: INVOKE  (r7 I:int) = (r13 I:int A[D('widthMeasureSpec' int)]) android.view.View.MeasureSpec.getSize(int):int type: STATIC \l0x0029: INVOKE  (r1 I:int) = (r14 I:int A[D('heightMeasureSpec' int)]) android.view.View.MeasureSpec.getMode(int):int type: STATIC \l0x002d: INVOKE  (r2 I:int) = (r14 I:int A[D('heightMeasureSpec' int)]) android.view.View.MeasureSpec.getSize(int):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0031|0x0031: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0033|0x0033: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('widthSize' int)])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) == (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0038 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0046 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0038|0x0038: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('heightSize' int)])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0039|0x0039: INVOKE  \l  (r12 I:com.pnikosis.materialishprogress.ProgressWheel)\l  (r5 I:int A[D('width' int)])\l  (r0 I:int A[D('height' int)])\l com.pnikosis.materialishprogress.ProgressWheel.setMeasuredDimension(int, int):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: INVOKE  (r5 I:int) = \l  (r4 I:int A[D('viewWidth' int)])\l  (r7 I:int A[D('widthSize' int)])\l java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('width' int)]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewWidth' int)])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|0x0048: INVOKE  (r0 I:int) = \l  (r3 I:int A[D('viewHeight' int)])\l  (r2 I:int A[D('heightSize' int)])\l java.lang.Math.min(int, int):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('height' int)]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('viewHeight' int)])\l \l}"];
MethodNode[shape=record,label="{protected void com.pnikosis.materialishprogress.ProgressWheel.onMeasure((r12 'this' I:com.pnikosis.materialishprogress.ProgressWheel A[IMMUTABLE_TYPE, THIS]), (r13 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Debug Info:\l  0x0039\-0x003d: r0 'height' int\l  0x0034\-0x003d: r5 'width' int\l  0x0043\-0x0044: r5 'width' int\l  0x004c\-0x004d: r0 'height' int\l  0x004e\-0x004e: r0 'height' int\l  0x002d\-0x004e: r1 'heightMode' int\l  0x0031\-0x004e: r2 'heightSize' int\l  0x0021\-0x004e: r3 'viewHeight' int\l  0x0014\-0x004e: r4 'viewWidth' int\l  0x0045\-0x004e: r5 'width' int\l  0x0025\-0x004e: r6 'widthMode' int\l  0x0029\-0x004e: r7 'widthSize' int\l  ?\-0x004e: r13 'widthMeasureSpec' int\l  ?\-0x004e: r14 'heightMeasureSpec' int\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
Node_10 -> Node_3;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_6;
Node_13 -> Node_6;
}

