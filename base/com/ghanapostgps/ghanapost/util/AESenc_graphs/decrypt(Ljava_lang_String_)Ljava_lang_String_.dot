digraph "CFG forcom.ghanapostgps.ghanapost.util.AESenc.decrypt(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ Exception \-\> 0x003b \}\lSplitter:B:1:0x0001\l|byte[] r6 = android.util.Base64.decode(r6, 0)     \/\/ Catch:\{ Exception \-\> 0x003b \}\lint r1 = r6.length \- 16     \/\/ Catch:\{ Exception \-\> 0x003b \}\lbyte[] r3 = new byte[r1]     \/\/ Catch:\{ Exception \-\> 0x003b \}\lbyte[] r4 = new byte[16]     \/\/ Catch:\{ Exception \-\> 0x003b \}\ljava.lang.System.arraycopy(r6, 0, r4, 0, 16)     \/\/ Catch:\{ Exception \-\> 0x003b \}\ljava.lang.System.arraycopy(r6, 16, r3, 0, r1)     \/\/ Catch:\{ Exception \-\> 0x003b \}\ljavax.crypto.spec.IvParameterSpec r6 = new javax.crypto.spec.IvParameterSpec(r4)     \/\/ Catch:\{ Exception \-\> 0x003b \}\ljavax.crypto.spec.SecretKeySpec r0 = new javax.crypto.spec.SecretKeySpec(r5.key.getBytes(p018io.fabric.sdk.android.services.network.HttpRequest.CHARSET_UTF8), \"AES\")     \/\/ Catch:\{ Exception \-\> 0x003b \}\ljavax.crypto.Cipher r1 = javax.crypto.Cipher.getInstance(\"AES\/CBC\/PKCS5PADDING\")     \/\/ Catch:\{ Exception \-\> 0x003b \}\lr1.init(2, r0, r6)     \/\/ Catch:\{ Exception \-\> 0x003b \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|RETURN\l|return new java.lang.String(r1.doFinal(r3))\l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.lang.Exception r6 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x003c|r6.printStackTrace()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0040|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public java.lang.String com.ghanapostgps.ghanapost.util.AESenc.decrypt((r5v0 'this' com.ghanapostgps.ghanapost.util.AESenc A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

