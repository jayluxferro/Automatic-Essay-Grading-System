digraph "CFG forcom.ghanapostgps.ghanapost.db.SpatialiteDBUtil.getLonAltName(D)Ljava\/lang\/String;" {
subgraph cluster_Region_683303306 {
label = "R(3:0|(1:(3:4|(1:6)|7))|10)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = \"\"\l}"];
subgraph cluster_TryCatchRegion_769178580 {
label = "Try: R(1:(3:4|(1:6)|7)) catches: R(2:8|9)";
node [shape=record,color=blue];
subgraph cluster_Region_1228954199 {
label = "R(1:(3:4|(1:6)|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_393509179 {
label = "IF [B:3:0x0008] THEN: R(3:4|(1:6)|7) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|Catch:\{ Exception \-\> 0x0045 \}\l|if (openDataBase(\"lon.sqlite\") == true) goto L_0x000a     \/\/ Catch:\{ Exception \-\> 0x0045 \}\l}"];
subgraph cluster_Region_958735869 {
label = "R(3:4|(1:6)|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|Catch:\{ Exception \-\> 0x0045 \}\l|android.util.Log.d(\"locationAlt\", \"SELECT LongitudeAltName FROM LongitudeTable WHERE WestLongitude\<=? AND EastLongitude \> ? LIMIT 0,1\")     \/\/ Catch:\{ Exception \-\> 0x0045 \}\landroid.database.Cursor android.database.Cursor r6 = r5.mDataBase.rawQuery(\"SELECT LongitudeAltName FROM LongitudeTable WHERE WestLongitude\<=? AND EastLongitude \> ? LIMIT 0,1\", new java.lang.Object[]\{java.lang.Double.valueOf(r6), java.lang.Double.valueOf(r6)\})     \/\/ Catch:\{ Exception \-\> 0x0045 \}\lr6.moveToFirst()     \/\/ Catch:\{ Exception \-\> 0x0045 \}\l}"];
subgraph cluster_IfRegion_1682254324 {
label = "IF [B:5:0x002f] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002f|Catch:\{ Exception \-\> 0x0045 \}\l|if (r6.getCount() \> 0) goto L_0x0031     \/\/ Catch:\{ Exception \-\> 0x0045 \}\l}"];
subgraph cluster_Region_666470303 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0031|Catch:\{ Exception \-\> 0x0045 \}\l|r0 = r6.getString(r6.getColumnIndex(\"LongitudeAltName\"))     \/\/ Catch:\{ Exception \-\> 0x0045 \}\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x003c|Catch:\{ Exception \-\> 0x0045 \}\lPHI: r0 \l  PHI: (r0v2 java.lang.String) = (r0v0 java.lang.String), (r0v3 java.lang.String) binds: [B:5:0x002f, B:6:0x0031] A[DONT_GENERATE, DONT_INLINE]\l|r6.close()     \/\/ Catch:\{ Exception \-\> 0x0045 \}\lr5.mDataBase.close()     \/\/ Catch:\{ Exception \-\> 0x0045 \}\l}"];
}
}
}
subgraph cluster_Region_771205148 {
label = "R(2:8|9) | ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0045|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0004\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|r6.printStackTrace()\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0049|RETURN\lPHI: r0 \l  PHI: (r0v1 java.lang.String) = (r0v0 java.lang.String), (r0v0 java.lang.String), (r0v2 java.lang.String) binds: [B:9:0x0046, B:3:0x0008, B:7:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|return r0\l}"];
}
subgraph cluster_Region_771205148 {
label = "R(2:8|9) | ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0045|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0004\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|r6.printStackTrace()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?|Catch:\{ Exception \-\> 0x0045 \}\lSplitter:B:1:0x0004\l}"];
MethodNode[shape=record,label="{public java.lang.String com.ghanapostgps.ghanapost.db.SpatialiteDBUtil.getLonAltName((r5v0 'this' com.ghanapostgps.ghanapost.db.SpatialiteDBUtil A[IMMUTABLE_TYPE, THIS]), (r6v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
}

