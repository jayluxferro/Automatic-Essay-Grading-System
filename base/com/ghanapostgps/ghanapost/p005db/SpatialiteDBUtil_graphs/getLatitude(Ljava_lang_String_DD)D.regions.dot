digraph "CFG forcom.ghanapostgps.ghanapost.db.SpatialiteDBUtil.getLatitude(Ljava\/lang\/String;DD)D" {
subgraph cluster_Region_229620863 {
label = "R(3:0|(1:(3:4|(1:6)|7))|10)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = 0.0d\l}"];
subgraph cluster_TryCatchRegion_1955459212 {
label = "Try: R(1:(3:4|(1:6)|7)) catches: R(2:8|9)";
node [shape=record,color=blue];
subgraph cluster_Region_1756622374 {
label = "R(1:(3:4|(1:6)|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1487000911 {
label = "IF [B:3:0x0008] THEN: R(3:4|(1:6)|7) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|Catch:\{ Exception \-\> 0x0043 \}\l|if (openDataBase(\"lat.sqlite\") == true) goto L_0x000a     \/\/ Catch:\{ Exception \-\> 0x0043 \}\l}"];
subgraph cluster_Region_798398982 {
label = "R(3:4|(1:6)|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|Catch:\{ Exception \-\> 0x0043 \}\l|android.database.Cursor android.database.Cursor r6 = r5.mDataBase.rawQuery(\"SELECT SouthLatitude  FROM LatitudeTable WHERE LatitudeAltName = ? AND (NorthLatitude \< ? AND SouthLatitude \>= ?) LIMIT 0, 1\", new java.lang.Object[]\{r6, java.lang.Double.valueOf(r7), java.lang.Double.valueOf(r9)\})     \/\/ Catch:\{ Exception \-\> 0x0043 \}\lr6.moveToFirst()     \/\/ Catch:\{ Exception \-\> 0x0043 \}\l}"];
subgraph cluster_IfRegion_795234994 {
label = "IF [B:5:0x002d] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002d|Catch:\{ Exception \-\> 0x0043 \}\l|if (r6.getCount() \> 0) goto L_0x002f     \/\/ Catch:\{ Exception \-\> 0x0043 \}\l}"];
subgraph cluster_Region_1770292369 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002f|Catch:\{ Exception \-\> 0x0043 \}\l|r0 = r6.getDouble(r6.getColumnIndex(\"SouthLatitude\"))     \/\/ Catch:\{ Exception \-\> 0x0043 \}\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x003a|Catch:\{ Exception \-\> 0x0043 \}\lPHI: r0 \l  PHI: (r0v2 double) = (r0v0 double), (r0v3 double) binds: [B:5:0x002d, B:6:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|r6.close()     \/\/ Catch:\{ Exception \-\> 0x0043 \}\lr5.mDataBase.close()     \/\/ Catch:\{ Exception \-\> 0x0043 \}\l}"];
}
}
}
subgraph cluster_Region_507404491 {
label = "R(2:8|9) | ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0043|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0004\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|r6.printStackTrace()\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0047|RETURN\lPHI: r0 \l  PHI: (r0v1 double) = (r0v0 double), (r0v0 double), (r0v2 double) binds: [B:9:0x0044, B:3:0x0008, B:7:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|return r0\l}"];
}
subgraph cluster_Region_507404491 {
label = "R(2:8|9) | ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0043|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:1:0x0004\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|r6.printStackTrace()\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?|Catch:\{ Exception \-\> 0x0043 \}\lSplitter:B:1:0x0004\l}"];
MethodNode[shape=record,label="{public double com.ghanapostgps.ghanapost.db.SpatialiteDBUtil.getLatitude((r5v0 'this' com.ghanapostgps.ghanapost.db.SpatialiteDBUtil A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
}

