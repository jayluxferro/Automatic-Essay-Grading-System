digraph "CFG forcom.ghanapostgps.ghanapost.db.SQLiteHandler.hasLocation(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"SELECT * FROM locations WHERE address_code='\" \l0x000c: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0012: CONST_STR  (r1 I:java.lang.String) =  \"' OR \" \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"address\" \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"='\" \l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: CONST_STR  (r3 I:java.lang.String) =  \"'\" \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002d: INVOKE  (r0 I:android.database.sqlite.SQLiteDatabase) = (r2 I:com.ghanapostgps.ghanapost.db.SQLiteHandler) com.ghanapostgps.ghanapost.db.SQLiteHandler.getReadableDatabase():android.database.sqlite.SQLiteDatabase type: VIRTUAL \l0x0031: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: INVOKE  (r3 I:android.database.Cursor) = \l  (r0 I:android.database.sqlite.SQLiteDatabase)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.String[])\l android.database.sqlite.SQLiteDatabase.rawQuery(java.lang.String, java.lang.String[]):android.database.Cursor type: VIRTUAL \l0x0036: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.moveToFirst():boolean type: INTERFACE \l0x0039: INVOKE  (r1 I:int) = (r3 I:android.database.Cursor) android.database.Cursor.getCount():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x003d|0x003d: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x003f|0x003f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0041|0x0041: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0042|0x0042: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l0x0045: INVOKE  (r0 I:android.database.sqlite.SQLiteDatabase) android.database.sqlite.SQLiteDatabase.close():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0048|0x0048: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.ghanapostgps.ghanapost.db.SQLiteHandler.hasLocation((r2 'this' I:com.ghanapostgps.ghanapost.db.SQLiteHandler A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

