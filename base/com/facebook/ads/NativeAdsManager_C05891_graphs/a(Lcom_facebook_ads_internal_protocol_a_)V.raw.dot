digraph "CFG forcom.facebook.ads.NativeAdsManager.1.a(Lcom\/facebook\/ads\/internal\/protocol\/a;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.facebook.ads.NativeAdsManager) = (r2 I:com.facebook.ads.NativeAdsManager$1) com.facebook.ads.NativeAdsManager.1.b com.facebook.ads.NativeAdsManager \l0x0002: INVOKE  (r0 I:com.facebook.ads.NativeAdsManager$Listener) = (r0 I:com.facebook.ads.NativeAdsManager) com.facebook.ads.NativeAdsManager.c(com.facebook.ads.NativeAdsManager):com.facebook.ads.NativeAdsManager$Listener type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:com.facebook.ads.NativeAdsManager) = (r2 I:com.facebook.ads.NativeAdsManager$1) com.facebook.ads.NativeAdsManager.1.b com.facebook.ads.NativeAdsManager \l0x000a: INVOKE  (r0 I:com.facebook.ads.NativeAdsManager$Listener) = (r0 I:com.facebook.ads.NativeAdsManager) com.facebook.ads.NativeAdsManager.c(com.facebook.ads.NativeAdsManager):com.facebook.ads.NativeAdsManager$Listener type: STATIC \l0x000e: INVOKE  (r1 I:com.facebook.ads.AdError) = (r3 I:com.facebook.ads.internal.protocol.a) com.facebook.ads.AdError.getAdErrorFromWrapper(com.facebook.ads.internal.protocol.a):com.facebook.ads.AdError type: STATIC \l0x0012: INVOKE  \l  (r0 I:com.facebook.ads.NativeAdsManager$Listener)\l  (r1 I:com.facebook.ads.AdError)\l com.facebook.ads.NativeAdsManager.Listener.onAdError(com.facebook.ads.AdError):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.NativeAdsManager.1.a((r2 'this' I:com.facebook.ads.NativeAdsManager$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:com.facebook.ads.internal.protocol.a A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

