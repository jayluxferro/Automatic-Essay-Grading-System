digraph "CFG forcom.facebook.ads.NativeAd.e()Ljava\/util\/List;" {
subgraph cluster_Region_1512133982 {
label = "R(1:(2:(1:2)|(3:3|(1:6)|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1561271323 {
label = "R(2:(1:2)|(3:3|(1:6)|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_676219473 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (mo10075g().mo10704F() == null) goto L_0x000a\l}"];
subgraph cluster_Region_1649800252 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lRETURN\lORIG_RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1735524413 {
label = "R(3:3|(1:6)|9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|java.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r2 = mo10075g().mo10704F().iterator()\l}"];
subgraph cluster_LoopRegion_848217741 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0021|if (r2.hasNext() != false) goto L_0x0023\l}"];
subgraph cluster_Region_1991506757 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0023|LOOP_END\lLOOP:0: B:4:0x001d\-\>B:6:0x0023\l|r1.add(new com.facebook.ads.NativeAd(r0))\l}"];
}
}
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001d|LOOP_START\lLOOP:0: B:4:0x001d\-\>B:6:0x0023\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0032}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.util.List\<com.facebook.ads.NativeAd\> com.facebook.ads.NativeAd.e((r4v0 'this' com.facebook.ads.NativeAd A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List, \<, Lcom\/facebook\/ads\/NativeAd;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_4;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

