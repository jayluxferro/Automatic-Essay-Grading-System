digraph "CFG forcom.facebook.ads.RewardedVideoAd.1.a(Lcom\/facebook\/ads\/internal\/adapters\/AdAdapter;)V" {
subgraph cluster_Region_688178970 {
label = "R(4:0|(1:2)|3|(1:(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.facebook.ads.internal.adapters.ab com.facebook.ads.internal.adapters.C0649ab r3 = (com.facebook.ads.internal.adapters.C0649ab) r3\l}"];
subgraph cluster_IfRegion_2020142679 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (com.facebook.ads.RewardedVideoAd.this.f223g != null) goto L_0x000a\l}"];
subgraph cluster_Region_1183261163 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|r3.mo10357a(com.facebook.ads.RewardedVideoAd.this.f223g)\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0013|int unused = com.facebook.ads.RewardedVideoAd.this.f224h = r3.mo10354a()\lboolean unused = com.facebook.ads.RewardedVideoAd.this.f221e = true\l}"];
subgraph cluster_Region_113262256 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_165661017 {
label = "IF [B:4:0x0028] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0028|if (com.facebook.ads.RewardedVideoAd.this.f222f != null) goto L_0x002a\l}"];
subgraph cluster_Region_2086636238 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002a|com.facebook.ads.RewardedVideoAd.this.f222f.onAdLoaded(com.facebook.ads.RewardedVideoAd.this)\l}"];
}
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.RewardedVideoAd.1.a((r2v0 'this' com.facebook.ads.RewardedVideoAd$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 com.facebook.ads.internal.adapters.AdAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
}

