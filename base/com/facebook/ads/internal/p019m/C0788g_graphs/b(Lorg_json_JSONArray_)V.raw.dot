digraph "CFG forcom.facebook.ads.internal.m.g.b(Lorg\/json\/JSONArray;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:int) = (r5 I:org.json.JSONArray) org.json.JSONArray.length():int type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\lSplitter:B:2:0x0007\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0007\l|0x0007: INVOKE  (r2 I:org.json.JSONObject) = (r5 I:org.json.JSONArray), (r0 I:int) org.json.JSONArray.getJSONObject(int):org.json.JSONObject type: VIRTUAL A[Catch:\{ JSONException \-\> 0x0018 \}, TRY_ENTER]\l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"id\" A[Catch:\{ JSONException \-\> 0x0018 \}]\l0x000d: INVOKE  (r2 I:java.lang.String) = (r2 I:org.json.JSONObject), (r3 I:java.lang.String) org.json.JSONObject.getString(java.lang.String):java.lang.String type: VIRTUAL A[Catch:\{ JSONException \-\> 0x0018 \}]\l0x0011: INVOKE  \l  (r4 I:com.facebook.ads.internal.m.g)\l  (r2 I:java.lang.String)\l com.facebook.ads.internal.m.g.a(java.lang.String):void type: DIRECT A[Catch:\{ JSONException \-\> 0x0018 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|ExcHandler: JSONException null\lSplitter:B:2:0x0007\l|0x0018: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.m.g.b((r4 'this' I:com.facebook.ads.internal.m.g A[IMMUTABLE_TYPE, THIS]), (r5 I:org.json.JSONArray A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_4;
}

