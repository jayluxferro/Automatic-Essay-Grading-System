digraph "CFG forcom.facebook.ads.internal.view.hscroll.b.b(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:com.facebook.ads.internal.view.hscroll.b) com.facebook.ads.internal.view.hscroll.b.h int \l0x0002: ARITH  (r2 I:int) = (r0 I:int) * (2 int) \l0x0004: INVOKE  (r0 I:int) = (r7 I:com.facebook.ads.internal.view.hscroll.b) com.facebook.ads.internal.view.hscroll.b.getMeasuredWidth():int type: VIRTUAL \l0x0008: INVOKE  (r1 I:int) = (r7 I:com.facebook.ads.internal.view.hscroll.b) com.facebook.ads.internal.view.hscroll.b.getPaddingLeft():int type: VIRTUAL \l0x000c: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x000d: ARITH  (r3 I:int) = (r0 I:int) \- (r2 I:int) \l0x000f: INVOKE  (r0 I:android.support.v7.widget.RecyclerView$Adapter) = (r7 I:com.facebook.ads.internal.view.hscroll.b) com.facebook.ads.internal.view.hscroll.b.getAdapter():android.support.v7.widget.RecyclerView$Adapter type: VIRTUAL \l0x0013: INVOKE  (r4 I:int) = (r0 I:android.support.v7.widget.RecyclerView$Adapter) android.support.v7.widget.RecyclerView.Adapter.getItemCount():int type: VIRTUAL \l0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: IF  (r0 I:?[int, byte, short, char]) \<= (r8 I:?[int, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x001d|0x001d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:5:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: RETURN  (r8 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: ARITH  (r0 I:int) = (r1 I:int) * (r2 I:int) \l0x0024: ARITH  (r0 I:int) = (r3 I:int) \- (r0 I:int) \l0x0026: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0027: CAST  (r5 I:float) = (float) (r1 I:int) \l0x0028: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1051361018(0x3eaa7efa, float:0.333) ?[int, float, short, byte, char])\l \l0x002b: ARITH  (r5 I:float) = (r5 I:float) + (r6 I:float) \l0x002c: ARITH  (r0 I:float) = (r0 I:float) \/ (r5 I:float) \l0x002d: CAST  (r0 I:int) = (int) (r0 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private int com.facebook.ads.internal.view.hscroll.b.b((r7 'this' I:com.facebook.ads.internal.view.hscroll.b A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_4;
}

