digraph "CFG forcom.facebook.ads.internal.view.hscroll.d.setLayoutManager(Landroid\/support\/v7\/widget\/RecyclerView$LayoutManager;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) android.support.v7.widget.LinearLayoutManager \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"SnapRecyclerView only supports LinearLayoutManager\" \l0x0008: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  \l  (r2 I:android.support.v7.widget.RecyclerView)\l  (r3 I:android.support.v7.widget.RecyclerView$LayoutManager)\l android.support.v7.widget.RecyclerView.setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager):void type: SUPER \l0x000f: CHECK_CAST  (r3 I:android.support.v7.widget.LinearLayoutManager) = (android.support.v7.widget.LinearLayoutManager) (r3 I:?[OBJECT, ARRAY]) \l0x0011: IPUT  \l  (r3 I:android.support.v7.widget.LinearLayoutManager)\l  (r2 I:com.facebook.ads.internal.view.hscroll.d)\l com.facebook.ads.internal.view.hscroll.d.f android.support.v7.widget.LinearLayoutManager \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.view.hscroll.d.setLayoutManager((r2 'this' I:com.facebook.ads.internal.view.hscroll.d A[IMMUTABLE_TYPE, THIS]), (r3 I:android.support.v7.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

