digraph "CFG forcom.facebook.ads.internal.view.f.a.c()V" {
subgraph cluster_Region_1400087321 {
label = "R(2:0|(3:3|(1:5)(0)|6))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r2 = r3.f1940l.iterator()\l}"];
subgraph cluster_LoopRegion_999045496 {
label = "LOOP:0: (3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r2.hasNext() != false) goto L_0x000c\l}"];
subgraph cluster_Region_1090847653 {
label = "R(3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|com.facebook.ads.internal.view.f.a.b r0 = r2.next()\l}"];
subgraph cluster_IfRegion_331793667 {
label = "IF [B:4:0x0014] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0014|if ((r0 instanceof com.facebook.ads.internal.view.p041f.p042a.C1075c) == true) goto L_0x0016\l}"];
subgraph cluster_Region_1566820105 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|m2216a((com.facebook.ads.internal.view.p041f.p042a.C1075c) r0)\l}"];
}
subgraph cluster_Region_125723172 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x001c|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:6:0x001c\l|r0.mo11216a(r3)\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:6:0x001c\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0020}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0020|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001c|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.view.f.a.c((r3v0 'this' com.facebook.ads.internal.view.f.a A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

