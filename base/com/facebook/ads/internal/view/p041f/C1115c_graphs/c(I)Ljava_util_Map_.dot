digraph "CFG forcom.facebook.ads.internal.view.f.c.c(I)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = true\ljava.util.HashMap r3 = new java.util.HashMap()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if (r5.f2018e.getVideoStartReason() != com.facebook.ads.internal.view.p041f.p042a.C1073a.AUTO_STARTED) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v4 boolean) binds: [B:7:0x002d, B:2:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r5.f2018e.mo11258h() != false) goto L_0x002f\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v0 boolean), (r1v1 boolean) binds: [B:4:0x0018, B:8:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|com.facebook.ads.internal.p026q.p027a.C0926w.m1761a(r3, r0, r1)\lm2324a((java.util.Map\<java.lang.String, java.lang.String\>) r3)\lm2327b((java.util.Map\<java.lang.String, java.lang.String\>) r3)\lm2325a((java.util.Map\<java.lang.String, java.lang.String\>) r3, r6)\lm2329c((java.util.Map\<java.lang.String, java.lang.String\>) r3)\lm2323a((java.util.HashMap\<java.lang.String, java.lang.String\>) r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|RETURN\l|return r3\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|r0 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|r1 = false\l}"];
MethodNode[shape=record,label="{private java.util.Map\<java.lang.String, java.lang.String\> com.facebook.ads.internal.view.f.c.c((r5v0 'this' com.facebook.ads.internal.view.f.c A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I), Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_7 -> Node_3;
Node_8 -> Node_5;
}

