digraph "CFG forcom.facebook.ads.internal.view.f.c.a(IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if ((((double) r7) \> 0.0d ? 1 : (((double) r7) == 0.0d ? 0 : \-1)) \<= 0) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r7 \>= r6.f2020g) goto L_0x000c\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r7 \<= r6.f2020g) goto L_0x0044\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|r6.f2019f.mo10497a((double) (((float) (r7 \- r6.f2020g)) \/ 1000.0f), (double) mo11308d())\lr6.f2020g = r7\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|if ((r7 \- r6.f2021h) \< 5000) goto L_0x0044\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|r6.f2017d.mo10679e(r6.f2014a, m2319a(com.facebook.ads.internal.view.p041f.C1115c.C1119b.f2028c, r7))\lr6.f2021h = r6.f2020g\lr6.f2019f.mo10496a()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|if (r8 == false) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|r6.f2017d.mo10679e(r6.f2014a, m2319a(com.facebook.ads.internal.view.p041f.C1115c.C1119b.f2028c, r7))\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.facebook.ads.internal.view.f.c.a((r6v0 'this' com.facebook.ads.internal.view.f.c A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_15;
}

