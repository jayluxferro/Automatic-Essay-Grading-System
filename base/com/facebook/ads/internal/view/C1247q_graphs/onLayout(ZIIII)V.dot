digraph "CFG forcom.facebook.ads.internal.view.q.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = r11 \- r9\lint r2 = getMeasuredHeight()\lint r3 = getMeasuredWidth()\lfloat r0 = r7.f2421a\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lPHI: r0 \l  PHI: (r0v1 float) = (r0v0 float), (r0v4 float) binds: [B:0:0x0000, B:10:0x0039] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:10:0x0039\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if ((r0 \> r7.f2422b ? 1 : (r0 == r7.f2422b ? 0 : \-1)) \< 0) goto L_0x0021\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|super.setTextSize(r0)\lmeasure(0, 0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (getMeasuredWidth() \> r1) goto L_0x0039\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021}"];
Node_6 [shape=record,label="{6\:\ 0x0025|if (getMeasuredWidth() \<= r1) goto L_0x0032\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|measure(android.view.View.MeasureSpec.makeMeasureSpec(r3, 1073741824), android.view.View.MeasureSpec.makeMeasureSpec(r2, 1073741824))\l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|setMeasuredDimension(r3, r2)\lsuper.onLayout(r8, r9, r10, r11, r12)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:10:0x0039\l|float r0 = r0 \- 0.5f\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void com.facebook.ads.internal.view.q.onLayout((r7v0 'this' com.facebook.ads.internal.view.q A[IMMUTABLE_TYPE, THIS]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_10;
Node_4 -> Node_12[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_1;
Node_11 -> Node_5;
Node_12 -> Node_5;
}

