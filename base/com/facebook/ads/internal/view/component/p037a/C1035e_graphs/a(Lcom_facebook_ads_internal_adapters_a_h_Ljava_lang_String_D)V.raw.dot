digraph "CFG forcom.facebook.ads.internal.view.component.a.e.a(Lcom\/facebook\/ads\/internal\/adapters\/a\/h;Ljava\/lang\/String;D)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:com.facebook.ads.internal.view.component.a.b)\l  (r4 I:com.facebook.ads.internal.adapters.a.h)\l  (r5 I:java.lang.String)\l  (r6 I:double)\l com.facebook.ads.internal.view.component.a.b.a(com.facebook.ads.internal.adapters.a.h, java.lang.String, double):void type: SUPER \l0x0003: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_L  (r0 I:int) = (r6 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: SGET  (r0 I:int) =  com.facebook.ads.internal.view.component.a.e.c int \l0x000b: SGET  (r1 I:int) =  com.facebook.ads.internal.view.component.a.e.a int \l0x000d: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x000f: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0010: CAST  (r0 I:double) = (double) (r0 I:int) \l0x0011: ARITH  (r0 I:double) = (r0 I:double) \/ (r6 I:double) \l0x0012: CAST  (r0 I:int) = (int) (r0 I:double) \l0x0013: IGET  (r1 I:com.facebook.ads.internal.view.component.a.f) = (r3 I:com.facebook.ads.internal.view.component.a.e) com.facebook.ads.internal.view.component.a.e.d com.facebook.ads.internal.view.component.a.f \l0x0015: INVOKE  \l  (r1 I:com.facebook.ads.internal.view.component.a.f)\l  (r0 I:int)\l com.facebook.ads.internal.view.component.a.f.a(int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.view.component.a.e.a((r3 'this' I:com.facebook.ads.internal.view.component.a.e A[IMMUTABLE_TYPE, THIS]), (r4 I:com.facebook.ads.internal.adapters.a.h A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

