digraph "CFG forcom.facebook.ads.internal.view.component.e.onDraw(Landroid\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IGET  (r0 I:android.graphics.RectF) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.c android.graphics.RectF \l0x0003: INVOKE  (r1 I:int) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.getWidth():int type: VIRTUAL \l0x0007: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0008: INVOKE  (r2 I:int) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.getHeight():int type: VIRTUAL \l0x000c: CAST  (r2 I:float) = (float) (r2 I:int) \l0x000d: INVOKE  \l  (r0 I:android.graphics.RectF)\l  (r3 I:float)\l  (r3 I:float)\l  (r1 I:float)\l  (r2 I:float)\l android.graphics.RectF.set(float, float, float, float):void type: VIRTUAL \l0x0010: IGET  (r0 I:android.graphics.Path) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.b android.graphics.Path \l0x0012: INVOKE  (r0 I:android.graphics.Path) android.graphics.Path.reset():void type: VIRTUAL \l0x0015: IGET  (r0 I:boolean) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.e boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: INVOKE  (r0 I:int) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.getWidth():int type: VIRTUAL \l0x001d: INVOKE  (r1 I:int) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.getHeight():int type: VIRTUAL \l0x0021: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0025: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x0027: CAST  (r0 I:float) = (float) (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: IGET  (r1 I:android.graphics.Path) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.b android.graphics.Path \l0x002a: IGET  (r2 I:android.graphics.RectF) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.c android.graphics.RectF \l0x002c: SGET  (r3 I:android.graphics.Path$Direction) =  android.graphics.Path.Direction.CW android.graphics.Path$Direction \l0x002e: INVOKE  \l  (r1 I:android.graphics.Path)\l  (r2 I:android.graphics.RectF)\l  (r0 I:float)\l  (r0 I:float)\l  (r3 I:android.graphics.Path$Direction)\l android.graphics.Path.addRoundRect(android.graphics.RectF, float, float, android.graphics.Path$Direction):void type: VIRTUAL \l0x0031: IGET  (r0 I:android.graphics.Path) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.b android.graphics.Path \l0x0033: INVOKE  \l  (r5 I:android.graphics.Canvas)\l  (r0 I:android.graphics.Path)\l android.graphics.Canvas.clipPath(android.graphics.Path):boolean type: VIRTUAL \l0x0036: INVOKE  \l  (r4 I:android.widget.ImageView)\l  (r5 I:android.graphics.Canvas)\l android.widget.ImageView.onDraw(android.graphics.Canvas):void type: SUPER \l}"];
Node_4 [shape=record,label="{4\:\ 0x0039|0x0039: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: IGET  (r0 I:int) = (r4 I:com.facebook.ads.internal.view.component.e) com.facebook.ads.internal.view.component.e.d int \l0x003c: CAST  (r0 I:float) = (float) (r0 I:int) \l}"];
MethodNode[shape=record,label="{protected void com.facebook.ads.internal.view.component.e.onDraw((r4 'this' I:com.facebook.ads.internal.view.component.e A[IMMUTABLE_TYPE, THIS]), (r5 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

