digraph "CFG forcom.facebook.ads.internal.view.r.onMeasure(II)V" {
subgraph cluster_Region_877327043 {
label = "R(2:0|(1:4)(1:(1:7)(0)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.onMeasure(r3, r4)\l}"];
subgraph cluster_IfRegion_649405326 {
label = "IF [B:1:0x0005, B:3:0x000d] THEN: R(1:4) ELSE: R(1:(1:7)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r2.f2424b \> 0) goto L_0x0007\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|ADDED_TO_REGION\l|if (getMeasuredWidth() \> r2.f2424b) goto L_0x000f\l}"];
subgraph cluster_Region_861185549 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|setMeasuredDimension(r2.f2424b, getMeasuredHeight())\l}"];
}
subgraph cluster_Region_1449426309 {
label = "R(1:(1:7)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_895172960 {
label = "IF [B:6:0x001f] THEN: R(1:7) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001f|if (getMeasuredWidth() \< r2.f2423a) goto L_0x0021\l}"];
subgraph cluster_Region_989703446 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0021|setMeasuredDimension(r2.f2423a, getMeasuredHeight())\l}"];
}
subgraph cluster_Region_747573386 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0019}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void com.facebook.ads.internal.view.r.onMeasure((r2v0 'this' com.facebook.ads.internal.view.r A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
}

