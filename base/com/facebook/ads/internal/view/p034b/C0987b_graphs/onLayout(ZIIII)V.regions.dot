digraph "CFG forcom.facebook.ads.internal.view.b.b.onLayout(ZIIII)V" {
subgraph cluster_Region_1661654037 {
label = "R(2:0|(2:(2:4|6)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r11 \- r9\lint int r1 = r12 \- r10\l}"];
subgraph cluster_Region_1446060229 {
label = "R(2:(2:4|6)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_716399656 {
label = "IF [B:1:0x0006, B:3:0x000a] THEN: R(2:4|6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r7.f1617b \<= 0) goto L_0x000c\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ADDED_TO_REGION\l|if (r7.f1618c \<= 0) goto L_0x000c\l}"];
subgraph cluster_Region_1762409267 {
label = "R(2:4|6)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|super.onLayout(r8, r9, r10, r11, r12)\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1128881120 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|float float r2 = java.lang.Math.min(((float) r0) \/ ((float) r7.f1617b), ((float) r1) \/ ((float) r7.f1618c))\lint int r3 = (int) (((float) r7.f1617b) * r2)\lint int r2 = (int) (r2 * ((float) r7.f1618c))\lint int r0 = (r0 \/ 2) + r9\lint int r1 = (r1 \/ 2) + r10\lr7.f1616a.layout(r0 \- (r3 \/ 2), r1 \- (r2 \/ 2), r0 + (r3 \/ 2), r1 + (r2 \/ 2))\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void com.facebook.ads.internal.view.b.b.onLayout((r7v0 'this' com.facebook.ads.internal.view.b.b A[IMMUTABLE_TYPE, THIS]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_2 -> Node_3;
}

