digraph "CFG forcom.facebook.ads.internal.adapters.k.a(Lcom\/facebook\/ads\/internal\/view\/a;)V" {
subgraph cluster_Region_1175085468 {
label = "R(2:0|(2:3|(1:5)(0)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r1 = f521a.entrySet().iterator()\l}"];
subgraph cluster_LoopRegion_1407791717 {
label = "LOOP:0: (2:3|(1:5)(0))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|if (r1.hasNext() != false) goto L_0x0010\l}"];
subgraph cluster_Region_1027288388 {
label = "R(2:3|(1:5)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|java.util.Map$Entry r0 = (java.util.Map.Entry) r1.next()\l}"];
subgraph cluster_IfRegion_1626390427 {
label = "IF [B:4:0x001a] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001a|if (r0.getValue() == r3) goto L_0x001c\l}"];
subgraph cluster_Region_1977820312 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001c|f521a.remove(r0.getKey())\l}"];
}
subgraph cluster_Region_1870879323 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000a|LOOP_START\lLOOP:0: B:1:0x000a\-\>B:7:0x000a\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0026}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000a\-\>B:7:0x000a\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0026|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000a|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void com.facebook.ads.internal.adapters.k.a((r3v0 com.facebook.ads.internal.view.a A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_10;
Node_1 -> Node_2;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

