digraph "CFG forcom.facebook.ads.internal.adapters.x.d(Landroid\/view\/View;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r5.getWidth() \<= 0) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r5.getHeight() \> 0) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"\"\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|SYNTHETIC\lSplitter:B:5:0x000f\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ Exception \-\> 0x004c \}\lSplitter:B:5:0x000f\l|android.graphics.Bitmap r0 = android.graphics.Bitmap.createBitmap(r5.getWidth(), r5.getHeight(), android.graphics.Bitmap.Config.ARGB_8888)     \/\/ Catch:\{ Exception \-\> 0x004c \}\lr0.setDensity(r5.getResources().getDisplayMetrics().densityDpi)     \/\/ Catch:\{ Exception \-\> 0x004c \}\lr5.draw(new android.graphics.Canvas(r0))     \/\/ Catch:\{ Exception \-\> 0x004c \}\ljava.io.ByteArrayOutputStream r1 = new java.io.ByteArrayOutputStream()     \/\/ Catch:\{ Exception \-\> 0x004c \}\lr0.compress(android.graphics.Bitmap.CompressFormat.JPEG, r4.f692c.mo10390h(), r1)     \/\/ Catch:\{ Exception \-\> 0x004c \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x004c|ExcHandler: Exception (e java.lang.Exception)\lSplitter:B:5:0x000f\l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|SYNTHETIC\lRETURN\l|return \"\"\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return android.util.Base64.encodeToString(r1.toByteArray(), 0)\l}"];
MethodNode[shape=record,label="{private java.lang.String com.facebook.ads.internal.adapters.x.d((r4v0 'this' com.facebook.ads.internal.adapters.x A[IMMUTABLE_TYPE, THIS]), (r5v0 android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
}

