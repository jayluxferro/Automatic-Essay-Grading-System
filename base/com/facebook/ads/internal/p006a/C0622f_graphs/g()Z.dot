digraph "CFG forcom.facebook.ads.internal.a.f.g()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r0 = mo10251d()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r0 != null) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x0009|java.util.Iterator r2 = r0.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|LOOP_START\lLOOP:0: B:4:0x000d\-\>B:11:0x0021\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r2.hasNext() == false) goto L_0x0029\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|android.content.Intent r0 = r2.next()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|SYNTHETIC\lSplitter:B:7:0x0019\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ Exception \-\> 0x0020 \}\lSplitter:B:7:0x0019\l|r5.f306a.startActivity(r0)     \/\/ Catch:\{ Exception \-\> 0x0020 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|SYNTHETIC\lRETURN\l|return true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|ExcHandler: Exception (r0v5 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:7:0x0019\l|java.lang.Exception r0 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|LOOP_END\lLOOP:0: B:4:0x000d\-\>B:11:0x0021\l|android.util.Log.d(f314e, \"Failed to open app intent, falling back\", r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029}"];
Node_13 [shape=record,label="{13\:\ 0x001e|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean com.facebook.ads.internal.a.f.g((r5v0 'this' com.facebook.ads.internal.a.f A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_16;
Node_13 -> Node_9;
Node_14 -> Node_12;
}

