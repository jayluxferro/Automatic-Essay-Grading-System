digraph "CFG forcom.facebook.ads.internal.a.g.a(Lorg\/json\/JSONObject;)Lcom\/facebook\/ads\/internal\/a\/g;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:com.facebook.ads.internal.a.g) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"package\" \l0x0006: INVOKE  (r1 I:java.lang.String) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optString(java.lang.String):java.lang.String type: VIRTUAL \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"appsite\" \l0x000c: INVOKE  (r2 I:java.lang.String) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optString(java.lang.String):java.lang.String type: VIRTUAL \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"appsite_url\" \l0x0012: INVOKE  (r3 I:java.lang.String) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optString(java.lang.String):java.lang.String type: VIRTUAL \l0x0016: CONST_STR  (r0 I:java.lang.String) =  \"key_hashes\" \l0x0018: INVOKE  (r5 I:org.json.JSONArray) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optJSONArray(java.lang.String):org.json.JSONArray type: VIRTUAL \l0x001c: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x001e: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r6 I:int) = (r5 I:org.json.JSONArray) org.json.JSONArray.length():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  (r6 I:java.lang.String) = (r5 I:org.json.JSONArray), (r0 I:int) org.json.JSONArray.optString(int):java.lang.String type: VIRTUAL \l0x002e: INVOKE  (r4 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0031: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: CONST_STR  (r0 I:java.lang.String) =  \"market_uri\" \l0x0036: INVOKE  (r5 I:java.lang.String) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optString(java.lang.String):java.lang.String type: VIRTUAL \l0x003a: CONST_STR  (r0 I:java.lang.String) =  \"fallback_url\" \l0x003c: INVOKE  (r6 I:java.lang.String) = (r7 I:org.json.JSONObject), (r0 I:java.lang.String) org.json.JSONObject.optString(java.lang.String):java.lang.String type: VIRTUAL \l0x0040: NEW_INSTANCE  (r0 I:com.facebook.ads.internal.a.g) =  com.facebook.ads.internal.a.g \l0x0042: INVOKE  \l  (r0 I:com.facebook.ads.internal.a.g)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r4 I:java.util.List)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.String)\l com.facebook.ads.internal.a.g.\<init\>(java.lang.String, java.lang.String, java.lang.String, java.util.List, java.lang.String, java.lang.String):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public static com.facebook.ads.internal.a.g com.facebook.ads.internal.a.g.a((r7 I:org.json.JSONObject A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_2;
}

