digraph "CFG forcom.facebook.ads.internal.a.h.a(Ljava\/util\/Map;Lcom\/facebook\/ads\/internal\/a\/a;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (android.text.TextUtils.isEmpty(r6.f308c) != false) goto L_0x0029\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r6 instanceof com.facebook.ads.internal.p006a.C0622f) == false) goto L_0x0031\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|r6.f307b.mo10682h(r6.f308c, r7)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|boolean r0 = com.facebook.ads.internal.p006a.C0616a.m297a(r8)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r6.f323d == null) goto L_0x0039\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r6.f323d.mo10258a(r8)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|if (r0 == false) goto L_0x0029\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|r6.f323d.mo10257a()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|com.facebook.ads.internal.p026q.p027a.C0898d.m1693a(r6.f306a, \"Click logged\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r6.f307b.mo10677c(r6.f308c, r7)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|java.util.HashMap r0 = new java.util.HashMap()\lr0.put(\"leave_time\", java.lang.Long.toString(\-1))\lr0.put(\"back_time\", java.lang.Long.toString(\-1))\lr0.put(\"outcome\", com.facebook.ads.internal.p006a.C0616a.CANNOT_TRACK.name())\lr6.f307b.mo10684j(r6.f308c, r0)\l}"];
MethodNode[shape=record,label="{protected final void com.facebook.ads.internal.a.h.a((r6v0 'this' com.facebook.ads.internal.a.h A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.facebook.ads.internal.a.a A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;, Lcom\/facebook\/ads\/internal\/a\/a;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_5;
Node_13 -> Node_10;
}

