digraph "CFG forcom.facebook.ads.internal.DisplayAdController.a(Lcom\/facebook\/ads\/RewardData;)V" {
subgraph cluster_Region_363956440 {
label = "R(1:(1:3)(1:(1:7)(1:8)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1041598261 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: R(1:(1:7)(1:8))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.f249p == null) goto L_0x0004\l}"];
subgraph cluster_Region_964896513 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|throw new java.lang.IllegalStateException(\"no adapter ready to set reward on\")\l}"];
}
subgraph cluster_Region_2024334745 {
label = "R(1:(1:7)(1:8)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1631999260 {
label = "IF [B:5:0x0014] THEN: R(1:7) ELSE: R(1:8) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r2.f249p.getPlacementType() != com.facebook.ads.internal.protocol.AdPlacementType.REWARDED_VIDEO) goto L_0x0016\l}"];
subgraph cluster_Region_1937267246 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001d|throw new java.lang.IllegalStateException(\"can only set on rewarded video ads\")\l}"];
}
subgraph cluster_Region_1407434863 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001e|((com.facebook.ads.internal.adapters.C0649ab) r2.f249p).mo10357a(r3)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0016}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0025}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.DisplayAdController.a((r2v0 'this' com.facebook.ads.internal.DisplayAdController A[IMMUTABLE_TYPE, THIS]), (r3v0 com.facebook.ads.RewardData A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

