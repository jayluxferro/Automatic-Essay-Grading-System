digraph "CFG forcom.facebook.ads.internal.c.a.b.a()Landroid\/os\/IBinder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IGET  (r0 I:java.util.concurrent.atomic.AtomicBoolean) = (r2 I:com.facebook.ads.internal.c.a$b) com.facebook.ads.internal.c.a.b.a java.util.concurrent.atomic.AtomicBoolean \l0x0003: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicBoolean)\l  (r1 I:boolean)\l  (r1 I:boolean)\l java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r1 I:java.lang.String) =  \"Binder already consumed\" \l0x000d: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IGET  (r0 I:java.util.concurrent.BlockingQueue\<android.os.IBinder\>) = (r2 I:com.facebook.ads.internal.c.a$b) com.facebook.ads.internal.c.a.b.b java.util.concurrent.BlockingQueue \l0x0013: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.BlockingQueue) java.util.concurrent.BlockingQueue.take():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r0 I:android.os.IBinder) = (android.os.IBinder) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r0 I:android.os.IBinder) \l}"];
MethodNode[shape=record,label="{public android.os.IBinder com.facebook.ads.internal.c.a.b.a((r2 'this' I:com.facebook.ads.internal.c.a$b A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

