digraph "CFG forcom.facebook.ads.internal.h.c.e()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.facebook.ads.internal.h.d) = (r6 I:com.facebook.ads.internal.h.c) com.facebook.ads.internal.h.c.c com.facebook.ads.internal.h.d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC \l0x0008: IGET  (r2 I:com.facebook.ads.internal.h.d) = (r6 I:com.facebook.ads.internal.h.c) com.facebook.ads.internal.h.c.c com.facebook.ads.internal.h.d \l0x000a: INVOKE  (r2 I:long) = (r2 I:com.facebook.ads.internal.h.d) com.facebook.ads.internal.h.d.a():long type: VIRTUAL \l0x000e: IGET  (r4 I:com.facebook.ads.internal.h.d) = (r6 I:com.facebook.ads.internal.h.c) com.facebook.ads.internal.h.c.c com.facebook.ads.internal.h.d \l0x0010: INVOKE  (r4 I:int) = (r4 I:com.facebook.ads.internal.h.d) com.facebook.ads.internal.h.d.l():int type: VIRTUAL \l0x0014: CAST  (r4 I:long) = (long) (r4 I:int) \l0x0015: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0016: CMP_L  (r0 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public boolean com.facebook.ads.internal.h.c.e((r6 'this' I:com.facebook.ads.internal.h.c A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

