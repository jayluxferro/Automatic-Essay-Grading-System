digraph "CFG forcom.facebook.ads.internal.j.a.a(Ljava\/lang\/Throwable;Ljava\/lang\/String;)Lcom\/facebook\/ads\/internal\/j\/a;" {
subgraph cluster_Region_1501650759 {
label = "R(5:0|(1:2)|3|(1:7)|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.HashMap java.util.HashMap r0 = new java.util.HashMap()\l}"];
subgraph cluster_IfRegion_256871851 {
label = "IF [B:1:0x0005] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r6 != null) goto L_0x0007\l}"];
subgraph cluster_Region_340930330 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|r0.put(\"ex\", r6.getClass().getSimpleName())\lr0.put(\"ex_msg\", r6.getMessage())\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x001d|int int r1 = (int) (java.lang.System.currentTimeMillis() \/ 1000)\l}"];
subgraph cluster_IfRegion_1775012703 {
label = "IF [B:4:0x0029] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0029|if (r7 == null) goto L_0x002f\l}"];
subgraph cluster_Region_833604527 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002f|java.lang.String r7 = f912a\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x002e|RETURN\l|return new com.facebook.ads.internal.p016j.C0766a(\"error\", r0, r1, r7)\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x002b|PHI: r7 \l  PHI: (r7v2 java.lang.String) = (r7v0 java.lang.String), (r7v1 java.lang.String) binds: [B:4:0x0029, B:7:0x002f] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public static com.facebook.ads.internal.j.a com.facebook.ads.internal.j.a.a((r6v0 java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.Nullable, \{\}], Annotation[BUILD, android.support.annotation.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_5;
Node_5 -> Node_6;
}

