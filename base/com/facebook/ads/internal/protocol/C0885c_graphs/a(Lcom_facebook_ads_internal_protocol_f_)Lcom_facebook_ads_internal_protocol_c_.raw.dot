digraph "CFG forcom.facebook.ads.internal.protocol.c.a(Lcom\/facebook\/ads\/internal\/protocol\/f;)Lcom\/facebook\/ads\/internal\/protocol\/c;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  com.facebook.ads.internal.protocol.c.1.a int[] \l0x0002: INVOKE  (r1 I:int) = (r2 I:com.facebook.ads.internal.protocol.f) com.facebook.ads.internal.protocol.f.ordinal():int type: VIRTUAL \l0x0006: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] t:[0x000e, 0x0011, 0x0011, 0x0011, 0x0011, 0x0014, 0x0014, 0x0014, 0x0014, 0x0017] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: SGET  (r0 I:com.facebook.ads.internal.protocol.c) =  com.facebook.ads.internal.protocol.c.a com.facebook.ads.internal.protocol.c \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r0 I:com.facebook.ads.internal.protocol.c) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: SGET  (r0 I:com.facebook.ads.internal.protocol.c) =  com.facebook.ads.internal.protocol.c.d com.facebook.ads.internal.protocol.c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: SGET  (r0 I:com.facebook.ads.internal.protocol.c) =  com.facebook.ads.internal.protocol.c.b com.facebook.ads.internal.protocol.c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: SGET  (r0 I:com.facebook.ads.internal.protocol.c) =  com.facebook.ads.internal.protocol.c.c com.facebook.ads.internal.protocol.c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r0 I:com.facebook.ads.internal.protocol.c) =  com.facebook.ads.internal.protocol.c.e com.facebook.ads.internal.protocol.c \l}"];
MethodNode[shape=record,label="{public static com.facebook.ads.internal.protocol.c com.facebook.ads.internal.protocol.c.a((r2 I:com.facebook.ads.internal.protocol.f A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_4 -> Node_3;
Node_5 -> Node_3;
Node_6 -> Node_3;
Node_7 -> Node_3;
}

