digraph "CFG forcom.facebook.ads.internal.q.b.d.a(Landroid\/graphics\/Bitmap;F)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:int) = (r13 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x0004: INVOKE  (r7 I:int) = (r13 I:android.graphics.Bitmap) android.graphics.Bitmap.getHeight():int type: VIRTUAL \l0x0008: ARITH  (r0 I:int) = (r3 I:int) * (r7 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|SYNTHETIC\lSplitter:B:1:0x000a\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000a\l|0x000a: NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] A[Catch:\{ OutOfMemoryError \-\> 0x003e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0010: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INVOKE  \l  (r0 I:android.graphics.Bitmap)\l  (r1 I:int[])\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l android.graphics.Bitmap.getPixels(int[], int, int, int, int, int, int):void type: VIRTUAL \l0x0014: SGET  (r9 I:int) =  com.facebook.ads.internal.q.b.e.a int \l0x0016: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0018: INVOKE  (r0 I:java.util.ArrayList), (r9 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x001b: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x001d: INVOKE  (r2 I:java.util.ArrayList), (r9 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0020: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r10 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: NEW_INSTANCE  (r4 I:com.facebook.ads.internal.q.b.d$a) =  com.facebook.ads.internal.q.b.d$a \l0x0025: CAST  (r8 I:int) = (int) (r14 I:float) \l0x0026: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0027: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: INVOKE  \l  (r4 I:com.facebook.ads.internal.q.b.d$a)\l  (r5 I:int[])\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:int)\l com.facebook.ads.internal.q.b.d.a.\<init\>(int[], int, int, int, int, int, int):void type: DIRECT \l0x002c: INVOKE  (r0 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x002f: NEW_INSTANCE  (r4 I:com.facebook.ads.internal.q.b.d$a) =  com.facebook.ads.internal.q.b.d$a \l0x0031: CAST  (r8 I:int) = (int) (r14 I:float) \l0x0032: CONST  (r11 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0033: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0034: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: INVOKE  \l  (r4 I:com.facebook.ads.internal.q.b.d$a)\l  (r5 I:int[])\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:int)\l com.facebook.ads.internal.q.b.d.a.\<init\>(int[], int, int, int, int, int, int):void type: DIRECT \l0x0038: INVOKE  (r2 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x003b: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|ExcHandler: OutOfMemoryError null\lSplitter:B:1:0x000a\l|0x003e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|SYNTHETIC\lSplitter:B:9:0x0041\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0041\l|0x0041: SGET  (r4 I:java.util.concurrent.ExecutorService) =  com.facebook.ads.internal.q.b.e.b java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x0052 \}, TRY_ENTER]\l0x0043: INVOKE  \l  (r4 I:java.util.concurrent.ExecutorService)\l  (r0 I:java.util.Collection)\l java.util.concurrent.ExecutorService.invokeAll(java.util.Collection):java.util.List type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|SYNTHETIC\lSplitter:B:11:0x0046\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0046\l|0x0046: SGET  (r0 I:java.util.concurrent.ExecutorService) =  com.facebook.ads.internal.q.b.e.b java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x0055 \}, TRY_ENTER]\l0x0048: INVOKE  \l  (r0 I:java.util.concurrent.ExecutorService)\l  (r2 I:java.util.Collection)\l java.util.concurrent.ExecutorService.invokeAll(java.util.Collection):java.util.List type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0055 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|SYNTHETIC\lSplitter:B:13:0x004b\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x004b\l|0x004b: SGET  (r0 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config A[Catch:\{ OutOfMemoryError \-\> 0x0058 \}, TRY_ENTER]\l0x004d: INVOKE  (r0 I:android.graphics.Bitmap) = \l  (r1 I:int[])\l  (r3 I:int)\l  (r7 I:int)\l  (r0 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int[], int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC A[Catch:\{ OutOfMemoryError \-\> 0x0058 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|ExcHandler: InterruptedException null\lSplitter:B:9:0x0041\l|0x0052: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|0x0053: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0055|ExcHandler: InterruptedException null\lSplitter:B:11:0x0046\l|0x0055: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|0x0056: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|ExcHandler: OutOfMemoryError null\lSplitter:B:13:0x004b\l|0x0058: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|0x0059: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public android.graphics.Bitmap com.facebook.ads.internal.q.b.d.a((r12 'this' I:com.facebook.ads.internal.q.b.d A[IMMUTABLE_TYPE, THIS]), (r13 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_13 -> Node_20;
Node_14 -> Node_20;
Node_14 -> Node_8;
Node_16 -> Node_17;
Node_17 -> Node_8;
Node_18 -> Node_19;
Node_19 -> Node_8;
Node_20 -> Node_21;
Node_21 -> Node_8;
}

