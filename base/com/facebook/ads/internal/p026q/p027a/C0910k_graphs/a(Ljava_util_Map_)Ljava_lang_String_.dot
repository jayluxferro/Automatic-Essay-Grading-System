digraph "CFG forcom.facebook.ads.internal.q.a.k.a(Ljava\/util\/Map;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.json.JSONObject r2 = new org.json.JSONObject()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r4 == null) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|java.util.Iterator r3 = r4.entrySet().iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|LOOP_START\lLOOP:0: B:3:0x000f\-\>B:12:0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r3.hasNext() == false) goto L_0x002e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|java.util.Map$Entry r0 = r3.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|SYNTHETIC\lSplitter:B:6:0x001b\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ JSONException \-\> 0x0029 \}\lSplitter:B:6:0x001b\l|r2.put((java.lang.String) r0.getKey(), r0.getValue())     \/\/ Catch:\{ JSONException \-\> 0x0029 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|ExcHandler: JSONException (r0v5 'e' org.json.JSONException A[CUSTOM_DECLARE])\lSplitter:B:6:0x001b\l|org.json.JSONException r0 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|r0.printStackTrace()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e}"];
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|return r2.toString()\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000f\-\>B:12:0x000f\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.lang.String com.facebook.ads.internal.q.a.k.a((r4v0 java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map, \<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_12 -> Node_3;
Node_13 -> Node_10;
Node_14 -> Node_12;
Node_15 -> Node_12;
}

