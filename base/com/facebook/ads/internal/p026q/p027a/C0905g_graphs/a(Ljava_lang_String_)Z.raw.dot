digraph "CFG forcom.facebook.ads.internal.q.a.g.a(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST_STR  (r1 I:java.lang.String) =  \"PATH\" \l0x0003: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.System.getenv(java.lang.String):java.lang.String type: STATIC \l0x0007: CONST_STR  (r2 I:java.lang.String) =  \":\" \l0x0009: INVOKE  (r3 I:java.lang.String[]) = (r1 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x000d: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x000e: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0013: NEW_INSTANCE  (r5 I:java.io.File) =  java.io.File \l0x0015: INVOKE  (r5 I:java.io.File), (r1 I:java.lang.String) java.io.File.\<init\>(java.lang.String):void type: DIRECT \l0x0018: INVOKE  (r1 I:boolean) = (r5 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: INVOKE  (r1 I:boolean) = (r5 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: ARITH  (r1 I:int) = (r2 I:int) + (1 int) \l0x0026: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: INVOKE  (r5 I:java.io.File[]) = (r5 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: ARRAY_LENGTH  (r6 I:int) = (r5 I:?[]) \l0x002f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r1 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: AGET  (r7 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0034: INVOKE  (r7 I:java.lang.String) = (r7 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r7 I:boolean) = (r7 I:java.lang.String), (r8 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
MethodNode[shape=record,label="{private static boolean com.facebook.ads.internal.q.a.g.a((r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_6;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_6;
Node_10 -> Node_11[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_10;
}

