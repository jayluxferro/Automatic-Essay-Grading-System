digraph "CFG forcom.facebook.ads.internal.q.a.e.f(Landroid\/content\/Context;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:android.content.pm.PackageManager) = (r4 I:android.content.Context) android.content.Context.getPackageManager():android.content.pm.PackageManager type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0011 \}, TRY_ENTER]\l0x0005: INVOKE  (r2 I:java.lang.String) = (r4 I:android.content.Context) android.content.Context.getPackageName():java.lang.String type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0011 \}]\l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ NameNotFoundException \-\> 0x0011 \}]\l0x000a: INVOKE  (r1 I:android.content.pm.ApplicationInfo) = \l  (r1 I:android.content.pm.PackageManager)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int):android.content.pm.ApplicationInfo type: VIRTUAL A[Catch:\{ NameNotFoundException \-\> 0x0011 \}]\l0x000e: IGET  (r0 I:int) = (r1 I:android.content.pm.ApplicationInfo) android.content.pm.ApplicationInfo.minSdkVersion int A[Catch:\{ NameNotFoundException \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|ExcHandler: NameNotFoundException null\lSplitter:B:1:0x0001\l|0x0011: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{private static int com.facebook.ads.internal.q.a.e.f((r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_3;
}

