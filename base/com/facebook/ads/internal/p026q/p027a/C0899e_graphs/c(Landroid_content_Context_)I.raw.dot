digraph "CFG forcom.facebook.ads.internal.q.a.e.c(Landroid\/content\/Context;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:android.content.res.AssetManager) = (r2 I:android.content.Context) android.content.Context.getAssets():android.content.res.AssetManager type: VIRTUAL A[Catch:\{ XmlPullParserException \-\> 0x0012, IOException \-\> 0x000f \}, TRY_ENTER]\l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"AndroidManifest.xml\" A[Catch:\{ XmlPullParserException \-\> 0x0012, IOException \-\> 0x000f \}]\l0x0006: INVOKE  (r0 I:android.content.res.XmlResourceParser) = \l  (r0 I:android.content.res.AssetManager)\l  (r1 I:java.lang.String)\l android.content.res.AssetManager.openXmlResourceParser(java.lang.String):android.content.res.XmlResourceParser type: VIRTUAL A[Catch:\{ XmlPullParserException \-\> 0x0012, IOException \-\> 0x000f \}]\l0x000a: INVOKE  (r0 I:int) = (r0 I:org.xmlpull.v1.XmlPullParser) com.facebook.ads.internal.q.a.e.a(org.xmlpull.v1.XmlPullParser):int type: STATIC A[Catch:\{ XmlPullParserException \-\> 0x0012, IOException \-\> 0x000f \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN  (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|ExcHandler: IOException null\lSplitter:B:0:0x0000\l|0x000f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|ExcHandler: XmlPullParserException null\lSplitter:B:0:0x0000\l|0x0012: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
MethodNode[shape=record,label="{public static int com.facebook.ads.internal.q.a.e.c((r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_0 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_4;
Node_1 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_3;
Node_6 -> Node_5;
}

