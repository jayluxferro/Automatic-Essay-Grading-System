digraph "CFG forcom.facebook.ads.internal.q.a.e.a(Lorg\/xmlpull\/v1\/XmlPullParser;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r0 I:int) = (r4 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.next():int type: INTERFACE \l0x0005: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r4 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getEventType():int type: INTERFACE \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r0 I:java.lang.String) = (r4 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE \l0x0013: CONST_STR  (r2 I:java.lang.String) =  \"uses\-sdk\" \l0x0015: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  (r2 I:int) = (r4 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getAttributeCount():int type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.String) = (r4 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeName(int):java.lang.String type: INTERFACE \l0x0026: CONST_STR  (r3 I:java.lang.String) =  \"minSdkVersion\" \l0x0028: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: INVOKE  (r0 I:java.lang.String) = (r4 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeValue(int):java.lang.String type: INTERFACE \l0x0032: INVOKE  (r1 I:int) = (r0 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: RETURN  (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
MethodNode[shape=record,label="{public static int com.facebook.ads.internal.q.a.e.a((r4 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.VisibleForTesting, \{otherwise=2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_8;
}

