digraph "CFG forcom.facebook.ads.internal.q.c.g.a(Landroid\/content\/Context;Landroid\/net\/Uri;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r3 I:android.net.Uri) android.net.Uri.getScheme():java.lang.String type: VIRTUAL \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String) com.facebook.ads.internal.q.c.g.a(java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) = (r2 I:android.content.Context) com.facebook.ads.internal.l.a.g(android.content.Context):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  \l  (r1 I:com.facebook.ads.internal.q.c.g)\l  (r2 I:android.content.Context)\l  (r3 I:android.net.Uri)\l  (r4 I:java.lang.String)\l com.facebook.ads.internal.q.c.g.b(android.content.Context, android.net.Uri, java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  \l  (r1 I:com.facebook.ads.internal.q.c.g)\l  (r2 I:android.content.Context)\l  (r3 I:android.net.Uri)\l com.facebook.ads.internal.q.c.g.b(android.content.Context, android.net.Uri):void type: DIRECT \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.q.c.g.a((r1 'this' I:com.facebook.ads.internal.q.c.g A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

