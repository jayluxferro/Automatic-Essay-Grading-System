digraph "CFG forcom.facebook.ads.internal.q.c.g.a(Lcom\/facebook\/ads\/internal\/q\/c\/g;Landroid\/content\/Context;Landroid\/net\/Uri;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.String) = (r5 I:android.net.Uri) android.net.Uri.getScheme():java.lang.String type: VIRTUAL \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String) com.facebook.ads.internal.q.c.g.a(java.lang.String):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.String) = (r5 I:android.net.Uri) android.net.Uri.getHost():java.lang.String type: VIRTUAL \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"play.google.com\" \l0x0010: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0029 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r1 I:java.lang.String) = (r5 I:android.net.Uri) android.net.Uri.getScheme():java.lang.String type: VIRTUAL \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"market\" \l0x001d: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|SYNTHETIC\lSplitter:B:8:0x0025\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0025\l|0x0025: INVOKE  \l  (r3 I:com.facebook.ads.internal.q.c.g)\l  (r4 I:android.content.Context)\l  (r5 I:android.net.Uri)\l com.facebook.ads.internal.q.c.g.a(android.content.Context, android.net.Uri):void type: VIRTUAL A[Catch:\{ c \-\> 0x002b \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|ExcHandler: c null\lSplitter:B:8:0x0025\l|0x002b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: INVOKE  \l  (r3 I:com.facebook.ads.internal.q.c.g)\l  (r4 I:android.content.Context)\l  (r5 I:android.net.Uri)\l  (r6 I:java.lang.String)\l com.facebook.ads.internal.q.c.g.a(android.content.Context, android.net.Uri, java.lang.String):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: INVOKE  \l  (r3 I:com.facebook.ads.internal.q.c.g)\l  (r4 I:android.content.Context)\l  (r5 I:android.net.Uri)\l  (r6 I:java.lang.String)\l com.facebook.ads.internal.q.c.g.a(android.content.Context, android.net.Uri, java.lang.String):void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{public static void com.facebook.ads.internal.q.c.g.a((r3 I:com.facebook.ads.internal.q.c.g A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.net.Uri A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_13 -> Node_10;
Node_14 -> Node_10;
}

