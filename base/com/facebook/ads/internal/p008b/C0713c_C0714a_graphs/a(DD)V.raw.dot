digraph "CFG forcom.facebook.ads.internal.b.c.a.a(DD)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.h int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0004: IPUT  (r0 I:int), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.h int \l0x0006: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.i double \l0x0008: ARITH  (r0 I:double) = (r0 I:double) + (r6 I:double) \l0x0009: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.i double \l0x000b: IPUT  (r8 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.c double \l0x000d: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.k double \l0x000f: ARITH  (r2 I:double) = (r8 I:double) * (r6 I:double) \l0x0011: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0012: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.k double \l0x0014: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.k double \l0x0016: IGET  (r2 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.i double \l0x0018: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0019: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.a double \l0x001b: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.j double \l0x001d: INVOKE  (r0 I:double) = (r0 I:double), (r8 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0021: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.j double \l0x0023: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.f double \l0x0025: INVOKE  (r0 I:double) = (r0 I:double), (r8 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x0029: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.f double \l0x002b: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.e double \l0x002d: CMP_L  (r0 I:int) = (r8 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x002f|0x002f: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0046 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0031|0x0031: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.d double \l0x0033: ARITH  (r0 I:double) = (r0 I:double) + (r6 I:double) \l0x0034: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.d double \l0x0036: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.b double \l0x0038: ARITH  (r0 I:double) = (r0 I:double) + (r6 I:double) \l0x0039: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.b double \l0x003b: IGET  (r0 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.g double \l0x003d: IGET  (r2 I:double) = (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.b double \l0x003f: INVOKE  (r0 I:double) = (r0 I:double), (r2 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x0043: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.g double \l}"];
Node_3 [shape=record,label="{3\:\ 0x0045|0x0045: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0046|0x0046: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0048: IPUT  (r0 I:double), (r5 I:com.facebook.ads.internal.b.c$a) com.facebook.ads.internal.b.c.a.b double \l}"];
MethodNode[shape=record,label="{public void com.facebook.ads.internal.b.c.a.a((r5 'this' I:com.facebook.ads.internal.b.c$a A[IMMUTABLE_TYPE, THIS]), (r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

