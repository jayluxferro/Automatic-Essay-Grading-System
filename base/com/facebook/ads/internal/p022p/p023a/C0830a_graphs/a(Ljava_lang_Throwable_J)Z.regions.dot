digraph "CFG forcom.facebook.ads.internal.p.a.a.a(Ljava\/lang\/Throwable;J)Z" {
subgraph cluster_Region_213622894 {
label = "R(3:0|(1:2)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long long r2 = (java.lang.System.currentTimeMillis() \- r10) + 10\l}"];
subgraph cluster_IfRegion_2139433794 {
label = "IF [B:1:0x0010] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r8.f1152c.mo10835a() == true) goto L_0x0012\l}"];
subgraph cluster_Region_1078511873 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0012|r8.f1152c.mo10833a(\"ELAPSED TIME = \" + r2 + \", CT = \" + r8.f1153d + \", RT = \" + r8.f1154e)\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0044|RETURN\l|return r8.f1157j ? r2 \>= ((long) r8.f1154e) : r2 \>= ((long) r8.f1153d)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0042}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0046}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x004b}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x004e}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0050}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0055}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0057}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected boolean com.facebook.ads.internal.p.a.a.a((r8v0 'this' com.facebook.ads.internal.p.a.a A[IMMUTABLE_TYPE, THIS]), (r9v0 java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_14;
}

