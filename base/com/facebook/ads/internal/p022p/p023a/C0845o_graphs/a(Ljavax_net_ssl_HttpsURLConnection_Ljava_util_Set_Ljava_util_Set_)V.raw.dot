digraph "CFG forcom.facebook.ads.internal.p.a.o.a(Ljavax\/net\/ssl\/HttpsURLConnection;Ljava\/util\/Set;Ljava\/util\/Set;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"4.0.3\" \l0x0008: SGET  (r1 I:java.lang.String) =  android.os.Build.VERSION.RELEASE java.lang.String \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|SYNTHETIC\lSplitter:B:5:0x0011\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0011\l|0x0011: INVOKE  (r2 I:java.security.cert.Certificate[]) = (r6 I:javax.net.ssl.HttpsURLConnection) javax.net.ssl.HttpsURLConnection.getServerCertificates():java.security.cert.Certificate[] type: VIRTUAL A[Catch:\{ Exception \-\> 0x0052 \}, TRY_ENTER]\l0x0015: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0016: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0017: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:17:0x004a A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: AGET  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ Exception \-\> 0x0052 \}]\l0x001c: CHECK_CAST  (r0 I:java.security.cert.X509Certificate) = (java.security.cert.X509Certificate) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0052 \}]\l0x001e: INVOKE  (r4 I:byte[]) = (r0 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getEncoded():byte[] type: VIRTUAL A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0022: CONST_STR  (r5 I:java.lang.String) =  \"SHA\-1\" A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0024: INVOKE  (r4 I:java.lang.String) = (r4 I:byte[]), (r5 I:java.lang.String) com.facebook.ads.internal.p.a.o.a(byte[], java.lang.String):java.lang.String type: STATIC A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0030 A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r4 I:boolean) = (r7 I:java.util.Set), (r4 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r0 I:java.security.PublicKey) = (r0 I:java.security.cert.X509Certificate) java.security.cert.X509Certificate.getPublicKey():java.security.PublicKey type: VIRTUAL A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0034: INVOKE  (r0 I:byte[]) = (r0 I:java.security.PublicKey) java.security.PublicKey.getEncoded():byte[] type: INTERFACE A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0038: CONST_STR  (r4 I:java.lang.String) =  \"SHA\-1\" A[Catch:\{ Exception \-\> 0x0052 \}]\l0x003a: INVOKE  (r0 I:java.lang.String) = (r0 I:byte[]), (r4 I:java.lang.String) com.facebook.ads.internal.p.a.o.a(byte[], java.lang.String):java.lang.String type: STATIC A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0046 A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: INVOKE  (r0 I:boolean) = (r8 I:java.util.Set), (r0 I:java.lang.Object) java.util.Set.contains(java.lang.Object):boolean type: INTERFACE A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: ARITH  (r0 I:int) = (r1 I:int) + (1 int) A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0048: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0052 \}]\l0x0049: GOTO  \-\> 0x0018 A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: NEW_INSTANCE  (r0 I:java.security.cert.CertificateException) =  java.security.cert.CertificateException A[Catch:\{ Exception \-\> 0x0052 \}]\l0x004c: CONST_STR  (r1 I:java.lang.String) =  \"Unable to find valid certificate or public key.\" A[Catch:\{ Exception \-\> 0x0052 \}]\l0x004e: INVOKE  \l  (r0 I:java.security.cert.CertificateException)\l  (r1 I:java.lang.String)\l java.security.cert.CertificateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ Exception \-\> 0x0052 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ Exception \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|ExcHandler: Exception null\lSplitter:B:5:0x0011\l|0x0052: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|0x0053: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void com.facebook.ads.internal.p.a.o.a((r6 I:javax.net.ssl.HttpsURLConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.Set\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.Set\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljavax\/net\/ssl\/HttpsURLConnection;, Ljava\/util\/Set, \<, Ljava\/lang\/String;, \>;, Ljava\/util\/Set, \<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_4;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_7;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

