digraph "CFG forcom.facebook.ads.internal.p.b.a.d.d(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r6 I:?[long, double]) = (1 ?[long, double]) \l0x0002: INVOKE  (r0 I:long) = (r8 I:java.io.File) java.io.File.length():long type: VIRTUAL \l0x0006: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0008: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r8 I:java.io.File) com.facebook.ads.internal.p.b.a.d.e(java.io.File):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: NEW_INSTANCE  (r2 I:java.io.RandomAccessFile) =  java.io.RandomAccessFile \l0x0012: CONST_STR  (r3 I:java.lang.String) =  \"rwd\" \l0x0014: INVOKE  \l  (r2 I:java.io.RandomAccessFile)\l  (r8 I:java.io.File)\l  (r3 I:java.lang.String)\l java.io.RandomAccessFile.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x0017: ARITH  (r4 I:long) = (r0 I:long) \- (r6 I:long) \l0x0019: INVOKE  (r2 I:java.io.RandomAccessFile), (r4 I:long) java.io.RandomAccessFile.seek(long):void type: VIRTUAL \l0x001c: INVOKE  (r3 I:byte) = (r2 I:java.io.RandomAccessFile) java.io.RandomAccessFile.readByte():byte type: VIRTUAL \l0x0020: ARITH  (r0 I:long) = (r0 I:long) \- (r6 I:long) \l0x0021: INVOKE  (r2 I:java.io.RandomAccessFile), (r0 I:long) java.io.RandomAccessFile.seek(long):void type: VIRTUAL \l0x0024: INVOKE  (r2 I:java.io.RandomAccessFile), (r3 I:int) java.io.RandomAccessFile.write(int):void type: VIRTUAL \l0x0027: INVOKE  (r2 I:java.io.RandomAccessFile) java.io.RandomAccessFile.close():void type: VIRTUAL \l}"];
MethodNode[shape=record,label="{static void com.facebook.ads.internal.p.b.a.d.d((r8 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_3;
}

