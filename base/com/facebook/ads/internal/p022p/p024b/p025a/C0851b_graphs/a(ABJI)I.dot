digraph "CFG forcom.facebook.ads.internal.p.b.a.b.a([BJI)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IOException \-\> 0x000f \}\lSplitter:B:1:0x0001\l|r6.f1183c.seek(r8)     \/\/ Catch:\{ IOException \-\> 0x000f \}\lint r0 = r6.f1183c.read(r7, 0, r10)     \/\/ Catch:\{ IOException \-\> 0x000f \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|monitor\-exit(r6)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0001\l|java.io.IOException r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ IOException \-\> 0x000f \}\l|java.lang.Object[] r3 = new java.lang.Object[]\{java.lang.Integer.valueOf(r10), java.lang.Long.valueOf(r8), java.lang.Integer.valueOf(mo10872a()), java.lang.Integer.valueOf(r7.length)\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|Catch:\{ IOException \-\> 0x000f \}\l|throw new com.facebook.ads.internal.p022p.p024b.C0879l(java.lang.String.format(\"Error reading %d bytes with offset %d from file[%d bytes] to buffer[%d bytes]\", r3), r0)     \/\/ Catch:\{ IOException \-\> 0x000f \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|REMOVE\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized int com.facebook.ads.internal.p.b.a.b.a((r6v0 'this' com.facebook.ads.internal.p.b.a.b A[IMMUTABLE_TYPE, THIS]), (r7v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

