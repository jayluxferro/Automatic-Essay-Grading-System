digraph "CFG forcom.facebook.ads.internal.p.b.m.a([BJI)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST_STR  (r0 I:java.lang.String) =  \"Buffer must be not null!\" \l0x0004: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) com.facebook.ads.internal.p.b.j.a(java.lang.Object, java.lang.String):java.lang.Object type: STATIC \l0x0007: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0009: CMP_L  (r0 I:int) = (r8 I:long), (r4 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: CONST_STR  (r3 I:java.lang.String) =  \"Data offset must be positive!\" \l0x0010: INVOKE  (r0 I:boolean), (r3 I:java.lang.String) com.facebook.ads.internal.p.b.j.a(boolean, java.lang.String):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r10 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: ARRAY_LENGTH  (r0 I:int) = (r7 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r10 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: CONST_STR  (r0 I:java.lang.String) =  \"Length must be in range [0..buffer.length]\" \l0x001a: INVOKE  (r1 I:boolean), (r0 I:java.lang.String) com.facebook.ads.internal.p.b.j.a(boolean, java.lang.String):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{static void com.facebook.ads.internal.p.b.m.a((r7 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_9 -> Node_3;
Node_10 -> Node_7;
}

