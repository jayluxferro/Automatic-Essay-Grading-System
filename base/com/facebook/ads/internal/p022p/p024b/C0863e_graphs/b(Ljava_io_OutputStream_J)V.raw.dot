digraph "CFG forcom.facebook.ads.internal.p.b.e.b(Ljava\/io\/OutputStream;J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:com.facebook.ads.internal.p.b.h) =  com.facebook.ads.internal.p.b.h A[Catch:\{ all \-\> 0x0026 \}, TRY_ENTER]\l0x0002: IGET  (r1 I:com.facebook.ads.internal.p.b.h) = (r4 I:com.facebook.ads.internal.p.b.e) com.facebook.ads.internal.p.b.e.a com.facebook.ads.internal.p.b.h A[Catch:\{ all \-\> 0x0026 \}]\l0x0004: INVOKE  \l  (r0 I:com.facebook.ads.internal.p.b.h)\l  (r1 I:com.facebook.ads.internal.p.b.h)\l com.facebook.ads.internal.p.b.h.\<init\>(com.facebook.ads.internal.p.b.h):void type: DIRECT A[Catch:\{ all \-\> 0x0026 \}]\l0x0007: CAST  (r1 I:int) = (int) (r6 I:long) A[Catch:\{ all \-\> 0x0026 \}]\l0x0008: INVOKE  (r0 I:com.facebook.ads.internal.p.b.h), (r1 I:int) com.facebook.ads.internal.p.b.h.a(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0026 \}]\l0x000d: NEW_ARRAY  (r1 I:byte[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r2 I:int) = (r0 I:com.facebook.ads.internal.p.b.h), (r1 I:byte[]) com.facebook.ads.internal.p.b.h.a(byte[]):int type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0026 \}]\l0x0017: INVOKE  \l  (r5 I:java.io.OutputStream)\l  (r1 I:byte[])\l  (r3 I:int)\l  (r2 I:int)\l java.io.OutputStream.write(byte[], int, int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x001a: CAST  (r2 I:long) = (long) (r2 I:int) A[Catch:\{ all \-\> 0x0026 \}]\l0x001b: ARITH  (r6 I:long) = (r6 I:long) + (r2 I:long) A[Catch:\{ all \-\> 0x0026 \}]\l0x001c: GOTO  \-\> 0x000f A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r5 I:java.io.OutputStream) java.io.OutputStream.flush():void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IGET  (r0 I:com.facebook.ads.internal.p.b.h) = (r4 I:com.facebook.ads.internal.p.b.e) com.facebook.ads.internal.p.b.e.a com.facebook.ads.internal.p.b.h \l0x0022: INVOKE  (r0 I:com.facebook.ads.internal.p.b.h) com.facebook.ads.internal.p.b.h.b():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x0026: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IGET  (r1 I:com.facebook.ads.internal.p.b.h) = (r4 I:com.facebook.ads.internal.p.b.e) com.facebook.ads.internal.p.b.e.a com.facebook.ads.internal.p.b.h \l0x0029: INVOKE  (r1 I:com.facebook.ads.internal.p.b.h) com.facebook.ads.internal.p.b.h.b():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.facebook.ads.internal.p.b.e.b((r4 'this' I:com.facebook.ads.internal.p.b.e A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

