digraph "CFG forcom.facebook.ads.internal.p.b.f.d(Ljava\/net\/Socket;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ SocketException \-\> 0x000a, IOException \-\> 0x0013 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|Catch:\{ SocketException \-\> 0x000a, IOException \-\> 0x0013 \}\l|if (r4.isInputShutdown() != false) goto L_?     \/\/ Catch:\{ SocketException \-\> 0x000a, IOException \-\> 0x0013 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|Catch:\{ SocketException \-\> 0x000a, IOException \-\> 0x0013 \}\l|r4.shutdownInput()     \/\/ Catch:\{ SocketException \-\> 0x000a, IOException \-\> 0x0013 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|ExcHandler: SocketException (e java.net.SocketException)\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|android.util.Log.d(\"ProxyCache\", \"Releasing input stream... Socket is closed by client.\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|ExcHandler: IOException (r0v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.io.IOException r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|m1593a((java.lang.Throwable) new com.facebook.ads.internal.p022p.p024b.C0879l(\"Error closing socket input stream\", r0))\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.facebook.ads.internal.p.b.f.d((r3v0 'this' com.facebook.ads.internal.p.b.f A[IMMUTABLE_TYPE, THIS]), (r4v0 java.net.Socket A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_11;
}

