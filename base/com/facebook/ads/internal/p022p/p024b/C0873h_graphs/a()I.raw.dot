digraph "CFG forcom.facebook.ads.internal.p.b.h.a()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:int) = (r2 I:com.facebook.ads.internal.p.b.h) com.facebook.ads.internal.p.b.h.d int A[Catch:\{ all \-\> 0x000e \}, TRY_ENTER]\l0x0003: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x000e \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a A[Catch:\{ all \-\> 0x000e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r2 I:com.facebook.ads.internal.p.b.h) com.facebook.ads.internal.p.b.h.d():void type: DIRECT A[Catch:\{ all \-\> 0x000e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r2 I:com.facebook.ads.internal.p.b.h) com.facebook.ads.internal.p.b.h.d int A[Catch:\{ all \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|0x000f: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized int com.facebook.ads.internal.p.b.h.a((r2 'this' I:com.facebook.ads.internal.p.b.h A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

