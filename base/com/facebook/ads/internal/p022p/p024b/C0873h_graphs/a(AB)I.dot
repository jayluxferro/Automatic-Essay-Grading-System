digraph "CFG forcom.facebook.ads.internal.p.b.h.a([B)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.f1227c != null) goto L_0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0024|throw new com.facebook.ads.internal.p022p.p024b.C0879l(new java.lang.StringBuilder().append(\"Error reading data from \").append(r4.f1225a).append(\": connection is absent!\").toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|SYNTHETIC\lSplitter:B:4:0x0025\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ InterruptedIOException \-\> 0x002e, IOException \-\> 0x0050 \}\lSplitter:B:4:0x0025\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|RETURN\l|return r4.f1227c.read(r5, 0, r5.length)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|ExcHandler: InterruptedIOException (r0v2 'e' java.io.InterruptedIOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0025\l|java.io.InterruptedIOException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f}"];
Node_9 [shape=record,label="{9\:\ 0x004f|throw new com.facebook.ads.internal.p022p.p024b.C0874i(new java.lang.StringBuilder().append(\"Reading source \").append(r4.f1225a).append(\" is interrupted\").toString(), r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0050|ExcHandler: IOException (r0v1 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0025\l|java.io.IOException r0 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0051}"];
Node_12 [shape=record,label="{12\:\ 0x006b|throw new com.facebook.ads.internal.p022p.p024b.C0879l(new java.lang.StringBuilder().append(\"Error reading data from \").append(r4.f1225a).toString(), r0)\l}"];
MethodNode[shape=record,label="{public int com.facebook.ads.internal.p.b.h.a((r4v0 'this' com.facebook.ads.internal.p.b.h A[IMMUTABLE_TYPE, THIS]), (r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_4 -> Node_10;
Node_5 -> Node_7;
Node_5 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

