digraph "CFG forcom.facebook.ads.internal.r.a.a([II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = 0\lint r1 = r5.length\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v4 int) binds: [B:0:0x0000, B:7:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:7:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:7:0x0013\l|if (r2 \>= r1) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r0 = ((r1 \- r2) \/ 2) + r2\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r5[r0] != r6) goto L_0x000e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r5[r0] \<= r6) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|r1 = r2\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|LOOP_END\lPHI: r0 r1 \l  PHI: (r0v6 int) = (r0v5 int), (r0v3 int) binds: [B:13:0x0013, B:12:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v3 int) = (r1v2 int), (r1v5 int) binds: [B:13:0x0013, B:12:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:7:0x0013\l|r2 = r1\lr1 = r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|r4 = r1\lr1 = r0 + 1\lr0 = r4\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private static int com.facebook.ads.internal.r.a.a((r5v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_12;
Node_7 -> Node_1;
Node_8 -> Node_13;
Node_10 -> Node_9;
Node_11 -> Node_14;
Node_12 -> Node_7;
Node_13 -> Node_7;
}

