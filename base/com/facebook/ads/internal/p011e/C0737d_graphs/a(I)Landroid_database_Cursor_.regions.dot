digraph "CFG forcom.facebook.ads.internal.e.d.a(I)Landroid\/database\/Cursor;" {
subgraph cluster_Region_1684486710 {
label = "R(2:0|(1:4))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|f803i.lock()\l}"];
subgraph cluster_TryCatchRegion_942703936 {
label = "Try: R(1:4) finally: R(3:5|6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_297169644 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0030|RETURN\l|return mo10552a().rawQuery(f795a + \" LIMIT \" + java.lang.String.valueOf(r4), (java.lang.String[]) null)\l}"];
}
subgraph cluster_Region_254548885 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0031|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|FINALLY_INSNS\l|f803i.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|throw r0\l}"];
}
}
}
subgraph cluster_Region_254548885 {
label = "R(3:5|6|7) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0031|ExcHandler:  FINALLY\lSplitter:B:1:0x0005\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|FINALLY_INSNS\l|f803i.unlock()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|throw r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?|Catch:\{ all \-\> 0x0031 \}\lSplitter:B:1:0x0005\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x002a|DONT_GENERATE\l|java.util.concurrent.locks.Lock r1 = f803i\lr1.unlock()\l}"];
MethodNode[shape=record,label="{public android.database.Cursor com.facebook.ads.internal.e.d.a((r3v0 'this' com.facebook.ads.internal.e.d A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
}

