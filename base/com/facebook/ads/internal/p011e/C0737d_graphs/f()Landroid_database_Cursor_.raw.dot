digraph "CFG forcom.facebook.ads.internal.e.d.f()Landroid\/database\/Cursor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.concurrent.locks.Lock) =  com.facebook.ads.internal.e.d.i java.util.concurrent.locks.Lock \l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.lock():void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: IGET  (r0 I:com.facebook.ads.internal.e.h) = (r2 I:com.facebook.ads.internal.e.d) com.facebook.ads.internal.e.d.l com.facebook.ads.internal.e.h A[Catch:\{ all \-\> 0x0011 \}, TRY_ENTER]\l0x0007: INVOKE  (r0 I:android.database.Cursor) = (r0 I:com.facebook.ads.internal.e.h) com.facebook.ads.internal.e.h.c():android.database.Cursor type: VIRTUAL A[Catch:\{ all \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000b: SGET  (r1 I:java.util.concurrent.locks.Lock) =  com.facebook.ads.internal.e.d.i java.util.concurrent.locks.Lock \l0x000d: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r0 I:android.database.Cursor) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|ExcHandler: all null\lSplitter:B:1:0x0005\l|0x0011: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: SGET  (r1 I:java.util.concurrent.locks.Lock) =  com.facebook.ads.internal.e.d.i java.util.concurrent.locks.Lock \l0x0014: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.database.Cursor com.facebook.ads.internal.e.d.f((r2 'this' I:com.facebook.ads.internal.e.d A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.support.annotation.WorkerThread, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

