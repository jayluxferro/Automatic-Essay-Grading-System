digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames(Ljava\/lang\/reflect\/Field;ZZ[Ljava\/lang\/String;)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r12 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: AGET  (r5 I:?[OBJECT, ARRAY]) = \l  (r12 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|SYNTHETIC\lSplitter:B:4:0x000b\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000b\l|0x000b: INVOKE  (r6 I:java.lang.Class) = (r9 I:java.lang.reflect.Field) java.lang.reflect.Field.getDeclaringClass():java.lang.Class type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}, TRY_ENTER]\l0x000f: NEW_ARRAY  (r7 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x0011: INVOKE  (r5 I:java.lang.reflect.Method) = \l  (r6 I:java.lang.Class)\l  (r5 I:java.lang.String)\l  (r7 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r5 I:java.lang.reflect.Method) A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|ExcHandler: NoSuchMethodException null\lSplitter:B:4:0x000b\l|0x0016: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: GOTO  \-\> 0x002a A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: INVOKE  (r6 I:java.lang.Class) = (r9 I:java.lang.reflect.Field) java.lang.reflect.Field.getDeclaringClass():java.lang.Class type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x001c: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x001d: NEW_ARRAY  (r7 I:java.lang.Class[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x001f: INVOKE  (r8 I:java.lang.Class) = (r9 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x0023: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x0025: INVOKE  (r5 I:java.lang.reflect.Method) = \l  (r6 I:java.lang.Class)\l  (r5 I:java.lang.String)\l  (r7 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ NoSuchMethodException \-\> 0x0016 \}]\l0x0028: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: RETURN  (r5 I:java.lang.reflect.Method) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0058 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0034: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0036: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0039: CONST_STR  (r0 I:java.lang.String) =  \"Could not find appropriate \" \l0x003b: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0043 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|0x0040: CONST_STR  (r10 I:java.lang.String) =  \"get\" \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: CONST_STR  (r10 I:java.lang.String) =  \"set\" \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: INVOKE  (r12 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: CONST_STR  (r10 I:java.lang.String) =  \" method for \" \l0x004a: INVOKE  (r12 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: INVOKE  (r12 I:java.lang.StringBuilder), (r9 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r9 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0054: INVOKE  \l  (r11 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: RETURN  (r1 I:java.lang.reflect.Method) \l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Method com.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames((r9 I:java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

