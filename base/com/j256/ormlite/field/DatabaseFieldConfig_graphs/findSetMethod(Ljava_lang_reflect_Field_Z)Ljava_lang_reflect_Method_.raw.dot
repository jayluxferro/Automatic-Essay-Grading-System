digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findSetMethod(Ljava\/lang\/reflect\/Field;Z)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.Locale) =  java.util.Locale.ENGLISH java.util.Locale \l0x0002: INVOKE  (r1 I:java.util.Locale) =  java.util.Locale.getDefault():java.util.Locale type: STATIC \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.Locale), (r1 I:java.lang.Object) java.util.Locale.equals(java.lang.Object):boolean type: VIRTUAL \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: NEW_ARRAY  (r0 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"set\" \l0x0013: INVOKE  (r1 I:java.lang.String) = \l  (r6 I:java.lang.reflect.Field)\l  (r1 I:java.lang.String)\l  (r2 I:java.util.Locale)\l com.j256.ormlite.field.DatabaseFieldConfig.methodFromField(java.lang.reflect.Field, java.lang.String, java.util.Locale):java.lang.String type: STATIC \l0x0017: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0019: INVOKE  (r6 I:java.lang.reflect.Method) = \l  (r6 I:java.lang.reflect.Field)\l  (r3 I:boolean)\l  (r7 I:boolean)\l  (r0 I:java.lang.String[])\l com.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames(java.lang.reflect.Field, boolean, boolean, java.lang.String[]):java.lang.reflect.Method type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001f: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"set\" \l0x0023: INVOKE  (r4 I:java.lang.String) = \l  (r6 I:java.lang.reflect.Field)\l  (r4 I:java.lang.String)\l  (r2 I:java.util.Locale)\l com.j256.ormlite.field.DatabaseFieldConfig.methodFromField(java.lang.reflect.Field, java.lang.String, java.util.Locale):java.lang.String type: STATIC \l0x0027: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0029: CONST_STR  (r4 I:java.lang.String) =  \"set\" \l0x002b: SGET  (r5 I:java.util.Locale) =  java.util.Locale.ENGLISH java.util.Locale \l0x002d: INVOKE  (r4 I:java.lang.String) = \l  (r6 I:java.lang.reflect.Field)\l  (r4 I:java.lang.String)\l  (r5 I:java.util.Locale)\l com.j256.ormlite.field.DatabaseFieldConfig.methodFromField(java.lang.reflect.Field, java.lang.String, java.util.Locale):java.lang.String type: STATIC \l0x0031: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0033: INVOKE  (r6 I:java.lang.reflect.Method) = \l  (r6 I:java.lang.reflect.Field)\l  (r3 I:boolean)\l  (r7 I:boolean)\l  (r0 I:java.lang.String[])\l com.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames(java.lang.reflect.Field, boolean, boolean, java.lang.String[]):java.lang.reflect.Method type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0037|0x0037: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|0x0039: RETURN  (r2 I:java.lang.reflect.Method) \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: INVOKE  (r0 I:java.lang.Class) = (r6 I:java.lang.reflect.Method) java.lang.reflect.Method.getReturnType():java.lang.Class type: VIRTUAL \l0x003e: SGET  (r1 I:java.lang.Class) =  java.lang.Void.TYPE java.lang.Class \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0071 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0045 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: RETURN  (r2 I:java.lang.reflect.Method) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0047: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0049: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x004c: CONST_STR  (r1 I:java.lang.String) =  \"Return type of set method \" \l0x004e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0051: INVOKE  (r1 I:java.lang.String) = (r6 I:java.lang.reflect.Method) java.lang.reflect.Method.getName():java.lang.String type: VIRTUAL \l0x0055: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: CONST_STR  (r1 I:java.lang.String) =  \" returns \" \l0x005a: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005d: INVOKE  (r6 I:java.lang.Class) = (r6 I:java.lang.reflect.Method) java.lang.reflect.Method.getReturnType():java.lang.Class type: VIRTUAL \l0x0061: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0064: CONST_STR  (r6 I:java.lang.String) =  \" instead of void\" \l0x0066: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0069: INVOKE  (r6 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006d: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0070|0x0070: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0071|0x0071: RETURN  (r6 I:java.lang.reflect.Method) \l}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Method com.j256.ormlite.field.DatabaseFieldConfig.findSetMethod((r6 I:java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
}

