digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findGetMethod(Ljava\/lang\/reflect\/Field;Z)Ljava\/lang\/reflect\/Method;" {
subgraph cluster_Region_41979694 {
label = "R(2:(1:2)(1:3)|(2:(1:5)|(1:(2:(1:12)|(1:(2:(1:9)|(2:10|11))))))) | DECL_VAR: java.lang.reflect.Method null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_464675298 {
label = "IF [B:1:0x000e] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|if (java.util.Locale.ENGLISH.equals(java.util.Locale.getDefault()) == true) goto L_0x0010\l}"];
subgraph cluster_Region_682390228 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|java.lang.reflect.Method r0 = findMethodFromNames(r6, true, r7, methodFromField(r6, \"get\", (java.util.Locale) null), methodFromField(r6, \"is\", (java.util.Locale) null))\l}"];
}
subgraph cluster_Region_1804057105 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0027|java.lang.reflect.Method r0 = findMethodFromNames(r6, true, r7, methodFromField(r6, \"get\", (java.util.Locale) null), methodFromField(r6, \"get\", java.util.Locale.ENGLISH), methodFromField(r6, \"is\", (java.util.Locale) null), methodFromField(r6, \"is\", java.util.Locale.ENGLISH))\l}"];
}
}
subgraph cluster_Region_196624339 {
label = "R(2:(1:5)|(1:(2:(1:12)|(1:(2:(1:9)|(2:10|11))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_37339040 {
label = "IF [B:4:0x0053] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0053|PHI: r0 \l  PHI: (r0v2 java.lang.reflect.Method) = (r0v7 java.lang.reflect.Method), (r0v9 java.lang.reflect.Method) binds: [B:3:0x0027, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L_0x0055\l}"];
subgraph cluster_Region_80128310 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0055|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_217281853 {
label = "R(1:(2:(1:12)|(1:(2:(1:9)|(2:10|11)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1182766551 {
label = "R(2:(1:12)|(1:(2:(1:9)|(2:10|11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_167048711 {
label = "IF [B:7:0x005e] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x005e|if (r0.getReturnType() == r6.getType()) goto L_0x008a\l}"];
subgraph cluster_Region_952791318 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x008a|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_789033391 {
label = "R(1:(2:(1:9)|(2:10|11)))";
node [shape=record,color=blue];
subgraph cluster_Region_367810741 {
label = "R(2:(1:9)|(2:10|11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_998686913 {
label = "IF [B:8:0x0060] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0060|if (r7 == false) goto L_0x0062\l}"];
subgraph cluster_Region_1353667686 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0062|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1119292693 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0063}"];
Node_11 [shape=record,label="{11\:\ 0x0089|throw new java.lang.IllegalArgumentException(\"Return type of get method \" + r0.getName() + \" does not return \" + r6.getType())\l}"];
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0056}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Method com.j256.ormlite.field.DatabaseFieldConfig.findGetMethod((r6v0 java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_0 -> Node_1;
Node_6 -> Node_7;
}

