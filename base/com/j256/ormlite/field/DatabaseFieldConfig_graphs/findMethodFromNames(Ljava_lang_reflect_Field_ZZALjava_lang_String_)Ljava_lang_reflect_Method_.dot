digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames(Ljava\/lang\/reflect\/Field;ZZ[Ljava\/lang\/String;)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r12.length\lr4 = null\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:13:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 java.lang.NoSuchMethodException) = (r4v0 java.lang.NoSuchMethodException), (r4v2 java.lang.NoSuchMethodException) binds: [B:0:0x0000, B:13:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:13:0x002d\l|if (r3 \>= r0) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|r5 = r12[r3]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r10 == false) goto L_0x0018\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|SYNTHETIC\lSplitter:B:4:0x000b\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ NoSuchMethodException \-\> 0x0016 \}\lSplitter:B:4:0x000b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|RETURN\lCatch:\{ NoSuchMethodException \-\> 0x0016 \}\l|return r9.getDeclaringClass().getMethod(r5, new java.lang.Class[0])     \/\/ Catch:\{ NoSuchMethodException \-\> 0x0016 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|Catch:\{ NoSuchMethodException \-\> 0x0016 \}\lExcHandler: NoSuchMethodException (r5v2 'e' java.lang.NoSuchMethodException A[CUSTOM_DECLARE, Catch:\{ NoSuchMethodException \-\> 0x0016 \}])\lSplitter:B:4:0x000b\l|java.lang.NoSuchMethodException r5 = move\-exception     \/\/ Catch:\{ NoSuchMethodException \-\> 0x0016 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|Catch:\{ NoSuchMethodException \-\> 0x0016 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|Catch:\{ NoSuchMethodException \-\> 0x0016 \}\l|java.lang.Class r6 = r9.getDeclaringClass()     \/\/ Catch:\{ NoSuchMethodException \-\> 0x0016 \}\ljava.lang.Class[] r7 = new java.lang.Class[]\{r9.getType()\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|RETURN\l|return r6.getMethod(r5, r7)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|if (r4 != null) goto L_0x002d\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|r4 = r5\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|LOOP_END\lPHI: r4 \l  PHI: (r4v2 java.lang.NoSuchMethodException) = (r4v1 java.lang.NoSuchMethodException), (r4v3 java.lang.NoSuchMethodException) binds: [B:25:0x002d, B:24:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:13:0x002d\l|int r3 = r3 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|if (r11 == false) goto L_0x0058\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(\"Could not find appropriate \")\l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|if (r10 == false) goto L_0x0043\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|java.lang.String r10 = \"get\"\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|java.lang.String r10 = \"set\"\l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|PHI: r10 \l  PHI: (r10v1 java.lang.String) = (r10v3 java.lang.String), (r10v4 java.lang.String) binds: [B:18:0x0043, B:17:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|r12.append(r10)\lr12.append(\" method for \")\lr12.append(r9)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|throw new java.lang.IllegalArgumentException(r12.toString(), r4)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|RETURN\l|return null\l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x002d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Method com.j256.ormlite.field.DatabaseFieldConfig.findMethodFromNames((r9v0 java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_24;
Node_13 -> Node_1;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_22 -> Node_14;
Node_23 -> Node_9;
Node_24 -> Node_13;
Node_25 -> Node_13;
}

