digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findSetMethod(Ljava\/lang\/reflect\/Field;Z)Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (java.util.Locale.ENGLISH.equals(java.util.Locale.getDefault()) == false) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|java.lang.String[] r0 = new java.lang.String[]\{methodFromField(r6, \"set\", (java.util.Locale) null)\}\ljava.lang.reflect.Method r6 = findMethodFromNames(r6, false, r7, r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|java.lang.String[] r0 = new java.lang.String[]\{methodFromField(r6, \"set\", (java.util.Locale) null), methodFromField(r6, \"set\", java.util.Locale.ENGLISH)\}\ljava.lang.reflect.Method r6 = findMethodFromNames(r6, false, r7, r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0037|PHI: r6 \l  PHI: (r6v1 java.lang.reflect.Method) = (r6v5 java.lang.reflect.Method), (r6v6 java.lang.reflect.Method) binds: [B:3:0x001e, B:2:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != null) goto L_0x003a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|RETURN\l|return null\l}"];
Node_6 [shape=record,label="{6\:\ 0x003a}"];
Node_7 [shape=record,label="{7\:\ 0x0040|if (r6.getReturnType() == java.lang.Void.TYPE) goto L_0x0071\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|if (r7 != false) goto L_0x0045\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Return type of set method \")\lr0.append(r6.getName())\lr0.append(\" returns \")\lr0.append(r6.getReturnType())\lr0.append(\" instead of void\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0070|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0071|RETURN\l|return r6\l}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Method com.j256.ormlite.field.DatabaseFieldConfig.findSetMethod((r6v0 java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
}

