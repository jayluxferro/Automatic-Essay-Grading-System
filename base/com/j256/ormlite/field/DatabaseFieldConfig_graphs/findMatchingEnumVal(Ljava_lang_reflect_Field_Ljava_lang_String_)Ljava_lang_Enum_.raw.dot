digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.findMatchingEnumVal(Ljava\/lang\/reflect\/Field;Ljava\/lang\/String;)Ljava\/lang\/Enum;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0046 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL \l0x000d: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.lang.Class) java.lang.Class.getEnumConstants():java.lang.Object[] type: VIRTUAL \l0x0011: CHECK_CAST  (r0 I:java.lang.Enum[]) = (java.lang.Enum[]) (r0 I:?[OBJECT, ARRAY]) \l0x0013: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0019: INVOKE  (r4 I:java.lang.String) = (r3 I:java.lang.Enum) java.lang.Enum.name():java.lang.String type: VIRTUAL \l0x001d: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r6 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: RETURN  (r3 I:java.lang.Enum\<?\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0029: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002e: CONST_STR  (r2 I:java.lang.String) =  \"Unknwown enum unknown name \" \l0x0030: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: CONST_STR  (r6 I:java.lang.String) =  \" for field \" \l0x0038: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003b: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003e: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0042: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: RETURN  (r5 I:java.lang.Enum\<?\>) \l}"];
MethodNode[shape=record,label="{public static java.lang.Enum\<?\> com.j256.ormlite.field.DatabaseFieldConfig.findMatchingEnumVal((r5 I:java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/reflect\/Field;, Ljava\/lang\/String;, ), Ljava\/lang\/Enum\<, *\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

