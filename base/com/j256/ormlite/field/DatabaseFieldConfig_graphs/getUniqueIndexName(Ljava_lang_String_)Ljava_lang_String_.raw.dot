digraph "CFG forcom.j256.ormlite.field.DatabaseFieldConfig.getUniqueIndexName(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r1 I:com.j256.ormlite.field.DatabaseFieldConfig) com.j256.ormlite.field.DatabaseFieldConfig.uniqueIndex boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.String) = (r1 I:com.j256.ormlite.field.DatabaseFieldConfig) com.j256.ormlite.field.DatabaseFieldConfig.uniqueIndexName java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:com.j256.ormlite.field.DatabaseFieldConfig)\l  (r2 I:java.lang.String)\l com.j256.ormlite.field.DatabaseFieldConfig.findIndexName(java.lang.String):java.lang.String type: DIRECT \l0x000c: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:com.j256.ormlite.field.DatabaseFieldConfig)\l com.j256.ormlite.field.DatabaseFieldConfig.uniqueIndexName java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r2 I:java.lang.String) = (r1 I:com.j256.ormlite.field.DatabaseFieldConfig) com.j256.ormlite.field.DatabaseFieldConfig.uniqueIndexName java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.j256.ormlite.field.DatabaseFieldConfig.getUniqueIndexName((r1 'this' I:com.j256.ormlite.field.DatabaseFieldConfig A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

