digraph "CFG forcom.j256.ormlite.field.DataPersisterManager.lookupForField(Ljava\/lang\/reflect\/Field;)Lcom\/j256\/ormlite\/field\/DataPersister;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.List\<com.j256.ormlite.field.DataPersister\>) =  com.j256.ormlite.field.DataPersisterManager.registeredPersisters java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:java.util.List\<com.j256.ormlite.field.DataPersister\>) =  com.j256.ormlite.field.DataPersisterManager.registeredPersisters java.util.List \l0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r1 I:com.j256.ormlite.field.DataPersister) = (com.j256.ormlite.field.DataPersister) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r2 I:boolean) = \l  (r1 I:com.j256.ormlite.field.DataPersister)\l  (r7 I:java.lang.reflect.Field)\l com.j256.ormlite.field.DataPersister.isValidForField(java.lang.reflect.Field):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r1 I:com.j256.ormlite.field.DataPersister) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  (r2 I:java.lang.Class[]) = (r1 I:com.j256.ormlite.field.DataPersister) com.j256.ormlite.field.DataPersister.getAssociatedClasses():java.lang.Class[] type: INTERFACE \l0x0021: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x0022: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0027: INVOKE  (r6 I:java.lang.Class) = (r7 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002e \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: RETURN  (r1 I:com.j256.ormlite.field.DataPersister) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: SGET  (r0 I:java.util.Map\<java.lang.String, com.j256.ormlite.field.DataPersister\>) =  com.j256.ormlite.field.DataPersisterManager.builtInMap java.util.Map \l0x0033: INVOKE  (r1 I:java.lang.Class) = (r7 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL \l0x0037: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x003b: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r1 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x003f: CHECK_CAST  (r0 I:com.j256.ormlite.field.DataPersister) = (com.j256.ormlite.field.DataPersister) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0044 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: RETURN  (r0 I:com.j256.ormlite.field.DataPersister) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0044|0x0044: INVOKE  (r7 I:java.lang.Class) = (r7 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL \l0x0048: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Class) java.lang.Class.isEnum():boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0051 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: SGET  (r7 I:com.j256.ormlite.field.DataPersister) =  com.j256.ormlite.field.DataPersisterManager.DEFAULT_ENUM_PERSISTER com.j256.ormlite.field.DataPersister \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: RETURN  (r7 I:com.j256.ormlite.field.DataPersister) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0052|0x0052: RETURN  (r7 I:com.j256.ormlite.field.DataPersister) \l}"];
MethodNode[shape=record,label="{public static com.j256.ormlite.field.DataPersister com.j256.ormlite.field.DataPersisterManager.lookupForField((r7 I:java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
}

