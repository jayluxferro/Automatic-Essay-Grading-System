digraph "CFG forcom.j256.ormlite.field.FieldType.findForeignFieldType(Ljava\/lang\/Class;Ljava\/lang\/Class;Lcom\/j256\/ormlite\/dao\/BaseDaoImpl;)Lcom\/j256\/ormlite\/field\/FieldType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r0 = r5.fieldConfig.getForeignCollectionForeignFieldName()\lcom.j256.ormlite.field.FieldType[] r8 = r8.getTableInfo().getFieldTypes()\lint r1 = r8.length\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:14:0x006e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:14:0x006e\l|if (r2 \>= r1) goto L_0x0071\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|r3 = r8[r2]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|if (r3.getType() != r7) goto L_0x006e\l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|if (r0 == null) goto L_0x002a\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c}"];
Node_6 [shape=record,label="{6\:\ 0x0028|if (r3.getField().getName().equals(r0) == false) goto L_0x006e\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a}"];
Node_8 [shape=record,label="{8\:\ 0x0030|if (r3.fieldConfig.isForeign() != false) goto L_0x006d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0032}"];
Node_10 [shape=record,label="{10\:\ 0x0038|if (r3.fieldConfig.isForeignAutoRefresh() == false) goto L_0x003b\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Foreign collection object \")\lr0.append(r6)\lr0.append(\" for field '\")\lr0.append(r5.field.getName())\lr0.append(\"' contains a field of class \")\lr0.append(r7)\lr0.append(\" but it's not foreign\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|throw new java.sql.SQLException(r0.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x006d|RETURN\l|return r3\l}"];
Node_14 [shape=record,label="{14\:\ 0x006e|LOOP_END\lLOOP:0: B:1:0x0010\-\>B:14:0x006e\l|int r2 = r2 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0071|java.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(\"Foreign collection class \")\lr8.append(r6.getName())\lr8.append(\" for field '\")\lr8.append(r5.field.getName())\lr8.append(\"' column\-name does not contain a foreign field\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0095|if (r0 == null) goto L_0x00a4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0097|r8.append(\" named '\")\lr8.append(r0)\lr8.append(org.osgeo.proj4j.units.AngleFormat.CH_MIN_SYMBOL)\l}"];
Node_18 [shape=record,label="{18\:\ 0x00a4|r8.append(\" of class \")\lr8.append(r7.getName())\l}"];
Node_19 [shape=record,label="{19\:\ 0x00b9|throw new java.sql.SQLException(r8.toString())\l}"];
Node_20 [shape=record,label="{20\:\ 0x0071|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x006e|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x006e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.field.FieldType com.j256.ormlite.field.FieldType.findForeignFieldType((r5v0 'this' com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.j256.ormlite.dao.BaseDaoImpl\<?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;, Ljava\/lang\/Class\<, *\>;, Lcom\/j256\/ormlite\/dao\/BaseDaoImpl\<, **\>;), Lcom\/j256\/ormlite\/field\/FieldType;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_22;
Node_5 -> Node_6;
Node_6 -> Node_21[style=dashed];
Node_6 -> Node_24;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_15;
Node_21 -> Node_7;
Node_22 -> Node_7;
Node_23 -> Node_14;
Node_24 -> Node_14;
}

