digraph "CFG forcom.j256.ormlite.field.FieldType.createFieldType(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/String;Ljava\/lang\/reflect\/Field;Ljava\/lang\/Class;)Lcom\/j256\/ormlite\/field\/FieldType;" {
subgraph cluster_Region_766709109 {
label = "R(2:0|(2:(1:2)|(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.j256.ormlite.field.DatabaseFieldConfig com.j256.ormlite.field.DatabaseFieldConfig r5 = com.j256.ormlite.field.DatabaseFieldConfig.fromField(r7.getDatabaseType(), r8, r9)\l}"];
subgraph cluster_Region_1633198144 {
label = "R(2:(1:2)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_310504219 {
label = "IF [B:1:0x0008] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r5 == null) goto L_0x000a\l}"];
subgraph cluster_Region_699336860 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1370946241 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0016|RETURN\l|return new com.j256.ormlite.field.FieldType(r7, r8, r9, r5, r10)\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
MethodNode[shape=record,label="{public static com.j256.ormlite.field.FieldType com.j256.ormlite.field.FieldType.createFieldType((r7v0 com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.reflect.Field A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/String;, Ljava\/lang\/reflect\/Field;, Ljava\/lang\/Class\<, *\>;), Lcom\/j256\/ormlite\/field\/FieldType;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
}

