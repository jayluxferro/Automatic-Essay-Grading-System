digraph "CFG forcom.j256.ormlite.field.types.SerializableType.sqlArgToJava(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CHECK_CAST  (r5 I:byte[]) = (byte[]) (r5 I:?[OBJECT, ARRAY]) \l0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0003\l|0x0003: NEW_INSTANCE  (r6 I:java.io.ObjectInputStream) =  java.io.ObjectInputStream A[Catch:\{ Exception \-\> 0x0020 \}, TRY_ENTER]\l0x0005: NEW_INSTANCE  (r0 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream A[Catch:\{ Exception \-\> 0x0020 \}]\l0x0007: INVOKE  (r0 I:java.io.ByteArrayInputStream), (r5 I:byte[]) java.io.ByteArrayInputStream.\<init\>(byte[]):void type: DIRECT A[Catch:\{ Exception \-\> 0x0020 \}]\l0x000a: INVOKE  \l  (r6 I:java.io.ObjectInputStream)\l  (r0 I:java.io.InputStream)\l java.io.ObjectInputStream.\<init\>(java.io.InputStream):void type: DIRECT A[Catch:\{ Exception \-\> 0x0020 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|SYNTHETIC\lSplitter:B:3:0x000d\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000d\l|0x000d: INVOKE  (r4 I:java.lang.Object) = (r6 I:java.io.ObjectInputStream) java.io.ObjectInputStream.readObject():java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0019, all \-\> 0x0015 \}, TRY_ENTER]\l0x0010: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r6 I:java.io.Closeable) com.j256.ormlite.misc.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN  (r4 I:java.lang.Object) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|ExcHandler: all null\lSplitter:B:3:0x000d\l|0x0015: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|ExcHandler: Exception null\lSplitter:B:3:0x000d\l|0x0019: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x001b: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|ExcHandler: all null\lSplitter:B:14:0x0021\l|0x001e: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|ExcHandler: Exception null\lSplitter:B:1:0x0003\l|0x0020: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|SYNTHETIC\lSplitter:B:14:0x0021\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0021\l|0x0021: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x001e \}, TRY_ENTER]\l0x0023: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x001e \}]\l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"Could not read serialized object from byte array: \" A[Catch:\{ all \-\> 0x001e \}]\l0x0028: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x002b: INVOKE  (r1 I:java.lang.String) = (r5 I:byte[]) java.util.Arrays.toString(byte[]):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x001e \}]\l0x002f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x0032: CONST_STR  (r1 I:java.lang.String) =  \"(len \" A[Catch:\{ all \-\> 0x001e \}]\l0x0034: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x0037: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) A[Catch:\{ all \-\> 0x001e \}]\l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x003b: CONST_STR  (r5 I:java.lang.String) =  \")\" A[Catch:\{ all \-\> 0x001e \}]\l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x0040: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x001e \}]\l0x0044: INVOKE  (r5 I:java.sql.SQLException) = (r5 I:java.lang.String), (r6 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC A[Catch:\{ all \-\> 0x001e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x001e \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: INVOKE  (r4 I:java.io.Closeable) com.j256.ormlite.misc.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.SerializableType.sqlArgToJava((r3 'this' I:com.j256.ormlite.field.types.SerializableType A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_14;
Node_11 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

