digraph "CFG forcom.j256.ormlite.field.types.DateTimeType.extractMillis(Ljava\/lang\/Object;)Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  com.j256.ormlite.field.types.DateTimeType.getMillisMethod java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x0022 \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.Class) = (r4 I:com.j256.ormlite.field.types.DateTimeType) com.j256.ormlite.field.types.DateTimeType.getDateTimeClass():java.lang.Class type: DIRECT A[Catch:\{ Exception \-\> 0x0022 \}]\l0x0009: CONST_STR  (r2 I:java.lang.String) =  \"getMillis\" A[Catch:\{ Exception \-\> 0x0022 \}]\l0x000b: NEW_ARRAY  (r3 I:java.lang.Class[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ Exception \-\> 0x0022 \}]\l0x000d: INVOKE  (r0 I:java.lang.reflect.Method) = \l  (r0 I:java.lang.Class)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Class[])\l java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method type: VIRTUAL A[Catch:\{ Exception \-\> 0x0022 \}]\l0x0011: SPUT  (r0 I:java.lang.reflect.Method) com.j256.ormlite.field.types.DateTimeType.getMillisMethod java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r5 I:java.lang.Long) A[Catch:\{ Exception \-\> 0x0022 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r0 I:java.lang.reflect.Method) =  com.j256.ormlite.field.types.DateTimeType.getMillisMethod java.lang.reflect.Method A[Catch:\{ Exception \-\> 0x0022 \}]\l0x0019: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x0022 \}]\l0x001b: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r5 I:java.lang.Object)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0022 \}]\l0x001f: CHECK_CAST  (r0 I:java.lang.Long) = (java.lang.Long) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: RETURN  (r0 I:java.lang.Long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x0022: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0028: CONST_STR  (r2 I:java.lang.String) =  \"Could not use reflection to get millis from Joda DateTime: \" \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  (r5 I:java.sql.SQLException) = (r5 I:java.lang.String), (r0 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.lang.Long com.j256.ormlite.field.types.DateTimeType.extractMillis((r4 'this' I:com.j256.ormlite.field.types.DateTimeType A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

