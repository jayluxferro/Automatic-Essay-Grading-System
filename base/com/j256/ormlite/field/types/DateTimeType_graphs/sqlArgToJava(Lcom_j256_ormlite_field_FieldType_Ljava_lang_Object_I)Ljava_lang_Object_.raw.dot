digraph "CFG forcom.j256.ormlite.field.types.DateTimeType.sqlArgToJava(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CHECK_CAST  (r2 I:java.lang.Long) = (java.lang.Long) (r2 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r1 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.types.DateTimeType)\l  (r2 I:java.lang.Long)\l com.j256.ormlite.field.types.DateTimeType.createInstance(java.lang.Long):java.lang.Object type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.DateTimeType.sqlArgToJava((r0 'this' I:com.j256.ormlite.field.types.DateTimeType A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

