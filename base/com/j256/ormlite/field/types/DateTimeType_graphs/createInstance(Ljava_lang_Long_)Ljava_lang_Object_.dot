digraph "CFG forcom.j256.ormlite.field.types.DateTimeType.createInstance(Ljava\/lang\/Long;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Exception \-\> 0x0021 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|Catch:\{ Exception \-\> 0x0021 \}\l|if (millisConstructor != null) goto L_0x0016     \/\/ Catch:\{ Exception \-\> 0x0021 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|Catch:\{ Exception \-\> 0x0021 \}\l|java.lang.Class r0 = getDateTimeClass()     \/\/ Catch:\{ Exception \-\> 0x0021 \}\ljava.lang.Class[] r3 = new java.lang.Class[]\{java.lang.Long.TYPE\}\lmillisConstructor = r0.getConstructor(r3)     \/\/ Catch:\{ Exception \-\> 0x0021 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|Catch:\{ Exception \-\> 0x0021 \}\l|java.lang.reflect.Constructor\<?\> r0 = millisConstructor     \/\/ Catch:\{ Exception \-\> 0x0021 \}\ljava.lang.Object[] r2 = new java.lang.Object[]\{r6\}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|return r0.newInstance(r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|ExcHandler: Exception (r6v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Exception r6 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022}"];
Node_8 [shape=record,label="{8\:\ 0x0028|throw com.j256.ormlite.misc.SqlExceptionUtil.create(\"Could not use reflection to construct a Joda DateTime\", r6)\l}"];
MethodNode[shape=record,label="{private java.lang.Object com.j256.ormlite.field.types.DateTimeType.createInstance((r5v0 'this' com.j256.ormlite.field.types.DateTimeType A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

