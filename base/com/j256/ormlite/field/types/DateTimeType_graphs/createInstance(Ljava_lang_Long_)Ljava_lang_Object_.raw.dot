digraph "CFG forcom.j256.ormlite.field.types.DateTimeType.createInstance(Ljava\/lang\/Long;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: SGET  (r0 I:java.lang.reflect.Constructor\<?\>) =  com.j256.ormlite.field.types.DateTimeType.millisConstructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0021 \}, TRY_ENTER]\l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0021 \}]\l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x0021 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 A[Catch:\{ Exception \-\> 0x0021 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.Class) = (r5 I:com.j256.ormlite.field.types.DateTimeType) com.j256.ormlite.field.types.DateTimeType.getDateTimeClass():java.lang.Class type: DIRECT A[Catch:\{ Exception \-\> 0x0021 \}]\l0x000a: NEW_ARRAY  (r3 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ Exception \-\> 0x0021 \}]\l0x000c: SGET  (r4 I:java.lang.Class) =  java.lang.Long.TYPE java.lang.Class A[Catch:\{ Exception \-\> 0x0021 \}]\l0x000e: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0021 \}]\l0x0010: INVOKE  (r0 I:java.lang.reflect.Constructor) = (r0 I:java.lang.Class), (r3 I:java.lang.Class[]) java.lang.Class.getConstructor(java.lang.Class[]):java.lang.reflect.Constructor type: VIRTUAL A[Catch:\{ Exception \-\> 0x0021 \}]\l0x0014: SPUT  (r0 I:java.lang.reflect.Constructor\<?\>) com.j256.ormlite.field.types.DateTimeType.millisConstructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0021 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: SGET  (r0 I:java.lang.reflect.Constructor\<?\>) =  com.j256.ormlite.field.types.DateTimeType.millisConstructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0021 \}]\l0x0018: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x0021 \}]\l0x001a: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0021 \}]\l0x001c: INVOKE  (r6 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Constructor)\l  (r2 I:java.lang.Object[])\l java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0021 \}]\l0x001f: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: RETURN  (r6 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x0021: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: CONST_STR  (r0 I:java.lang.String) =  \"Could not use reflection to construct a Joda DateTime\" \l0x0024: INVOKE  (r6 I:java.sql.SQLException) = (r0 I:java.lang.String), (r6 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.lang.Object com.j256.ormlite.field.types.DateTimeType.createInstance((r5 'this' I:com.j256.ormlite.field.types.DateTimeType A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

