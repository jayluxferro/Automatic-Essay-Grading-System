digraph "CFG forcom.j256.ormlite.field.types.BooleanCharType.resultStringToJava(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/String;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r2 I:java.lang.Boolean) =  java.lang.Boolean.FALSE java.lang.Boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r2 I:java.lang.Object) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: INVOKE  (r3 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000e: INVOKE  (r3 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0012: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.field.types.BooleanCharType)\l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r3 I:java.lang.Object)\l  (r4 I:int)\l com.j256.ormlite.field.types.BooleanCharType.sqlArgToJava(com.j256.ormlite.field.FieldType, java.lang.Object, int):java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r2 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.BooleanCharType.resultStringToJava((r1 'this' I:com.j256.ormlite.field.types.BooleanCharType A[IMMUTABLE_TYPE, THIS]), (r2 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

