digraph "CFG forcom.j256.ormlite.field.types.BooleanCharType.javaToSqlArg(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getDataTypeConfigObj():java.lang.Object type: VIRTUAL \l0x0004: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x0006: CHECK_CAST  (r2 I:java.lang.Boolean) = (java.lang.Boolean) (r2 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r1 I:char) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.Character) = (r1 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.BooleanCharType.javaToSqlArg((r0 'this' I:com.j256.ormlite.field.types.BooleanCharType A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
}

