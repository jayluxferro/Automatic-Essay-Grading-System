digraph "CFG forcom.j256.ormlite.field.types.EnumIntegerType.makeConfigObject(Lcom\/j256\/ormlite\/field\/FieldType;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0002: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:java.lang.Class) = (r6 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getType():java.lang.Class type: VIRTUAL \l0x0009: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Class) java.lang.Class.getEnumConstants():java.lang.Object[] type: VIRTUAL \l0x000d: CHECK_CAST  (r1 I:java.lang.Enum[]) = (java.lang.Enum[]) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: ARRAY_LENGTH  (r6 I:int) = (r1 I:?[]) \l0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: AGET  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0017: INVOKE  (r4 I:int) = (r3 I:java.lang.Enum) java.lang.Enum.ordinal():int type: VIRTUAL \l0x001b: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001f: INVOKE  \l  (r0 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: RETURN  (r0 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: NEW_INSTANCE  (r0 I:java.sql.SQLException) =  java.sql.SQLException \l0x0028: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002d: CONST_STR  (r2 I:java.lang.String) =  \"Field \" \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0035: CONST_STR  (r6 I:java.lang.String) =  \" improperly configured as type \" \l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r6 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r0 I:java.sql.SQLException), (r6 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.EnumIntegerType.makeConfigObject((r5 'this' I:com.j256.ormlite.field.types.EnumIntegerType A[IMMUTABLE_TYPE, THIS]), (r6 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_6 -> Node_7;
}

