digraph "CFG forcom.j256.ormlite.field.types.BigIntegerType.parseDefaultString(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/String;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: NEW_INSTANCE  (r0 I:java.math.BigInteger) =  java.math.BigInteger A[Catch:\{ IllegalArgumentException \-\> 0x000a \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.math.BigInteger), (r5 I:java.lang.String) java.math.BigInteger.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ IllegalArgumentException \-\> 0x000a \}]\l0x0005: INVOKE  (r0 I:java.lang.String) = (r0 I:java.math.BigInteger) java.math.BigInteger.toString():java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x000a \}]\l0x0008: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r0 I:java.lang.Object) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ExcHandler: IllegalArgumentException null\lSplitter:B:0:0x0000\l|0x000a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Problems with field \" \l0x0012: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0018: CONST_STR  (r4 I:java.lang.String) =  \" parsing default BigInteger string '\" \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: CONST_STR  (r4 I:java.lang.String) =  \"'\" \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r4 I:java.sql.SQLException) = (r4 I:java.lang.String), (r0 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.BigIntegerType.parseDefaultString((r3 'this' I:com.j256.ormlite.field.types.BigIntegerType A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

