digraph "CFG forcom.j256.ormlite.field.types.BigIntegerType.sqlArgToJava(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0009 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|RETURN\l|return new java.math.BigInteger((java.lang.String) r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|ExcHandler: IllegalArgumentException (r3v1 'e' java.lang.IllegalArgumentException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.IllegalArgumentException r3 = move\-exception\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Problems with column \")\lr0.append(r5)\lr0.append(\" parsing BigInteger string '\")\lr0.append(r4)\lr0.append(\"'\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|throw com.j256.ormlite.misc.SqlExceptionUtil.create(r0.toString(), r3)\l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.BigIntegerType.sqlArgToJava((r2v0 'this' com.j256.ormlite.field.types.BigIntegerType A[IMMUTABLE_TYPE, THIS]), (r3v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

