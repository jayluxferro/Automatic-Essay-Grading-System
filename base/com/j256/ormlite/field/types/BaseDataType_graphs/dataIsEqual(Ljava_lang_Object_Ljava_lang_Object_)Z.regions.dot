digraph "CFG forcom.j256.ormlite.field.types.BaseDataType.dataIsEqual(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1087360188 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_594147400 {
label = "R(2:(1:2)|(1:(2:(1:5)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1198320241 {
label = "IF [B:1:0x0001] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r2 == null) goto L_0x0003\l}"];
subgraph cluster_Region_1947632820 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return r3 == null\l}"];
}
}
subgraph cluster_Region_1241652390 {
label = "R(1:(2:(1:5)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_650446358 {
label = "R(2:(1:5)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_106586077 {
label = "IF [B:4:0x0007] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|if (r3 == null) goto L_0x0009\l}"];
subgraph cluster_Region_1177114758 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_479497161 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|return r2.equals(r3)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0005|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000a}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.field.types.BaseDataType.dataIsEqual((r1v0 'this' com.j256.ormlite.field.types.BaseDataType A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_0 -> Node_1;
Node_6 -> Node_7;
}

