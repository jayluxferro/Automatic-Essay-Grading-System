digraph "CFG forcom.j256.ormlite.field.types.StringBytesType.parseDefaultString(Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/String;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r3 I:java.lang.Object) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|SYNTHETIC\lSplitter:B:3:0x0004\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0004\l|0x0004: INVOKE  (r3 I:java.lang.String) = \l  (r2 I:com.j256.ormlite.field.types.StringBytesType)\l  (r3 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.field.types.StringBytesType.getCharsetName(com.j256.ormlite.field.FieldType):java.lang.String type: DIRECT A[Catch:\{ UnsupportedEncodingException \-\> 0x000d \}, TRY_ENTER]\l0x0008: INVOKE  (r3 I:byte[]) = (r4 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.getBytes(java.lang.String):byte[] type: VIRTUAL A[Catch:\{ UnsupportedEncodingException \-\> 0x000d \}]\l0x000b: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r3 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|ExcHandler: UnsupportedEncodingException null\lSplitter:B:3:0x0004\l|0x000d: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0010: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"Could not convert default string: \" \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0018: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001f: INVOKE  (r3 I:java.sql.SQLException) = (r4 I:java.lang.String), (r3 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.types.StringBytesType.parseDefaultString((r2 'this' I:com.j256.ormlite.field.types.StringBytesType A[IMMUTABLE_TYPE, THIS]), (r3 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

