digraph "CFG forcom.j256.ormlite.field.types.ByteArrayType.dataIsEqual(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: CHECK_CAST  (r2 I:byte[]) = (byte[]) (r2 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r3 I:byte[]) = (byte[]) (r3 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r2 I:boolean) = (r2 I:byte[]), (r3 I:byte[]) java.util.Arrays.equals(byte[], byte[]):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.field.types.ByteArrayType.dataIsEqual((r1 'this' I:com.j256.ormlite.field.types.ByteArrayType A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
}

