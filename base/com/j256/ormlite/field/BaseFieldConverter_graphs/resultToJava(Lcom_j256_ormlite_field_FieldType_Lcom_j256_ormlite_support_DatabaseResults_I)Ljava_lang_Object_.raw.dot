digraph "CFG forcom.j256.ormlite.field.BaseFieldConverter.resultToJava(Lcom\/j256\/ormlite\/field\/FieldType;Lcom\/j256\/ormlite\/support\/DatabaseResults;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.BaseFieldConverter)\l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r2 I:com.j256.ormlite.support.DatabaseResults)\l  (r3 I:int)\l com.j256.ormlite.field.BaseFieldConverter.resultToSqlArg(com.j256.ormlite.field.FieldType, com.j256.ormlite.support.DatabaseResults, int):java.lang.Object type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r1 I:java.lang.Object) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r1 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.BaseFieldConverter)\l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l com.j256.ormlite.field.BaseFieldConverter.sqlArgToJava(com.j256.ormlite.field.FieldType, java.lang.Object, int):java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.field.BaseFieldConverter.resultToJava((r0 'this' I:com.j256.ormlite.field.BaseFieldConverter A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:com.j256.ormlite.support.DatabaseResults A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

