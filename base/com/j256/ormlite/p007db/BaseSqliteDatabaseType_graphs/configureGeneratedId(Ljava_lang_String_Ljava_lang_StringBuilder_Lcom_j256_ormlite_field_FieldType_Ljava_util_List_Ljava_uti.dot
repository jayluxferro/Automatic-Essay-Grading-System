digraph "CFG forcom.j256.ormlite.db.BaseSqliteDatabaseType.configureGeneratedId(Ljava\/lang\/String;Ljava\/lang\/StringBuilder;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/util\/List;Ljava\/util\/List;Ljava\/util\/List;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.getSqlType() == com.j256.ormlite.field.SqlType.INTEGER) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r3.getSqlType() != com.j256.ormlite.field.SqlType.LONG) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0018|throw new java.lang.IllegalArgumentException(\"Sqlite requires that auto\-increment generated\-id be integer or long type\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|r2.append(\"PRIMARY KEY AUTOINCREMENT \")\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.db.BaseSqliteDatabaseType.configureGeneratedId((r0v0 'this' com.j256.ormlite.db.BaseSqliteDatabaseType A[IMMUTABLE_TYPE, THIS]), (r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/lang\/StringBuilder;, Lcom\/j256\/ormlite\/field\/FieldType;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
}

