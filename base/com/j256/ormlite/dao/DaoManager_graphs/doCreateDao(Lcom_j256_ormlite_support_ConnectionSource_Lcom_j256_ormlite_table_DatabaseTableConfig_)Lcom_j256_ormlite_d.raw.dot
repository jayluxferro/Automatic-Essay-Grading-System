digraph "CFG forcom.j256.ormlite.dao.DaoManager.doCreateDao(Lcom\/j256\/ormlite\/support\/ConnectionSource;Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;)Lcom\/j256\/ormlite\/dao\/Dao;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource) =  com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource \l0x0002: INVOKE  \l  (r0 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l  (r6 I:com.j256.ormlite.support.ConnectionSource)\l  (r7 I:com.j256.ormlite.table.DatabaseTableConfig)\l com.j256.ormlite.dao.DaoManager.TableConfigConnectionSource.\<init\>(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.table.DatabaseTableConfig):void type: DIRECT \l0x0005: INVOKE  (r1 I:com.j256.ormlite.dao.Dao) = \l  (r0 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l com.j256.ormlite.dao.DaoManager.lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource):com.j256.ormlite.dao.Dao type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r1 I:D) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Class) = (r7 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.getDataClass():java.lang.Class type: VIRTUAL \l0x0010: NEW_INSTANCE  (r2 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource) =  com.j256.ormlite.dao.DaoManager$ClassConnectionSource \l0x0012: INVOKE  \l  (r2 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l  (r6 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:java.lang.Class)\l com.j256.ormlite.dao.DaoManager.ClassConnectionSource.\<init\>(com.j256.ormlite.support.ConnectionSource, java.lang.Class):void type: DIRECT \l0x0015: INVOKE  (r3 I:com.j256.ormlite.dao.Dao) = \l  (r2 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l com.j256.ormlite.dao.DaoManager.lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource):com.j256.ormlite.dao.Dao type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  \l  (r0 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l  (r3 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.dao.DaoManager.addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource, com.j256.ormlite.dao.Dao):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN  (r3 I:D) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r3 I:java.lang.Class) = (r7 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.getDataClass():java.lang.Class type: VIRTUAL \l0x0023: CONST_CLASS  (r4 I:java.lang.Class\<com.j256.ormlite.table.DatabaseTable\>) =  com.j256.ormlite.table.DatabaseTable.class \l0x0025: INVOKE  (r3 I:java.lang.annotation.Annotation) = (r3 I:java.lang.Class), (r4 I:java.lang.Class) java.lang.Class.getAnnotation(java.lang.Class):java.lang.annotation.Annotation type: VIRTUAL \l0x0029: CHECK_CAST  (r3 I:com.j256.ormlite.table.DatabaseTable) = (com.j256.ormlite.table.DatabaseTable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0086 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: INVOKE  (r4 I:java.lang.Class) = (r3 I:com.j256.ormlite.table.DatabaseTable) com.j256.ormlite.table.DatabaseTable.daoClass():java.lang.Class type: INTERFACE \l0x0031: CONST_CLASS  (r5 I:java.lang.Class\<java.lang.Void\>) =  java.lang.Void.class \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0086 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r4 I:java.lang.Class) = (r3 I:com.j256.ormlite.table.DatabaseTable) com.j256.ormlite.table.DatabaseTable.daoClass():java.lang.Class type: INTERFACE \l0x0039: CONST_CLASS  (r5 I:java.lang.Class\<com.j256.ormlite.dao.BaseDaoImpl\>) =  com.j256.ormlite.dao.BaseDaoImpl.class \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: INVOKE  (r3 I:java.lang.Class) = (r3 I:com.j256.ormlite.table.DatabaseTable) com.j256.ormlite.table.DatabaseTable.daoClass():java.lang.Class type: INTERFACE \l0x0042: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0043: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0045: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0046: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0048: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0049: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x004b: INVOKE  (r6 I:java.lang.reflect.Constructor) = (r3 I:java.lang.Class), (r4 I:java.lang.Object[]) com.j256.ormlite.dao.DaoManager.findConstructor(java.lang.Class, java.lang.Object[]):java.lang.reflect.Constructor type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|SYNTHETIC\lSplitter:B:16:0x0051\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0051\l|0x0051: INVOKE  (r6 I:java.lang.Object) = \l  (r6 I:java.lang.reflect.Constructor)\l  (r4 I:java.lang.Object[])\l java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0058 \}, TRY_ENTER]\l0x0055: CHECK_CAST  (r6 I:com.j256.ormlite.dao.Dao) = (com.j256.ormlite.dao.Dao) (r6 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0058 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|ExcHandler: Exception null\lSplitter:B:16:0x0051\l|0x0058: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|0x0059: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005b: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005e: CONST_STR  (r0 I:java.lang.String) =  \"Could not call the constructor in class \" \l0x0060: INVOKE  (r7 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0063: INVOKE  (r7 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0066: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006a: INVOKE  (r6 I:java.sql.SQLException) = (r7 I:java.lang.String), (r6 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x006e|0x006e: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: NEW_INSTANCE  (r6 I:java.sql.SQLException) =  java.sql.SQLException \l0x0071: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0073: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0076: CONST_STR  (r0 I:java.lang.String) =  \"Could not find public constructor with ConnectionSource, DatabaseTableConfig parameters in class \" \l0x0078: INVOKE  (r7 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007b: INVOKE  (r7 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x007e: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0082: INVOKE  (r6 I:java.sql.SQLException), (r7 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0085|0x0085: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0086|0x0086: INVOKE  (r6 I:com.j256.ormlite.dao.Dao) = \l  (r6 I:com.j256.ormlite.support.ConnectionSource)\l  (r7 I:com.j256.ormlite.table.DatabaseTableConfig)\l com.j256.ormlite.dao.BaseDaoImpl.createDao(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.table.DatabaseTableConfig):com.j256.ormlite.dao.Dao type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x008a|0x008a: INVOKE  \l  (r0 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l  (r6 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.dao.DaoManager.addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource, com.j256.ormlite.dao.Dao):void type: STATIC \l0x008d: SGET  (r7 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.dao.DaoManager.logger com.j256.ormlite.logger.Logger \l0x008f: CONST_STR  (r0 I:java.lang.String) =  \"created dao for class \{\} from table config\" \l0x0091: INVOKE  \l  (r7 I:com.j256.ormlite.logger.Logger)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object):void type: VIRTUAL \l0x0094: INVOKE  (r7 I:com.j256.ormlite.dao.Dao) = \l  (r2 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l com.j256.ormlite.dao.DaoManager.lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource):com.j256.ormlite.dao.Dao type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0098|0x0098: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009d \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: INVOKE  \l  (r2 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l  (r6 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.dao.DaoManager.addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource, com.j256.ormlite.dao.Dao):void type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x009d|0x009d: RETURN  (r6 I:D) \l}"];
MethodNode[shape=record,label="{private static D com.j256.ormlite.dao.DaoManager.doCreateDao((r6 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<D::, Lcom\/j256\/ormlite\/dao\/Dao\<, TT;*\>;T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;)TD;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_24;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_24;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_24[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_17 -> Node_19;
Node_17 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
}

