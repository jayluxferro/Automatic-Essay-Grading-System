digraph "CFG forcom.j256.ormlite.dao.DaoManager.registerDaoWithTableConfig(Lcom\/j256\/ormlite\/support\/ConnectionSource;Lcom\/j256\/ormlite\/dao\/Dao;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<com.j256.ormlite.dao.DaoManager\>) =  com.j256.ormlite.dao.DaoManager.class \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\lSplitter:B:3:0x0005\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0005\l|0x0005: INSTANCE_OF  (r1 I:boolean) = (r4 I:?[OBJECT, ARRAY]) com.j256.ormlite.dao.BaseDaoImpl A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001c A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}]\l0x000a: CHECK_CAST  (r1 I:com.j256.ormlite.dao.BaseDaoImpl) = (com.j256.ormlite.dao.BaseDaoImpl) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0032 \}]\l0x000c: INVOKE  (r1 I:com.j256.ormlite.table.DatabaseTableConfig) = (r1 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.getTableConfig():com.j256.ormlite.table.DatabaseTableConfig type: VIRTUAL A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001c A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: NEW_INSTANCE  (r2 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource) =  com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource A[Catch:\{ all \-\> 0x0032 \}]\l0x0014: INVOKE  \l  (r2 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:com.j256.ormlite.table.DatabaseTableConfig)\l com.j256.ormlite.dao.DaoManager.TableConfigConnectionSource.\<init\>(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.table.DatabaseTableConfig):void type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l0x0017: INVOKE  \l  (r2 I:com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)\l  (r4 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.dao.DaoManager.addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource, com.j256.ormlite.dao.Dao):void type: STATIC A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\lSplitter:B:11:0x001c\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x001c\l|0x001c: NEW_INSTANCE  (r1 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource) =  com.j256.ormlite.dao.DaoManager$ClassConnectionSource A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x001e: INVOKE  (r2 I:java.lang.Class) = (r4 I:com.j256.ormlite.dao.Dao) com.j256.ormlite.dao.Dao.getDataClass():java.lang.Class type: INTERFACE A[Catch:\{ all \-\> 0x0032 \}]\l0x0022: INVOKE  \l  (r1 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r2 I:java.lang.Class)\l com.j256.ormlite.dao.DaoManager.ClassConnectionSource.\<init\>(com.j256.ormlite.support.ConnectionSource, java.lang.Class):void type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l0x0025: INVOKE  \l  (r1 I:com.j256.ormlite.dao.DaoManager$ClassConnectionSource)\l  (r4 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.dao.DaoManager.addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource, com.j256.ormlite.dao.Dao):void type: STATIC A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|SYNTHETIC\lSplitter:B:15:0x002a\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x002a\l|0x002a: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x0032 \}, TRY_ENTER]\l0x002c: CONST_STR  (r4 I:java.lang.String) =  \"connectionSource argument cannot be null\" A[Catch:\{ all \-\> 0x0032 \}]\l0x002e: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0032 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: THROW  (r3 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|ExcHandler: all null\lSplitter:B:3:0x0005\l|0x0032: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|0x0034: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static synchronized void com.j256.ormlite.dao.DaoManager.registerDaoWithTableConfig((r3 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.dao.Dao\<?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Lcom\/j256\/ormlite\/dao\/Dao\<, **\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_3 -> Node_18;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

