digraph "CFG forcom.j256.ormlite.dao.EagerForeignCollection.\<init\>(Lcom\/j256\/ormlite\/dao\/Dao;Ljava\/lang\/Object;Ljava\/lang\/Object;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/String;Z)V" {
subgraph cluster_Region_1753906909 {
label = "R(2:0|(1:2)(1:3))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r1, r2, r3, r4, r5, r6)\l}"];
subgraph cluster_IfRegion_981617642 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3 == null) goto L_0x0005\l}"];
subgraph cluster_Region_323726114 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|r0.results = new java.util.ArrayList()\l}"];
}
subgraph cluster_Region_1226300782 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|r0.results = r1.query(getPreparedQuery())\l}"];
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.dao.EagerForeignCollection.\<init\>((r0v0 'this' com.j256.ormlite.dao.EagerForeignCollection A[IMMUTABLE_TYPE, THIS]), (r1v0 com.j256.ormlite.dao.Dao\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/dao\/Dao\<, TT;TID;\>;, Ljava\/lang\/Object;, Ljava\/lang\/Object;, Lcom\/j256\/ormlite\/field\/FieldType;, Ljava\/lang\/String;, Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
}

