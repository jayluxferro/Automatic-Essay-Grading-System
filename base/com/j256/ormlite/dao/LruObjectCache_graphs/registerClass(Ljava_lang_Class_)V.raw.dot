digraph "CFG forcom.j256.ormlite.dao.LruObjectCache.registerClass(Ljava\/lang\/Class;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.concurrent.ConcurrentHashMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Object, java.lang.Object\>\>) = (r2 I:com.j256.ormlite.dao.LruObjectCache) com.j256.ormlite.dao.LruObjectCache.classMaps java.util.concurrent.ConcurrentHashMap A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.util.concurrent.ConcurrentHashMap)\l  (r3 I:java.lang.Object)\l java.util.concurrent.ConcurrentHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l0x0007: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap) =  com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap A[Catch:\{ all \-\> 0x001d \}]\l0x000d: IGET  (r1 I:int) = (r2 I:com.j256.ormlite.dao.LruObjectCache) com.j256.ormlite.dao.LruObjectCache.capacity int A[Catch:\{ all \-\> 0x001d \}]\l0x000f: INVOKE  \l  (r0 I:com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap)\l  (r1 I:int)\l com.j256.ormlite.dao.LruObjectCache.LimitedLinkedHashMap.\<init\>(int):void type: DIRECT A[Catch:\{ all \-\> 0x001d \}]\l0x0012: INVOKE  (r0 I:java.util.Map) = (r0 I:java.util.Map) java.util.Collections.synchronizedMap(java.util.Map):java.util.Map type: STATIC A[Catch:\{ all \-\> 0x001d \}]\l0x0016: IGET  (r1 I:java.util.concurrent.ConcurrentHashMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Object, java.lang.Object\>\>) = (r2 I:com.j256.ormlite.dao.LruObjectCache) com.j256.ormlite.dao.LruObjectCache.classMaps java.util.concurrent.ConcurrentHashMap A[Catch:\{ all \-\> 0x001d \}]\l0x0018: INVOKE  \l  (r1 I:java.util.concurrent.ConcurrentHashMap)\l  (r3 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.concurrent.ConcurrentHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001d: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void com.j256.ormlite.dao.LruObjectCache.registerClass((r2 'this' I:com.j256.ormlite.dao.LruObjectCache A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Class\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

