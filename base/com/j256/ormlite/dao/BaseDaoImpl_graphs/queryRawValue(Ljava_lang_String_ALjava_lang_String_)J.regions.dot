digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryRawValue(Ljava\/lang\/String;[Ljava\/lang\/String;)J" {
subgraph cluster_Region_1847252785 {
label = "R(2:0|(3:2|3|4))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\lcom.j256.ormlite.support.DatabaseConnection com.j256.ormlite.support.DatabaseConnection r0 = r3.connectionSource.getReadOnlyConnection(r3.tableInfo.getTableName())\l}"];
subgraph cluster_TryCatchRegion_223038102 {
label = "Try: R(3:2|3|4) catches: R(3:6|8|9), R(3:5|10|11)";
node [shape=record,color=blue];
subgraph cluster_Region_1996116302 {
label = "R(3:2|3|4)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\lSplitter:B:1:0x000f\l|long long r1 = r3.statementExecutor.queryForLong(r0, r4, r5)     \/\/ Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|r3.connectionSource.releaseConnection(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|RETURN\l|return r1\l}"];
}
subgraph cluster_Region_636068458 {
label = "R(3:6|8|9) | ExcHandler: SQLException (r5v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001d|ExcHandler: SQLException (r5v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:1:0x000f\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\lSplitter:B:7:0x001e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\l|throw com.j256.ormlite.misc.SqlExceptionUtil.create(\"Could not perform raw value query for \" + r4, r5)     \/\/ Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\l}"];
}
subgraph cluster_Region_2078090938 {
label = "R(3:5|10|11) | ExcHandler: all (r4v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|ExcHandler: all (r4v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x001e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|r3.connectionSource.releaseConnection(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|throw r4\l}"];
}
}
}
subgraph cluster_Region_636068458 {
label = "R(3:6|8|9) | ExcHandler: SQLException (r5v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001d|ExcHandler: SQLException (r5v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:1:0x000f\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\lSplitter:B:7:0x001e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\l|throw com.j256.ormlite.misc.SqlExceptionUtil.create(\"Could not perform raw value query for \" + r4, r5)     \/\/ Catch:\{ SQLException \-\> 0x001d, all \-\> 0x001b \}\l}"];
}
subgraph cluster_Region_2078090938 {
label = "R(3:5|10|11) | ExcHandler: all (r4v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|ExcHandler: all (r4v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x001e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|r3.connectionSource.releaseConnection(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|throw r4\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000f|SYNTHETIC\lSplitter:B:1:0x000f\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e|SYNTHETIC\lSplitter:B:7:0x001e\l}"];
MethodNode[shape=record,label="{public long com.j256.ormlite.dao.BaseDaoImpl.queryRawValue((r3v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_5 -> Node_10;
Node_10 -> Node_11;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_5 -> Node_10;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_5;
}

