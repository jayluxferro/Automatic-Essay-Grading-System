digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.deleteIds(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4 == null) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r4.isEmpty() == false) goto L_0x000c\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|com.j256.ormlite.support.DatabaseConnection r0 = r3.connectionSource.getReadWriteConnection(r3.tableInfo.getTableName())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|SYNTHETIC\lSplitter:B:5:0x0018\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ all \-\> 0x0026 \}\lSplitter:B:5:0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|DONT_GENERATE\l|com.j256.ormlite.support.ConnectionSource r1 = r3.connectionSource\lr1.releaseConnection(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|RETURN\l|return r3.statementExecutor.deleteIds(r0, r4, r3.objectCache)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|ExcHandler:  FINALLY\lSplitter:B:5:0x0018\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|FINALLY_INSNS\l|r3.connectionSource.releaseConnection(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|throw r4\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return 0\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.dao.BaseDaoImpl.deleteIds((r3v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 java.util.Collection\<ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, TID;\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

