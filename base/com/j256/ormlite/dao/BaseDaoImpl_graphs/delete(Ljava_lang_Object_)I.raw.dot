digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.delete(Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r4 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x0009: IGET  (r1 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x000b: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x000f: INVOKE  (r0 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r0 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadWriteConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|SYNTHETIC\lSplitter:B:5:0x0013\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0013\l|0x0013: IGET  (r1 I:com.j256.ormlite.stmt.StatementExecutor\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.statementExecutor com.j256.ormlite.stmt.StatementExecutor A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER]\l0x0015: IGET  (r2 I:com.j256.ormlite.dao.ObjectCache) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.objectCache com.j256.ormlite.dao.ObjectCache A[Catch:\{ all \-\> 0x0021 \}]\l0x0017: INVOKE  (r4 I:int) = \l  (r1 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l  (r4 I:java.lang.Object)\l  (r2 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.StatementExecutor.delete(com.j256.ormlite.support.DatabaseConnection, java.lang.Object, com.j256.ormlite.dao.ObjectCache):int type: VIRTUAL A[Catch:\{ all \-\> 0x0021 \}]\l0x001a: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r1 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x001d: INVOKE  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: RETURN  (r4 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|ExcHandler: all null\lSplitter:B:5:0x0013\l|0x0021: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IGET  (r1 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x0024: INVOKE  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.dao.BaseDaoImpl.delete((r3 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

