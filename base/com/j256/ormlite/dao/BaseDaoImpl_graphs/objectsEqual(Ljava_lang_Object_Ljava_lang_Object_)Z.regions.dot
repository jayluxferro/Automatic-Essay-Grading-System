digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.objectsEqual(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1171890867 {
label = "R(3:0|(2:2|(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\lint int r1 = r7.tableInfo.getFieldTypes().length\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1581822370 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:5:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:5:0x0023\l|if (r3 \< r1) goto L_0x000e\l}"];
subgraph cluster_Region_2016568360 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|r4 = r0[r3]\l}"];
subgraph cluster_Region_1706776713 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1378761969 {
label = "IF [B:3:0x0020] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0020|if (r4.getDataPersister().dataIsEqual(r4.extractJavaFieldValue(r8), r4.extractJavaFieldValue(r9)) == false) goto L_0x0022\l}"];
subgraph cluster_Region_1398307614 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0022|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_443714974 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0023|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:5:0x0023\l|r3++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0026|RETURN\l|return true\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x0022|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0026|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.dao.BaseDaoImpl.objectsEqual((r7v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r8v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;TT;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

