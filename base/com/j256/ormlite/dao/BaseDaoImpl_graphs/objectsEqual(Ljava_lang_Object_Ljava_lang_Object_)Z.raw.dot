digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.objectsEqual(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r7 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x0005: INVOKE  (r0 I:com.j256.ormlite.field.FieldType[]) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0009: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: AGET  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0010: INVOKE  (r5 I:java.lang.Object) = \l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0014: INVOKE  (r6 I:java.lang.Object) = \l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r9 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0018: INVOKE  (r4 I:com.j256.ormlite.field.DataPersister) = (r4 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getDataPersister():com.j256.ormlite.field.DataPersister type: VIRTUAL \l0x001c: INVOKE  (r4 I:boolean) = \l  (r4 I:com.j256.ormlite.field.DataPersister)\l  (r5 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l com.j256.ormlite.field.DataPersister.dataIsEqual(java.lang.Object, java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: RETURN  (r2 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: RETURN  (r8 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.dao.BaseDaoImpl.objectsEqual((r7 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;TT;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

