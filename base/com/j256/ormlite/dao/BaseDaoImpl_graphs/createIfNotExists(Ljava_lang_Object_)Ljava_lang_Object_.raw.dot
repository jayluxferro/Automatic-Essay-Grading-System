digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.createIfNotExists(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r2 I:T) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.queryForSameId(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: INVOKE  \l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.create(java.lang.Object):int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: RETURN  (r2 I:T) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.dao.BaseDaoImpl.createIfNotExists((r1 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
}

