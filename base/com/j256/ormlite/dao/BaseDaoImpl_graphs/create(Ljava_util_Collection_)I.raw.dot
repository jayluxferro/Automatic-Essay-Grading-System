digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.create(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: INVOKE  (r0 I:java.util.Iterator) = (r4 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.j256.ormlite.misc.BaseDaoEnabled \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0007 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: CHECK_CAST  (r1 I:com.j256.ormlite.misc.BaseDaoEnabled) = (com.j256.ormlite.misc.BaseDaoEnabled) (r1 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  \l  (r1 I:com.j256.ormlite.misc.BaseDaoEnabled)\l  (r3 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.misc.BaseDaoEnabled.setDao(com.j256.ormlite.dao.Dao):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IGET  (r0 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x001d: IGET  (r1 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x001f: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0023: INVOKE  (r0 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r0 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadWriteConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|SYNTHETIC\lSplitter:B:7:0x0027\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0027\l|0x0027: NEW_INSTANCE  (r1 I:com.j256.ormlite.dao.BaseDaoImpl$2) =  com.j256.ormlite.dao.BaseDaoImpl$2 A[Catch:\{ all \-\> 0x003c \}, TRY_ENTER]\l0x0029: INVOKE  \l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl$2)\l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r4 I:java.util.Collection)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.dao.BaseDaoImpl.2.\<init\>(com.j256.ormlite.dao.BaseDaoImpl, java.util.Collection, com.j256.ormlite.support.DatabaseConnection):void type: DIRECT A[Catch:\{ all \-\> 0x003c \}]\l0x002c: INVOKE  (r4 I:java.lang.Object) = \l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r1 I:java.util.concurrent.Callable)\l com.j256.ormlite.dao.BaseDaoImpl.callBatchTasks(java.util.concurrent.Callable):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x003c \}]\l0x0030: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x003c \}]\l0x0032: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ all \-\> 0x003c \}]\l0x0035: NOP   A[TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: IGET  (r1 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x0038: INVOKE  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: RETURN  (r4 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|ExcHandler: all null\lSplitter:B:7:0x0027\l|0x003c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IGET  (r1 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x003f: INVOKE  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.dao.BaseDaoImpl.create((r3 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.Collection\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, TT;\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

