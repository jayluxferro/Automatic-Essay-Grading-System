digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryForFieldValues(Ljava\/util\/Map;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\lcom.j256.ormlite.stmt.QueryBuilder r0 = queryBuilder()\lcom.j256.ormlite.stmt.Where r1 = r0.where()\ljava.util.Iterator r2 = r7.entrySet().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:6:0x002b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r2.hasNext() == false) goto L_0x0035\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|java.util.Map$Entry r3 = r2.next()\ljava.lang.Object r4 = r3.getValue()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r8 == false) goto L_0x002b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|r4 = new com.j256.ormlite.stmt.SelectArg(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|LOOP_END\lPHI: r4 \l  PHI: (r4v1 java.lang.Object) = (r4v0 java.lang.Object), (r4v2 java.lang.Object) binds: [B:15:0x002b, B:14:0x002b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:6:0x002b\l|r1.mo17213eq((java.lang.String) r3.getKey(), r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0035}"];
Node_8 [shape=record,label="{8\:\ 0x0039|if (r7.size() != 0) goto L_0x0040\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b}"];
Node_10 [shape=record,label="{10\:\ 0x003f|RETURN\l|return java.util.Collections.emptyList()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|r1.and(r7.size())\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|RETURN\l|return r0.query()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<T\> com.j256.ormlite.dao.BaseDaoImpl.queryForFieldValues((r6v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r7v0 java.util.Map\<java.lang.String, java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/Object;, \>;Z), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_14;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_7;
Node_14 -> Node_6;
Node_15 -> Node_6;
}

