digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.countOf(Lcom\/j256\/ormlite\/stmt\/PreparedQuery;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: INVOKE  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r4 I:com.j256.ormlite.stmt.PreparedQuery) com.j256.ormlite.stmt.PreparedQuery.getType():com.j256.ormlite.stmt.StatementBuilder$StatementType type: INTERFACE \l0x0007: SGET  (r1 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG com.j256.ormlite.stmt.StatementBuilder$StatementType \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r0 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x000d: IGET  (r1 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x000f: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0013: INVOKE  (r0 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r0 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadOnlyConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|SYNTHETIC\lSplitter:B:3:0x0017\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0017\l|0x0017: IGET  (r1 I:com.j256.ormlite.stmt.StatementExecutor\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.statementExecutor com.j256.ormlite.stmt.StatementExecutor A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l0x0019: INVOKE  (r1 I:long) = \l  (r1 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l  (r4 I:com.j256.ormlite.stmt.PreparedStmt)\l com.j256.ormlite.stmt.StatementExecutor.queryForLong(com.j256.ormlite.support.DatabaseConnection, com.j256.ormlite.stmt.PreparedStmt):long type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l0x001c: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r4 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x001f: INVOKE  \l  (r4 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: RETURN  (r1 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|ExcHandler: all null\lSplitter:B:3:0x0017\l|0x0023: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r1 I:com.j256.ormlite.support.ConnectionSource) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x0026: INVOKE  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r1 I:java.lang.String) =  \"Prepared query is not of type \" \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: SGET  (r1 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003b: CONST_STR  (r1 I:java.lang.String) =  \", you need to call QueryBuilder.setCountOf(true)\" \l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0044: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long com.j256.ormlite.dao.BaseDaoImpl.countOf((r3 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.stmt.PreparedQuery\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/stmt\/PreparedQuery\<, TT;\>;)J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

