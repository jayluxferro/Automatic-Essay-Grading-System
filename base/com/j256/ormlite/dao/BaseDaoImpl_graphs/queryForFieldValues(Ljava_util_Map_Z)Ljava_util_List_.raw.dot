digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryForFieldValues(Ljava\/util\/Map;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: INVOKE  (r0 I:com.j256.ormlite.stmt.QueryBuilder) = (r6 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.queryBuilder():com.j256.ormlite.stmt.QueryBuilder type: VIRTUAL \l0x0007: INVOKE  (r1 I:com.j256.ormlite.stmt.Where) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.where():com.j256.ormlite.stmt.Where type: VIRTUAL \l0x000b: INVOKE  (r2 I:java.util.Set) = (r7 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x000f: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r3 I:java.util.Map$Entry) = (java.util.Map$Entry) (r3 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: NEW_INSTANCE  (r5 I:com.j256.ormlite.stmt.SelectArg) =  com.j256.ormlite.stmt.SelectArg \l0x0027: INVOKE  \l  (r5 I:com.j256.ormlite.stmt.SelectArg)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.stmt.SelectArg.\<init\>(java.lang.Object):void type: DIRECT \l0x002a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x002f: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0031: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.Where)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.stmt.Where.eq(java.lang.String, java.lang.Object):com.j256.ormlite.stmt.Where type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: INVOKE  (r8 I:int) = (r7 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: INVOKE  (r7 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: RETURN  (r7 I:java.util.List\<T\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: INVOKE  (r7 I:int) = (r7 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l0x0044: INVOKE  (r1 I:com.j256.ormlite.stmt.Where), (r7 I:int) com.j256.ormlite.stmt.Where.and(int):com.j256.ormlite.stmt.Where type: VIRTUAL \l0x0047: INVOKE  (r7 I:java.util.List) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.query():java.util.List type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: RETURN  (r7 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{private java.util.List\<T\> com.j256.ormlite.dao.BaseDaoImpl.queryForFieldValues((r6 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.Map\<java.lang.String, java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/Object;, \>;Z), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

