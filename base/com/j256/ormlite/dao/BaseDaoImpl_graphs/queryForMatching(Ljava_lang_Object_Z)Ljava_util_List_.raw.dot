digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryForMatching(Ljava\/lang\/Object;Z)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r9 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: INVOKE  (r0 I:com.j256.ormlite.stmt.QueryBuilder) = (r9 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.queryBuilder():com.j256.ormlite.stmt.QueryBuilder type: VIRTUAL \l0x0007: INVOKE  (r1 I:com.j256.ormlite.stmt.Where) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.where():com.j256.ormlite.stmt.Where type: VIRTUAL \l0x000b: IGET  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r9 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x000d: INVOKE  (r2 I:com.j256.ormlite.field.FieldType[]) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0011: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x0012: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: AGET  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0018: INVOKE  (r7 I:java.lang.Object) = \l  (r6 I:com.j256.ormlite.field.FieldType)\l  (r10 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.getFieldValueIfNotDefault(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: NEW_INSTANCE  (r8 I:com.j256.ormlite.stmt.SelectArg) =  com.j256.ormlite.stmt.SelectArg \l0x0022: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.SelectArg)\l  (r7 I:java.lang.Object)\l com.j256.ormlite.stmt.SelectArg.\<init\>(java.lang.Object):void type: DIRECT \l0x0025: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  (r6 I:java.lang.String) = (r6 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getColumnName():java.lang.String type: VIRTUAL \l0x002a: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.Where)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.Object)\l com.j256.ormlite.stmt.Where.eq(java.lang.String, java.lang.Object):com.j256.ormlite.stmt.Where type: VIRTUAL \l0x002d: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: INVOKE  (r10 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: RETURN  (r10 I:java.util.List\<T\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: INVOKE  (r1 I:com.j256.ormlite.stmt.Where), (r5 I:int) com.j256.ormlite.stmt.Where.and(int):com.j256.ormlite.stmt.Where type: VIRTUAL \l0x003c: INVOKE  (r10 I:java.util.List) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.query():java.util.List type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: RETURN  (r10 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{private java.util.List\<T\> com.j256.ormlite.dao.BaseDaoImpl.queryForMatching((r9 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r10 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;Z), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

