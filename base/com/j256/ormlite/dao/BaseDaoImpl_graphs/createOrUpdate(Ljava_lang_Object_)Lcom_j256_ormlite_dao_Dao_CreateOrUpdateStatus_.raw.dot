digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.createOrUpdate(Ljava\/lang\/Object;)Lcom\/j256\/ormlite\/dao\/Dao$CreateOrUpdateStatus;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r4 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) =  com.j256.ormlite.dao.Dao$CreateOrUpdateStatus \l0x0005: INVOKE  \l  (r4 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus)\l  (r0 I:boolean)\l  (r0 I:boolean)\l  (r0 I:int)\l com.j256.ormlite.dao.Dao.CreateOrUpdateStatus.\<init\>(boolean, boolean, int):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r4 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r1 I:java.lang.Object) = \l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.extractId(java.lang.Object):java.lang.Object type: VIRTUAL \l0x000d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r1 I:boolean) = \l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r1 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.idExists(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: INVOKE  (r4 I:int) = \l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.update(java.lang.Object):int type: VIRTUAL \l0x001b: NEW_INSTANCE  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) =  com.j256.ormlite.dao.Dao$CreateOrUpdateStatus \l0x001d: INVOKE  \l  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus)\l  (r0 I:boolean)\l  (r2 I:boolean)\l  (r4 I:int)\l com.j256.ormlite.dao.Dao.CreateOrUpdateStatus.\<init\>(boolean, boolean, int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: RETURN  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: INVOKE  (r4 I:int) = \l  (r3 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.create(java.lang.Object):int type: VIRTUAL \l0x0025: NEW_INSTANCE  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) =  com.j256.ormlite.dao.Dao$CreateOrUpdateStatus \l0x0027: INVOKE  \l  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus)\l  (r2 I:boolean)\l  (r0 I:boolean)\l  (r4 I:int)\l com.j256.ormlite.dao.Dao.CreateOrUpdateStatus.\<init\>(boolean, boolean, int):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: RETURN  (r1 I:com.j256.ormlite.dao.Dao$CreateOrUpdateStatus) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.dao.Dao$CreateOrUpdateStatus com.j256.ormlite.dao.BaseDaoImpl.createOrUpdate((r3 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;), Lcom\/j256\/ormlite\/dao\/Dao$CreateOrUpdateStatus;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_11[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
}

