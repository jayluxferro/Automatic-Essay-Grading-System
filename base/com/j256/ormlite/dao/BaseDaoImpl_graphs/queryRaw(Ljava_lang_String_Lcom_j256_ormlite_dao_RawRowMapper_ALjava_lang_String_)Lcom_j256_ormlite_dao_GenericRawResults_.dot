digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryRaw(Ljava\/lang\/String;Lcom\/j256\/ormlite\/dao\/RawRowMapper;[Ljava\/lang\/String;)Lcom\/j256\/ormlite\/dao\/GenericRawResults;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLException \-\> 0x0011 \}\lSplitter:B:1:0x0003\l|r2 = r7     \/\/ Catch:\{ SQLException \-\> 0x0011 \}\lr3 = r8     \/\/ Catch:\{ SQLException \-\> 0x0011 \}\lr4 = r9     \/\/ Catch:\{ SQLException \-\> 0x0011 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|RETURN\l|return r6.statementExecutor.queryRaw(r6.connectionSource, r2, r3, r4, r6.objectCache)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|ExcHandler: SQLException (r8v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0003\l|java.sql.SQLException r8 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"Could not perform raw query for \")\lr9.append(r7)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|throw com.j256.ormlite.misc.SqlExceptionUtil.create(r9.toString(), r8)\l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.dao.GenericRawResults\<GR\> com.j256.ormlite.dao.BaseDaoImpl.queryRaw((r6v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.j256.ormlite.dao.RawRowMapper\<GR\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<GR:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/String;, Lcom\/j256\/ormlite\/dao\/RawRowMapper\<, TGR;\>;[, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/dao\/GenericRawResults\<, TGR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

