digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.queryRaw(Ljava\/lang\/String;[Ljava\/lang\/String;)Lcom\/j256\/ormlite\/dao\/GenericRawResults;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLException \-\> 0x000e \}\lSplitter:B:1:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return r3.statementExecutor.queryRaw(r3.connectionSource, r4, r5, r3.objectCache)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|ExcHandler: SQLException (r5v1 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0003\l|java.sql.SQLException r5 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Could not perform raw query for \")\lr0.append(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|throw com.j256.ormlite.misc.SqlExceptionUtil.create(r0.toString(), r5)\l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.dao.GenericRawResults\<java.lang.String[]\> com.j256.ormlite.dao.BaseDaoImpl.queryRaw((r3v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, [, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/dao\/GenericRawResults\<, [, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

