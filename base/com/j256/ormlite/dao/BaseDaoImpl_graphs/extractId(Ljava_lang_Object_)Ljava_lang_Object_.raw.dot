digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.extractId(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r2 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x0005: INVOKE  (r0 I:com.j256.ormlite.field.FieldType) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.FieldType)\l  (r3 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r3 I:ID) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: NEW_INSTANCE  (r3 I:java.sql.SQLException) =  java.sql.SQLException \l0x0012: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0014: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"Class \" \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: IGET  (r1 I:java.lang.Class\<T\>) = (r2 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.dataClass java.lang.Class \l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0021: CONST_STR  (r1 I:java.lang.String) =  \" does not have an id field\" \l0x0023: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0026: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002a: INVOKE  (r3 I:java.sql.SQLException), (r0 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public ID com.j256.ormlite.dao.BaseDaoImpl.extractId((r2 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)TID;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

