digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.makeEmptyForeignCollection(Ljava\/lang\/Object;Ljava\/lang\/String;)Lcom\/j256\/ormlite\/dao\/ForeignCollection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.checkForInitialized():void type: VIRTUAL \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r1 I:java.lang.Object) = \l  (r7 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.dao.BaseDaoImpl.extractId(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r7 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x000e: INVOKE  (r2 I:com.j256.ormlite.field.FieldType[]) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0012: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:13:0x0030 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0018: INVOKE  (r6 I:java.lang.String) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getColumnName():java.lang.String type: VIRTUAL \l0x001c: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r9 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: INVOKE  (r9 I:com.j256.ormlite.dao.BaseForeignCollection) = \l  (r5 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.buildForeignCollection(java.lang.Object, java.lang.Object):com.j256.ormlite.dao.BaseForeignCollection type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0029: INVOKE  \l  (r5 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l  (r9 I:java.lang.Object)\l  (r1 I:boolean)\l  (r0 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: RETURN  (r9 I:com.j256.ormlite.dao.ForeignCollection\<FT\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0034: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0037: CONST_STR  (r1 I:java.lang.String) =  \"Could not find a field named \" \l0x0039: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: INVOKE  (r0 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003f: INVOKE  (r9 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0043: INVOKE  \l  (r8 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.dao.ForeignCollection\<FT\> com.j256.ormlite.dao.BaseDaoImpl.makeEmptyForeignCollection((r7 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<FT:, Ljava\/lang\/Object;, \>(TT;, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/dao\/ForeignCollection\<, TFT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_5;
Node_13 -> Node_14;
}

