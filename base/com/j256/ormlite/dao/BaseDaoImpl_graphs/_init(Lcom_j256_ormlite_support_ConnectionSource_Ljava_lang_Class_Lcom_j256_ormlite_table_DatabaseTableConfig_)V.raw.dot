digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.\<init\>(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/Class;Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r2 I:java.lang.Class\<T\>)\l  (r0 I:com.j256.ormlite.dao.BaseDaoImpl)\l com.j256.ormlite.dao.BaseDaoImpl.dataClass java.lang.Class \l0x0005: IPUT  \l  (r3 I:com.j256.ormlite.table.DatabaseTableConfig\<T\>)\l  (r0 I:com.j256.ormlite.dao.BaseDaoImpl)\l com.j256.ormlite.dao.BaseDaoImpl.tableConfig com.j256.ormlite.table.DatabaseTableConfig \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IPUT  \l  (r1 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.dao.BaseDaoImpl)\l com.j256.ormlite.dao.BaseDaoImpl.connectionSource com.j256.ormlite.support.ConnectionSource \l0x000b: INVOKE  (r0 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.initialize():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.dao.BaseDaoImpl.\<init\>((r0 'this' I:com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/Class\<, TT;\>;, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

