digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.countOf(Lcom\/j256\/ormlite\/stmt\/PreparedQuery;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkForInitialized()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r4.getType() != com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|com.j256.ormlite.support.DatabaseConnection r0 = r3.connectionSource.getReadOnlyConnection(r3.tableInfo.getTableName())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|SYNTHETIC\lSplitter:B:3:0x0017\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ all \-\> 0x0023 \}\lSplitter:B:3:0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|DONT_GENERATE\l|com.j256.ormlite.support.ConnectionSource r4 = r3.connectionSource\lr4.releaseConnection(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|RETURN\l|return r3.statementExecutor.queryForLong(r0, r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|ExcHandler:  FINALLY\lSplitter:B:3:0x0017\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|FINALLY_INSNS\l|r3.connectionSource.releaseConnection(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|throw r4\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Prepared query is not of type \")\lr0.append(com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG)\lr0.append(\", you need to call QueryBuilder.setCountOf(true)\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public long com.j256.ormlite.dao.BaseDaoImpl.countOf((r3v0 'this' com.j256.ormlite.dao.BaseDaoImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 com.j256.ormlite.stmt.PreparedQuery\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/stmt\/PreparedQuery\<, TT;\>;)J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

