digraph "CFG forcom.j256.ormlite.dao.BaseDaoImpl.2.call()Ljava\/lang\/Integer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Collection) = (r6 I:com.j256.ormlite.dao.BaseDaoImpl$2) com.j256.ormlite.dao.BaseDaoImpl.2.val$datas java.util.Collection \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0023 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: IGET  (r3 I:com.j256.ormlite.dao.BaseDaoImpl) = (r6 I:com.j256.ormlite.dao.BaseDaoImpl$2) com.j256.ormlite.dao.BaseDaoImpl.2.this$0 com.j256.ormlite.dao.BaseDaoImpl \l0x0013: IGET  (r3 I:com.j256.ormlite.stmt.StatementExecutor\<T, ID\>) = (r3 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.statementExecutor com.j256.ormlite.stmt.StatementExecutor \l0x0015: IGET  (r4 I:com.j256.ormlite.support.DatabaseConnection) = (r6 I:com.j256.ormlite.dao.BaseDaoImpl$2) com.j256.ormlite.dao.BaseDaoImpl.2.val$connection com.j256.ormlite.support.DatabaseConnection \l0x0017: IGET  (r5 I:com.j256.ormlite.dao.BaseDaoImpl) = (r6 I:com.j256.ormlite.dao.BaseDaoImpl$2) com.j256.ormlite.dao.BaseDaoImpl.2.this$0 com.j256.ormlite.dao.BaseDaoImpl \l0x0019: INVOKE  (r5 I:com.j256.ormlite.dao.ObjectCache) = (r5 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.access$000(com.j256.ormlite.dao.BaseDaoImpl):com.j256.ormlite.dao.ObjectCache type: STATIC \l0x001d: INVOKE  (r2 I:int) = \l  (r3 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r4 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:java.lang.Object)\l  (r5 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.StatementExecutor.create(com.j256.ormlite.support.DatabaseConnection, java.lang.Object, com.j256.ormlite.dao.ObjectCache):int type: VIRTUAL \l0x0021: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: INVOKE  (r0 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: RETURN  (r0 I:java.lang.Integer) \l}"];
MethodNode[shape=record,label="{public java.lang.Integer com.j256.ormlite.dao.BaseDaoImpl.2.call((r6 'this' I:com.j256.ormlite.dao.BaseDaoImpl$2 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

