digraph "CFG forcom.j256.ormlite.dao.ReferenceObjectCache.getMapForClass(Ljava\/lang\/Class;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.ConcurrentHashMap\<java.lang.Class\<?\>, java.util.Map\<java.lang.Object, java.lang.ref.Reference\<java.lang.Object\>\>\>) = (r1 I:com.j256.ormlite.dao.ReferenceObjectCache) com.j256.ormlite.dao.ReferenceObjectCache.classMaps java.util.concurrent.ConcurrentHashMap \l0x0002: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.util.concurrent.ConcurrentHashMap)\l  (r2 I:java.lang.Object)\l java.util.concurrent.ConcurrentHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r2 I:java.util.Map) = (java.util.Map) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  \l  (r2 I:java.util.Map\<java.lang.Object, java.lang.ref.Reference\<java.lang.Object\>\>)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  \l  (r2 I:java.util.Map\<java.lang.Object, java.lang.ref.Reference\<java.lang.Object\>\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.Map\<java.lang.Object, java.lang.ref.Reference\<java.lang.Object\>\> com.j256.ormlite.dao.ReferenceObjectCache.getMapForClass((r1 'this' I:com.j256.ormlite.dao.ReferenceObjectCache A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;), Ljava\/util\/Map\<, Ljava\/lang\/Object;, Ljava\/lang\/ref\/Reference\<, Ljava\/lang\/Object;, \>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

