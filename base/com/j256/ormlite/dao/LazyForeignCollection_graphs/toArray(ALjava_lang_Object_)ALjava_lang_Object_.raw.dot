digraph "CFG forcom.j256.ormlite.dao.LazyForeignCollection.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.j256.ormlite.dao.CloseableIterator) = (r9 I:com.j256.ormlite.dao.LazyForeignCollection) com.j256.ormlite.dao.LazyForeignCollection.iterator():com.j256.ormlite.dao.CloseableIterator type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0007: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0008\l|0x0008: INVOKE  (r5 I:boolean) = (r0 I:com.j256.ormlite.dao.CloseableIterator) com.j256.ormlite.dao.CloseableIterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0043 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r5 I:java.lang.Object) = (r0 I:com.j256.ormlite.dao.CloseableIterator) com.j256.ormlite.dao.CloseableIterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0043 \}]\l0x0012: ARRAY_LENGTH  (r6 I:int) = (r10 I:?[]) A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:11:0x002c A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0028 A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x0043 \}]\l0x0019: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0043 \}]\l0x001c: ARRAY_LENGTH  (r6 I:int) = (r10 I:?[]) A[Catch:\{ all \-\> 0x0043 \}]\l0x001d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r7 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:10:0x0028 A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: AGET  (r8 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l A[Catch:\{ all \-\> 0x0043 \}]\l0x0022: INVOKE  (r4 I:java.util.List), (r8 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0043 \}]\l0x0025: ARITH  (r7 I:int) = (r7 I:int) + (1 int) A[Catch:\{ all \-\> 0x0043 \}]\l0x0027: GOTO  \-\> 0x001e A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: INVOKE  (r4 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0043 \}]\l0x002b: GOTO  \-\> 0x002e A[Catch:\{ all \-\> 0x0043 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0043 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: INVOKE  (r0 I:java.io.Closeable) com.j256.ormlite.misc.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003e \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: ARRAY_LENGTH  (r0 I:int) = (r10 I:?[]) \l0x0037: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x003d \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: RETURN  (r10 I:E[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: INVOKE  (r10 I:java.lang.Object[]) = (r4 I:java.util.List), (r10 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: RETURN  (r10 I:E[]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|ExcHandler: all null\lSplitter:B:1:0x0008\l|0x0043: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|0x0044: INVOKE  (r0 I:java.io.Closeable) com.j256.ormlite.misc.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public E[] com.j256.ormlite.dao.LazyForeignCollection.toArray((r9 'this' I:com.j256.ormlite.dao.LazyForeignCollection A[IMMUTABLE_TYPE, THIS]), (r10 I:E[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<E:, Ljava\/lang\/Object;, \>([TE;)[TE;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

