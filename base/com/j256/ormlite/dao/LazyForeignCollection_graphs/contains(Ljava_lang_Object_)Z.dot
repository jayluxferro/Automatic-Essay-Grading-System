digraph "CFG forcom.j256.ormlite.dao.LazyForeignCollection.contains(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.j256.ormlite.dao.CloseableIterator r0 = iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lSYNTHETIC\lSplitter:B:1:0x0004\lLOOP:0: B:1:0x0004\-\>B:5:0x0012\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x001b \}\lSplitter:B:1:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|Catch:\{ all \-\> 0x001b \}\l|if (r0.hasNext() == false) goto L_0x0019     \/\/ Catch:\{ all \-\> 0x001b \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|Catch:\{ all \-\> 0x001b \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_END\lLOOP:0: B:1:0x0004\-\>B:5:0x0012\l|if (r0.next().equals(r3) == false) goto L_0x0004\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r3 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|DONT_GENERATE\lPHI: r3 \l  PHI: (r3v3 boolean) = (r3v2 boolean), (r3v4 boolean) binds: [B:9:0x0019, B:6:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|com.j256.ormlite.misc.IOUtils.closeQuietly(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|RETURN\l|return r3\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|r3 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|ExcHandler:  FINALLY\lSplitter:B:1:0x0004\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|FINALLY_INSNS\l|com.j256.ormlite.misc.IOUtils.closeQuietly(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|throw r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.dao.LazyForeignCollection.contains((r2v0 'this' com.j256.ormlite.dao.LazyForeignCollection A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_13[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_6;
Node_14 -> Node_9;
}

