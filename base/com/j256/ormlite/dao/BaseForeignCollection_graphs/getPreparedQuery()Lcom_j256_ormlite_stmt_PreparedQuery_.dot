digraph "CFG forcom.j256.ormlite.dao.BaseForeignCollection.getPreparedQuery()Lcom\/j256\/ormlite\/stmt\/PreparedQuery;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.dao != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r4.preparedQuery != null) goto L_0x004a\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|com.j256.ormlite.stmt.SelectArg r0 = new com.j256.ormlite.stmt.SelectArg()\lr0.setValue(r4.parentId)\lcom.j256.ormlite.stmt.QueryBuilder r1 = r4.dao.queryBuilder()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if (r4.orderColumn == null) goto L_0x0025\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|r1.orderBy(r4.orderColumn, r4.orderAscending)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|r4.preparedQuery = r1.where().mo17213eq(r4.foreignFieldType.getColumnName(), r0).prepare()\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|if ((r4.preparedQuery instanceof com.j256.ormlite.stmt.mapped.MappedPreparedStmt) == false) goto L_0x004a\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|((com.j256.ormlite.stmt.mapped.MappedPreparedStmt) r4.preparedQuery).setParentInformation(r4.parent, r4.parentId)\l}"];
Node_11 [shape=record,label="{11\:\ 0x004a}"];
Node_12 [shape=record,label="{12\:\ 0x004c|RETURN\l|return r4.preparedQuery\l}"];
MethodNode[shape=record,label="{protected com.j256.ormlite.stmt.PreparedQuery\<T\> com.j256.ormlite.dao.BaseForeignCollection.getPreparedQuery((r4v0 'this' com.j256.ormlite.dao.BaseForeignCollection A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lcom\/j256\/ormlite\/stmt\/PreparedQuery\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

