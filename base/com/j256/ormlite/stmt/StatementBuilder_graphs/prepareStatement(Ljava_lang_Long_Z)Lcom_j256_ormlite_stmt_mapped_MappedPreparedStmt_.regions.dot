digraph "CFG forcom.j256.ormlite.stmt.StatementBuilder.prepareStatement(Ljava\/lang\/Long;Z)Lcom\/j256\/ormlite\/stmt\/mapped\/MappedPreparedStmt;" {
subgraph cluster_Region_2086624648 {
label = "R(3:0|(1:3)|(2:(3:6|(1:8)|10)|(2:11|12)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\ljava.lang.String java.lang.String r3 = buildStatementString(r0)\lcom.j256.ormlite.stmt.ArgumentHolder[] com.j256.ormlite.stmt.ArgumentHolder[] r6 = (com.j256.ormlite.stmt.ArgumentHolder[]) r0.toArray(new com.j256.ormlite.stmt.ArgumentHolder[r0.size()])\lcom.j256.ormlite.field.FieldType[] com.j256.ormlite.field.FieldType[] r5 = getResultFieldTypes()\lcom.j256.ormlite.field.FieldType[] com.j256.ormlite.field.FieldType[] r4 = new com.j256.ormlite.field.FieldType[r0.size()]\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_1034268455 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0022|if (r0 \< r6.length) goto L_0x0024\l}"];
subgraph cluster_Region_1715803601 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0024|LOOP_END\lLOOP:0: B:1:0x0021\-\>B:3:0x0024\l|r4[r0] = r6[r0].getFieldType()\lr0++\l}"];
}
}
subgraph cluster_Region_208752410 {
label = "R(2:(3:6|(1:8)|10)|(2:11|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_16761927 {
label = "IF [B:5:0x0035] THEN: R(3:6|(1:8)|10) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0035|if (r10.type.isOkForStatementBuilder() == true) goto L_0x0037\l}"];
subgraph cluster_Region_54511629 {
label = "R(3:6|(1:8)|10)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0037|com.j256.ormlite.table.TableInfo\<T, ID\> com.j256.ormlite.table.TableInfo\<T, ID\> r2 = r10.tableInfo\l}"];
subgraph cluster_IfRegion_2046368294 {
label = "IF [B:7:0x0041] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0041|if (r10.databaseType.isLimitSqlSupported() == true) goto L_0x0043\l}"];
subgraph cluster_Region_1135822378 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0043|r11 = null\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x004c|RETURN\l|return new com.j256.ormlite.stmt.mapped.MappedPreparedStmt(r2, r3, r4, r5, r6, r11, r10.type, r12)\l}"];
}
}
subgraph cluster_Region_1170004185 {
label = "R(2:11|12)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x004d}"];
Node_12 [shape=record,label="{12\:\ 0x006a|throw new java.lang.IllegalStateException(\"Building a statement from a \" + r10.type + \" statement is not allowed\")\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0021|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v10 int) binds: [B:0:0x0000, B:3:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0021\-\>B:3:0x0024\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x002f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0044|PHI: r11 \l  PHI: (r11v2 java.lang.Long) = (r11v0 java.lang.Long), (r11v3 java.lang.Long) binds: [B:7:0x0041, B:8:0x0043] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected com.j256.ormlite.stmt.mapped.MappedPreparedStmt\<T, ID\> com.j256.ormlite.stmt.StatementBuilder.prepareStatement((r10v0 'this' com.j256.ormlite.stmt.StatementBuilder A[IMMUTABLE_TYPE, THIS]), (r11v0 java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Long;, Z), Lcom\/j256\/ormlite\/stmt\/mapped\/MappedPreparedStmt\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_13[style=dashed];
Node_3 -> Node_1;
Node_5 -> Node_6;
Node_5 -> Node_11[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_9 -> Node_10;
Node_13 -> Node_4;
}

