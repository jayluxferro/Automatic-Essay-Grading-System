digraph "CFG forcom.j256.ormlite.stmt.StatementBuilder.appendWhereStatement(Ljava\/lang\/StringBuilder;Ljava\/util\/List;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.where != null) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r6 != com.j256.ormlite.stmt.StatementBuilder.WhereOperation.FIRST) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|r6.appendBefore(r4)\lcom.j256.ormlite.stmt.Where\<T, ID\> r0 = r3.where\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r3.addTableName == false) goto L_0x0019\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|java.lang.String r2 = getTableName()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|r2 = null\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v2 java.lang.String), (r2v3 java.lang.String) binds: [B:8:0x0019, B:7:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|r0.appendSql(r2, r4, r5)\lr6.appendAfter(r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{protected boolean com.j256.ormlite.stmt.StatementBuilder.appendWhereStatement((r3v0 'this' com.j256.ormlite.stmt.StatementBuilder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.j256.ormlite.stmt.StatementBuilder$WhereOperation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

