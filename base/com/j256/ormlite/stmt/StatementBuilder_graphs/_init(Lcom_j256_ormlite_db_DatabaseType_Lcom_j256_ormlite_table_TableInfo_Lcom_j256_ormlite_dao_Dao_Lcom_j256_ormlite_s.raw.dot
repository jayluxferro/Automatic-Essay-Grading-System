digraph "CFG forcom.j256.ormlite.stmt.StatementBuilder.\<init\>(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/table\/TableInfo;Lcom\/j256\/ormlite\/dao\/Dao;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:com.j256.ormlite.stmt.Where\<T, ID\>)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.where com.j256.ormlite.stmt.Where \l0x0006: IPUT  \l  (r2 I:com.j256.ormlite.db.DatabaseType)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0008: IPUT  \l  (r3 I:com.j256.ormlite.table.TableInfo\<T, ID\>)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.tableInfo com.j256.ormlite.table.TableInfo \l0x000a: INVOKE  (r2 I:java.lang.String) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x000e: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.tableName java.lang.String \l0x0010: IPUT  \l  (r4 I:com.j256.ormlite.dao.Dao\<T, ID\>)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.dao com.j256.ormlite.dao.Dao \l0x0012: IPUT  \l  (r5 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r1 I:com.j256.ormlite.stmt.StatementBuilder)\l com.j256.ormlite.stmt.StatementBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0014: INVOKE  (r2 I:boolean) = (r5 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) com.j256.ormlite.stmt.StatementBuilder.StatementType.isOkForStatementBuilder():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001d: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0022: CONST_STR  (r4 I:java.lang.String) =  \"Building a statement from a \" \l0x0024: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002a: CONST_STR  (r4 I:java.lang.String) =  \" statement is not allowed\" \l0x002c: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  \l  (r2 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|0x0036: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.StatementBuilder.\<init\>((r1 'this' I:com.j256.ormlite.stmt.StatementBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.dao.Dao\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.j256.ormlite.stmt.StatementBuilder$StatementType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Lcom\/j256\/ormlite\/dao\/Dao\<, TT;TID;\>;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

