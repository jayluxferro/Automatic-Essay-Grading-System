digraph "CFG forcom.j256.ormlite.stmt.StatementBuilder.appendWhereStatement(Ljava\/lang\/StringBuilder;Ljava\/util\/List;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.Where\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.where com.j256.ormlite.stmt.Where \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: SGET  (r4 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation) =  com.j256.ormlite.stmt.StatementBuilder.WhereOperation.FIRST com.j256.ormlite.stmt.StatementBuilder$WhereOperation \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN  (r1 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INVOKE  \l  (r6 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation)\l  (r4 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.StatementBuilder.WhereOperation.appendBefore(java.lang.StringBuilder):void type: VIRTUAL \l0x000e: IGET  (r0 I:com.j256.ormlite.stmt.Where\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.where com.j256.ormlite.stmt.Where \l0x0010: IGET  (r2 I:boolean) = (r3 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.addTableName boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r2 I:java.lang.String) = (r3 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.getTableName():java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.Where)\l  (r2 I:java.lang.String)\l  (r4 I:java.lang.StringBuilder)\l  (r5 I:java.util.List)\l com.j256.ormlite.stmt.Where.appendSql(java.lang.String, java.lang.StringBuilder, java.util.List):void type: VIRTUAL \l0x001d: INVOKE  \l  (r6 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation)\l  (r4 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.StatementBuilder.WhereOperation.appendAfter(java.lang.StringBuilder):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.j256.ormlite.stmt.StatementBuilder.appendWhereStatement((r3 'this' I:com.j256.ormlite.stmt.StatementBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

