digraph "CFG forcom.j256.ormlite.stmt.StatementBuilder.prepareStatement(Ljava\/lang\/Long;Z)Lcom\/j256\/ormlite\/stmt\/mapped\/MappedPreparedStmt;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r3 I:java.lang.String) = \l  (r10 I:com.j256.ormlite.stmt.StatementBuilder)\l  (r0 I:java.util.List)\l com.j256.ormlite.stmt.StatementBuilder.buildStatementString(java.util.List):java.lang.String type: VIRTUAL \l0x0009: INVOKE  (r1 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000d: NEW_ARRAY  (r1 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.stmt.ArgumentHolder[] \l0x000f: INVOKE  (r1 I:java.lang.Object[]) = (r0 I:java.util.List), (r1 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x0013: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0014: CHECK_CAST  (r6 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (com.j256.ormlite.stmt.ArgumentHolder[]) (r6 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r5 I:com.j256.ormlite.field.FieldType[]) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.getResultFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x001a: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x001e: NEW_ARRAY  (r4 I:com.j256.ormlite.field.FieldType[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x0020: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0021|0x0021: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|0x0024: AGET  (r1 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0026: INVOKE  (r1 I:com.j256.ormlite.field.FieldType) = (r1 I:com.j256.ormlite.stmt.ArgumentHolder) com.j256.ormlite.stmt.ArgumentHolder.getFieldType():com.j256.ormlite.field.FieldType type: INTERFACE \l0x002a: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x002c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: IGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0031: INVOKE  (r0 I:boolean) = (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) com.j256.ormlite.stmt.StatementBuilder.StatementType.isOkForStatementBuilder():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) =  com.j256.ormlite.stmt.mapped.MappedPreparedStmt \l0x0039: IGET  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.tableInfo com.j256.ormlite.table.TableInfo \l0x003b: IGET  (r1 I:com.j256.ormlite.db.DatabaseType) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x003d: INVOKE  (r1 I:boolean) = (r1 I:com.j256.ormlite.db.DatabaseType) com.j256.ormlite.db.DatabaseType.isLimitSqlSupported():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0044 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|0x0043: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0045: IGET  (r8 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0047: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0048: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0049: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l  (r2 I:com.j256.ormlite.table.TableInfo)\l  (r3 I:java.lang.String)\l  (r4 I:com.j256.ormlite.field.FieldType[])\l  (r5 I:com.j256.ormlite.field.FieldType[])\l  (r6 I:com.j256.ormlite.stmt.ArgumentHolder[])\l  (r7 I:java.lang.Long)\l  (r8 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r9 I:boolean)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.\<init\>(com.j256.ormlite.table.TableInfo, java.lang.String, com.j256.ormlite.field.FieldType[], com.j256.ormlite.field.FieldType[], com.j256.ormlite.stmt.ArgumentHolder[], java.lang.Long, com.j256.ormlite.stmt.StatementBuilder$StatementType, boolean):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: RETURN  \l  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt\<T, ID\>)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: NEW_INSTANCE  (r11 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x004f: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0051: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0054: CONST_STR  (r0 I:java.lang.String) =  \"Building a statement from a \" \l0x0056: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: IGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r10 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x005b: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x005e: CONST_STR  (r0 I:java.lang.String) =  \" statement is not allowed\" \l0x0060: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0063: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0067: INVOKE  \l  (r11 I:java.lang.IllegalStateException)\l  (r12 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x006a|0x006a: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected com.j256.ormlite.stmt.mapped.MappedPreparedStmt\<T, ID\> com.j256.ormlite.stmt.StatementBuilder.prepareStatement((r10 'this' I:com.j256.ormlite.stmt.StatementBuilder A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Long;, Z), Lcom\/j256\/ormlite\/stmt\/mapped\/MappedPreparedStmt\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

