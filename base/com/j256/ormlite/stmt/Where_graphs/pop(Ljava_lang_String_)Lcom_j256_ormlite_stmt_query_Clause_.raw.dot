digraph "CFG forcom.j256.ormlite.stmt.Where.pop(Ljava\/lang\/String;)Lcom\/j256\/ormlite\/stmt\/query\/Clause;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r4 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0006: IGET  (r0 I:int) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000a: IPUT  (r0 I:int), (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x000c: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000e: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0010: IGET  (r1 I:int) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  (r4 I:com.j256.ormlite.stmt.query.Clause) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"Expecting there to be a clause already defined for '\" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: CONST_STR  (r4 I:java.lang.String) =  \"' operation\" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.query.Clause com.j256.ormlite.stmt.Where.pop((r3 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

