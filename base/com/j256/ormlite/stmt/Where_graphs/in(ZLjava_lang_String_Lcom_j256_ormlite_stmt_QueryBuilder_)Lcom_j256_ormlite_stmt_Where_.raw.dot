digraph "CFG forcom.j256.ormlite.stmt.Where.in(ZLjava\/lang\/String;Lcom\/j256\/ormlite\/stmt\/QueryBuilder;)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.getSelectColumnCount():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r4 I:int) = (r6 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.getSelectColumnCount():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x000f: CONST_STR  (r5 I:java.lang.String) =  \"Inner query must have only 1 select column specified instead of *\" \l0x0011: INVOKE  (r4 I:java.sql.SQLException), (r5 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0017: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001c: CONST_STR  (r0 I:java.lang.String) =  \"Inner query must have only 1 select column specified instead of \" \l0x001e: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r0 I:int) = (r6 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.getSelectColumnCount():int type: VIRTUAL \l0x0025: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0028: CONST_STR  (r0 I:java.lang.String) =  \": \" \l0x002a: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r6 I:java.lang.String) = (r6 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.getSelectColumnsAsString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r4 I:java.sql.SQLException), (r5 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|0x003b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: INVOKE  (r6 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.enableInnerQuery():void type: VIRTUAL \l0x003f: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.query.InSubQuery) =  com.j256.ormlite.stmt.query.InSubQuery \l0x0041: INVOKE  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.Where), (r5 I:java.lang.String) com.j256.ormlite.stmt.Where.findColumnFieldType(java.lang.String):com.j256.ormlite.field.FieldType type: DIRECT \l0x0045: NEW_INSTANCE  (r2 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper) =  com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper \l0x0047: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)\l  (r6 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.InternalQueryBuilderWrapper.\<init\>(com.j256.ormlite.stmt.QueryBuilder):void type: DIRECT \l0x004a: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.InSubQuery)\l  (r5 I:java.lang.String)\l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r2 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)\l  (r4 I:boolean)\l com.j256.ormlite.stmt.query.InSubQuery.\<init\>(java.lang.String, com.j256.ormlite.field.FieldType, com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper, boolean):void type: DIRECT \l0x004d: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.Where)\l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l com.j256.ormlite.stmt.Where.addClause(com.j256.ormlite.stmt.query.Clause):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|0x0050: RETURN  (r3 I:com.j256.ormlite.stmt.Where\<T, ID\>) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.in((r3 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.stmt.QueryBuilder\<?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(Z, Ljava\/lang\/String;, Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, **\>;), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

