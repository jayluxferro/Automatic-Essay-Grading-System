digraph "CFG forcom.j256.ormlite.stmt.Where.in(ZLjava\/lang\/String;Lcom\/j256\/ormlite\/stmt\/QueryBuilder;)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r6.getSelectColumnCount() == 1) goto L_0x003c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r6.getSelectColumnCount() != 0) goto L_0x0015\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d}"];
Node_5 [shape=record,label="{5\:\ 0x0014|throw new java.sql.SQLException(\"Inner query must have only 1 select column specified instead of *\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Inner query must have only 1 select column specified instead of \")\lr5.append(r6.getSelectColumnCount())\lr5.append(\": \")\lr5.append(r6.getSelectColumnsAsString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|throw new java.sql.SQLException(r5.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|r6.enableInnerQuery()\laddClause(new com.j256.ormlite.stmt.query.InSubQuery(r5, findColumnFieldType(r5), new com.j256.ormlite.stmt.QueryBuilder.InternalQueryBuilderWrapper(r6), r4))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.in((r3v0 'this' com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 com.j256.ormlite.stmt.QueryBuilder\<?, ?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(Z, Ljava\/lang\/String;, Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, **\>;), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

