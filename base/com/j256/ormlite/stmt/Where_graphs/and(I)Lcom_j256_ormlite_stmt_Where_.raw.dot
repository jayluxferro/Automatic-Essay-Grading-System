digraph "CFG forcom.j256.ormlite.stmt.Where.and(I)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_ARRAY  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.stmt.query.Clause[] \l0x0004: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST_STR  (r1 I:java.lang.String) =  \"AND\" \l0x000a: INVOKE  (r1 I:com.j256.ormlite.stmt.query.Clause) = (r2 I:com.j256.ormlite.stmt.Where), (r1 I:java.lang.String) com.j256.ormlite.stmt.Where.pop(java.lang.String):com.j256.ormlite.stmt.query.Clause type: DIRECT \l0x000e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0010: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: NEW_INSTANCE  (r3 I:com.j256.ormlite.stmt.query.ManyClause) =  com.j256.ormlite.stmt.query.ManyClause \l0x0015: CONST_STR  (r1 I:java.lang.String) =  \"AND\" \l0x0017: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.query.ManyClause)\l  (r0 I:com.j256.ormlite.stmt.query.Clause[])\l  (r1 I:java.lang.String)\l com.j256.ormlite.stmt.query.ManyClause.\<init\>(com.j256.ormlite.stmt.query.Clause[], java.lang.String):void type: DIRECT \l0x001a: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.Where)\l  (r3 I:com.j256.ormlite.stmt.query.Clause)\l com.j256.ormlite.stmt.Where.addClause(com.j256.ormlite.stmt.query.Clause):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: RETURN  (r2 I:com.j256.ormlite.stmt.Where\<T, ID\>) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0020: CONST_STR  (r0 I:java.lang.String) =  \"Must have at least one clause in and(numClauses)\" \l0x0022: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.and((r2 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_2;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

