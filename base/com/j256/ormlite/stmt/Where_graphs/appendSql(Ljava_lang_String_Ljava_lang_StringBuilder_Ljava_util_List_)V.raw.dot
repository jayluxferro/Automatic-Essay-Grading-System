digraph "CFG forcom.j256.ormlite.stmt.Where.appendSql(Ljava\/lang\/String;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r2 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:com.j256.ormlite.stmt.query.NeedsFutureClause) = (r2 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.needsFuture com.j256.ormlite.stmt.query.NeedsFutureClause \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:com.j256.ormlite.stmt.query.Clause) = (r2 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.peek():com.j256.ormlite.stmt.query.Clause type: DIRECT \l0x0011: IGET  (r1 I:com.j256.ormlite.db.DatabaseType) = (r2 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.databaseType com.j256.ormlite.db.DatabaseType \l0x0013: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.StringBuilder)\l  (r5 I:java.util.List)\l com.j256.ormlite.stmt.query.Clause.appendSql(com.j256.ormlite.db.DatabaseType, java.lang.String, java.lang.StringBuilder, java.util.List):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0019: CONST_STR  (r4 I:java.lang.String) =  \"The SQL statement has not been finished since there are previous operations still waiting for clauses.\" \l0x001b: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"Both the \"left\-hand\" and \"right\-hand\" clauses have been defined.  Did you miss an AND or OR?\" \l0x0023: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0029: CONST_STR  (r4 I:java.lang.String) =  \"No where clauses defined.  Did you miss a where operation?\" \l0x002b: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void com.j256.ormlite.stmt.Where.appendSql((r2 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

