digraph "CFG forcom.j256.ormlite.stmt.Where.push(Lcom\/j256\/ormlite\/stmt\/query\/Clause;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0002: IGET  (r1 I:com.j256.ormlite.stmt.query.Clause[]) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0004: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0009: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x000b: NEW_ARRAY  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.stmt.query.Clause[] \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r2 I:int) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r2 I:com.j256.ormlite.stmt.query.Clause[]) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0014: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0016: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x0018: IGET  (r2 I:com.j256.ormlite.stmt.query.Clause[]) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x001a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x001d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IPUT  \l  (r0 I:com.j256.ormlite.stmt.query.Clause[])\l  (r4 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0024: IGET  (r1 I:int) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x0026: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0028: IPUT  (r2 I:int), (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l0x002a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.Where.push((r4 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r5 I:com.j256.ormlite.stmt.query.Clause A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

