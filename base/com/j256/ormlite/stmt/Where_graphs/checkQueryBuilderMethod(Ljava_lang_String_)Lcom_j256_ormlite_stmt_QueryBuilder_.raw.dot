digraph "CFG forcom.j256.ormlite.stmt.Where.checkQueryBuilderMethod(Ljava\/lang\/String;)Lcom\/j256\/ormlite\/stmt\/QueryBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.statementBuilder com.j256.ormlite.stmt.StatementBuilder \l0x0002: INSTANCE_OF  (r0 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.QueryBuilder \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r4 I:com.j256.ormlite.stmt.StatementBuilder\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.statementBuilder com.j256.ormlite.stmt.StatementBuilder \l0x0008: CHECK_CAST  (r4 I:com.j256.ormlite.stmt.QueryBuilder) = (com.j256.ormlite.stmt.QueryBuilder) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r4 I:com.j256.ormlite.stmt.QueryBuilder\<T, ID\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.sql.SQLException) =  java.sql.SQLException \l0x000d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000f: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"Cannot call \" \l0x0014: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0017: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: CONST_STR  (r4 I:java.lang.String) =  \" on a statement of type \" \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001f: IGET  (r4 I:com.j256.ormlite.stmt.StatementBuilder\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.statementBuilder com.j256.ormlite.stmt.StatementBuilder \l0x0021: INVOKE  (r4 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r4 I:com.j256.ormlite.stmt.StatementBuilder) com.j256.ormlite.stmt.StatementBuilder.getType():com.j256.ormlite.stmt.StatementBuilder$StatementType type: VIRTUAL \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0028: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002c: INVOKE  (r0 I:java.sql.SQLException), (r4 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.QueryBuilder\<T, ID\> com.j256.ormlite.stmt.Where.checkQueryBuilderMethod((r3 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

