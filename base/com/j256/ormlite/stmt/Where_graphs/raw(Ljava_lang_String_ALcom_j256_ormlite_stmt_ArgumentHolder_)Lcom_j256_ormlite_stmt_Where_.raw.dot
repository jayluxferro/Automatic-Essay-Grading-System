digraph "CFG forcom.j256.ormlite.stmt.Where.raw(Ljava\/lang\/String;[Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: AGET  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0006: INVOKE  (r3 I:java.lang.String) = (r2 I:com.j256.ormlite.stmt.ArgumentHolder) com.j256.ormlite.stmt.ArgumentHolder.getColumnName():java.lang.String type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r2 I:com.j256.ormlite.field.SqlType) = (r2 I:com.j256.ormlite.stmt.ArgumentHolder) com.j256.ormlite.stmt.ArgumentHolder.getSqlType():com.j256.ormlite.field.SqlType type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0015: CONST_STR  (r6 I:java.lang.String) =  \"Either the column name or SqlType must be set on each argument\" \l0x0017: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  (r3 I:com.j256.ormlite.field.FieldType) = (r4 I:com.j256.ormlite.stmt.Where), (r3 I:java.lang.String) com.j256.ormlite.stmt.Where.findColumnFieldType(java.lang.String):com.j256.ormlite.field.FieldType type: DIRECT \l0x001f: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.ArgumentHolder)\l  (r3 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.stmt.ArgumentHolder.setMetaInfo(com.j256.ormlite.field.FieldType):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.query.Raw) =  com.j256.ormlite.stmt.query.Raw \l0x0027: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.Raw)\l  (r5 I:java.lang.String)\l  (r6 I:com.j256.ormlite.stmt.ArgumentHolder[])\l com.j256.ormlite.stmt.query.Raw.\<init\>(java.lang.String, com.j256.ormlite.stmt.ArgumentHolder[]):void type: DIRECT \l0x002a: INVOKE  \l  (r4 I:com.j256.ormlite.stmt.Where)\l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l com.j256.ormlite.stmt.Where.addClause(com.j256.ormlite.stmt.query.Clause):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: RETURN  (r4 I:com.j256.ormlite.stmt.Where\<T, ID\>) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.raw((r4 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.stmt.ArgumentHolder[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, [, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, ), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_10[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12;
}

