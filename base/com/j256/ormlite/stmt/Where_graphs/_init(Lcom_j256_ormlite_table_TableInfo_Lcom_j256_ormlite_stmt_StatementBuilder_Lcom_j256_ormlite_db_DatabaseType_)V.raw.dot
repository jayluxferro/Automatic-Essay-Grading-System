digraph "CFG forcom.j256.ormlite.stmt.Where.\<init\>(Lcom\/j256\/ormlite\/table\/TableInfo;Lcom\/j256\/ormlite\/stmt\/StatementBuilder;Lcom\/j256\/ormlite\/db\/DatabaseType;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0004: NEW_ARRAY  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.stmt.query.Clause[] \l0x0006: IPUT  \l  (r0 I:com.j256.ormlite.stmt.query.Clause[])\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: IPUT  \l  (r0 I:com.j256.ormlite.stmt.query.NeedsFutureClause)\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.needsFuture com.j256.ormlite.stmt.query.NeedsFutureClause \l0x000b: IPUT  \l  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>)\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.tableInfo com.j256.ormlite.table.TableInfo \l0x000d: IPUT  \l  (r3 I:com.j256.ormlite.stmt.StatementBuilder\<T, ID\>)\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.statementBuilder com.j256.ormlite.stmt.StatementBuilder \l0x000f: INVOKE  (r2 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0013: IPUT  \l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.idFieldType com.j256.ormlite.field.FieldType \l0x0015: IGET  (r2 I:com.j256.ormlite.field.FieldType) = (r1 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.idFieldType com.j256.ormlite.field.FieldType \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: IPUT  (r0 I:java.lang.String), (r1 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.idColumnName java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IGET  (r2 I:com.j256.ormlite.field.FieldType) = (r1 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.idFieldType com.j256.ormlite.field.FieldType \l0x001e: INVOKE  (r2 I:java.lang.String) = (r2 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getColumnName():java.lang.String type: VIRTUAL \l0x0022: IPUT  (r2 I:java.lang.String), (r1 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.idColumnName java.lang.String \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IPUT  \l  (r4 I:com.j256.ormlite.db.DatabaseType)\l  (r1 I:com.j256.ormlite.stmt.Where)\l com.j256.ormlite.stmt.Where.databaseType com.j256.ormlite.db.DatabaseType \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: RETURN   \l}"];
MethodNode[shape=record,label="{void com.j256.ormlite.stmt.Where.\<init\>((r1 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.stmt.StatementBuilder\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder\<, TT;TID;\>;, Lcom\/j256\/ormlite\/db\/DatabaseType;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

