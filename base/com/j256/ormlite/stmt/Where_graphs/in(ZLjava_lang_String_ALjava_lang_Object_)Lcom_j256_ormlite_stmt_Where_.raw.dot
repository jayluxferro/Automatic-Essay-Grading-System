digraph "CFG forcom.j256.ormlite.stmt.Where.in(ZLjava\/lang\/String;[Ljava\/lang\/Object;)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0086 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: AGET  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0007: INVOKE  (r1 I:java.lang.Class) = (r1 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x000b: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Class) java.lang.Class.isArray():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0013: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r0 I:java.lang.String) =  \"Object argument to \" \l0x001a: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: CONST_STR  (r3 I:java.lang.String) =  \"IN\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: CONST_STR  (r3 I:java.lang.String) =  \"notId\" \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST_STR  (r3 I:java.lang.String) =  \" seems to be an array within an array\" \l0x0029: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: AGET  (r1 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0036: INSTANCE_OF  (r1 I:boolean) = (r1 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.Where \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005d \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003c: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003e: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0041: CONST_STR  (r0 I:java.lang.String) =  \"Object argument to \" \l0x0043: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: CONST_STR  (r3 I:java.lang.String) =  \"IN\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: CONST_STR  (r3 I:java.lang.String) =  \"notId\" \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: CONST_STR  (r3 I:java.lang.String) =  \" seems to be a Where object, did you mean the QueryBuilder?\" \l0x0052: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0059: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x005c|0x005c: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005d|0x005d: AGET  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x005f: INSTANCE_OF  (r0 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.PreparedStmt \l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0086 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|0x0063: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0065: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0067: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006a: CONST_STR  (r0 I:java.lang.String) =  \"Object argument to \" \l0x006c: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|0x006f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0074 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|0x0071: CONST_STR  (r3 I:java.lang.String) =  \"IN\" \l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|0x0074: CONST_STR  (r3 I:java.lang.String) =  \"notId\" \l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|0x0076: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0079: CONST_STR  (r3 I:java.lang.String) =  \" seems to be a prepared statement, did you mean the QueryBuilder?\" \l0x007b: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007e: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0082: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|0x0085: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|0x0086: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.query.In) =  com.j256.ormlite.stmt.query.In \l0x0088: INVOKE  (r1 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.stmt.Where), (r4 I:java.lang.String) com.j256.ormlite.stmt.Where.findColumnFieldType(java.lang.String):com.j256.ormlite.field.FieldType type: DIRECT \l0x008c: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.In)\l  (r4 I:java.lang.String)\l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r5 I:java.lang.Object[])\l  (r3 I:boolean)\l com.j256.ormlite.stmt.query.In.\<init\>(java.lang.String, com.j256.ormlite.field.FieldType, java.lang.Object[], boolean):void type: DIRECT \l0x008f: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.Where)\l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l com.j256.ormlite.stmt.Where.addClause(com.j256.ormlite.stmt.query.Clause):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x0092|0x0092: RETURN  (r2 I:com.j256.ormlite.stmt.Where\<T, ID\>) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.in((r2 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(Z, Ljava\/lang\/String;, [, Ljava\/lang\/Object;, ), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

