digraph "CFG forcom.j256.ormlite.stmt.Where.in(ZLjava\/lang\/String;[Ljava\/lang\/Object;)Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.length != 1) goto L_0x0086\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r5[0].getClass().isArray() == false) goto L_0x0034\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Object argument to \")\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|if (r3 == false) goto L_0x0022\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|java.lang.String r3 = \"IN\"\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|java.lang.String r3 = \"notId\"\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|PHI: r3 \l  PHI: (r3v11 java.lang.String) = (r3v14 java.lang.String), (r3v15 java.lang.String) binds: [B:7:0x0022, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|r5.append(r3)\lr5.append(\" seems to be an array within an array\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034}"];
Node_11 [shape=record,label="{11\:\ 0x0038|if ((r5[0] instanceof com.j256.ormlite.stmt.Where) == false) goto L_0x005d\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Object argument to \")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|if (r3 == false) goto L_0x004b\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|java.lang.String r3 = \"IN\"\l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|java.lang.String r3 = \"notId\"\l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|PHI: r3 \l  PHI: (r3v6 java.lang.String) = (r3v9 java.lang.String), (r3v10 java.lang.String) binds: [B:15:0x004b, B:14:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|r5.append(r3)\lr5.append(\" seems to be a Where object, did you mean the QueryBuilder?\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x005c|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x005d}"];
Node_19 [shape=record,label="{19\:\ 0x0061|if ((r5[0] instanceof com.j256.ormlite.stmt.PreparedStmt) == false) goto L_0x0086\l}"];
Node_20 [shape=record,label="{20\:\ 0x0063|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Object argument to \")\l}"];
Node_21 [shape=record,label="{21\:\ 0x006f|if (r3 == false) goto L_0x0074\l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|java.lang.String r3 = \"IN\"\l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|java.lang.String r3 = \"notId\"\l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|PHI: r3 \l  PHI: (r3v1 java.lang.String) = (r3v4 java.lang.String), (r3v5 java.lang.String) binds: [B:23:0x0074, B:22:0x0071] A[DONT_GENERATE, DONT_INLINE]\l|r5.append(r3)\lr5.append(\" seems to be a prepared statement, did you mean the QueryBuilder?\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|throw new java.lang.IllegalArgumentException(r5.toString())\l}"];
Node_26 [shape=record,label="{26\:\ 0x0086|addClause(new com.j256.ormlite.stmt.query.C0960In(r4, findColumnFieldType(r4), r5, r3))\l}"];
Node_27 [shape=record,label="{27\:\ 0x0092|RETURN\l|return r2\l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.in((r2v0 'this' com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(Z, Ljava\/lang\/String;, [, Ljava\/lang\/Object;, ), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

