digraph "CFG forcom.j256.ormlite.stmt.Where.reset()Lcom\/j256\/ormlite\/stmt\/Where;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r2 I:int) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r2 I:com.j256.ormlite.stmt.query.Clause[]) = (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStack com.j256.ormlite.stmt.query.Clause[] \l0x0008: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x000b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IPUT  (r0 I:int), (r4 I:com.j256.ormlite.stmt.Where) com.j256.ormlite.stmt.Where.clauseStackLevel int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: RETURN  (r4 I:com.j256.ormlite.stmt.Where\<T, ID\>) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.Where\<T, ID\> com.j256.ormlite.stmt.Where.reset((r4 'this' I:com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lcom\/j256\/ormlite\/stmt\/Where\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

