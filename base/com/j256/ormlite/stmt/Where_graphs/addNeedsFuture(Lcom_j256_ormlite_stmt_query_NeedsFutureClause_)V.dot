digraph "CFG forcom.j256.ormlite.stmt.Where.addNeedsFuture(Lcom\/j256\/ormlite\/stmt\/query\/NeedsFutureClause;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.needsFuture != null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r3.needsFuture = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r3.needsFuture)\lr1.append(\" is already waiting for a future clause, can't add: \")\lr1.append(r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|throw new java.lang.IllegalStateException(r1.toString())\l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.Where.addNeedsFuture((r3v0 'this' com.j256.ormlite.stmt.Where A[IMMUTABLE_TYPE, THIS]), (r4v0 com.j256.ormlite.stmt.query.NeedsFutureClause A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

