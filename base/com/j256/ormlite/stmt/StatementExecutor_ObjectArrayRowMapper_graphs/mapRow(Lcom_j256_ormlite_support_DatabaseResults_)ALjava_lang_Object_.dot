digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.ObjectArrayRowMapper.mapRow(Lcom\/j256\/ormlite\/support\/DatabaseResults;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r6.getColumnCount()\ljava.lang.Object[] r1 = new java.lang.Object[r0]\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:6:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:6:0x0015\l|if (r2 \>= r0) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r2 \< r5.columnTypes.length) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|com.j256.ormlite.field.DataType r3 = com.j256.ormlite.field.DataType.STRING\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|r3 = r5.columnTypes[r2]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|LOOP_END\lPHI: r3 \l  PHI: (r3v2 com.j256.ormlite.field.DataType) = (r3v6 com.j256.ormlite.field.DataType), (r3v7 com.j256.ormlite.field.DataType) binds: [B:9:0x0015, B:10:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0007\-\>B:6:0x0015\l|r1[r2] = r3.getDataPersister().resultToJava((com.j256.ormlite.field.FieldType) null, r6, r2)\lint r2 = r2 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|RETURN\l|return r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.Object[] com.j256.ormlite.stmt.StatementExecutor.ObjectArrayRowMapper.mapRow((r5v0 'this' com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper A[IMMUTABLE_TYPE, THIS]), (r6v0 com.j256.ormlite.support.DatabaseResults A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

