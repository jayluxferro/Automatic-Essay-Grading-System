digraph "CFG forcom.j256.ormlite.stmt.UpdateBuilder.appendStatementStart(Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r5.updateClauseList == null) goto L_0x0045\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r5.updateClauseList.isEmpty() != false) goto L_0x0045\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|r6.append(\"UPDATE \")\lr5.databaseType.appendEscapedEntityName(r6, r5.tableInfo.getTableName())\lr6.append(\" SET \")\lr0 = true\ljava.util.Iterator r1 = r5.updateClauseList.iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|LOOP_START\lPHI: r0 \l  PHI: (r0v7 boolean) = (r0v6 boolean), (r0v8 boolean) binds: [B:4:0x000c, B:11:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0028\-\>B:11:0x003d\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|if (r1.hasNext() == false) goto L_0x0044\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|com.j256.ormlite.stmt.query.Clause r2 = r1.next()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|if (r0 == false) goto L_0x0038\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|r0 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|r6.append(',')\l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|LOOP_END\lPHI: r0 \l  PHI: (r0v8 boolean) = (r0v7 boolean), (r0v9 boolean) binds: [B:16:0x003d, B:17:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0028\-\>B:11:0x003d\l|r2.appendSql(r5.databaseType, (java.lang.String) null, r6, r7)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045}"];
Node_14 [shape=record,label="{14\:\ 0x004c|throw new java.lang.IllegalArgumentException(\"UPDATE statements must have at least one SET column\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.UpdateBuilder.appendStatementStart((r5v0 'this' com.j256.ormlite.stmt.UpdateBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_17;
Node_10 -> Node_16;
Node_11 -> Node_5;
Node_13 -> Node_14;
Node_15 -> Node_12;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

