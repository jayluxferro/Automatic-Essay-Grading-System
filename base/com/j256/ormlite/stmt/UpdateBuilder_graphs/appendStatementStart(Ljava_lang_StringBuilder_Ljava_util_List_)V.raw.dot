digraph "CFG forcom.j256.ormlite.stmt.UpdateBuilder.appendStatementStart(Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.Clause\>) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.updateClauseList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.Clause\>) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.updateClauseList java.util.List \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0045 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST_STR  (r0 I:java.lang.String) =  \"UPDATE \" \l0x000e: INVOKE  (r6 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0011: IGET  (r0 I:com.j256.ormlite.db.DatabaseType) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0013: IGET  (r1 I:com.j256.ormlite.table.TableInfo) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.tableInfo com.j256.ormlite.table.TableInfo \l0x0015: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0019: INVOKE  \l  (r0 I:com.j256.ormlite.db.DatabaseType)\l  (r6 I:java.lang.StringBuilder)\l  (r1 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x001c: CONST_STR  (r0 I:java.lang.String) =  \" SET \" \l0x001e: INVOKE  (r6 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0022: IGET  (r1 I:java.util.List\<com.j256.ormlite.stmt.query.Clause\>) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.updateClauseList java.util.List \l0x0024: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r2 I:com.j256.ormlite.stmt.query.Clause) = (com.j256.ormlite.stmt.query.Clause) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: CONST  (r3 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x003a: INVOKE  (r6 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: IGET  (r3 I:com.j256.ormlite.db.DatabaseType) = (r5 I:com.j256.ormlite.stmt.UpdateBuilder) com.j256.ormlite.stmt.UpdateBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x003f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0040: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.query.Clause)\l  (r3 I:com.j256.ormlite.db.DatabaseType)\l  (r4 I:java.lang.String)\l  (r6 I:java.lang.StringBuilder)\l  (r7 I:java.util.List)\l com.j256.ormlite.stmt.query.Clause.appendSql(com.j256.ormlite.db.DatabaseType, java.lang.String, java.lang.StringBuilder, java.util.List):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0047: CONST_STR  (r7 I:java.lang.String) =  \"UPDATE statements must have at least one SET column\" \l0x0049: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.UpdateBuilder.appendStatementStart((r5 'this' I:com.j256.ormlite.stmt.UpdateBuilder A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_5;
Node_13 -> Node_14;
}

