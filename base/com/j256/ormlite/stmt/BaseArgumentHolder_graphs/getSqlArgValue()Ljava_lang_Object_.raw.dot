digraph "CFG forcom.j256.ormlite.stmt.BaseArgumentHolder.getSqlArgValue()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.isValueSet():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.Object) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.getValue():java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r0 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.fieldType com.j256.ormlite.field.FieldType \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.Object) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.fieldType com.j256.ormlite.field.FieldType \l0x0015: INVOKE  (r1 I:boolean) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeign():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.fieldType com.j256.ormlite.field.FieldType \l0x001d: INVOKE  (r1 I:java.lang.Class) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getType():java.lang.Class type: VIRTUAL \l0x0021: INVOKE  (r2 I:java.lang.Class) = (r0 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.fieldType com.j256.ormlite.field.FieldType \l0x0029: INVOKE  (r1 I:com.j256.ormlite.field.FieldType) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getForeignRefField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x002d: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r0 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: RETURN  (r0 I:java.lang.Object) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.fieldType com.j256.ormlite.field.FieldType \l0x0034: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.field.FieldType)\l  (r0 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.convertJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: RETURN  (r0 I:java.lang.Object) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: NEW_INSTANCE  (r0 I:java.sql.SQLException) =  java.sql.SQLException \l0x003b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003d: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0040: CONST_STR  (r2 I:java.lang.String) =  \"Column value has not been set for \" \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: IGET  (r2 I:java.lang.String) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.columnName java.lang.String \l0x0047: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004e: INVOKE  (r0 I:java.sql.SQLException), (r1 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.stmt.BaseArgumentHolder.getSqlArgValue((r3 'this' I:com.j256.ormlite.stmt.BaseArgumentHolder A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

