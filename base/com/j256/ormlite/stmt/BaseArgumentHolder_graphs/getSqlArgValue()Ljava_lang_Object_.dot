digraph "CFG forcom.j256.ormlite.stmt.BaseArgumentHolder.getSqlArgValue()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (isValueSet() == false) goto L_0x0039\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.lang.Object r0 = getValue()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r0 != null) goto L_0x000e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return null\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0010|if (r3.fieldType != null) goto L_0x0013\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013}"];
Node_9 [shape=record,label="{9\:\ 0x0019|if (r3.fieldType.isForeign() == false) goto L_0x0032\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b}"];
Node_11 [shape=record,label="{11\:\ 0x0025|if (r3.fieldType.getType() != r0.getClass()) goto L_0x0032\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027}"];
Node_13 [shape=record,label="{13\:\ 0x0031|RETURN\l|return r3.fieldType.getForeignRefField().extractJavaFieldValue(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032}"];
Node_15 [shape=record,label="{15\:\ 0x0038|RETURN\l|return r3.fieldType.convertJavaFieldToSqlArgValue(r0)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Column value has not been set for \")\lr1.append(r3.columnName)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|throw new java.sql.SQLException(r1.toString())\l}"];
MethodNode[shape=record,label="{public java.lang.Object com.j256.ormlite.stmt.BaseArgumentHolder.getSqlArgValue((r3v0 'this' com.j256.ormlite.stmt.BaseArgumentHolder A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

