digraph "CFG forcom.j256.ormlite.stmt.BaseArgumentHolder.toString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.isValueSet():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"[unset]\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lSplitter:B:4:0x0009\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0009\l|0x0009: INVOKE  (r0 I:java.lang.Object) = (r3 I:com.j256.ormlite.stmt.BaseArgumentHolder) com.j256.ormlite.stmt.BaseArgumentHolder.getSqlArgValue():java.lang.Object type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0017 \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 A[Catch:\{ SQLException \-\> 0x0017 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST_STR  (r0 I:java.lang.String) =  \"[null]\" A[Catch:\{ SQLException \-\> 0x0017 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: RETURN  (r0 I:java.lang.String) A[Catch:\{ SQLException \-\> 0x0017 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0017 \}]\l0x0015: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: RETURN  (r0 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|ExcHandler: SQLException null\lSplitter:B:4:0x0009\l|0x0017: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"[could not get value: \" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0025: CONST_STR  (r0 I:java.lang.String) =  \"]\" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.j256.ormlite.stmt.BaseArgumentHolder.toString((r3 'this' I:com.j256.ormlite.stmt.BaseArgumentHolder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

