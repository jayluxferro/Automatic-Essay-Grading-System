digraph "CFG forcom.j256.ormlite.stmt.RawRowMapperImpl.mapRow([Ljava\/lang\/String;[Ljava\/lang\/String;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.RawRowMapperImpl) com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.createObject():java.lang.Object type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: ARRAY_LENGTH  (r3 I:int) = (r7 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: ARRAY_LENGTH  (r3 I:int) = (r8 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r3 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.RawRowMapperImpl) com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo com.j256.ormlite.table.TableInfo \l0x0011: AGET  (r4 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0013: INVOKE  (r3 I:com.j256.ormlite.field.FieldType) = \l  (r3 I:com.j256.ormlite.table.TableInfo)\l  (r4 I:java.lang.String)\l com.j256.ormlite.table.TableInfo.getFieldTypeByColumnName(java.lang.String):com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0017: AGET  (r4 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0019: INVOKE  (r4 I:java.lang.Object) = \l  (r3 I:com.j256.ormlite.field.FieldType)\l  (r4 I:java.lang.String)\l  (r2 I:int)\l com.j256.ormlite.field.FieldType.convertStringToJavaField(java.lang.String, int):java.lang.Object type: VIRTUAL \l0x001d: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: INVOKE  \l  (r3 I:com.j256.ormlite.field.FieldType)\l  (r0 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l  (r1 I:boolean)\l  (r5 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.stmt.RawRowMapperImpl.mapRow((r6 'this' I:com.j256.ormlite.stmt.RawRowMapperImpl A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([, Ljava\/lang\/String;, [, Ljava\/lang\/String;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_1;
}

