digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.doCallBatchTasks(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/util\/concurrent\/Callable;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0006: INVOKE  (r0 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadWriteConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|SYNTHETIC\lSplitter:B:1:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000b\l|0x000b: IGET  (r2 I:java.lang.ThreadLocal\<java.lang.Boolean\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.localIsInBatchMode java.lang.ThreadLocal A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x000d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x003a \}]\l0x000e: INVOKE  (r3 I:java.lang.Boolean) = (r3 I:boolean) java.lang.Boolean.valueOf(boolean):java.lang.Boolean type: STATIC A[Catch:\{ all \-\> 0x003a \}]\l0x0012: INVOKE  (r2 I:java.lang.ThreadLocal), (r3 I:java.lang.Object) java.lang.ThreadLocal.set(java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x003a \}]\l0x0015: INVOKE  (r2 I:boolean) = \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.saveSpecialConnection(com.j256.ormlite.support.DatabaseConnection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x003a \}]\l0x0018: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|SYNTHETIC\lSplitter:B:3:0x0019\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0019\l|0x0019: INVOKE  (r6 I:java.lang.Object) = \l  (r4 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:boolean)\l  (r6 I:java.util.concurrent.Callable)\l com.j256.ormlite.stmt.StatementExecutor.doCallBatchTasks(com.j256.ormlite.support.DatabaseConnection, boolean, java.util.concurrent.Callable):java.lang.Object type: DIRECT A[Catch:\{ all \-\> 0x0038 \}, TRY_ENTER]\l0x001c: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: INVOKE  \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: INVOKE  \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l0x0025: IGET  (r5 I:java.lang.ThreadLocal\<java.lang.Boolean\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.localIsInBatchMode java.lang.ThreadLocal \l0x0027: INVOKE  (r0 I:java.lang.Boolean) = (r1 I:boolean) java.lang.Boolean.valueOf(boolean):java.lang.Boolean type: STATIC \l0x002b: INVOKE  (r5 I:java.lang.ThreadLocal), (r0 I:java.lang.Object) java.lang.ThreadLocal.set(java.lang.Object):void type: VIRTUAL \l0x002e: IGET  (r5 I:com.j256.ormlite.dao.Dao\<T, ID\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.dao com.j256.ormlite.dao.Dao \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0037 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IGET  (r5 I:com.j256.ormlite.dao.Dao\<T, ID\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.dao com.j256.ormlite.dao.Dao \l0x0034: INVOKE  (r5 I:com.j256.ormlite.dao.Dao) com.j256.ormlite.dao.Dao.notifyChanges():void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: RETURN  (r6 I:CT) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|ExcHandler: all null\lSplitter:B:3:0x0019\l|0x0038: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|ExcHandler: all null\lSplitter:B:1:0x000b\l|0x003a: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: INVOKE  \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: INVOKE  \l  (r5 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l0x0044: IGET  (r5 I:java.lang.ThreadLocal\<java.lang.Boolean\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.localIsInBatchMode java.lang.ThreadLocal \l0x0046: INVOKE  (r0 I:java.lang.Boolean) = (r1 I:boolean) java.lang.Boolean.valueOf(boolean):java.lang.Boolean type: STATIC \l0x004a: INVOKE  (r5 I:java.lang.ThreadLocal), (r0 I:java.lang.Object) java.lang.ThreadLocal.set(java.lang.Object):void type: VIRTUAL \l0x004d: IGET  (r5 I:com.j256.ormlite.dao.Dao\<T, ID\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.dao com.j256.ormlite.dao.Dao \l}"];
Node_18 [shape=record,label="{18\:\ 0x004f|0x004f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0056 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: IGET  (r5 I:com.j256.ormlite.dao.Dao\<T, ID\>) = (r4 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.dao com.j256.ormlite.dao.Dao \l0x0053: INVOKE  (r5 I:com.j256.ormlite.dao.Dao) com.j256.ormlite.dao.Dao.notifyChanges():void type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private CT com.j256.ormlite.stmt.StatementExecutor.doCallBatchTasks((r4 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r5 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.concurrent.Callable\<CT\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<CT:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/util\/concurrent\/Callable\<, TCT;\>;)TCT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
}

