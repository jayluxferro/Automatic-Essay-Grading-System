digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.query(Lcom\/j256\/ormlite\/support\/ConnectionSource;Lcom\/j256\/ormlite\/stmt\/PreparedStmt;Lcom\/j256\/ormlite\/dao\/ObjectCache;)Ljava\/util\/List;" {
subgraph cluster_Region_1005851642 {
label = "R(2:0|(4:2|(1:5)|6|8)) | DECL_VAR: java.lang.String null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|com.j256.ormlite.stmt.SelectIterator com.j256.ormlite.stmt.SelectIterator\<T, ID\> r7 = buildIterator((com.j256.ormlite.dao.BaseDaoImpl) null, r7, r8, r9, \-1)\l}"];
subgraph cluster_TryCatchRegion_876082784 {
label = "Try: R(4:2|(1:5)|6|8) finally: R(3:9|10|11)";
node [shape=record,color=blue];
subgraph cluster_Region_879442544 {
label = "R(4:2|(1:5)|6|8)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0036 \}\lSplitter:B:1:0x000a\l|java.util.ArrayList java.util.ArrayList r9 = new java.util.ArrayList()     \/\/ Catch:\{ all \-\> 0x0036 \}\l}"];
subgraph cluster_LoopRegion_2107014597 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|Catch:\{ all \-\> 0x0036 \}\l|if (r7.hasNextThrow() != false) goto L_0x0015     \/\/ Catch:\{ all \-\> 0x0036 \}\l}"];
subgraph cluster_Region_502033456 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_END\lCatch:\{ all \-\> 0x0036 \}\lLOOP:0: B:3:0x000f\-\>B:5:0x0015\l|r9.add(r7.nextThrow())     \/\/ Catch:\{ all \-\> 0x0036 \}\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x001d|Catch:\{ all \-\> 0x0036 \}\l|logger.debug(\"query of '\{\}' returned \{\} results\", (java.lang.Object) r8.getStatement(), (java.lang.Object) java.lang.Integer.valueOf(r9.size()))     \/\/ Catch:\{ all \-\> 0x0036 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|RETURN\l|return r9\l}"];
}
subgraph cluster_Region_798721978 {
label = "R(3:9|10|11) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0036|ExcHandler:  FINALLY\lSplitter:B:1:0x000a\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|FINALLY_INSNS\l|java.lang.String r9 = \"iterator\"\lcom.j256.ormlite.misc.IOUtils.closeThrowSqlException(r7, r9)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|throw r8\l}"];
}
}
}
subgraph cluster_Region_798721978 {
label = "R(3:9|10|11) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0036|ExcHandler:  FINALLY\lSplitter:B:1:0x000a\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|FINALLY_INSNS\l|java.lang.String r9 = \"iterator\"\lcom.j256.ormlite.misc.IOUtils.closeThrowSqlException(r7, r9)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|throw r8\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000a|SYNTHETIC\lSplitter:B:1:0x000a\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000f|LOOP_START\lCatch:\{ all \-\> 0x0036 \}\lLOOP:0: B:3:0x000f\-\>B:5:0x0015\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0030|DONT_GENERATE\l|java.lang.String r8 = \"iterator\"\lcom.j256.ormlite.misc.IOUtils.closeThrowSqlException(r7, r8)\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> com.j256.ormlite.stmt.StatementExecutor.query((r6v0 'this' com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r7v0 com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 com.j256.ormlite.stmt.PreparedStmt\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Lcom\/j256\/ormlite\/stmt\/PreparedStmt\<, TT;\>;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, ), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_12[style=dashed];
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_12 -> Node_6;
}

