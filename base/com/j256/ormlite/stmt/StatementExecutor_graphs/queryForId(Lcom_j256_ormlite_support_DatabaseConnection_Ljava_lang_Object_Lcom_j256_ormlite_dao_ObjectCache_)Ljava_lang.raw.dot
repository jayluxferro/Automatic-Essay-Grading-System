digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.queryForId(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/Object;Lcom\/j256\/ormlite\/dao\/ObjectCache;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.mappedQueryForId com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.j256.ormlite.db.DatabaseType) = (r3 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.databaseType com.j256.ormlite.db.DatabaseType \l0x0006: IGET  (r1 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) = \l  (r0 I:com.j256.ormlite.db.DatabaseType)\l  (r1 I:com.j256.ormlite.table.TableInfo)\l  (r2 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.build(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.table.TableInfo, com.j256.ormlite.field.FieldType):com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq type: STATIC \l0x000d: IPUT  \l  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq\<T, ID\>)\l  (r3 I:com.j256.ormlite.stmt.StatementExecutor)\l com.j256.ormlite.stmt.StatementExecutor.mappedQueryForId com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IGET  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq\<T, ID\>) = (r3 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.mappedQueryForId com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq \l0x0011: INVOKE  (r4 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r4 I:com.j256.ormlite.support.DatabaseConnection)\l  (r5 I:java.lang.Object)\l  (r6 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.execute(com.j256.ormlite.support.DatabaseConnection, java.lang.Object, com.j256.ormlite.dao.ObjectCache):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r4 I:T) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.stmt.StatementExecutor.queryForId((r3 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:ID A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, TID;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

