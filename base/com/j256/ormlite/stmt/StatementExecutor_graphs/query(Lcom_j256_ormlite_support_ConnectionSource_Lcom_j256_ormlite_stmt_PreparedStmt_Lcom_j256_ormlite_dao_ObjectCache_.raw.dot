digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.query(Lcom\/j256\/ormlite\/support\/ConnectionSource;Lcom\/j256\/ormlite\/stmt\/PreparedStmt;Lcom\/j256\/ormlite\/dao\/ObjectCache;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0005: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r7 I:com.j256.ormlite.stmt.SelectIterator) = \l  (r0 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r2 I:com.j256.ormlite.support.ConnectionSource)\l  (r3 I:com.j256.ormlite.stmt.PreparedStmt)\l  (r4 I:com.j256.ormlite.dao.ObjectCache)\l  (r5 I:int)\l com.j256.ormlite.stmt.StatementExecutor.buildIterator(com.j256.ormlite.dao.BaseDaoImpl, com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.stmt.PreparedStmt, com.j256.ormlite.dao.ObjectCache, int):com.j256.ormlite.stmt.SelectIterator type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|SYNTHETIC\lSplitter:B:1:0x000a\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000a\l|0x000a: NEW_INSTANCE  (r9 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x0036 \}, TRY_ENTER]\l0x000c: INVOKE  (r9 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r0 I:boolean) = (r7 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.hasNextThrow():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.Object) = (r7 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.nextThrow():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}]\l0x0019: INVOKE  (r9 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x001c: GOTO  \-\> 0x000f A[Catch:\{ all \-\> 0x0036 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger A[Catch:\{ all \-\> 0x0036 \}]\l0x001f: CONST_STR  (r1 I:java.lang.String) =  \"query of '\{\}' returned \{\} results\" A[Catch:\{ all \-\> 0x0036 \}]\l0x0021: INVOKE  (r8 I:java.lang.String) = (r8 I:com.j256.ormlite.stmt.PreparedStmt) com.j256.ormlite.stmt.PreparedStmt.getStatement():java.lang.String type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x0025: INVOKE  (r2 I:int) = (r9 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0036 \}]\l0x0029: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0036 \}]\l0x002d: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.String)\l  (r8 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x0036 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: CONST_STR  (r8 I:java.lang.String) =  \"iterator\" \l0x0032: INVOKE  (r7 I:java.io.Closeable), (r8 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: RETURN  (r9 I:java.util.List\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|ExcHandler: all null\lSplitter:B:1:0x000a\l|0x0036: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: CONST_STR  (r9 I:java.lang.String) =  \"iterator\" \l0x0039: INVOKE  (r7 I:java.io.Closeable), (r9 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> com.j256.ormlite.stmt.StatementExecutor.query((r6 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r7 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.j256.ormlite.stmt.PreparedStmt\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Lcom\/j256\/ormlite\/stmt\/PreparedStmt\<, TT;\>;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, ), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

