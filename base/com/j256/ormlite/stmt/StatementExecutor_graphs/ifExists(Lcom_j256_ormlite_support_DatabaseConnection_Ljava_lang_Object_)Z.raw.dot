digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.ifExists(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.ifExistsQuery java.lang.String \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.QueryBuilder) =  com.j256.ormlite.stmt.QueryBuilder \l0x0008: IGET  (r3 I:com.j256.ormlite.db.DatabaseType) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.databaseType com.j256.ormlite.db.DatabaseType \l0x000a: IGET  (r4 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x000c: IGET  (r5 I:com.j256.ormlite.dao.Dao\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.dao com.j256.ormlite.dao.Dao \l0x000e: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r3 I:com.j256.ormlite.db.DatabaseType)\l  (r4 I:com.j256.ormlite.table.TableInfo)\l  (r5 I:com.j256.ormlite.dao.Dao)\l com.j256.ormlite.stmt.QueryBuilder.\<init\>(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.table.TableInfo, com.j256.ormlite.dao.Dao):void type: DIRECT \l0x0011: CONST_STR  (r3 I:java.lang.String) =  \"COUNT(*)\" \l0x0013: FILLED_NEW_ARRAY  (r3 I:java.lang.String[]) = (r3 I:java.lang.String) elemType: java.lang.String \l0x0017: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r3 I:java.lang.String[])\l com.j256.ormlite.stmt.QueryBuilder.selectRaw(java.lang.String[]):com.j256.ormlite.stmt.QueryBuilder type: VIRTUAL \l0x001a: INVOKE  (r3 I:com.j256.ormlite.stmt.Where) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.where():com.j256.ormlite.stmt.Where type: VIRTUAL \l0x001e: IGET  (r4 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x0020: INVOKE  (r4 I:com.j256.ormlite.field.FieldType) = (r4 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0024: INVOKE  (r4 I:java.lang.String) = (r4 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getColumnName():java.lang.String type: VIRTUAL \l0x0028: NEW_INSTANCE  (r5 I:com.j256.ormlite.stmt.SelectArg) =  com.j256.ormlite.stmt.SelectArg \l0x002a: INVOKE  (r5 I:com.j256.ormlite.stmt.SelectArg) com.j256.ormlite.stmt.SelectArg.\<init\>():void type: DIRECT \l0x002d: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.Where)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Object)\l com.j256.ormlite.stmt.Where.eq(java.lang.String, java.lang.Object):com.j256.ormlite.stmt.Where type: VIRTUAL \l0x0030: INVOKE  (r0 I:java.lang.String) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.prepareStatementString():java.lang.String type: VIRTUAL \l0x0034: IPUT  \l  (r0 I:java.lang.String)\l  (r6 I:com.j256.ormlite.stmt.StatementExecutor)\l com.j256.ormlite.stmt.StatementExecutor.ifExistsQuery java.lang.String \l0x0036: NEW_ARRAY  (r0 I:com.j256.ormlite.field.FieldType[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x0038: IGET  (r3 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x003a: INVOKE  (r3 I:com.j256.ormlite.field.FieldType) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x003e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0040: IPUT  \l  (r0 I:com.j256.ormlite.field.FieldType[])\l  (r6 I:com.j256.ormlite.stmt.StatementExecutor)\l com.j256.ormlite.stmt.StatementExecutor.ifExistsFieldTypes com.j256.ormlite.field.FieldType[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0042|0x0042: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x0044: INVOKE  (r0 I:com.j256.ormlite.field.FieldType) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0048: INVOKE  (r8 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.convertJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x004c: IGET  (r0 I:java.lang.String) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.ifExistsQuery java.lang.String \l0x004e: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0050: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0052: IGET  (r8 I:com.j256.ormlite.field.FieldType[]) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.ifExistsFieldTypes com.j256.ormlite.field.FieldType[] \l0x0054: INVOKE  (r7 I:long) = \l  (r7 I:com.j256.ormlite.support.DatabaseConnection)\l  (r0 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l  (r8 I:com.j256.ormlite.field.FieldType[])\l com.j256.ormlite.support.DatabaseConnection.queryForLong(java.lang.String, java.lang.Object[], com.j256.ormlite.field.FieldType[]):long type: INTERFACE \l0x0058: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger \l0x005a: CONST_STR  (r3 I:java.lang.String) =  \"query of '\{\}' returned \{\}\" \l0x005c: IGET  (r4 I:java.lang.String) = (r6 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.ifExistsQuery java.lang.String \l0x005e: INVOKE  (r5 I:java.lang.Long) = (r7 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0062: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL \l0x0065: CONST  (r3 I:?[long, double]) = (0 ?[long, double]) \l0x0067: CMP_L  (r7 I:int) = (r7 I:long), (r3 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0069|0x0069: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x006c \l}"];
Node_5 [shape=record,label="{5\:\ 0x006b|0x006b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x006c|0x006c: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.stmt.StatementExecutor.ifExists((r6 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r7 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:ID A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, TID;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
}

