digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.executeRaw(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/String;[Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"running raw execute statement: \{\}\" \l0x0004: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.String)\l  (r10 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object):void type: VIRTUAL \l0x0007: ARRAY_LENGTH  (r0 I:int) = (r11 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger \l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"execute arguments: \{\}\" \l0x000e: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.String)\l  (r11 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.trace(java.lang.String, java.lang.Object):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: SGET  (r4 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.EXECUTE com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0013: SGET  (r5 I:com.j256.ormlite.field.FieldType[]) =  com.j256.ormlite.stmt.StatementExecutor.noFieldTypes com.j256.ormlite.field.FieldType[] \l0x0015: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0016: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0018: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0019: INVOKE  (r9 I:com.j256.ormlite.support.CompiledStatement) = \l  (r2 I:com.j256.ormlite.support.DatabaseConnection)\l  (r3 I:java.lang.String)\l  (r4 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r5 I:com.j256.ormlite.field.FieldType[])\l  (r6 I:int)\l  (r7 I:boolean)\l com.j256.ormlite.support.DatabaseConnection.compileStatement(java.lang.String, com.j256.ormlite.stmt.StatementBuilder$StatementType, com.j256.ormlite.field.FieldType[], int, boolean):com.j256.ormlite.support.CompiledStatement type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|SYNTHETIC\lSplitter:B:4:0x001d\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x001d\l|0x001d: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r9 I:com.j256.ormlite.support.CompiledStatement)\l  (r11 I:java.lang.String[])\l com.j256.ormlite.stmt.StatementExecutor.assignStatementArguments(com.j256.ormlite.support.CompiledStatement, java.lang.String[]):void type: DIRECT A[Catch:\{ all \-\> 0x002a \}, TRY_ENTER]\l0x0020: INVOKE  (r10 I:int) = (r9 I:com.j256.ormlite.support.CompiledStatement) com.j256.ormlite.support.CompiledStatement.runExecute():int type: INTERFACE A[Catch:\{ all \-\> 0x002a \}]\l0x0023: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: CONST_STR  (r11 I:java.lang.String) =  \"compiled statement\" \l0x0026: INVOKE  (r9 I:java.io.Closeable), (r11 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: RETURN  (r10 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|ExcHandler: all null\lSplitter:B:4:0x001d\l|0x002a: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: CONST_STR  (r11 I:java.lang.String) =  \"compiled statement\" \l0x002d: INVOKE  (r9 I:java.io.Closeable), (r11 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.stmt.StatementExecutor.executeRaw((r8 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r9 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

