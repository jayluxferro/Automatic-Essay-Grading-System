digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.queryForLong(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Lcom\/j256\/ormlite\/stmt\/PreparedStmt;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0002: INVOKE  (r5 I:com.j256.ormlite.support.CompiledStatement) = \l  (r6 I:com.j256.ormlite.stmt.PreparedStmt)\l  (r5 I:com.j256.ormlite.support.DatabaseConnection)\l  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l com.j256.ormlite.stmt.PreparedStmt.compile(com.j256.ormlite.support.DatabaseConnection, com.j256.ormlite.stmt.StatementBuilder$StatementType):com.j256.ormlite.support.CompiledStatement type: INTERFACE \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: INVOKE  (r1 I:com.j256.ormlite.support.DatabaseResults) = \l  (r5 I:com.j256.ormlite.support.CompiledStatement)\l  (r0 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.support.CompiledStatement.runQuery(com.j256.ormlite.dao.ObjectCache):com.j256.ormlite.support.DatabaseResults type: INTERFACE A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x000a: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|SYNTHETIC\lSplitter:B:3:0x000b\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000b\l|0x000b: INVOKE  (r0 I:boolean) = (r1 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.first():boolean type: INTERFACE A[Catch:\{ all \-\> 0x003c \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 A[Catch:\{ all \-\> 0x003c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x003c \}]\l0x0012: INVOKE  (r2 I:long) = (r1 I:com.j256.ormlite.support.DatabaseResults), (r6 I:int) com.j256.ormlite.support.DatabaseResults.getLong(int):long type: INTERFACE A[Catch:\{ all \-\> 0x003c \}]\l0x0015: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: CONST_STR  (r6 I:java.lang.String) =  \"results\" \l0x0018: INVOKE  (r1 I:java.io.Closeable), (r6 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l0x001b: CONST_STR  (r6 I:java.lang.String) =  \"compiled statement\" \l0x001d: INVOKE  (r5 I:java.io.Closeable), (r6 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: RETURN  (r2 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|SYNTHETIC\lSplitter:B:9:0x0021\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0021\l|0x0021: NEW_INSTANCE  (r0 I:java.sql.SQLException) =  java.sql.SQLException A[Catch:\{ all \-\> 0x003c \}, TRY_ENTER]\l0x0023: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x003c \}]\l0x0025: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x003c \}]\l0x0028: CONST_STR  (r3 I:java.lang.String) =  \"No result found in queryForLong: \" A[Catch:\{ all \-\> 0x003c \}]\l0x002a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003c \}]\l0x002d: INVOKE  (r6 I:java.lang.String) = (r6 I:com.j256.ormlite.stmt.PreparedStmt) com.j256.ormlite.stmt.PreparedStmt.getStatement():java.lang.String type: INTERFACE A[Catch:\{ all \-\> 0x003c \}]\l0x0031: INVOKE  (r2 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003c \}]\l0x0034: INVOKE  (r6 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x003c \}]\l0x0038: INVOKE  (r0 I:java.sql.SQLException), (r6 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x003c \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003c \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|ExcHandler: all null\lSplitter:B:3:0x000b\l|0x003c: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|ExcHandler: all null\lSplitter:B:1:0x0007\l|0x003e: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: CONST_STR  (r0 I:java.lang.String) =  \"results\" \l0x0042: INVOKE  (r1 I:java.io.Closeable), (r0 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l0x0045: CONST_STR  (r0 I:java.lang.String) =  \"compiled statement\" \l0x0047: INVOKE  (r5 I:java.io.Closeable), (r0 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long com.j256.ormlite.stmt.StatementExecutor.queryForLong((r4 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r5 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.stmt.PreparedStmt\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, Lcom\/j256\/ormlite\/stmt\/PreparedStmt\<, TT;\>;)J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

