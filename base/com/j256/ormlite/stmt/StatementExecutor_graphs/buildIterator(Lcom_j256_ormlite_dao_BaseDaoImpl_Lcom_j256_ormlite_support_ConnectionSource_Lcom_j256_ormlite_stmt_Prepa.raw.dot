digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.buildIterator(Lcom\/j256\/ormlite\/dao\/BaseDaoImpl;Lcom\/j256\/ormlite\/support\/ConnectionSource;Lcom\/j256\/ormlite\/stmt\/PreparedStmt;Lcom\/j256\/ormlite\/dao\/ObjectCache;I)Lcom\/j256\/ormlite\/stmt\/SelectIterator;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x0001: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0003: IGET  (r0 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r1 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x0005: INVOKE  (r0 I:java.lang.String) = (r0 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0009: INVOKE  (r12 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r11 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadOnlyConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l0x000d: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|SYNTHETIC\lSplitter:B:1:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000e\l|0x000e: SGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT com.j256.ormlite.stmt.StatementBuilder$StatementType A[Catch:\{ all \-\> 0x003a \}, TRY_ENTER]\l0x0010: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x003a \}]\l0x0012: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x003a \}]\l0x0014: INVOKE  (r14 I:com.j256.ormlite.support.CompiledStatement) = \l  (r5 I:com.j256.ormlite.stmt.PreparedStmt)\l  (r12 I:com.j256.ormlite.support.DatabaseConnection)\l  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r2 I:int)\l com.j256.ormlite.stmt.PreparedStmt.compile(com.j256.ormlite.support.DatabaseConnection, com.j256.ormlite.stmt.StatementBuilder$StatementType, int):com.j256.ormlite.support.CompiledStatement type: INTERFACE A[Catch:\{ all \-\> 0x003a \}]\l0x0017: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|SYNTHETIC\lSplitter:B:3:0x0018\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0018\l|0x0018: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.SelectIterator) =  com.j256.ormlite.stmt.SelectIterator A[Catch:\{ all \-\> 0x0038 \}, TRY_ENTER]\l0x001a: IGET  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r1 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo A[Catch:\{ all \-\> 0x0038 \}]\l0x001c: INVOKE  (r3 I:java.lang.Class) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getDataClass():java.lang.Class type: VIRTUAL A[Catch:\{ all \-\> 0x0038 \}]\l0x0020: INVOKE  (r9 I:java.lang.String) = (r18 I:com.j256.ormlite.stmt.PreparedStmt) com.j256.ormlite.stmt.PreparedStmt.getStatement():java.lang.String type: INTERFACE A[Catch:\{ all \-\> 0x0038 \}]\l0x0024: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x0025: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x0027: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x0029: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x002b: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x002c: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x002d: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0038 \}]\l0x002f: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.SelectIterator)\l  (r3 I:java.lang.Class)\l  (r4 I:com.j256.ormlite.dao.Dao)\l  (r5 I:com.j256.ormlite.stmt.GenericRowMapper)\l  (r6 I:com.j256.ormlite.support.ConnectionSource)\l  (r7 I:com.j256.ormlite.support.DatabaseConnection)\l  (r8 I:com.j256.ormlite.support.CompiledStatement)\l  (r9 I:java.lang.String)\l  (r10 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.SelectIterator.\<init\>(java.lang.Class, com.j256.ormlite.dao.Dao, com.j256.ormlite.stmt.GenericRowMapper, com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.support.DatabaseConnection, com.j256.ormlite.support.CompiledStatement, java.lang.String, com.j256.ormlite.dao.ObjectCache):void type: DIRECT A[Catch:\{ all \-\> 0x0038 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: CONST_STR  (r2 I:java.lang.String) =  \"compiled statement\" \l0x0034: INVOKE  (r13 I:java.io.Closeable), (r2 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: RETURN  (r0 I:com.j256.ormlite.stmt.SelectIterator\<T, ID\>) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|ExcHandler: all null\lSplitter:B:3:0x0018\l|0x0038: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|ExcHandler: all null\lSplitter:B:1:0x000e\l|0x003a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: CONST_STR  (r2 I:java.lang.String) =  \"compiled statement\" \l0x003e: INVOKE  (r14 I:java.io.Closeable), (r2 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0046 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: INVOKE  \l  (r11 I:com.j256.ormlite.support.ConnectionSource)\l  (r12 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.SelectIterator\<T, ID\> com.j256.ormlite.stmt.StatementExecutor.buildIterator((r15 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r16 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.j256.ormlite.stmt.PreparedStmt\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/dao\/BaseDaoImpl\<, TT;TID;\>;, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Lcom\/j256\/ormlite\/stmt\/PreparedStmt\<, TT;\>;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, I), Lcom\/j256\/ormlite\/stmt\/SelectIterator\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
}

