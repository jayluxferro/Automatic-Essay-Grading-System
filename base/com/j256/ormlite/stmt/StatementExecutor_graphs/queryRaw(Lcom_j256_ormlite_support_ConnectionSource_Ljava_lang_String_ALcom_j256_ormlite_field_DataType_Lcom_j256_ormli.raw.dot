digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.queryRaw(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/String;[Lcom\/j256\/ormlite\/field\/DataType;Lcom\/j256\/ormlite\/dao\/RawRowObjectMapper;[Ljava\/lang\/String;Lcom\/j256\/ormlite\/dao\/ObjectCache;)Lcom\/j256\/ormlite\/dao\/GenericRawResults;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x0001: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0005: SGET  (r2 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger \l0x0007: CONST_STR  (r3 I:java.lang.String) =  \"executing raw query for: \{\}\" \l0x0009: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r2 I:com.j256.ormlite.logger.Logger)\l  (r3 I:java.lang.String)\l  (r11 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object):void type: VIRTUAL \l0x000e: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: SGET  (r2 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.StatementExecutor.logger com.j256.ormlite.logger.Logger \l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"query arguments: \{\}\" \l0x0015: INVOKE  \l  (r2 I:com.j256.ormlite.logger.Logger)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.trace(java.lang.String, java.lang.Object):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IGET  (r2 I:com.j256.ormlite.table.TableInfo\<T, ID\>) = (r1 I:com.j256.ormlite.stmt.StatementExecutor) com.j256.ormlite.stmt.StatementExecutor.tableInfo com.j256.ormlite.table.TableInfo \l0x001a: INVOKE  (r2 I:java.lang.String) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x001e: INVOKE  (r12 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r10 I:com.j256.ormlite.support.ConnectionSource)\l  (r2 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadOnlyConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE \l0x0022: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|SYNTHETIC\lSplitter:B:4:0x0023\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0023\l|0x0023: SGET  (r6 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT com.j256.ormlite.stmt.StatementBuilder$StatementType A[Catch:\{ all \-\> 0x0054 \}, TRY_ENTER]\l0x0025: SGET  (r7 I:com.j256.ormlite.field.FieldType[]) =  com.j256.ormlite.stmt.StatementExecutor.noFieldTypes com.j256.ormlite.field.FieldType[] A[Catch:\{ all \-\> 0x0054 \}]\l0x0027: CONST  (r8 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0054 \}]\l0x0028: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0054 \}]\l0x0029: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0054 \}]\l0x002a: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0054 \}]\l0x002c: INVOKE  (r14 I:com.j256.ormlite.support.CompiledStatement) = \l  (r4 I:com.j256.ormlite.support.DatabaseConnection)\l  (r5 I:java.lang.String)\l  (r6 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r7 I:com.j256.ormlite.field.FieldType[])\l  (r8 I:int)\l  (r9 I:boolean)\l com.j256.ormlite.support.DatabaseConnection.compileStatement(java.lang.String, com.j256.ormlite.stmt.StatementBuilder$StatementType, com.j256.ormlite.field.FieldType[], int, boolean):com.j256.ormlite.support.CompiledStatement type: INTERFACE A[Catch:\{ all \-\> 0x0054 \}]\l0x002f: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|SYNTHETIC\lSplitter:B:6:0x0030\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0030\l|0x0030: INVOKE  \l  (r15 I:com.j256.ormlite.stmt.StatementExecutor)\l  (r14 I:com.j256.ormlite.support.CompiledStatement)\l  (r0 I:java.lang.String[])\l com.j256.ormlite.stmt.StatementExecutor.assignStatementArguments(com.j256.ormlite.support.CompiledStatement, java.lang.String[]):void type: DIRECT A[Catch:\{ all \-\> 0x0052 \}, TRY_ENTER]\l0x0033: NEW_INSTANCE  (r0 I:com.j256.ormlite.stmt.RawResultsImpl) =  com.j256.ormlite.stmt.RawResultsImpl A[Catch:\{ all \-\> 0x0052 \}]\l0x0035: CONST_CLASS  (r6 I:java.lang.Class\<java.lang.String[]\>) =  java.lang.String[].class A[Catch:\{ all \-\> 0x0052 \}]\l0x0037: NEW_INSTANCE  (r8 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper) =  com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper A[Catch:\{ all \-\> 0x0052 \}]\l0x0039: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x003b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x003d: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l  (r3 I:com.j256.ormlite.dao.RawRowObjectMapper)\l  (r2 I:com.j256.ormlite.field.DataType[])\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.\<init\>(com.j256.ormlite.dao.RawRowObjectMapper, com.j256.ormlite.field.DataType[]):void type: DIRECT A[Catch:\{ all \-\> 0x0052 \}]\l0x0040: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0041: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0043: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0044: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0046: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0047: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0052 \}]\l0x0049: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.RawResultsImpl)\l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r4 I:com.j256.ormlite.support.DatabaseConnection)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.Class)\l  (r7 I:com.j256.ormlite.support.CompiledStatement)\l  (r8 I:com.j256.ormlite.stmt.GenericRowMapper)\l  (r9 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.RawResultsImpl.\<init\>(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.support.DatabaseConnection, java.lang.String, java.lang.Class, com.j256.ormlite.support.CompiledStatement, com.j256.ormlite.stmt.GenericRowMapper, com.j256.ormlite.dao.ObjectCache):void type: DIRECT A[Catch:\{ all \-\> 0x0052 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|0x004c: CONST_STR  (r2 I:java.lang.String) =  \"compiled statement\" \l0x004e: INVOKE  (r13 I:java.io.Closeable), (r2 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: RETURN  (r0 I:com.j256.ormlite.dao.GenericRawResults\<UO\>) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|ExcHandler: all null\lSplitter:B:6:0x0030\l|0x0052: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|ExcHandler: all null\lSplitter:B:4:0x0023\l|0x0054: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: CONST_STR  (r2 I:java.lang.String) =  \"compiled statement\" \l0x0058: INVOKE  (r14 I:java.io.Closeable), (r2 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|0x005b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0060 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|0x005d: INVOKE  \l  (r10 I:com.j256.ormlite.support.ConnectionSource)\l  (r12 I:com.j256.ormlite.support.DatabaseConnection)\l com.j256.ormlite.support.ConnectionSource.releaseConnection(com.j256.ormlite.support.DatabaseConnection):void type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0060|0x0060: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.dao.GenericRawResults\<UO\> com.j256.ormlite.stmt.StatementExecutor.queryRaw((r15 'this' I:com.j256.ormlite.stmt.StatementExecutor A[IMMUTABLE_TYPE, THIS]), (r16 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:com.j256.ormlite.field.DataType[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:com.j256.ormlite.dao.RawRowObjectMapper\<UO\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<UO:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/String;, [, Lcom\/j256\/ormlite\/field\/DataType;, Lcom\/j256\/ormlite\/dao\/RawRowObjectMapper\<, TUO;\>;[, Ljava\/lang\/String;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, ), Lcom\/j256\/ormlite\/dao\/GenericRawResults\<, TUO;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
}

