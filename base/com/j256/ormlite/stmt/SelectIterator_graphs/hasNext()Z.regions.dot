digraph "CFG forcom.j256.ormlite.stmt.SelectIterator.hasNext()Z" {
subgraph cluster_Region_741886583 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1962486174 {
label = "Try: R(1:2) catches: R(3:3|4|5)";
node [shape=record,color=blue];
subgraph cluster_Region_917818753 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return hasNextThrow()\l}"];
}
subgraph cluster_Region_1391223970 {
label = "R(3:3|4|5) | ExcHandler: SQLException (r0v0 'e' java.sql.SQLException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: SQLException (r0v0 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|r4.last = null\lcloseQuietly()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|throw new java.lang.IllegalStateException(\"Errors getting more results of \" + r4.dataClass, r0)\l}"];
}
}
}
subgraph cluster_Region_1391223970 {
label = "R(3:3|4|5) | ExcHandler: SQLException (r0v0 'e' java.sql.SQLException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|ExcHandler: SQLException (r0v0 'e' java.sql.SQLException A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|r4.last = null\lcloseQuietly()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|throw new java.lang.IllegalStateException(\"Errors getting more results of \" + r4.dataClass, r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|Catch:\{ SQLException \-\> 0x0005 \}\lSplitter:B:0:0x0000\l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.stmt.SelectIterator.hasNext((r4v0 'this' com.j256.ormlite.stmt.SelectIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
}

