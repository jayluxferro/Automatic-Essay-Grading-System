digraph "CFG forcom.j256.ormlite.stmt.SelectIterator.removeThrow()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.last == null) goto L_0x0035\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r3.classDao == null) goto L_0x0017\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x0009|SYNTHETIC\lSplitter:B:5:0x0009\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ all \-\> 0x0013 \}\lSplitter:B:5:0x0009\l|r3.classDao.delete(r3.last)     \/\/ Catch:\{ all \-\> 0x0013 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|DONT_GENERATE\l|r3.last = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|ExcHandler:  FINALLY\lSplitter:B:5:0x0009\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|FINALLY_INSNS\l|r3.last = null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|throw r1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot remove \")\lr1.append(r3.dataClass)\lr1.append(\" object because classDao not initialized\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"No last \")\lr1.append(r3.dataClass)\lr1.append(\" object to remove. Must be called after a call to next.\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|throw new java.lang.IllegalStateException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.SelectIterator.removeThrow((r3v0 'this' com.j256.ormlite.stmt.SelectIterator A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

