digraph "CFG forcom.j256.ormlite.stmt.SelectIterator.getCurrent()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.GenericRowMapper\<T\>) = (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.rowMapper com.j256.ormlite.stmt.GenericRowMapper \l0x0002: IGET  (r1 I:com.j256.ormlite.support.DatabaseResults) = (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.results com.j256.ormlite.support.DatabaseResults \l0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.stmt.GenericRowMapper)\l  (r1 I:com.j256.ormlite.support.DatabaseResults)\l com.j256.ormlite.stmt.GenericRowMapper.mapRow(com.j256.ormlite.support.DatabaseResults):java.lang.Object type: INTERFACE \l0x0008: IPUT  (r0 I:T), (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.last java.lang.Object \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IPUT  (r0 I:boolean), (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.alreadyMoved boolean \l0x000d: IGET  (r0 I:int) = (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.rowC int \l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0011: IPUT  (r0 I:int), (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.rowC int \l0x0013: IGET  (r0 I:T) = (r2 I:com.j256.ormlite.stmt.SelectIterator) com.j256.ormlite.stmt.SelectIterator.last java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{private T com.j256.ormlite.stmt.SelectIterator.getCurrent((r2 'this' I:com.j256.ormlite.stmt.SelectIterator A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

