digraph "CFG forcom.j256.ormlite.stmt.SelectIterator.current()Ljava\/lang\/Object;" {
subgraph cluster_Region_649856615 {
label = "R(1:(2:(1:2)|(1:(2:(1:6)|(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1324617267 {
label = "R(2:(1:2)|(1:(2:(1:6)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1443079595 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.closed == true) goto L_0x0004\l}"];
subgraph cluster_Region_946159925 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_2125264736 {
label = "R(1:(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_273148688 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1537358414 {
label = "IF [B:4:0x0008] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r1.first == true) goto L_0x000a\l}"];
subgraph cluster_Region_1239196902 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|return first()\l}"];
}
}
subgraph cluster_Region_1355963722 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0013|RETURN\l|return getCurrent()\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.stmt.SelectIterator.current((r1v0 'this' com.j256.ormlite.stmt.SelectIterator A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

