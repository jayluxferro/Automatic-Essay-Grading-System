digraph "CFG forcom.j256.ormlite.stmt.mapped.BaseMappedStatement.getFieldObjects(Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object[] r0 = new java.lang.Object[r4.argFieldTypes.length]\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:10:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:10:0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r1 \>= r4.argFieldTypes.length) goto L_0x002f\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|r2 = r4.argFieldTypes[r1]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r2.isAllowGeneratedIdInsert() == false) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|r0[r1] = r2.getFieldValueIfNotDefault(r5)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|r0[r1] = r2.extractJavaFieldToSqlArgValue(r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022}"];
Node_8 [shape=record,label="{8\:\ 0x0024|if (r0[r1] != null) goto L_0x002c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|r0[r1] = r2.getDefaultValue()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:10:0x002c\l|int r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected java.lang.Object[] com.j256.ormlite.stmt.mapped.BaseMappedStatement.getFieldObjects((r4v0 'this' com.j256.ormlite.stmt.mapped.BaseMappedStatement A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_13;
Node_10 -> Node_1;
Node_12 -> Node_11;
Node_13 -> Node_10;
Node_14 -> Node_10;
}

