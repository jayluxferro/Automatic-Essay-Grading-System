digraph "CFG forcom.j256.ormlite.stmt.mapped.BaseMappedStatement.getFieldObjects(Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.field.FieldType[]) = (r4 I:com.j256.ormlite.stmt.mapped.BaseMappedStatement) com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes com.j256.ormlite.field.FieldType[] \l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0003: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IGET  (r2 I:com.j256.ormlite.field.FieldType[]) = (r4 I:com.j256.ormlite.stmt.mapped.BaseMappedStatement) com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes com.j256.ormlite.field.FieldType[] \l0x0008: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r2 I:com.j256.ormlite.field.FieldType[]) = (r4 I:com.j256.ormlite.stmt.mapped.BaseMappedStatement) com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes com.j256.ormlite.field.FieldType[] \l0x000d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x000f: INVOKE  (r3 I:boolean) = (r2 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isAllowGeneratedIdInsert():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r3 I:java.lang.Object) = \l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r5 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.getFieldValueIfNotDefault(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0019: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r3 I:java.lang.Object) = \l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r5 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0020: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: INVOKE  (r2 I:java.lang.Object) = (r2 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getDefaultValue():java.lang.Object type: VIRTUAL \l0x002a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: RETURN  (r0 I:java.lang.Object[]) \l}"];
MethodNode[shape=record,label="{protected java.lang.Object[] com.j256.ormlite.stmt.mapped.BaseMappedStatement.getFieldObjects((r4 'this' I:com.j256.ormlite.stmt.mapped.BaseMappedStatement A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

