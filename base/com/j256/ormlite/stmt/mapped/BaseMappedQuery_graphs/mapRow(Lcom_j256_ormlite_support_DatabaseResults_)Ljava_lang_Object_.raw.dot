digraph "CFG forcom.j256.ormlite.stmt.mapped.BaseMappedQuery.mapRow(Lcom\/j256\/ormlite\/support\/DatabaseResults;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.String, java.lang.Integer\>) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap \l0x0006: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r0 I:java.util.Map\<java.lang.String, java.lang.Integer\>) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions java.util.Map \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r1 I:com.j256.ormlite.dao.ObjectCache) = (r15 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.getObjectCacheForRetrieve():com.j256.ormlite.dao.ObjectCache type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r2 I:com.j256.ormlite.field.FieldType) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.idField com.j256.ormlite.field.FieldType \l0x0014: INVOKE  (r2 I:java.lang.Object) = \l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r15 I:com.j256.ormlite.support.DatabaseResults)\l  (r0 I:java.util.Map)\l com.j256.ormlite.field.FieldType.resultToJava(com.j256.ormlite.support.DatabaseResults, java.util.Map):java.lang.Object type: VIRTUAL \l0x0018: IGET  (r3 I:java.lang.Class) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz java.lang.Class \l0x001a: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.dao.ObjectCache)\l  (r3 I:java.lang.Class)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.dao.ObjectCache.get(java.lang.Class, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: RETURN  (r2 I:T) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IGET  (r2 I:com.j256.ormlite.table.TableInfo) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.tableInfo com.j256.ormlite.table.TableInfo \l0x0023: INVOKE  (r2 I:java.lang.Object) = (r2 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.createObject():java.lang.Object type: VIRTUAL \l0x0027: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: IGET  (r4 I:com.j256.ormlite.field.FieldType[]) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes com.j256.ormlite.field.FieldType[] \l0x002a: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x002b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x002d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:28:0x0071 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: AGET  (r9 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0033: INVOKE  (r10 I:boolean) = (r9 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l0x0037: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: INVOKE  (r10 I:java.lang.Object) = \l  (r9 I:com.j256.ormlite.field.FieldType)\l  (r15 I:com.j256.ormlite.support.DatabaseResults)\l  (r0 I:java.util.Map)\l com.j256.ormlite.field.FieldType.resultToJava(com.j256.ormlite.support.DatabaseResults, java.util.Map):java.lang.Object type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0064 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: IGET  (r12 I:java.lang.Object) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent java.lang.Object \l}"];
Node_17 [shape=record,label="{17\:\ 0x0044|0x0044: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0064 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|0x0046: INVOKE  (r12 I:java.lang.reflect.Field) = (r9 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getField():java.lang.reflect.Field type: VIRTUAL \l0x004a: INVOKE  (r12 I:java.lang.Class) = (r12 I:java.lang.reflect.Field) java.lang.reflect.Field.getType():java.lang.Class type: VIRTUAL \l0x004e: IGET  (r13 I:java.lang.Object) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent java.lang.Object \l0x0050: INVOKE  (r13 I:java.lang.Class) = (r13 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|0x0054: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0064 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: IGET  (r12 I:java.lang.Object) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId java.lang.Object \l0x0058: INVOKE  (r12 I:boolean) = (r10 I:java.lang.Object), (r12 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|0x005c: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0064 \l}"];
Node_22 [shape=record,label="{22\:\ 0x005e|0x005e: IGET  (r12 I:java.lang.Object) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent java.lang.Object \l0x0060: INVOKE  \l  (r9 I:com.j256.ormlite.field.FieldType)\l  (r2 I:java.lang.Object)\l  (r12 I:java.lang.Object)\l  (r11 I:boolean)\l  (r1 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: INVOKE  \l  (r9 I:com.j256.ormlite.field.FieldType)\l  (r2 I:java.lang.Object)\l  (r10 I:java.lang.Object)\l  (r6 I:boolean)\l  (r1 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|0x0067: INVOKE  (r9 I:boolean) = (r9 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isId():boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x006b|0x006b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x006e \l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|0x006d: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x006e|0x006e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0071|0x0071: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x008d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0073|0x0073: IGET  (r3 I:com.j256.ormlite.field.FieldType[]) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes com.j256.ormlite.field.FieldType[] \l0x0075: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x0076: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0077|0x0077: IF  (r5 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:37:0x008d \l}"];
Node_31 [shape=record,label="{31\:\ 0x0079|0x0079: AGET  (r7 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x007b: INVOKE  (r9 I:boolean) = (r7 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x007f|0x007f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x008a \l}"];
Node_33 [shape=record,label="{33\:\ 0x0081|0x0081: INVOKE  (r9 I:com.j256.ormlite.dao.BaseForeignCollection) = \l  (r7 I:com.j256.ormlite.field.FieldType)\l  (r2 I:java.lang.Object)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.buildForeignCollection(java.lang.Object, java.lang.Object):com.j256.ormlite.dao.BaseForeignCollection type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x0085|0x0085: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x008a \l}"];
Node_35 [shape=record,label="{35\:\ 0x0087|0x0087: INVOKE  \l  (r7 I:com.j256.ormlite.field.FieldType)\l  (r2 I:java.lang.Object)\l  (r9 I:java.lang.Object)\l  (r6 I:boolean)\l  (r1 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x008a|0x008a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x008d|0x008d: INVOKE  (r15 I:com.j256.ormlite.dao.ObjectCache) = (r15 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.getObjectCacheForStore():com.j256.ormlite.dao.ObjectCache type: INTERFACE \l}"];
Node_38 [shape=record,label="{38\:\ 0x0091|0x0091: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x009a \l}"];
Node_39 [shape=record,label="{39\:\ 0x0093|0x0093: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x009a \l}"];
Node_40 [shape=record,label="{40\:\ 0x0095|0x0095: IGET  (r1 I:java.lang.Class) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz java.lang.Class \l0x0097: INVOKE  \l  (r15 I:com.j256.ormlite.dao.ObjectCache)\l  (r1 I:java.lang.Class)\l  (r8 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.dao.ObjectCache.put(java.lang.Class, java.lang.Object, java.lang.Object):void type: INTERFACE \l}"];
Node_41 [shape=record,label="{41\:\ 0x009a|0x009a: IGET  (r15 I:java.util.Map\<java.lang.String, java.lang.Integer\>) = (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery) com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions java.util.Map \l}"];
Node_42 [shape=record,label="{42\:\ 0x009c|0x009c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00a0 \l}"];
Node_43 [shape=record,label="{43\:\ 0x009e|0x009e: IPUT  \l  (r0 I:java.util.Map\<java.lang.String, java.lang.Integer\>)\l  (r14 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery)\l com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions java.util.Map \l}"];
Node_44 [shape=record,label="{44\:\ 0x00a0|0x00a0: RETURN  (r2 I:T) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.stmt.mapped.BaseMappedQuery.mapRow((r14 'this' I:com.j256.ormlite.stmt.mapped.BaseMappedQuery A[IMMUTABLE_TYPE, THIS]), (r15 I:com.j256.ormlite.support.DatabaseResults A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseResults;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_28;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_10;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_37;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_30;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
}

