digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.build(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/table\/TableInfo;Lcom\/j256\/ormlite\/field\/FieldType;)Lcom\/j256\/ormlite\/stmt\/mapped\/MappedQueryForFieldEq;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0029 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r8 I:com.j256.ormlite.field.FieldType) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r6 I:java.sql.SQLException) =  java.sql.SQLException \l0x000b: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"Cannot query\-for\-id with \" \l0x0012: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r7 I:java.lang.Class) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getDataClass():java.lang.Class type: VIRTUAL \l0x0019: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x001c: CONST_STR  (r7 I:java.lang.String) =  \" because it doesn't have an id field\" \l0x001e: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r7 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0025: INVOKE  (r6 I:java.sql.SQLException), (r7 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r2 I:java.lang.String) = \l  (r6 I:com.j256.ormlite.db.DatabaseType)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l  (r8 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.buildStatement(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.table.TableInfo, com.j256.ormlite.field.FieldType):java.lang.String type: STATIC \l0x002d: NEW_INSTANCE  (r6 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) =  com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq \l0x002f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0030: NEW_ARRAY  (r3 I:com.j256.ormlite.field.FieldType[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x0032: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0035: INVOKE  (r4 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0039: CONST_STR  (r5 I:java.lang.String) =  \"query\-for\-id\" \l0x003b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x003c: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r1 I:com.j256.ormlite.table.TableInfo)\l  (r2 I:java.lang.String)\l  (r3 I:com.j256.ormlite.field.FieldType[])\l  (r4 I:com.j256.ormlite.field.FieldType[])\l  (r5 I:java.lang.String)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.\<init\>(com.j256.ormlite.table.TableInfo, java.lang.String, com.j256.ormlite.field.FieldType[], com.j256.ormlite.field.FieldType[], java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: RETURN  \l  (r6 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq\<T, ID\>)\l \l}"];
MethodNode[shape=record,label="{public static com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq\<T, ID\> com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.build((r6 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, ID:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Lcom\/j256\/ormlite\/field\/FieldType;, ), Lcom\/j256\/ormlite\/stmt\/mapped\/MappedQueryForFieldEq\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
}

