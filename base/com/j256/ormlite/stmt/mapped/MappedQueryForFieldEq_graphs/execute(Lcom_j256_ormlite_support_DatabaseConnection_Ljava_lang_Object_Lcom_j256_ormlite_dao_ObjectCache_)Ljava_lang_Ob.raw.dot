digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.execute(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/Object;Lcom\/j256\/ormlite\/dao\/ObjectCache;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:java.lang.Class) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.clazz java.lang.Class \l0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r10 I:com.j256.ormlite.dao.ObjectCache)\l  (r0 I:java.lang.Class)\l  (r9 I:java.lang.Object)\l com.j256.ormlite.dao.ObjectCache.get(java.lang.Class, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r0 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: INVOKE  (r9 I:java.lang.Object) = \l  (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r9 I:java.lang.Object)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.convertIdToFieldObject(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0013: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0015: IGET  (r2 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement java.lang.String \l0x0017: IGET  (r4 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.argFieldTypes com.j256.ormlite.field.FieldType[] \l0x0019: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001d: INVOKE  (r8 I:java.lang.Object) = \l  (r1 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l  (r4 I:com.j256.ormlite.field.FieldType[])\l  (r5 I:com.j256.ormlite.stmt.GenericRowMapper)\l  (r6 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.support.DatabaseConnection.queryForOne(java.lang.String, java.lang.Object[], com.j256.ormlite.field.FieldType[], com.j256.ormlite.stmt.GenericRowMapper, com.j256.ormlite.dao.ObjectCache):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: SGET  (r9 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger com.j256.ormlite.logger.Logger \l0x0025: CONST_STR  (r10 I:java.lang.String) =  \"\{\} using '\{\}' and \{\} args, got no results\" \l0x0027: IGET  (r1 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label java.lang.String \l0x0029: IGET  (r2 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement java.lang.String \l0x002b: ARRAY_LENGTH  (r3 I:int) = (r0 I:?[]) \l0x002c: INVOKE  (r3 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0030: INVOKE  \l  (r9 I:com.j256.ormlite.logger.Logger)\l  (r10 I:java.lang.String)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: SGET  (r9 I:java.lang.Object) =  com.j256.ormlite.support.DatabaseConnection.MORE_THAN_ONE java.lang.Object \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: SGET  (r9 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger com.j256.ormlite.logger.Logger \l0x003a: CONST_STR  (r10 I:java.lang.String) =  \"\{\} using '\{\}' and \{\} args, got 1 result\" \l0x003c: IGET  (r1 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label java.lang.String \l0x003e: IGET  (r2 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement java.lang.String \l0x0040: ARRAY_LENGTH  (r3 I:int) = (r0 I:?[]) \l0x0041: INVOKE  (r3 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0045: INVOKE  \l  (r9 I:com.j256.ormlite.logger.Logger)\l  (r10 I:java.lang.String)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: INVOKE  \l  (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r0 I:java.lang.Object[])\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logArgs(java.lang.Object[]):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: RETURN  (r8 I:T) \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: SGET  (r8 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger com.j256.ormlite.logger.Logger \l0x004e: IGET  (r9 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label java.lang.String \l0x0050: IGET  (r10 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement java.lang.String \l0x0052: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0053: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0057: CONST_STR  (r2 I:java.lang.String) =  \"\{\} using '\{\}' and \{\} args, got \>1 results\" \l0x0059: INVOKE  \l  (r8 I:com.j256.ormlite.logger.Logger)\l  (r2 I:java.lang.String)\l  (r9 I:java.lang.Object)\l  (r10 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.error(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL \l0x005c: INVOKE  \l  (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r0 I:java.lang.Object[])\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logArgs(java.lang.Object[]):void type: DIRECT \l0x005f: NEW_INSTANCE  (r8 I:java.sql.SQLException) =  java.sql.SQLException \l0x0061: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0063: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0066: IGET  (r10 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label java.lang.String \l0x0068: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006b: CONST_STR  (r10 I:java.lang.String) =  \" got more than 1 result: \" \l0x006d: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0070: IGET  (r10 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq) com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement java.lang.String \l0x0072: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0075: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0079: INVOKE  (r8 I:java.sql.SQLException), (r9 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x007c|0x007c: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.execute((r7 'this' I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq A[IMMUTABLE_TYPE, THIS]), (r8 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:ID A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, TID;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, )TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

