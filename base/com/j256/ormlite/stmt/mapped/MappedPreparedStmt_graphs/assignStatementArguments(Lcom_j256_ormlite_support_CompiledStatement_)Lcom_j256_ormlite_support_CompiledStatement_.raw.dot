digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.assignStatementArguments(Lcom\/j256\/ormlite\/support\/CompiledStatement;)Lcom\/j256\/ormlite\/support\/CompiledStatement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.lang.Long) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit java.lang.Long A[Catch:\{ all \-\> 0x0067 \}, TRY_ENTER]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.Long) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit java.lang.Long A[Catch:\{ all \-\> 0x0067 \}]\l0x0006: INVOKE  (r0 I:int) = (r0 I:java.lang.Long) java.lang.Long.intValue():int type: VIRTUAL A[Catch:\{ all \-\> 0x0067 \}]\l0x000a: INVOKE  \l  (r6 I:com.j256.ormlite.support.CompiledStatement)\l  (r0 I:int)\l com.j256.ormlite.support.CompiledStatement.setMaxRows(int):void type: INTERFACE A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0067 \}]\l0x000e: SGET  (r1 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger com.j256.ormlite.logger.Logger A[Catch:\{ all \-\> 0x0067 \}]\l0x0010: SGET  (r2 I:com.j256.ormlite.logger.Log$Level) =  com.j256.ormlite.logger.Log.Level.TRACE com.j256.ormlite.logger.Log$Level A[Catch:\{ all \-\> 0x0067 \}]\l0x0012: INVOKE  (r1 I:boolean) = \l  (r1 I:com.j256.ormlite.logger.Logger)\l  (r2 I:com.j256.ormlite.logger.Log$Level)\l com.j256.ormlite.logger.Logger.isLevelEnabled(com.j256.ormlite.logger.Log$Level):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0022 A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r1 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x001a: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0022 A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r0 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x001f: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) A[Catch:\{ all \-\> 0x0067 \}]\l0x0020: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IGET  (r2 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x0025: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:20:0x004d A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IGET  (r2 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x002a: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0067 \}]\l0x002c: INVOKE  (r2 I:java.lang.Object) = (r2 I:com.j256.ormlite.stmt.ArgumentHolder) com.j256.ormlite.stmt.ArgumentHolder.getSqlArgValue():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0067 \}]\l0x0030: IGET  (r3 I:com.j256.ormlite.field.FieldType[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes com.j256.ormlite.field.FieldType[] A[Catch:\{ all \-\> 0x0067 \}]\l0x0032: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003f A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IGET  (r3 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x0038: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0067 \}]\l0x003a: INVOKE  (r3 I:com.j256.ormlite.field.SqlType) = (r3 I:com.j256.ormlite.stmt.ArgumentHolder) com.j256.ormlite.stmt.ArgumentHolder.getSqlType():com.j256.ormlite.field.SqlType type: INTERFACE A[Catch:\{ all \-\> 0x0067 \}]\l0x003e: GOTO  \-\> 0x0043 A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: INVOKE  (r3 I:com.j256.ormlite.field.SqlType) = (r3 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getSqlType():com.j256.ormlite.field.SqlType type: VIRTUAL A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: INVOKE  \l  (r6 I:com.j256.ormlite.support.CompiledStatement)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l  (r3 I:com.j256.ormlite.field.SqlType)\l com.j256.ormlite.support.CompiledStatement.setObject(int, java.lang.Object, com.j256.ormlite.field.SqlType):void type: INTERFACE A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004a A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) A[Catch:\{ all \-\> 0x0067 \}]\l0x004c: GOTO  \-\> 0x0023 A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|0x004d: SGET  (r1 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger com.j256.ormlite.logger.Logger A[Catch:\{ all \-\> 0x0067 \}]\l0x004f: CONST_STR  (r2 I:java.lang.String) =  \"prepared statement '\{\}' with \{\} args\" A[Catch:\{ all \-\> 0x0067 \}]\l0x0051: IGET  (r3 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement java.lang.String A[Catch:\{ all \-\> 0x0067 \}]\l0x0053: IGET  (r4 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r5 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] A[Catch:\{ all \-\> 0x0067 \}]\l0x0055: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) A[Catch:\{ all \-\> 0x0067 \}]\l0x0056: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0067 \}]\l0x005a: INVOKE  \l  (r1 I:com.j256.ormlite.logger.Logger)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0066 A[Catch:\{ all \-\> 0x0067 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|0x005f: SGET  (r1 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger com.j256.ormlite.logger.Logger A[Catch:\{ all \-\> 0x0067 \}]\l0x0061: CONST_STR  (r2 I:java.lang.String) =  \"prepared statement arguments: \{\}\" A[Catch:\{ all \-\> 0x0067 \}]\l0x0063: INVOKE  \l  (r1 I:com.j256.ormlite.logger.Logger)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.trace(java.lang.String, java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x0067 \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0066|0x0066: RETURN  (r6 I:com.j256.ormlite.support.CompiledStatement) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x0067: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: CONST_STR  (r1 I:java.lang.String) =  \"statement\" \l0x006a: INVOKE  (r6 I:java.io.Closeable), (r1 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|0x006d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.support.CompiledStatement com.j256.ormlite.stmt.mapped.MappedPreparedStmt.assignStatementArguments((r5 'this' I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r6 I:com.j256.ormlite.support.CompiledStatement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_24;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_20;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_10;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
}

