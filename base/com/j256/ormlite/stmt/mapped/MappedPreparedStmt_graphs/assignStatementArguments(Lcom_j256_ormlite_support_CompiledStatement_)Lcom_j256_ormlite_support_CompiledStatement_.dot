digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.assignStatementArguments(Lcom\/j256\/ormlite\/support\/CompiledStatement;)Lcom\/j256\/ormlite\/support\/CompiledStatement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x0067 \}\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|Catch:\{ all \-\> 0x0067 \}\l|if (r5.limit == null) goto L_0x000d     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|Catch:\{ all \-\> 0x0067 \}\l|r6.setMaxRows(r5.limit.intValue())     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|Catch:\{ all \-\> 0x0067 \}\l|r0 = null     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|Catch:\{ all \-\> 0x0067 \}\l|if (logger.isLevelEnabled(com.j256.ormlite.logger.Log.Level.TRACE) == false) goto L_0x0022     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|Catch:\{ all \-\> 0x0067 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|Catch:\{ all \-\> 0x0067 \}\l|if (r5.argHolders.length \<= 0) goto L_0x0022     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|Catch:\{ all \-\> 0x0067 \}\l|java.lang.Object[] r0 = new java.lang.Object[r5.argHolders.length]     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|Catch:\{ all \-\> 0x0067 \}\lPHI: r0 \l  PHI: (r0v3 java.lang.Object[]) = (r0v2 java.lang.Object[]), (r0v2 java.lang.Object[]), (r0v6 java.lang.Object[]) binds: [B:5:0x0016, B:7:0x001b, B:8:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|r1 = 0     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|LOOP_START\lCatch:\{ all \-\> 0x0067 \}\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v7 int) binds: [B:9:0x0022, B:19:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:10:0x0023\-\>B:19:0x004a\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|Catch:\{ all \-\> 0x0067 \}\l|if (r1 \>= r5.argHolders.length) goto L_0x004d     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|Catch:\{ all \-\> 0x0067 \}\l|java.lang.Object r2 = r5.argHolders[r1].getSqlArgValue()     \/\/ Catch:\{ all \-\> 0x0067 \}\lr3 = r5.argFieldTypes[r1]     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|Catch:\{ all \-\> 0x0067 \}\l|if (r3 != null) goto L_0x003f     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|Catch:\{ all \-\> 0x0067 \}\l|com.j256.ormlite.field.SqlType r3 = r5.argHolders[r1].getSqlType()     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|Catch:\{ all \-\> 0x0067 \}\l|com.j256.ormlite.field.SqlType r3 = r3.getSqlType()     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|Catch:\{ all \-\> 0x0067 \}\lPHI: r3 \l  PHI: (r3v3 com.j256.ormlite.field.SqlType) = (r3v4 com.j256.ormlite.field.SqlType), (r3v7 com.j256.ormlite.field.SqlType) binds: [B:15:0x003f, B:14:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|r6.setObject(r1, r2, r3)     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|Catch:\{ all \-\> 0x0067 \}\l|if (r0 == null) goto L_0x004a     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|Catch:\{ all \-\> 0x0067 \}\l|r0[r1] = r2     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|LOOP_END\lCatch:\{ all \-\> 0x0067 \}\lLOOP:0: B:10:0x0023\-\>B:19:0x004a\l|int r1 = r1 + 1     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_20 [shape=record,label="{20\:\ 0x004d|Catch:\{ all \-\> 0x0067 \}\l|logger.debug(\"prepared statement '\{\}' with \{\} args\", (java.lang.Object) r5.statement, (java.lang.Object) java.lang.Integer.valueOf(r5.argHolders.length))     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|Catch:\{ all \-\> 0x0067 \}\l|if (r0 == null) goto L_0x0066     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|Catch:\{ all \-\> 0x0067 \}\l|logger.trace(\"prepared statement arguments: \{\}\", (java.lang.Object) r0)     \/\/ Catch:\{ all \-\> 0x0067 \}\l}"];
Node_23 [shape=record,label="{23\:\ 0x0066|RETURN\l|return r6\l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|ExcHandler: all (r0v0 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|com.j256.ormlite.misc.IOUtils.closeThrowSqlException(r6, \"statement\")\l}"];
Node_26 [shape=record,label="{26\:\ 0x006d|throw r0\l}"];
Node_27 [shape=record,label="{27\:\ 0x004d|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x004a|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x004a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.support.CompiledStatement com.j256.ormlite.stmt.mapped.MappedPreparedStmt.assignStatementArguments((r5v0 'this' com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r6v0 com.j256.ormlite.support.CompiledStatement A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_24;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_29;
Node_18 -> Node_28;
Node_19 -> Node_10;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_20;
Node_28 -> Node_19;
Node_29 -> Node_19;
}

