digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.\<init\>(Lcom\/j256\/ormlite\/table\/TableInfo;Ljava\/lang\/String;[Lcom\/j256\/ormlite\/field\/FieldType;[Lcom\/j256\/ormlite\/field\/FieldType;[Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;Ljava\/lang\/Long;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.mapped.BaseMappedQuery)\l  (r1 I:com.j256.ormlite.table.TableInfo)\l  (r2 I:java.lang.String)\l  (r3 I:com.j256.ormlite.field.FieldType[])\l  (r4 I:com.j256.ormlite.field.FieldType[])\l com.j256.ormlite.stmt.mapped.BaseMappedQuery.\<init\>(com.j256.ormlite.table.TableInfo, java.lang.String, com.j256.ormlite.field.FieldType[], com.j256.ormlite.field.FieldType[]):void type: DIRECT \l0x0003: IPUT  \l  (r5 I:com.j256.ormlite.stmt.ArgumentHolder[])\l  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] \l0x0005: IPUT  \l  (r6 I:java.lang.Long)\l  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit java.lang.Long \l0x0007: IPUT  \l  (r7 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0009: IPUT  \l  (r8 I:boolean)\l  (r0 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.mapped.MappedPreparedStmt.\<init\>((r0 'this' I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.field.FieldType[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.field.FieldType[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.j256.ormlite.stmt.ArgumentHolder[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.j256.ormlite.stmt.StatementBuilder$StatementType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Ljava\/lang\/String;, [, Lcom\/j256\/ormlite\/field\/FieldType;, [, Lcom\/j256\/ormlite\/field\/FieldType;, [, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, Ljava\/lang\/Long;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;, Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

