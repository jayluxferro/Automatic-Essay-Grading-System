digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.setArgumentHolderValue(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0036 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r2 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] \l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r2 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] \l0x0009: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x000b: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.ArgumentHolder)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.stmt.ArgumentHolder.setValue(java.lang.Object):void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0011: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0013: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"argument holder index \" \l0x0018: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x001e: CONST_STR  (r3 I:java.lang.String) =  \" is not valid, only \" \l0x0020: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0023: IGET  (r3 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r2 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders com.j256.ormlite.stmt.ArgumentHolder[] \l0x0025: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0029: CONST_STR  (r3 I:java.lang.String) =  \" in statement (index starts at 0)\" \l0x002b: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0032: INVOKE  (r4 I:java.sql.SQLException), (r3 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0038: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003a: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003d: CONST_STR  (r1 I:java.lang.String) =  \"argument holder index \" \l0x003f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0045: CONST_STR  (r3 I:java.lang.String) =  \" must be \>= 0\" \l0x0047: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004a: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004e: INVOKE  (r4 I:java.sql.SQLException), (r3 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0051|0x0051: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.mapped.MappedPreparedStmt.setArgumentHolderValue((r2 'this' I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

