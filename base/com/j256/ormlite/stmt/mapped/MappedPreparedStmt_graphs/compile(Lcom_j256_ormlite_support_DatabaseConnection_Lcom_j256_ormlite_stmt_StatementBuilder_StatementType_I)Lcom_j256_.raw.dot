digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.compile(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;I)Lcom\/j256\/ormlite\/support\/CompiledStatement;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r2 I:java.lang.String) = (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement java.lang.String \l0x0006: IGET  (r4 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes com.j256.ormlite.field.FieldType[] \l0x0008: IGET  (r6 I:boolean) = (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore boolean \l0x000a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x000b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r8 I:com.j256.ormlite.support.CompiledStatement) = \l  (r1 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:java.lang.String)\l  (r3 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r4 I:com.j256.ormlite.field.FieldType[])\l  (r5 I:int)\l  (r6 I:boolean)\l com.j256.ormlite.support.DatabaseConnection.compileStatement(java.lang.String, com.j256.ormlite.stmt.StatementBuilder$StatementType, com.j256.ormlite.field.FieldType[], int, boolean):com.j256.ormlite.support.CompiledStatement type: INTERFACE \l0x0011: INVOKE  (r8 I:com.j256.ormlite.support.CompiledStatement) = \l  (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt)\l  (r8 I:com.j256.ormlite.support.CompiledStatement)\l com.j256.ormlite.stmt.mapped.MappedPreparedStmt.assignStatementArguments(com.j256.ormlite.support.CompiledStatement):com.j256.ormlite.support.CompiledStatement type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  (r8 I:com.j256.ormlite.support.CompiledStatement) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: NEW_INSTANCE  (r8 I:java.sql.SQLException) =  java.sql.SQLException \l0x0018: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r0 I:java.lang.String) =  \"Could not compile this \" \l0x001f: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: IGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r7 I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt) com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0024: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST_STR  (r0 I:java.lang.String) =  \" statement since the caller is expecting a \" \l0x0029: INVOKE  (r10 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r10 I:java.lang.StringBuilder), (r9 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002f: CONST_STR  (r9 I:java.lang.String) =  \" statement.  Check your QueryBuilder methods.\" \l0x0031: INVOKE  (r10 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r9 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r8 I:java.sql.SQLException), (r9 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|0x003b: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.support.CompiledStatement com.j256.ormlite.stmt.mapped.MappedPreparedStmt.compile((r7 'this' I:com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r8 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.j256.ormlite.stmt.StatementBuilder$StatementType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

