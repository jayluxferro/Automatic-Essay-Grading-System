digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedPreparedStmt.compile(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$StatementType;I)Lcom\/j256\/ormlite\/support\/CompiledStatement;" {
subgraph cluster_Region_761254176 {
label = "R(1:(2:(2:2|3)|(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1152320984 {
label = "R(2:(2:2|3)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2013587341 {
label = "IF [B:1:0x0002] THEN: R(2:2|3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7.type == r9) goto L_0x0004\l}"];
subgraph cluster_Region_2105704683 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return assignStatementArguments(r8.compileStatement(r7.statement, r9, r7.argFieldTypes, r10, r7.cacheStore))\l}"];
}
}
subgraph cluster_Region_772245674 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x003b|throw new java.sql.SQLException(\"Could not compile this \" + r7.type + \" statement since the caller is expecting a \" + r9 + \" statement.  Check your QueryBuilder methods.\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.support.CompiledStatement com.j256.ormlite.stmt.mapped.MappedPreparedStmt.compile((r7v0 'this' com.j256.ormlite.stmt.mapped.MappedPreparedStmt A[IMMUTABLE_TYPE, THIS]), (r8v0 com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 com.j256.ormlite.stmt.StatementBuilder$StatementType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_0 -> Node_1;
}

