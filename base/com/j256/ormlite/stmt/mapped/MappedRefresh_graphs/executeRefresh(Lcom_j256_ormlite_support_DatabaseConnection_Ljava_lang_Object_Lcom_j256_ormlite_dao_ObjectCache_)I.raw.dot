digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedRefresh.executeRefresh(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/Object;Lcom\/j256\/ormlite\/dao\/ObjectCache;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.field.FieldType) = (r6 I:com.j256.ormlite.stmt.mapped.MappedRefresh) com.j256.ormlite.stmt.mapped.MappedRefresh.idField com.j256.ormlite.field.FieldType \l0x0002: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  (r7 I:java.lang.Object) = \l  (r6 I:com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq)\l  (r7 I:com.j256.ormlite.support.DatabaseConnection)\l  (r0 I:java.lang.Object)\l  (r1 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.execute(com.j256.ormlite.support.DatabaseConnection, java.lang.Object, com.j256.ormlite.dao.ObjectCache):java.lang.Object type: SUPER \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IGET  (r1 I:com.j256.ormlite.field.FieldType[]) = (r6 I:com.j256.ormlite.stmt.mapped.MappedRefresh) com.j256.ormlite.stmt.mapped.MappedRefresh.resultsFieldTypes com.j256.ormlite.field.FieldType[] \l0x0011: ARRAY_LENGTH  (r2 I:int) = (r1 I:?[]) \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: AGET  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0017: IGET  (r5 I:com.j256.ormlite.field.FieldType) = (r6 I:com.j256.ormlite.stmt.mapped.MappedRefresh) com.j256.ormlite.stmt.mapped.MappedRefresh.idField com.j256.ormlite.field.FieldType \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r5 I:java.lang.Object) = \l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r7 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x001f: INVOKE  \l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r8 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l  (r0 I:boolean)\l  (r9 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignField(java.lang.Object, java.lang.Object, boolean, com.j256.ormlite.dao.ObjectCache):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.stmt.mapped.MappedRefresh.executeRefresh((r6 'this' I:com.j256.ormlite.stmt.mapped.MappedRefresh A[IMMUTABLE_TYPE, THIS]), (r7 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, TT;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, )I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_9 -> Node_10;
}

