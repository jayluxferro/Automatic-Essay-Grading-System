digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedCreate.foreignCollectionsAreAssigned([Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0007: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:com.j256.ormlite.field.FieldType)\l  (r6 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r1 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.j256.ormlite.stmt.mapped.MappedCreate.foreignCollectionsAreAssigned((r4 'this' I:com.j256.ormlite.stmt.mapped.MappedCreate A[IMMUTABLE_TYPE, THIS]), (r5 I:com.j256.ormlite.field.FieldType[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

