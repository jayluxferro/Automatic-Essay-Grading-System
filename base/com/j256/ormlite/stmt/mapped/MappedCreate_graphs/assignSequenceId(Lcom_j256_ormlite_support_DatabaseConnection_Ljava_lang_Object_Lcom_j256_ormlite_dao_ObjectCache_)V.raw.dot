digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedCreate.assignSequenceId(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/Object;Lcom\/j256\/ormlite\/dao\/ObjectCache;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt java.lang.String \l0x0002: INVOKE  (r0 I:long) = \l  (r6 I:com.j256.ormlite.support.DatabaseConnection)\l  (r0 I:java.lang.String)\l com.j256.ormlite.support.DatabaseConnection.queryForLong(java.lang.String):long type: INTERFACE \l0x0006: SGET  (r6 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedCreate.logger com.j256.ormlite.logger.Logger \l0x0008: CONST_STR  (r2 I:java.lang.String) =  \"queried for sequence \{\} using stmt: \{\}\" \l0x000a: INVOKE  (r3 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x000e: IGET  (r4 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt java.lang.String \l0x0010: INVOKE  \l  (r6 I:com.j256.ormlite.logger.Logger)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL \l0x0013: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0015: CMP_L  (r6 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: INVOKE  (r6 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x001d: CONST_STR  (r0 I:java.lang.String) =  \"sequence\" \l0x001f: INVOKE  \l  (r5 I:com.j256.ormlite.stmt.mapped.MappedCreate)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Number)\l  (r0 I:java.lang.String)\l  (r8 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.stmt.mapped.MappedCreate.assignIdValue(java.lang.Object, java.lang.Number, java.lang.String, com.j256.ormlite.dao.ObjectCache):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: NEW_INSTANCE  (r6 I:java.sql.SQLException) =  java.sql.SQLException \l0x0025: NEW_INSTANCE  (r7 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: INVOKE  (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002a: CONST_STR  (r8 I:java.lang.String) =  \"Should not have returned 0 for stmt: \" \l0x002c: INVOKE  (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: IGET  (r8 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt java.lang.String \l0x0031: INVOKE  (r7 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r6 I:java.sql.SQLException), (r7 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|0x003b: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.mapped.MappedCreate.assignSequenceId((r5 'this' I:com.j256.ormlite.stmt.mapped.MappedCreate A[IMMUTABLE_TYPE, THIS]), (r6 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, TT;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

