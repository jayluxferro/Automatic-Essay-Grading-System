digraph "CFG forcom.j256.ormlite.stmt.mapped.MappedCreate.assignIdValue(Ljava\/lang\/Object;Ljava\/lang\/Number;Ljava\/lang\/String;Lcom\/j256\/ormlite\/dao\/ObjectCache;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.idField com.j256.ormlite.field.FieldType \l0x0002: INVOKE  \l  (r0 I:com.j256.ormlite.field.FieldType)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Number)\l  (r6 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.field.FieldType.assignIdValue(java.lang.Object, java.lang.Number, com.j256.ormlite.dao.ObjectCache):java.lang.Object type: VIRTUAL \l0x0005: SGET  (r3 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedCreate.logger com.j256.ormlite.logger.Logger \l0x0007: SGET  (r6 I:com.j256.ormlite.logger.Log$Level) =  com.j256.ormlite.logger.Log.Level.DEBUG com.j256.ormlite.logger.Log$Level \l0x0009: INVOKE  (r3 I:boolean) = \l  (r3 I:com.j256.ormlite.logger.Logger)\l  (r6 I:com.j256.ormlite.logger.Log$Level)\l com.j256.ormlite.logger.Logger.isLevelEnabled(com.j256.ormlite.logger.Log$Level):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: SGET  (r3 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.stmt.mapped.MappedCreate.logger com.j256.ormlite.logger.Logger \l0x0011: CONST_STR  (r6 I:java.lang.String) =  \"assigned id '\{\}' from \{\} to '\{\}' in \{\} object\" \l0x0013: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0014: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0019: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x001c: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001d: IGET  (r5 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.idField com.j256.ormlite.field.FieldType \l0x001f: INVOKE  (r5 I:java.lang.String) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getFieldName():java.lang.String type: VIRTUAL \l0x0023: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0025: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0026: IGET  (r5 I:java.lang.String) = (r2 I:com.j256.ormlite.stmt.mapped.MappedCreate) com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName java.lang.String \l0x0028: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x002a: INVOKE  \l  (r3 I:com.j256.ormlite.logger.Logger)\l  (r6 I:java.lang.String)\l  (r0 I:java.lang.Object[])\l com.j256.ormlite.logger.Logger.debug(java.lang.String, java.lang.Object[]):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.mapped.MappedCreate.assignIdValue((r2 'this' I:com.j256.ormlite.stmt.mapped.MappedCreate A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:com.j256.ormlite.dao.ObjectCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;, Ljava\/lang\/Number;, Ljava\/lang\/String;, Lcom\/j256\/ormlite\/dao\/ObjectCache;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

