digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendSelects(Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r8.type = com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r8.selectList != null) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r8.addTableName == false) goto L_0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|appendTableQualifier(r9)\lr9.append('.')\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r9.append(\"* \")\lr8.resultFieldTypes = r8.tableInfo.getFieldTypes()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|boolean r0 = r8.isInnerQuery\ljava.util.ArrayList r1 = new java.util.ArrayList(r8.selectList.size() + 1)\ljava.util.Iterator r2 = r8.selectList.iterator()\lr4 = r0\lr0 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|LOOP_START\lPHI: r0 r4 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v12 boolean) binds: [B:7:0x0022, B:37:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean) binds: [B:7:0x0022, B:37:0x0039] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0039\-\>B:37:0x0039\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|if (r2.hasNext() == false) goto L_0x0087\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|com.j256.ormlite.stmt.query.ColumnNameOrRawSql r5 = r2.next()\l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|if (r5.getRawSql() == null) goto L_0x0061\l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|r8.type = com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_RAW\l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|if (r0 == false) goto L_0x0054\l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|r0 = false\l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|r9.append(\", \")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|PHI: r0 \l  PHI: (r0v15 boolean) = (r0v4 boolean), (r0v16 boolean) binds: [B:15:0x0054, B:14:0x0052] A[DONT_GENERATE, DONT_INLINE]\l|r9.append(r5.getRawSql())\l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|com.j256.ormlite.field.FieldType r5 = r8.tableInfo.getFieldTypeByColumnName(r5.getColumnName())\l}"];
Node_18 [shape=record,label="{18\:\ 0x006f|if (r5.isForeignCollection() == false) goto L_0x0075\l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|r1.add(r5)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|if (r0 == false) goto L_0x0079\l}"];
Node_21 [shape=record,label="{21\:\ 0x0077|r0 = false\l}"];
Node_22 [shape=record,label="{22\:\ 0x0079|r9.append(\", \")\l}"];
Node_23 [shape=record,label="{23\:\ 0x007e|PHI: r0 \l  PHI: (r0v13 boolean) = (r0v4 boolean), (r0v14 boolean) binds: [B:22:0x0079, B:21:0x0077] A[DONT_GENERATE, DONT_INLINE]\l|appendFieldColumnName(r9, r5, r1)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0083|if (r5 != r8.idField) goto L_0x0039\l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|r4 = true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0087}"];
Node_27 [shape=record,label="{27\:\ 0x008b|if (r8.type == com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_RAW) goto L_0x00ad\l}"];
Node_28 [shape=record,label="{28\:\ 0x008d|if (r4 != false) goto L_0x009f\l}"];
Node_29 [shape=record,label="{29\:\ 0x008f}"];
Node_30 [shape=record,label="{30\:\ 0x0091|if (r8.selectIdColumn == false) goto L_0x009f\l}"];
Node_31 [shape=record,label="{31\:\ 0x0093|if (r0 != false) goto L_0x009a\l}"];
Node_32 [shape=record,label="{32\:\ 0x0095|r9.append(',')\l}"];
Node_33 [shape=record,label="{33\:\ 0x009a|appendFieldColumnName(r9, r8.idField, r1)\l}"];
Node_34 [shape=record,label="{34\:\ 0x009f|r8.resultFieldTypes = (com.j256.ormlite.field.FieldType[]) r1.toArray(new com.j256.ormlite.field.FieldType[r1.size()])\l}"];
Node_35 [shape=record,label="{35\:\ 0x00ad|r9.append(' ')\l}"];
Node_36 [shape=record,label="{36\:\ 0x00b2|RETURN\l|return\l}"];
Node_37 [shape=record,label="{37\:\ 0x0039|LOOP_END\lSYNTHETIC\lPHI: r0 r4 \l  PHI: (r0v12 boolean) = (r0v13 boolean), (r0v13 boolean), (r0v4 boolean), (r0v15 boolean) binds: [B:41:0x0039, B:42:0x0039, B:40:0x0039, B:39:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 boolean) = (r4v1 boolean), (r4v3 boolean), (r4v1 boolean), (r4v1 boolean) binds: [B:41:0x0039, B:42:0x0039, B:40:0x0039, B:39:0x0039] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0039\-\>B:37:0x0039\l}"];
Node_38 [shape=record,label="{38\:\ 0x0087|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0039|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0039|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0039|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0039|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendSelects((r8v0 'this' com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r9v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_38;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_39;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_40;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_41;
Node_25 -> Node_42;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_37 -> Node_8;
Node_38 -> Node_26;
Node_39 -> Node_37;
Node_40 -> Node_37;
Node_41 -> Node_37;
Node_42 -> Node_37;
}

