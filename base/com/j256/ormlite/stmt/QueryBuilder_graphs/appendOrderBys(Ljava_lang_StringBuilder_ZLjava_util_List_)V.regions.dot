digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendOrderBys(Ljava\/lang\/StringBuilder;ZLjava\/util\/List;)V" {
subgraph cluster_Region_1741780235 {
label = "R(4:(1:1)|2|(3:5|(1:7)(1:8)|(2:11|(1:13)(0))(2:14|(2:16|(1:18))(0)))|19)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_839536611 {
label = "IF [B:0:0x0000] THEN: R(1:1) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 == true) goto L_0x0002\l}"];
subgraph cluster_Region_670109882 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|r6.append(\"ORDER BY \")\l}"];
}
}
Node_2 [shape=record,label="{2\:\ 0x0007|java.util.Iterator r0 = r5.orderByList.iterator()\l}"];
subgraph cluster_LoopRegion_1397166407 {
label = "LOOP:0: (3:5|(1:7)(1:8)|(2:11|(1:13)(0))(2:14|(2:16|(1:18))(0)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r0.hasNext() != false) goto L_0x0013\l}"];
subgraph cluster_Region_1648485196 {
label = "R(3:5|(1:7)(1:8)|(2:11|(1:13)(0))(2:14|(2:16|(1:18))(0)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|com.j256.ormlite.stmt.query.OrderBy r1 = r0.next()\lint r2 = 0\l}"];
subgraph cluster_IfRegion_1070747401 {
label = "IF [B:6:0x001a] THEN: R(1:7) ELSE: R(1:8)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001a|if (r7 == true) goto L_0x001c\l}"];
subgraph cluster_Region_1606908487 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001c|r7 = false\l}"];
}
subgraph cluster_Region_1880937925 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001e|r6.append(',')\l}"];
}
}
subgraph cluster_IfRegion_465190824 {
label = "IF [B:10:0x0027] THEN: R(2:11|(1:13)(0)) ELSE: R(2:14|(2:16|(1:18))(0))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0027|if (r1.getRawSql() == null) goto L_0x0029\l}"];
subgraph cluster_Region_910004689 {
label = "R(2:11|(1:13)(0))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0029|appendColumnName(r6, r1.getColumnName())\l}"];
subgraph cluster_IfRegion_1389150227 {
label = "IF [B:12:0x0034] THEN: R(1:13) ELSE: R(0)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0034|if (r1.isAscending() != true) goto L_0x0037\l}"];
subgraph cluster_Region_1156093298 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0037|r6.append(\" DESC\")\l}"];
}
subgraph cluster_Region_241542456 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1410080316 {
label = "R(2:14|(2:16|(1:18))(0))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x003d|r6.append(r1.getRawSql())\l}"];
subgraph cluster_IfRegion_1618247926 {
label = "IF [B:15:0x0048] THEN: R(2:16|(1:18)) ELSE: R(0)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0048|if (r1.getOrderByArgs() != null) goto L_0x004a\l}"];
subgraph cluster_Region_524795194 {
label = "R(2:16|(1:18))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x004a|int int r3 = r1.getOrderByArgs().length\l}"];
subgraph cluster_LoopRegion_1614273167 {
label = "LOOP:1: (1:18)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x004f|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:16:0x004a, B:18:0x0051] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:17:0x004f\-\>B:18:0x0051\l|if (r2 \< r3) goto L_0x0051\l}"];
subgraph cluster_Region_1193480705 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0051|LOOP_END\lLOOP:1: B:17:0x004f\-\>B:18:0x0051\l|r8.add(r4)\lr2++\l}"];
}
}
}
subgraph cluster_Region_1138290644 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
Node_19 [shape=record,label="{19\:\ 0x0059|r6.append(' ')\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x000d|LOOP_START\lPHI: r7 \l  PHI: (r7v1 boolean) = (r7v0 boolean), (r7v3 boolean) binds: [B:2:0x0007, B:21:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000d\-\>B:21:0x000d\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0023|PHI: r7 \l  PHI: (r7v3 boolean) = (r7v1 boolean), (r7v4 boolean) binds: [B:8:0x001e, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x005e}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x000d|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000d\-\>B:21:0x000d\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0059|SYNTHETIC\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x000d|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000d|SYNTHETIC\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x000d|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendOrderBys((r5v0 'this' com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Z, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_22[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_23[style=dashed];
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_25[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_26[style=dashed];
Node_18 -> Node_17;
Node_19 -> Node_20;
Node_3 -> Node_4;
Node_9 -> Node_10;
Node_21 -> Node_3;
Node_22 -> Node_19;
Node_23 -> Node_21;
Node_24 -> Node_21;
Node_25 -> Node_21;
Node_26 -> Node_21;
}

