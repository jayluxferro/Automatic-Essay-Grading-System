digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendStatementEnd(Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r1 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendGroupBys(java.lang.StringBuilder):void type: DIRECT \l0x0003: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r1 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendHaving(java.lang.StringBuilder):void type: DIRECT \l0x0006: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r1 I:java.lang.StringBuilder)\l  (r2 I:java.util.List)\l com.j256.ormlite.stmt.QueryBuilder.appendOrderBys(java.lang.StringBuilder, java.util.List):void type: DIRECT \l0x0009: IGET  (r2 I:com.j256.ormlite.db.DatabaseType) = (r0 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x000b: INVOKE  (r2 I:boolean) = (r2 I:com.j256.ormlite.db.DatabaseType) com.j256.ormlite.db.DatabaseType.isLimitAfterSelect():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r1 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendLimit(java.lang.StringBuilder):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r1 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendOffset(java.lang.StringBuilder):void type: DIRECT \l0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: INVOKE  (r0 I:com.j256.ormlite.stmt.QueryBuilder), (r1 I:boolean) com.j256.ormlite.stmt.QueryBuilder.setAddTableName(boolean):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.QueryBuilder.appendStatementEnd((r0 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

