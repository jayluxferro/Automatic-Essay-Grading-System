digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendJoinSql(Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r5.joinList.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:10:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() == false) goto L_0x0075\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|com.j256.ormlite.stmt.QueryBuilder$JoinInfo r1 = r0.next()\lr6.append(com.j256.ormlite.stmt.QueryBuilder.JoinType.access$100(r1.type))\lr6.append(\" JOIN \")\lr5.databaseType.appendEscapedEntityName(r6, r1.queryBuilder.tableName)\l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|if (r1.queryBuilder.alias == null) goto L_0x0034\l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|r1.queryBuilder.appendAlias(r6)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|r6.append(\" ON \")\lappendTableQualifier(r6)\lr6.append('.')\lr5.databaseType.appendEscapedEntityName(r6, r1.localField.getColumnName())\lr6.append(\" = \")\lr1.queryBuilder.appendTableQualifier(r6)\lr6.append('.')\lr5.databaseType.appendEscapedEntityName(r6, r1.remoteField.getColumnName())\lr6.append(' ')\l}"];
Node_7 [shape=record,label="{7\:\ 0x006d|if (r1.queryBuilder.joinList == null) goto L_0x0006\l}"];
Node_8 [shape=record,label="{8\:\ 0x006f|r1.queryBuilder.appendJoinSql(r6)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0075|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0006\-\>B:10:0x0006\l}"];
Node_11 [shape=record,label="{11\:\ 0x0075|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendJoinSql((r5v0 'this' com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_13;
Node_10 -> Node_1;
Node_11 -> Node_9;
Node_12 -> Node_10;
Node_13 -> Node_10;
}

