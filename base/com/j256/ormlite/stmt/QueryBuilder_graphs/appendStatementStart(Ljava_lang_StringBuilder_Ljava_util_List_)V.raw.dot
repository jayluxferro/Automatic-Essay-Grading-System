digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendStatementStart(Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:java.util.List\<com.j256.ormlite.stmt.QueryBuilder\<T, ID\>$JoinInfo\>) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.joinList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  (r1 I:com.j256.ormlite.stmt.QueryBuilder), (r3 I:boolean) com.j256.ormlite.stmt.QueryBuilder.setAddTableName(boolean):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: INVOKE  (r1 I:com.j256.ormlite.stmt.QueryBuilder), (r3 I:boolean) com.j256.ormlite.stmt.QueryBuilder.setAddTableName(boolean):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST_STR  (r3 I:java.lang.String) =  \"SELECT \" \l0x000f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0012: IGET  (r3 I:com.j256.ormlite.db.DatabaseType) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0014: INVOKE  (r3 I:boolean) = (r3 I:com.j256.ormlite.db.DatabaseType) com.j256.ormlite.db.DatabaseType.isLimitAfterSelect():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r2 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendLimit(java.lang.StringBuilder):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r3 I:boolean) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.distinct boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: CONST_STR  (r3 I:java.lang.String) =  \"DISTINCT \" \l0x0023: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IGET  (r3 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.countOfQuery java.lang.String \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002e \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r2 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendSelects(java.lang.StringBuilder):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: SGET  (r3 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_LONG com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0030: IPUT  \l  (r3 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0032: CONST_STR  (r3 I:java.lang.String) =  \"COUNT(\" \l0x0034: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: IGET  (r3 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.countOfQuery java.lang.String \l0x0039: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: CONST_STR  (r3 I:java.lang.String) =  \") \" \l0x003e: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CONST_STR  (r3 I:java.lang.String) =  \"FROM \" \l0x0043: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: IGET  (r3 I:com.j256.ormlite.db.DatabaseType) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0048: IGET  (r0 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.tableName java.lang.String \l0x004a: INVOKE  \l  (r3 I:com.j256.ormlite.db.DatabaseType)\l  (r2 I:java.lang.StringBuilder)\l  (r0 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x004d: IGET  (r3 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.alias java.lang.String \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0054 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r2 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendAlias(java.lang.StringBuilder):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: CONST  (r3 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0056: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0059: IGET  (r3 I:java.util.List\<com.j256.ormlite.stmt.QueryBuilder\<T, ID\>$JoinInfo\>) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.joinList java.util.List \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0060 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r2 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendJoinSql(java.lang.StringBuilder):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|0x0060: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.QueryBuilder.appendStatementStart((r1 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
}

