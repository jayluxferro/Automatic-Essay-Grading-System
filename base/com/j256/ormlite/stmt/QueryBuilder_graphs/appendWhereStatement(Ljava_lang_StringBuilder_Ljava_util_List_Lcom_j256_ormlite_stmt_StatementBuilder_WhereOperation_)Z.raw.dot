digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendWhereStatement(Ljava\/lang\/StringBuilder;Ljava\/util\/List;Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation) =  com.j256.ormlite.stmt.StatementBuilder.WhereOperation.FIRST com.j256.ormlite.stmt.StatementBuilder$WhereOperation \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r1 I:com.j256.ormlite.stmt.Where) = (r2 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.where com.j256.ormlite.stmt.Where \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INVOKE  (r0 I:boolean) = \l  (r2 I:com.j256.ormlite.stmt.StatementBuilder)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:java.util.List)\l  (r5 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation)\l com.j256.ormlite.stmt.StatementBuilder.appendWhereStatement(java.lang.StringBuilder, java.util.List, com.j256.ormlite.stmt.StatementBuilder$WhereOperation):boolean type: SUPER \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IGET  (r5 I:java.util.List\<com.j256.ormlite.stmt.QueryBuilder\<T, ID\>$JoinInfo\>) = (r2 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.joinList java.util.List \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0037 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r5 I:java.util.List\<com.j256.ormlite.stmt.QueryBuilder\<T, ID\>$JoinInfo\>) = (r2 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.joinList java.util.List \l0x0015: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: INVOKE  (r1 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0037 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: INVOKE  (r1 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0023: CHECK_CAST  (r1 I:com.j256.ormlite.stmt.QueryBuilder$JoinInfo) = (com.j256.ormlite.stmt.QueryBuilder$JoinInfo) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: SGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation) =  com.j256.ormlite.stmt.StatementBuilder.WhereOperation.FIRST com.j256.ormlite.stmt.StatementBuilder$WhereOperation \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IGET  (r0 I:com.j256.ormlite.stmt.QueryBuilder$JoinWhereOperation) = (r1 I:com.j256.ormlite.stmt.QueryBuilder$JoinInfo) com.j256.ormlite.stmt.QueryBuilder.JoinInfo.operation com.j256.ormlite.stmt.QueryBuilder$JoinWhereOperation \l0x002c: INVOKE  (r0 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation) = \l  (r0 I:com.j256.ormlite.stmt.QueryBuilder$JoinWhereOperation)\l com.j256.ormlite.stmt.QueryBuilder.JoinWhereOperation.access$000(com.j256.ormlite.stmt.QueryBuilder$JoinWhereOperation):com.j256.ormlite.stmt.StatementBuilder$WhereOperation type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: IGET  (r1 I:com.j256.ormlite.stmt.QueryBuilder\<?, ?\>) = (r1 I:com.j256.ormlite.stmt.QueryBuilder$JoinInfo) com.j256.ormlite.stmt.QueryBuilder.JoinInfo.queryBuilder com.j256.ormlite.stmt.QueryBuilder \l0x0032: INVOKE  (r0 I:boolean) = \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:java.util.List)\l  (r0 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation)\l com.j256.ormlite.stmt.QueryBuilder.appendWhereStatement(java.lang.StringBuilder, java.util.List, com.j256.ormlite.stmt.StatementBuilder$WhereOperation):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean com.j256.ormlite.stmt.QueryBuilder.appendWhereStatement((r2 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.j256.ormlite.stmt.StatementBuilder$WhereOperation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;, Lcom\/j256\/ormlite\/stmt\/StatementBuilder$WhereOperation;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

