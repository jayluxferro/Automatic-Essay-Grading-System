digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendOrderBys(Ljava\/lang\/StringBuilder;ZLjava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0007 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST_STR  (r0 I:java.lang.String) =  \"ORDER BY \" \l0x0004: INVOKE  (r6 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.OrderBy\>) = (r5 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.orderByList java.util.List \l0x0009: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0059 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r1 I:com.j256.ormlite.stmt.query.OrderBy) = (com.j256.ormlite.stmt.query.OrderBy) (r1 I:?[OBJECT, ARRAY]) \l0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: CONST  (r3 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0020: INVOKE  (r6 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r3 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.getRawSql():java.lang.String type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r2 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.getColumnName():java.lang.String type: VIRTUAL \l0x002d: INVOKE  \l  (r5 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r6 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l com.j256.ormlite.stmt.QueryBuilder.appendColumnName(java.lang.StringBuilder, java.lang.String):void type: DIRECT \l0x0030: INVOKE  (r1 I:boolean) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.isAscending():boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: CONST_STR  (r1 I:java.lang.String) =  \" DESC\" \l0x0039: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: INVOKE  (r3 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.getRawSql():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r6 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r3 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.getOrderByArgs():com.j256.ormlite.stmt.ArgumentHolder[] type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: INVOKE  (r1 I:com.j256.ormlite.stmt.ArgumentHolder[]) = (r1 I:com.j256.ormlite.stmt.query.OrderBy) com.j256.ormlite.stmt.query.OrderBy.getOrderByArgs():com.j256.ormlite.stmt.ArgumentHolder[] type: VIRTUAL \l0x004e: ARRAY_LENGTH  (r3 I:int) = (r1 I:?[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004f|0x004f: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: AGET  (r4 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0053: INVOKE  (r8 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0056: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|0x0059: CONST  (r7 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x005b: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|0x005e: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendOrderBys((r5 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/StringBuilder;, Z, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_3[style=dashed];
Node_14 -> Node_3;
Node_15 -> Node_16;
Node_16 -> Node_3;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_3;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_18;
Node_20 -> Node_21;
}

