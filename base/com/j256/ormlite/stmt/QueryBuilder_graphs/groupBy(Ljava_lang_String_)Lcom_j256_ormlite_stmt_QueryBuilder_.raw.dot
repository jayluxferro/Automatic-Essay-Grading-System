digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.groupBy(Ljava\/lang\/String;)Lcom\/j256\/ormlite\/stmt\/QueryBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.j256.ormlite.field.FieldType) = \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r4 I:java.lang.String)\l com.j256.ormlite.stmt.QueryBuilder.verifyColumnName(java.lang.String):com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r4 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) = (r4 I:java.lang.String) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.withColumnName(java.lang.String):com.j256.ormlite.stmt.query.ColumnNameOrRawSql type: STATIC \l0x000e: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r4 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql)\l com.j256.ormlite.stmt.QueryBuilder.addGroupBy(com.j256.ormlite.stmt.query.ColumnNameOrRawSql):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: RETURN  (r3 I:com.j256.ormlite.stmt.QueryBuilder\<T, ID\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0014: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0016: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0019: CONST_STR  (r2 I:java.lang.String) =  \"Can't groupBy foreign colletion field: \" \l0x001b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001e: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0025: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.QueryBuilder\<T, ID\> com.j256.ormlite.stmt.QueryBuilder.groupBy((r3 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

