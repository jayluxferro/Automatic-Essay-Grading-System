digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.selectRaw([Ljava\/lang\/String;)Lcom\/j256\/ormlite\/stmt\/QueryBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0006: INVOKE  (r2 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) = (r2 I:java.lang.String) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.withRawSql(java.lang.String):com.j256.ormlite.stmt.query.ColumnNameOrRawSql type: STATIC \l0x000a: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r2 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql)\l com.j256.ormlite.stmt.QueryBuilder.addSelectToList(com.j256.ormlite.stmt.query.ColumnNameOrRawSql):void type: DIRECT \l0x000d: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r3 I:com.j256.ormlite.stmt.QueryBuilder\<T, ID\>) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.QueryBuilder\<T, ID\> com.j256.ormlite.stmt.QueryBuilder.selectRaw((r3 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([, Ljava\/lang\/String;, ), Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

