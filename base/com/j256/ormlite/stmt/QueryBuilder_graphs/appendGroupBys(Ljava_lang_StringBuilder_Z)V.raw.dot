digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendGroupBys(Ljava\/lang\/StringBuilder;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0007 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST_STR  (r0 I:java.lang.String) =  \"GROUP BY \" \l0x0004: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.groupByList java.util.List \l0x0009: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: CHECK_CAST  (r1 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) = (com.j256.ormlite.stmt.query.ColumnNameOrRawSql) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x001f: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getRawSql():java.lang.String type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getColumnName():java.lang.String type: VIRTUAL \l0x002c: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r4 I:java.lang.StringBuilder)\l  (r1 I:java.lang.String)\l com.j256.ormlite.stmt.QueryBuilder.appendColumnName(java.lang.StringBuilder, java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getRawSql():java.lang.String type: VIRTUAL \l0x0034: INVOKE  (r4 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: CONST  (r5 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x003a: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendGroupBys((r3 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_3;
Node_12 -> Node_3;
Node_13 -> Node_14;
}

