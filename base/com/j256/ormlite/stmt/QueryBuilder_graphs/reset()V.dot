digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.reset()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.reset()\lr3.distinct = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r3.idField == null) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|r1 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|r1 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v10 boolean), (r1v11 boolean) binds: [B:3:0x000c, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|r3.selectIdColumn = r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (r3.selectList == null) goto L_0x001b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|r3.selectList.clear()\lr3.selectList = null\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if (r3.orderByList == null) goto L_0x0026\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|r3.orderByList.clear()\lr3.orderByList = null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026}"];
Node_11 [shape=record,label="{11\:\ 0x0028|if (r3.groupByList == null) goto L_0x0031\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|r3.groupByList.clear()\lr3.groupByList = null\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|r3.isInnerQuery = false\lr3.countOfQuery = null\lr3.having = null\lr3.limit = null\lr3.offset = null\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|if (r3.joinList == null) goto L_0x0046\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|r3.joinList.clear()\lr3.joinList = null\l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|r3.addTableName = false\lr3.alias = null\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.QueryBuilder.reset((r3v0 'this' com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

