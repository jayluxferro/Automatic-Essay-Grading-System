digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendSelects(Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0002: IPUT  \l  (r0 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0004: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.selectList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:boolean) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.addTableName boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r9 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.QueryBuilder.appendTableQualifier(java.lang.StringBuilder):void type: VIRTUAL \l0x000f: CONST  (r0 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST_STR  (r0 I:java.lang.String) =  \"* \" \l0x0016: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0019: IGET  (r9 I:com.j256.ormlite.table.TableInfo) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.tableInfo com.j256.ormlite.table.TableInfo \l0x001b: INVOKE  (r9 I:com.j256.ormlite.field.FieldType[]) = (r9 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x001f: IPUT  \l  (r9 I:com.j256.ormlite.field.FieldType[])\l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.resultFieldTypes com.j256.ormlite.field.FieldType[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IGET  (r0 I:boolean) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.isInnerQuery boolean \l0x0024: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0026: IGET  (r2 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.selectList java.util.List \l0x0028: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x002c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002d: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x002e: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0031: IGET  (r2 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.selectList java.util.List \l0x0033: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0037: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: INVOKE  (r5 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0087 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: INVOKE  (r5 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0043: CHECK_CAST  (r5 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) = (com.j256.ormlite.stmt.query.ColumnNameOrRawSql) (r5 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  (r6 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getRawSql():java.lang.String type: VIRTUAL \l0x0049: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|0x004a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0061 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: SGET  (r6 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_RAW com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x004e: IPUT  \l  (r6 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0054 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|0x0054: CONST_STR  (r6 I:java.lang.String) =  \", \" \l0x0056: INVOKE  (r9 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: INVOKE  (r5 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getRawSql():java.lang.String type: VIRTUAL \l0x005d: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: IGET  (r6 I:com.j256.ormlite.table.TableInfo) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.tableInfo com.j256.ormlite.table.TableInfo \l0x0063: INVOKE  (r5 I:java.lang.String) = (r5 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql) com.j256.ormlite.stmt.query.ColumnNameOrRawSql.getColumnName():java.lang.String type: VIRTUAL \l0x0067: INVOKE  (r5 I:com.j256.ormlite.field.FieldType) = \l  (r6 I:com.j256.ormlite.table.TableInfo)\l  (r5 I:java.lang.String)\l com.j256.ormlite.table.TableInfo.getFieldTypeByColumnName(java.lang.String):com.j256.ormlite.field.FieldType type: VIRTUAL \l0x006b: INVOKE  (r6 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x006f|0x006f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0075 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|0x0071: INVOKE  (r1 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|0x0075: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0079 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0077|0x0077: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0079|0x0079: CONST_STR  (r6 I:java.lang.String) =  \", \" \l0x007b: INVOKE  (r9 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x007e|0x007e: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r9 I:java.lang.StringBuilder)\l  (r5 I:com.j256.ormlite.field.FieldType)\l  (r1 I:java.util.List)\l com.j256.ormlite.stmt.QueryBuilder.appendFieldColumnName(java.lang.StringBuilder, com.j256.ormlite.field.FieldType, java.util.List):void type: DIRECT \l0x0081: IGET  (r6 I:com.j256.ormlite.field.FieldType) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.idField com.j256.ormlite.field.FieldType \l}"];
Node_24 [shape=record,label="{24\:\ 0x0083|0x0083: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0039 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0085|0x0085: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0087|0x0087: IGET  (r2 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.type com.j256.ormlite.stmt.StatementBuilder$StatementType \l0x0089: SGET  (r3 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT_RAW com.j256.ormlite.stmt.StatementBuilder$StatementType \l}"];
Node_27 [shape=record,label="{27\:\ 0x008b|0x008b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00ad \l}"];
Node_28 [shape=record,label="{28\:\ 0x008d|0x008d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x009f \l}"];
Node_29 [shape=record,label="{29\:\ 0x008f|0x008f: IGET  (r2 I:boolean) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.selectIdColumn boolean \l}"];
Node_30 [shape=record,label="{30\:\ 0x0091|0x0091: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x009f \l}"];
Node_31 [shape=record,label="{31\:\ 0x0093|0x0093: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x009a \l}"];
Node_32 [shape=record,label="{32\:\ 0x0095|0x0095: CONST  (r0 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x0097: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_33 [shape=record,label="{33\:\ 0x009a|0x009a: IGET  (r0 I:com.j256.ormlite.field.FieldType) = (r8 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.idField com.j256.ormlite.field.FieldType \l0x009c: INVOKE  \l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l  (r9 I:java.lang.StringBuilder)\l  (r0 I:com.j256.ormlite.field.FieldType)\l  (r1 I:java.util.List)\l com.j256.ormlite.stmt.QueryBuilder.appendFieldColumnName(java.lang.StringBuilder, com.j256.ormlite.field.FieldType, java.util.List):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x009f|0x009f: INVOKE  (r0 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x00a3: NEW_ARRAY  (r0 I:com.j256.ormlite.field.FieldType[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x00a5: INVOKE  (r0 I:java.lang.Object[]) = (r1 I:java.util.List), (r0 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x00a9: CHECK_CAST  (r0 I:com.j256.ormlite.field.FieldType[]) = (com.j256.ormlite.field.FieldType[]) (r0 I:?[OBJECT, ARRAY]) \l0x00ab: IPUT  \l  (r0 I:com.j256.ormlite.field.FieldType[])\l  (r8 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.resultFieldTypes com.j256.ormlite.field.FieldType[] \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ad|0x00ad: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x00af: INVOKE  (r9 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b2|0x00b2: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendSelects((r8 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_26;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_8;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_8;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_8;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_8;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
}

