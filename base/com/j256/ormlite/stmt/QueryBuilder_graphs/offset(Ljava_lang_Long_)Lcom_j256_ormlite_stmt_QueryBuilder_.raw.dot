digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.offset(Ljava\/lang\/Long;)Lcom\/j256\/ormlite\/stmt\/QueryBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.db.DatabaseType) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:com.j256.ormlite.db.DatabaseType) com.j256.ormlite.db.DatabaseType.isOffsetSqlSupported():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IPUT  \l  (r2 I:java.lang.Long)\l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.offset java.lang.Long \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r1 I:com.j256.ormlite.stmt.QueryBuilder\<T, ID\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r2 I:java.sql.SQLException) =  java.sql.SQLException \l0x000d: CONST_STR  (r0 I:java.lang.String) =  \"Offset is not supported by this database\" \l0x000f: INVOKE  (r2 I:java.sql.SQLException), (r0 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.stmt.QueryBuilder\<T, ID\> com.j256.ormlite.stmt.QueryBuilder.offset((r1 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Long;, ), Lcom\/j256\/ormlite\/stmt\/QueryBuilder\<, TT;TID;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

