digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendOffset(Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.Long) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.offset java.lang.Long \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:com.j256.ormlite.db.DatabaseType) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x0007: INVOKE  (r0 I:boolean) = (r0 I:com.j256.ormlite.db.DatabaseType) com.j256.ormlite.db.DatabaseType.isOffsetLimitArgument():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r4 I:java.lang.Long) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.limit java.lang.Long \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"If the offset is specified, limit must also be specified with this database\" \l0x0016: INVOKE  (r4 I:java.sql.SQLException), (r0 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IGET  (r0 I:com.j256.ormlite.db.DatabaseType) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.databaseType com.j256.ormlite.db.DatabaseType \l0x001c: IGET  (r1 I:java.lang.Long) = (r3 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.offset java.lang.Long \l0x001e: INVOKE  (r1 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0022: INVOKE  \l  (r0 I:com.j256.ormlite.db.DatabaseType)\l  (r4 I:java.lang.StringBuilder)\l  (r1 I:long)\l com.j256.ormlite.db.DatabaseType.appendOffsetValue(java.lang.StringBuilder, long):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendOffset((r3 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
}

