digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.addGroupBy(Lcom\/j256\/ormlite\/stmt\/query\/ColumnNameOrRawSql;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.groupByList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0009: IPUT  \l  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>)\l  (r1 I:com.j256.ormlite.stmt.QueryBuilder)\l com.j256.ormlite.stmt.QueryBuilder.groupByList java.util.List \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.List\<com.j256.ormlite.stmt.query.ColumnNameOrRawSql\>) = (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.groupByList java.util.List \l0x000d: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: IPUT  (r2 I:boolean), (r1 I:com.j256.ormlite.stmt.QueryBuilder) com.j256.ormlite.stmt.QueryBuilder.selectIdColumn boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.addGroupBy((r1 'this' I:com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:com.j256.ormlite.stmt.query.ColumnNameOrRawSql A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

