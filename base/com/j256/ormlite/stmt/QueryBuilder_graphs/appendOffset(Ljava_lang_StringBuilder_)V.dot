digraph "CFG forcom.j256.ormlite.stmt.QueryBuilder.appendOffset(Ljava\/lang\/StringBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.offset != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r3.databaseType.isOffsetLimitArgument() == false) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r3.limit == null) goto L_0x0012\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012}"];
Node_8 [shape=record,label="{8\:\ 0x0019|throw new java.sql.SQLException(\"If the offset is specified, limit must also be specified with this database\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|r3.databaseType.appendOffsetValue(r4, r3.offset.longValue())\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.stmt.QueryBuilder.appendOffset((r3v0 'this' com.j256.ormlite.stmt.QueryBuilder A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_11[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

