digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00e2 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INSTANCE_OF  (r0 I:boolean) = (r13 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.ArgumentHolder \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0018 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r11 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x000c: CHECK_CAST  (r13 I:com.j256.ormlite.stmt.ArgumentHolder) = (com.j256.ormlite.stmt.ArgumentHolder) (r13 I:?[OBJECT, ARRAY]) \l0x000e: IGET  (r9 I:java.lang.String) = (r8 I:com.j256.ormlite.stmt.query.BaseComparison) com.j256.ormlite.stmt.query.BaseComparison.columnName java.lang.String \l0x0010: INVOKE  \l  (r13 I:com.j256.ormlite.stmt.ArgumentHolder)\l  (r9 I:java.lang.String)\l  (r10 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.stmt.ArgumentHolder.setMetaInfo(java.lang.String, com.j256.ormlite.field.FieldType):void type: INTERFACE \l0x0013: INVOKE  (r12 I:java.util.List), (r13 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INSTANCE_OF  (r0 I:boolean) = (r13 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.ColumnArg \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0035 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CHECK_CAST  (r13 I:com.j256.ormlite.stmt.ColumnArg) = (com.j256.ormlite.stmt.ColumnArg) (r13 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r10 I:java.lang.String) = (r13 I:com.j256.ormlite.stmt.ColumnArg) com.j256.ormlite.stmt.ColumnArg.getTableName():java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  \l  (r9 I:com.j256.ormlite.db.DatabaseType)\l  (r11 I:java.lang.StringBuilder)\l  (r10 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x0027: CONST  (r10 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r11 I:java.lang.StringBuilder), (r10 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: INVOKE  (r10 I:java.lang.String) = (r13 I:com.j256.ormlite.stmt.ColumnArg) com.j256.ormlite.stmt.ColumnArg.getColumnName():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r9 I:com.j256.ormlite.db.DatabaseType)\l  (r11 I:java.lang.StringBuilder)\l  (r10 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: INVOKE  (r0 I:boolean) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isArgumentHolderRequired():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: INVOKE  (r11 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x003e: NEW_INSTANCE  (r9 I:com.j256.ormlite.stmt.SelectArg) =  com.j256.ormlite.stmt.SelectArg \l0x0040: INVOKE  (r9 I:com.j256.ormlite.stmt.SelectArg) com.j256.ormlite.stmt.SelectArg.\<init\>():void type: DIRECT \l0x0043: IGET  (r0 I:java.lang.String) = (r8 I:com.j256.ormlite.stmt.query.BaseComparison) com.j256.ormlite.stmt.query.BaseComparison.columnName java.lang.String \l0x0045: INVOKE  \l  (r9 I:com.j256.ormlite.stmt.ArgumentHolder)\l  (r0 I:java.lang.String)\l  (r10 I:com.j256.ormlite.field.FieldType)\l com.j256.ormlite.stmt.ArgumentHolder.setMetaInfo(java.lang.String, com.j256.ormlite.field.FieldType):void type: INTERFACE \l0x0048: INVOKE  \l  (r9 I:com.j256.ormlite.stmt.ArgumentHolder)\l  (r13 I:java.lang.Object)\l com.j256.ormlite.stmt.ArgumentHolder.setValue(java.lang.Object):void type: INTERFACE \l0x004b: INVOKE  (r12 I:java.util.List), (r9 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: INVOKE  (r0 I:boolean) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeign():boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0074 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: INVOKE  (r0 I:java.lang.Class) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getType():java.lang.Class type: VIRTUAL \l0x005a: INVOKE  (r2 I:java.lang.Class) = (r13 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x005e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class), (r2 I:java.lang.Class) java.lang.Class.isAssignableFrom(java.lang.Class):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0062|0x0062: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0074 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0064|0x0064: INVOKE  (r4 I:com.j256.ormlite.field.FieldType) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getForeignIdField():com.j256.ormlite.field.FieldType type: VIRTUAL \l0x0068: INVOKE  (r7 I:java.lang.Object) = \l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r13 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.extractJavaFieldValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x006c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x006d: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x006e: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x006f: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0070: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r3 I:com.j256.ormlite.db.DatabaseType)\l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r5 I:java.lang.StringBuilder)\l  (r6 I:java.util.List)\l  (r7 I:java.lang.Object)\l com.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.field.FieldType, java.lang.StringBuilder, java.util.List, java.lang.Object):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0074|0x0074: INVOKE  (r12 I:boolean) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isEscapedValue():boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0078|0x0078: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0086 \l}"];
Node_20 [shape=record,label="{20\:\ 0x007a|0x007a: INVOKE  (r10 I:java.lang.Object) = \l  (r10 I:com.j256.ormlite.field.FieldType)\l  (r13 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.convertJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x007e: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0082: INVOKE  \l  (r9 I:com.j256.ormlite.db.DatabaseType)\l  (r11 I:java.lang.StringBuilder)\l  (r10 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedWord(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x0086|0x0086: INVOKE  (r9 I:boolean) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeign():boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x008a|0x008a: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00d2 \l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|0x008c: INVOKE  (r9 I:java.lang.Object) = \l  (r10 I:com.j256.ormlite.field.FieldType)\l  (r13 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.convertJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0090: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0094: INVOKE  (r12 I:int) = (r9 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0098|0x0098: IF  (r12 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:30:0x00ce \l}"];
Node_25 [shape=record,label="{25\:\ 0x009a|0x009a: CONST_STR  (r12 I:java.lang.String) =  \"0123456789.\-+\" \l0x009c: INVOKE  (r13 I:char) = (r9 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x00a0: INVOKE  (r12 I:int) = (r12 I:java.lang.String), (r13 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a4|0x00a4: IF  (r12 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:28:0x00a7 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a7|0x00a7: NEW_INSTANCE  (r11 I:java.sql.SQLException) =  java.sql.SQLException \l0x00a9: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00ab: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ae: CONST_STR  (r13 I:java.lang.String) =  \"Foreign field \" \l0x00b0: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b3: INVOKE  (r12 I:java.lang.StringBuilder), (r10 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00b6: CONST_STR  (r10 I:java.lang.String) =  \" does not seem to be producing a numerical value '\" \l0x00b8: INVOKE  (r12 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00bb: INVOKE  (r12 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00be: CONST_STR  (r9 I:java.lang.String) =  \"'. Maybe you are passing the wrong object to comparison: \" \l0x00c0: INVOKE  (r12 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c3: INVOKE  (r12 I:java.lang.StringBuilder), (r8 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00c6: INVOKE  (r9 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00ca: INVOKE  (r11 I:java.sql.SQLException), (r9 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00cd|0x00cd: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ce|0x00ce: INVOKE  (r11 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d2|0x00d2: INVOKE  (r9 I:java.lang.Object) = \l  (r10 I:com.j256.ormlite.field.FieldType)\l  (r13 I:java.lang.Object)\l com.j256.ormlite.field.FieldType.convertJavaFieldToSqlArgValue(java.lang.Object):java.lang.Object type: VIRTUAL \l0x00d6: INVOKE  (r11 I:java.lang.StringBuilder), (r9 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d9|0x00d9: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00da|0x00da: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00e1 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00dc|0x00dc: CONST  (r9 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x00de: INVOKE  (r11 I:java.lang.StringBuilder), (r9 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e1|0x00e1: RETURN   \l}"];
Node_36 [shape=record,label="{36\:\ 0x00e2|0x00e2: NEW_INSTANCE  (r9 I:java.sql.SQLException) =  java.sql.SQLException \l0x00e4: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00e6: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00e9: CONST_STR  (r12 I:java.lang.String) =  \"argument for '\" \l0x00eb: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ee: INVOKE  (r10 I:java.lang.String) = (r10 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getFieldName():java.lang.String type: VIRTUAL \l0x00f2: INVOKE  (r11 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00f5: CONST_STR  (r10 I:java.lang.String) =  \"' is null\" \l0x00f7: INVOKE  (r11 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00fa: INVOKE  (r10 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00fe: INVOKE  (r9 I:java.sql.SQLException), (r10 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_37 [shape=record,label="{37\:\ 0x0101|0x0101: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue((r8 'this' I:com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r9 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/field\/FieldType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;, Ljava\/lang\/Object;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_36;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_32;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_32;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_32;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_33;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_30[style=dashed];
Node_28 -> Node_29;
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_36 -> Node_37;
}

