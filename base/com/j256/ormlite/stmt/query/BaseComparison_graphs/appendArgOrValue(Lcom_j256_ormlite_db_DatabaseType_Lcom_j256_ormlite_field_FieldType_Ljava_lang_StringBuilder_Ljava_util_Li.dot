digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r13 == null) goto L_0x00e2\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|r1 = false\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|if ((r13 instanceof com.j256.ormlite.stmt.ArgumentHolder) == false) goto L_0x0018\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|r11.append('?')\lcom.j256.ormlite.stmt.ArgumentHolder r13 = (com.j256.ormlite.stmt.ArgumentHolder) r13\lr13.setMetaInfo(r8.columnName, r10)\lr12.add(r13)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if ((r13 instanceof com.j256.ormlite.stmt.ColumnArg) == false) goto L_0x0035\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|com.j256.ormlite.stmt.ColumnArg r13 = (com.j256.ormlite.stmt.ColumnArg) r13\ljava.lang.String r10 = r13.getTableName()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if (r10 == null) goto L_0x002c\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|r9.appendEscapedEntityName(r11, r10)\lr11.append('.')\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|r9.appendEscapedEntityName(r11, r13.getColumnName())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035}"];
Node_11 [shape=record,label="{11\:\ 0x0039|if (r10.isArgumentHolderRequired() == false) goto L_0x0050\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|r11.append('?')\lcom.j256.ormlite.stmt.SelectArg r9 = new com.j256.ormlite.stmt.SelectArg()\lr9.setMetaInfo(r8.columnName, r10)\lr9.setValue(r13)\lr12.add(r9)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0050}"];
Node_14 [shape=record,label="{14\:\ 0x0054|if (r10.isForeign() == false) goto L_0x0074\l}"];
Node_15 [shape=record,label="{15\:\ 0x0056}"];
Node_16 [shape=record,label="{16\:\ 0x0062|if (r10.getType().isAssignableFrom(r13.getClass()) == false) goto L_0x0074\l}"];
Node_17 [shape=record,label="{17\:\ 0x0064|com.j256.ormlite.field.FieldType r4 = r10.getForeignIdField()\lr2 = r8\lr3 = r9\lr5 = r11\lr6 = r12\lappendArgOrValue(r3, r4, r5, r6, r4.extractJavaFieldValue(r13))\l}"];
Node_18 [shape=record,label="{18\:\ 0x0074}"];
Node_19 [shape=record,label="{19\:\ 0x0078|if (r10.isEscapedValue() == false) goto L_0x0086\l}"];
Node_20 [shape=record,label="{20\:\ 0x007a|r9.appendEscapedWord(r11, r10.convertJavaFieldToSqlArgValue(r13).toString())\l}"];
Node_21 [shape=record,label="{21\:\ 0x0086}"];
Node_22 [shape=record,label="{22\:\ 0x008a|if (r10.isForeign() == false) goto L_0x00d2\l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|java.lang.String r9 = r10.convertJavaFieldToSqlArgValue(r13).toString()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0098|if (r9.length() \<= 0) goto L_0x00ce\l}"];
Node_25 [shape=record,label="{25\:\ 0x009a}"];
Node_26 [shape=record,label="{26\:\ 0x00a4|if (NUMBER_CHARACTERS.indexOf(r9.charAt(0)) \< 0) goto L_0x00a7\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a7|java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(\"Foreign field \")\lr12.append(r10)\lr12.append(\" does not seem to be producing a numerical value '\")\lr12.append(r9)\lr12.append(\"'. Maybe you are passing the wrong object to comparison: \")\lr12.append(r8)\l}"];
Node_28 [shape=record,label="{28\:\ 0x00cd|throw new java.sql.SQLException(r12.toString())\l}"];
Node_29 [shape=record,label="{29\:\ 0x00ce|r11.append(r9)\l}"];
Node_30 [shape=record,label="{30\:\ 0x00d2|r11.append(r10.convertJavaFieldToSqlArgValue(r13))\l}"];
Node_31 [shape=record,label="{31\:\ 0x00d9|r1 = true\l}"];
Node_32 [shape=record,label="{32\:\ 0x00da|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v2 boolean), (r1v0 boolean) binds: [B:31:0x00d9, B:17:0x0064] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L_?\l}"];
Node_33 [shape=record,label="{33\:\ 0x00dc|r11.append(' ')\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e2|java.lang.StringBuilder r11 = new java.lang.StringBuilder()\lr11.append(\"argument for '\")\lr11.append(r10.getFieldName())\lr11.append(\"' is null\")\l}"];
Node_35 [shape=record,label="{35\:\ 0x0101|throw new java.sql.SQLException(r11.toString())\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue((r8v0 'this' com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r9v0 com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/field\/FieldType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;, Ljava\/lang\/Object;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_34;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_31;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_31;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_31;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_32;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_29[style=dashed];
Node_27 -> Node_28;
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_36;
Node_34 -> Node_35;
}

