digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.\<init\>(Ljava\/lang\/String;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5 == false) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r3 == null) goto L_0x0036\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r3.isComparable() == false) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Field '\")\lr5.append(r2)\lr5.append(\"' is of data type \")\lr5.append(r3.getDataPersister())\lr5.append(\" which can not be compared\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|throw new java.sql.SQLException(r5.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|r1.columnName = r2\lr1.fieldType = r3\lr1.value = r4\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.query.BaseComparison.\<init\>((r1v0 'this' com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

