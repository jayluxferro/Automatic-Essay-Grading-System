digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.\<init\>(Ljava\/lang\/String;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0036 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0036 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r5 I:boolean) = (r3 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isComparable():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0010: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0012: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0015: CONST_STR  (r0 I:java.lang.String) =  \"Field '\" \l0x0017: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"' is of data type \" \l0x001f: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r2 I:com.j256.ormlite.field.DataPersister) = (r3 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getDataPersister():com.j256.ormlite.field.DataPersister type: VIRTUAL \l0x0026: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0029: CONST_STR  (r2 I:java.lang.String) =  \" which can not be compared\" \l0x002b: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r2 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0032: INVOKE  (r4 I:java.sql.SQLException), (r2 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:com.j256.ormlite.stmt.query.BaseComparison)\l com.j256.ormlite.stmt.query.BaseComparison.columnName java.lang.String \l0x0038: IPUT  \l  (r3 I:com.j256.ormlite.field.FieldType)\l  (r1 I:com.j256.ormlite.stmt.query.BaseComparison)\l com.j256.ormlite.stmt.query.BaseComparison.fieldType com.j256.ormlite.field.FieldType \l0x003a: IPUT  \l  (r4 I:java.lang.Object)\l  (r1 I:com.j256.ormlite.stmt.query.BaseComparison)\l com.j256.ormlite.stmt.query.BaseComparison.value java.lang.Object \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: RETURN   \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.query.BaseComparison.\<init\>((r1 'this' I:com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
}

