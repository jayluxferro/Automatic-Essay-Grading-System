digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.\<init\>(Ljava\/lang\/String;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;Z)V" {
subgraph cluster_Region_549176305 {
label = "R(1:(2:(2:7|8)|(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1103205383 {
label = "R(2:(2:7|8)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2012874313 {
label = "IF [B:1:0x0003, B:2:0x0005, B:4:0x000b] THEN: R(2:7|8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5 == false) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|ADDED_TO_REGION\l|if (r3 == null) goto L_0x0036\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|ADDED_TO_REGION\l|if (r3.isComparable() == true) goto L_0x0036\l}"];
subgraph cluster_Region_733689015 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0036|r1.columnName = r2\lr1.fieldType = r3\lr1.value = r4\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1440861818 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0035|throw new java.sql.SQLException(\"Field '\" + r2 + \"' is of data type \" + r3.getDataPersister() + \" which can not be compared\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.stmt.query.BaseComparison.\<init\>((r1v0 'this' com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_8;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

