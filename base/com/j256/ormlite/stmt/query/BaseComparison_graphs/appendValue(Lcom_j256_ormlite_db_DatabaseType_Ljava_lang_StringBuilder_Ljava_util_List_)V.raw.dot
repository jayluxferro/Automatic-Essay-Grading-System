digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.appendValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r2 I:com.j256.ormlite.field.FieldType) = (r6 I:com.j256.ormlite.stmt.query.BaseComparison) com.j256.ormlite.stmt.query.BaseComparison.fieldType com.j256.ormlite.field.FieldType \l0x0002: IGET  (r5 I:java.lang.Object) = (r6 I:com.j256.ormlite.stmt.query.BaseComparison) com.j256.ormlite.stmt.query.BaseComparison.value java.lang.Object \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0005: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:java.util.List)\l  (r5 I:java.lang.Object)\l com.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.field.FieldType, java.lang.StringBuilder, java.util.List, java.lang.Object):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.BaseComparison.appendValue((r6 'this' I:com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r7 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

