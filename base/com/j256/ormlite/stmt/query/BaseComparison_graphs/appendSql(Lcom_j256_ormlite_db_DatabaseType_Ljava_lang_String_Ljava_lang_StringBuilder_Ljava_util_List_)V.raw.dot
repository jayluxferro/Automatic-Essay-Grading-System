digraph "CFG forcom.j256.ormlite.stmt.query.BaseComparison.appendSql(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/String;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x000a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  \l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r3 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x0005: CONST  (r2 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0007: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r2 I:java.lang.String) = (r0 I:com.j256.ormlite.stmt.query.BaseComparison) com.j256.ormlite.stmt.query.BaseComparison.columnName java.lang.String \l0x000c: INVOKE  \l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r3 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x000f: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0014: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r3 I:java.lang.StringBuilder)\l com.j256.ormlite.stmt.query.BaseComparison.appendOperation(java.lang.StringBuilder):void type: VIRTUAL \l0x0017: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:java.util.List)\l com.j256.ormlite.stmt.query.BaseComparison.appendValue(com.j256.ormlite.db.DatabaseType, java.lang.StringBuilder, java.util.List):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.BaseComparison.appendSql((r0 'this' I:com.j256.ormlite.stmt.query.BaseComparison A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/String;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_2 -> Node_3;
}

