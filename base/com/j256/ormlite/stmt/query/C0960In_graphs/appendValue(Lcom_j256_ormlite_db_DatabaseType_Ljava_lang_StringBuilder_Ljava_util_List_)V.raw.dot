digraph "CFG forcom.j256.ormlite.stmt.query.In.appendValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r11 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0005: IGET  (r0 I:java.lang.Iterable\<?\>) = (r9 I:com.j256.ormlite.stmt.query.In) com.j256.ormlite.stmt.query.In.objects java.lang.Iterable \l0x0007: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0049 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r8 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, short, byte, char]) = (44 ?[int, float, short, byte, char]) \l0x001e: INVOKE  (r11 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r5 I:com.j256.ormlite.field.FieldType) = (r9 I:com.j256.ormlite.stmt.query.In) com.j256.ormlite.stmt.query.In.fieldType com.j256.ormlite.field.FieldType \l0x0023: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0024: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0025: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0026: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r4 I:com.j256.ormlite.db.DatabaseType)\l  (r5 I:com.j256.ormlite.field.FieldType)\l  (r6 I:java.lang.StringBuilder)\l  (r7 I:java.util.List)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.stmt.query.BaseComparison.appendArgOrValue(com.j256.ormlite.db.DatabaseType, com.j256.ormlite.field.FieldType, java.lang.StringBuilder, java.util.List, java.lang.Object):void type: SUPER \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: NEW_INSTANCE  (r10 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002d: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002f: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0032: CONST_STR  (r12 I:java.lang.String) =  \"one of the IN values for '\" \l0x0034: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: IGET  (r12 I:java.lang.String) = (r9 I:com.j256.ormlite.stmt.query.In) com.j256.ormlite.stmt.query.In.columnName java.lang.String \l0x0039: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: CONST_STR  (r12 I:java.lang.String) =  \"' is null\" \l0x003e: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0041: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0045: INVOKE  \l  (r10 I:java.lang.IllegalArgumentException)\l  (r11 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: CONST_STR  (r10 I:java.lang.String) =  \") \" \l0x004b: INVOKE  (r11 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.In.appendValue((r9 'this' I:com.j256.ormlite.stmt.query.In A[IMMUTABLE_TYPE, THIS]), (r10 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

