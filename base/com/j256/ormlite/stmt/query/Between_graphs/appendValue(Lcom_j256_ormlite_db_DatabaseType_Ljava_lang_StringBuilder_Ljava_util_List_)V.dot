digraph "CFG forcom.j256.ormlite.stmt.query.Between.appendValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7.low == null) goto L_0x003e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r7.high == null) goto L_0x0020\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r1 = r7\lr2 = r8\lr4 = r9\lr5 = r10\lappendArgOrValue(r2, r7.fieldType, r4, r5, r7.low)\lr9.append(\"AND \")\lappendArgOrValue(r2, r7.fieldType, r4, r5, r7.high)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"BETWEEN high value for '\")\lr9.append(r7.columnName)\lr9.append(\"' is null\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|java.lang.StringBuilder r9 = new java.lang.StringBuilder()\lr9.append(\"BETWEEN low value for '\")\lr9.append(r7.columnName)\lr9.append(\"' is null\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x005b|throw new java.lang.IllegalArgumentException(r9.toString())\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.Between.appendValue((r7v0 'this' com.j256.ormlite.stmt.query.Between A[IMMUTABLE_TYPE, THIS]), (r8v0 com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

