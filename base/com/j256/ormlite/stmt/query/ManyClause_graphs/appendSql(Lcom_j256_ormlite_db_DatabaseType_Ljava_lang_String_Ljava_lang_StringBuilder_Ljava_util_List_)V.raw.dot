digraph "CFG forcom.j256.ormlite.stmt.query.ManyClause.appendSql(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/String;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r6 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0005: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.first com.j256.ormlite.stmt.query.Clause \l0x0007: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l  (r4 I:com.j256.ormlite.db.DatabaseType)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.StringBuilder)\l  (r7 I:java.util.List)\l com.j256.ormlite.stmt.query.Clause.appendSql(com.j256.ormlite.db.DatabaseType, java.lang.String, java.lang.StringBuilder, java.util.List):void type: INTERFACE \l0x000a: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.second com.j256.ormlite.stmt.query.Clause \l0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IGET  (r0 I:java.lang.String) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.operation java.lang.String \l0x0012: INVOKE  (r6 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0018: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.second com.j256.ormlite.stmt.query.Clause \l0x001a: INVOKE  \l  (r0 I:com.j256.ormlite.stmt.query.Clause)\l  (r4 I:com.j256.ormlite.db.DatabaseType)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.StringBuilder)\l  (r7 I:java.util.List)\l com.j256.ormlite.stmt.query.Clause.appendSql(com.j256.ormlite.db.DatabaseType, java.lang.String, java.lang.StringBuilder, java.util.List):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IGET  (r0 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.others com.j256.ormlite.stmt.query.Clause[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IGET  (r0 I:int) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.startOthersAt int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r2 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.others com.j256.ormlite.stmt.query.Clause[] \l0x0025: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x003a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IGET  (r2 I:java.lang.String) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.operation java.lang.String \l0x002a: INVOKE  (r6 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0030: IGET  (r2 I:com.j256.ormlite.stmt.query.Clause[]) = (r3 I:com.j256.ormlite.stmt.query.ManyClause) com.j256.ormlite.stmt.query.ManyClause.others com.j256.ormlite.stmt.query.Clause[] \l0x0032: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0034: INVOKE  \l  (r2 I:com.j256.ormlite.stmt.query.Clause)\l  (r4 I:com.j256.ormlite.db.DatabaseType)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.StringBuilder)\l  (r7 I:java.util.List)\l com.j256.ormlite.stmt.query.Clause.appendSql(com.j256.ormlite.db.DatabaseType, java.lang.String, java.lang.StringBuilder, java.util.List):void type: INTERFACE \l0x0037: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: CONST_STR  (r4 I:java.lang.String) =  \") \" \l0x003c: INVOKE  (r6 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.ManyClause.appendSql((r3 'this' I:com.j256.ormlite.stmt.query.ManyClause A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/String;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
}

