digraph "CFG forcom.j256.ormlite.stmt.query.InSubQuery.appendValue(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r3 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x0002: INVOKE  (r4 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0005: IGET  (r3 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper) = (r2 I:com.j256.ormlite.stmt.query.InSubQuery) com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper \l0x0007: INVOKE  \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)\l  (r4 I:java.lang.StringBuilder)\l  (r5 I:java.util.List)\l com.j256.ormlite.stmt.QueryBuilder.InternalQueryBuilderWrapper.appendStatementString(java.lang.StringBuilder, java.util.List):void type: VIRTUAL \l0x000a: IGET  (r3 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper) = (r2 I:com.j256.ormlite.stmt.query.InSubQuery) com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper \l0x000c: INVOKE  (r3 I:com.j256.ormlite.field.FieldType[]) = \l  (r3 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)\l com.j256.ormlite.stmt.QueryBuilder.InternalQueryBuilderWrapper.getResultFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: ARRAY_LENGTH  (r5 I:int) = (r3 I:?[]) \l0x0014: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x004f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r5 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.stmt.query.InSubQuery) com.j256.ormlite.stmt.query.InSubQuery.fieldType com.j256.ormlite.field.FieldType \l0x0019: INVOKE  (r5 I:com.j256.ormlite.field.SqlType) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getSqlType():com.j256.ormlite.field.SqlType type: VIRTUAL \l0x001d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0020: INVOKE  (r1 I:com.j256.ormlite.field.SqlType) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getSqlType():com.j256.ormlite.field.SqlType type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: CONST_STR  (r3 I:java.lang.String) =  \") \" \l0x0028: INVOKE  (r4 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x002e: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0030: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0033: CONST_STR  (r1 I:java.lang.String) =  \"Outer column \" \l0x0035: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0038: IGET  (r1 I:com.j256.ormlite.field.FieldType) = (r2 I:com.j256.ormlite.stmt.query.InSubQuery) com.j256.ormlite.stmt.query.InSubQuery.fieldType com.j256.ormlite.field.FieldType \l0x003a: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003d: CONST_STR  (r1 I:java.lang.String) =  \" is not the same type as inner column \" \l0x003f: INVOKE  (r5 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0044: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r4 I:java.sql.SQLException), (r3 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: NEW_INSTANCE  (r4 I:java.sql.SQLException) =  java.sql.SQLException \l0x0051: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0053: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0056: CONST_STR  (r0 I:java.lang.String) =  \"There must be only 1 result column in sub\-query but we found \" \l0x0058: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005b: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x005c: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r3 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0063: INVOKE  (r4 I:java.sql.SQLException), (r3 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0066|0x0066: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.InSubQuery.appendValue((r2 'this' I:com.j256.ormlite.stmt.query.InSubQuery A[IMMUTABLE_TYPE, THIS]), (r3 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

