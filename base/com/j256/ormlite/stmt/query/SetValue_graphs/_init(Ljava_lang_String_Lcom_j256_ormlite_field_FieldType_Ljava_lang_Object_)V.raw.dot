digraph "CFG forcom.j256.ormlite.stmt.query.SetValue.\<init\>(Ljava\/lang\/String;Lcom\/j256\/ormlite\/field\/FieldType;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SGET  (r4 I:com.j256.ormlite.stmt.ArgumentHolder) =  com.j256.ormlite.stmt.query.SetValue.nullValue com.j256.ormlite.stmt.ArgumentHolder \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.query.BaseComparison)\l  (r2 I:java.lang.String)\l  (r3 I:com.j256.ormlite.field.FieldType)\l  (r4 I:java.lang.Object)\l  (r0 I:boolean)\l com.j256.ormlite.stmt.query.BaseComparison.\<init\>(java.lang.String, com.j256.ormlite.field.FieldType, java.lang.Object, boolean):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.SetValue.\<init\>((r1 'this' I:com.j256.ormlite.stmt.query.SetValue A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:com.j256.ormlite.field.FieldType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_2 -> Node_3;
}

