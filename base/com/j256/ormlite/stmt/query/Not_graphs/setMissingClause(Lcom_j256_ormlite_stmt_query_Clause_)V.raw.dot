digraph "CFG forcom.j256.ormlite.stmt.query.Not.setMissingClause(Lcom\/j256\/ormlite\/stmt\/query\/Clause;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.stmt.query.Comparison) = (r3 I:com.j256.ormlite.stmt.query.Not) com.j256.ormlite.stmt.query.Not.comparison com.j256.ormlite.stmt.query.Comparison \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.query.Comparison \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CHECK_CAST  (r4 I:com.j256.ormlite.stmt.query.Comparison) = (com.j256.ormlite.stmt.query.Comparison) (r4 I:?[OBJECT, ARRAY]) \l0x000a: IPUT  \l  (r4 I:com.j256.ormlite.stmt.query.Comparison)\l  (r3 I:com.j256.ormlite.stmt.query.Not)\l com.j256.ormlite.stmt.query.Not.comparison com.j256.ormlite.stmt.query.Comparison \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) com.j256.ormlite.stmt.query.Exists \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CHECK_CAST  (r4 I:com.j256.ormlite.stmt.query.Exists) = (com.j256.ormlite.stmt.query.Exists) (r4 I:?[OBJECT, ARRAY]) \l0x0013: IPUT  \l  (r4 I:com.j256.ormlite.stmt.query.Exists)\l  (r3 I:com.j256.ormlite.stmt.query.Not)\l com.j256.ormlite.stmt.query.Not.exists com.j256.ormlite.stmt.query.Exists \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: CONST_STR  (r2 I:java.lang.String) =  \"NOT operation can only work with comparison SQL clauses, not \" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002f: CONST_STR  (r0 I:java.lang.String) =  \"NOT operation already has a comparison set\" \l0x0031: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.Not.setMissingClause((r3 'this' I:com.j256.ormlite.stmt.query.Not A[IMMUTABLE_TYPE, THIS]), (r4 I:com.j256.ormlite.stmt.query.Clause A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

