digraph "CFG forcom.j256.ormlite.stmt.query.Not.setMissingClause(Lcom\/j256\/ormlite\/stmt\/query\/Clause;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.comparison != null) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if ((r4 instanceof com.j256.ormlite.stmt.query.Comparison) == false) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r3.comparison = (com.j256.ormlite.stmt.query.Comparison) r4\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if ((r4 instanceof com.j256.ormlite.stmt.query.Exists) == false) goto L_0x0016\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|r3.exists = (com.j256.ormlite.stmt.query.Exists) r4\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"NOT operation can only work with comparison SQL clauses, not \")\lr1.append(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x0034|throw new java.lang.IllegalArgumentException(\"NOT operation already has a comparison set\")\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.Not.setMissingClause((r3v0 'this' com.j256.ormlite.stmt.query.Not A[IMMUTABLE_TYPE, THIS]), (r4v0 com.j256.ormlite.stmt.query.Clause A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

