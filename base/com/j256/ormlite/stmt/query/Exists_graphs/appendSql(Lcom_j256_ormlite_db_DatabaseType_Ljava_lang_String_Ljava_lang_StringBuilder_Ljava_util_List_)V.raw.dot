digraph "CFG forcom.j256.ormlite.stmt.query.Exists.appendSql(Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/lang\/String;Ljava\/lang\/StringBuilder;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r1 I:java.lang.String) =  \"EXISTS (\" \l0x0002: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0005: IGET  (r1 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper) = (r0 I:com.j256.ormlite.stmt.query.Exists) com.j256.ormlite.stmt.query.Exists.subQueryBuilder com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper \l0x0007: INVOKE  \l  (r1 I:com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:java.util.List)\l com.j256.ormlite.stmt.QueryBuilder.InternalQueryBuilderWrapper.appendStatementString(java.lang.StringBuilder, java.util.List):void type: VIRTUAL \l0x000a: CONST_STR  (r1 I:java.lang.String) =  \") \" \l0x000c: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.stmt.query.Exists.appendSql((r0 'this' I:com.j256.ormlite.stmt.query.Exists A[IMMUTABLE_TYPE, THIS]), (r1 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<com.j256.ormlite.stmt.ArgumentHolder\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/lang\/String;, Ljava\/lang\/StringBuilder;, Ljava\/util\/List\<, Lcom\/j256\/ormlite\/stmt\/ArgumentHolder;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

