digraph "CFG forcom.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.mapRow(Lcom\/j256\/ormlite\/support\/DatabaseResults;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r6 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.getColumnCount():int type: INTERFACE \l0x0004: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IGET  (r3 I:com.j256.ormlite.field.DataType[]) = \l  (r5 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.columnTypes com.j256.ormlite.field.DataType[] \l0x000b: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x000c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r3 I:com.j256.ormlite.field.DataType[]) = \l  (r5 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.columnTypes com.j256.ormlite.field.DataType[] \l0x0014: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0016: INVOKE  (r3 I:com.j256.ormlite.field.DataPersister) = (r3 I:com.j256.ormlite.field.DataType) com.j256.ormlite.field.DataType.getDataPersister():com.j256.ormlite.field.DataPersister type: VIRTUAL \l0x001a: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:com.j256.ormlite.field.DataPersister)\l  (r4 I:com.j256.ormlite.field.FieldType)\l  (r6 I:com.j256.ormlite.support.DatabaseResults)\l  (r2 I:int)\l com.j256.ormlite.field.DataPersister.resultToJava(com.j256.ormlite.field.FieldType, com.j256.ormlite.support.DatabaseResults, int):java.lang.Object type: INTERFACE \l0x001e: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IGET  (r0 I:com.j256.ormlite.dao.RawRowObjectMapper\<UO\>) = \l  (r5 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.mapper com.j256.ormlite.dao.RawRowObjectMapper \l0x0025: INVOKE  (r6 I:java.lang.String[]) = \l  (r5 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l  (r6 I:com.j256.ormlite.support.DatabaseResults)\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.getColumnNames(com.j256.ormlite.support.DatabaseResults):java.lang.String[] type: DIRECT \l0x0029: IGET  (r2 I:com.j256.ormlite.field.DataType[]) = \l  (r5 I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper)\l com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.columnTypes com.j256.ormlite.field.DataType[] \l0x002b: INVOKE  (r6 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.dao.RawRowObjectMapper)\l  (r6 I:java.lang.String[])\l  (r2 I:com.j256.ormlite.field.DataType[])\l  (r1 I:java.lang.Object[])\l com.j256.ormlite.dao.RawRowObjectMapper.mapRow(java.lang.String[], com.j256.ormlite.field.DataType[], java.lang.Object[]):java.lang.Object type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: RETURN  (r6 I:UO) \l}"];
MethodNode[shape=record,label="{public UO com.j256.ormlite.stmt.StatementExecutor.UserRawRowObjectMapper.mapRow((r5 'this' I:com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper A[IMMUTABLE_TYPE, THIS]), (r6 I:com.j256.ormlite.support.DatabaseResults A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseResults;, )TUO;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

