digraph "CFG forcom.j256.ormlite.logger.Slf4jLoggingLog.log(Lcom\/j256\/ormlite\/logger\/Log$Level;Ljava\/lang\/String;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  com.j256.ormlite.logger.Slf4jLoggingLog.1.$SwitchMap$com$j256$ormlite$logger$Log$Level int[] \l0x0002: INVOKE  (r2 I:int) = (r2 I:com.j256.ormlite.logger.Log$Level) com.j256.ormlite.logger.Log.Level.ordinal():int type: VIRTUAL \l0x0006: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6] t:[0x002f, 0x0029, 0x0023, 0x001d, 0x0017, 0x0011] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x000d: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.info(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x0013: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.error(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x0019: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.error(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x001f: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.warn(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x0025: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.info(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x002b: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.debug(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IGET  (r2 I:org.slf4j.Logger) = (r1 I:com.j256.ormlite.logger.Slf4jLoggingLog) com.j256.ormlite.logger.Slf4jLoggingLog.logger org.slf4j.Logger \l0x0031: INVOKE  \l  (r2 I:org.slf4j.Logger)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l org.slf4j.Logger.trace(java.lang.String, java.lang.Throwable):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.logger.Slf4jLoggingLog.log((r1 'this' I:com.j256.ormlite.logger.Slf4jLoggingLog A[IMMUTABLE_TYPE, THIS]), (r2 I:com.j256.ormlite.logger.Log$Level A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_1 -> Node_7;
Node_1 -> Node_8;
Node_2 -> Node_9;
Node_3 -> Node_9;
Node_4 -> Node_9;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
}

