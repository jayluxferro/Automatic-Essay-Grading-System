digraph "CFG forcom.j256.ormlite.logger.LoggerFactory.LogType.createLogFromClassName(Ljava\/lang\/String;)Lcom\/j256\/ormlite\/logger\/Log;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r5 I:com.j256.ormlite.logger.LoggerFactory$LogType) com.j256.ormlite.logger.LoggerFactory.LogType.logClassName java.lang.String \l0x0002: INVOKE  (r0 I:java.lang.Class) = (r0 I:java.lang.String) java.lang.Class.forName(java.lang.String):java.lang.Class type: STATIC \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0007: NEW_ARRAY  (r2 I:java.lang.Class[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] \l0x0009: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.String\>) =  java.lang.String.class \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x000e: INVOKE  (r0 I:java.lang.reflect.Constructor) = (r0 I:java.lang.Class), (r2 I:java.lang.Class[]) java.lang.Class.getConstructor(java.lang.Class[]):java.lang.reflect.Constructor type: VIRTUAL \l0x0012: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0014: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0016: INVOKE  (r6 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Constructor)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object type: VIRTUAL \l0x001a: CHECK_CAST  (r6 I:com.j256.ormlite.logger.Log) = (com.j256.ormlite.logger.Log) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: RETURN  (r6 I:com.j256.ormlite.logger.Log) \l}"];
MethodNode[shape=record,label="{private com.j256.ormlite.logger.Log com.j256.ormlite.logger.LoggerFactory.LogType.createLogFromClassName((r5 'this' I:com.j256.ormlite.logger.LoggerFactory$LogType A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

