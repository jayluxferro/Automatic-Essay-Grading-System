digraph "CFG forcom.j256.ormlite.logger.LoggerFactory.findLogType()Lcom\/j256\/ormlite\/logger\/LoggerFactory$LogType;" {
subgraph cluster_Region_512453467 {
label = "R(5:0|(1:(1:4))|7|(2:9|(2:(1:11)|(1:12)))|14)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r0 = java.lang.System.getProperty(LOG_TYPE_SYSTEM_PROPERTY)\l}"];
subgraph cluster_IfRegion_1548778810 {
label = "IF [B:1:0x0006] THEN: R(1:(1:4)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 != null) goto L_0x0008\l}"];
subgraph cluster_Region_1187976099 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1242384308 {
label = "Try: R(1:4) catches: R(1:5)";
node [shape=record,color=blue];
subgraph cluster_Region_921503224 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return com.j256.ormlite.logger.LoggerFactory.LogType.valueOf(r0)\l}"];
}
subgraph cluster_Region_2065550622 {
label = "R(1:5) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|new com.j256.ormlite.logger.LocalLog(com.j256.ormlite.logger.LoggerFactory.class.getName()).log(com.j256.ormlite.logger.Log.Level.WARNING, \"Could not find valid log\-type from system property 'com.j256.ormlite.logger.type', value '\" + r0 + \"'\")\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0033|int int r1 = com.j256.ormlite.logger.LoggerFactory.LogType.values().length\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1721334982 {
label = "LOOP:0: (2:9|(2:(1:11)|(1:12)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0039|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:7:0x0033, B:12:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0039\-\>B:12:0x0044\l|if (r2 \< r1) goto L_0x003b\l}"];
subgraph cluster_Region_1049211029 {
label = "R(2:9|(2:(1:11)|(1:12)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003b|r3 = r0[r2]\l}"];
subgraph cluster_Region_1511799932 {
label = "R(2:(1:11)|(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1693478551 {
label = "IF [B:10:0x0041] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0041|if (r3.isAvailable() == true) goto L_0x0043\l}"];
subgraph cluster_Region_1147184474 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0043|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_1643099091 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0044|LOOP_END\lLOOP:0: B:8:0x0039\-\>B:12:0x0044\l|r2++\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0049|RETURN\l|return com.j256.ormlite.logger.LoggerFactory.LogType.LOCAL\l}"];
}
subgraph cluster_Region_2065550622 {
label = "R(1:5) | ExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|new com.j256.ormlite.logger.LocalLog(com.j256.ormlite.logger.LoggerFactory.class.getName()).log(com.j256.ormlite.logger.Log.Level.WARNING, \"Could not find valid log\-type from system property 'com.j256.ormlite.logger.type', value '\" + r0 + \"'\")\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x000d \}\lSplitter:B:2:0x0008\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:2:0x0008\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0047}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0043|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0047|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static com.j256.ormlite.logger.LoggerFactory$LogType com.j256.ormlite.logger.LoggerFactory.findLogType() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_16[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_12[style=dashed];
Node_10 -> Node_15;
Node_12 -> Node_8;
Node_5 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_6 -> Node_5;
Node_13 -> Node_14;
Node_15 -> Node_11;
Node_16 -> Node_13;
}

