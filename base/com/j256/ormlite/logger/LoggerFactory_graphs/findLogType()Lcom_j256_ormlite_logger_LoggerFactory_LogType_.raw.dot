digraph "CFG forcom.j256.ormlite.logger.LoggerFactory.findLogType()Lcom\/j256\/ormlite\/logger\/LoggerFactory$LogType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"com.j256.ormlite.logger.type\" \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) java.lang.System.getProperty(java.lang.String):java.lang.String type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0008\l|0x0008: INVOKE  (r1 I:com.j256.ormlite.logger.LoggerFactory$LogType) = (r0 I:java.lang.String) com.j256.ormlite.logger.LoggerFactory.LogType.valueOf(java.lang.String):com.j256.ormlite.logger.LoggerFactory$LogType type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x000d \}, TRY_ENTER]\l0x000b: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: RETURN  (r1 I:com.j256.ormlite.logger.LoggerFactory$LogType) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_INSTANCE  (r1 I:com.j256.ormlite.logger.LocalLog) =  com.j256.ormlite.logger.LocalLog \l0x000f: CONST_CLASS  (r2 I:java.lang.Class\<com.j256.ormlite.logger.LoggerFactory\>) =  com.j256.ormlite.logger.LoggerFactory.class \l0x0011: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x0015: INVOKE  \l  (r1 I:com.j256.ormlite.logger.LocalLog)\l  (r2 I:java.lang.String)\l com.j256.ormlite.logger.LocalLog.\<init\>(java.lang.String):void type: DIRECT \l0x0018: SGET  (r2 I:com.j256.ormlite.logger.Log$Level) =  com.j256.ormlite.logger.Log.Level.WARNING com.j256.ormlite.logger.Log$Level \l0x001a: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001c: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001f: CONST_STR  (r4 I:java.lang.String) =  \"Could not find valid log\-type from system property 'com.j256.ormlite.logger.type', value '\" \l0x0021: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST_STR  (r0 I:java.lang.String) =  \"'\" \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: INVOKE  \l  (r1 I:com.j256.ormlite.logger.Log)\l  (r2 I:com.j256.ormlite.logger.Log$Level)\l  (r0 I:java.lang.String)\l com.j256.ormlite.logger.Log.log(com.j256.ormlite.logger.Log$Level, java.lang.String):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:2:0x0008\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: INVOKE  (r0 I:com.j256.ormlite.logger.LoggerFactory$LogType[]) =  com.j256.ormlite.logger.LoggerFactory.LogType.values():com.j256.ormlite.logger.LoggerFactory$LogType[] type: STATIC \l0x0037: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0038: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x003d: INVOKE  (r4 I:boolean) = (r3 I:com.j256.ormlite.logger.LoggerFactory$LogType) com.j256.ormlite.logger.LoggerFactory.LogType.isAvailable():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: RETURN  (r3 I:com.j256.ormlite.logger.LoggerFactory$LogType) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: SGET  (r0 I:com.j256.ormlite.logger.LoggerFactory$LogType) =  com.j256.ormlite.logger.LoggerFactory.LogType.LOCAL com.j256.ormlite.logger.LoggerFactory$LogType \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: RETURN  (r0 I:com.j256.ormlite.logger.LoggerFactory$LogType) \l}"];
MethodNode[shape=record,label="{private static com.j256.ormlite.logger.LoggerFactory$LogType com.j256.ormlite.logger.LoggerFactory.findLogType() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_14;
}

