digraph "CFG forcom.j256.ormlite.logger.LocalLog.configureClassLevels(Ljava\/io\/InputStream;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0002: NEW_INSTANCE  (r1 I:java.io.InputStreamReader) =  java.io.InputStreamReader \l0x0004: INVOKE  \l  (r1 I:java.io.InputStreamReader)\l  (r6 I:java.io.InputStream)\l java.io.InputStreamReader.\<init\>(java.io.InputStream):void type: DIRECT \l0x0007: INVOKE  (r0 I:java.io.BufferedReader), (r1 I:java.io.Reader) java.io.BufferedReader.\<init\>(java.io.Reader):void type: DIRECT \l0x000a: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r6 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.String) = (r0 I:java.io.BufferedReader) java.io.BufferedReader.readLine():java.lang.String type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  \l  (r6 I:java.util.List\<com.j256.ormlite.logger.LocalLog$PatternLevel\>)\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r2 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  (r3 I:char) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0021: CONST  (r4 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: CONST_STR  (r3 I:java.lang.String) =  \"=\" \l0x0028: INVOKE  (r3 I:java.lang.String[]) = (r1 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x002c: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x002d: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0047 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: SGET  (r2 I:java.io.PrintStream) =  java.lang.System.err java.io.PrintStream \l0x0032: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0034: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0037: CONST_STR  (r4 I:java.lang.String) =  \"Line is not in the format of 'pattern = level': \" \l0x0039: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003f: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0043: INVOKE  (r2 I:java.io.PrintStream), (r1 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0049: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r1 I:java.util.regex.Pattern) = (r1 I:java.lang.String) java.util.regex.Pattern.compile(java.lang.String):java.util.regex.Pattern type: STATIC \l0x0051: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|SYNTHETIC\lSplitter:B:13:0x0052\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0052\l|0x0052: AGET  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) A[Catch:\{ IllegalArgumentException \-\> 0x0065 \}, TRY_ENTER]\l0x0054: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x0065 \}]\l0x0058: INVOKE  (r4 I:com.j256.ormlite.logger.Log$Level) = (r4 I:java.lang.String) com.j256.ormlite.logger.Log.Level.valueOf(java.lang.String):com.j256.ormlite.logger.Log$Level type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x0065 \}]\l0x005b: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x005c|0x005c: NEW_INSTANCE  (r2 I:com.j256.ormlite.logger.LocalLog$PatternLevel) =  com.j256.ormlite.logger.LocalLog$PatternLevel \l0x005e: INVOKE  \l  (r2 I:com.j256.ormlite.logger.LocalLog$PatternLevel)\l  (r1 I:java.util.regex.Pattern)\l  (r4 I:com.j256.ormlite.logger.Log$Level)\l com.j256.ormlite.logger.LocalLog.PatternLevel.\<init\>(java.util.regex.Pattern, com.j256.ormlite.logger.Log$Level):void type: DIRECT \l0x0061: INVOKE  (r6 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: SGET  (r1 I:java.io.PrintStream) =  java.lang.System.err java.io.PrintStream \l0x0067: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0069: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006c: CONST_STR  (r5 I:java.lang.String) =  \"Level '\" \l0x006e: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0071: AGET  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0073: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0076: CONST_STR  (r2 I:java.lang.String) =  \"' was not found\" \l0x0078: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007b: INVOKE  (r2 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007f: INVOKE  (r1 I:java.io.PrintStream), (r2 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:13:0x0052\l}"];
MethodNode[shape=record,label="{private static java.util.List\<com.j256.ormlite.logger.LocalLog$PatternLevel\> com.j256.ormlite.logger.LocalLog.configureClassLevels((r6 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/InputStream;, ), Ljava\/util\/List\<, Lcom\/j256\/ormlite\/logger\/LocalLog$PatternLevel;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_1[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_1;
Node_17 -> Node_16;
}

