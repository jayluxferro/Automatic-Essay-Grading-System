digraph "CFG forcom.j256.ormlite.logger.LocalLog.configureClassLevels(Ljava\/io\/InputStream;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.BufferedReader r0 = new java.io.BufferedReader(new java.io.InputStreamReader(r6))\ljava.util.ArrayList r6 = new java.util.ArrayList()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lLOOP:0: B:1:0x000f\-\>B:17:0x000f\l|java.lang.String r1 = r0.readLine()\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r1 != null) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return r6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r1.length() == 0) goto L_0x000f\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c}"];
Node_7 [shape=record,label="{7\:\ 0x0023|if (r1.charAt(0) != '#') goto L_0x0026\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|java.lang.String[] r3 = r1.split(com.j256.ormlite.stmt.query.SimpleComparison.EQUAL_TO_OPERATION)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|if (r3.length == 2) goto L_0x0047\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|java.io.PrintStream r2 = java.lang.System.err\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Line is not in the format of 'pattern = level': \")\lr3.append(r1)\lr2.println(r3.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047}"];
Node_12 [shape=record,label="{12\:\ 0x0052|SYNTHETIC\lSplitter:B:12:0x0052\l}"];
Node_13 [shape=record,label="{13\:\ ?|Catch:\{ IllegalArgumentException \-\> 0x0065 \}\lSplitter:B:12:0x0052\l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|r6.add(new com.j256.ormlite.logger.LocalLog.PatternLevel(java.util.regex.Pattern.compile(r3[0].trim()), com.j256.ormlite.logger.Log.Level.valueOf(r3[1].trim())))\l}"];
Node_15 [shape=record,label="{15\:\ 0x0065|java.io.PrintStream r1 = java.lang.System.err\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"Level '\")\lr4.append(r3[1])\lr4.append(\"' was not found\")\lr1.println(r4.toString())\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException (unused java.lang.IllegalArgumentException)\lSplitter:B:12:0x0052\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000f\-\>B:17:0x000f\l}"];
Node_18 [shape=record,label="{18\:\ 0x0015|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.util.List\<com.j256.ormlite.logger.LocalLog$PatternLevel\> com.j256.ormlite.logger.LocalLog.configureClassLevels((r6v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/InputStream;, ), Ljava\/util\/List\<, Lcom\/j256\/ormlite\/logger\/LocalLog$PatternLevel;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_18[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_20[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_22;
Node_15 -> Node_23;
Node_16 -> Node_15;
Node_17 -> Node_1;
Node_18 -> Node_3;
Node_19 -> Node_17;
Node_20 -> Node_17;
Node_21 -> Node_17;
Node_22 -> Node_17;
Node_23 -> Node_17;
}

