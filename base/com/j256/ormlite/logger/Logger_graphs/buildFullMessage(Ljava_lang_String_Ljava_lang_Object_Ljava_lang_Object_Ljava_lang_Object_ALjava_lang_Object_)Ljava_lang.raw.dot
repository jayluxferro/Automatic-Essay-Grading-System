digraph "CFG forcom.j256.ormlite.logger.Logger.buildFullMessage(Ljava\/lang\/String;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: CONST_STR  (r3 I:java.lang.String) =  \"\{\}\" \l0x0005: INVOKE  (r3 I:int) = \l  (r6 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r0 I:int)\l java.lang.String.indexOf(java.lang.String, int):int type: VIRTUAL \l0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r6 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r7 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0013: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r6 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r7 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r6 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: RETURN  (r6 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r6 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r3 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST_STR  (r0 I:java.lang.String) =  \"\{\}\" \l0x0029: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x002d: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: INVOKE  \l  (r5 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.StringBuilder)\l  (r7 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.appendArg(java.lang.StringBuilder, java.lang.Object):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: INVOKE  \l  (r5 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.StringBuilder)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.appendArg(java.lang.StringBuilder, java.lang.Object):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x004c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: INVOKE  \l  (r5 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.StringBuilder)\l  (r9 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.appendArg(java.lang.StringBuilder, java.lang.Object):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: ARRAY_LENGTH  (r3 I:int) = (r10 I:?[]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:22:0x004c \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l \l0x0049: INVOKE  \l  (r5 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.StringBuilder)\l  (r3 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.appendArg(java.lang.StringBuilder, java.lang.Object):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x004c|0x004c: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
MethodNode[shape=record,label="{private java.lang.String com.j256.ormlite.logger.Logger.buildFullMessage((r5 'this' I:com.j256.ormlite.logger.Logger A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_1;
}

