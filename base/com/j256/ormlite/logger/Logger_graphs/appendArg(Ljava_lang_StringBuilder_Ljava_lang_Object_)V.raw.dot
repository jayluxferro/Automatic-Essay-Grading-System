digraph "CFG forcom.j256.ormlite.logger.Logger.appendArg(Ljava\/lang\/StringBuilder;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.lang.Object) =  com.j256.ormlite.logger.Logger.UNKNOWN_ARG java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST_STR  (r5 I:java.lang.String) =  \"null\" \l0x0009: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0011: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class) java.lang.Class.isArray():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, short, byte, char]) = (91 ?[int, float, short, byte, char]) \l0x0019: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x001c: INVOKE  (r0 I:int) = (r5 I:java.lang.Object) java.lang.reflect.Array.getLength(java.lang.Object):int type: STATIC \l0x0020: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x0034 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: CONST_STR  (r2 I:java.lang.String) =  \", \" \l0x0027: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.lang.Object), (r1 I:int) java.lang.reflect.Array.get(java.lang.Object, int):java.lang.Object type: STATIC \l0x002e: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0031: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: CONST  (r5 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x003e: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{private void com.j256.ormlite.logger.Logger.appendArg((r3 'this' I:com.j256.ormlite.logger.Logger A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.StringBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_14[style=dashed];
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_14;
Node_13 -> Node_14;
}

