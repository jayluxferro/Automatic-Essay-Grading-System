digraph "CFG forcom.j256.ormlite.misc.VersionUtils.logVersionWarnings(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0004: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST_STR  (r9 I:java.lang.String) =  \"Unknown version\" \l0x000b: CONST_STR  (r5 I:java.lang.String) =  \" for \{\}, version for \{\} is '\{\}'\" \l0x000d: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x000f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0011: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x0013: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0015: INVOKE  \l  (r4 I:java.lang.Throwable)\l  (r9 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l com.j256.ormlite.misc.VersionUtils.warning(java.lang.Throwable, java.lang.String, java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002b \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST_STR  (r11 I:java.lang.String) =  \"Unknown version\" \l0x001d: CONST_STR  (r5 I:java.lang.String) =  \" for \{\}, version for \{\} is '\{\}'\" \l0x001f: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0021: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x0023: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0025: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0027: INVOKE  \l  (r4 I:java.lang.Throwable)\l  (r11 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l com.j256.ormlite.misc.VersionUtils.warning(java.lang.Throwable, java.lang.String, java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: INVOKE  (r5 I:boolean) = (r9 I:java.lang.String), (r11 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0043 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: CONST_STR  (r5 I:java.lang.String) =  \"Mismatched versions\" \l0x0033: CONST_STR  (r6 I:java.lang.String) =  \": \{\} is '\{\}', while \{\} is '\{\}'\" \l0x0035: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0036: NEW_ARRAY  (r7 I:java.lang.Object[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0038: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x003a: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x003c: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r10 I:?[OBJECT, ARRAY])\l \l0x003e: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0040: INVOKE  \l  (r4 I:java.lang.Throwable)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.Object[])\l com.j256.ormlite.misc.VersionUtils.warning(java.lang.Throwable, java.lang.String, java.lang.String, java.lang.Object[]):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.misc.VersionUtils.logVersionWarnings((r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

