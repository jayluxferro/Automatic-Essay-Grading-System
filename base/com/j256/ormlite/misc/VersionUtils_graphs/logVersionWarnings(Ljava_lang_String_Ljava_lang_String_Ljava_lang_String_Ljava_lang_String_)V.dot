digraph "CFG forcom.j256.ormlite.misc.VersionUtils.logVersionWarnings(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r9 != null) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|if (r11 == null) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|java.lang.Object[] r3 = new java.lang.Object[]\{r8, r10, r11\}\lwarning((java.lang.Throwable) null, \"Unknown version\", \" for \{\}, version for \{\} is '\{\}'\", r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r11 != null) goto L_0x002b\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|java.lang.Object[] r3 = new java.lang.Object[]\{r10, r8, r9\}\lwarning((java.lang.Throwable) null, \"Unknown version\", \" for \{\}, version for \{\} is '\{\}'\", r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002b}"];
Node_7 [shape=record,label="{7\:\ 0x002f|if (r9.equals(r11) != false) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|java.lang.Object[] r7 = new java.lang.Object[]\{r8, r9, r10, r11\}\lwarning((java.lang.Throwable) null, \"Mismatched versions\", \": \{\} is '\{\}', while \{\} is '\{\}'\", r7)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.misc.VersionUtils.logVersionWarnings((r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_11;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
}

