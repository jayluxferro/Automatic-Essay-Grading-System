digraph "CFG forcom.j256.ormlite.misc.JavaxPersistenceImpl.getEntityName(Ljava\/lang\/Class;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<javax.persistence.Entity\>) =  javax.persistence.Entity.class \l0x0002: INVOKE  (r0 I:java.lang.annotation.Annotation) = (r3 I:java.lang.Class), (r0 I:java.lang.Class) java.lang.Class.getAnnotation(java.lang.Class):java.lang.annotation.Annotation type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:javax.persistence.Entity) = (javax.persistence.Entity) (r0 I:?[OBJECT, ARRAY]) \l0x0008: CONST_CLASS  (r1 I:java.lang.Class\<javax.persistence.Table\>) =  javax.persistence.Table.class \l0x000a: INVOKE  (r3 I:java.lang.annotation.Annotation) = (r3 I:java.lang.Class), (r1 I:java.lang.Class) java.lang.Class.getAnnotation(java.lang.Class):java.lang.annotation.Annotation type: VIRTUAL \l0x000e: CHECK_CAST  (r3 I:javax.persistence.Table) = (javax.persistence.Table) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: INVOKE  (r1 I:java.lang.String) = (r0 I:javax.persistence.Entity) javax.persistence.Entity.name():java.lang.String type: INTERFACE \l0x0016: INVOKE  (r1 I:boolean) = \l  (r2 I:com.j256.ormlite.misc.JavaxPersistenceImpl)\l  (r1 I:java.lang.String)\l com.j256.ormlite.misc.JavaxPersistenceImpl.stringNotEmpty(java.lang.String):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: INVOKE  (r3 I:java.lang.String) = (r0 I:javax.persistence.Entity) javax.persistence.Entity.name():java.lang.String type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: RETURN  (r3 I:java.lang.String) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r0 I:java.lang.String) = (r3 I:javax.persistence.Table) javax.persistence.Table.name():java.lang.String type: INTERFACE \l0x0027: INVOKE  (r0 I:boolean) = \l  (r2 I:com.j256.ormlite.misc.JavaxPersistenceImpl)\l  (r0 I:java.lang.String)\l com.j256.ormlite.misc.JavaxPersistenceImpl.stringNotEmpty(java.lang.String):boolean type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: INVOKE  (r3 I:java.lang.String) = (r3 I:javax.persistence.Table) javax.persistence.Table.name():java.lang.String type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: RETURN  (r3 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String com.j256.ormlite.misc.JavaxPersistenceImpl.getEntityName((r2 'this' I:com.j256.ormlite.misc.JavaxPersistenceImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Class\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, *\>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

