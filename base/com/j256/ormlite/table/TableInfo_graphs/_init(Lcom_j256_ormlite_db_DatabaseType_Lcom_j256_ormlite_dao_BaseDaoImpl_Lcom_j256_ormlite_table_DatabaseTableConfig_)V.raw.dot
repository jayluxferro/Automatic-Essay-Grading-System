digraph "CFG forcom.j256.ormlite.table.TableInfo.\<init\>(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/dao\/BaseDaoImpl;Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r7 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r9 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\>)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.baseDaoImpl com.j256.ormlite.dao.BaseDaoImpl \l0x0005: INVOKE  (r9 I:java.lang.Class) = (r10 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.getDataClass():java.lang.Class type: VIRTUAL \l0x0009: IPUT  \l  (r9 I:java.lang.Class\<T\>)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.dataClass java.lang.Class \l0x000b: INVOKE  (r9 I:java.lang.String) = (r10 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.getTableName():java.lang.String type: VIRTUAL \l0x000f: IPUT  \l  (r9 I:java.lang.String)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.tableName java.lang.String \l0x0011: INVOKE  (r8 I:com.j256.ormlite.field.FieldType[]) = \l  (r10 I:com.j256.ormlite.table.DatabaseTableConfig)\l  (r8 I:com.j256.ormlite.db.DatabaseType)\l com.j256.ormlite.table.DatabaseTableConfig.getFieldTypes(com.j256.ormlite.db.DatabaseType):com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0015: IPUT  \l  (r8 I:com.j256.ormlite.field.FieldType[])\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.fieldTypes com.j256.ormlite.field.FieldType[] \l0x0017: IGET  (r8 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.fieldTypes com.j256.ormlite.field.FieldType[] \l0x0019: ARRAY_LENGTH  (r9 I:int) = (r8 I:?[]) \l0x001a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x001d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r1 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:19:0x0079 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: AGET  (r5 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0024: INVOKE  (r6 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isId():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0036 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: INVOKE  (r6 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isGeneratedId():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0036 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: INVOKE  (r6 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isGeneratedIdSequence():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: INVOKE  (r6 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignAutoCreate():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0040 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: INVOKE  (r5 I:boolean) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0048 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|0x004b: NEW_INSTANCE  (r8 I:java.sql.SQLException) =  java.sql.SQLException \l0x004d: NEW_INSTANCE  (r9 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004f: INVOKE  (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0052: CONST_STR  (r10 I:java.lang.String) =  \"More than 1 idField configured for class \" \l0x0054: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0057: IGET  (r10 I:java.lang.Class\<T\>) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.dataClass java.lang.Class \l0x0059: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x005c: CONST_STR  (r10 I:java.lang.String) =  \" (\" \l0x005e: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0061: INVOKE  (r9 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0064: CONST_STR  (r10 I:java.lang.String) =  \",\" \l0x0066: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0069: INVOKE  (r9 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x006c: CONST_STR  (r10 I:java.lang.String) =  \")\" \l0x006e: INVOKE  (r9 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0071: INVOKE  (r9 I:java.lang.String) = (r9 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0075: INVOKE  (r8 I:java.sql.SQLException), (r9 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0078|0x0078: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0079|0x0079: IPUT  \l  (r2 I:com.j256.ormlite.field.FieldType)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.idField com.j256.ormlite.field.FieldType \l0x007b: INVOKE  (r8 I:java.lang.reflect.Constructor) = (r10 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.getConstructor():java.lang.reflect.Constructor type: VIRTUAL \l0x007f: IPUT  \l  (r8 I:java.lang.reflect.Constructor\<T\>)\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.constructor java.lang.reflect.Constructor \l0x0081: IPUT  (r3 I:boolean), (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.foreignAutoCreate boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x0083|0x0083: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x008a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0085|0x0085: SGET  (r8 I:com.j256.ormlite.field.FieldType[]) =  com.j256.ormlite.table.TableInfo.NO_FOREIGN_COLLECTIONS com.j256.ormlite.field.FieldType[] \l0x0087: IPUT  \l  (r8 I:com.j256.ormlite.field.FieldType[])\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.foreignCollections com.j256.ormlite.field.FieldType[] \l}"];
Node_22 [shape=record,label="{22\:\ 0x008a|0x008a: NEW_ARRAY  (r8 I:com.j256.ormlite.field.FieldType[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x008c: IPUT  \l  (r8 I:com.j256.ormlite.field.FieldType[])\l  (r7 I:com.j256.ormlite.table.TableInfo)\l com.j256.ormlite.table.TableInfo.foreignCollections com.j256.ormlite.field.FieldType[] \l0x008e: IGET  (r8 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.fieldTypes com.j256.ormlite.field.FieldType[] \l0x0090: ARRAY_LENGTH  (r9 I:int) = (r8 I:?[]) \l0x0091: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x0092|0x0092: IF  (r0 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:28:0x00a5 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0094|0x0094: AGET  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0096: INVOKE  (r2 I:boolean) = (r1 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.isForeignCollection():boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x009a|0x009a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00a2 \l}"];
Node_26 [shape=record,label="{26\:\ 0x009c|0x009c: IGET  (r2 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.foreignCollections com.j256.ormlite.field.FieldType[] \l0x009e: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a0: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a2|0x00a2: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a5|0x00a5: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.table.TableInfo.\<init\>((r7 'this' I:com.j256.ormlite.table.TableInfo A[IMMUTABLE_TYPE, THIS]), (r8 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/dao\/BaseDaoImpl\<, TT;TID;\>;, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_23;
}

