digraph "CFG forcom.j256.ormlite.table.TableInfo.createObject()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.baseDaoImpl com.j256.ormlite.dao.BaseDaoImpl A[Catch:\{ Exception \-\> 0x0029 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b A[Catch:\{ Exception \-\> 0x0029 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.baseDaoImpl com.j256.ormlite.dao.BaseDaoImpl A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0007: INVOKE  (r0 I:com.j256.ormlite.table.ObjectFactory) = (r0 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.getObjectFactory():com.j256.ormlite.table.ObjectFactory type: VIRTUAL A[Catch:\{ Exception \-\> 0x0029 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 A[Catch:\{ Exception \-\> 0x0029 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IGET  (r0 I:java.lang.reflect.Constructor\<T\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.constructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0029 \}]\l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0010: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0012: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Constructor)\l  (r1 I:java.lang.Object[])\l java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object type: VIRTUAL A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0016: GOTO  \-\> 0x0023 A[Catch:\{ Exception \-\> 0x0029 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IGET  (r1 I:java.lang.reflect.Constructor\<T\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.constructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0019: IGET  (r2 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.baseDaoImpl com.j256.ormlite.dao.BaseDaoImpl A[Catch:\{ Exception \-\> 0x0029 \}]\l0x001b: INVOKE  (r2 I:java.lang.Class) = (r2 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.getDataClass():java.lang.Class type: VIRTUAL A[Catch:\{ Exception \-\> 0x0029 \}]\l0x001f: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.table.ObjectFactory)\l  (r1 I:java.lang.reflect.Constructor)\l  (r2 I:java.lang.Class)\l com.j256.ormlite.table.ObjectFactory.createObject(java.lang.reflect.Constructor, java.lang.Class):java.lang.Object type: INTERFACE A[Catch:\{ Exception \-\> 0x0029 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r1 I:com.j256.ormlite.dao.BaseDaoImpl\<T, ID\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.baseDaoImpl com.j256.ormlite.dao.BaseDaoImpl A[Catch:\{ Exception \-\> 0x0029 \}]\l0x0025: INVOKE  \l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r0 I:java.lang.Object)\l com.j256.ormlite.table.TableInfo.wireNewInstance(com.j256.ormlite.dao.BaseDaoImpl, java.lang.Object):void type: STATIC A[Catch:\{ Exception \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: RETURN  (r0 I:T) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|ExcHandler: Exception null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002f: CONST_STR  (r2 I:java.lang.String) =  \"Could not create object for \" \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: IGET  (r2 I:java.lang.reflect.Constructor\<T\>) = (r3 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.constructor java.lang.reflect.Constructor \l0x0036: INVOKE  (r2 I:java.lang.Class) = (r2 I:java.lang.reflect.Constructor) java.lang.reflect.Constructor.getDeclaringClass():java.lang.Class type: VIRTUAL \l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r0 I:java.sql.SQLException) = (r1 I:java.lang.String), (r0 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T com.j256.ormlite.table.TableInfo.createObject((r3 'this' I:com.j256.ormlite.table.TableInfo A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

