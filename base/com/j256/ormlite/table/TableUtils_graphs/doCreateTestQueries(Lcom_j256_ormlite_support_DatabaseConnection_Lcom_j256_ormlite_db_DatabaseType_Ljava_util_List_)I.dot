digraph "CFG forcom.j256.ormlite.table.TableUtils.doCreateTestQueries(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r10 = r11.iterator()\lr0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:11:0x003c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:11:0x003c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r10.hasNext() == false) goto L_0x0069\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|java.lang.String r1 = r10.next()\lr8 = null\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|SYNTHETIC\lSplitter:B:4:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ SQLException \-\> 0x004c \}\lSplitter:B:4:0x0013\l|r2 = r9     \/\/ Catch:\{ SQLException \-\> 0x004c \}\lr3 = r1     \/\/ Catch:\{ SQLException \-\> 0x004c \}\lcom.j256.ormlite.support.CompiledStatement r2 = r2.compileStatement(r3, com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT, noFieldTypes, \-1, false)     \/\/ Catch:\{ SQLException \-\> 0x004c \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|SYNTHETIC\lSplitter:B:6:0x001f\l}"];
Node_7 [shape=record,label="{7\:\ ?|Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lSplitter:B:6:0x001f\l|com.j256.ormlite.support.DatabaseResults r3 = r2.runQuery((com.j256.ormlite.dao.ObjectCache) null)     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lboolean r4 = r3.first()     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lr5 = 0     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|LOOP_START\lCatch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lPHI: r4 r5 \l  PHI: (r4v2 boolean) = (r4v1 boolean), (r4v4 boolean) binds: [B:7:?, B:9:0x002a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 int) = (r5v1 int), (r5v4 int) binds: [B:7:?, B:9:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0028\-\>B:9:0x002a\l|if (r4 == false) goto L_0x0031     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|LOOP_END\lCatch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lLOOP:1: B:8:0x0028\-\>B:9:0x002a\l|int r5 = r5 + 1     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\lboolean r4 = r3.next()     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\l|logger.info(\"executing create table after\-query got \{\} results: \{\}\", (java.lang.Object) java.lang.Integer.valueOf(r5), (java.lang.Object) r1)     \/\/ Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:11:0x003c\l|com.j256.ormlite.misc.IOUtils.closeThrowSqlException(r2, \"compiled statement\")\lint r0 = r0 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|ExcHandler: all (th java.lang.Throwable)\lSplitter:B:6:0x001f\l|java.lang.Throwable r9 = th\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|r8 = r2\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|ExcHandler: SQLException (e java.sql.SQLException)\lSplitter:B:6:0x001f\l|java.sql.SQLException r9 = e\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|r8 = r2\l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|ExcHandler: all (th java.lang.Throwable)\lSplitter:B:18:0x004d\l|java.lang.Throwable r9 = th\l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|ExcHandler: SQLException (e java.sql.SQLException)\lSplitter:B:4:0x0013\l|java.sql.SQLException r9 = e\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|SYNTHETIC\lPHI: r8 r9 \l  PHI: (r8v2 com.j256.ormlite.support.CompiledStatement) = (r8v0 com.j256.ormlite.support.CompiledStatement), (r8v3 com.j256.ormlite.support.CompiledStatement) binds: [B:17:0x004c, B:15:0x0048] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v2 'e' java.sql.SQLException) = (r9v5 'e' java.sql.SQLException), (r9v6 'e' java.sql.SQLException) binds: [B:17:0x004c, B:15:0x0048] A[DONT_GENERATE, DONT_INLINE]\lSplitter:B:18:0x004d\l}"];
Node_19 [shape=record,label="{19\:\ ?|Catch:\{ all \-\> 0x004a \}\lSplitter:B:18:0x004d\l|java.lang.StringBuilder r10 = new java.lang.StringBuilder()     \/\/ Catch:\{ all \-\> 0x004a \}\lr10.append(\"executing create table after\-query failed: \")     \/\/ Catch:\{ all \-\> 0x004a \}\lr10.append(r1)     \/\/ Catch:\{ all \-\> 0x004a \}\l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|Catch:\{ all \-\> 0x004a \}\l|throw com.j256.ormlite.misc.SqlExceptionUtil.create(r10.toString(), r9)     \/\/ Catch:\{ all \-\> 0x004a \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x0063|PHI: r8 r9 \l  PHI: (r8v1 com.j256.ormlite.support.CompiledStatement) = (r8v2 com.j256.ormlite.support.CompiledStatement), (r8v4 com.j256.ormlite.support.CompiledStatement) binds: [B:16:0x004a, B:13:0x0045] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'th' java.lang.Throwable) = (r9v4 'th' java.lang.Throwable), (r9v7 'th' java.lang.Throwable) binds: [B:16:0x004a, B:13:0x0045] A[DONT_GENERATE, DONT_INLINE]\l|com.j256.ormlite.misc.IOUtils.closeThrowSqlException(r8, \"compiled statement\")\l}"];
Node_22 [shape=record,label="{22\:\ 0x0068|throw r9\l}"];
Node_23 [shape=record,label="{23\:\ 0x0069|RETURN\l|return r0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0069|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.j256.ormlite.table.TableUtils.doCreateTestQueries((r9v0 com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_14;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_25;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_18;
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_16;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_24 -> Node_23;
Node_25 -> Node_10;
}

