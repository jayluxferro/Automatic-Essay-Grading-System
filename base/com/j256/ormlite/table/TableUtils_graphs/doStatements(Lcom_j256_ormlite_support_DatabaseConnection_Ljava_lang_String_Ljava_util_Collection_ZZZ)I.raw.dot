digraph "CFG forcom.j256.ormlite.table.TableUtils.doStatements(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Ljava\/lang\/String;Ljava\/util\/Collection;ZZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r12 I:java.util.Iterator) = (r12 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r2 I:boolean) = (r12 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00be \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r2 I:java.lang.Object) = (r12 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x0012: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|SYNTHETIC\lSplitter:B:4:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0013\l|0x0013: SGET  (r5 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.EXECUTE com.j256.ormlite.stmt.StatementBuilder$StatementType A[Catch:\{ SQLException \-\> 0x0041 \}, TRY_ENTER]\l0x0015: SGET  (r6 I:com.j256.ormlite.field.FieldType[]) =  com.j256.ormlite.table.TableUtils.noFieldTypes com.j256.ormlite.field.FieldType[] A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x0017: CONST  (r7 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x0018: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x0019: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x001a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x001b: INVOKE  (r3 I:com.j256.ormlite.support.CompiledStatement) = \l  (r3 I:com.j256.ormlite.support.DatabaseConnection)\l  (r4 I:java.lang.String)\l  (r5 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r6 I:com.j256.ormlite.field.FieldType[])\l  (r7 I:int)\l  (r8 I:boolean)\l com.j256.ormlite.support.DatabaseConnection.compileStatement(java.lang.String, com.j256.ormlite.stmt.StatementBuilder$StatementType, com.j256.ormlite.field.FieldType[], int, boolean):com.j256.ormlite.support.CompiledStatement type: INTERFACE A[Catch:\{ SQLException \-\> 0x0041 \}]\l0x001e: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|SYNTHETIC\lSplitter:B:6:0x001f\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x001f\l|0x001f: INVOKE  (r4 I:int) = (r3 I:com.j256.ormlite.support.CompiledStatement) com.j256.ormlite.support.CompiledStatement.runExecute():int type: INTERFACE A[Catch:\{ SQLException \-\> 0x003b, all \-\> 0x0037 \}, TRY_ENTER]\l0x0022: NOP   A[TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|SYNTHETIC\lSplitter:B:8:0x0023\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0023\l|0x0023: SGET  (r5 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.table.TableUtils.logger com.j256.ormlite.logger.Logger A[Catch:\{ SQLException \-\> 0x0034, all \-\> 0x0037 \}, TRY_ENTER]\l0x0025: CONST_STR  (r6 I:java.lang.String) =  \"executed \{\} table statement changed \{\} rows: \{\}\" A[Catch:\{ SQLException \-\> 0x0034, all \-\> 0x0037 \}]\l0x0027: INVOKE  (r7 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ SQLException \-\> 0x0034, all \-\> 0x0037 \}]\l0x002b: INVOKE  \l  (r5 I:com.j256.ormlite.logger.Logger)\l  (r6 I:java.lang.String)\l  (r11 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.info(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0034, all \-\> 0x0037 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: CONST_STR  (r5 I:java.lang.String) =  \"compiled statement\" \l0x0030: INVOKE  (r3 I:java.io.Closeable), (r5 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|ExcHandler: SQLException null\lSplitter:B:8:0x0023\l|0x0034: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|ExcHandler: all null\lSplitter:B:6:0x001f\l|0x0037: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|ExcHandler: SQLException null\lSplitter:B:6:0x001f\l|0x003b: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|ExcHandler: all null\lSplitter:B:22:0x0045\l|0x003e: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|ExcHandler: SQLException null\lSplitter:B:4:0x0013\l|0x0041: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00a2 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|SYNTHETIC\lSplitter:B:22:0x0045\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x0045\l|0x0045: SGET  (r3 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.table.TableUtils.logger com.j256.ormlite.logger.Logger A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x0047: CONST_STR  (r6 I:java.lang.String) =  \"ignoring \{\} error '\{\}' for statement: \{\}\" A[Catch:\{ all \-\> 0x003e \}]\l0x0049: INVOKE  \l  (r3 I:com.j256.ormlite.logger.Logger)\l  (r6 I:java.lang.String)\l  (r11 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.info(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004c|0x004c: CONST_STR  (r3 I:java.lang.String) =  \"compiled statement\" \l0x004e: INVOKE  (r9 I:java.io.Closeable), (r3 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0051|0x0051: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:30:0x007a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0053|0x0053: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0056 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0056|0x0056: NEW_INSTANCE  (r10 I:java.sql.SQLException) =  java.sql.SQLException \l0x0058: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005a: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005d: CONST_STR  (r12 I:java.lang.String) =  \"SQL statement \" \l0x005f: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r11 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0065: CONST_STR  (r12 I:java.lang.String) =  \" updated \" \l0x0067: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r11 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x006d: CONST_STR  (r12 I:java.lang.String) =  \" rows, we were expecting \>= 0\" \l0x006f: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0072: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0076: INVOKE  (r10 I:java.sql.SQLException), (r11 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x0079|0x0079: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x007a|0x007a: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:35:0x009e \l}"];
Node_31 [shape=record,label="{31\:\ 0x007c|0x007c: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x007f \l}"];
Node_33 [shape=record,label="{33\:\ 0x007f|0x007f: NEW_INSTANCE  (r10 I:java.sql.SQLException) =  java.sql.SQLException \l0x0081: NEW_INSTANCE  (r11 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0083: INVOKE  (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0086: CONST_STR  (r12 I:java.lang.String) =  \"SQL statement updated \" \l0x0088: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008b: INVOKE  (r11 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x008e: CONST_STR  (r12 I:java.lang.String) =  \" rows, we were expecting == 0: \" \l0x0090: INVOKE  (r11 I:java.lang.StringBuilder), (r12 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0093: INVOKE  (r11 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0096: INVOKE  (r11 I:java.lang.String) = (r11 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x009a: INVOKE  (r10 I:java.sql.SQLException), (r11 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x009d|0x009d: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x009e|0x009e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00a2|SYNTHETIC\lSplitter:B:36:0x00a2\l}"];
Node_37 [shape=record,label="{37\:\ ?|Splitter:B:36:0x00a2\l|0x00a2: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x00a4: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x003e \}]\l0x00a7: CONST_STR  (r11 I:java.lang.String) =  \"SQL statement failed: \" A[Catch:\{ all \-\> 0x003e \}]\l0x00a9: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x00ac: INVOKE  (r10 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x00af: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}]\l0x00b3: INVOKE  (r10 I:java.sql.SQLException) = (r10 I:java.lang.String), (r5 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC A[Catch:\{ all \-\> 0x003e \}]\l}"];
Node_38 [shape=record,label="{38\:\ 0x00b7|0x00b7: THROW  (r10 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x00b8|0x00b8: CONST_STR  (r11 I:java.lang.String) =  \"compiled statement\" \l0x00ba: INVOKE  (r9 I:java.io.Closeable), (r11 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_40 [shape=record,label="{40\:\ 0x00bd|0x00bd: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00be|0x00be: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.j256.ormlite.table.TableUtils.doStatements((r10 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.Collection\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, Ljava\/lang\/String;, Ljava\/util\/Collection\<, Ljava\/lang\/String;, \>;ZZZ)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_41;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_15;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_9 -> Node_13;
Node_10 -> Node_25;
Node_11 -> Node_12;
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_14 -> Node_39;
Node_15 -> Node_16;
Node_16 -> Node_20;
Node_17 -> Node_39;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_36;
Node_22 -> Node_23;
Node_22 -> Node_17;
Node_23 -> Node_24;
Node_23 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_28;
Node_26 -> Node_35[style=dashed];
Node_28 -> Node_29;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_35 -> Node_1;
Node_36 -> Node_37;
Node_36 -> Node_17;
Node_37 -> Node_38;
Node_39 -> Node_40;
}

