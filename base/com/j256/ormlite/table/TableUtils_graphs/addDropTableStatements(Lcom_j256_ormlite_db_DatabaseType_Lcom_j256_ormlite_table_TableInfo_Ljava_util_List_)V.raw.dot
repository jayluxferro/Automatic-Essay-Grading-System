digraph "CFG forcom.j256.ormlite.table.TableUtils.addDropTableStatements(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/table\/TableInfo;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0007: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000a: INVOKE  (r2 I:com.j256.ormlite.field.FieldType[]) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x000e: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x000f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0014: INVOKE  \l  (r6 I:com.j256.ormlite.db.DatabaseType)\l  (r5 I:com.j256.ormlite.field.FieldType)\l  (r0 I:java.util.List)\l  (r1 I:java.util.List)\l com.j256.ormlite.db.DatabaseType.dropColumnArg(com.j256.ormlite.field.FieldType, java.util.List, java.util.List):void type: INTERFACE \l0x0017: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001c: CONST  (r3 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l0x001e: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0021: CONST_STR  (r3 I:java.lang.String) =  \"DROP TABLE \" \l0x0023: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0026: INVOKE  (r7 I:java.lang.String) = (r7 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x002a: INVOKE  \l  (r6 I:com.j256.ormlite.db.DatabaseType)\l  (r2 I:java.lang.StringBuilder)\l  (r7 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x002d: CONST  (r6 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x002f: INVOKE  (r2 I:java.lang.StringBuilder), (r6 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r8 I:java.util.List), (r0 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l0x0035: INVOKE  (r6 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0039: INVOKE  (r8 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x003c: INVOKE  (r8 I:java.util.List), (r1 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x003f|0x003f: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.TableUtils.addDropTableStatements((r6 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, ID:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

