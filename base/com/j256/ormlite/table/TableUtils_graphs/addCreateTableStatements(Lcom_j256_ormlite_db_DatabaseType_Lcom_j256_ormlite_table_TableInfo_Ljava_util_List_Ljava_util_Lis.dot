digraph "CFG forcom.j256.ormlite.table.TableUtils.addCreateTableStatements(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/table\/TableInfo;Ljava\/util\/List;Ljava\/util\/List;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r8 = r21\lr9 = r22\lr10 = r23\lr11 = r25\ljava.lang.StringBuilder r12 = new java.lang.StringBuilder(256)\lr12.append(\"CREATE TABLE \")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r11 == false) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016}"];
Node_3 [shape=record,label="{3\:\ 0x001a|if (r21.isCreateIfNotExistsSupported() == false) goto L_0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|r12.append(\"IF NOT EXISTS \")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|r8.appendEscapedEntityName(r12, r22.getTableName())\lr12.append(\" (\")\ljava.util.ArrayList r13 = new java.util.ArrayList()\ljava.util.ArrayList r14 = new java.util.ArrayList()\ljava.util.ArrayList r15 = new java.util.ArrayList()\lcom.j256.ormlite.field.FieldType[] r7 = r22.getFieldTypes()\lint r6 = r7.length\lr0 = true\lr3 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|LOOP_START\lPHI: r0 r3 r6 r7 \l  PHI: (r0v5 boolean) = (r0v4 boolean), (r0v11 boolean) binds: [B:5:0x0021, B:18:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:5:0x0021, B:18:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:5:0x0021, B:18:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 com.j256.ormlite.field.FieldType[]) = (r7v0 com.j256.ormlite.field.FieldType[]), (r7v2 com.j256.ormlite.field.FieldType[]) binds: [B:5:0x0021, B:18:0x009d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0045\-\>B:18:0x009d\l|if (r3 \>= r6) goto L_0x00a8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|r16 = r7[r3]\l}"];
Node_8 [shape=record,label="{8\:\ 0x004d|if (r16.isForeignCollection() == false) goto L_0x0057\l}"];
Node_9 [shape=record,label="{9\:\ 0x004f|r18 = r3\lr19 = r6\lr20 = r7\l}"];
Node_10 [shape=record,label="{10\:\ 0x0057|if (r0 == false) goto L_0x005c\l}"];
Node_11 [shape=record,label="{11\:\ 0x0059|r17 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|r12.append(\", \")\lr17 = r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0063|PHI: r17 \l  PHI: (r17v0 boolean) = (r17v1 boolean), (r17v2 boolean) binds: [B:12:0x005c, B:11:0x0059] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String r0 = r16.getColumnDefinition()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0067|if (r0 != null) goto L_0x0082\l}"];
Node_15 [shape=record,label="{15\:\ 0x0069|r0 = r21\lr18 = r3\lr19 = r6\lr20 = r7\lr0.appendColumnArg(r22.getTableName(), r12, r16, r13, r14, r15, r24)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0082|r18 = r3\lr19 = r6\lr20 = r7\lr8.appendEscapedEntityName(r12, r16.getColumnName())\lr12.append(' ')\lr12.append(r0)\lr12.append(' ')\l}"];
Node_17 [shape=record,label="{17\:\ 0x009b|PHI: r18 r19 r20 \l  PHI: (r18v1 int) = (r18v2 int), (r18v3 int) binds: [B:16:0x0082, B:15:0x0069] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r19v1 int) = (r19v2 int), (r19v3 int) binds: [B:16:0x0082, B:15:0x0069] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v1 com.j256.ormlite.field.FieldType[]) = (r20v2 com.j256.ormlite.field.FieldType[]), (r20v3 com.j256.ormlite.field.FieldType[]) binds: [B:16:0x0082, B:15:0x0069] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r17\l}"];
Node_18 [shape=record,label="{18\:\ 0x009d|LOOP_END\lPHI: r0 r18 r19 r20 \l  PHI: (r0v11 boolean) = (r0v13 boolean), (r0v5 boolean) binds: [B:26:0x009d, B:27:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r18v0 int) = (r18v1 int), (r18v4 int) binds: [B:26:0x009d, B:27:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r19v0 int) = (r19v1 int), (r19v4 int) binds: [B:26:0x009d, B:27:0x009d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r20v0 com.j256.ormlite.field.FieldType[]) = (r20v1 com.j256.ormlite.field.FieldType[]), (r20v4 com.j256.ormlite.field.FieldType[]) binds: [B:26:0x009d, B:27:0x009d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x0045\-\>B:18:0x009d\l|int r3 = r18 + 1\lr6 = r19\lr7 = r20\lr9 = r22\l}"];
Node_19 [shape=record,label="{19\:\ 0x00a8|r0 = r21\lr2 = r13\lr3 = r14\lr4 = r15\lr5 = r24\lr0.addPrimaryKeySql(r22.getFieldTypes(), r2, r3, r4, r5)\lr0.addUniqueComboSql(r22.getFieldTypes(), r2, r3, r4, r5)\ljava.util.Iterator r0 = r13.iterator()\l}"];
Node_20 [shape=record,label="{20\:\ 0x00c2|LOOP_START\lLOOP:1: B:20:0x00c2\-\>B:22:0x00c8\l}"];
Node_21 [shape=record,label="{21\:\ 0x00c6|if (r0.hasNext() == false) goto L_0x00d7\l}"];
Node_22 [shape=record,label="{22\:\ 0x00c8|LOOP_END\lLOOP:1: B:20:0x00c2\-\>B:22:0x00c8\l|r12.append(\", \")\lr12.append((java.lang.String) r0.next())\l}"];
Node_23 [shape=record,label="{23\:\ 0x00d7|r12.append(\") \")\lr8.appendCreateTableSuffix(r12)\lr10.addAll(r14)\lr10.add(r12.toString())\lr10.addAll(r15)\lr0 = r22\laddCreateIndexStatements(r8, r0, r10, r11, false)\laddCreateIndexStatements(r8, r0, r10, r11, true)\l}"];
Node_24 [shape=record,label="{24\:\ 0x00f6|RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a8|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x009d|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x009d|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x00d7|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.TableUtils.addCreateTableStatements((r21v0 com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, ID:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_25;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_27;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_26;
Node_18 -> Node_6;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_20;
Node_23 -> Node_24;
Node_25 -> Node_19;
Node_26 -> Node_18;
Node_27 -> Node_18;
Node_28 -> Node_23;
}

