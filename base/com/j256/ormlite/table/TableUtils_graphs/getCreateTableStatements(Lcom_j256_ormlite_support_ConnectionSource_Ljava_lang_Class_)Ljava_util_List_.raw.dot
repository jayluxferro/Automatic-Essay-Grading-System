digraph "CFG forcom.j256.ormlite.table.TableUtils.getCreateTableStatements(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/Class;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.j256.ormlite.dao.Dao) = \l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r4 I:java.lang.Class)\l com.j256.ormlite.dao.DaoManager.createDao(com.j256.ormlite.support.ConnectionSource, java.lang.Class):com.j256.ormlite.dao.Dao type: STATIC \l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) com.j256.ormlite.dao.BaseDaoImpl \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CHECK_CAST  (r0 I:com.j256.ormlite.dao.BaseDaoImpl) = (com.j256.ormlite.dao.BaseDaoImpl) (r0 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r4 I:com.j256.ormlite.table.TableInfo) = (r0 I:com.j256.ormlite.dao.BaseDaoImpl) com.j256.ormlite.dao.BaseDaoImpl.getTableInfo():com.j256.ormlite.table.TableInfo type: VIRTUAL \l0x000f: INVOKE  (r3 I:java.util.List) = \l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r4 I:com.j256.ormlite.table.TableInfo)\l  (r2 I:boolean)\l com.j256.ormlite.table.TableUtils.addCreateTableStatements(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.table.TableInfo, boolean):java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  (r3 I:java.util.List\<java.lang.String\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:com.j256.ormlite.table.TableInfo) =  com.j256.ormlite.table.TableInfo \l0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: INVOKE  \l  (r0 I:com.j256.ormlite.table.TableInfo)\l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:com.j256.ormlite.dao.BaseDaoImpl)\l  (r4 I:java.lang.Class)\l com.j256.ormlite.table.TableInfo.\<init\>(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.dao.BaseDaoImpl, java.lang.Class):void type: DIRECT \l0x001a: INVOKE  (r3 I:java.util.List) = \l  (r3 I:com.j256.ormlite.support.ConnectionSource)\l  (r0 I:com.j256.ormlite.table.TableInfo)\l  (r2 I:boolean)\l com.j256.ormlite.table.TableUtils.addCreateTableStatements(com.j256.ormlite.support.ConnectionSource, com.j256.ormlite.table.TableInfo, boolean):java.util.List type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r3 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<java.lang.String\> com.j256.ormlite.table.TableUtils.getCreateTableStatements((r3 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, ID:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/Class\<, TT;\>;), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

