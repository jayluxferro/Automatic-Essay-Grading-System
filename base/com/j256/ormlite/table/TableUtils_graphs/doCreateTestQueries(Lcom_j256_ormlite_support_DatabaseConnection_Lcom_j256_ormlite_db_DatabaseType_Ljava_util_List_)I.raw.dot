digraph "CFG forcom.j256.ormlite.table.TableUtils.doCreateTestQueries(Lcom\/j256\/ormlite\/support\/DatabaseConnection;Lcom\/j256\/ormlite\/db\/DatabaseType;Ljava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r10 I:java.util.Iterator) = (r11 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0004: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r10 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0069 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r10 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x0012: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|SYNTHETIC\lSplitter:B:4:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0013\l|0x0013: SGET  (r4 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT com.j256.ormlite.stmt.StatementBuilder$StatementType A[Catch:\{ SQLException \-\> 0x004c \}, TRY_ENTER]\l0x0015: SGET  (r5 I:com.j256.ormlite.field.FieldType[]) =  com.j256.ormlite.table.TableUtils.noFieldTypes com.j256.ormlite.field.FieldType[] A[Catch:\{ SQLException \-\> 0x004c \}]\l0x0017: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) A[Catch:\{ SQLException \-\> 0x004c \}]\l0x0018: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ SQLException \-\> 0x004c \}]\l0x0019: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ SQLException \-\> 0x004c \}]\l0x001a: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ SQLException \-\> 0x004c \}]\l0x001b: INVOKE  (r2 I:com.j256.ormlite.support.CompiledStatement) = \l  (r2 I:com.j256.ormlite.support.DatabaseConnection)\l  (r3 I:java.lang.String)\l  (r4 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l  (r5 I:com.j256.ormlite.field.FieldType[])\l  (r6 I:int)\l  (r7 I:boolean)\l com.j256.ormlite.support.DatabaseConnection.compileStatement(java.lang.String, com.j256.ormlite.stmt.StatementBuilder$StatementType, com.j256.ormlite.field.FieldType[], int, boolean):com.j256.ormlite.support.CompiledStatement type: INTERFACE A[Catch:\{ SQLException \-\> 0x004c \}]\l0x001e: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|SYNTHETIC\lSplitter:B:6:0x001f\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x001f\l|0x001f: INVOKE  (r3 I:com.j256.ormlite.support.DatabaseResults) = \l  (r2 I:com.j256.ormlite.support.CompiledStatement)\l  (r8 I:com.j256.ormlite.dao.ObjectCache)\l com.j256.ormlite.support.CompiledStatement.runQuery(com.j256.ormlite.dao.ObjectCache):com.j256.ormlite.support.DatabaseResults type: INTERFACE A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}, TRY_ENTER]\l0x0023: INVOKE  (r4 I:boolean) = (r3 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.first():boolean type: INTERFACE A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x0027: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x002c: INVOKE  (r4 I:boolean) = (r3 I:com.j256.ormlite.support.DatabaseResults) com.j256.ormlite.support.DatabaseResults.next():boolean type: INTERFACE A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x0030: GOTO  \-\> 0x0028 A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: SGET  (r3 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.table.TableUtils.logger com.j256.ormlite.logger.Logger A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x0033: CONST_STR  (r4 I:java.lang.String) =  \"executing create table after\-query got \{\} results: \{\}\" A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x0035: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}]\l0x0039: INVOKE  \l  (r3 I:com.j256.ormlite.logger.Logger)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.info(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0047, all \-\> 0x0044 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: CONST_STR  (r1 I:java.lang.String) =  \"compiled statement\" \l0x003e: INVOKE  (r2 I:java.io.Closeable), (r1 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l0x0041: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|ExcHandler: all null\lSplitter:B:6:0x001f\l|0x0044: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|ExcHandler: SQLException null\lSplitter:B:6:0x001f\l|0x0047: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|ExcHandler: all null\lSplitter:B:19:0x004d\l|0x004a: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|ExcHandler: SQLException null\lSplitter:B:4:0x0013\l|0x004c: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|SYNTHETIC\lSplitter:B:19:0x004d\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x004d\l|0x004d: NEW_INSTANCE  (r10 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x004a \}, TRY_ENTER]\l0x004f: INVOKE  (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x004a \}]\l0x0052: CONST_STR  (r11 I:java.lang.String) =  \"executing create table after\-query failed: \" A[Catch:\{ all \-\> 0x004a \}]\l0x0054: INVOKE  (r10 I:java.lang.StringBuilder), (r11 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x0057: INVOKE  (r10 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x005a: INVOKE  (r10 I:java.lang.String) = (r10 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x005e: INVOKE  (r9 I:java.sql.SQLException) = (r10 I:java.lang.String), (r9 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: THROW  (r9 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x004a \}, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0063|0x0063: CONST_STR  (r10 I:java.lang.String) =  \"compiled statement\" \l0x0065: INVOKE  (r8 I:java.io.Closeable), (r10 I:java.lang.String) com.j256.ormlite.misc.IOUtils.closeThrowSqlException(java.io.Closeable, java.lang.String):void type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|0x0068: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0069|0x0069: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.j256.ormlite.table.TableUtils.doCreateTestQueries((r9 I:com.j256.ormlite.support.DatabaseConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, Lcom\/j256\/ormlite\/db\/DatabaseType;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_14;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_19;
Node_16 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

