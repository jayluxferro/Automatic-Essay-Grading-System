digraph "CFG forcom.j256.ormlite.table.TableUtils.addDropIndexStatements(Lcom\/j256\/ormlite\/db\/DatabaseType;Lcom\/j256\/ormlite\/table\/TableInfo;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashSet) =  java.util.HashSet \l0x0002: INVOKE  (r0 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:com.j256.ormlite.field.FieldType[]) = (r8 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getFieldTypes():com.j256.ormlite.field.FieldType[] type: VIRTUAL \l0x0009: ARRAY_LENGTH  (r2 I:int) = (r1 I:?[]) \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: AGET  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0010: INVOKE  (r6 I:java.lang.String) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getIndexName():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r0 I:java.util.Set), (r6 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r5 I:java.lang.String) = (r5 I:com.j256.ormlite.field.FieldType) com.j256.ormlite.field.FieldType.getUniqueIndexName():java.lang.String type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: INVOKE  (r0 I:java.util.Set), (r5 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: CONST  (r2 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x002c: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x003a: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x003c: SGET  (r4 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.table.TableUtils.logger com.j256.ormlite.logger.Logger \l0x003e: CONST_STR  (r5 I:java.lang.String) =  \"dropping index '\{\}' for table '\{\}\" \l0x0040: INVOKE  (r6 I:java.lang.String) = (r8 I:com.j256.ormlite.table.TableInfo) com.j256.ormlite.table.TableInfo.getTableName():java.lang.String type: VIRTUAL \l0x0044: INVOKE  \l  (r4 I:com.j256.ormlite.logger.Logger)\l  (r5 I:java.lang.String)\l  (r2 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.info(java.lang.String, java.lang.Object, java.lang.Object):void type: VIRTUAL \l0x0047: CONST_STR  (r4 I:java.lang.String) =  \"DROP INDEX \" \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  \l  (r7 I:com.j256.ormlite.db.DatabaseType)\l  (r1 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x004f: INVOKE  (r2 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0053: INVOKE  (r9 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0056: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.setLength(int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.TableUtils.addDropIndexStatements((r7 I:com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:com.j256.ormlite.table.TableInfo\<T, ID\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, ID:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/db\/DatabaseType;, Lcom\/j256\/ormlite\/table\/TableInfo\<, TT;TID;\>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
}

