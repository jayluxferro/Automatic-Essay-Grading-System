digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfigLoader.readTableField(Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"dataClass\" \l0x0002: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0008\l|0x0008: INVOKE  (r2 I:java.lang.Class) = (r3 I:java.lang.String) java.lang.Class.forName(java.lang.String):java.lang.Class type: STATIC A[Catch:\{ ClassNotFoundException \-\> 0x0010 \}, TRY_ENTER]\l0x000c: INVOKE  \l  (r1 I:com.j256.ormlite.table.DatabaseTableConfig)\l  (r2 I:java.lang.Class)\l com.j256.ormlite.table.DatabaseTableConfig.setDataClass(java.lang.Class):void type: VIRTUAL A[Catch:\{ ClassNotFoundException \-\> 0x0010 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0012: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0014: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0017: CONST_STR  (r0 I:java.lang.String) =  \"Unknown class specified for dataClass: \" \l0x0019: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001f: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0023: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException null\lSplitter:B:2:0x0008\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: CONST_STR  (r0 I:java.lang.String) =  \"tableName\" \l0x0029: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: INVOKE  \l  (r1 I:com.j256.ormlite.table.DatabaseTableConfig)\l  (r3 I:java.lang.String)\l com.j256.ormlite.table.DatabaseTableConfig.setTableName(java.lang.String):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: RETURN   \l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.DatabaseTableConfigLoader.readTableField((r1 I:com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;, Ljava\/lang\/String;, Ljava\/lang\/String;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_6;
Node_3 -> Node_11;
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

