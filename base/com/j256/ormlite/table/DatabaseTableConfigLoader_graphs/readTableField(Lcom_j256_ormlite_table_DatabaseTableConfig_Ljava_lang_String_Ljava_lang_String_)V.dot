digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfigLoader.readTableField(Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r2.equals(FIELD_NAME_DATA_CLASS) == false) goto L_0x0027\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x0010 \}\lSplitter:B:2:0x0008\l|r1.setDataClass(java.lang.Class.forName(r3))     \/\/ Catch:\{ ClassNotFoundException \-\> 0x0010 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Unknown class specified for dataClass: \")\lr2.append(r3)\l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\lSplitter:B:2:0x0008\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027}"];
Node_8 [shape=record,label="{8\:\ 0x002d|if (r2.equals(FIELD_NAME_TABLE_NAME) == false) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|r1.setTableName(r3)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.DatabaseTableConfigLoader.readTableField((r1v0 com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;, Ljava\/lang\/String;, Ljava\/lang\/String;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_5;
Node_3 -> Node_12;
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
}

