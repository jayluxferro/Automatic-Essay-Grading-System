digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfigLoader.fromReader(Ljava\/io\/BufferedReader;)Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:com.j256.ormlite.table.DatabaseTableConfig) =  com.j256.ormlite.table.DatabaseTableConfig \l0x0002: INVOKE  (r0 I:com.j256.ormlite.table.DatabaseTableConfig) com.j256.ormlite.table.DatabaseTableConfig.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0008\l|0x0008: INVOKE  (r4 I:java.lang.String) = (r7 I:java.io.BufferedReader) java.io.BufferedReader.readLine():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x006a \}, TRY_ENTER]\l0x000b: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST_STR  (r5 I:java.lang.String) =  \"# \-\-table\-end\-\-\" \l0x0011: INVOKE  (r5 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: RETURN  (r0 I:com.j256.ormlite.table.DatabaseTableConfig\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: RETURN  (r7 I:com.j256.ormlite.table.DatabaseTableConfig\<T\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: CONST_STR  (r5 I:java.lang.String) =  \"# \-\-table\-fields\-start\-\-\" \l0x001e: INVOKE  (r5 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: INVOKE  \l  (r7 I:java.io.BufferedReader)\l  (r0 I:com.j256.ormlite.table.DatabaseTableConfig)\l com.j256.ormlite.table.DatabaseTableConfigLoader.readFields(java.io.BufferedReader, com.j256.ormlite.table.DatabaseTableConfig):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r5 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: CONST_STR  (r5 I:java.lang.String) =  \"#\" \l0x0030: INVOKE  (r5 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0008 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: CONST_STR  (r5 I:java.lang.String) =  \"# \-\-table\-start\-\-\" \l0x0038: INVOKE  (r5 I:boolean) = (r4 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x003f \l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|0x003f: CONST_STR  (r3 I:java.lang.String) =  \"=\" \l0x0041: CONST  (r5 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l0x0042: INVOKE  (r3 I:java.lang.String[]) = \l  (r4 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r5 I:int)\l java.lang.String.split(java.lang.String, int):java.lang.String[] type: VIRTUAL \l0x0046: ARRAY_LENGTH  (r5 I:int) = (r3 I:?[]) \l0x0047: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0053 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: AGET  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x004c: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x004e: INVOKE  \l  (r0 I:com.j256.ormlite.table.DatabaseTableConfig)\l  (r4 I:java.lang.String)\l  (r3 I:java.lang.String)\l com.j256.ormlite.table.DatabaseTableConfigLoader.readTableField(com.j256.ormlite.table.DatabaseTableConfig, java.lang.String, java.lang.String):void type: STATIC \l0x0051: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0053|0x0053: NEW_INSTANCE  (r7 I:java.sql.SQLException) =  java.sql.SQLException \l0x0055: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0057: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005a: CONST_STR  (r1 I:java.lang.String) =  \"DatabaseTableConfig reading from stream cannot parse line: \" \l0x005c: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0066: INVOKE  (r7 I:java.sql.SQLException), (r0 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0069|0x0069: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x006a|ExcHandler: IOException null\lSplitter:B:1:0x0008\l|0x006a: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x006b|0x006b: CONST_STR  (r0 I:java.lang.String) =  \"Could not read DatabaseTableConfig from stream\" \l0x006d: INVOKE  (r7 I:java.sql.SQLException) = (r0 I:java.lang.String), (r7 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x0071|0x0071: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static com.j256.ormlite.table.DatabaseTableConfig\<T\> com.j256.ormlite.table.DatabaseTableConfigLoader.fromReader((r7 I:java.io.BufferedReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/io\/BufferedReader;, ), Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_1[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_1;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

