digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfigLoader.readFields(Ljava\/io\/BufferedReader;Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|SYNTHETIC\lSplitter:B:1:0x0005\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0005\l|0x0005: INVOKE  (r1 I:java.lang.String) = (r3 I:java.io.BufferedReader) java.io.BufferedReader.readLine():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x0023 \}, TRY_ENTER]\l0x0008: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST_STR  (r2 I:java.lang.String) =  \"# \-\-table\-fields\-end\-\-\" \l0x000d: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r1 I:com.j256.ormlite.field.DatabaseFieldConfig) = (r3 I:java.io.BufferedReader) com.j256.ormlite.field.DatabaseFieldConfigLoader.fromReader(java.io.BufferedReader):com.j256.ormlite.field.DatabaseFieldConfig type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  \l  (r4 I:com.j256.ormlite.table.DatabaseTableConfig)\l  (r0 I:java.util.List)\l com.j256.ormlite.table.DatabaseTableConfig.setFieldConfigs(java.util.List):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|ExcHandler: IOException null\lSplitter:B:1:0x0005\l|0x0023: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: CONST_STR  (r4 I:java.lang.String) =  \"Could not read next field from config file\" \l0x0026: INVOKE  (r3 I:java.sql.SQLException) = (r4 I:java.lang.String), (r3 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static void com.j256.ormlite.table.DatabaseTableConfigLoader.readFields((r3 I:java.io.BufferedReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.table.DatabaseTableConfig\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/io\/BufferedReader;, Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_11[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

