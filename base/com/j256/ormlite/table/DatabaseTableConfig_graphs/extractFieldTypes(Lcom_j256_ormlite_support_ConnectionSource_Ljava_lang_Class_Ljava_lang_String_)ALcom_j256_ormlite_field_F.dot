digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfig.extractFieldTypes(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/Class;Ljava\/lang\/String;)[Lcom\/j256\/ormlite\/field\/FieldType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\lr1 = r7\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 java.lang.Class\<T\>) = (r1v0 java.lang.Class\<T\>), (r1v2 java.lang.Class\<T\>) binds: [B:0:0x0000, B:8:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:8:0x001e\l|if (r1 == null) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|java.lang.reflect.Field[] r2 = r1.getDeclaredFields()\lint r3 = r2.length\lr4 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|LOOP_START\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:2:0x0008, B:7:0x001b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:3:0x000e\-\>B:7:0x001b\l|if (r4 \>= r3) goto L_0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|com.j256.ormlite.field.FieldType r5 = com.j256.ormlite.field.FieldType.createFieldType(r6, r8, r2[r4], r7)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r5 == null) goto L_0x001b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|r0.add(r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|LOOP_END\lLOOP:1: B:3:0x000e\-\>B:7:0x001b\l|int r4 = r4 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:8:0x001e\l|java.lang.Class r1 = r1.getSuperclass()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023}"];
Node_10 [shape=record,label="{10\:\ 0x0027|if (r0.isEmpty() != false) goto L_0x0036\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029}"];
Node_12 [shape=record,label="{12\:\ 0x0035|RETURN\l|return (com.j256.ormlite.field.FieldType[]) r0.toArray(new com.j256.ormlite.field.FieldType[r0.size()])\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|java.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(\"No fields have a \")\lr8.append(com.j256.ormlite.field.DatabaseField.class.getSimpleName())\lr8.append(\" annotation in \")\lr8.append(r7)\l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|throw new java.lang.IllegalArgumentException(r8.toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static com.j256.ormlite.field.FieldType[] com.j256.ormlite.table.DatabaseTableConfig.extractFieldTypes((r6v0 com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/Class\<, TT;\>;, Ljava\/lang\/String;, )[, Lcom\/j256\/ormlite\/field\/FieldType;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_17;
Node_7 -> Node_3;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_9;
Node_16 -> Node_8;
Node_17 -> Node_7;
Node_18 -> Node_7;
}

