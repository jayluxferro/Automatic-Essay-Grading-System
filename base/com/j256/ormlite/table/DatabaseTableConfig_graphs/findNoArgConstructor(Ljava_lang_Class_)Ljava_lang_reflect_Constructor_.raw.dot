digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfig.findNoArgConstructor(Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Constructor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r0 I:java.lang.reflect.Constructor[]) = (r5 I:java.lang.Class) java.lang.Class.getDeclaredConstructors():java.lang.reflect.Constructor[] type: VIRTUAL A[Catch:\{ Exception \-\> 0x0072 \}, TRY_ENTER]\l0x0004: CHECK_CAST  (r0 I:java.lang.reflect.Constructor[]) = (java.lang.reflect.Constructor[]) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0072 \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:17:0x0039 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x000c: INVOKE  (r4 I:java.lang.Class[]) = (r3 I:java.lang.reflect.Constructor) java.lang.reflect.Constructor.getParameterTypes():java.lang.Class[] type: VIRTUAL \l0x0010: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0036 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r0 I:boolean) = (r3 I:java.lang.reflect.Constructor) java.lang.reflect.Constructor.isAccessible():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|SYNTHETIC\lSplitter:B:9:0x001a\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x001a\l|0x001a: INVOKE  (r3 I:java.lang.reflect.Constructor), (r0 I:boolean) java.lang.reflect.Constructor.setAccessible(boolean):void type: VIRTUAL A[Catch:\{ SecurityException \-\> 0x001e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0020: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"Could not open access to constructor for \" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: SecurityException null\lSplitter:B:9:0x001a\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: RETURN  (r3 I:java.lang.reflect.Constructor\<T\>) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Class) java.lang.Class.getEnclosingClass():java.lang.Class type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0056 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0041: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0046: CONST_STR  (r2 I:java.lang.String) =  \"Can't find a no\-arg constructor for \" \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0052: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0055|0x0055: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0058: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005d: CONST_STR  (r2 I:java.lang.String) =  \"Can't find a no\-arg constructor for \" \l0x005f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0062: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0065: CONST_STR  (r5 I:java.lang.String) =  \".  Missing static on inner class?\" \l0x0067: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006e: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0071|0x0071: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x0072: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x0073|0x0073: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0075: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0077: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007a: CONST_STR  (r3 I:java.lang.String) =  \"Can't lookup declared constructors for \" \l0x007c: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007f: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0082: INVOKE  (r5 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0086: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x0089|0x0089: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static java.lang.reflect.Constructor\<T\> com.j256.ormlite.table.DatabaseTableConfig.findNoArgConstructor((r5 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Class\<, TT;\>;), Ljava\/lang\/reflect\/Constructor\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_23;
Node_1 -> Node_2;
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_13;
Node_10 -> Node_15;
Node_12 -> Node_14;
Node_13 -> Node_12;
Node_16 -> Node_3;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

