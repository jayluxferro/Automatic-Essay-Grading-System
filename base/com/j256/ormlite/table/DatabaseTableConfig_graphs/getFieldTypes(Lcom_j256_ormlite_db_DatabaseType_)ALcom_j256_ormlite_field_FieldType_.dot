digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfig.getFieldTypes(Lcom\/j256\/ormlite\/db\/DatabaseType;)[Lcom\/j256\/ormlite\/field\/FieldType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.fieldTypes == null) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return r1.fieldTypes\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x000e|throw new java.sql.SQLException(\"Field types have not been extracted in table config\")\l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.field.FieldType[] com.j256.ormlite.table.DatabaseTableConfig.getFieldTypes((r1v0 'this' com.j256.ormlite.table.DatabaseTableConfig A[IMMUTABLE_TYPE, THIS]), (r2v0 com.j256.ormlite.db.DatabaseType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

