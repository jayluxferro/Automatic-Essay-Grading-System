digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfig.fromClass(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/Class;)Lcom\/j256\/ormlite\/table\/DatabaseTableConfig;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r0 = extractTableName(r4)\lcom.j256.ormlite.db.DatabaseType r1 = r3.getDatabaseType()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r1.isEntityNamesMustBeUpCase() == false) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|java.lang.String r0 = r1.upCaseEntityName(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|PHI: r0 \l  PHI: (r0v1 java.lang.String) = (r0v0 java.lang.String), (r0v2 java.lang.String) binds: [B:1:0x000c, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|RETURN\l|return new com.j256.ormlite.table.DatabaseTableConfig\<\>(r4, r0, extractFieldTypes(r3, r4, r0))\l}"];
MethodNode[shape=record,label="{public static com.j256.ormlite.table.DatabaseTableConfig\<T\> com.j256.ormlite.table.DatabaseTableConfig.fromClass((r3v0 com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/Class\<, TT;\>;), Lcom\/j256\/ormlite\/table\/DatabaseTableConfig\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

