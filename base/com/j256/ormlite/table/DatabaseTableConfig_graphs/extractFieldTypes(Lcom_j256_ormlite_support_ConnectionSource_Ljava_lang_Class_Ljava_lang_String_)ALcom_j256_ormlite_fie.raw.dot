digraph "CFG forcom.j256.ormlite.table.DatabaseTableConfig.extractFieldTypes(Lcom\/j256\/ormlite\/support\/ConnectionSource;Ljava\/lang\/Class;Ljava\/lang\/String;)[Lcom\/j256\/ormlite\/field\/FieldType;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.reflect.Field[]) = (r1 I:java.lang.Class) java.lang.Class.getDeclaredFields():java.lang.reflect.Field[] type: VIRTUAL \l0x000c: ARRAY_LENGTH  (r3 I:int) = (r2 I:?[]) \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0012: INVOKE  (r5 I:com.j256.ormlite.field.FieldType) = \l  (r6 I:com.j256.ormlite.support.ConnectionSource)\l  (r8 I:java.lang.String)\l  (r5 I:java.lang.reflect.Field)\l  (r7 I:java.lang.Class)\l com.j256.ormlite.field.FieldType.createFieldType(com.j256.ormlite.support.ConnectionSource, java.lang.String, java.lang.reflect.Field, java.lang.Class):com.j256.ormlite.field.FieldType type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r1 I:java.lang.Class) = (r1 I:java.lang.Class) java.lang.Class.getSuperclass():java.lang.Class type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r6 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r6 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x002d: NEW_ARRAY  (r6 I:com.j256.ormlite.field.FieldType[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: com.j256.ormlite.field.FieldType[] \l0x002f: INVOKE  (r6 I:java.lang.Object[]) = (r0 I:java.util.List), (r6 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x0033: CHECK_CAST  (r6 I:com.j256.ormlite.field.FieldType[]) = (com.j256.ormlite.field.FieldType[]) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: RETURN  (r6 I:com.j256.ormlite.field.FieldType[]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003a: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003d: CONST_STR  (r0 I:java.lang.String) =  \"No fields have a \" \l0x003f: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: CONST_CLASS  (r0 I:java.lang.Class\<com.j256.ormlite.field.DatabaseField\>) =  com.j256.ormlite.field.DatabaseField.class \l0x0044: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Class) java.lang.Class.getSimpleName():java.lang.String type: VIRTUAL \l0x0048: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004b: CONST_STR  (r0 I:java.lang.String) =  \" annotation in \" \l0x004d: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r7 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0057: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static com.j256.ormlite.field.FieldType[] com.j256.ormlite.table.DatabaseTableConfig.extractFieldTypes((r6 I:com.j256.ormlite.support.ConnectionSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lcom\/j256\/ormlite\/support\/ConnectionSource;, Ljava\/lang\/Class\<, TT;\>;, Ljava\/lang\/String;, )[, Lcom\/j256\/ormlite\/field\/FieldType;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

