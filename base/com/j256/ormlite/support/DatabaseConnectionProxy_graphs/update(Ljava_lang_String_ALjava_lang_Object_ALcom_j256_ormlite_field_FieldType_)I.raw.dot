digraph "CFG forcom.j256.ormlite.support.DatabaseConnectionProxy.update(Ljava\/lang\/String;[Ljava\/lang\/Object;[Lcom\/j256\/ormlite\/field\/FieldType;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.support.DatabaseConnection) = (r1 I:com.j256.ormlite.support.DatabaseConnectionProxy) com.j256.ormlite.support.DatabaseConnectionProxy.proxy com.j256.ormlite.support.DatabaseConnection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:com.j256.ormlite.support.DatabaseConnection) = (r1 I:com.j256.ormlite.support.DatabaseConnectionProxy) com.j256.ormlite.support.DatabaseConnectionProxy.proxy com.j256.ormlite.support.DatabaseConnection \l0x0008: INVOKE  (r2 I:int) = \l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.Object[])\l  (r4 I:com.j256.ormlite.field.FieldType[])\l com.j256.ormlite.support.DatabaseConnection.update(java.lang.String, java.lang.Object[], com.j256.ormlite.field.FieldType[]):int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.support.DatabaseConnectionProxy.update((r1 'this' I:com.j256.ormlite.support.DatabaseConnectionProxy A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:com.j256.ormlite.field.FieldType[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

