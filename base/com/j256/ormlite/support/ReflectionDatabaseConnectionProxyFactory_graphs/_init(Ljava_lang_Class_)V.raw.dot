digraph "CFG forcom.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory.\<init\>(Ljava\/lang\/Class;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r4 I:java.lang.Class\<? extends com.j256.ormlite.support.DatabaseConnection\>)\l  (r3 I:com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory)\l com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory.proxyClass java.lang.Class \l0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|SYNTHETIC\lSplitter:B:1:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0006\l|0x0006: NEW_ARRAY  (r0 I:java.lang.Class[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch:\{ Exception \-\> 0x0014 \}, TRY_ENTER]\l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0014 \}]\l0x0009: CONST_CLASS  (r2 I:java.lang.Class\<com.j256.ormlite.support.DatabaseConnection\>) =  com.j256.ormlite.support.DatabaseConnection.class A[Catch:\{ Exception \-\> 0x0014 \}]\l0x000b: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0014 \}]\l0x000d: INVOKE  (r0 I:java.lang.reflect.Constructor) = (r4 I:java.lang.Class), (r0 I:java.lang.Class[]) java.lang.Class.getConstructor(java.lang.Class[]):java.lang.reflect.Constructor type: VIRTUAL A[Catch:\{ Exception \-\> 0x0014 \}]\l0x0011: IPUT  \l  (r0 I:java.lang.reflect.Constructor\<? extends com.j256.ormlite.support.DatabaseConnection\>)\l  (r3 I:com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory)\l com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory.constructor java.lang.reflect.Constructor A[Catch:\{ Exception \-\> 0x0014 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0016: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"Could not find constructor with DatabaseConnection argument in \" \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0023: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0027: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:1:0x0006\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory.\<init\>((r3 'this' I:com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Class\<? extends com.j256.ormlite.support.DatabaseConnection\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Class\<, +, Lcom\/j256\/ormlite\/support\/DatabaseConnection;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_4;
}

