digraph "CFG forcom.j256.ormlite.android.AndroidDatabaseConnection.queryForLong(Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:android.database.sqlite.SQLiteDatabase) = (r7 I:com.j256.ormlite.android.AndroidDatabaseConnection) com.j256.ormlite.android.AndroidDatabaseConnection.db android.database.sqlite.SQLiteDatabase A[Catch:\{ SQLException \-\> 0x001f, all \-\> 0x001c \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:android.database.sqlite.SQLiteStatement) = \l  (r1 I:android.database.sqlite.SQLiteDatabase)\l  (r8 I:java.lang.String)\l android.database.sqlite.SQLiteDatabase.compileStatement(java.lang.String):android.database.sqlite.SQLiteStatement type: VIRTUAL A[Catch:\{ SQLException \-\> 0x001f, all \-\> 0x001c \}]\l0x0006: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|SYNTHETIC\lSplitter:B:3:0x0007\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0007\l|0x0007: INVOKE  (r2 I:long) = (r1 I:android.database.sqlite.SQLiteStatement) android.database.sqlite.SQLiteStatement.simpleQueryForLong():long type: VIRTUAL A[Catch:\{ SQLException \-\> 0x001a \}, TRY_ENTER]\l0x000b: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.android.AndroidDatabaseConnection.logger com.j256.ormlite.logger.Logger A[Catch:\{ SQLException \-\> 0x001a \}]\l0x000d: CONST_STR  (r4 I:java.lang.String) =  \"\{\}: query for long simple query returned \{\}: \{\}\" A[Catch:\{ SQLException \-\> 0x001a \}]\l0x000f: INVOKE  (r5 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ SQLException \-\> 0x001a \}]\l0x0013: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r4 I:java.lang.String)\l  (r7 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l  (r8 I:java.lang.Object)\l com.j256.ormlite.logger.Logger.trace(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object):void type: VIRTUAL A[Catch:\{ SQLException \-\> 0x001a \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  \l  (r7 I:com.j256.ormlite.android.AndroidDatabaseConnection)\l  (r1 I:android.database.sqlite.SQLiteStatement)\l com.j256.ormlite.android.AndroidDatabaseConnection.closeQuietly(android.database.sqlite.SQLiteStatement):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN  (r2 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|ExcHandler: SQLException null\lSplitter:B:3:0x0007\l|0x001a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001c: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|ExcHandler: SQLException null\lSplitter:B:1:0x0001\l|0x001f: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0021: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|SYNTHETIC\lSplitter:B:13:0x0023\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0023\l|0x0023: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0039 \}, TRY_ENTER]\l0x0025: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0039 \}]\l0x0028: CONST_STR  (r3 I:java.lang.String) =  \"queryForLong from database failed: \" A[Catch:\{ all \-\> 0x0039 \}]\l0x002a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0039 \}]\l0x002d: INVOKE  (r2 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0039 \}]\l0x0030: INVOKE  (r8 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0039 \}]\l0x0034: INVOKE  (r8 I:java.sql.SQLException) = (r8 I:java.lang.String), (r0 I:java.lang.Throwable) com.j256.ormlite.misc.SqlExceptionUtil.create(java.lang.String, java.lang.Throwable):java.sql.SQLException type: STATIC A[Catch:\{ all \-\> 0x0039 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: THROW  (r8 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|ExcHandler: all null\lSplitter:B:13:0x0023\l|0x0039: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: INVOKE  \l  (r7 I:com.j256.ormlite.android.AndroidDatabaseConnection)\l  (r1 I:android.database.sqlite.SQLiteStatement)\l com.j256.ormlite.android.AndroidDatabaseConnection.closeQuietly(android.database.sqlite.SQLiteStatement):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public long com.j256.ormlite.android.AndroidDatabaseConnection.queryForLong((r7 'this' I:com.j256.ormlite.android.AndroidDatabaseConnection A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

