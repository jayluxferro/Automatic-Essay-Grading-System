digraph "CFG forcom.j256.ormlite.android.AndroidLog.\<init\>(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r0 I:int), (r4 I:com.j256.ormlite.android.AndroidLog) com.j256.ormlite.android.AndroidLog.levelCacheC int \l0x0006: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String) com.j256.ormlite.logger.LoggerFactory.getSimpleClassName(java.lang.String):java.lang.String type: STATIC \l0x000a: IPUT  \l  (r5 I:java.lang.String)\l  (r4 I:com.j256.ormlite.android.AndroidLog)\l com.j256.ormlite.android.AndroidLog.className java.lang.String \l0x000c: IGET  (r5 I:java.lang.String) = (r4 I:com.j256.ormlite.android.AndroidLog) com.j256.ormlite.android.AndroidLog.className java.lang.String \l0x000e: INVOKE  (r5 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0012: CONST  (r1 I:?[int, float, short, byte, char]) = (23 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r5 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IGET  (r1 I:java.lang.String) = (r4 I:com.j256.ormlite.android.AndroidLog) com.j256.ormlite.android.AndroidLog.className java.lang.String \l0x0018: ARITH  (r2 I:int) = (r5 I:int) + (\-23 int) \l0x001a: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x001e: IPUT  \l  (r5 I:java.lang.String)\l  (r4 I:com.j256.ormlite.android.AndroidLog)\l com.j256.ormlite.android.AndroidLog.className java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: INVOKE  (r5 I:com.j256.ormlite.logger.Log$Level[]) =  com.j256.ormlite.logger.Log.Level.values():com.j256.ormlite.logger.Log$Level[] type: STATIC \l0x0024: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l0x0025: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|0x0028: AGET  (r3 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002a: INVOKE  (r3 I:int) = \l  (r4 I:com.j256.ormlite.android.AndroidLog)\l  (r3 I:com.j256.ormlite.logger.Log$Level)\l com.j256.ormlite.android.AndroidLog.levelToAndroidLevel(com.j256.ormlite.logger.Log$Level):int type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IF  (r3 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0036: NEW_ARRAY  (r5 I:boolean[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: boolean[] \l0x0038: IPUT  \l  (r5 I:boolean[])\l  (r4 I:com.j256.ormlite.android.AndroidLog)\l com.j256.ormlite.android.AndroidLog.levelCache boolean[] \l0x003a: INVOKE  (r4 I:com.j256.ormlite.android.AndroidLog) com.j256.ormlite.android.AndroidLog.refreshLevelCache():void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: RETURN   \l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.android.AndroidLog.\<init\>((r4 'this' I:com.j256.ormlite.android.AndroidLog A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_9 -> Node_10;
}

