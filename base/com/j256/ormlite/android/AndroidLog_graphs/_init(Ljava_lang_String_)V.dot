digraph "CFG forcom.j256.ormlite.android.AndroidLog.\<init\>(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\lr4.levelCacheC = 0\lr4.className = com.j256.ormlite.logger.LoggerFactory.getSimpleClassName(r5)\lint r5 = r4.className.length()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r5 \<= 23) goto L_0x0020\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|r4.className = r4.className.substring(r5 + \-23, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|com.j256.ormlite.logger.Log$Level[] r5 = com.j256.ormlite.logger.Log.Level.values()\lint r1 = r5.length\lr2 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:3:0x0020, B:8:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:3:0x0020, B:8:0x0031] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0026\-\>B:8:0x0031\l|if (r0 \>= r1) goto L_0x0034\l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|int r3 = levelToAndroidLevel(r5[r0])\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|if (r3 \<= r2) goto L_0x0031\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|r2 = r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|LOOP_END\lPHI: r2 \l  PHI: (r2v3 int) = (r2v1 int), (r2v4 int) binds: [B:13:0x0031, B:12:0x0031] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0026\-\>B:8:0x0031\l|int r0 = r0 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|r4.levelCache = new boolean[(r2 + 1)]\lrefreshLevelCache()\l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.j256.ormlite.android.AndroidLog.\<init\>((r4v0 'this' com.j256.ormlite.android.AndroidLog A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_12;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

