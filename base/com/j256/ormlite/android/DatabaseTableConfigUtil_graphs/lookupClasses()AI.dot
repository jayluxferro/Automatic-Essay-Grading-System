digraph "CFG forcom.j256.ormlite.android.DatabaseTableConfigUtil.lookupClasses()[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x0094 \}\lSplitter:B:1:0x0003\l|annotationFactoryClazz = java.lang.Class.forName(\"org.apache.harmony.lang.annotation.AnnotationFactory\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x0094 \}\lannotationMemberClazz = java.lang.Class.forName(\"org.apache.harmony.lang.annotation.AnnotationMember\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x0094 \}\ljava.lang.Class r1 = java.lang.Class.forName(\"[Lorg.apache.harmony.lang.annotation.AnnotationMember;\")     \/\/ Catch:\{ ClassNotFoundException \-\> 0x0094 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|SYNTHETIC\lSplitter:B:3:0x0017\l}"];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lSplitter:B:3:0x0017\l|elementsField = annotationFactoryClazz.getDeclaredField(\"elements\")     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lelementsField.setAccessible(true)     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lnameField = annotationMemberClazz.getDeclaredField(\"name\")     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lnameField.setAccessible(true)     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lvalueField = annotationMemberClazz.getDeclaredField(\"value\")     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\lvalueField.setAccessible(true)     \/\/ Catch:\{ SecurityException \-\> 0x0093, NoSuchFieldException \-\> 0x0092 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|java.lang.reflect.InvocationHandler r2 = java.lang.reflect.Proxy.getInvocationHandler((com.j256.ormlite.field.DatabaseField) com.j256.ormlite.android.DatabaseTableConfigUtil.DatabaseFieldSample.class.getDeclaredField(\"field\").getAnnotation(com.j256.ormlite.field.DatabaseField.class))\l}"];
Node_6 [shape=record,label="{6\:\ 0x005f|if (r2.getClass() == annotationFactoryClazz) goto L_0x0062\l}"];
Node_7 [shape=record,label="{7\:\ 0x0061|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0062|SYNTHETIC\lSplitter:B:8:0x0062\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ IllegalAccessException \-\> 0x0091 \}\lSplitter:B:8:0x0062\l|java.lang.Object r2 = elementsField.get(r2)     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0068|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l|if (r2 == null) goto L_0x0090     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x006e|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l|if (r2.getClass() == r1) goto L_0x0071     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x0070|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0071|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l|java.lang.Object[] r2 = (java.lang.Object[]) r2     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\lint[] r1 = new int[r2.length]     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\lr3 = 0     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0079|LOOP_START\lCatch:\{ IllegalAccessException \-\> 0x0091 \}\lPHI: r3 \l  PHI: (r3v8 int) = (r3v7 int), (r3v9 int) binds: [B:14:0x0071, B:18:0x008c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:15:0x0079\-\>B:18:0x008c\l}"];
Node_16 [shape=record,label="{16\:\ 0x007a|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l|if (r3 \>= r2.length) goto L_0x008f     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x007c|Catch:\{ IllegalAccessException \-\> 0x0091 \}\l|r1[r3] = configFieldNameToNum((java.lang.String) nameField.get(r2[r3]))     \/\/ Catch:\{ IllegalAccessException \-\> 0x0091 \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x008c|LOOP_END\lLOOP:0: B:15:0x0079\-\>B:18:0x008c\l|int r3 = r3 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x008f|RETURN\l|return r1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0090|RETURN\l|return null\l}"];
Node_21 [shape=record,label="{21\:\ 0x0091|RETURN\l|return null\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lExcHandler: IllegalAccessException (unused java.lang.IllegalAccessException)\lSplitter:B:8:0x0062\l}"];
Node_23 [shape=record,label="{23\:\ 0x0092|RETURN\l|return null\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lExcHandler: NoSuchFieldException (unused java.lang.NoSuchFieldException)\lSplitter:B:3:0x0017\l}"];
Node_25 [shape=record,label="{25\:\ 0x0093|RETURN\l|return null\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lExcHandler: SecurityException (unused java.lang.SecurityException)\lSplitter:B:3:0x0017\l}"];
Node_27 [shape=record,label="{27\:\ 0x0094|RETURN\l|return null\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lExcHandler: ClassNotFoundException (unused java.lang.ClassNotFoundException)\lSplitter:B:1:0x0003\l}"];
Node_29 [shape=record,label="{29\:\ 0x008f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int[] com.j256.ormlite.android.DatabaseTableConfigUtil.lookupClasses() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_26;
Node_3 -> Node_24;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_22;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_29;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_22 -> Node_21;
Node_24 -> Node_23;
Node_26 -> Node_25;
Node_28 -> Node_27;
Node_29 -> Node_19;
}

