digraph "CFG forcom.j256.ormlite.android.AndroidDatabaseResults.getBoolean(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.database.Cursor) = (r1 I:com.j256.ormlite.android.AndroidDatabaseResults) com.j256.ormlite.android.AndroidDatabaseResults.cursor android.database.Cursor \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:android.database.Cursor), (r2 I:int) android.database.Cursor.isNull(int):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:android.database.Cursor) = (r1 I:com.j256.ormlite.android.AndroidDatabaseResults) com.j256.ormlite.android.AndroidDatabaseResults.cursor android.database.Cursor \l0x000a: INVOKE  (r2 I:short) = (r0 I:android.database.Cursor), (r2 I:int) android.database.Cursor.getShort(int):short type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: RETURN  (r2 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.j256.ormlite.android.AndroidDatabaseResults.getBoolean((r1 'this' I:com.j256.ormlite.android.AndroidDatabaseResults A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

