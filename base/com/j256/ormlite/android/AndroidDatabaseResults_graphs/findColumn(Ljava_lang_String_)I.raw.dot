digraph "CFG forcom.j256.ormlite.android.AndroidDatabaseResults.findColumn(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r4 I:com.j256.ormlite.android.AndroidDatabaseResults)\l  (r5 I:java.lang.String)\l com.j256.ormlite.android.AndroidDatabaseResults.lookupColumn(java.lang.String):int type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r0 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0009: INVOKE  (r1 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000d: ARITH  (r1 I:int) = (r1 I:int) + (4 int) \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0012: SGET  (r1 I:com.j256.ormlite.db.DatabaseType) =  com.j256.ormlite.android.AndroidDatabaseResults.databaseType com.j256.ormlite.db.DatabaseType \l0x0014: INVOKE  \l  (r1 I:com.j256.ormlite.db.DatabaseType)\l  (r0 I:java.lang.StringBuilder)\l  (r5 I:java.lang.String)\l com.j256.ormlite.db.DatabaseType.appendEscapedEntityName(java.lang.StringBuilder, java.lang.String):void type: INTERFACE \l0x0017: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001b: INVOKE  (r0 I:int) = \l  (r4 I:com.j256.ormlite.android.AndroidDatabaseResults)\l  (r0 I:java.lang.String)\l com.j256.ormlite.android.AndroidDatabaseResults.lookupColumn(java.lang.String):int type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: RETURN  (r0 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IGET  (r0 I:android.database.Cursor) = (r4 I:com.j256.ormlite.android.AndroidDatabaseResults) com.j256.ormlite.android.AndroidDatabaseResults.cursor android.database.Cursor \l0x0024: INVOKE  (r0 I:java.lang.String[]) = (r0 I:android.database.Cursor) android.database.Cursor.getColumnNames():java.lang.String[] type: INTERFACE \l0x0028: NEW_INSTANCE  (r1 I:java.sql.SQLException) =  java.sql.SQLException \l0x002a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002f: CONST_STR  (r3 I:java.lang.String) =  \"Unknown field '\" \l0x0031: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: CONST_STR  (r5 I:java.lang.String) =  \"' from the Android sqlite cursor, not in:\" \l0x0039: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003c: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.Object[]) java.util.Arrays.toString(java.lang.Object[]):java.lang.String type: STATIC \l0x0040: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: INVOKE  (r5 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0047: INVOKE  (r1 I:java.sql.SQLException), (r5 I:java.lang.String) java.sql.SQLException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|0x004a: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int com.j256.ormlite.android.AndroidDatabaseResults.findColumn((r4 'this' I:com.j256.ormlite.android.AndroidDatabaseResults A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
}

