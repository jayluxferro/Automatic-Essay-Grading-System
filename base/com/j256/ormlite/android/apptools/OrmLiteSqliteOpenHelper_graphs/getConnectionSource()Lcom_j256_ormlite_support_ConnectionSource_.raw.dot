digraph "CFG forcom.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.getConnectionSource()Lcom\/j256\/ormlite\/support\/ConnectionSource;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r3 I:com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper)\l com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.isOpen boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:com.j256.ormlite.logger.Logger) =  com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.logger com.j256.ormlite.logger.Logger \l0x0006: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0008: INVOKE  (r1 I:java.lang.IllegalStateException) java.lang.IllegalStateException.\<init\>():void type: DIRECT \l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"Getting connectionSource was called after closed\" \l0x000d: INVOKE  \l  (r0 I:com.j256.ormlite.logger.Logger)\l  (r1 I:java.lang.Throwable)\l  (r2 I:java.lang.String)\l com.j256.ormlite.logger.Logger.warn(java.lang.Throwable, java.lang.String):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r0 I:com.j256.ormlite.android.AndroidConnectionSource) = \l  (r3 I:com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper)\l com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.connectionSource com.j256.ormlite.android.AndroidConnectionSource \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN  (r0 I:com.j256.ormlite.support.ConnectionSource) \l}"];
MethodNode[shape=record,label="{public com.j256.ormlite.support.ConnectionSource com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.getConnectionSource((r3 'this' I:com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

