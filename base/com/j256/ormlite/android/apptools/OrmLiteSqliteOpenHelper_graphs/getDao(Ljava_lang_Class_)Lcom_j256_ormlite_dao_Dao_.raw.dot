digraph "CFG forcom.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.getDao(Ljava\/lang\/Class;)Lcom\/j256\/ormlite\/dao\/Dao;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:com.j256.ormlite.support.ConnectionSource) = \l  (r1 I:com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper)\l com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.getConnectionSource():com.j256.ormlite.support.ConnectionSource type: VIRTUAL \l0x0004: INVOKE  (r2 I:com.j256.ormlite.dao.Dao) = \l  (r0 I:com.j256.ormlite.support.ConnectionSource)\l  (r2 I:java.lang.Class)\l com.j256.ormlite.dao.DaoManager.createDao(com.j256.ormlite.support.ConnectionSource, java.lang.Class):com.j256.ormlite.dao.Dao type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: RETURN  (r2 I:D) \l}"];
MethodNode[shape=record,label="{public D com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper.getDao((r1 'this' I:com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<D::, Lcom\/j256\/ormlite\/dao\/Dao\<, TT;*\>;T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Class\<, TT;\>;)TD;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

