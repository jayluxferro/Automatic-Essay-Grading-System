digraph "CFG forcom.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.loadInBackground()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:com.j256.ormlite.dao.Dao) = \l  (r2 I:com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader)\l com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.dao com.j256.ormlite.dao.Dao \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:com.j256.ormlite.stmt.PreparedQuery\<T\>) = \l  (r2 I:com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader)\l com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.preparedQuery com.j256.ormlite.stmt.PreparedQuery \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|SYNTHETIC\lSplitter:B:4:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0008\l|0x0008: IGET  (r0 I:com.j256.ormlite.dao.Dao) = \l  (r2 I:com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader)\l com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.dao com.j256.ormlite.dao.Dao A[Catch:\{ SQLException \-\> 0x0011 \}, TRY_ENTER]\l0x000a: IGET  (r1 I:com.j256.ormlite.stmt.PreparedQuery\<T\>) = \l  (r2 I:com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader)\l com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.preparedQuery com.j256.ormlite.stmt.PreparedQuery A[Catch:\{ SQLException \-\> 0x0011 \}]\l0x000c: INVOKE  (r0 I:java.util.List) = \l  (r0 I:com.j256.ormlite.dao.Dao)\l  (r1 I:com.j256.ormlite.stmt.PreparedQuery)\l com.j256.ormlite.dao.Dao.query(com.j256.ormlite.stmt.PreparedQuery):java.util.List type: INTERFACE A[Catch:\{ SQLException \-\> 0x0011 \}]\l0x000f: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|ExcHandler: SQLException null\lSplitter:B:4:0x0008\l|0x0011: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: INVOKE  (r0 I:java.sql.SQLException) java.sql.SQLException.printStackTrace():void type: VIRTUAL \l0x0015: INVOKE  (r0 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"PreparedQuery is not initialized.\" \l0x001e: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"Dao is not initialized.\" \l0x0026: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader.loadInBackground((r2 'this' I:com.j256.ormlite.android.apptools.OrmLitePreparedQueryLoader A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

