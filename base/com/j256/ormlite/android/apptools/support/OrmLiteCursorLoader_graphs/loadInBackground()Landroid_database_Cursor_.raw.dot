digraph "CFG forcom.j256.ormlite.android.apptools.support.OrmLiteCursorLoader.loadInBackground()Landroid\/database\/Cursor;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:com.j256.ormlite.dao.Dao\<T, ?\>) = \l  (r3 I:com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader)\l com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader.dao com.j256.ormlite.dao.Dao A[Catch:\{ SQLException \-\> 0x0022 \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:com.j256.ormlite.support.ConnectionSource) = (r0 I:com.j256.ormlite.dao.Dao) com.j256.ormlite.dao.Dao.getConnectionSource():com.j256.ormlite.support.ConnectionSource type: INTERFACE A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0006: IGET  (r1 I:com.j256.ormlite.dao.Dao\<T, ?\>) = \l  (r3 I:com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader)\l com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader.dao com.j256.ormlite.dao.Dao A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0008: INVOKE  (r1 I:java.lang.String) = (r1 I:com.j256.ormlite.dao.Dao) com.j256.ormlite.dao.Dao.getTableName():java.lang.String type: INTERFACE A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x000c: INVOKE  (r0 I:com.j256.ormlite.support.DatabaseConnection) = \l  (r0 I:com.j256.ormlite.support.ConnectionSource)\l  (r1 I:java.lang.String)\l com.j256.ormlite.support.ConnectionSource.getReadOnlyConnection(java.lang.String):com.j256.ormlite.support.DatabaseConnection type: INTERFACE A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0010: IGET  (r1 I:com.j256.ormlite.stmt.PreparedQuery\<T\>) = \l  (r3 I:com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader)\l com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader.query com.j256.ormlite.stmt.PreparedQuery A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0012: SGET  (r2 I:com.j256.ormlite.stmt.StatementBuilder$StatementType) =  com.j256.ormlite.stmt.StatementBuilder.StatementType.SELECT com.j256.ormlite.stmt.StatementBuilder$StatementType A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0014: INVOKE  (r0 I:com.j256.ormlite.support.CompiledStatement) = \l  (r1 I:com.j256.ormlite.stmt.PreparedQuery)\l  (r0 I:com.j256.ormlite.support.DatabaseConnection)\l  (r2 I:com.j256.ormlite.stmt.StatementBuilder$StatementType)\l com.j256.ormlite.stmt.PreparedQuery.compile(com.j256.ormlite.support.DatabaseConnection, com.j256.ormlite.stmt.StatementBuilder$StatementType):com.j256.ormlite.support.CompiledStatement type: INTERFACE A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x0018: CHECK_CAST  (r0 I:com.j256.ormlite.android.AndroidCompiledStatement) = (com.j256.ormlite.android.AndroidCompiledStatement) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x001a: INVOKE  (r0 I:android.database.Cursor) = (r0 I:com.j256.ormlite.android.AndroidCompiledStatement) com.j256.ormlite.android.AndroidCompiledStatement.getCursor():android.database.Cursor type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0022 \}]\l0x001d: NOP   A[TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: INVOKE  (r0 I:android.database.Cursor) android.database.Cursor.getCount():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: RETURN  (r0 I:android.database.Cursor) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|ExcHandler: SQLException null\lSplitter:B:0:0x0000\l|0x0022: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0025: INVOKE  \l  (r1 I:java.lang.RuntimeException)\l  (r0 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.database.Cursor com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader.loadInBackground((r3 'this' I:com.j256.ormlite.android.apptools.support.OrmLiteCursorLoader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

