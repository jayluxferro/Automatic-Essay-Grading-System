digraph "CFG forcom.j256.ormlite.android.apptools.OpenHelperManager.getHelper(Landroid\/content\/Context;Ljava\/lang\/Class;)Lcom\/j256\/ormlite\/android\/apptools\/OrmLiteSqliteOpenHelper;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Class\<com.j256.ormlite.android.apptools.OpenHelperManager\> r0 = com.j256.ormlite.android.apptools.OpenHelperManager.class\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r2 == null) goto L_0x000e\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?|innerSetHelperClass(r2)\lcom.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper r1 = loadHelper(r1, r2)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|monitor\-exit(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|SYNTHETIC\lSplitter:B:7:0x000e\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|throw new java.lang.IllegalArgumentException(\"openHelperClass argument is null\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|REMOVE\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public static synchronized T com.j256.ormlite.android.apptools.OpenHelperManager.getHelper((r1v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Lcom\/j256\/ormlite\/android\/apptools\/OrmLiteSqliteOpenHelper;, \>(, Landroid\/content\/Context;, Ljava\/lang\/Class\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

