digraph "CFG forcom.j256.ormlite.android.apptools.OpenHelperManager.loadHelper(Landroid\/content\/Context;Ljava\/lang\/Class;)Lcom\/j256\/ormlite\/android\/apptools\/OrmLiteSqliteOpenHelper;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (helper != null) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (wasClosed == false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|logger.info(\"helper was already closed and is being re\-opened\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r2 == null) goto L_0x002e\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|helper = constructHelper(r2.getApplicationContext(), r3)\llogger.trace(\"zero instances, created helper \{\}\", (java.lang.Object) helper)\lcom.j256.ormlite.dao.BaseDaoImpl.clearAllInternalObjectCaches()\lcom.j256.ormlite.dao.DaoManager.clearDaoCache()\linstanceCount = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e}"];
Node_8 [shape=record,label="{8\:\ 0x0035|throw new java.lang.IllegalArgumentException(\"context argument is null\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|instanceCount = instanceCount + 1\llogger.trace(\"returning helper \{\}, instance count = \{\} \", (java.lang.Object) helper, (java.lang.Object) java.lang.Integer.valueOf(instanceCount))\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|RETURN\l|return helper\l}"];
MethodNode[shape=record,label="{private static T com.j256.ormlite.android.apptools.OpenHelperManager.loadHelper((r2v0 android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Class\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Lcom\/j256\/ormlite\/android\/apptools\/OrmLiteSqliteOpenHelper;, \>(, Landroid\/content\/Context;, Ljava\/lang\/Class\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

