digraph "CFG forcom.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeConfigFile(Ljava\/io\/OutputStream;[Ljava\/lang\/Class;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.BufferedWriter r0 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(r3), 4096)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|SYNTHETIC\lSplitter:B:1:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0026 \}\lSplitter:B:1:0x000c\l|writeHeader(r0)     \/\/ Catch:\{ all \-\> 0x0026 \}\lint r3 = r4.length     \/\/ Catch:\{ all \-\> 0x0026 \}\lr1 = 0     \/\/ Catch:\{ all \-\> 0x0026 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|LOOP_START\lCatch:\{ all \-\> 0x0026 \}\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:2:?, B:4:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0011\-\>B:4:0x0013\l|if (r1 \>= r3) goto L_0x001b     \/\/ Catch:\{ all \-\> 0x0026 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|LOOP_END\lCatch:\{ all \-\> 0x0026 \}\lLOOP:0: B:3:0x0011\-\>B:4:0x0013\l|writeConfigForTable(r0, r4[r1])     \/\/ Catch:\{ all \-\> 0x0026 \}\lint r1 = r1 + 1     \/\/ Catch:\{ all \-\> 0x0026 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|Catch:\{ all \-\> 0x0026 \}\l|java.lang.System.out.println(\"Done.\")     \/\/ Catch:\{ all \-\> 0x0026 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|DONT_GENERATE\l|r0.close()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|ExcHandler:  FINALLY\lSplitter:B:1:0x000c\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|FINALLY_INSNS\l|r0.close()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|throw r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void com.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeConfigFile((r3v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Class\<?\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException, java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/OutputStream;, [, Ljava\/lang\/Class\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_5;
}

