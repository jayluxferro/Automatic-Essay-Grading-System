digraph "CFG forcom.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeConfigFile(Ljava\/io\/OutputStream;[Ljava\/lang\/Class;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.BufferedWriter) =  java.io.BufferedWriter \l0x0002: NEW_INSTANCE  (r1 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x0004: INVOKE  \l  (r1 I:java.io.OutputStreamWriter)\l  (r3 I:java.io.OutputStream)\l java.io.OutputStreamWriter.\<init\>(java.io.OutputStream):void type: DIRECT \l0x0007: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (4096(0x1000, float:5.74E\-42) ?[int, float, short, byte, char])\l \l0x0009: INVOKE  \l  (r0 I:java.io.BufferedWriter)\l  (r1 I:java.io.Writer)\l  (r3 I:int)\l java.io.BufferedWriter.\<init\>(java.io.Writer, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|SYNTHETIC\lSplitter:B:1:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000c\l|0x000c: INVOKE  (r0 I:java.io.BufferedWriter) com.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeHeader(java.io.BufferedWriter):void type: STATIC A[Catch:\{ all \-\> 0x0026 \}, TRY_ENTER]\l0x000f: ARRAY_LENGTH  (r3 I:int) = (r4 I:?[]) A[Catch:\{ all \-\> 0x0026 \}]\l0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:5:0x001b A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: AGET  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) A[Catch:\{ all \-\> 0x0026 \}]\l0x0015: INVOKE  (r0 I:java.io.BufferedWriter), (r2 I:java.lang.Class) com.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeConfigForTable(java.io.BufferedWriter, java.lang.Class):void type: STATIC A[Catch:\{ all \-\> 0x0026 \}]\l0x0018: ARITH  (r1 I:int) = (r1 I:int) + (1 int) A[Catch:\{ all \-\> 0x0026 \}]\l0x001a: GOTO  \-\> 0x0011 A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: SGET  (r3 I:java.io.PrintStream) =  java.lang.System.out java.io.PrintStream A[Catch:\{ all \-\> 0x0026 \}]\l0x001d: CONST_STR  (r4 I:java.lang.String) =  \"Done.\" A[Catch:\{ all \-\> 0x0026 \}]\l0x001f: INVOKE  (r3 I:java.io.PrintStream), (r4 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r0 I:java.io.BufferedWriter) java.io.BufferedWriter.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|ExcHandler: all null\lSplitter:B:1:0x000c\l|0x0026: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r0 I:java.io.BufferedWriter) java.io.BufferedWriter.close():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void com.j256.ormlite.android.apptools.OrmLiteConfigUtil.writeConfigFile((r3 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Class\<?\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.sql.SQLException, java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/OutputStream;, [, Ljava\/lang\/Class\<, *\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

