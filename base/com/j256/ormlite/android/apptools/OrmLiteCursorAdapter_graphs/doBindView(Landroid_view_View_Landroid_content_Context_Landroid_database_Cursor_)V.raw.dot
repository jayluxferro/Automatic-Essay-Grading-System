digraph "CFG forcom.j256.ormlite.android.apptools.OrmLiteCursorAdapter.doBindView(Landroid\/view\/View;Landroid\/content\/Context;Landroid\/database\/Cursor;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:com.j256.ormlite.android.apptools.OrmLiteCursorAdapter)\l  (r3 I:android.database.Cursor)\l com.j256.ormlite.android.apptools.OrmLiteCursorAdapter.cursorToObject(android.database.Cursor):java.lang.Object type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0008 \}, TRY_ENTER]\l0x0004: INVOKE  \l  (r0 I:com.j256.ormlite.android.apptools.OrmLiteCursorAdapter)\l  (r1 I:android.view.View)\l  (r2 I:android.content.Context)\l  (r3 I:java.lang.Object)\l com.j256.ormlite.android.apptools.OrmLiteCursorAdapter.bindView(android.view.View, android.content.Context, java.lang.Object):void type: VIRTUAL A[Catch:\{ SQLException \-\> 0x0008 \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ExcHandler: SQLException null\lSplitter:B:0:0x0000\l|0x0008: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x000b: INVOKE  \l  (r2 I:java.lang.RuntimeException)\l  (r1 I:java.lang.Throwable)\l java.lang.RuntimeException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void com.j256.ormlite.android.apptools.OrmLiteCursorAdapter.doBindView((r0 'this' I:com.j256.ormlite.android.apptools.OrmLiteCursorAdapter A[IMMUTABLE_TYPE, THIS]), (r1 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.database.Cursor A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

