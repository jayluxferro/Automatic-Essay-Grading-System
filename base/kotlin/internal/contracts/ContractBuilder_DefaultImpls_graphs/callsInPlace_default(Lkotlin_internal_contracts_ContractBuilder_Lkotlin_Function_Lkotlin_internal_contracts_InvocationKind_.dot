digraph "CFG forkotlin.internal.contracts.ContractBuilder.DefaultImpls.callsInPlace$default(Lkotlin\/internal\/contracts\/ContractBuilder;Lkotlin\/Function;Lkotlin\/internal\/contracts\/InvocationKind;ILjava\/lang\/Object;)Lkotlin\/internal\/contracts\/CallsInPlace;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 != null) goto L_0x000d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if ((r3 & 2) == 0) goto L_0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|kotlin.internal.contracts.InvocationKind r2 = kotlin.internal.contracts.InvocationKind.UNKNOWN\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|PHI: r2 \l  PHI: (r2v1 kotlin.internal.contracts.InvocationKind) = (r2v0 kotlin.internal.contracts.InvocationKind), (r2v2 kotlin.internal.contracts.InvocationKind) binds: [B:2:0x0004, B:3:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|RETURN\l|return r0.callsInPlace(r1, r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d}"];
Node_7 [shape=record,label="{7\:\ 0x0014|throw new java.lang.UnsupportedOperationException(\"Super calls with default arguments not supported in this target, function: callsInPlace\")\l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ kotlin.internal.contracts.CallsInPlace kotlin.internal.contracts.ContractBuilder.DefaultImpls.callsInPlace$default((r0v0 kotlin.internal.contracts.ContractBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 kotlin.Function A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.internal.contracts.InvocationKind A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.internal.ContractsDsl, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

