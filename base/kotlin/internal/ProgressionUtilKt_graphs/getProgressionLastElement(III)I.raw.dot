digraph "CFG forkotlin.internal.ProgressionUtilKt.getProgressionLastElement(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r1 I:int), (r0 I:int), (r2 I:int) kotlin.internal.ProgressionUtilKt.differenceModulo(int, int, int):int type: STATIC \l0x0009: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: NEG  (r2 I:int) = (r2 I:int) \l0x0011: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int), (r2 I:int) kotlin.internal.ProgressionUtilKt.differenceModulo(int, int, int):int type: STATIC \l0x0015: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r1 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0019: CONST_STR  (r1 I:java.lang.String) =  \"Step is zero.\" \l0x001b: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x001e: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.internal.ProgressionUtilKt.getProgressionLastElement((r0 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_3;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

