digraph "CFG forkotlin.internal.PlatformImplementationsKt.getJavaVersion()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"java.specification.version\" \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) java.lang.System.getProperty(java.lang.String):java.lang.String type: STATIC \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (65542(0x10006, float:9.1844E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x006b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r8 I:java.lang.CharSequence) = (java.lang.CharSequence) (r8 I:?[OBJECT, ARRAY]) \l0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0010: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r6 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0013: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0015: INVOKE  (r9 I:int) = \l  (r2 I:java.lang.CharSequence)\l  (r3 I:char)\l  (r4 I:int)\l  (r5 I:boolean)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int type: STATIC \l0x0019: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (65536(0x10000, float:9.18355E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|SYNTHETIC\lSplitter:B:4:0x001d\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x001d\l|0x001d: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x0023 \}, TRY_ENTER]\l0x0020: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: ARITH  (r1 I:int) = (r0 I:int) * (r10 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: RETURN  (r1 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:4:0x001d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0026: ARITH  (r11 I:int) = (r9 I:int) + (1 int) \l0x0028: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0029: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x002a: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x002c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: INVOKE  (r2 I:int) = \l  (r2 I:java.lang.CharSequence)\l  (r3 I:char)\l  (r4 I:int)\l  (r5 I:boolean)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0037 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: INVOKE  (r2 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0063 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.String), (r3 I:int), (r9 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x003e: CONST_STR  (r4 I:java.lang.String) =  \"(this as java.lang.Strin…ing(startIndex, endIndex)\" \l0x0040: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r11 I:int), (r2 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0049: CONST_STR  (r2 I:java.lang.String) =  \"(this as java.lang.Strin…ing(startIndex, endIndex)\" \l0x004b: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|SYNTHETIC\lSplitter:B:17:0x004e\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x004e\l|0x004e: INVOKE  (r2 I:int) = (r3 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x005a \}, TRY_ENTER]\l0x0052: ARITH  (r2 I:int) = (r2 I:int) * (r10 I:int) A[Catch:\{ NumberFormatException \-\> 0x005a \}]\l0x0054: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC A[Catch:\{ NumberFormatException \-\> 0x005a \}]\l0x0057: NOP   A[TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: ARITH  (r1 I:int) = (r2 I:int) + (r0 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|0x005a: RETURN  (r1 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:17:0x004e\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|0x005b: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x005d: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.String\" \l0x005f: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0063|0x0063: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0065: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.String\" \l0x0067: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x006a|0x006a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x006b|0x006b: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private static final int kotlin.internal.PlatformImplementationsKt.getJavaVersion() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_26;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_20;
Node_22 -> Node_23;
Node_24 -> Node_25;
}

