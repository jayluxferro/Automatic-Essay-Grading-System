digraph "CFG forkotlin.jdk7.AutoCloseableKt.closeFinally(Ljava\/lang\/AutoCloseable;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.AutoCloseable) java.lang.AutoCloseable.close():void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|SYNTHETIC\lSplitter:B:4:0x0009\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0009\l|0x0009: INVOKE  (r0 I:java.lang.AutoCloseable) java.lang.AutoCloseable.close():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x000d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|ExcHandler: Throwable null\lSplitter:B:4:0x0009\l|0x000d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.Throwable), (r0 I:java.lang.Throwable) java.lang.Throwable.addSuppressed(java.lang.Throwable):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: RETURN   \l}"];
MethodNode[shape=record,label="{public static final void kotlin.jdk7.AutoCloseableKt.closeFinally((r0 I:java.lang.AutoCloseable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_9[style=dashed];
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

