digraph "CFG forkotlin.jdk7.AutoCloseableKt.use(Ljava\/lang\/AutoCloseable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Throwable r0 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0012 \}\l|java.lang.Object r3 = r3.invoke(r2)     \/\/ Catch:\{ all \-\> 0x0012 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lcloseFinally(r2, r0)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|RETURN\l|return r3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ExcHandler: all (r3v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x0015\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|REMOVE\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|SYNTHETIC\lREMOVE\lSplitter:B:7:0x0015\l}"];
Node_8 [shape=record,label="{8\:\ ?|REMOVE\lCatch:\{ all \-\> 0x0012 \}\lSplitter:B:7:0x0015\l|throw r0     \/\/ Catch:\{ all \-\> 0x0012 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lcloseFinally(r2, r0)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|throw r3\l}"];
MethodNode[shape=record,label="{private static final R kotlin.jdk7.AutoCloseableKt.use((r2v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/AutoCloseable;, R:, Ljava\/lang\/Object;, \>(TT;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+TR;\>;)TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_5;
Node_9 -> Node_10;
}

