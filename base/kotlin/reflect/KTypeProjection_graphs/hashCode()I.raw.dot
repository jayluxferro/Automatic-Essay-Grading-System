digraph "CFG forkotlin.reflect.KTypeProjection.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:kotlin.reflect.KVariance) = (r3 I:kotlin.reflect.KTypeProjection) kotlin.reflect.KTypeProjection.variance kotlin.reflect.KVariance \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x000d: IGET  (r2 I:kotlin.reflect.KType) = (r3 I:kotlin.reflect.KTypeProjection) kotlin.reflect.KTypeProjection.type kotlin.reflect.KType \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r1 I:int) = (r2 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int kotlin.reflect.KTypeProjection.hashCode((r3 'this' I:kotlin.reflect.KTypeProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

