digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.unzip(Lkotlin\/sequences\/Sequence;)Lkotlin\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0007: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000a: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000f: INVOKE  (r4 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence) kotlin.sequences.Sequence.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: INVOKE  (r2 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r2 I:kotlin.Pair) = (kotlin.Pair) (r2 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r3 I:java.lang.Object) = (r2 I:kotlin.Pair) kotlin.Pair.getFirst():java.lang.Object type: VIRTUAL \l0x0023: INVOKE  (r0 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0026: INVOKE  (r2 I:java.lang.Object) = (r2 I:kotlin.Pair) kotlin.Pair.getSecond():java.lang.Object type: VIRTUAL \l0x002a: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: INVOKE  (r4 I:kotlin.Pair) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0032|0x0032: RETURN  (r4 I:kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\> kotlin.sequences.SequencesKt__SequencesKt.unzip((r4 I:kotlin.sequences.Sequence\<? extends kotlin.Pair\<? extends T, ? extends R\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +, Lkotlin\/Pair\<, +TT;+TR;\>;\>;), Lkotlin\/Pair\<, Ljava\/util\/List\<, TT;\>;, Ljava\/util\/List\<, TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

