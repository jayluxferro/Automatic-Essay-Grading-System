digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_1799084317 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_428013743 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_490567870 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r2 instanceof kotlin.sequences.TransformingSequence) == true) goto L_0x0004\l}"];
subgraph cluster_Region_2038930719 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return ((kotlin.sequences.TransformingSequence) r2).flatten$kotlin_stdlib(r3)\l}"];
}
}
subgraph cluster_Region_1287737347 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return new kotlin.sequences.FlatteningSequence\<\>(r2, kotlin.sequences.SequencesKt__SequencesKt$flatten$3.INSTANCE, r3)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt((r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, ? extends java.util.Iterator\<? extends R\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Ljava\/util\/Iterator\<, +TR;\>;\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

