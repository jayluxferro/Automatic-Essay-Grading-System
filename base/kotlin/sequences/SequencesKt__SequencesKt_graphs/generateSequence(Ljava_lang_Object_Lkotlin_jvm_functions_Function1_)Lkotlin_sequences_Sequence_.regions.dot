digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.generateSequence(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_881260227 {
label = "R(2:0|(2:(1:5)|(1:4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"nextFunction\")\l}"];
subgraph cluster_Region_1907161641 {
label = "R(2:(1:5)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_925629783 {
label = "IF [B:1:0x0005] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r2 == null) goto L_0x0007\l}"];
subgraph cluster_Region_827373608 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.sequences.EmptySequence.INSTANCE\l}"];
}
}
subgraph cluster_Region_845377583 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new kotlin.sequences.GeneratorSequence\<\>(new kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2(r2), r3)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.generateSequence((r2v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, ? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.internal.LowPriorityInOverloadResolution, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+TT;\>;), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
}

