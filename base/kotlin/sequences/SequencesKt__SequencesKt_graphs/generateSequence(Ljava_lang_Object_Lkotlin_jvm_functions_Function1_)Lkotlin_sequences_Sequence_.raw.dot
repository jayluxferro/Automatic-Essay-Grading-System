digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.generateSequence(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"nextFunction\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: SGET  (r2 I:kotlin.sequences.EmptySequence) =  kotlin.sequences.EmptySequence.INSTANCE kotlin.sequences.EmptySequence \l0x0009: CHECK_CAST  (r2 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:kotlin.sequences.GeneratorSequence) =  kotlin.sequences.GeneratorSequence \l0x000e: NEW_INSTANCE  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2) =  kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2 \l0x0010: INVOKE  \l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2)\l  (r2 I:java.lang.Object)\l kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2.\<init\>(java.lang.Object):void type: DIRECT \l0x0013: CHECK_CAST  (r1 I:kotlin.jvm.functions.Function0) = (kotlin.jvm.functions.Function0) (r1 I:?[OBJECT, ARRAY]) \l0x0015: INVOKE  \l  (r0 I:kotlin.sequences.GeneratorSequence)\l  (r1 I:kotlin.jvm.functions.Function0)\l  (r3 I:kotlin.jvm.functions.Function1)\l kotlin.sequences.GeneratorSequence.\<init\>(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1):void type: DIRECT \l0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0019: CHECK_CAST  (r2 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN  (r2 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.generateSequence((r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.internal.LowPriorityInOverloadResolution, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+TT;\>;), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

