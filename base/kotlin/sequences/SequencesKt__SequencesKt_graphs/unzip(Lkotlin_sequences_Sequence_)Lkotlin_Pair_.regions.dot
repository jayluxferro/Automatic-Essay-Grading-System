digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.unzip(Lkotlin\/sequences\/Sequence;)Lkotlin\/Pair;" {
subgraph cluster_Region_1875307643 {
label = "R(3:0|(1:3)|5)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\ljava.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r4 = r4.iterator()\l}"];
subgraph cluster_LoopRegion_1372568584 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r4.hasNext() != false) goto L_0x0019\l}"];
subgraph cluster_Region_1098115662 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l|kotlin.Pair r2 = (kotlin.Pair) r4.next()\lr0.add(r2.getFirst())\lr1.add(r2.getSecond())\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0032|RETURN\l|return kotlin.TuplesKt.m174to(r0, r1)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x002e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x002e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\> kotlin.sequences.SequencesKt__SequencesKt.unzip((r4v0 kotlin.sequences.Sequence\<? extends kotlin.Pair\<? extends T, ? extends R\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +, Lkotlin\/Pair\<, +TT;+TR;\>;\>;), Lkotlin\/Pair\<, Ljava\/util\/List\<, TT;\>;, Ljava\/util\/List\<, TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_6[style=dashed];
Node_3 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_6 -> Node_4;
}

