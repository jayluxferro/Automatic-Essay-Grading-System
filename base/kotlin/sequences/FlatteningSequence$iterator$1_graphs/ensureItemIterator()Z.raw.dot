digraph "CFG forkotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Iterator\<? extends E\>) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x000d: IPUT  \l  (r0 I:java.util.Iterator\<? extends E\>)\l  (r4 I:kotlin.sequences.FlatteningSequence$iterator$1)\l kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r0 I:java.util.Iterator\<? extends E\>) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator \l0x0011: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0043 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r0 I:java.util.Iterator\<T\>) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.iterator java.util.Iterator \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: RETURN  (r0 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IGET  (r0 I:java.util.Iterator\<T\>) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.iterator java.util.Iterator \l0x0020: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0024: IGET  (r2 I:kotlin.sequences.FlatteningSequence) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.this$0 kotlin.sequences.FlatteningSequence \l0x0026: INVOKE  (r2 I:kotlin.jvm.functions.Function1) = (r2 I:kotlin.sequences.FlatteningSequence) kotlin.sequences.FlatteningSequence.access$getIterator$p(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 type: STATIC \l0x002a: IGET  (r3 I:kotlin.sequences.FlatteningSequence) = (r4 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.this$0 kotlin.sequences.FlatteningSequence \l0x002c: INVOKE  (r3 I:kotlin.jvm.functions.Function1) = (r3 I:kotlin.sequences.FlatteningSequence) kotlin.sequences.FlatteningSequence.access$getTransformer$p(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 type: STATIC \l0x0030: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1)\l  (r0 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0034: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlin.jvm.functions.Function1)\l  (r0 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0038: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x003a: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: IPUT  \l  (r0 I:java.util.Iterator\<? extends E\>)\l  (r4 I:kotlin.sequences.FlatteningSequence$iterator$1)\l kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator((r4 'this' I:kotlin.sequences.FlatteningSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_5;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
}

