digraph "CFG forkotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator\<? extends E\> r0 = r4.itemIterator\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r0 == null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r0.hasNext() != false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|r4.itemIterator = null\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|LOOP_START\lLOOP:0: B:5:0x000f\-\>B:11:0x003e\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r4.itemIterator != null) goto L_0x0043\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014}"];
Node_8 [shape=record,label="{8\:\ 0x001a|if (r4.iterator.hasNext() != false) goto L_0x001e\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|java.lang.Object r0 = r4.iterator.next()\ljava.util.Iterator r0 = (java.util.Iterator) r4.this$0.iterator.invoke(r4.this$0.transformer.invoke(r0))\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|LOOP_END\lLOOP:0: B:5:0x000f\-\>B:11:0x003e\l|if (r0.hasNext() == false) goto L_0x000f\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|r4.itemIterator = r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|RETURN\l|return true\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x001c|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final boolean kotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator((r4v0 'this' kotlin.sequences.FlatteningSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_16[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_5;
Node_11 -> Node_17[style=dashed];
Node_12 -> Node_13;
Node_15 -> Node_14;
Node_16 -> Node_9;
Node_17 -> Node_12;
Node_18 -> Node_5;
}

