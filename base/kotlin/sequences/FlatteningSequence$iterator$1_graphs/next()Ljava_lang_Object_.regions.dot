digraph "CFG forkotlin.sequences.FlatteningSequence$iterator$1.next()Ljava\/lang\/Object;" {
subgraph cluster_Region_1599218780 {
label = "R(1:(2:(3:2|(1:4)|6)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1957442290 {
label = "R(2:(3:2|(1:4)|6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_455823837 {
label = "IF [B:1:0x0004] THEN: R(3:2|(1:4)|6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (ensureItemIterator() == true) goto L_0x0006\l}"];
subgraph cluster_Region_670962540 {
label = "R(3:2|(1:4)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|java.util.Iterator\<? extends E\> java.util.Iterator\<? extends E\> r0 = r1.itemIterator\l}"];
subgraph cluster_IfRegion_175597372 {
label = "IF [B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r0 == null) goto L_0x000a\l}"];
subgraph cluster_Region_1835838010 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|kotlin.jvm.internal.Intrinsics.throwNpe()\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\l|return r0.next()\l}"];
}
}
subgraph cluster_Region_600969999 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|throw new java.util.NoSuchElementException()\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0012}"];
MethodNode[shape=record,label="{public E kotlin.sequences.FlatteningSequence$iterator$1.next((r1v0 'this' kotlin.sequences.FlatteningSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TE;]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

