digraph "CFG forkotlin.sequences.SubSequence.\<init\>(Lkotlin\/sequences\/Sequence;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"sequence\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r2 I:kotlin.sequences.Sequence\<T\>)\l  (r1 I:kotlin.sequences.SubSequence)\l kotlin.sequences.SubSequence.sequence kotlin.sequences.Sequence \l0x000a: IPUT  (r3 I:int), (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l0x000c: IPUT  (r4 I:int), (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int \l0x000e: IGET  (r2 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0074 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IGET  (r2 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0055 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IGET  (r2 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int \l0x0024: IGET  (r0 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IF  (r2 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002c \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002e: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0031: CONST_STR  (r3 I:java.lang.String) =  \"endIndex should be not less than startIndex, but was \" \l0x0033: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: IGET  (r3 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int \l0x0038: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x003b: CONST_STR  (r3 I:java.lang.String) =  \" \< \" \l0x003d: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: IGET  (r3 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l0x0042: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0049: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004b: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x004f: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0052: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|0x0054: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0057: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005a: CONST_STR  (r3 I:java.lang.String) =  \"endIndex should be non\-negative, but is \" \l0x005c: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005f: IGET  (r3 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int \l0x0061: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x006e: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0071: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0073|0x0073: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0074|0x0074: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0076: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0079: CONST_STR  (r3 I:java.lang.String) =  \"startIndex should be non\-negative, but is \" \l0x007b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007e: IGET  (r3 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l0x0080: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0083: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0087: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0089: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x008d: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0090: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0092|0x0092: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SubSequence.\<init\>((r1 'this' I:kotlin.sequences.SubSequence A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;II)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

