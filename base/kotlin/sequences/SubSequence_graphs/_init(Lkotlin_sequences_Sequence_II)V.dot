digraph "CFG forkotlin.sequences.SubSequence.\<init\>(Lkotlin\/sequences\/Sequence;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"sequence\")\lr1.sequence = r2\lr1.startIndex = r3\lr1.endIndex = r4\lr3 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if (r1.startIndex \< 0) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|r2 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v17 boolean), (r2v18 boolean) binds: [B:3:0x0016, B:2:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x0074\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r1.endIndex \< 0) goto L_0x001f\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r2 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|r2 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|PHI: r2 \l  PHI: (r2v7 boolean) = (r2v15 boolean), (r2v16 boolean) binds: [B:8:0x001f, B:7:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x0055\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022}"];
Node_11 [shape=record,label="{11\:\ 0x0026|if (r1.endIndex \< r1.startIndex) goto L_0x0029\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|r3 = true\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|PHI: r3 \l  PHI: (r3v10 boolean) = (r3v1 boolean), (r3v17 boolean) binds: [B:11:0x0026, B:12:0x0028] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L_0x002c\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"endIndex should be not less than startIndex, but was \")\lr2.append(r1.endIndex)\lr2.append(\" \< \")\lr2.append(r1.startIndex)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|throw new java.lang.IllegalArgumentException(r2.toString().toString())\l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"endIndex should be non\-negative, but is \")\lr2.append(r1.endIndex)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0073|throw new java.lang.IllegalArgumentException(r2.toString().toString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x0074|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"startIndex should be non\-negative, but is \")\lr2.append(r1.startIndex)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0092|throw new java.lang.IllegalArgumentException(r2.toString().toString())\l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SubSequence.\<init\>((r1v0 'this' kotlin.sequences.SubSequence A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;II)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

