digraph "CFG forkotlin.sequences.DropWhileSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.dropState int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.drop():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.dropState int \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r0 I:T) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.nextItem java.lang.Object \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: IPUT  \l  (r1 I:T)\l  (r2 I:kotlin.sequences.DropWhileSequence$iterator$1)\l kotlin.sequences.DropWhileSequence$iterator$1.nextItem java.lang.Object \l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: IPUT  \l  (r1 I:int)\l  (r2 I:kotlin.sequences.DropWhileSequence$iterator$1)\l kotlin.sequences.DropWhileSequence$iterator$1.dropState int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r0 I:T) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.iterator java.util.Iterator \l0x0018: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.DropWhileSequence$iterator$1.next((r2 'this' I:kotlin.sequences.DropWhileSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

