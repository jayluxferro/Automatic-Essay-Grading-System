digraph "CFG forkotlin.sequences.FilteringSequence.\<init\>(Lkotlin\/sequences\/Sequence;ZLkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"sequence\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x000d: IPUT  \l  (r2 I:kotlin.sequences.Sequence\<T\>)\l  (r1 I:kotlin.sequences.FilteringSequence)\l kotlin.sequences.FilteringSequence.sequence kotlin.sequences.Sequence \l0x000f: IPUT  (r3 I:boolean), (r1 I:kotlin.sequences.FilteringSequence) kotlin.sequences.FilteringSequence.sendWhen boolean \l0x0011: IPUT  \l  (r4 I:kotlin.jvm.functions.Function1\<T, java.lang.Boolean\>)\l  (r1 I:kotlin.sequences.FilteringSequence)\l kotlin.sequences.FilteringSequence.predicate kotlin.jvm.functions.Function1 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.FilteringSequence.\<init\>((r1 'this' I:kotlin.sequences.FilteringSequence A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;Z, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

