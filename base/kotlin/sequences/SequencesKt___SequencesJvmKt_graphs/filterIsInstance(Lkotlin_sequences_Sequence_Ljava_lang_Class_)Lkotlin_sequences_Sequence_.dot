digraph "CFG forkotlin.sequences.SequencesKt___SequencesJvmKt.filterIsInstance(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Class;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"klass\")\lkotlin.sequences.Sequence r1 = kotlin.sequences.SequencesKt.filter(r1, new kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1(r2))\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|if (r1 == null) goto L_0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|RETURN\l|return r1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018}"];
Node_4 [shape=record,label="{4\:\ 0x001f|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.sequences.Sequence\<R\>\")\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt___SequencesJvmKt.filterIsInstance((r1v0 kotlin.sequences.Sequence\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.Class\<R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, *\>;, Ljava\/lang\/Class\<, TR;\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

