digraph "CFG forkotlin.sequences.SubSequence$iterator$1.drop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l0x0002: IGET  (r1 I:kotlin.sequences.SubSequence) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.this$0 kotlin.sequences.SubSequence \l0x0004: INVOKE  (r1 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.access$getStartIndex$p(kotlin.sequences.SubSequence):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.iterator java.util.Iterator \l0x000c: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.iterator java.util.Iterator \l0x0014: INVOKE  (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0017: IGET  (r0 I:int) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001b: IPUT  (r0 I:int), (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlin.sequences.SubSequence$iterator$1.drop((r2 'this' I:kotlin.sequences.SubSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_0;
}

