digraph "CFG forkotlin.sequences.SubSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.drop():void type: DIRECT \l0x0003: IGET  (r0 I:int) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l0x0005: IGET  (r1 I:kotlin.sequences.SubSequence) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.this$0 kotlin.sequences.SubSequence \l0x0007: INVOKE  (r1 I:int) = (r1 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.access$getEndIndex$p(kotlin.sequences.SubSequence):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IGET  (r0 I:int) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0011: IPUT  (r0 I:int), (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int \l0x0013: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.iterator java.util.Iterator \l0x0015: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN  (r0 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x001c: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x001f: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.SubSequence$iterator$1.next((r2 'this' I:kotlin.sequences.SubSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

