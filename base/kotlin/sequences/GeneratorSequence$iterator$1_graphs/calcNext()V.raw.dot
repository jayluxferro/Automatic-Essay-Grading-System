digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.calcNext()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:kotlin.sequences.GeneratorSequence) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.this$0 kotlin.sequences.GeneratorSequence \l0x0007: INVOKE  (r0 I:kotlin.jvm.functions.Function0) = (r0 I:kotlin.sequences.GeneratorSequence) kotlin.sequences.GeneratorSequence.access$getGetInitialValue$p(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function0 type: STATIC \l0x000b: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r0 I:kotlin.sequences.GeneratorSequence) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.this$0 kotlin.sequences.GeneratorSequence \l0x0012: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlin.sequences.GeneratorSequence) kotlin.sequences.GeneratorSequence.access$getGetNextValue$p(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function1 type: STATIC \l0x0016: IGET  (r1 I:T) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IPUT  \l  (r0 I:T)\l  (r2 I:kotlin.sequences.GeneratorSequence$iterator$1)\l kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l0x0023: IGET  (r0 I:T) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: IPUT  \l  (r0 I:int)\l  (r2 I:kotlin.sequences.GeneratorSequence$iterator$1)\l kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlin.sequences.GeneratorSequence$iterator$1.calcNext((r2 'this' I:kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

