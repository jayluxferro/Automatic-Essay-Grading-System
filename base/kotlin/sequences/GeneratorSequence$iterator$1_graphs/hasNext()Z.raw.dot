digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.calcNext():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.GeneratorSequence$iterator$1.hasNext((r2 'this' I:kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7;
}

