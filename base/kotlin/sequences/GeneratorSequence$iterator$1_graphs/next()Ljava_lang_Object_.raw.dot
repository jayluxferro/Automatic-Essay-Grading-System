digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.calcNext():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:T) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0010: IPUT  \l  (r1 I:int)\l  (r2 I:kotlin.sequences.GeneratorSequence$iterator$1)\l kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r0 I:T) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0015: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type T\" \l0x0017: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x001d: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x0020: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.GeneratorSequence$iterator$1.next((r2 'this' I:kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

