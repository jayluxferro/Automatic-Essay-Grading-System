digraph "CFG forkotlin.sequences.TakeSequence.take(I)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.TakeSequence) kotlin.sequences.TakeSequence.count int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0005: CHECK_CAST  (r3 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:kotlin.sequences.TakeSequence) =  kotlin.sequences.TakeSequence \l0x000a: IGET  (r1 I:kotlin.sequences.Sequence\<T\>) = (r2 I:kotlin.sequences.TakeSequence) kotlin.sequences.TakeSequence.sequence kotlin.sequences.Sequence \l0x000c: INVOKE  \l  (r0 I:kotlin.sequences.TakeSequence)\l  (r1 I:kotlin.sequences.Sequence)\l  (r3 I:int)\l kotlin.sequences.TakeSequence.\<init\>(kotlin.sequences.Sequence, int):void type: DIRECT \l0x000f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: CHECK_CAST  (r3 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN  (r3 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.TakeSequence.take((r2 'this' I:kotlin.sequences.TakeSequence A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

