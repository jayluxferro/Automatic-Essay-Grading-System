digraph "CFG forkotlin.sequences.TakeSequence.drop(I)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.sequences.TakeSequence) kotlin.sequences.TakeSequence.count int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r4 I:kotlin.sequences.Sequence) =  kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:kotlin.sequences.SubSequence) =  kotlin.sequences.SubSequence \l0x000b: IGET  (r1 I:kotlin.sequences.Sequence\<T\>) = (r3 I:kotlin.sequences.TakeSequence) kotlin.sequences.TakeSequence.sequence kotlin.sequences.Sequence \l0x000d: IGET  (r2 I:int) = (r3 I:kotlin.sequences.TakeSequence) kotlin.sequences.TakeSequence.count int \l0x000f: INVOKE  \l  (r0 I:kotlin.sequences.SubSequence)\l  (r1 I:kotlin.sequences.Sequence)\l  (r4 I:int)\l  (r2 I:int)\l kotlin.sequences.SubSequence.\<init\>(kotlin.sequences.Sequence, int, int):void type: DIRECT \l0x0012: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0013: CHECK_CAST  (r4 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r4 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.TakeSequence.drop((r3 'this' I:kotlin.sequences.TakeSequence A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

