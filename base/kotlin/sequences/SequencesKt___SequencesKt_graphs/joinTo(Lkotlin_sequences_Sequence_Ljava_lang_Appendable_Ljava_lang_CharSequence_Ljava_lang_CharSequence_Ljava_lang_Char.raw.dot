digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.joinTo(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"buffer\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"separator\" \l0x000c: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0011: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"postfix\" \l0x0016: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"truncated\" \l0x001b: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x001e: INVOKE  (r3 I:java.lang.Appendable), (r5 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l0x0021: INVOKE  (r2 I:java.util.Iterator) = (r2 I:kotlin.sequences.Sequence) kotlin.sequences.Sequence.iterator():java.util.Iterator type: INTERFACE \l0x0025: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|0x0026: INVOKE  (r0 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0040 \l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0030: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0032: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0033|0x0033: IF  (r5 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: INVOKE  (r3 I:java.lang.Appendable), (r4 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x003c \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IF  (r5 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:9:0x0040 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: INVOKE  \l  (r3 I:java.lang.Appendable)\l  (r0 I:java.lang.Object)\l  (r9 I:kotlin.jvm.functions.Function1)\l kotlin.text.StringsKt.appendElement(java.lang.Appendable, java.lang.Object, kotlin.jvm.functions.Function1):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|0x0040: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0047 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: IF  (r5 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:12:0x0047 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: INVOKE  (r3 I:java.lang.Appendable), (r8 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: INVOKE  (r3 I:java.lang.Appendable), (r6 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: RETURN  (r3 I:A) \l}"];
MethodNode[shape=record,label="{public static final A kotlin.sequences.SequencesKt___SequencesKt.joinTo((r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:A A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, A::, Ljava\/lang\/Appendable;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;TA;, Ljava\/lang\/CharSequence;, Ljava\/lang\/CharSequence;, Ljava\/lang\/CharSequence;, I, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Ljava\/lang\/CharSequence;, \>;)TA;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

