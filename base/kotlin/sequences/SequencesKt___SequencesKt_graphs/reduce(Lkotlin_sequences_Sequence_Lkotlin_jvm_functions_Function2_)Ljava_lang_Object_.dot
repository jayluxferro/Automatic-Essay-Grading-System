digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.reduce(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"operation\")\ljava.util.Iterator r2 = r2.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if (r2.hasNext() == false) goto L_0x0028\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|java.lang.Object r0 = r2.next()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|LOOP_START\lPHI: r0 \l  PHI: (r0v4 S) = (r0v3 S), (r0v5 S) binds: [B:2:0x0014, B:5:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0018\-\>B:5:0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|if (r2.hasNext() == false) goto L_0x0027\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|LOOP_END\lLOOP:0: B:3:0x0018\-\>B:5:0x001e\l|java.lang.Object r0 = r3.invoke(r0, r2.next())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028}"];
Node_8 [shape=record,label="{8\:\ 0x0031|throw new java.lang.UnsupportedOperationException(\"Empty sequence can't be reduced.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final S kotlin.sequences.SequencesKt___SequencesKt.reduce((r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 ? I:kotlin.jvm.functions.Function2\<? super S, ? super T, ? extends S\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lJADX WARNING: type inference failed for: r3v0, types: [java.lang.Object, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2\<? super S, ? super T, ? extends S\>]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<S:, Ljava\/lang\/Object;, T::TS;\>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function2\<, \-TS;\-TT;+TS;\>;)TS;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_6;
}

