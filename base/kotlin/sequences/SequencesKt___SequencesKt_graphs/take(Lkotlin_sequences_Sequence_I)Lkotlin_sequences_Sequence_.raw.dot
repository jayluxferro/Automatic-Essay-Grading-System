digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.take(Lkotlin\/sequences\/Sequence;I)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r1 I:kotlin.sequences.Sequence) =  kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) kotlin.sequences.DropTakeSequence \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: CHECK_CAST  (r1 I:kotlin.sequences.DropTakeSequence) = (kotlin.sequences.DropTakeSequence) (r1 I:?[OBJECT, ARRAY]) \l0x0019: INVOKE  (r1 I:kotlin.sequences.Sequence) = (r1 I:kotlin.sequences.DropTakeSequence), (r2 I:int) kotlin.sequences.DropTakeSequence.take(int):kotlin.sequences.Sequence type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:kotlin.sequences.TakeSequence) =  kotlin.sequences.TakeSequence \l0x0020: INVOKE  \l  (r0 I:kotlin.sequences.TakeSequence)\l  (r1 I:kotlin.sequences.Sequence)\l  (r2 I:int)\l kotlin.sequences.TakeSequence.\<init\>(kotlin.sequences.Sequence, int):void type: DIRECT \l0x0023: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0024: CHECK_CAST  (r1 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: RETURN  (r1 I:kotlin.sequences.Sequence\<T\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002c: CONST_STR  (r0 I:java.lang.String) =  \"Requested element count \" \l0x002e: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0034: CONST_STR  (r2 I:java.lang.String) =  \" is less than zero.\" \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003d: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003f: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0043: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0046: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.take((r1 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;I), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

