digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.single(Lkotlin\/sequences\/Sequence;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r1 I:java.util.Iterator) = (r1 I:kotlin.sequences.Sequence) kotlin.sequences.Sequence.iterator():java.util.Iterator type: INTERFACE \l0x0009: INVOKE  (r0 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0013: INVOKE  (r1 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: RETURN  (r0 I:T) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001c: CONST_STR  (r0 I:java.lang.String) =  \"Sequence has more than one element.\" \l0x001e: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0021: CHECK_CAST  (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0026: CONST_STR  (r0 I:java.lang.String) =  \"Sequence is empty.\" \l0x0028: INVOKE  \l  (r1 I:java.util.NoSuchElementException)\l  (r0 I:java.lang.String)\l java.util.NoSuchElementException.\<init\>(java.lang.String):void type: DIRECT \l0x002b: CHECK_CAST  (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.single((r1 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

