digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.mapIndexedNotNullTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Collection;" {
subgraph cluster_Region_1509378255 {
label = "R(3:0|(3:3|(1:5)(0)|6)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, com.google.firebase.analytics.FirebaseAnalytics.Param.DESTINATION)\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"transform\")\ljava.util.Iterator r3 = r3.iterator()\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_353769159 {
label = "LOOP:0: (3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0018|if (r3.hasNext() != false) goto L_0x001a\l}"];
subgraph cluster_Region_2111032511 {
label = "R(3:3|(1:5)(0)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001a|int int r2 = r0 + 1\ljava.lang.Object java.lang.Object r0 = r5.invoke(java.lang.Integer.valueOf(r0), r1)\l}"];
subgraph cluster_IfRegion_19315521 {
label = "IF [B:4:0x0028] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0028|if (r0 != null) goto L_0x002a\l}"];
subgraph cluster_Region_2003917372 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002a|r4.add(r0)\l}"];
}
subgraph cluster_Region_236982039 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x002d|LOOP_END\lLOOP:0: B:1:0x0014\-\>B:6:0x002d\l|r0 = r2\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\l|return r4\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0014|LOOP_START\lPHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v7 int) binds: [B:0:0x0000, B:6:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:6:0x002d\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002f|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002d|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final C kotlin.sequences.SequencesKt___SequencesKt.mapIndexedNotNullTo((r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 C A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, C::, Ljava\/util\/Collection\<, \-TR;\>;\>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;TC;, Lkotlin\/jvm\/functions\/Function2\<, \-, Ljava\/lang\/Integer;, \-TT;+TR;\>;)TC;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

