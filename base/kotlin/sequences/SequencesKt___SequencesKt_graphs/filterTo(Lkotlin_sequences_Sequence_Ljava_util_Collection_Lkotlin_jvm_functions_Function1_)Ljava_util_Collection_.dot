digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Collection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, com.google.firebase.analytics.FirebaseAnalytics.Param.DESTINATION)\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"predicate\")\ljava.util.Iterator r2 = r2.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:7:0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r2.hasNext() == false) goto L_0x002d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|java.lang.Object r0 = r2.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|if (r4.invoke(r0).booleanValue() == false) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|r3.add(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|RETURN\l|return r3\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0013\-\>B:7:0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final C kotlin.sequences.SequencesKt___SequencesKt.filterTo((r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 C A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, C::, Ljava\/util\/Collection\<, \-TT;\>;\>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;TC;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;)TC;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_10;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

