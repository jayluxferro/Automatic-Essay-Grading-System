digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.associate(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"transform\")\ljava.util.Map r0 = new java.util.LinkedHashMap\<\>()\ljava.util.Iterator r3 = r3.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|LOOP_START\lLOOP:0: B:1:0x0015\-\>B:3:0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|if (r3.hasNext() == false) goto L_0x0031\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|LOOP_END\lLOOP:0: B:1:0x0015\-\>B:3:0x001b\l|kotlin.Pair r1 = (kotlin.Pair) r4.invoke(r3.next())\lr0.put(r1.getFirst(), r1.getSecond())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.sequences.SequencesKt___SequencesKt.associate((r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super T, ? extends kotlin.Pair\<? extends K, ? extends V\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Lkotlin\/Pair\<, +TK;+TV;\>;\>;), Ljava\/util\/Map\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

