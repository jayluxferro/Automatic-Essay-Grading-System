digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.plus(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\ljava.lang.Object[] r2 = new java.lang.Object[]\{r4\}\lkotlin.sequences.Sequence[] r0 = new kotlin.sequences.Sequence[]\{r3, kotlin.sequences.SequencesKt.sequenceOf(r2)\}\l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|RETURN\l|return kotlin.sequences.SequencesKt.flatten(kotlin.sequences.SequencesKt.sequenceOf(r0))\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.plus((r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;TT;), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

