digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.maxBy(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r5 I:java.util.Iterator) = (r5 I:kotlin.sequences.Sequence) kotlin.sequences.Sequence.iterator():java.util.Iterator type: INTERFACE \l0x000e: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: RETURN  (r5 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001a: INVOKE  (r1 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1)\l  (r0 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r1 I:java.lang.Comparable) = (java.lang.Comparable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  (r2 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0039 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: INVOKE  (r3 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1)\l  (r2 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x002e: CHECK_CAST  (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  (r4 I:int) = (r1 I:java.lang.Comparable), (r3 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0020 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0037: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.maxBy((r5 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R::, Ljava\/lang\/Comparable\<, \-TR;\>;\>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+TR;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_5;
}

