digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.singleOrNull(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"predicate\")\ljava.util.Iterator r5 = r5.iterator()\lr1 = false\lr2 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:0:0x0000, B:11:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 T) = (r2v0 T), (r2v2 T) binds: [B:0:0x0000, B:11:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0011\-\>B:11:0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|if (r5.hasNext() == false) goto L_0x002d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|java.lang.Object r3 = r5.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|if (r6.invoke(r3).booleanValue() == false) goto L_0x0011\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|if (r1 == false) goto L_0x002a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|RETURN\l|return null\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|r1 = true\lr2 = r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|if (r1 != false) goto L_0x0030\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|RETURN\l|return r2\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|LOOP_END\lSYNTHETIC\lPHI: r1 r2 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v3 boolean) binds: [B:14:0x0011, B:15:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 T) = (r2v1 T), (r2v3 T) binds: [B:14:0x0011, B:15:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0011\-\>B:11:0x0011\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.singleOrNull((r5v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_7;
Node_5 -> Node_13[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_11 -> Node_1;
Node_12 -> Node_8;
Node_13 -> Node_6;
Node_14 -> Node_11;
Node_15 -> Node_11;
}

