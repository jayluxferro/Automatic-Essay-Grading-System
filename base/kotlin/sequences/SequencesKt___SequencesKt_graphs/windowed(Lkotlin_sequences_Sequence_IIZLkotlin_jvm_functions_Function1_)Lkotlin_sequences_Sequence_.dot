digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.windowed(Lkotlin\/sequences\/Sequence;IIZLkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"transform\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|RETURN\l|return kotlin.sequences.SequencesKt.map(kotlin.collections.SlidingWindowKt.windowedSequence(r1, r2, r3, r4, true), r5)\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt___SequencesKt.windowed((r1v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/util\/List\<, +TT;\>;+TR;\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

