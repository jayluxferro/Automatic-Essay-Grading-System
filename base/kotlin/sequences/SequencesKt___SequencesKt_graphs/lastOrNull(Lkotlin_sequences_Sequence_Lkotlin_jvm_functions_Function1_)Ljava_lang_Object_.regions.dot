digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.lastOrNull(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
subgraph cluster_Region_394454185 {
label = "R(3:0|(2:3|(1:5)(0))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"predicate\")\ljava.util.Iterator r3 = r3.iterator()\lT r0 = null\l}"];
subgraph cluster_LoopRegion_1207669825 {
label = "LOOP:0: (2:3|(1:5)(0))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r3.hasNext() != false) goto L_0x0015\l}"];
subgraph cluster_Region_1452023039 {
label = "R(2:3|(1:5)(0))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|java.lang.Object r1 = r3.next()\l}"];
subgraph cluster_IfRegion_1942236479 {
label = "IF [B:4:0x0023] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r4.invoke(r1).booleanValue() == true) goto L_0x0025\l}"];
subgraph cluster_Region_1893890816 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0025|r0 = r1\l}"];
}
subgraph cluster_Region_2094877714 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0027|RETURN\l|return r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000f|LOOP_START\lPHI: r0 \l  PHI: (r0v3 T) = (r0v2 T), (r0v4 T) binds: [B:0:0x0000, B:7:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:7:0x000f\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f|LOOP_END\lSYNTHETIC\lPHI: r0 \l  PHI: (r0v4 T) = (r0v3 T), (r0v5 T) binds: [B:9:0x000f, B:10:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:7:0x000f\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0027|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.lastOrNull((r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_10;
Node_1 -> Node_2;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

