digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.partition(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"predicate\")\ljava.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r4 = r4.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|LOOP_START\lLOOP:0: B:1:0x0018\-\>B:9:0x0018\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|if (r4.hasNext() == false) goto L_0x0036\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|java.lang.Object r2 = r4.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|if (r5.invoke(r2).booleanValue() == false) goto L_0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|r0.add(r2)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|r1.add(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036}"];
Node_8 [shape=record,label="{8\:\ 0x003b|RETURN\l|return new kotlin.Pair\<\>(r0, r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0018\-\>B:9:0x0018\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<T\>\> kotlin.sequences.SequencesKt___SequencesKt.partition((r4v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;), Lkotlin\/Pair\<, Ljava\/util\/List\<, TT;\>;, Ljava\/util\/List\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_9 -> Node_1;
Node_10 -> Node_7;
Node_11 -> Node_9;
Node_12 -> Node_9;
}

