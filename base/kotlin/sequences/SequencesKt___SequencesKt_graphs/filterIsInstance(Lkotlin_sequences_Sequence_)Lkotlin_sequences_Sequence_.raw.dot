digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterIsInstance(Lkotlin\/sequences\/Sequence;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE   kotlin.jvm.internal.Intrinsics.needClassReification():void type: STATIC \l0x0003: SGET  (r0 I:kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1) =  kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 \l0x0005: CHECK_CAST  (r0 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r0 I:?[OBJECT, ARRAY]) \l0x0007: INVOKE  (r1 I:kotlin.sequences.Sequence) = \l  (r1 I:kotlin.sequences.Sequence)\l  (r0 I:kotlin.jvm.functions.Function1)\l kotlin.sequences.SequencesKt.filter(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: RETURN  (r1 I:kotlin.sequences.Sequence\<R\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: NEW_INSTANCE  (r1 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0010: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.sequences.Sequence\<R\>\" \l0x0012: INVOKE  (r1 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance((r1 I:kotlin.sequences.Sequence\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, *\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

