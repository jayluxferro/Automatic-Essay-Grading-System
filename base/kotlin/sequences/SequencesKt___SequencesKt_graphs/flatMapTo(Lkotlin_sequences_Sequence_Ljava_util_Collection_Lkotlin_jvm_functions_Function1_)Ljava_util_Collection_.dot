digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.flatMapTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Collection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, com.google.firebase.analytics.FirebaseAnalytics.Param.DESTINATION)\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"transform\")\ljava.util.Iterator r1 = r1.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r1.hasNext() == false) goto L_0x0027\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0013\-\>B:3:0x0019\l|kotlin.collections.CollectionsKt.addAll(r2, (kotlin.sequences.Sequence) r3.invoke(r1.next()))\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|RETURN\l|return r2\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final C kotlin.sequences.SequencesKt___SequencesKt.flatMapTo((r1v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 C A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, ? extends kotlin.sequences.Sequence\<? extends R\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, C::, Ljava\/util\/Collection\<, \-TR;\>;\>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;TC;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Lkotlin\/sequences\/Sequence\<, +TR;\>;\>;)TC;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

