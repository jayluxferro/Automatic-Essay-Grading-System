digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.min(Lkotlin\/sequences\/Sequence;)Ljava\/lang\/Float;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\ljava.util.Iterator r3 = r3.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r3.hasNext() != false) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|float r0 = r3.next().floatValue()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|if (java.lang.Float.isNaN(r0) == false) goto L_0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021}"];
Node_6 [shape=record,label="{6\:\ 0x0025|RETURN\l|return java.lang.Float.valueOf(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|LOOP_START\lPHI: r0 \l  PHI: (r0v5 float) = (r0v4 float), (r0v6 float) binds: [B:4:0x001f, B:18:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0026\-\>B:18:0x0026\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|if (r3.hasNext() == false) goto L_0x0047\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|float r1 = r3.next().floatValue()\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|if (java.lang.Float.isNaN(r1) == false) goto L_0x0041\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|return java.lang.Float.valueOf(r1)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041}"];
Node_14 [shape=record,label="{14\:\ 0x0043|if ((r0 \> r1 ? 1 : (r0 == r1 ? 0 : \-1)) \<= 0) goto L_0x0026\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|r0 = r1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0047}"];
Node_17 [shape=record,label="{17\:\ 0x004b|RETURN\l|return java.lang.Float.valueOf(r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|LOOP_END\lSYNTHETIC\lPHI: r0 \l  PHI: (r0v6 float) = (r0v5 float), (r0v7 float) binds: [B:21:0x0026, B:22:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x0026\-\>B:18:0x0026\l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.Float kotlin.sequences.SequencesKt___SequencesKt.min((r3v0 kotlin.sequences.Sequence\<java.lang.Float\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lRENAME_REASON:collision with other method in class\lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, Ljava\/lang\/Float;, \>;), Ljava\/lang\/Float;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_13;
Node_10 -> Node_19[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_18 -> Node_7;
Node_19 -> Node_11;
Node_20 -> Node_16;
Node_21 -> Node_18;
Node_22 -> Node_18;
}

