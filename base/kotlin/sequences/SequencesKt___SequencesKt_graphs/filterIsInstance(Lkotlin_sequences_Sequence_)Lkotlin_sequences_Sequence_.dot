digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterIsInstance(Lkotlin\/sequences\/Sequence;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.needClassReification()\lkotlin.sequences.Sequence r1 = kotlin.sequences.SequencesKt.filter(r1, kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r1 == null) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|RETURN\l|return r1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e}"];
Node_4 [shape=record,label="{4\:\ 0x0015|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.sequences.Sequence\<R\>\")\l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance((r1v0 kotlin.sequences.Sequence\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, *\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

