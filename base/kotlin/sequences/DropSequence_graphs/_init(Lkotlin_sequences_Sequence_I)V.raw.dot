digraph "CFG forkotlin.sequences.DropSequence.\<init\>(Lkotlin\/sequences\/Sequence;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"sequence\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r2 I:kotlin.sequences.Sequence\<T\>)\l  (r1 I:kotlin.sequences.DropSequence)\l kotlin.sequences.DropSequence.sequence kotlin.sequences.Sequence \l0x000a: IPUT  (r3 I:int), (r1 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int \l0x000c: IGET  (r2 I:int) = (r1 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001b: CONST_STR  (r3 I:java.lang.String) =  \"count must be non\-negative, but was \" \l0x001d: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: IGET  (r3 I:int) = (r1 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int \l0x0022: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0027: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002e: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0030: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0037: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.DropSequence.\<init\>((r1 'this' I:kotlin.sequences.DropSequence A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;I)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
}

