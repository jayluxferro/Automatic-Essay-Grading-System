digraph "CFG forkotlin.sequences.DropSequence.\<init\>(Lkotlin\/sequences\/Sequence;I)V" {
subgraph cluster_Region_2143252658 {
label = "R(2:0|(1:(2:6|7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"sequence\")\lr1.sequence = r2\lr1.count = r3\l}"];
subgraph cluster_Region_1841875515 {
label = "R(1:(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1551541237 {
label = "IF [B:4:0x0013] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|PHI: r2 \l  PHI: (r2v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r1.count \>= 0) != true) goto L_0x0016\l}"];
subgraph cluster_Region_2044042533 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016}"];
Node_7 [shape=record,label="{7\:\ 0x0039|throw new java.lang.IllegalArgumentException((\"count must be non\-negative, but was \" + r1.count + '.').toString())\l}"];
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000e}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0010}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0012}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0015}"];
MethodNode[shape=record,label="{public void kotlin.sequences.DropSequence.\<init\>((r1v0 'this' kotlin.sequences.DropSequence A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;I)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

