digraph "CFG forkotlin.sequences.DropSequence.take(I)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:kotlin.sequences.SubSequence) =  kotlin.sequences.SubSequence \l0x0002: IGET  (r1 I:kotlin.sequences.Sequence\<T\>) = (r4 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.sequence kotlin.sequences.Sequence \l0x0004: IGET  (r2 I:int) = (r4 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int \l0x0006: IGET  (r3 I:int) = (r4 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int \l0x0008: ARITH  (r3 I:int) = (r3 I:int) + (r5 I:int) \l0x0009: INVOKE  \l  (r0 I:kotlin.sequences.SubSequence)\l  (r1 I:kotlin.sequences.Sequence)\l  (r2 I:int)\l  (r3 I:int)\l kotlin.sequences.SubSequence.\<init\>(kotlin.sequences.Sequence, int, int):void type: DIRECT \l0x000c: CHECK_CAST  (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.DropSequence.take((r4 'this' I:kotlin.sequences.DropSequence A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

