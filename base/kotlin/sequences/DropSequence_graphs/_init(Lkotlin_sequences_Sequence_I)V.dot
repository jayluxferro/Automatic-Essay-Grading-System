digraph "CFG forkotlin.sequences.DropSequence.\<init\>(Lkotlin\/sequences\/Sequence;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"sequence\")\lr1.sequence = r2\lr1.count = r3\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r1.count \< 0) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|r2 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v6 boolean), (r2v7 boolean) binds: [B:3:0x0012, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x0016\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"count must be non\-negative, but was \")\lr2.append(r1.count)\lr2.append('.')\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|throw new java.lang.IllegalArgumentException(r2.toString().toString())\l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.DropSequence.\<init\>((r1v0 'this' kotlin.sequences.DropSequence A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/sequences\/Sequence\<, +TT;\>;I)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
}

