digraph "CFG forkotlin.sequences.TakeSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.left int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.left int \l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0008: IPUT  (r0 I:int), (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.left int \l0x000a: IGET  (r0 I:java.util.Iterator\<T\>) = (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.iterator java.util.Iterator \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r0 I:T) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0013: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x0016: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.TakeSequence$iterator$1.next((r1 'this' I:kotlin.sequences.TakeSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

