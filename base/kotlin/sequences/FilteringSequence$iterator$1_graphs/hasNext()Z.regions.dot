digraph "CFG forkotlin.sequences.FilteringSequence$iterator$1.hasNext()Z" {
subgraph cluster_Region_2092657816 {
label = "R(2:(1:2)|4)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1989728721 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r2.nextState == \-1) goto L_0x0005\l}"];
subgraph cluster_Region_811418789 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|calcNext()\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x000b|RETURN\l|return r2.nextState == 1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000e|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.FilteringSequence$iterator$1.hasNext((r2v0 'this' kotlin.sequences.FilteringSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

