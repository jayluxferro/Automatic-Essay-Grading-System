digraph "CFG forkotlin.sequences.FilteringSequence$iterator$1.calcNext()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:3:0x0024\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.iterator.hasNext() == false) goto L_0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|java.lang.Object r0 = r3.iterator.next()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:3:0x0024\l|if (((java.lang.Boolean) r3.this$0.predicate.invoke(r0)).booleanValue() != r3.this$0.sendWhen) goto L_0x0000\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|r3.nextItem = r0\lr3.nextState = 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|r3.nextState = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlin.sequences.FilteringSequence$iterator$1.calcNext((r3v0 'this' kotlin.sequences.FilteringSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_0;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_4;
Node_9 -> Node_6;
}

