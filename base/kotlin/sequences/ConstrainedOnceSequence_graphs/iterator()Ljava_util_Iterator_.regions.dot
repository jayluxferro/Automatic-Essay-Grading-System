digraph "CFG forkotlin.sequences.ConstrainedOnceSequence.iterator()Ljava\/util\/Iterator;" {
subgraph cluster_Region_1342843203 {
label = "R(2:0|(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.sequences.Sequence kotlin.sequences.Sequence r0 = r2.sequenceRef.getAndSet((java.lang.Object) null)\l}"];
subgraph cluster_Region_1752936497 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_546488244 {
label = "IF [B:1:0x0009] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r0 != null) goto L_0x000b\l}"];
subgraph cluster_Region_1303773689 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|return r0.iterator()\l}"];
}
}
subgraph cluster_Region_1562500501 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0019|throw new java.lang.IllegalStateException(\"This sequence can be consumed only once.\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
MethodNode[shape=record,label="{public java.util.Iterator\<T\> kotlin.sequences.ConstrainedOnceSequence.iterator((r2v0 'this' kotlin.sequences.ConstrainedOnceSequence A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Iterator\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
}

