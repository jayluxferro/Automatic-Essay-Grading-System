digraph "CFG forkotlin.sequences.ConstrainedOnceSequence.iterator()Ljava\/util\/Iterator;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.sequences.Sequence r0 = r2.sequenceRef.getAndSet((java.lang.Object) null)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r0 == null) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b}"];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|return r0.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010}"];
Node_5 [shape=record,label="{5\:\ 0x0019|throw new java.lang.IllegalStateException(\"This sequence can be consumed only once.\")\l}"];
MethodNode[shape=record,label="{public java.util.Iterator\<T\> kotlin.sequences.ConstrainedOnceSequence.iterator((r2v0 'this' kotlin.sequences.ConstrainedOnceSequence A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Iterator\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

