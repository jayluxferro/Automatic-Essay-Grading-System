digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$elementAt$1.invoke(I)Ljava\/lang\/Void;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r3 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException \l0x0002: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0004: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"Sequence doesn't contain element at index \" \l0x0009: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000c: IGET  (r1 I:int) = \l  (r2 I:kotlin.sequences.SequencesKt___SequencesKt$elementAt$1)\l kotlin.sequences.SequencesKt___SequencesKt$elementAt$1.$index int \l0x000e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0013: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001a: INVOKE  \l  (r3 I:java.lang.IndexOutOfBoundsException)\l  (r0 I:java.lang.String)\l java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void type: DIRECT \l0x001d: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|0x001f: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.lang.Void kotlin.sequences.SequencesKt___SequencesKt$elementAt$1.invoke((r2 'this' I:kotlin.sequences.SequencesKt___SequencesKt$elementAt$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

