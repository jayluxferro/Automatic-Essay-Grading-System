digraph "CFG forkotlin.StandardKt__SynchronizedKt.synchronized(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001}"];
Node_2 [shape=record,label="{2\:\ 0x0002|SYNTHETIC\lSplitter:B:2:0x0002\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ all \-\> 0x000e \}\lSplitter:B:2:0x0002\l|java.lang.Object r2 = r2.invoke()     \/\/ Catch:\{ all \-\> 0x000e \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|kotlin.jvm.internal.InlineMarker.finallyStart(1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|monitor\-exit(r1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|kotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|ExcHandler: all (r2v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:2:0x0002\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|kotlin.jvm.internal.InlineMarker.finallyStart(1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012}"];
Node_11 [shape=record,label="{11\:\ 0x0013|kotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|throw r2\l}"];
MethodNode[shape=record,label="{private static final R kotlin.StandardKt__SynchronizedKt.synchronized((r1v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.jvm.functions.Function0\<? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | RENAME_REASON:not valid java name\lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Object;, Lkotlin\/jvm\/functions\/Function0\<, +TR;\>;)TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

