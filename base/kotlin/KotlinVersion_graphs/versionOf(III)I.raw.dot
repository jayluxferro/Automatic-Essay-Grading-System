digraph "CFG forkotlin.KotlinVersion.versionOf(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:9:0x000f \l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:11:0x0013 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0011|0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0016|0x0016: ARITH  (r3 I:int) = (r3 I:int) \<\< (16 int) \l0x0018: ARITH  (r4 I:int) = (r4 I:int) \<\< (8 int) \l0x001a: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x001b: ARITH  (r3 I:int) = (r3 I:int) + (r5 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: RETURN  (r3 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0022: CONST_STR  (r1 I:java.lang.String) =  \"Version components are out of range: \" \l0x0024: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002a: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x002c: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0035: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0038: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003c: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003e: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0042: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0045: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final int kotlin.KotlinVersion.versionOf((r2 'this' I:kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_11[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_6;
Node_4 -> Node_11[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_9;
Node_7 -> Node_11[style=dashed];
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

