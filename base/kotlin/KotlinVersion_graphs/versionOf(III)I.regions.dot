digraph "CFG forkotlin.KotlinVersion.versionOf(III)I" {
subgraph cluster_Region_66556985 {
label = "R(1:(2:(1:11)|(2:12|13)))";
node [shape=record,color=blue];
subgraph cluster_Region_1410410892 {
label = "R(2:(1:11)|(2:12|13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1527738202 {
label = "IF [B:9:0x0014] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0014|PHI: r0 \l  PHI: (r0v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 \>= 0 && 255 \>= r3 && r4 \>= 0 && 255 \>= r4 && r5 \>= 0 && 255 \>= r5) == true) goto L_0x0016\l}"];
subgraph cluster_Region_1897139646 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001c|RETURN\l|return (r3 \<\< 16) + (r4 \<\< 8) + r5\l}"];
}
}
subgraph cluster_Region_1316821497 {
label = "R(2:12|13)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001d}"];
Node_13 [shape=record,label="{13\:\ 0x0047|throw new java.lang.IllegalArgumentException((\"Version components are out of range: \" + r3 + '.' + r4 + '.' + r5).toString())\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0003}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005|REMOVE\lADDED_TO_REGION\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a|REMOVE\lADDED_TO_REGION\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0011}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0013}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0016}"];
MethodNode[shape=record,label="{private final int kotlin.KotlinVersion.versionOf((r2v0 'this' kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_0 -> Node_1;
Node_0 -> Node_8;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

