digraph "CFG forkotlin.KotlinVersion.versionOf(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 \>= 0) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (255 \< r3) goto L_0x0013\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r4 \>= 0) goto L_0x000a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (255 \< r4) goto L_0x0013\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r5 \>= 0) goto L_0x000f\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if (255 \< r5) goto L_0x0013\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|r0 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|r0 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|PHI: r0 \l  PHI: (r0v0 boolean) = (r0v2 boolean), (r0v4 boolean) binds: [B:8:0x0013, B:7:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x001d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016}"];
Node_11 [shape=record,label="{11\:\ 0x001c|RETURN\l|return ((r3 \<\< 16) + (r4 \<\< 8)) + r5\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Version components are out of range: \")\lr0.append(r3)\lr0.append('.')\lr0.append(r4)\lr0.append('.')\lr0.append(r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|throw new java.lang.IllegalArgumentException(r0.toString().toString())\l}"];
MethodNode[shape=record,label="{private final int kotlin.KotlinVersion.versionOf((r2v0 'this' kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_8[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

