digraph "CFG forkotlin.concurrent.LocksKt.write(Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.readLock():java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount():int type: VIRTUAL \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r1 I:int) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock():void type: VIRTUAL \l0x0017: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL \l0x001e: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void type: VIRTUAL \l0x0021: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|SYNTHETIC\lSplitter:B:8:0x0022\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0022\l|0x0022: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0038 \}, TRY_ENTER]\l0x0025: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: INVOKE  (r3 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock():void type: VIRTUAL \l0x002e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l0x0034: INVOKE  (r3 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: RETURN  (r5 I:T) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|ExcHandler: all null\lSplitter:B:8:0x0022\l|0x0038: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: INVOKE  (r3 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:19:0x0044 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock():void type: VIRTUAL \l0x0041: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l0x0047: INVOKE  (r3 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final T kotlin.concurrent.LocksKt.write((r4 I:java.util.concurrent.locks.ReentrantReadWriteLock A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function0\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;, Lkotlin\/jvm\/functions\/Function0\<, +TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_17;
Node_19 -> Node_20;
}

