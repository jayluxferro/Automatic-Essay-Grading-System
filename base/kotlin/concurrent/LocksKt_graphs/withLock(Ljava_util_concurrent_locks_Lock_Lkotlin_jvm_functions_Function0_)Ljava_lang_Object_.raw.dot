digraph "CFG forkotlin.concurrent.LocksKt.withLock(Ljava\/util\/concurrent\/locks\/Lock;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.lock():void type: INTERFACE \l0x0003: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0004\l|0x0004: INVOKE  (r2 I:java.lang.Object) = (r2 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0012 \}, TRY_ENTER]\l0x0007: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x000b: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l0x000e: INVOKE  (r0 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r2 I:T) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|ExcHandler: all null\lSplitter:B:1:0x0004\l|0x0012: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r0 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x0016: INVOKE  (r1 I:java.util.concurrent.locks.Lock) java.util.concurrent.locks.Lock.unlock():void type: INTERFACE \l0x0019: INVOKE  (r0 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final T kotlin.concurrent.LocksKt.withLock((r1 I:java.util.concurrent.locks.Lock A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function0\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/concurrent\/locks\/Lock;, Lkotlin\/jvm\/functions\/Function0\<, +TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

