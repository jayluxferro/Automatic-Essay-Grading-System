digraph "CFG forkotlin.concurrent.ThreadsKt.thread$default(ZZLjava\/lang\/ClassLoader;Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function0;ILjava\/lang\/Object;)Ljava\/lang\/Thread;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r13 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l0x0012: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0018 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0016: CHECK_CAST  (r8 I:java.lang.ClassLoader) = (java.lang.ClassLoader) (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0019: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0020 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x001e: CHECK_CAST  (r9 I:java.lang.String) = (java.lang.String) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0021: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0028 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: CONST  (r10 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0026: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0028|0x0028: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  (r6 I:java.lang.Thread) = \l  (r0 I:boolean)\l  (r1 I:boolean)\l  (r2 I:java.lang.ClassLoader)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:kotlin.jvm.functions.Function0)\l kotlin.concurrent.ThreadsKt.thread(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0):java.lang.Thread type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: RETURN  (r6 I:java.lang.Thread) \l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ java.lang.Thread kotlin.concurrent.ThreadsKt.thread$default((r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.ClassLoader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function0 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

