digraph "CFG forkotlin.concurrent.ThreadsKt.thread(ZZLjava\/lang\/ClassLoader;Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Thread;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"block\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: NEW_INSTANCE  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1) =  kotlin.concurrent.ThreadsKt$thread$thread$1 \l0x0007: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r6 I:kotlin.jvm.functions.Function0)\l kotlin.concurrent.ThreadsKt$thread$thread$1.\<init\>(kotlin.jvm.functions.Function0):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r2 I:boolean)\l kotlin.concurrent.ThreadsKt$thread$thread$1.setDaemon(boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r5 I:int)\l kotlin.concurrent.ThreadsKt$thread$thread$1.setPriority(int):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r4 I:java.lang.String)\l kotlin.concurrent.ThreadsKt$thread$thread$1.setName(java.lang.String):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r3 I:java.lang.ClassLoader)\l kotlin.concurrent.ThreadsKt$thread$thread$1.setContextClassLoader(java.lang.ClassLoader):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0024 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: INVOKE  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1) kotlin.concurrent.ThreadsKt$thread$thread$1.start():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: CHECK_CAST  (r0 I:java.lang.Thread) = (java.lang.Thread) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: RETURN  (r0 I:java.lang.Thread) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Thread kotlin.concurrent.ThreadsKt.thread((r1 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.ClassLoader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function0\<kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(ZZ, Ljava\/lang\/ClassLoader;, Ljava\/lang\/String;, I, Lkotlin\/jvm\/functions\/Function0\<, Lkotlin\/Unit;, \>;), Ljava\/lang\/Thread;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

