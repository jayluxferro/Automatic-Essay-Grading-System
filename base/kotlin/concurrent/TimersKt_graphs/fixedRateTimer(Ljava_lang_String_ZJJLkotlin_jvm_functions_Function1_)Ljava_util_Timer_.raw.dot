digraph "CFG forkotlin.concurrent.TimersKt.fixedRateTimer(Ljava\/lang\/String;ZJJLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Timer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:java.util.Timer) = (r6 I:java.lang.String), (r7 I:boolean) kotlin.concurrent.TimersKt.timer(java.lang.String, boolean):java.util.Timer type: STATIC \l0x0004: NEW_INSTANCE  (r7 I:kotlin.concurrent.TimersKt$timerTask$1) =  kotlin.concurrent.TimersKt$timerTask$1 \l0x0006: INVOKE  \l  (r7 I:kotlin.concurrent.TimersKt$timerTask$1)\l  (r12 I:kotlin.jvm.functions.Function1)\l kotlin.concurrent.TimersKt$timerTask$1.\<init\>(kotlin.jvm.functions.Function1):void type: DIRECT \l0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000a: CHECK_CAST  (r1 I:java.util.TimerTask) = (java.util.TimerTask) (r1 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x000d: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l0x000e: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l0x000f: INVOKE  \l  (r0 I:java.util.Timer)\l  (r1 I:java.util.TimerTask)\l  (r2 I:long)\l  (r4 I:long)\l java.util.Timer.scheduleAtFixedRate(java.util.TimerTask, long, long):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: RETURN  (r6 I:java.util.Timer) \l}"];
MethodNode[shape=record,label="{private static final java.util.Timer kotlin.concurrent.TimersKt.fixedRateTimer((r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.jvm.functions.Function1\<? super java.util.TimerTask, kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ZJJ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/util\/TimerTask;, Lkotlin\/Unit;, \>;), Ljava\/util\/Timer;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

