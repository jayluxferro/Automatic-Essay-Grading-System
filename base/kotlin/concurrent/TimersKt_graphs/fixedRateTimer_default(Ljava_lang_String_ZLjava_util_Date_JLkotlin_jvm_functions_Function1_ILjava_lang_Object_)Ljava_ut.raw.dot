digraph "CFG forkotlin.concurrent.TimersKt.fixedRateTimer$default(Ljava\/lang\/String;ZLjava\/util\/Date;JLkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Ljava\/util\/Timer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r0 I:java.util.Timer) = (r0 I:java.lang.String), (r1 I:boolean) kotlin.concurrent.TimersKt.timer(java.lang.String, boolean):java.util.Timer type: STATIC \l0x0010: NEW_INSTANCE  (r1 I:kotlin.concurrent.TimersKt$timerTask$1) =  kotlin.concurrent.TimersKt$timerTask$1 \l0x0012: INVOKE  \l  (r1 I:kotlin.concurrent.TimersKt$timerTask$1)\l  (r5 I:kotlin.jvm.functions.Function1)\l kotlin.concurrent.TimersKt$timerTask$1.\<init\>(kotlin.jvm.functions.Function1):void type: DIRECT \l0x0015: CHECK_CAST  (r1 I:java.util.TimerTask) = (java.util.TimerTask) (r1 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  \l  (r0 I:java.util.Timer)\l  (r1 I:java.util.TimerTask)\l  (r2 I:java.util.Date)\l  (r3 I:long)\l java.util.Timer.scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: RETURN  (r0 I:java.util.Timer) \l}"];
MethodNode[shape=record,label="{static \/* bridge *\/ \/* synthetic *\/ java.util.Timer kotlin.concurrent.TimersKt.fixedRateTimer$default((r0 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.util.Date A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

