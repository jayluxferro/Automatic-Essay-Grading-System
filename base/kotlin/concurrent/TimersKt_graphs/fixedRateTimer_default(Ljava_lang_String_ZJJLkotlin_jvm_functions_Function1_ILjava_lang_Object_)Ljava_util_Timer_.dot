digraph "CFG forkotlin.concurrent.TimersKt.fixedRateTimer$default(Ljava\/lang\/String;ZJJLkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Ljava\/util\/Timer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r13 & 1) == 0) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.lang.String r6 = null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|PHI: r6 \l  PHI: (r6v1 java.lang.String) = (r6v0 java.lang.String), (r6v4 java.lang.String) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if ((r13 & 2) == 0) goto L_0x000c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|r7 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|PHI: r7 \l  PHI: (r7v1 boolean) = (r7v0 boolean), (r7v3 boolean) binds: [B:4:0x0009, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if ((r13 & 4) == 0) goto L_0x0012\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|r8 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|PHI: r8 \l  PHI: (r8v1 long) = (r8v0 long), (r8v2 long) binds: [B:7:0x000e, B:8:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|java.util.Timer r6 = timer(r6, r7)\ljava.util.TimerTask r1 = new kotlin.concurrent.TimersKt$timerTask$1(r12)\lr0 = r6\lr0.scheduleAtFixedRate(r1, r8, r10)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|RETURN\l|return r6\l}"];
MethodNode[shape=record,label="{static \/* bridge *\/ \/* synthetic *\/ java.util.Timer kotlin.concurrent.TimersKt.fixedRateTimer$default((r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

