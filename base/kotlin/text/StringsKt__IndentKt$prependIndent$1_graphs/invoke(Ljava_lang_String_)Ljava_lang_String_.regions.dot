digraph "CFG forkotlin.text.StringsKt__IndentKt$prependIndent$1.invoke(Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_876317830 {
label = "R(2:0|(2:5|6)(1:(1:8)(1:7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"it\")\l}"];
subgraph cluster_IfRegion_1982341549 {
label = "IF [B:1:0x000c] THEN: R(2:5|6) ELSE: R(1:(1:8)(1:7))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (kotlin.text.StringsKt.isBlank(r3) != true) goto L_0x001d\l}"];
subgraph cluster_Region_634854126 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2.$indent + r3\l}"];
}
subgraph cluster_Region_381569295 {
label = "R(1:(1:8)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2114562274 {
label = "IF [B:3:0x0018] THEN: R(1:8) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0018|if (r3.length() \< r2.$indent.length()) goto L_0x001a\l}"];
subgraph cluster_Region_1234951111 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return r2.$indent\l}"];
}
subgraph cluster_Region_1418115184 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000e}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001a}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.text.StringsKt__IndentKt$prependIndent$1.invoke((r2v0 'this' kotlin.text.StringsKt__IndentKt$prependIndent$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_5 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_8;
}

