digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigDecimalOrNull(Ljava\/lang\/String;Ljava\/math\/MathContext;)Ljava\/math\/BigDecimal;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"mathContext\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|SYNTHETIC\lSplitter:B:1:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x000b\l|0x000b: SGET  (r1 I:kotlin.text.Regex) =  kotlin.text.ScreenFloatValueRegEx.value kotlin.text.Regex A[Catch:\{ NumberFormatException \-\> 0x001c \}, TRY_ENTER]\l0x000d: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ NumberFormatException \-\> 0x001c \}]\l0x000e: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ NumberFormatException \-\> 0x001c \}]\l0x0010: INVOKE  (r1 I:boolean) = (r1 I:kotlin.text.Regex), (r2 I:java.lang.CharSequence) kotlin.text.Regex.matches(java.lang.CharSequence):boolean type: VIRTUAL A[Catch:\{ NumberFormatException \-\> 0x001c \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c A[Catch:\{ NumberFormatException \-\> 0x001c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: NEW_INSTANCE  (r1 I:java.math.BigDecimal) =  java.math.BigDecimal A[Catch:\{ NumberFormatException \-\> 0x001c \}]\l0x0018: INVOKE  \l  (r1 I:java.math.BigDecimal)\l  (r3 I:java.lang.String)\l  (r4 I:java.math.MathContext)\l java.math.BigDecimal.\<init\>(java.lang.String, java.math.MathContext):void type: DIRECT A[Catch:\{ NumberFormatException \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN  (r0 I:java.math.BigDecimal) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lExcHandler: NumberFormatException null\lSplitter:B:1:0x000b\l}"];
MethodNode[shape=record,label="{public static final java.math.BigDecimal kotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigDecimalOrNull((r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.math.MathContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_6;
}

