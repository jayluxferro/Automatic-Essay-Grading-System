digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigIntegerOrNull(Ljava\/lang\/String;I)Ljava\/math\/BigInteger;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r6 I:int) kotlin.text.CharsKt.checkRadix(int):int type: STATIC \l0x0008: INVOKE  (r0 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x0026, 0x001b] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r3 I:char) = (r5 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0015: CONST  (r4 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: INVOKE  (r0 I:char) = (r5 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001f: INVOKE  (r0 I:int) = (r0 I:char), (r6 I:int) kotlin.text.CharsKt.digitOf(char, int):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r1 I:java.math.BigInteger) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: RETURN  (r1 I:java.math.BigInteger) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: INVOKE  (r3 I:char) = (r5 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x002d: INVOKE  (r3 I:int) = (r3 I:char), (r6 I:int) kotlin.text.CharsKt.digitOf(char, int):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: RETURN  (r1 I:java.math.BigInteger) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:java.math.BigInteger) =  java.math.BigInteger \l0x0039: INVOKE  (r6 I:int) = (r6 I:int) kotlin.text.CharsKt.checkRadix(int):int type: STATIC \l0x003d: INVOKE  \l  (r0 I:java.math.BigInteger)\l  (r5 I:java.lang.String)\l  (r6 I:int)\l java.math.BigInteger.\<init\>(java.lang.String, int):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: RETURN  (r0 I:java.math.BigInteger) \l}"];
MethodNode[shape=record,label="{public static final java.math.BigInteger kotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigIntegerOrNull((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

