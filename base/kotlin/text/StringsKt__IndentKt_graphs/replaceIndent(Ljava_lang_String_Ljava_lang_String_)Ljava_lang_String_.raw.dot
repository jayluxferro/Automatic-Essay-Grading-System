digraph "CFG forkotlin.text.StringsKt__IndentKt.replaceIndent(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"$receiver\" \l0x0004: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"newIndent\" \l0x0009: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r2 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000f: CHECK_CAST  (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:java.util.List) = (r1 I:java.lang.CharSequence) kotlin.text.StringsKt.lines(java.lang.CharSequence):java.util.List type: STATIC \l0x0015: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0016: CHECK_CAST  (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:?[OBJECT, ARRAY]) \l0x0018: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x001a: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x001d: CHECK_CAST  (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r5 I:java.util.Iterator) = (r3 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|0x0023: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|0x0027: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002d: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x002e: CHECK_CAST  (r7 I:java.lang.String) = (java.lang.String) (r7 I:?[OBJECT, ARRAY]) \l0x0030: CHECK_CAST  (r7 I:java.lang.CharSequence) = (java.lang.CharSequence) (r7 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  (r7 I:boolean) = (r7 I:java.lang.CharSequence) kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean type: STATIC \l0x0036: ARITH  (r7 I:?[int, boolean, short, byte, char]) = (r7 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0038|0x0038: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: INVOKE  (r4 I:java.util.Collection), (r6 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l0x0040: CHECK_CAST  (r4 I:java.lang.Iterable) = (java.lang.Iterable) (r4 I:?[OBJECT, ARRAY]) \l0x0042: NEW_INSTANCE  (r5 I:java.util.ArrayList) =  java.util.ArrayList \l0x0044: CONST  (r6 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0046: INVOKE  (r6 I:int) = (r4 I:java.lang.Iterable), (r6 I:int) kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int type: STATIC \l0x004a: INVOKE  (r5 I:java.util.ArrayList), (r6 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x004d: CHECK_CAST  (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0053|0x0053: INVOKE  (r6 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0057|0x0057: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x006b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0059|0x0059: INVOKE  (r6 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x005d: CHECK_CAST  (r6 I:java.lang.String) = (java.lang.String) (r6 I:?[OBJECT, ARRAY]) \l0x005f: INVOKE  (r6 I:int) = (r6 I:java.lang.String) kotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt(java.lang.String):int type: STATIC \l0x0063: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0067: INVOKE  (r5 I:java.util.Collection), (r6 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x006b|0x006b: CHECK_CAST  (r5 I:java.util.List) = (java.util.List) (r5 I:?[OBJECT, ARRAY]) \l0x006d: CHECK_CAST  (r5 I:java.lang.Iterable) = (java.lang.Iterable) (r5 I:?[OBJECT, ARRAY]) \l0x006f: INVOKE  (r4 I:java.lang.Comparable) = (r5 I:java.lang.Iterable) kotlin.collections.CollectionsKt.min(java.lang.Iterable):java.lang.Comparable type: STATIC \l0x0073: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) \l0x0075: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0076|0x0076: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x007d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0078|0x0078: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x007d|0x007d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x007e|0x007e: INVOKE  (r0 I:int) = (r17 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0082: INVOKE  (r6 I:int) = (r18 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0086: INVOKE  (r7 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x008a: ARITH  (r6 I:int) = (r6 I:int) * (r7 I:int) \l0x008c: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int) \l0x008d: INVOKE  (r2 I:kotlin.jvm.functions.Function1) = (r18 I:java.lang.String) kotlin.text.StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt(java.lang.String):kotlin.jvm.functions.Function1 type: STATIC \l0x0091: INVOKE  (r1 I:int) = (r1 I:java.util.List) kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int type: STATIC \l0x0095: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x0097: INVOKE  (r6 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x009a: CHECK_CAST  (r6 I:java.util.Collection) = (java.util.Collection) (r6 I:?[OBJECT, ARRAY]) \l0x009c: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a0|0x00a0: INVOKE  (r7 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a4|0x00a4: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00d3 \l}"];
Node_17 [shape=record,label="{17\:\ 0x00a6|0x00a6: INVOKE  (r7 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00aa: ARITH  (r8 I:int) = (r5 I:int) + (1 int) \l0x00ac: CHECK_CAST  (r7 I:java.lang.String) = (java.lang.String) (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x00ae|0x00ae: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x00b2 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00b0|0x00b0: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00bd \l}"];
Node_20 [shape=record,label="{20\:\ 0x00b2|0x00b2: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x00b3: CHECK_CAST  (r5 I:java.lang.CharSequence) = (java.lang.CharSequence) (r5 I:?[OBJECT, ARRAY]) \l0x00b5: INVOKE  (r5 I:boolean) = (r5 I:java.lang.CharSequence) kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x00b9|0x00b9: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00bd \l}"];
Node_22 [shape=record,label="{22\:\ 0x00bb|0x00bb: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x00bd|0x00bd: INVOKE  (r5 I:java.lang.String) = (r7 I:java.lang.String), (r4 I:int) kotlin.text.StringsKt.drop(java.lang.String, int):java.lang.String type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c1|0x00c1: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00cc \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c3|0x00c3: INVOKE  (r5 I:java.lang.Object) = \l  (r2 I:kotlin.jvm.functions.Function1)\l  (r5 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x00c7: CHECK_CAST  (r5 I:java.lang.String) = (java.lang.String) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00c9|0x00c9: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00cc \l}"];
Node_27 [shape=record,label="{27\:\ 0x00cb|0x00cb: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00cc|0x00cc: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00d1 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ce|0x00ce: INVOKE  (r6 I:java.util.Collection), (r7 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_30 [shape=record,label="{30\:\ 0x00d1|0x00d1: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d3|0x00d3: CHECK_CAST  (r6 I:java.util.List) = (java.util.List) (r6 I:?[OBJECT, ARRAY]) \l0x00d5: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x00d6: CHECK_CAST  (r7 I:java.lang.Iterable) = (java.lang.Iterable) (r7 I:?[OBJECT, ARRAY]) \l0x00d8: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00da: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x00dd: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x00de: CHECK_CAST  (r8 I:java.lang.Appendable) = (java.lang.Appendable) (r8 I:?[OBJECT, ARRAY]) \l0x00e0: CONST_STR  (r0 I:java.lang.String) =  \"\l\" \l0x00e2: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00e3: CHECK_CAST  (r9 I:java.lang.CharSequence) = (java.lang.CharSequence) (r9 I:?[OBJECT, ARRAY]) \l0x00e5: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e6: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e7: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e8: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00e9: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ea: CONST  (r15 I:?[int, float, short, byte, char]) = \l  (124(0x7c, float:1.74E\-43) ?[int, float, short, byte, char])\l \l0x00ec: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ee: INVOKE  (r0 I:java.lang.Appendable) = \l  (r7 I:java.lang.Iterable)\l  (r8 I:java.lang.Appendable)\l  (r9 I:java.lang.CharSequence)\l  (r10 I:java.lang.CharSequence)\l  (r11 I:java.lang.CharSequence)\l  (r12 I:int)\l  (r13 I:java.lang.CharSequence)\l  (r14 I:kotlin.jvm.functions.Function1)\l  (r15 I:int)\l  (r16 I:java.lang.Object)\l kotlin.collections.CollectionsKt.joinTo$default(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable type: STATIC \l0x00f2: CHECK_CAST  (r0 I:java.lang.StringBuilder) = (java.lang.StringBuilder) (r0 I:?[OBJECT, ARRAY]) \l0x00f4: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00f8: CONST_STR  (r1 I:java.lang.String) =  \"mapIndexedNotNull \{ inde…\"n\")\l        .toString()\" \l0x00fa: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x00fd|0x00fd: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__IndentKt.replaceIndent((r17 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_31;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_15;
Node_31 -> Node_32;
}

