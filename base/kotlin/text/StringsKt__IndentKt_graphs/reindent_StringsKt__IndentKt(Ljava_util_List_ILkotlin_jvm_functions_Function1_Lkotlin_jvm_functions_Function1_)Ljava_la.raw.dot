digraph "CFG forkotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt(Ljava\/util\/List;ILkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r12 I:java.util.List) kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int type: STATIC \l0x0004: CHECK_CAST  (r12 I:java.lang.Iterable) = (java.lang.Iterable) (r12 I:?[OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0008: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000b: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l0x000d: INVOKE  (r12 I:java.util.Iterator) = (r12 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: INVOKE  (r3 I:boolean) = (r12 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0047 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: INVOKE  (r3 I:java.lang.Object) = (r12 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001c: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x001e: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0025: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  (r2 I:boolean) = (r2 I:java.lang.CharSequence) kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: INVOKE  (r2 I:java.lang.Object) = \l  (r15 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|0x0037: INVOKE  (r2 I:java.lang.Object) = \l  (r14 I:kotlin.jvm.functions.Function1)\l  (r2 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x003b: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|0x003f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0045 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: INVOKE  (r1 I:java.util.Collection), (r3 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l0x0049: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x004a: CHECK_CAST  (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:?[OBJECT, ARRAY]) \l0x004c: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004e: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0051: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0052: CHECK_CAST  (r3 I:java.lang.Appendable) = (java.lang.Appendable) (r3 I:?[OBJECT, ARRAY]) \l0x0054: CONST_STR  (r12 I:java.lang.String) =  \"\l\" \l0x0056: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0057: CHECK_CAST  (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:?[OBJECT, ARRAY]) \l0x0059: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005b: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005c: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005e: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (124(0x7c, float:1.74E\-43) ?[int, float, short, byte, char])\l \l0x0060: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0061: INVOKE  (r12 I:java.lang.Appendable) = \l  (r2 I:java.lang.Iterable)\l  (r3 I:java.lang.Appendable)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:java.lang.CharSequence)\l  (r7 I:int)\l  (r8 I:java.lang.CharSequence)\l  (r9 I:kotlin.jvm.functions.Function1)\l  (r10 I:int)\l  (r11 I:java.lang.Object)\l kotlin.collections.CollectionsKt.joinTo$default(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable type: STATIC \l0x0065: CHECK_CAST  (r12 I:java.lang.StringBuilder) = (java.lang.StringBuilder) (r12 I:?[OBJECT, ARRAY]) \l0x0067: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006b: CONST_STR  (r13 I:java.lang.String) =  \"mapIndexedNotNull \{ indeâ€¦\"n\")\l        .toString()\" \l0x006d: INVOKE  (r12 I:java.lang.Object), (r13 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|0x0070: RETURN  (r12 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt((r12 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;I, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_18;
}

