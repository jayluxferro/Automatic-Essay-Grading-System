digraph "CFG forkotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt(Ljava\/util\/List;ILkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = kotlin.collections.CollectionsKt.getLastIndex(r12)\ljava.util.Collection r1 = new java.util.ArrayList()\ljava.util.Iterator r12 = r12.iterator()\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v4 int) binds: [B:0:0x0000, B:16:0x0045] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:16:0x0045\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|if (r12.hasNext() == false) goto L_0x0047\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|int r4 = r2 + 1\ljava.lang.String r3 = (java.lang.String) r12.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|if (r2 == 0) goto L_0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|if (r2 != r0) goto L_0x002f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024}"];
Node_7 [shape=record,label="{7\:\ 0x002b|if (kotlin.text.StringsKt.isBlank(r3) == false) goto L_0x002f\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|r3 = null\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|java.lang.String r2 = r15.invoke(r3)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|if (r2 == null) goto L_0x0040\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|java.lang.String r2 = r14.invoke(r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|if (r2 == null) goto L_0x0040\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|r3 = r2\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|PHI: r3 \l  PHI: (r3v5 java.lang.String) = (r3v4 java.lang.String), (r3v4 java.lang.String), (r3v6 java.lang.String), (r3v7 java.lang.String) binds: [B:10:0x0035, B:12:0x003d, B:13:0x003f, B:8:0x002d] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == null) goto L_0x0045\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|r1.add(r3)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|LOOP_END\lLOOP:0: B:1:0x0012\-\>B:16:0x0045\l|r2 = r4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|java.lang.String r12 = ((java.lang.StringBuilder) kotlin.collections.CollectionsKt.joinTo$default((java.util.List) r1, new java.lang.StringBuilder(r13), \"n\", (java.lang.CharSequence) null, (java.lang.CharSequence) null, 0, (java.lang.CharSequence) null, (kotlin.jvm.functions.Function1) null, 124, (java.lang.Object) null)).toString()\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r12, \"mapIndexedNotNull \{ indeâ€¦\"n\")n        .toString()\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|RETURN\l|return r12\l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt((r12v0 java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;I, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_20;
Node_16 -> Node_1;
Node_17 -> Node_18;
Node_19 -> Node_17;
Node_20 -> Node_16;
Node_21 -> Node_16;
}

