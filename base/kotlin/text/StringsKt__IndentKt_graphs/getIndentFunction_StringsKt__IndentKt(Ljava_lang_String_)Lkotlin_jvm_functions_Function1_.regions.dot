digraph "CFG forkotlin.text.StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt(Ljava\/lang\/String;)Lkotlin\/jvm\/functions\/Function1;" {
subgraph cluster_Region_723269664 {
label = "R(1:(2:(1:8)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_997223067 {
label = "R(2:(1:8)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1132922915 {
label = "IF [B:4:0x000c] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r0 \l  PHI: (r0v3 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r1.length() == 0) == true) goto L_0x000e\l}"];
subgraph cluster_Region_413186355 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.text.StringsKt__IndentKt$getIndentFunction$1.INSTANCE\l}"];
}
}
subgraph cluster_Region_1379360575 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return new kotlin.text.StringsKt__IndentKt$getIndentFunction$2(r1)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0007}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013}"];
MethodNode[shape=record,label="{private static final kotlin.jvm.functions.Function1\<java.lang.String, java.lang.String\> kotlin.text.StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt((r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, ), Lkotlin\/jvm\/functions\/Function1\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_8;
Node_6 -> Node_7;
}

