digraph "CFG forkotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt(Ljava\/lang\/String;)I" {
subgraph cluster_Region_110176746 {
label = "R(3:0|(1:(2:6|1)(1:(1:9)(1:5)))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.CharSequence java.lang.CharSequence r0 = r5\lint int r1 = r0.length()\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1789641552 {
label = "LOOP:0: (1:(2:6|1)(1:(1:9)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_295045174 {
label = "R(1:(2:6|1)(1:(1:9)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_647158774 {
label = "IF [B:2:0x0009] THEN: R(2:6|1) ELSE: R(1:(1:9)(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r2 \>= r1) goto L_0x001b\l}"];
subgraph cluster_Region_976440380 {
label = "R(2:6|1)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001b|EDGE_INSN: B:6:0x001b\-\>B:7:0x001c ?: BREAK  \l|r2 = \-1\l}"];
Node_InsnContainer_216154646 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_1690577426 {
label = "R(1:(1:9)(1:5)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1664731676 {
label = "IF [B:4:0x0015] THEN: R(1:9) ELSE: R(1:5) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|if ((!kotlin.text.CharsKt.isWhitespace(r0.charAt(r2))) == true) goto L_0x001c\l}"];
subgraph cluster_Region_1354876057 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001c|SYNTHETIC\lEDGE_INSN: B:9:0x001c\-\>B:7:0x001c ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_895675625 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|LOOP_END\lLOOP:0: B:1:0x0008\-\>B:5:0x0018\l|r2++\l}"];
}
}
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x001c|RETURN\lEDGE_INSN: B:9:0x001c\-\>B:7:0x001c ?: BREAK  \lEDGE_INSN: B:6:0x001b\-\>B:7:0x001c ?: BREAK  \lPHI: r2 \l  PHI: (r2v3 int) = (r2v2 int), (r2v1 int) binds: [B:6:0x001b, B:9:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|return r2 == \-1 ? r5.length() : r2\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0008|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v5 int) binds: [B:0:0x0000, B:5:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0008\-\>B:5:0x0018\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001b|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_6 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_9 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_8;
Node_7 -> Node_12;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_8 -> Node_11;
Node_10 -> Node_6;
}

