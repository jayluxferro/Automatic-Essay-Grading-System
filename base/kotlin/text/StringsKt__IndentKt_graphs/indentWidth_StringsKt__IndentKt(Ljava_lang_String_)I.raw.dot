digraph "CFG forkotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0001: CHECK_CAST  (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:?[OBJECT, ARRAY]) \l0x0003: INVOKE  (r1 I:int) = (r0 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r4 I:char) = (r0 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x000f: INVOKE  (r4 I:boolean) = (r4 I:char) kotlin.text.CharsKt.isWhitespace(char):boolean type: STATIC \l0x0013: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: INVOKE  (r2 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt((r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
}

