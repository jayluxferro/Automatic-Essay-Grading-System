digraph "CFG forkotlin.text.Charsets.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:kotlin.text.Charsets) =  kotlin.text.Charsets \l0x0002: INVOKE  (r0 I:kotlin.text.Charsets) kotlin.text.Charsets.\<init\>():void type: DIRECT \l0x0005: SPUT  (r0 I:kotlin.text.Charsets) kotlin.text.Charsets.INSTANCE kotlin.text.Charsets \l0x0007: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-8\" \l0x0009: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"UTF\-8\")\" \l0x000f: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0012: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-16\" \l0x0016: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x001a: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"UTF\-16\")\" \l0x001c: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x001f: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.UTF_16 java.nio.charset.Charset \l0x0021: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-16BE\" \l0x0023: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x0027: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"UTF\-16BE\")\" \l0x0029: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x002c: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.UTF_16BE java.nio.charset.Charset \l0x002e: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-16LE\" \l0x0030: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x0034: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"UTF\-16LE\")\" \l0x0036: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0039: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.UTF_16LE java.nio.charset.Charset \l0x003b: CONST_STR  (r0 I:java.lang.String) =  \"US\-ASCII\" \l0x003d: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x0041: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"US\-ASCII\")\" \l0x0043: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0046: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.US_ASCII java.nio.charset.Charset \l0x0048: CONST_STR  (r0 I:java.lang.String) =  \"ISO\-8859\-1\" \l0x004a: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.lang.String) java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset type: STATIC \l0x004e: CONST_STR  (r1 I:java.lang.String) =  \"Charset.forName(\"ISO\-8859\-1\")\" \l0x0050: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0053: SPUT  (r0 I:java.nio.charset.Charset) kotlin.text.Charsets.ISO_8859_1 java.nio.charset.Charset \l}"];
Node_1 [shape=record,label="{1\:\ 0x0055|0x0055: RETURN   \l}"];
MethodNode[shape=record,label="{static void kotlin.text.Charsets.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

