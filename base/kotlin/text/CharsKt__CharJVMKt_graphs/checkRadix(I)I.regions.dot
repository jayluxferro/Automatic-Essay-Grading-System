digraph "CFG forkotlin.text.CharsKt__CharJVMKt.checkRadix(I)I" {
subgraph cluster_Region_1265692483 {
label = "R(1:(2:(1:3)|(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_832076904 {
label = "R(2:(1:3)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_701678792 {
label = "IF [B:1:0x0003, B:2:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (2 \<= r5) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|ADDED_TO_REGION\l|if (36 \>= r5) goto L_0x0007\l}"];
subgraph cluster_Region_152374630 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|return r5\l}"];
}
}
subgraph cluster_Region_1171513840 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x002d|throw new java.lang.IllegalArgumentException(\"radix \" + r5 + \" was not in valid range \" + new kotlin.ranges.IntRange(2, 36))\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.CharsKt__CharJVMKt.checkRadix((r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
}

