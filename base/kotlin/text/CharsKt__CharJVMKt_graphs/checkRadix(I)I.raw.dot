digraph "CFG forkotlin.text.CharsKt__CharJVMKt.checkRadix(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = (36 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r5 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000a: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000c: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000f: CONST_STR  (r4 I:java.lang.String) =  \"radix \" \l0x0011: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0014: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0017: CONST_STR  (r5 I:java.lang.String) =  \" was not in valid range \" \l0x0019: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: NEW_INSTANCE  (r5 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x001e: INVOKE  (r5 I:kotlin.ranges.IntRange), (r0 I:int), (r1 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l0x0021: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0028: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x002b: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.CharsKt__CharJVMKt.checkRadix((r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
}

