digraph "CFG forkotlin.text.CharsKt__CharJVMKt.checkRadix(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (2 \> r5) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (36 \< r5) goto L_0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|return r5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"radix \")\lr3.append(r5)\lr3.append(\" was not in valid range \")\lr3.append(new kotlin.ranges.IntRange(2, 36))\l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|throw new java.lang.IllegalArgumentException(r3.toString())\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.CharsKt__CharJVMKt.checkRadix((r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
}

