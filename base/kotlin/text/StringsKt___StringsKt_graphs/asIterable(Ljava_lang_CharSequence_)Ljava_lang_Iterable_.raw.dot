digraph "CFG forkotlin.text.StringsKt___StringsKt.asIterable(Ljava\/lang\/CharSequence;)Ljava\/lang\/Iterable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: INVOKE  (r1 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l0x0018: CHECK_CAST  (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: RETURN  (r1 I:java.lang.Iterable\<java.lang.Character\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:kotlin.text.StringsKt___StringsKt$asIterable$$inlined$Iterable$1) =  kotlin.text.StringsKt___StringsKt$asIterable$$inlined$Iterable$1 \l0x001d: INVOKE  \l  (r0 I:kotlin.text.StringsKt___StringsKt$asIterable$$inlined$Iterable$1)\l  (r1 I:java.lang.CharSequence)\l kotlin.text.StringsKt___StringsKt$asIterable$$inlined$Iterable$1.\<init\>(java.lang.CharSequence):void type: DIRECT \l0x0020: CHECK_CAST  (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: RETURN  (r0 I:java.lang.Iterable\<java.lang.Character\>) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Iterable\<java.lang.Character\> kotlin.text.StringsKt___StringsKt.asIterable((r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, ), Ljava\/lang\/Iterable\<, Ljava\/lang\/Character;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

