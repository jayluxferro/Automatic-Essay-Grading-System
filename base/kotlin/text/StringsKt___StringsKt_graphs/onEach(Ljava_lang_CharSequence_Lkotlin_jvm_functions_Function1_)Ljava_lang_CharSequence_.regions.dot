digraph "CFG forkotlin.text.StringsKt___StringsKt.onEach(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_548061006 {
label = "R(3:0|(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"action\")\lint r0 = 0\l}"];
subgraph cluster_LoopRegion_150432838 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r0 \< r2.length()) goto L_0x0011\l}"];
subgraph cluster_Region_1553097961 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0011|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:3:0x0011\l|r3.invoke(java.lang.Character.valueOf(r2.charAt(r0)))\lr0++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x001f|RETURN\l|return r2\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000b|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:3:0x0011] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:3:0x0011\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final S kotlin.text.StringsKt___StringsKt.onEach((r2v0 S A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<S::, Ljava\/lang\/CharSequence;, \>(TS;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Lkotlin\/Unit;, \>;)TS;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_1;
Node_1 -> Node_2;
Node_5 -> Node_4;
}

