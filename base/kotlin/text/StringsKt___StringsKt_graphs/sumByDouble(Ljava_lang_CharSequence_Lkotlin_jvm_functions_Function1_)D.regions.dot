digraph "CFG forkotlin.text.StringsKt___StringsKt.sumByDouble(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)D" {
subgraph cluster_Region_1792590619 {
label = "R(3:0|(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"selector\")\ldouble r0 = 0.0d\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_544467802 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0011|if (r2 \< r5.length()) goto L_0x0013\l}"];
subgraph cluster_Region_2110688936 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0013|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:3:0x0013\l|r0 += r6.invoke(java.lang.Character.valueOf(r5.charAt(r2))).doubleValue()\lr2++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0029|RETURN\l|return r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000d|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v3 double) = (r0v2 double), (r0v4 double) binds: [B:0:0x0000, B:3:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:3:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:3:0x0013\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final double kotlin.text.StringsKt___StringsKt.sumByDouble((r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Double\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Double;, \>;)D]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_1;
Node_1 -> Node_2;
Node_5 -> Node_4;
}

