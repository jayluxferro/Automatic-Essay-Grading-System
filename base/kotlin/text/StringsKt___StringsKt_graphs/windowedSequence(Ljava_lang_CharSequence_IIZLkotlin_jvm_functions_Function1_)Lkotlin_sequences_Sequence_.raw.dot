digraph "CFG forkotlin.text.StringsKt___StringsKt.windowedSequence(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r2 I:int), (r3 I:int) kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r4 I:kotlin.ranges.IntRange) = (r1 I:java.lang.CharSequence) kotlin.text.StringsKt.getIndices(java.lang.CharSequence):kotlin.ranges.IntRange type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0019: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001c: INVOKE  (r4 I:kotlin.ranges.IntRange) = (r4 I:int), (r0 I:int) kotlin.ranges.RangesKt.until(int, int):kotlin.ranges.IntRange type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: CHECK_CAST  (r4 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r4 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  (r3 I:kotlin.ranges.IntProgression) = (r4 I:kotlin.ranges.IntProgression), (r3 I:int) kotlin.ranges.RangesKt.step(kotlin.ranges.IntProgression, int):kotlin.ranges.IntProgression type: STATIC \l0x0026: CHECK_CAST  (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r3 I:kotlin.sequences.Sequence) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.asSequence(java.lang.Iterable):kotlin.sequences.Sequence type: STATIC \l0x002c: NEW_INSTANCE  (r4 I:kotlin.text.StringsKt___StringsKt$windowedSequence$2) =  kotlin.text.StringsKt___StringsKt$windowedSequence$2 \l0x002e: INVOKE  \l  (r4 I:kotlin.text.StringsKt___StringsKt$windowedSequence$2)\l  (r1 I:java.lang.CharSequence)\l  (r5 I:kotlin.jvm.functions.Function1)\l  (r2 I:int)\l kotlin.text.StringsKt___StringsKt$windowedSequence$2.\<init\>(java.lang.CharSequence, kotlin.jvm.functions.Function1, int):void type: DIRECT \l0x0031: CHECK_CAST  (r4 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r4 I:?[OBJECT, ARRAY]) \l0x0033: INVOKE  (r1 I:kotlin.sequences.Sequence) = \l  (r3 I:kotlin.sequences.Sequence)\l  (r4 I:kotlin.jvm.functions.Function1)\l kotlin.sequences.SequencesKt.map(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|0x0037: RETURN  (r1 I:kotlin.sequences.Sequence\<R\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<R\> kotlin.text.StringsKt___StringsKt.windowedSequence((r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/CharSequence;, IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/CharSequence;, +TR;\>;), Lkotlin\/sequences\/Sequence\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

