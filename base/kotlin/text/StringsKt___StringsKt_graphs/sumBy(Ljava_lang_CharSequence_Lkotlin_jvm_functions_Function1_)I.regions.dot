digraph "CFG forkotlin.text.StringsKt___StringsKt.sumBy(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)I" {
subgraph cluster_Region_1688472072 {
label = "R(3:0|(1:3)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"selector\")\lint r0 = 0\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_798486060 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0010|if (r0 \< r3.length()) goto L_0x0012\l}"];
subgraph cluster_Region_43739150 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0012|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:3:0x0012\l|r1 += r4.invoke(java.lang.Character.valueOf(r3.charAt(r0))).intValue()\lr0++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0028|RETURN\l|return r1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000c|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:3:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:3:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:3:0x0012\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0028|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt___StringsKt.sumBy((r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Integer;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_1;
Node_1 -> Node_2;
Node_5 -> Node_4;
}

