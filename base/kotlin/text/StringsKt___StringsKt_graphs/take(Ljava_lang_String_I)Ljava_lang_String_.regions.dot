digraph "CFG forkotlin.text.StringsKt___StringsKt.take(Ljava\/lang\/String;I)Ljava\/lang\/String;" {
subgraph cluster_Region_1374339145 {
label = "R(2:0|(2:(2:5|6)|(2:7|8)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_Region_1075432993 {
label = "R(2:(2:5|6)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_184239854 {
label = "IF [B:4:0x000b] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r1 \l  PHI: (r1v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 \>= 0) == true) goto L_0x000d\l}"];
subgraph cluster_Region_2015067660 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d|java.lang.String java.lang.String r2 = r2.substring(0, kotlin.ranges.RangesKt.coerceAtMost(r3, r2.length()))\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r2, \"(this as java.lang.Strinâ€¦ing(startIndex, endIndex)\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1120523837 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001f}"];
Node_8 [shape=record,label="{8\:\ 0x0040|throw new java.lang.IllegalArgumentException((\"Requested character count \" + r3 + \" is less than zero.\").toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt___StringsKt.take((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

