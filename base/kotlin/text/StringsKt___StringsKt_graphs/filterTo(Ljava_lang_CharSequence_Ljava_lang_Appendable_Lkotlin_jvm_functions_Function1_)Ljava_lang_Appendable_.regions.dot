digraph "CFG forkotlin.text.StringsKt___StringsKt.filterTo(Ljava\/lang\/CharSequence;Ljava\/lang\/Appendable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
subgraph cluster_Region_1529504973 {
label = "R(3:0|(3:2|(1:4)(0)|5)|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, com.google.firebase.analytics.FirebaseAnalytics.Param.DESTINATION)\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"predicate\")\lint int r0 = r4.length()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_769598417 {
label = "LOOP:0: (3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0014|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:5:0x002d\l|if (r1 \< r0) goto L_0x0016\l}"];
subgraph cluster_Region_806588467 {
label = "R(3:2|(1:4)(0)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|char char r2 = r4.charAt(r1)\l}"];
subgraph cluster_IfRegion_727917463 {
label = "IF [B:3:0x0028] THEN: R(1:4) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0028|if (r6.invoke(java.lang.Character.valueOf(r2)).booleanValue() == true) goto L_0x002a\l}"];
subgraph cluster_Region_602351162 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x002a|r5.append(r2)\l}"];
}
subgraph cluster_Region_738803179 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_5 [shape=record,label="{5\:\ 0x002d|LOOP_END\lLOOP:0: B:1:0x0014\-\>B:5:0x002d\l|r1++\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0030|RETURN\l|return r5\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x0030|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002d|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final C kotlin.text.StringsKt___StringsKt.filterTo((r4v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 C A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<C::, Ljava\/lang\/Appendable;, \>(, Ljava\/lang\/CharSequence;, TC;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)TC;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

