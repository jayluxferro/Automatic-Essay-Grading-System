digraph "CFG forkotlin.text.StringsKt___StringsKt.associate(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"transform\")\ljava.util.Map r1 = new java.util.LinkedHashMap\<\>(kotlin.ranges.RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity(r4.length()), 16))\lr0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|LOOP_START\lPHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v7 int) binds: [B:0:0x0000, B:3:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0020\-\>B:3:0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x0024|if (r0 \>= r4.length()) goto L_0x0042\l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|LOOP_END\lLOOP:0: B:1:0x0020\-\>B:3:0x0026\l|kotlin.Pair r2 = (kotlin.Pair) r5.invoke(java.lang.Character.valueOf(r4.charAt(r0)))\lr1.put(r2.getFirst(), r2.getSecond())\lint r0 = r0 + 1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0042|RETURN\l|return r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.text.StringsKt___StringsKt.associate((r4v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends kotlin.Pair\<? extends K, ? extends V\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, +, Lkotlin\/Pair\<, +TK;+TV;\>;\>;), Ljava\/util\/Map\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

