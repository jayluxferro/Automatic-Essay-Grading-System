digraph "CFG forkotlin.text.StringsKt___StringsKt.single(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"predicate\")\lr1 = 0\lr2 = null\lr0 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|LOOP_START\lPHI: r0 r1 r2 \l  PHI: (r0v5 boolean) = (r0v4 boolean), (r0v6 boolean) binds: [B:0:0x0000, B:9:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:9:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 java.lang.Character) = (r2v0 java.lang.Character), (r2v2 java.lang.Character) binds: [B:0:0x0000, B:9:0x003e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:9:0x003e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|if (r1 \>= r5.length()) goto L_0x0041\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|char r3 = r5.charAt(r1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|if (r6.invoke(java.lang.Character.valueOf(r3)).booleanValue() == false) goto L_0x003e\l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|if (r0 != false) goto L_0x0034\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|r2 = java.lang.Character.valueOf(r3)\lr0 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034}"];
Node_8 [shape=record,label="{8\:\ 0x003d|throw new java.lang.IllegalArgumentException(\"Char sequence contains more than one matching element.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|LOOP_END\lPHI: r0 r2 \l  PHI: (r0v6 boolean) = (r0v5 boolean), (r0v8 boolean) binds: [B:20:0x003e, B:21:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 java.lang.Character) = (r2v1 java.lang.Character), (r2v4 java.lang.Character) binds: [B:20:0x003e, B:21:0x003e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:9:0x003e\l|int r1 = r1 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|if (r0 == false) goto L_0x0052\l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|if (r2 == null) goto L_0x004a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0045}"];
Node_13 [shape=record,label="{13\:\ 0x0049|RETURN\l|return r2.charValue()\l}"];
Node_14 [shape=record,label="{14\:\ 0x004a}"];
Node_15 [shape=record,label="{15\:\ 0x0051|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.Char\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0052}"];
Node_17 [shape=record,label="{17\:\ 0x005b|throw new java.util.NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x003e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.single((r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)C]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_9 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_10;
Node_19 -> Node_7;
Node_20 -> Node_9;
Node_21 -> Node_9;
}

