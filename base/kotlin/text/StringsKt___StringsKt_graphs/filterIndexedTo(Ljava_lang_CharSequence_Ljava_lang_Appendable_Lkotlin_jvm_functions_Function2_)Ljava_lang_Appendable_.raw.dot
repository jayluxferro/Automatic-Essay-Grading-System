digraph "CFG forkotlin.text.StringsKt___StringsKt.filterIndexedTo(Ljava\/lang\/CharSequence;Ljava\/lang\/Appendable;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Appendable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x000c: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r2 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r2 I:char) = (r5 I:java.lang.CharSequence), (r0 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001b: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x001d: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0021: INVOKE  (r4 I:java.lang.Character) = (r2 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0025: INVOKE  (r1 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function2)\l  (r1 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0029: CHECK_CAST  (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:?[OBJECT, ARRAY]) \l0x002b: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: INVOKE  (r6 I:java.lang.Appendable), (r2 I:char) java.lang.Appendable.append(char):java.lang.Appendable type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0036: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: RETURN  (r6 I:C) \l}"];
MethodNode[shape=record,label="{public static final C kotlin.text.StringsKt___StringsKt.filterIndexedTo((r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:C A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<C::, Ljava\/lang\/Appendable;, \>(, Ljava\/lang\/CharSequence;, TC;, Lkotlin\/jvm\/functions\/Function2\<, \-, Ljava\/lang\/Integer;, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)TC;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

