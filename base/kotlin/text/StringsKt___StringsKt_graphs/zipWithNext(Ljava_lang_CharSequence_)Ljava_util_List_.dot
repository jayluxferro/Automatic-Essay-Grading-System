digraph "CFG forkotlin.text.StringsKt___StringsKt.zipWithNext(Ljava\/lang\/CharSequence;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lint r0 = r5.length() \- 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if (r0 \>= 1) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d}"];
Node_3 [shape=record,label="{3\:\ 0x0012|java.util.ArrayList r1 = new java.util.ArrayList(r0)\lr2 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:3:0x0012, B:5:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0018\-\>B:5:0x001a\l|if (r2 \>= r0) goto L_0x0034\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|LOOP_END\lLOOP:0: B:4:0x0018\-\>B:5:0x001a\l|char r3 = r5.charAt(r2)\lint r2 = r2 + 1\lchar r4 = r5.charAt(r2)\lr1.add(kotlin.TuplesKt.m174to(java.lang.Character.valueOf(r3), java.lang.Character.valueOf(r4)))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0034}"];
Node_7 [shape=record,label="{7\:\ 0x0034|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r1\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\> kotlin.text.StringsKt___StringsKt.zipWithNext((r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, ), Ljava\/util\/List\<, Lkotlin\/Pair\<, Ljava\/lang\/Character;, Ljava\/lang\/Character;, \>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_4;
Node_6 -> Node_8;
Node_7 -> Node_6;
}

