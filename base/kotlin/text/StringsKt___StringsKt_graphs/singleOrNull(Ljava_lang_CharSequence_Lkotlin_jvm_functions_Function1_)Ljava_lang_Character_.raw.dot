digraph "CFG forkotlin.text.StringsKt___StringsKt.singleOrNull(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Character;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r1 I:java.lang.Character) = (java.lang.Character) (r1 I:?[OBJECT, ARRAY]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: INVOKE  (r4 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r2 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:9:0x0038 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001b: INVOKE  (r5 I:java.lang.Character) = (r4 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x001f: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1)\l  (r5 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0023: CHECK_CAST  (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0035 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002e \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: RETURN  (r0 I:java.lang.Character) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: INVOKE  (r1 I:java.lang.Character) = (r4 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0032: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0033: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0034: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003b \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: RETURN  (r0 I:java.lang.Character) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: RETURN  (r3 I:java.lang.Character) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.text.StringsKt___StringsKt.singleOrNull((r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;), Ljava\/lang\/Character;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
}

