digraph "CFG forkotlin.text.StringsKt___StringsKt.windowed(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
subgraph cluster_Region_47672013 {
label = "R(3:0|(3:2|(1:(2:(1:9)|(1:5)))(0)|6)|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"transform\")\lkotlin.collections.SlidingWindowKt.checkWindowSizeStep(r5, r6)\lint int r0 = r4.length()\ljava.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(((r0 + r6) \- 1) \/ r6)\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_968180620 {
label = "LOOP:0: (3:2|(1:(2:(1:9)|(1:5)))(0)|6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001c|LOOP_START\lPHI: r2 \l  PHI: (r2v4 int) = (r2v3 int), (r2v5 int) binds: [B:0:0x0000, B:6:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001c\-\>B:6:0x0025\l|if (r2 \< r0) goto L_0x001e\l}"];
subgraph cluster_Region_605659609 {
label = "R(3:2|(1:(2:(1:9)|(1:5)))(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001e|int int r3 = r2 + r5\l}"];
subgraph cluster_IfRegion_1530234443 {
label = "IF [B:3:0x0020] THEN: R(1:(2:(1:9)|(1:5))) ELSE: R(0)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0020|if (r3 \> r0) goto L_0x0022\l}"];
subgraph cluster_Region_2036184963 {
label = "R(1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_39425620 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1184654228 {
label = "IF [B:4:0x0022] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0022|if (r7 != true) goto L_0x0032\l}"];
subgraph cluster_Region_1933207091 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0032|SYNTHETIC\lEDGE_INSN: B:9:0x0032\-\>B:7:0x0032 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_488714674 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0024|r3 = r0\l}"];
}
}
}
subgraph cluster_Region_1741633144 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x0025|LOOP_END\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v4 int) binds: [B:12:0x0025, B:11:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001c\-\>B:6:0x0025\l|r1.add(r8.invoke(r4.subSequence(r2, r3)))\lr2 += r6\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0034|RETURN\l|return r1\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x0032|EDGE_INSN: B:9:0x0032\-\>B:7:0x0032 ?: BREAK  \l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0032|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0025|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0025|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.windowed((r4v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/CharSequence;, IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/CharSequence;, +TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_9 -> Node_7;
Node_5 -> Node_11;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_6;
Node_12 -> Node_6;
}

