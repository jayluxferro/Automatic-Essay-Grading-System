digraph "CFG forkotlin.text.StringsKt___StringsKt.partition(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000c: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0011: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: INVOKE  (r3 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0039 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001f: INVOKE  (r4 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0023: INVOKE  (r4 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1)\l  (r4 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: NEW_INSTANCE  (r5 I:kotlin.Pair) =  kotlin.Pair \l0x003b: INVOKE  \l  (r5 I:kotlin.Pair)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: RETURN  \l  (r5 I:kotlin.Pair\<java.lang.CharSequence, java.lang.CharSequence\>)\l \l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.lang.CharSequence, java.lang.CharSequence\> kotlin.text.StringsKt___StringsKt.partition((r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;), Lkotlin\/Pair\<, Ljava\/lang\/CharSequence;, Ljava\/lang\/CharSequence;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9;
}

