digraph "CFG forkotlin.text.StringsKt___StringsKt.first(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"predicate\")\lr0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:6:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:6:0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r0 \>= r3.length()) goto L_0x0029\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|char r1 = r3.charAt(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r4.invoke(java.lang.Character.valueOf(r1)).booleanValue() == false) goto L_0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|RETURN\l|return r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:6:0x0026\l|int r0 = r0 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029}"];
Node_8 [shape=record,label="{8\:\ 0x0032|throw new java.util.NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.first((r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)C]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_9[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_5;
Node_10 -> Node_7;
}

