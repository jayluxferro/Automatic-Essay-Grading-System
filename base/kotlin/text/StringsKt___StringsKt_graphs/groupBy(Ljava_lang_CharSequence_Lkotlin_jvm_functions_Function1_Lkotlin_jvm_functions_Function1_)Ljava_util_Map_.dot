digraph "CFG forkotlin.text.StringsKt___StringsKt.groupBy(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"keySelector\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"valueTransform\")\ljava.util.Map r0 = new java.util.LinkedHashMap\<\>()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:6:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0017\-\>B:6:0x0037\l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|if (r1 \>= r5.length()) goto L_0x0047\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|char r2 = r5.charAt(r1)\ljava.lang.Object r3 = r6.invoke(java.lang.Character.valueOf(r2))\ljava.lang.Object r4 = r0.get(r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|if (r4 != null) goto L_0x0037\l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|java.util.ArrayList r4 = new java.util.ArrayList\<\>()\lr0.put(r3, r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|LOOP_END\lPHI: r4 \l  PHI: (r4v1 java.util.List\<V\>) = (r4v0 java.util.List\<V\>), (r4v3 java.util.List\<V\>) binds: [B:10:0x0037, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0017\-\>B:6:0x0037\l|r4.add(r7.invoke(java.lang.Character.valueOf(r2)))\lint r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, java.util.List\<V\>\> kotlin.text.StringsKt___StringsKt.groupBy((r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends V\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, +TK;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, +TV;\>;), Ljava\/util\/Map\<, TK;, Ljava\/util\/List\<, TV;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

