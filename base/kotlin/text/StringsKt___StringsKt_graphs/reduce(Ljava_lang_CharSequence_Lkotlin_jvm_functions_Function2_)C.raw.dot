digraph "CFG forkotlin.text.StringsKt___StringsKt.reduce(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2;)C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r0 I:char) = (r4 I:java.lang.CharSequence), (r1 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001b: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r2 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:10:0x003c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r0 I:java.lang.Character) = (r0 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0025: INVOKE  (r3 I:char) = (r4 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0029: INVOKE  (r3 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x002d: INVOKE  (r0 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function2)\l  (r0 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0031: CHECK_CAST  (r0 I:java.lang.Character) = (java.lang.Character) (r0 I:?[OBJECT, ARRAY]) \l0x0033: INVOKE  (r0 I:char) = (r0 I:java.lang.Character) java.lang.Character.charValue():char type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: RETURN  (r0 I:char) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: NEW_INSTANCE  (r4 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException \l0x003f: CONST_STR  (r5 I:java.lang.String) =  \"Empty char sequence can't be reduced.\" \l0x0041: INVOKE  \l  (r4 I:java.lang.UnsupportedOperationException)\l  (r5 I:java.lang.String)\l java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void type: DIRECT \l0x0044: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.reduce((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super java.lang.Character, ? super java.lang.Character, java.lang.Character\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function2\<, \-, Ljava\/lang\/Character;, \-, Ljava\/lang\/Character;, Ljava\/lang\/Character;, \>;)C]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_11 -> Node_12;
}

