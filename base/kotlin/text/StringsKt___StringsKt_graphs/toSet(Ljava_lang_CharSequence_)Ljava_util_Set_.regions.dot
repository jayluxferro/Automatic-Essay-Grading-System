digraph "CFG forkotlin.text.StringsKt___StringsKt.toSet(Ljava\/lang\/CharSequence;)Ljava\/util\/Set;" {
subgraph cluster_Region_1375336050 {
label = "R(2:0|1)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_SwitchRegion_246001028 {
label = "Switch: 2, default: R(1:6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0009|switch(r2.length()) \{\l    case 0: goto L_0x0030;\l    case 1: goto L_0x0022;\l    default: goto L_0x000c;\l\}\l}"];
subgraph cluster_Region_2104652969 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return kotlin.collections.SetsKt.emptySet()\l}"];
}
subgraph cluster_Region_1253452093 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.SetsKt.setOf(java.lang.Character.valueOf(r2.charAt(0)))\l}"];
}
subgraph cluster_Region_1415711871 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\l|return (java.util.Set) kotlin.text.StringsKt.toCollection(r2, new java.util.LinkedHashSet(kotlin.collections.MapsKt.mapCapacity(r2.length())))\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0022}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0030}"];
MethodNode[shape=record,label="{public static final java.util.Set\<java.lang.Character\> kotlin.text.StringsKt___StringsKt.toSet((r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, ), Ljava\/util\/Set\<, Ljava\/lang\/Character;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_1 -> Node_4;
Node_2 -> Node_6;
Node_3 -> Node_7;
Node_4 -> Node_5;
}

