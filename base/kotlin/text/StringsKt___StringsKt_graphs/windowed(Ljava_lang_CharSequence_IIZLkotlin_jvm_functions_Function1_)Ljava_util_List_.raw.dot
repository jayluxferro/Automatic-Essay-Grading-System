digraph "CFG forkotlin.text.StringsKt___StringsKt.windowed(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r5 I:int), (r6 I:int) kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void type: STATIC \l0x000d: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0011: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0013: ARITH  (r2 I:int) = (r0 I:int) + (r6 I:int) \l0x0015: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0017: ARITH  (r2 I:int) = (r2 I:int) \/ (r6 I:int) \l0x0018: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x001b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:7:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|0x001e: ARITH  (r3 I:int) = (r2 I:int) + (r5 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r3 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0032 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: INVOKE  (r3 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence), (r2 I:int), (r3 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l0x0029: INVOKE  (r3 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x002d: INVOKE  (r1 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0030: ARITH  (r2 I:int) = (r2 I:int) + (r6 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: RETURN  (r1 I:java.util.List\<R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.windowed((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/CharSequence;, IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/CharSequence;, +TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
}

