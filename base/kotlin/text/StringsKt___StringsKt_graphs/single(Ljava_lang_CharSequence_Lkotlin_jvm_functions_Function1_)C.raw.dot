digraph "CFG forkotlin.text.StringsKt___StringsKt.single(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CHECK_CAST  (r0 I:java.lang.Character) = (java.lang.Character) (r0 I:?[OBJECT, ARRAY]) \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: INVOKE  (r3 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:10:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence), (r1 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001a: INVOKE  (r4 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x001e: INVOKE  (r4 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1)\l  (r4 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003e \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r0 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0030: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0031: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0032: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0036: CONST_STR  (r6 I:java.lang.String) =  \"Char sequence contains more than one matching element.\" \l0x0038: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x003b: CHECK_CAST  (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0052 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: INVOKE  (r5 I:char) = (r2 I:java.lang.Character) java.lang.Character.charValue():char type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: RETURN  (r5 I:char) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: NEW_INSTANCE  (r5 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x004c: CONST_STR  (r6 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Char\" \l0x004e: INVOKE  (r5 I:kotlin.TypeCastException), (r6 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: NEW_INSTANCE  (r5 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0054: CONST_STR  (r6 I:java.lang.String) =  \"Char sequence contains no character matching the predicate.\" \l0x0056: INVOKE  \l  (r5 I:java.util.NoSuchElementException)\l  (r6 I:java.lang.String)\l java.util.NoSuchElementException.\<init\>(java.lang.String):void type: DIRECT \l0x0059: CHECK_CAST  (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.single((r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)C]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_1;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

