digraph "CFG forkotlin.text.StringsKt___StringsKt.zipWithNext(Ljava\/lang\/CharSequence;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r0 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0009: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r5 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0014: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0017: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0020: INVOKE  (r4 I:char) = (r5 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0024: INVOKE  (r3 I:java.lang.Character) = (r3 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0028: INVOKE  (r4 I:java.lang.Character) = (r4 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x002c: INVOKE  (r3 I:kotlin.Pair) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l0x0030: INVOKE  (r1 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0035: CHECK_CAST  (r5 I:java.util.List) = (java.util.List) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: RETURN  \l  (r5 I:java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\>)\l \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\> kotlin.text.StringsKt___StringsKt.zipWithNext((r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, ), Ljava\/util\/List\<, Lkotlin\/Pair\<, Ljava\/lang\/Character;, Ljava\/lang\/Character;, \>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
}

