digraph "CFG forkotlin.text.StringsKt___StringsKt.slice(Ljava\/lang\/String;Lkotlin\/ranges\/IntRange;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST_STR  (r1 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r1 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:kotlin.ranges.IntRange) kotlin.text.StringsKt.substring(java.lang.String, kotlin.ranges.IntRange):java.lang.String type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt___StringsKt.slice((r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

