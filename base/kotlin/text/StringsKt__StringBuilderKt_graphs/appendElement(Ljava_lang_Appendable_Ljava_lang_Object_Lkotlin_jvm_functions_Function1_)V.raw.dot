digraph "CFG forkotlin.text.StringsKt__StringBuilderKt.appendElement(Ljava\/lang\/Appendable;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1)\l  (r2 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x000b: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x000d: INVOKE  (r1 I:java.lang.Appendable), (r2 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.lang.CharSequence \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:java.lang.Appendable), (r2 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.lang.Character \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: CHECK_CAST  (r2 I:java.lang.Character) = (java.lang.Character) (r2 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:char) = (r2 I:java.lang.Character) java.lang.Character.charValue():char type: VIRTUAL \l0x0029: INVOKE  (r1 I:java.lang.Appendable), (r2 I:char) java.lang.Appendable.append(char):java.lang.Appendable type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.String.valueOf(java.lang.Object):java.lang.String type: STATIC \l0x0031: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x0033: INVOKE  (r1 I:java.lang.Appendable), (r2 I:java.lang.CharSequence) java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: RETURN   \l}"];
MethodNode[shape=record,label="{public static final void kotlin.text.StringsKt__StringBuilderKt.appendElement((r1 I:java.lang.Appendable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Appendable;, TT;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Ljava\/lang\/CharSequence;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
}

