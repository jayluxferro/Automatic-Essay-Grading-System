digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST_STR  (r2 I:java.lang.String) =  \"$receiver\" \l0x0006: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0009: INVOKE  (r20 I:int) kotlin.text.CharsKt.checkRadix(int):int type: STATIC \l0x000c: INVOKE  (r2 I:int) = (r19 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: RETURN  (r3 I:java.lang.Long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  (r5 I:char) = (r0 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0019: CONST  (r6 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x001b: CONST  (r7 I:?[long, double]) = \l  (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ?[long, double])\l \l0x0020: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: RETURN  (r3 I:java.lang.Long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: CONST  (r6 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: CONST  (r7 I:?[long, double]) = (\-9223372036854775808 ?[long, double]) \l0x002c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002d: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: CONST  (r6 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: RETURN  (r3 I:java.lang.Long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: CAST  (r10 I:long) = (long) (r1 I:int) \l0x0038: ARITH  (r12 I:long) = (r7 I:long) \/ (r10 I:long) \l0x003a: CONST  (r14 I:?[long, double]) = (0 ?[long, double]) \l0x003c: ARITH  (r2 I:int) = (r2 I:int) \- (r9 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: IF  (r4 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:30:0x0067 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: INVOKE  (r6 I:char) = (r0 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0043: INVOKE  (r6 I:int) = (r6 I:char), (r1 I:int) kotlin.text.CharsKt.digitOf(char, int):int type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x004a \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: RETURN  (r3 I:java.lang.Long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: CMP_L  (r9 I:int) = (r14 I:long), (r12 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|0x004c: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:23:0x004f \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: RETURN  (r3 I:java.lang.Long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: ARITH  (r14 I:long) = (r14 I:long) * (r10 I:long) \l0x0051: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0053: CAST  (r3 I:long) = (long) (r6 I:int) \l0x0054: ARITH  (r17 I:long) = (r7 I:long) + (r3 I:long) \l0x0056: CMP_L  (r6 I:int) = (r14 I:long), (r17 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|0x0058: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:27:0x005c \l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|0x005a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: RETURN  (r6 I:java.lang.Long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x005c|0x005c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005e: ARITH  (r14 I:long) = (r14 I:long) \- (r3 I:long) \l0x005f: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0061|0x0061: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0067 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0063|0x0063: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0065: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0067|0x0067: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x006e \l}"];
Node_31 [shape=record,label="{31\:\ 0x0069|0x0069: INVOKE  (r0 I:java.lang.Long) = (r14 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x006e|0x006e: NEG  (r0 I:long) = (r14 I:long) \l0x006f: INVOKE  (r0 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x0073|0x0073: RETURN  (r0 I:java.lang.Long) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Long kotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull((r19 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_30;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_17;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
}

