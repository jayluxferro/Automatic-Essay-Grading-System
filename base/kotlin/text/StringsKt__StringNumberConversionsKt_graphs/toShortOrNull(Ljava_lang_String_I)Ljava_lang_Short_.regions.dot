digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toShortOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Short;" {
subgraph cluster_Region_1311951502 {
label = "R(2:0|(2:(1:8)|(1:7))) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\ljava.lang.Integer java.lang.Integer r1 = kotlin.text.StringsKt.toIntOrNull(r1, r2)\l}"];
subgraph cluster_Region_820931143 {
label = "R(2:(1:8)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_222805639 {
label = "IF [B:1:0x000a, B:3:0x0012, B:5:0x0016] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r1 == null) goto L_0x0020\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|ADDED_TO_REGION\l|if ((r1 = r1.intValue()) \< \-32768) goto L_0x001f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|ADDED_TO_REGION\l|if (r1 \> 32767) goto L_0x001f\l}"];
subgraph cluster_Region_349943729 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_2106954309 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|return java.lang.Short.valueOf((short) r1)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0014}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0020|RETURN\lADDED_TO_REGION\l|return null\l}"];
MethodNode[shape=record,label="{public static final java.lang.Short kotlin.text.StringsKt__StringNumberConversionsKt.toShortOrNull((r1v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

