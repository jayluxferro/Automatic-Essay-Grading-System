digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSuffix(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"suffix\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r1 I:boolean) = \l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r0 I:boolean)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0017: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x001b: ARITH  (r1 I:int) = (r1 I:int) \- (r4 I:int) \l0x001c: INVOKE  (r3 I:java.lang.CharSequence) = (r3 I:java.lang.CharSequence), (r0 I:int), (r1 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: RETURN  (r3 I:java.lang.CharSequence) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: INVOKE  (r4 I:int) = (r3 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0025: INVOKE  (r3 I:java.lang.CharSequence) = (r3 I:java.lang.CharSequence), (r0 I:int), (r4 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: RETURN  (r3 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeSuffix((r3 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

