digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/String;[C)Ljava\/lang\/String;" {
subgraph cluster_Region_249024036 {
label = "R(3:0|(2:5|(1:(1:8)(1:9))(1:(1:16)(1:11)))|13)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"chars\")\ljava.lang.CharSequence java.lang.CharSequence r5 = r5\lint int r0 = r5.length() \- 1\lint r2 = 0\lboolean r3 = false\l}"];
subgraph cluster_LoopRegion_969628327 {
label = "LOOP:0: (2:5|(1:(1:8)(1:9))(1:(1:16)(1:11)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0014|LOOP_START\lPHI: r0 r2 r3 \l  PHI: (r0v4 int) = (r0v3 int), (r0v6 int) binds: [B:0:0x0000, B:14:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:14:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:0:0x0000, B:14:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:14:0x0014\l|if (r2 \<= r0) goto L_0x0016\l}"];
subgraph cluster_Region_815366991 {
label = "R(2:5|(1:(1:8)(1:9))(1:(1:16)(1:11)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001b|PHI: r4 \l  PHI: (r4v0 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|boolean boolean r4 = kotlin.collections.ArraysKt.contains(r6, r5.charAt(!r3 ? r2 : r0))\l}"];
subgraph cluster_IfRegion_1299973163 {
label = "IF [B:6:0x0023] THEN: R(1:(1:8)(1:9)) ELSE: R(1:(1:16)(1:11))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0023|if (r3 == false) goto L_0x0025\l}"];
subgraph cluster_Region_394635120 {
label = "R(1:(1:8)(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_771842369 {
label = "IF [B:7:0x0025] THEN: R(1:8) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0025|if (r4 == false) goto L_0x0027\l}"];
subgraph cluster_Region_1973583067 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0027|r3 = true\l}"];
}
subgraph cluster_Region_165483860 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0029|r2++\l}"];
}
}
}
subgraph cluster_Region_1412995680 {
label = "R(1:(1:16)(1:11)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1326954080 {
label = "IF [B:10:0x002c] THEN: R(1:16) ELSE: R(1:11) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002c|if (r4 == false) goto L_0x0032\l}"];
subgraph cluster_Region_2034886778 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0032|SYNTHETIC\lEDGE_INSN: B:16:0x0032\-\>B:12:0x0032 ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_501526612 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002f|r0\-\-\l}"];
}
}
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x003b|RETURN\l|return r5.subSequence(r2, r0 + 1).toString()\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0016}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0018}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001a}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0032|EDGE_INSN: B:16:0x0032\-\>B:12:0x0032 ?: BREAK  \l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0014|LOOP_END\lSYNTHETIC\lPHI: r0 r2 r3 \l  PHI: (r0v6 int) = (r0v7 int), (r0v4 int), (r0v4 int) binds: [B:19:0x0014, B:18:0x0014, B:17:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int), (r2v1 int) binds: [B:19:0x0014, B:18:0x0014, B:17:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v1 boolean), (r3v3 boolean) binds: [B:19:0x0014, B:18:0x0014, B:17:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0014\-\>B:14:0x0014\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0032|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0014|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0014|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0014|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.trim((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_18;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_16 -> Node_12;
Node_11 -> Node_19;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_12 -> Node_13;
Node_14 -> Node_1;
Node_15 -> Node_12;
Node_17 -> Node_14;
Node_18 -> Node_14;
Node_19 -> Node_14;
}

