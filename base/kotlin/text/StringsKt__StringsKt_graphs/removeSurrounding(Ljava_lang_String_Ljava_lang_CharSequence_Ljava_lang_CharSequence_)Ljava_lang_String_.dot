digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSurrounding(Ljava\/lang\/String;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"prefix\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"suffix\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|if (r5.length() \< (r6.length() + r7.length())) goto L_0x0047\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|java.lang.CharSequence r0 = r5\l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|if (kotlin.text.StringsKt.startsWith$default(r0, r6, false, 2, (java.lang.Object) null) == false) goto L_0x0047\l}"];
Node_4 [shape=record,label="{4\:\ 0x002a}"];
Node_5 [shape=record,label="{5\:\ 0x002e|if (kotlin.text.StringsKt.endsWith$default(r0, r7, false, 2, (java.lang.Object) null) == false) goto L_0x0047\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|java.lang.String r5 = r5.substring(r6.length(), r5.length() \- r7.length())\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r5, \"(this as java.lang.Strinâ€¦ing(startIndex, endIndex)\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|RETURN\l|return r5\l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.removeSurrounding((r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
}

