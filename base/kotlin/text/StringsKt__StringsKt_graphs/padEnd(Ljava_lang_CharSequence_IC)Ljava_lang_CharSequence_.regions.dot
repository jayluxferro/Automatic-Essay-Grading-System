digraph "CFG forkotlin.text.StringsKt__StringsKt.padEnd(Ljava\/lang\/CharSequence;IC)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_391251012 {
label = "R(2:0|(2:13|14)(1:(1:5)(3:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|12)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\l}"];
subgraph cluster_IfRegion_1464915277 {
label = "IF [B:1:0x0005] THEN: R(2:13|14) ELSE: R(1:(1:5)(3:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|12))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r2 \< 0) goto L_0x0032\l}"];
subgraph cluster_Region_594191608 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0032}"];
Node_14 [shape=record,label="{14\:\ 0x004f|throw new java.lang.IllegalArgumentException(\"Desired length \" + r2 + \" is less than zero.\")\l}"];
}
subgraph cluster_Region_1385744832 {
label = "R(1:(1:5)(3:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|12)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1433372659 {
label = "IF [B:3:0x000b] THEN: R(1:5) ELSE: R(3:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|12) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r2 \<= r1.length()) goto L_0x000d\l}"];
subgraph cluster_Region_71617198 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return r1.subSequence(0, r1.length())\l}"];
}
subgraph cluster_Region_893848209 {
label = "R(3:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|12)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(r2)\lr0.append(r1)\lint int r2 = r2 \- r1.length()\lint r1 = 1\l}"];
subgraph cluster_IfRegion_1825520176 {
label = "IF [B:7:0x0025] THEN: R(1:(2:8|(2:(1:15)|(1:10)))) ELSE: R(0)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0025|if (1 \<= r2) goto L_0x0027\l}"];
subgraph cluster_Region_1920988090 {
label = "R(1:(2:8|(2:(1:15)|(1:10))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1723724540 {
label = "LOOP:0: (2:8|(2:(1:15)|(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_1223142547 {
label = "R(2:8|(2:(1:15)|(1:10)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0027|LOOP_START\lPHI: r1 \l  PHI: (r1v5 int) = (r1v4 int), (r1v6 int) binds: [B:7:0x0025, B:10:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0027\-\>B:10:0x002c\l|r0.append(r3)\l}"];
subgraph cluster_Region_1338286535 {
label = "R(2:(1:15)|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_112601488 {
label = "IF [B:9:0x002a] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002a|if (r1 == r2) goto L_0x002f\l}"];
subgraph cluster_Region_1836520235 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002f|SYNTHETIC\lEDGE_INSN: B:15:0x002f\-\>B:11:0x002f ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_195602517 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002c|LOOP_END\lLOOP:0: B:8:0x0027\-\>B:10:0x002c\l|r1++\l}"];
}
}
}
}
}
subgraph cluster_Region_1620631324 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_12 [shape=record,label="{12\:\ 0x0031|RETURN\l|return r0\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002f|EDGE_INSN: B:15:0x002f\-\>B:11:0x002f ?: BREAK  \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.padEnd((r1v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_13 -> Node_14;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_15 -> Node_11;
Node_10 -> Node_8;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_11 -> Node_12;
}

