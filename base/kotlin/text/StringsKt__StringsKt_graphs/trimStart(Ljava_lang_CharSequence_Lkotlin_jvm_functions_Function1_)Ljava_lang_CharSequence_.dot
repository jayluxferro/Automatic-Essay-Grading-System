digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"predicate\")\lint r0 = r3.length()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:6:0x002e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:6:0x002e\l|if (r1 \>= r0) goto L_0x0031\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011}"];
Node_3 [shape=record,label="{3\:\ 0x0023|if (r4.invoke(java.lang.Character.valueOf(r3.charAt(r1))).booleanValue() != false) goto L_0x002e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025}"];
Node_5 [shape=record,label="{5\:\ 0x002d|RETURN\l|return r3.subSequence(r1, r3.length())\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:6:0x002e\l|int r1 = r1 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031}"];
Node_8 [shape=record,label="{8\:\ 0x0035|RETURN\l|return \"\"\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimStart((r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;), Ljava\/lang\/CharSequence;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_6;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_4;
Node_10 -> Node_7;
}

