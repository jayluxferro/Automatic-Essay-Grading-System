digraph "CFG forkotlin.text.StringsKt__StringsKt.lastIndexOfAny(Ljava\/lang\/CharSequence;[CIZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: ARRAY_LENGTH  (r1 I:int) = (r7 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INSTANCE_OF  (r1 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r7 I:char) = (r7 I:char[]) kotlin.collections.ArraysKt.single(char[]):char type: STATIC \l0x0018: CHECK_CAST  (r6 I:java.lang.String) = (java.lang.String) (r6 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r6 I:int) = (r6 I:java.lang.String), (r7 I:int), (r8 I:int) java.lang.String.lastIndexOf(int, int):int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: RETURN  (r6 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l0x0023: INVOKE  (r8 I:int) = (r8 I:int), (r1 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:19:0x0045 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: INVOKE  (r1 I:char) = (r6 I:java.lang.CharSequence), (r8 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x002d: ARRAY_LENGTH  (r2 I:int) = (r7 I:?[]) \l0x002e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:16:0x003f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: AGET  (r5 I:char A[IMMUTABLE_TYPE]) = \l  (r7 I:char[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0034: INVOKE  (r5 I:boolean) = (r5 I:char), (r1 I:char), (r9 I:boolean) kotlin.text.CharsKt.equals(char, char, boolean):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: RETURN  (r8 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: ARITH  (r8 I:int) = (r8 I:int) + (\-1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: RETURN  (r6 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.lastIndexOfAny((r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_9;
Node_19 -> Node_20;
}

