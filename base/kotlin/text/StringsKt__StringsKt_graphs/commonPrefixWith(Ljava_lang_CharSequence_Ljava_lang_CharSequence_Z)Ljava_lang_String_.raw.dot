digraph "CFG forkotlin.text.StringsKt__StringsKt.commonPrefixWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x000e: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0012: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:5:0x002b \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x001e: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0022: INVOKE  (r3 I:boolean) = (r3 I:char), (r4 I:char), (r7 I:boolean) kotlin.text.CharsKt.equals(char, char, boolean):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: ARITH  (r7 I:int) = (r2 I:int) + (\-1 int) \l0x002d: INVOKE  (r0 I:boolean) = (r5 I:java.lang.CharSequence), (r7 I:int) kotlin.text.StringsKt.hasSurrogatePairAt(java.lang.CharSequence, int):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0039 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: INVOKE  (r6 I:boolean) = (r6 I:java.lang.CharSequence), (r7 I:int) kotlin.text.StringsKt.hasSurrogatePairAt(java.lang.CharSequence, int):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: INVOKE  (r5 I:java.lang.CharSequence) = (r5 I:java.lang.CharSequence), (r1 I:int), (r2 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l0x003f: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: RETURN  (r5 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.commonPrefixWith((r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

