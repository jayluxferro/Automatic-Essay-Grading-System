digraph "CFG forkotlin.text.StringsKt__StringsKt.hasSurrogatePairAt(Ljava\/lang\/CharSequence;I)Z" {
subgraph cluster_Region_44494569 {
label = "R(2:0|(2:(1:8)|(1:7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lint int r0 = r2.length() \- 2\l}"];
subgraph cluster_Region_965804855 {
label = "R(2:(1:8)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_600413618 {
label = "IF [B:1:0x000c, B:2:0x000f, B:4:0x0019, B:6:0x0024] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r3 \>= 0) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|ADDED_TO_REGION\l|if (r0 \>= r3) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|ADDED_TO_REGION\l|if (java.lang.Character.isHighSurrogate(r2.charAt(r3)) == true) goto L_0x001b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|ADDED_TO_REGION\l|if (java.lang.Character.isLowSurrogate(r2.charAt(r3 + 1)) == true) goto L_?\l}"];
subgraph cluster_Region_141254171 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1137225755 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0027|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001b}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.hasSurrogatePairAt((r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

