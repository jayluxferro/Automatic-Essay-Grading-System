digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;[C)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"chars\")\lint r0 = r5.length() \- 1\lr2 = 0\lr3 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|LOOP_START\lPHI: r0 r2 r3 \l  PHI: (r0v4 int) = (r0v3 int), (r0v6 int) binds: [B:0:0x0000, B:14:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:14:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:0:0x0000, B:14:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:14:0x0012\l|if (r2 \> r0) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|if (r3 != false) goto L_0x0018\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|r4 = r2\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|r4 = r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|PHI: r4 \l  PHI: (r4v0 int) = (r4v3 int), (r4v4 int) binds: [B:4:0x0018, B:3:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|boolean r4 = kotlin.collections.ArraysKt.contains(r6, r5.charAt(r4))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|if (r3 != false) goto L_0x002a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|if (r4 != false) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|r3 = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|int r2 = r2 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|if (r4 != false) goto L_0x002d\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|int r0 = r0 + \-1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030}"];
Node_13 [shape=record,label="{13\:\ 0x0035|RETURN\l|return r5.subSequence(r2, r0 + 1)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|LOOP_END\lSYNTHETIC\lPHI: r0 r2 r3 \l  PHI: (r0v6 int) = (r0v7 int), (r0v4 int), (r0v4 int) binds: [B:19:0x0012, B:18:0x0012, B:17:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int), (r2v1 int) binds: [B:19:0x0012, B:18:0x0012, B:17:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v1 boolean), (r3v3 boolean) binds: [B:19:0x0012, B:18:0x0012, B:17:0x0012] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:14:0x0012\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_17;
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_10 -> Node_16[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_14 -> Node_1;
Node_15 -> Node_12;
Node_16 -> Node_12;
Node_17 -> Node_14;
Node_18 -> Node_14;
Node_19 -> Node_14;
}

