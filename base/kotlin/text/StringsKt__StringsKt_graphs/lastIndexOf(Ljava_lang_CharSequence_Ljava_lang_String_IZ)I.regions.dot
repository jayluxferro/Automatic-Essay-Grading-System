digraph "CFG forkotlin.text.StringsKt__StringsKt.lastIndexOf(Ljava\/lang\/CharSequence;Ljava\/lang\/String;IZ)I" {
subgraph cluster_Region_1618884965 {
label = "R(2:0|(2:(1:7)|(2:5|6)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"string\")\l}"];
subgraph cluster_Region_1161752970 {
label = "R(2:(1:7)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1305822475 {
label = "IF [B:1:0x000a, B:3:0x000e] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r9 != true) goto L_0x000c\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|ADDED_TO_REGION\l|if ((r6 instanceof java.lang.String) != false) goto L_0x0011\l}"];
subgraph cluster_Region_359222865 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return ((java.lang.String) r6).lastIndexOf(r7, r8)\l}"];
}
}
subgraph cluster_Region_72218760 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return indexOf$StringsKt__StringsKt(r6, r7, r8, 0, r9, true)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0011}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.lastIndexOf((r6v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_2 -> Node_3;
Node_4 -> Node_7;
}

