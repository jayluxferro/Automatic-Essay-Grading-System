digraph "CFG forkotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(Ljava\/lang\/CharSequence;[CIZI)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r6 \< 0) goto L_0x0004\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|r0 = true\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|PHI: r0 \l  PHI: (r0v0 boolean) = (r0v3 boolean), (r0v4 boolean) binds: [B:2:0x0004, B:1:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x0015|RETURN\l|return new kotlin.text.DelimitedRangesSequence(r2, r4, r6, new kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2(r3, r5))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Limit must be non\-negative, but was \")\lr2.append(r6)\lr2.append('.')\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|throw new java.lang.IllegalArgumentException(r2.toString().toString())\l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<kotlin.ranges.IntRange\> kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt((r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, [CIZI), Lkotlin\/sequences\/Sequence\<, Lkotlin\/ranges\/IntRange;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

