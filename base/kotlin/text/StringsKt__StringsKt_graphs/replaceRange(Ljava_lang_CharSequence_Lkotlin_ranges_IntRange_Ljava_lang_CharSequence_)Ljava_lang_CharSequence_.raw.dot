digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceRange(Ljava\/lang\/CharSequence;Lkotlin\/ranges\/IntRange;Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"replacement\" \l0x000c: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000f: INVOKE  (r0 I:java.lang.Integer) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getStart():java.lang.Integer type: VIRTUAL \l0x0013: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0017: INVOKE  (r2 I:java.lang.Integer) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer type: VIRTUAL \l0x001b: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x001f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0021: INVOKE  (r1 I:java.lang.CharSequence) = \l  (r1 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r2 I:int)\l  (r3 I:java.lang.CharSequence)\l kotlin.text.StringsKt.replaceRange(java.lang.CharSequence, int, int, java.lang.CharSequence):java.lang.CharSequence type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: RETURN  (r1 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.replaceRange((r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

