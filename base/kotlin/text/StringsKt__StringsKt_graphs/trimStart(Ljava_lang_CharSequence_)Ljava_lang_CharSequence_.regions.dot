digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_1864773611 {
label = "R(3:0|(1:(2:(1:10)|(1:5)))|9)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lint int r0 = r3.length()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_449179284 {
label = "LOOP:0: (1:(2:(1:10)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:5:0x001f\l|if (r1 \< r0) goto L_0x000c\l}"];
subgraph cluster_Region_573754511 {
label = "R(1:(2:(1:10)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1486841 {
label = "R(2:(1:10)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_128031040 {
label = "IF [B:3:0x0014] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0014|if (kotlin.text.CharsKt.isWhitespace(r3.charAt(r1)) == false) goto L_0x0016\l}"];
subgraph cluster_Region_1504093992 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return r3.subSequence(r1, r3.length())\l}"];
}
}
subgraph cluster_Region_518214524 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:5:0x001f\l|r1++\l}"];
}
}
}
}
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"\"\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0016}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0022}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0016|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimStart((r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_10;
Node_6 -> Node_9;
Node_7 -> Node_4;
Node_8 -> Node_6;
}

