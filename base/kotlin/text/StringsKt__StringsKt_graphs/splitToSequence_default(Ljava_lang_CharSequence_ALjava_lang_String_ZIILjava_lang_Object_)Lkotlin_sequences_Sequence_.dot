digraph "CFG forkotlin.text.StringsKt__StringsKt.splitToSequence$default(Ljava\/lang\/CharSequence;[Ljava\/lang\/String;ZIILjava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r5 & 2) == 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r3 = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r3 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:1:0x0003, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if ((r5 & 4) == 0) goto L_0x000b\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|r4 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:4:0x0008, B:5:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|return kotlin.text.StringsKt.splitToSequence(r1, r2, r3, r4)\l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ kotlin.sequences.Sequence kotlin.text.StringsKt__StringsKt.splitToSequence$default((r1v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

