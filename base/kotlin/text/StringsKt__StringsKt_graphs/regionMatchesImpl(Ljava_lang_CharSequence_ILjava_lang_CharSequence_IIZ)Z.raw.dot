digraph "CFG forkotlin.text.StringsKt__StringsKt.regionMatchesImpl(Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;IIZ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0013: ARITH  (r1 I:int) = (r1 I:int) \- (r8 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r5 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x001a: ARITH  (r1 I:int) = (r1 I:int) \- (r8 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r7 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r1 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r5 I:int) + (r1 I:int) \l0x0023: INVOKE  (r2 I:char) = (r4 I:java.lang.CharSequence), (r2 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0027: ARITH  (r3 I:int) = (r7 I:int) + (r1 I:int) \l0x0029: INVOKE  (r3 I:char) = (r6 I:java.lang.CharSequence), (r3 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x002d: INVOKE  (r2 I:boolean) = (r2 I:char), (r3 I:char), (r9 I:boolean) kotlin.text.CharsKt.equals(char, char, boolean):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: RETURN  (r0 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: RETURN  (r4 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.regionMatchesImpl((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_16[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

