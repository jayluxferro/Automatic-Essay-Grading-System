digraph "CFG forkotlin.text.StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/util\/Collection;IZZ)Lkotlin\/Pair;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r11 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CHECK_CAST  (r11 I:java.lang.Iterable) = (java.lang.Iterable) (r11 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r11 I:java.lang.Object) = (r11 I:java.lang.Iterable) kotlin.collections.CollectionsKt.single(java.lang.Iterable):java.lang.Object type: STATIC \l0x0010: CHECK_CAST  (r11 I:java.lang.String) = (java.lang.String) (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0016: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0019: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: INVOKE  (r10 I:int) = \l  (r1 I:java.lang.CharSequence)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:boolean)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0021: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0023: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0024: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: INVOKE  (r10 I:int) = \l  (r1 I:java.lang.CharSequence)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:boolean)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l kotlin.text.StringsKt.lastIndexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r10 I:java.lang.Integer) = (r10 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0030: INVOKE  (r0 I:kotlin.Pair) = (r10 I:java.lang.Object), (r11 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: RETURN  (r0 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: INVOKE  (r12 I:int) = (r12 I:int), (r1 I:int) kotlin.ranges.RangesKt.coerceAtLeast(int, int):int type: STATIC \l0x003c: NEW_INSTANCE  (r14 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x003e: INVOKE  (r1 I:int) = (r10 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0042: INVOKE  (r14 I:kotlin.ranges.IntRange), (r12 I:int), (r1 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l0x0045: CHECK_CAST  (r14 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r14 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: INVOKE  (r14 I:int) = (r10 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l0x004c: INVOKE  (r12 I:int) = (r12 I:int), (r14 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l0x0050: INVOKE  (r14 I:kotlin.ranges.IntProgression) = (r12 I:int), (r1 I:int) kotlin.ranges.RangesKt.downTo(int, int):kotlin.ranges.IntProgression type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|0x0054: INSTANCE_OF  (r12 I:boolean) = (r10 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_17 [shape=record,label="{17\:\ 0x0056|0x0056: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00a2 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: INVOKE  (r12 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getFirst():int type: VIRTUAL \l0x005c: INVOKE  (r1 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getLast():int type: VIRTUAL \l0x0060: INVOKE  (r14 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getStep():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|0x0064: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0069 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: IF  (r12 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_22 [shape=record,label="{22\:\ 0x0069|0x0069: IF  (r12 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_23 [shape=record,label="{23\:\ 0x006b|0x006b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x006c: CHECK_CAST  (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:?[OBJECT, ARRAY]) \l0x006e: INVOKE  (r8 I:java.util.Iterator) = (r2 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x0072|0x0072: INVOKE  (r2 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x0076|0x0076: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0090 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0078|0x0078: INVOKE  (r9 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x007c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x007d: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x007f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0080: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0081: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0083: INVOKE  (r6 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0087: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0088: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0089: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l kotlin.text.StringsKt.regionMatches(java.lang.String, int, java.lang.String, int, int, boolean):boolean type: STATIC \l}"];
Node_27 [shape=record,label="{27\:\ 0x008d|0x008d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0072 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0090|0x0090: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0091|0x0091: CHECK_CAST  (r9 I:java.lang.String) = (java.lang.String) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0093|0x0093: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x009e \l}"];
Node_32 [shape=record,label="{32\:\ 0x0095|0x0095: INVOKE  (r10 I:java.lang.Integer) = (r12 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0099: INVOKE  (r10 I:kotlin.Pair) = (r10 I:java.lang.Object), (r9 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x009d|0x009d: RETURN  (r10 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_34 [shape=record,label="{34\:\ 0x009e|0x009e: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a0|0x00a0: ARITH  (r12 I:int) = (r12 I:int) + (r14 I:int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00a2|0x00a2: INVOKE  (r12 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getFirst():int type: VIRTUAL \l0x00a6: INVOKE  (r1 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getLast():int type: VIRTUAL \l0x00aa: INVOKE  (r14 I:int) = (r14 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getStep():int type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ae|0x00ae: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:40:0x00b3 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b0|0x00b0: IF  (r12 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_40 [shape=record,label="{40\:\ 0x00b3|0x00b3: IF  (r12 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_41 [shape=record,label="{41\:\ 0x00b5|0x00b5: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x00b6: CHECK_CAST  (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:?[OBJECT, ARRAY]) \l0x00b8: INVOKE  (r8 I:java.util.Iterator) = (r2 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_42 [shape=record,label="{42\:\ 0x00bc|0x00bc: INVOKE  (r2 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_43 [shape=record,label="{43\:\ 0x00c0|0x00c0: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00dd \l}"];
Node_44 [shape=record,label="{44\:\ 0x00c2|0x00c2: INVOKE  (r9 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x00c6: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x00c7: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x00c9: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x00ca: CHECK_CAST  (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:?[OBJECT, ARRAY]) \l0x00cc: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00cd: INVOKE  (r6 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x00d1: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x00d2: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d3: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x00d4: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d5: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d6: INVOKE  (r2 I:boolean) = \l  (r2 I:java.lang.CharSequence)\l  (r3 I:int)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean type: STATIC \l}"];
Node_45 [shape=record,label="{45\:\ 0x00da|0x00da: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00bc \l}"];
Node_47 [shape=record,label="{47\:\ 0x00dd|0x00dd: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00de|0x00de: CHECK_CAST  (r9 I:java.lang.String) = (java.lang.String) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00e0|0x00e0: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x00eb \l}"];
Node_50 [shape=record,label="{50\:\ 0x00e2|0x00e2: INVOKE  (r10 I:java.lang.Integer) = (r12 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x00e6: INVOKE  (r10 I:kotlin.Pair) = (r10 I:java.lang.Object), (r9 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l}"];
Node_51 [shape=record,label="{51\:\ 0x00ea|0x00ea: RETURN  (r10 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00eb|0x00eb: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00ef \l}"];
Node_53 [shape=record,label="{53\:\ 0x00ed|0x00ed: ARITH  (r12 I:int) = (r12 I:int) + (r14 I:int) \l}"];
Node_54 [shape=record,label="{54\:\ 0x00ef|0x00ef: RETURN  (r0 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
MethodNode[shape=record,label="{private static final kotlin.Pair\<java.lang.Integer, java.lang.String\> kotlin.text.StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt((r10 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.Collection\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/util\/Collection\<, Ljava\/lang\/String;, \>;IZZ), Lkotlin\/Pair\<, Ljava\/lang\/Integer;, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_36;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_54;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_54;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_24;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_54;
Node_35 -> Node_23;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_54;
Node_38 -> Node_41[style=dashed];
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_54;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45;
Node_45 -> Node_42;
Node_45 -> Node_48[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_52;
Node_50 -> Node_51;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_41;
}

