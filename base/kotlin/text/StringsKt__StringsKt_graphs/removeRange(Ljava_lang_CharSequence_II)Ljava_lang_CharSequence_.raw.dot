digraph "CFG forkotlin.text.StringsKt__StringsKt.removeRange(Ljava\/lang\/CharSequence;II)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r6 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r5 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x000e: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence), (r0 I:int), (r5 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r4 I:java.lang.CharSequence) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0019: ARITH  (r3 I:int) = (r6 I:int) \- (r5 I:int) \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x001f: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r4 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0022: INVOKE  (r5 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0026: INVOKE  \l  (r1 I:java.lang.StringBuilder)\l  (r4 I:java.lang.CharSequence)\l  (r6 I:int)\l  (r5 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0029: CHECK_CAST  (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: RETURN  (r1 I:java.lang.CharSequence) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: NEW_INSTANCE  (r4 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException \l0x002e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0030: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0033: CONST_STR  (r1 I:java.lang.String) =  \"End index (\" \l0x0035: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x003b: CONST_STR  (r6 I:java.lang.String) =  \") is less than start index (\" \l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0043: CONST_STR  (r5 I:java.lang.String) =  \").\" \l0x0045: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004c: INVOKE  \l  (r4 I:java.lang.IndexOutOfBoundsException)\l  (r5 I:java.lang.String)\l java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void type: DIRECT \l0x004f: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeRange((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

