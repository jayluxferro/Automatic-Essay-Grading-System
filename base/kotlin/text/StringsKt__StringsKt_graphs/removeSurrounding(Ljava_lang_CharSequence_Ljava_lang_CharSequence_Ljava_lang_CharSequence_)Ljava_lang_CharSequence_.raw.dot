digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSurrounding(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"suffix\" \l0x000c: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000f: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0013: INVOKE  (r1 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0017: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x001b: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:8:0x003f \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0021: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l  (r2 I:boolean)\l  (r1 I:int)\l  (r0 I:java.lang.Object)\l kotlin.text.StringsKt.startsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: INVOKE  (r0 I:boolean) = \l  (r4 I:java.lang.CharSequence)\l  (r6 I:java.lang.CharSequence)\l  (r2 I:boolean)\l  (r1 I:int)\l  (r0 I:java.lang.Object)\l kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003f \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: INVOKE  (r5 I:int) = (r5 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0031: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0035: INVOKE  (r6 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0039: ARITH  (r0 I:int) = (r0 I:int) \- (r6 I:int) \l0x003a: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence), (r5 I:int), (r0 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: RETURN  (r4 I:java.lang.CharSequence) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|0x003f: INVOKE  (r5 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0043: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence), (r2 I:int), (r5 I:int) java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|0x0047: RETURN  (r4 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeSurrounding((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

