digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/String;[C)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"chars\")\ljava.lang.CharSequence r3 = r3\lint r0 = r3.length()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0011\-\>B:5:0x0026\l|if (r1 \>= r0) goto L_0x0029\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013}"];
Node_3 [shape=record,label="{3\:\ 0x001b|if (kotlin.collections.ArraysKt.contains(r4, r3.charAt(r1)) != false) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|java.lang.CharSequence r3 = r3.subSequence(r1, r3.length())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|LOOP_END\lLOOP:0: B:1:0x0011\-\>B:5:0x0026\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|java.lang.CharSequence r3 = \"\"\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|PHI: r3 \l  PHI: (r3v4 java.lang.CharSequence) = (r3v3 java.lang.CharSequence), (r3v6 java.lang.CharSequence) binds: [B:6:0x0029, B:4:0x001d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|RETURN\l|return r3.toString()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.trimStart((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_6;
Node_10 -> Node_4;
}

