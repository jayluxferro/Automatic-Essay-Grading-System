digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceRange(Ljava\/lang\/String;Lkotlin\/ranges\/IntRange;Ljava\/lang\/CharSequence;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CHECK_CAST  (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  (r0 I:java.lang.CharSequence) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:kotlin.ranges.IntRange)\l  (r2 I:java.lang.CharSequence)\l kotlin.text.StringsKt.replaceRange(java.lang.CharSequence, kotlin.ranges.IntRange, java.lang.CharSequence):java.lang.CharSequence type: STATIC \l0x0008: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: RETURN  (r0 I:java.lang.String) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.CharSequence\" \l0x0011: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.text.StringsKt__StringsKt.replaceRange((r0 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

