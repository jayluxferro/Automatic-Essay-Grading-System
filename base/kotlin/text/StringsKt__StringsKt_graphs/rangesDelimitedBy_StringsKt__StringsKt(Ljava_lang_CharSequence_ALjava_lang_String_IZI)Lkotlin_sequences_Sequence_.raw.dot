digraph "CFG forkotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(Ljava\/lang\/CharSequence;[Ljava\/lang\/String;IZI)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:2:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Object[]) kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List type: STATIC \l0x000b: NEW_INSTANCE  (r0 I:kotlin.text.DelimitedRangesSequence) =  kotlin.text.DelimitedRangesSequence \l0x000d: NEW_INSTANCE  (r1 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4) =  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4 \l0x000f: INVOKE  \l  (r1 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4)\l  (r3 I:java.util.List)\l  (r5 I:boolean)\l kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4.\<init\>(java.util.List, boolean):void type: DIRECT \l0x0012: CHECK_CAST  (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  \l  (r0 I:kotlin.text.DelimitedRangesSequence)\l  (r2 I:java.lang.CharSequence)\l  (r4 I:int)\l  (r6 I:int)\l  (r1 I:kotlin.jvm.functions.Function2)\l kotlin.text.DelimitedRangesSequence.\<init\>(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2):void type: DIRECT \l0x0017: CHECK_CAST  (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r0 I:kotlin.sequences.Sequence\<kotlin.ranges.IntRange\>) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001f: CONST_STR  (r3 I:java.lang.String) =  \"Limit must be non\-negative, but was \" \l0x0021: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r2 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0027: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0029: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0030: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0032: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0036: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0039: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|0x003b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<kotlin.ranges.IntRange\> kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt((r2 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, [, Ljava\/lang\/String;, IZI), Lkotlin\/sequences\/Sequence\<, Lkotlin\/ranges\/IntRange;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

