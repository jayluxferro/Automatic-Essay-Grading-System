digraph "CFG forkotlin.text.StringsKt__StringsKt.commonSuffixWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Ljava\/lang\/String;" {
subgraph cluster_Region_1157474720 {
label = "R(4:0|(1:4)|(1:9)|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"other\")\lint int r0 = r6.length()\lint int r1 = r7.length()\lint int r2 = java.lang.Math.min(r0, r1)\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_995336858 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0017|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v4 int) binds: [B:0:0x0000, B:4:0x002f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0017\-\>B:4:0x002f\l|if (r3 \< r2) goto L_0x0019\l}"];
subgraph cluster_Region_1497484399 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x002f|LOOP_END\lLOOP:0: B:1:0x0017\-\>B:4:0x002f\l|r3++\l}"];
}
}
subgraph cluster_IfRegion_462294304 {
label = "IF [B:6:0x003a, B:8:0x0043] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x003a|ADDED_TO_REGION\l|if (kotlin.text.StringsKt.hasSurrogatePairAt(r6, (r0 \- r3) \- 1) == true) goto L_0x0045\l}"];
Node_8 [shape=record,label="{8\:\ 0x0043|ADDED_TO_REGION\l|if (kotlin.text.StringsKt.hasSurrogatePairAt(r7, (r1 \- r3) \- 1) == true) goto L_0x0045\l}"];
subgraph cluster_Region_1893260157 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0045|r3\-\-\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0051|RETURN\l|return r6.subSequence(r0 \- r3, r0).toString()\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0019}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x002d|ADDED_TO_REGION\l|if (kotlin.text.CharsKt.equals(r6.charAt((r0 \- r3) \- 1), r7.charAt((r1 \- r3) \- 1), r8) != false) goto L_0x002f\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0032}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x003c}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0047|PHI: r3 \l  PHI: (r3v2 int) = (r3v3 int), (r3v1 int) binds: [B:9:0x0045, B:8:0x0043] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0032|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.commonSuffixWith((r6v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_12[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_10 -> Node_11;
Node_12 -> Node_5;
Node_13 -> Node_5;
}

