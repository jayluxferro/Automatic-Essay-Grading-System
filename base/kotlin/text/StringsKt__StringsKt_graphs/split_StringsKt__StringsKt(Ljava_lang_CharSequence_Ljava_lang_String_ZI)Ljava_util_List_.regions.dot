digraph "CFG forkotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List;" {
subgraph cluster_Region_1643345133 {
label = "R(2:0|(2:(2:5|(2:(1:24)|(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22)))|(2:25|26)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = 0\l}"];
subgraph cluster_Region_952905522 {
label = "R(2:(2:5|(2:(1:24)|(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22)))|(2:25|26))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_345123096 {
label = "IF [B:4:0x0007] THEN: R(2:5|(2:(1:24)|(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22))) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r2 \l  PHI: (r2v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r10 \>= 0) == true) goto L_0x0009\l}"];
subgraph cluster_Region_712004471 {
label = "R(2:5|(2:(1:24)|(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|int int r2 = kotlin.text.StringsKt.indexOf(r7, r8, 0, r9)\l}"];
subgraph cluster_Region_894204337 {
label = "R(2:(1:24)|(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_830690849 {
label = "IF [B:6:0x000e, B:7:0x0010] THEN: R(1:24) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r2 == \-1) goto L_0x0058\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|ADDED_TO_REGION\l|if (r10 == 1) goto L_0x0058\l}"];
subgraph cluster_Region_1385147020 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0060|RETURN\l|return kotlin.collections.CollectionsKt.listOf(r7.toString())\l}"];
}
}
subgraph cluster_Region_1771018640 {
label = "R(7:8|11|(1:13)|14|(4:15|(1:21)|15|28)|21|22)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0013|boolean r4 = r10 \> 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|PHI: r4 \l  PHI: (r4v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r6 = 10\l}"];
subgraph cluster_IfRegion_584128925 {
label = "IF [B:12:0x001c] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001c|if (r4 == true) goto L_0x001e\l}"];
subgraph cluster_Region_931612494 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001e|int r6 = kotlin.ranges.RangesKt.coerceAtMost(r10, 10)\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0022|PHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:12:0x001c, B:13:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|java.util.ArrayList java.util.ArrayList r5 = new java.util.ArrayList(r6)\l}"];
subgraph cluster_LoopRegion_1873122093 {
label = "LOOP:0: (4:15|(1:21)|15|28)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0044|LOOP_END\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|if ((r2 = kotlin.text.StringsKt.indexOf(r7, r8, r0, r9)) == \-1) goto L_0x0046\l}"];
subgraph cluster_Region_1449178939 {
label = "R(4:15|(1:21)|15|28)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0025|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v1 int) = (r0v0 int), (r0v5 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|r5.add(r7.subSequence(r0, r2).toString())\lint r0 = r8.length() + r2\l}"];
subgraph cluster_IfRegion_1084979296 {
label = "IF [B:16:0x0035, B:18:0x003d, B:20:0x0044] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0035|ADDED_TO_REGION\l|if (r4 == true) goto L_0x0037\l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|ADDED_TO_REGION\l|if (r5.size() == (r10 \- 1)) goto L_0x0046\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|LOOP_END\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|if ((r2 = kotlin.text.StringsKt.indexOf(r7, r8, r0, r9)) == \-1) goto L_0x0046\l}"];
subgraph cluster_Region_973416580 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0046|EDGE_INSN: B:28:0x0046\-\>B:21:0x0046 ?: BREAK  \l|r5.add(r7.subSequence(r0, r7.length()).toString())\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0025|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v1 int) = (r0v0 int), (r0v5 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|r5.add(r7.subSequence(r0, r2).toString())\lint r0 = r8.length() + r2\l}"];
Node_28 [shape=record,label="{28\:\ 0x0046|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:28:0x0046\-\>B:21:0x0046 ?: BREAK  \l|break\l}"];
}
}
Node_21 [shape=record,label="{21\:\ 0x0046|EDGE_INSN: B:28:0x0046\-\>B:21:0x0046 ?: BREAK  \l|r5.add(r7.subSequence(r0, r7.length()).toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|RETURN\l|return r5\l}"];
}
}
}
}
subgraph cluster_Region_191081040 {
label = "R(2:25|26)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0061}"];
Node_26 [shape=record,label="{26\:\ 0x0082|throw new java.lang.IllegalArgumentException((\"Limit must be non\-negative, but was \" + r10 + '.').toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0015}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0017}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0037}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0040}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0058}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0046|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt((r7v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/lang\/String;, ZI), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_25[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_23;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_20 -> Node_15[style=dashed];
Node_20 -> Node_27;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_20 -> Node_15[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_15 -> Node_16;
Node_28 -> Node_21;
Node_21 -> Node_22;
Node_25 -> Node_26;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_23 -> Node_24;
Node_27 -> Node_21;
}

