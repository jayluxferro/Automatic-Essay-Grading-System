digraph "CFG forkotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r10 \< 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r2 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r2 \l  PHI: (r2v0 boolean) = (r2v5 boolean), (r2v6 boolean) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x0061\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|int r2 = kotlin.text.StringsKt.indexOf(r7, r8, 0, r9)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r2 == \-1) goto L_0x0058\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r10 != 1) goto L_0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|if (r10 \<= 0) goto L_0x0017\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|r4 = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|r4 = false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|PHI: r4 \l  PHI: (r4v0 boolean) = (r4v1 boolean), (r4v2 boolean) binds: [B:10:0x0017, B:9:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|r6 = 10\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|if (r4 == false) goto L_0x0022\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|int r6 = kotlin.ranges.RangesKt.coerceAtMost(r10, 10)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|PHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v3 int) binds: [B:12:0x001c, B:13:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|java.util.ArrayList r5 = new java.util.ArrayList(r6)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|LOOP_START\lPHI: r0 r2 \l  PHI: (r0v1 int) = (r0v0 int), (r0v5 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:14:0x0022, B:20:0x0044] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|r5.add(r7.subSequence(r0, r2).toString())\lint r0 = r8.length() + r2\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|if (r4 == false) goto L_0x0040\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037}"];
Node_18 [shape=record,label="{18\:\ 0x003d|if (r5.size() != (r10 + \-1)) goto L_0x0040\l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|int r2 = kotlin.text.StringsKt.indexOf(r7, r8, r0, r9)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|LOOP_END\lLOOP:0: B:15:0x0025\-\>B:20:0x0044\l|if (r2 != \-1) goto L_0x0025\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|r5.add(r7.subSequence(r0, r7.length()).toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|RETURN\l|return r5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0058}"];
Node_24 [shape=record,label="{24\:\ 0x0060|RETURN\l|return kotlin.collections.CollectionsKt.listOf(r7.toString())\l}"];
Node_25 [shape=record,label="{25\:\ 0x0061|java.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"Limit must be non\-negative, but was \")\lr7.append(r10)\lr7.append('.')\l}"];
Node_26 [shape=record,label="{26\:\ 0x0082|throw new java.lang.IllegalArgumentException(r7.toString().toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x0046|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0046|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt((r7v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/lang\/String;, ZI), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_25;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_7 -> Node_23[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_28[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_15;
Node_20 -> Node_27[style=dashed];
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_21;
Node_28 -> Node_21;
}

