digraph "CFG forkotlin.text.StringsKt__StringsKt.padStart(Ljava\/lang\/CharSequence;IC)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_211814429 {
label = "R(2:0|(2:13|14)(1:(1:5)(4:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|11|12)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_IfRegion_1746080439 {
label = "IF [B:1:0x0005] THEN: R(2:13|14) ELSE: R(1:(1:5)(4:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|11|12))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r3 \< 0) goto L_0x0032\l}"];
subgraph cluster_Region_478951970 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0032}"];
Node_14 [shape=record,label="{14\:\ 0x004f|throw new java.lang.IllegalArgumentException(\"Desired length \" + r3 + \" is less than zero.\")\l}"];
}
subgraph cluster_Region_769538899 {
label = "R(1:(1:5)(4:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|11|12)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_565325333 {
label = "IF [B:3:0x000b] THEN: R(1:5) ELSE: R(4:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|11|12) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r3 \<= r2.length()) goto L_0x000d\l}"];
subgraph cluster_Region_1371801150 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return r2.subSequence(0, r2.length())\l}"];
}
subgraph cluster_Region_3914898 {
label = "R(4:6|(1:(2:8|(2:(1:15)|(1:10))))(0)|11|12)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(r3)\lint int r3 = r3 \- r2.length()\lint r1 = 1\l}"];
subgraph cluster_IfRegion_1068861457 {
label = "IF [B:7:0x0022] THEN: R(1:(2:8|(2:(1:15)|(1:10)))) ELSE: R(0)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0022|if (1 \<= r3) goto L_0x0024\l}"];
subgraph cluster_Region_744778510 {
label = "R(1:(2:8|(2:(1:15)|(1:10))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1883031922 {
label = "LOOP:0: (2:8|(2:(1:15)|(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_1706252756 {
label = "R(2:8|(2:(1:15)|(1:10)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0024|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:7:0x0022, B:10:0x0029] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0024\-\>B:10:0x0029\l|r0.append(r4)\l}"];
subgraph cluster_Region_1078887398 {
label = "R(2:(1:15)|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1806497902 {
label = "IF [B:9:0x0027] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0027|if (r1 == r3) goto L_0x002c\l}"];
subgraph cluster_Region_826972199 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002c|SYNTHETIC\lEDGE_INSN: B:15:0x002c\-\>B:11:0x002c ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_917374629 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0029|LOOP_END\lLOOP:0: B:8:0x0024\-\>B:10:0x0029\l|r1++\l}"];
}
}
}
}
}
subgraph cluster_Region_1048164635 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_11 [shape=record,label="{11\:\ 0x002c|EDGE_INSN: B:15:0x002c\-\>B:11:0x002c ?: BREAK  \l|r0.append(r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|RETURN\l|return r0\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.padStart((r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_13 -> Node_14;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_15 -> Node_11;
Node_10 -> Node_8;
Node_11 -> Node_12;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

