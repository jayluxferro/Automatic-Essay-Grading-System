digraph "CFG forkotlin.text.StringsKt__StringsKt.split(Ljava\/lang\/CharSequence;[CZI)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"delimiters\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: ARRAY_LENGTH  (r0 I:int) = (r8 I:?[]) \l0x000b: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: AGET  (r8 I:char A[IMMUTABLE_TYPE]) = \l  (r8 I:char[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0011: INVOKE  (r8 I:java.lang.String) = (r8 I:char) java.lang.String.valueOf(char):java.lang.String type: STATIC \l0x0015: INVOKE  (r7 I:java.util.List) = \l  (r7 I:java.lang.CharSequence)\l  (r8 I:java.lang.String)\l  (r9 I:boolean)\l  (r10 I:int)\l kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(java.lang.CharSequence, java.lang.String, boolean, int):java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN  (r7 I:java.util.List\<java.lang.String\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x001e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x001f: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: INVOKE  (r8 I:kotlin.sequences.Sequence) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:char[])\l  (r2 I:int)\l  (r3 I:boolean)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence, char[], int, boolean, int, int, java.lang.Object):kotlin.sequences.Sequence type: STATIC \l0x0025: INVOKE  (r8 I:java.lang.Iterable) = (r8 I:kotlin.sequences.Sequence) kotlin.sequences.SequencesKt.asIterable(kotlin.sequences.Sequence):java.lang.Iterable type: STATIC \l0x0029: NEW_INSTANCE  (r9 I:java.util.ArrayList) =  java.util.ArrayList \l0x002b: CONST  (r10 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x002d: INVOKE  (r10 I:int) = (r8 I:java.lang.Iterable), (r10 I:int) kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int type: STATIC \l0x0031: INVOKE  (r9 I:java.util.ArrayList), (r10 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0034: CHECK_CAST  (r9 I:java.util.Collection) = (java.util.Collection) (r9 I:?[OBJECT, ARRAY]) \l0x0036: INVOKE  (r8 I:java.util.Iterator) = (r8 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: INVOKE  (r10 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: INVOKE  (r10 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0044: CHECK_CAST  (r10 I:kotlin.ranges.IntRange) = (kotlin.ranges.IntRange) (r10 I:?[OBJECT, ARRAY]) \l0x0046: INVOKE  (r10 I:java.lang.String) = \l  (r7 I:java.lang.CharSequence)\l  (r10 I:kotlin.ranges.IntRange)\l kotlin.text.StringsKt.substring(java.lang.CharSequence, kotlin.ranges.IntRange):java.lang.String type: STATIC \l0x004a: INVOKE  (r9 I:java.util.Collection), (r10 I:java.lang.Object) java.util.Collection.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x004e|0x004e: CHECK_CAST  (r9 I:java.util.List) = (java.util.List) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|0x0050: RETURN  (r9 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split((r7 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, [CZI), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
}

