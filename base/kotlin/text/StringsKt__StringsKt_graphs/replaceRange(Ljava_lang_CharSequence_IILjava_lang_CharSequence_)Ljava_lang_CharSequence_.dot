digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceRange(Ljava\/lang\/CharSequence;IILjava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"replacement\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r4 \< r3) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r2, 0, r3)\lr0.append(r5)\lr0.append(r2, r4, r2.length())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|RETURN\l|return r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"End index (\")\lr5.append(r4)\lr5.append(\") is less than start index (\")\lr5.append(r3)\lr5.append(\").\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0047|throw new java.lang.IndexOutOfBoundsException(r5.toString())\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.replaceRange((r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

