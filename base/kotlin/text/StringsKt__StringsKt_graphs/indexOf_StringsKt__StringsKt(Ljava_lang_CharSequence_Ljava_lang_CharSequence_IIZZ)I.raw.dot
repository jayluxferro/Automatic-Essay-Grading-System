digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;IIZZ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r8 I:int) = (r8 I:int), (r0 I:int) kotlin.ranges.RangesKt.coerceAtLeast(int, int):int type: STATIC \l0x0007: NEW_INSTANCE  (r11 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0009: INVOKE  (r0 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x000d: INVOKE  (r9 I:int) = (r9 I:int), (r0 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l0x0011: INVOKE  (r11 I:kotlin.ranges.IntRange), (r8 I:int), (r9 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l0x0014: CHECK_CAST  (r11 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: INVOKE  (r11 I:int) = (r6 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l0x001b: INVOKE  (r8 I:int) = (r8 I:int), (r11 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l0x001f: INVOKE  (r9 I:int) = (r9 I:int), (r0 I:int) kotlin.ranges.RangesKt.coerceAtLeast(int, int):int type: STATIC \l0x0023: INVOKE  (r11 I:kotlin.ranges.IntProgression) = (r8 I:int), (r9 I:int) kotlin.ranges.RangesKt.downTo(int, int):kotlin.ranges.IntProgression type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: INSTANCE_OF  (r8 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005a \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: INSTANCE_OF  (r8 I:boolean) = (r7 I:?[OBJECT, ARRAY]) java.lang.String \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005a \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: INVOKE  (r8 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getFirst():int type: VIRTUAL \l0x0033: INVOKE  (r9 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getLast():int type: VIRTUAL \l0x0037: INVOKE  (r11 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getStep():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0040 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: IF  (r8 I:?[int, byte, short, char]) \> (r9 I:?[int, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: IF  (r8 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0043: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l0x0045: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0046: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0047: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  (r4 I:int) = (r7 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x004d: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004f: INVOKE  (r0 I:boolean) = \l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l kotlin.text.StringsKt.regionMatches(java.lang.String, int, java.lang.String, int, int, boolean):boolean type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0056 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: RETURN  (r8 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: ARITH  (r8 I:int) = (r8 I:int) + (r11 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005a|0x005a: INVOKE  (r8 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getFirst():int type: VIRTUAL \l0x005e: INVOKE  (r9 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getLast():int type: VIRTUAL \l0x0062: INVOKE  (r11 I:int) = (r11 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getStep():int type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x006b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|0x0068: IF  (r8 I:?[int, byte, short, char]) \> (r9 I:?[int, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_22 [shape=record,label="{22\:\ 0x006b|0x006b: IF  (r8 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_23 [shape=record,label="{23\:\ 0x006d|0x006d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x006e: INVOKE  (r4 I:int) = (r7 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0072: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0073: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0074: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0076: INVOKE  (r0 I:boolean) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:int)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x007a|0x007a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x007d \l}"];
Node_25 [shape=record,label="{25\:\ 0x007c|0x007c: RETURN  (r8 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x007d|0x007d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0081 \l}"];
Node_27 [shape=record,label="{27\:\ 0x007f|0x007f: ARITH  (r8 I:int) = (r8 I:int) + (r11 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0081|0x0081: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0082|0x0082: RETURN  (r6 I:int) \l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt((r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_18;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_28;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_28;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_28;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_28;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_23;
Node_28 -> Node_29;
}

