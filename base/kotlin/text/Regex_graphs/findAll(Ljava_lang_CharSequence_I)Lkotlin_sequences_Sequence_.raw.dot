digraph "CFG forkotlin.text.Regex.findAll(Ljava\/lang\/CharSequence;I)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: NEW_INSTANCE  (r0 I:kotlin.text.Regex$findAll$1) =  kotlin.text.Regex$findAll$1 \l0x0007: INVOKE  \l  (r0 I:kotlin.text.Regex$findAll$1)\l  (r1 I:kotlin.text.Regex)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:int)\l kotlin.text.Regex$findAll$1.\<init\>(kotlin.text.Regex, java.lang.CharSequence, int):void type: DIRECT \l0x000a: CHECK_CAST  (r0 I:kotlin.jvm.functions.Function0) = (kotlin.jvm.functions.Function0) (r0 I:?[OBJECT, ARRAY]) \l0x000c: SGET  (r2 I:kotlin.text.Regex$findAll$2) =  kotlin.text.Regex$findAll$2.INSTANCE kotlin.text.Regex$findAll$2 \l0x000e: CHECK_CAST  (r2 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r2 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r2 I:kotlin.sequences.Sequence) = \l  (r0 I:kotlin.jvm.functions.Function0)\l  (r2 I:kotlin.jvm.functions.Function1)\l kotlin.sequences.SequencesKt.generateSequence(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: RETURN  (r2 I:kotlin.sequences.Sequence\<kotlin.text.MatchResult\>) \l}"];
MethodNode[shape=record,label="{public final kotlin.sequences.Sequence\<kotlin.text.MatchResult\> kotlin.text.Regex.findAll((r1 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, I), Lkotlin\/sequences\/Sequence\<, Lkotlin\/text\/MatchResult;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

