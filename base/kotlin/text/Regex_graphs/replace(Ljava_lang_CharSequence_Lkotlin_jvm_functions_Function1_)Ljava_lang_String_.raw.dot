digraph "CFG forkotlin.text.Regex.replace(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: INVOKE  (r1 I:kotlin.text.MatchResult) = \l  (r5 I:kotlin.text.Regex)\l  (r6 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l kotlin.text.Regex.find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object):kotlin.text.MatchResult type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x005e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0017: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: INVOKE  (r4 I:kotlin.ranges.IntRange) = (r1 I:kotlin.text.MatchResult) kotlin.text.MatchResult.getRange():kotlin.ranges.IntRange type: INTERFACE \l0x0025: INVOKE  (r4 I:java.lang.Integer) = (r4 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getStart():java.lang.Integer type: VIRTUAL \l0x0029: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x002d: INVOKE  \l  (r3 I:java.lang.StringBuilder)\l  (r6 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r4 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r0 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0034: CHECK_CAST  (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:?[OBJECT, ARRAY]) \l0x0036: INVOKE  \l  (r3 I:java.lang.StringBuilder)\l  (r0 I:java.lang.CharSequence)\l java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r1 I:kotlin.text.MatchResult) kotlin.text.MatchResult.getRange():kotlin.ranges.IntRange type: INTERFACE \l0x003d: INVOKE  (r0 I:java.lang.Integer) = (r0 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer type: VIRTUAL \l0x0041: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0045: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0047: INVOKE  (r1 I:kotlin.text.MatchResult) = (r1 I:kotlin.text.MatchResult) kotlin.text.MatchResult.next():kotlin.text.MatchResult type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x004b|0x004b: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:8:0x004f \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0054 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: INVOKE  \l  (r3 I:java.lang.StringBuilder)\l  (r6 I:java.lang.CharSequence)\l  (r0 I:int)\l  (r2 I:int)\l java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0054|0x0054: INVOKE  (r6 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0058: CONST_STR  (r7 I:java.lang.String) =  \"sb.toString()\" \l0x005a: INVOKE  (r6 I:java.lang.Object), (r7 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x005d|0x005d: RETURN  (r6 I:java.lang.String) \l}"];
Node_12 [shape=record,label="{12\:\ 0x005e|0x005e: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: RETURN  (r6 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.text.Regex.replace((r5 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super kotlin.text.MatchResult, ? extends java.lang.CharSequence\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Lkotlin\/jvm\/functions\/Function1\<, \-, Lkotlin\/text\/MatchResult;, +, Ljava\/lang\/CharSequence;, \>;), Ljava\/lang\/String;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_3;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

