digraph "CFG forkotlin.text.Regex.findAll$default(Lkotlin\/text\/Regex;Ljava\/lang\/CharSequence;IILjava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_36975932 {
label = "R(2:(1:2)|4)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1257312753 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r3 & 2) != 0) goto L_0x0004\l}"];
subgraph cluster_Region_1774244618 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = 0\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return r0.findAll(r1, r2)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0005|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ kotlin.sequences.Sequence kotlin.text.Regex.findAll$default((r0v0 kotlin.text.Regex A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

