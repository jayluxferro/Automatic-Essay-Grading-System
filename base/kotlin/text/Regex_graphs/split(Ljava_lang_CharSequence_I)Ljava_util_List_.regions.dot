digraph "CFG forkotlin.text.Regex.split(Ljava\/lang\/CharSequence;I)Ljava\/util\/List;" {
subgraph cluster_Region_453982371 {
label = "R(2:0|(2:(4:5|(1:7)|8|9)|(2:10|11)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"input\")\l}"];
subgraph cluster_Region_1951960418 {
label = "R(2:(4:5|(1:7)|8|9)|(2:10|11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1212359895 {
label = "IF [B:4:0x000a] THEN: R(4:5|(1:7)|8|9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|PHI: r0 \l  PHI: (r0v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 \>= 0) == true) goto L_0x000c\l}"];
subgraph cluster_Region_1663030869 {
label = "R(4:5|(1:7)|8|9)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000c|java.util.regex.Pattern java.util.regex.Pattern r0 = r1.nativePattern\l}"];
subgraph cluster_IfRegion_1899611478 {
label = "IF [B:6:0x000e] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r3 == 0) goto L_0x0010\l}"];
subgraph cluster_Region_328282610 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|r3 = \-1\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0011|PHI: r3 \l  PHI: (r3v4 int) = (r3v0 int), (r3v6 int) binds: [B:6:0x000e, B:7:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String[] java.lang.String[] r2 = r0.split(r2, r3)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r2, \"nativePattern.split(inpuâ€¦imit == 0) \-1 else limit)\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|return kotlin.collections.ArraysKt.asList((T[]) r2)\l}"];
}
}
subgraph cluster_Region_596807039 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001f}"];
Node_11 [shape=record,label="{11\:\ 0x0040|throw new java.lang.IllegalArgumentException((\"Limit must be non\-negative, but was \" + r3 + '.').toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0009}"];
MethodNode[shape=record,label="{public final java.util.List\<java.lang.String\> kotlin.text.Regex.split((r1v0 'this' kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, I), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

