digraph "CFG forkotlin.text.Regex.\<init\>(Ljava\/lang\/String;Lkotlin\/text\/RegexOption;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"pattern\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"option\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: SGET  (r0 I:kotlin.text.Regex$Companion) =  kotlin.text.Regex.Companion kotlin.text.Regex$Companion \l0x000c: INVOKE  (r3 I:int) = (r3 I:kotlin.text.RegexOption) kotlin.text.RegexOption.getValue():int type: VIRTUAL \l0x0010: INVOKE  (r3 I:int) = (r0 I:kotlin.text.Regex$Companion), (r3 I:int) kotlin.text.Regex.Companion.access$ensureUnicodeCase(kotlin.text.Regex$Companion, int):int type: STATIC \l0x0014: INVOKE  (r2 I:java.util.regex.Pattern) = (r2 I:java.lang.String), (r3 I:int) java.util.regex.Pattern.compile(java.lang.String, int):java.util.regex.Pattern type: STATIC \l0x0018: CONST_STR  (r3 I:java.lang.String) =  \"Pattern.compile(pattern,â€¦nicodeCase(option.value))\" \l0x001a: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x001d: INVOKE  (r1 I:kotlin.text.Regex), (r2 I:java.util.regex.Pattern) kotlin.text.Regex.\<init\>(java.util.regex.Pattern):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.text.Regex.\<init\>((r1 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.text.RegexOption A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

