digraph "CFG forkotlin.text.MatcherMatchResult.next()Lkotlin\/text\/MatchResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matchResult java.util.regex.MatchResult \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.regex.MatchResult) java.util.regex.MatchResult.end():int type: INTERFACE \l0x0006: IGET  (r1 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matchResult java.util.regex.MatchResult \l0x0008: INVOKE  (r1 I:int) = (r1 I:java.util.regex.MatchResult) java.util.regex.MatchResult.end():int type: INTERFACE \l0x000c: IGET  (r2 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matchResult java.util.regex.MatchResult \l0x000e: INVOKE  (r2 I:int) = (r2 I:java.util.regex.MatchResult) java.util.regex.MatchResult.start():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0018: IGET  (r1 I:java.lang.CharSequence) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.input java.lang.CharSequence \l0x001a: INVOKE  (r1 I:int) = (r1 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IGET  (r1 I:java.util.regex.Matcher) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matcher java.util.regex.Matcher \l0x0022: IGET  (r2 I:java.lang.CharSequence) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.input java.lang.CharSequence \l0x0024: INVOKE  (r0 I:kotlin.text.MatchResult) = \l  (r1 I:java.util.regex.Matcher)\l  (r0 I:int)\l  (r2 I:java.lang.CharSequence)\l kotlin.text.RegexKt.access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence):kotlin.text.MatchResult type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: RETURN  (r0 I:kotlin.text.MatchResult) \l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchResult kotlin.text.MatcherMatchResult.next((r3 'this' I:kotlin.text.MatcherMatchResult A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

