digraph "CFG forkotlin.text.MatcherMatchResult.getRange()Lkotlin\/ranges\/IntRange;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.regex.MatchResult) = (r2 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matchResult java.util.regex.MatchResult \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"matchResult\" \l0x0004: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0007: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r0 I:java.util.regex.MatchResult) kotlin.text.RegexKt.access$range(java.util.regex.MatchResult):kotlin.ranges.IntRange type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: RETURN  (r0 I:kotlin.ranges.IntRange) \l}"];
MethodNode[shape=record,label="{public kotlin.ranges.IntRange kotlin.text.MatcherMatchResult.getRange((r2 'this' I:kotlin.text.MatcherMatchResult A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

