digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.split(Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List;" {
subgraph cluster_Region_1168120787 {
label = "R(2:0|(2:(3:(1:6)|7|8)|(2:9|10)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"regex\")\l}"];
subgraph cluster_Region_2144030950 {
label = "R(2:(3:(1:6)|7|8)|(2:9|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1669353733 {
label = "IF [B:4:0x000f] THEN: R(3:(1:6)|7|8) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|PHI: r0 \l  PHI: (r0v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 \>= 0) == true) goto L_0x0011\l}"];
subgraph cluster_Region_1640699222 {
label = "R(3:(1:6)|7|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1598669085 {
label = "IF [B:5:0x0011] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r3 == 0) goto L_0x0013\l}"];
subgraph cluster_Region_452077476 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0013|r3 = \-1\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0014|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:5:0x0011, B:6:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String[] java.lang.String[] r1 = r2.split(r1, r3)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r1, \"regex.split(this, if (limit == 0) \-1 else limit)\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|RETURN\l|return kotlin.collections.ArraysKt.asList((T[]) r1)\l}"];
}
}
subgraph cluster_Region_1067124860 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0022}"];
Node_10 [shape=record,label="{10\:\ 0x0043|throw new java.lang.IllegalArgumentException((\"Limit must be non\-negative, but was \" + r3 + '.').toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000a}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000c}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000e}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsJVMKt.split((r1v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.util.regex.Pattern A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/util\/regex\/Pattern;, I), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

