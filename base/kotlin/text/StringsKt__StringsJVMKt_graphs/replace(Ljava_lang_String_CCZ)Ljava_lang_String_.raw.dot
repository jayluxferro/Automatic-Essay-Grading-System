digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.replace(Ljava\/lang\/String;CCZ)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"$receiver\" \l0x0004: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r0 I:java.lang.String) = (r17 I:java.lang.String), (r18 I:char), (r19 I:char) java.lang.String.replace(char, char):java.lang.String type: VIRTUAL \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"(this as java.lang.Strinâ€¦replace(oldChar, newChar)\" \l0x000f: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0014: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x0016: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0017: NEW_ARRAY  (r3 I:char[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: APUT  \l  (r3 I:char[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r18 I:char A[IMMUTABLE_TYPE])\l \l0x001c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x001e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: INVOKE  (r8 I:kotlin.sequences.Sequence) = \l  (r2 I:java.lang.CharSequence)\l  (r3 I:char[])\l  (r4 I:boolean)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l kotlin.text.StringsKt.splitToSequence$default(java.lang.CharSequence, char[], boolean, int, int, java.lang.Object):kotlin.sequences.Sequence type: STATIC \l0x0025: INVOKE  (r0 I:java.lang.String) = (r19 I:char) java.lang.String.valueOf(char):java.lang.String type: STATIC \l0x0029: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002a: CHECK_CAST  (r9 I:java.lang.CharSequence) = (java.lang.CharSequence) (r9 I:?[OBJECT, ARRAY]) \l0x002c: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0031: CONST  (r15 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x0033: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: INVOKE  (r0 I:java.lang.String) = \l  (r8 I:kotlin.sequences.Sequence)\l  (r9 I:java.lang.CharSequence)\l  (r10 I:java.lang.CharSequence)\l  (r11 I:java.lang.CharSequence)\l  (r12 I:int)\l  (r13 I:java.lang.CharSequence)\l  (r14 I:kotlin.jvm.functions.Function1)\l  (r15 I:int)\l  (r16 I:java.lang.Object)\l kotlin.sequences.SequencesKt.joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|0x0039: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.replace((r17 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

