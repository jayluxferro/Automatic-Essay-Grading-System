digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.repeat(Ljava\/lang\/CharSequence;I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0057 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x002b, 0x0026] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r2 I:int) = (r3 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x0042, 0x002e] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r2 I:int) = (r3 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x001e: ARITH  (r2 I:int) = (r2 I:int) * (r4 I:int) \l0x0020: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r1 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:21:0x004d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: INVOKE  (r3 I:char) = (r3 I:java.lang.CharSequence), (r0 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0032: NEW_ARRAY  (r4 I:char[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0034: ARRAY_LENGTH  (r1 I:int) = (r4 I:?[]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:16:0x003c \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: APUT  \l  (r4 I:char[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r3 I:char A[IMMUTABLE_TYPE])\l \l0x0039: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: NEW_INSTANCE  (r3 I:java.lang.String) =  java.lang.String \l0x003e: INVOKE  (r3 I:java.lang.String), (r4 I:char[]) java.lang.String.\<init\>(char[]):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r3 I:java.lang.CharSequence)\l java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x004d \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0051: CONST_STR  (r4 I:java.lang.String) =  \"sb.toString()\" \l0x0053: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: RETURN  (r3 I:java.lang.String) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0057|0x0057: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0059: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005c: CONST_STR  (r0 I:java.lang.String) =  \"Count 'n' must be non\-negative, but was \" \l0x005e: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0061: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0064: CONST  (r4 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0066: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0069: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006d: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0073: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0076: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.repeat((r3 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_13;
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_21;
Node_9 -> Node_18[style=dashed];
Node_11 -> Node_22;
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_14;
Node_16 -> Node_22;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_18;
Node_21 -> Node_22;
Node_23 -> Node_24;
}

