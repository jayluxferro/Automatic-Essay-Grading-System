digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.split(Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"regex\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r3 \< 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v3 boolean), (r0v4 boolean) binds: [B:3:0x000e, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x0022\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r3 != 0) goto L_0x0014\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|r3 = \-1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:5:0x0011, B:6:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String[] r1 = r2.split(r1, r3)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r1, \"regex.split(this, if (limit == 0) \-1 else limit)\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|RETURN\l|return kotlin.collections.ArraysKt.asList((T[]) r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Limit must be non\-negative, but was \")\lr1.append(r3)\lr1.append('.')\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsJVMKt.split((r1v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.util.regex.Pattern A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/CharSequence;, Ljava\/util\/regex\/Pattern;, I), Ljava\/util\/List\<, Ljava\/lang\/String;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

