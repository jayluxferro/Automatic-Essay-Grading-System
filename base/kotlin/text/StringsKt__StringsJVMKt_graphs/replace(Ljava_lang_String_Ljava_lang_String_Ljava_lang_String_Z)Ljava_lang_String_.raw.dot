digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.replace(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Z)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0006: CONST_STR  (r3 I:java.lang.String) =  \"$receiver\" \l0x0008: INVOKE  (r0 I:java.lang.Object), (r3 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"oldValue\" \l0x000d: INVOKE  (r1 I:java.lang.Object), (r3 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0010: CONST_STR  (r3 I:java.lang.String) =  \"newValue\" \l0x0012: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0015: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0016: CHECK_CAST  (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:?[OBJECT, ARRAY]) \l0x0018: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: NEW_ARRAY  (r5 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x001e: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r8 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0020: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  (r10 I:kotlin.sequences.Sequence) = \l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.String[])\l  (r6 I:boolean)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l kotlin.text.StringsKt.splitToSequence$default(java.lang.CharSequence, java.lang.String[], boolean, int, int, java.lang.Object):kotlin.sequences.Sequence type: STATIC \l0x0027: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0028: CHECK_CAST  (r11 I:java.lang.CharSequence) = (java.lang.CharSequence) (r11 I:?[OBJECT, ARRAY]) \l0x002a: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: CONST  (r17 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x0032: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0034: INVOKE  (r0 I:java.lang.String) = \l  (r10 I:kotlin.sequences.Sequence)\l  (r11 I:java.lang.CharSequence)\l  (r12 I:java.lang.CharSequence)\l  (r13 I:java.lang.CharSequence)\l  (r14 I:int)\l  (r15 I:java.lang.CharSequence)\l  (r16 I:kotlin.jvm.functions.Function1)\l  (r17 I:int)\l  (r18 I:java.lang.Object)\l kotlin.sequences.SequencesKt.joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.replace((r19 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

