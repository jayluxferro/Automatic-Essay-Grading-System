digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.isBlank(Ljava\/lang\/CharSequence;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r4 I:java.lang.CharSequence) kotlin.text.StringsKt.getIndices(java.lang.CharSequence):kotlin.ranges.IntRange type: STATIC \l0x0011: CHECK_CAST  (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:?[OBJECT, ARRAY]) \l0x0013: INSTANCE_OF  (r3 I:boolean) = (r0 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0018: CHECK_CAST  (r3 I:java.util.Collection) = (java.util.Collection) (r3 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r3 I:boolean) = (r3 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002d: CHECK_CAST  (r3 I:kotlin.collections.IntIterator) = (kotlin.collections.IntIterator) (r3 I:?[OBJECT, ARRAY]) \l0x002f: INVOKE  (r3 I:int) = (r3 I:kotlin.collections.IntIterator) kotlin.collections.IntIterator.nextInt():int type: VIRTUAL \l0x0033: INVOKE  (r3 I:char) = (r4 I:java.lang.CharSequence), (r3 I:int) java.lang.CharSequence.charAt(int):char type: INTERFACE \l0x0037: INVOKE  (r3 I:boolean) = (r3 I:char) kotlin.text.CharsKt.isWhitespace(char):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0041 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.isBlank((r4 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

