digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.repeat(Ljava\/lang\/CharSequence;I)Ljava\/lang\/String;" {
subgraph cluster_Region_1860227997 {
label = "R(2:0|(1:5)(2:21|22))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lint r0 = 0\lint r1 = 1\l}"];
subgraph cluster_IfRegion_168296187 {
label = "IF [B:4:0x000c] THEN: R(1:5) ELSE: R(2:21|22)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r2 \l  PHI: (r2v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r4 \>= 0) == true) goto L_0x000e\l}"];
subgraph cluster_Region_473723389 {
label = "R(1:5)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_827645139 {
label = "Switch: 2, default: R(1:7)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|switch(r4) \{\l    case 0: goto L_0x002b;\l    case 1: goto L_0x0026;\l    default: goto L_0x0011;\l\}\l}"];
subgraph cluster_Region_841001373 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002b|SYNTHETIC\lRETURN\l|return \"\"\l}"];
}
subgraph cluster_Region_124086532 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return r3.toString()\l}"];
}
subgraph cluster_Region_2015970188 {
label = "R(1:7)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_1863100958 {
label = "Switch: 2, default: R(4:8|(1:(2:17|(1:19)(0)))|20|25)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0015|switch(r3.length()) \{\l    case 0: goto L_0x0042;\l    case 1: goto L_0x002e;\l    default: goto L_0x0018;\l\}\l}"];
subgraph cluster_Region_1490520611 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0042|SYNTHETIC\lRETURN\l|return \"\"\l}"];
}
subgraph cluster_Region_672820037 {
label = "R(3:12|(1:14)|27)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x002e|char char r3 = r3.charAt(0)\lchar[] char[] r4 = new char[r4]\lint int r1 = r4.length\l}"];
subgraph cluster_LoopRegion_1387650647 {
label = "LOOP:0: (1:14)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0035|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v1 int), (r0v4 int) binds: [B:12:0x002e, B:14:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:13:0x0035\-\>B:14:0x0037\l|if (r0 \< r1) goto L_0x0037\l}"];
subgraph cluster_Region_721184534 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0037|LOOP_END\lLOOP:0: B:13:0x0035\-\>B:14:0x0037\l|r4[r0] = r3\lr0++\l}"];
}
}
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return new java.lang.String(r4)\l}"];
}
subgraph cluster_Region_1628929415 {
label = "R(4:8|(1:(2:17|(1:19)(0)))|20|25)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0018|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(r3.length() * r4)\l}"];
subgraph cluster_IfRegion_1960244596 {
label = "IF [B:9:0x0023] THEN: R(1:(2:17|(1:19)(0))) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0023|if (1 \<= r4) goto L_0x0045\l}"];
subgraph cluster_Region_1179778369 {
label = "R(1:(2:17|(1:19)(0)))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1275589583 {
label = "LOOP:1: (2:17|(1:19)(0))";
node [shape=record,color=blue];
subgraph cluster_Region_1974522613 {
label = "R(2:17|(1:19)(0))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0045|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v0 int), (r1v3 int) binds: [B:9:0x0023, B:19:0x004a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:17:0x0045\-\>B:19:0x004a\l|r0.append(r3)\l}"];
subgraph cluster_IfRegion_1411465456 {
label = "IF [B:18:0x0048] THEN: R(1:19) ELSE: R(0)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0048|if (r1 != r4) goto L_0x004a\l}"];
subgraph cluster_Region_1010106576 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x004a|LOOP_END\lLOOP:1: B:17:0x0045\-\>B:19:0x004a\l|r1++\l}"];
}
subgraph cluster_Region_686157566 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
Node_20 [shape=record,label="{20\:\ 0x004d|java.lang.String java.lang.String r3 = r0.toString()\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r3, \"sb.toString()\")\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r3\l}"];
}
}
}
}
}
subgraph cluster_Region_1809564611 {
label = "R(2:21|22)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0057}"];
Node_22 [shape=record,label="{22\:\ 0x0078|throw new java.lang.IllegalArgumentException((\"Count 'n' must be non\-negative, but was \" + r4 + '.').toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0007}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0026}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x003c}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x003c|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x004d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.repeat((r3v0 java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_21[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_10;
Node_5 -> Node_11;
Node_7 -> Node_8;
Node_7 -> Node_12;
Node_7 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_23[style=dashed];
Node_14 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_20[style=dashed];
Node_9 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_24[style=dashed];
Node_19 -> Node_17;
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_10 -> Node_26;
Node_15 -> Node_27;
Node_23 -> Node_15;
Node_24 -> Node_20;
}

