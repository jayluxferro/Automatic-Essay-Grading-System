digraph "CFG forkotlin.text.MatcherMatchResult$groups$1.iterator()Ljava\/util\/Iterator;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r2 I:java.util.Collection) kotlin.collections.CollectionsKt.getIndices(java.util.Collection):kotlin.ranges.IntRange type: STATIC \l0x0004: CHECK_CAST  (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:java.lang.Iterable) kotlin.collections.CollectionsKt.asSequence(java.lang.Iterable):kotlin.sequences.Sequence type: STATIC \l0x000a: NEW_INSTANCE  (r1 I:kotlin.text.MatcherMatchResult$groups$1$iterator$1) =  kotlin.text.MatcherMatchResult$groups$1$iterator$1 \l0x000c: INVOKE  \l  (r1 I:kotlin.text.MatcherMatchResult$groups$1$iterator$1)\l  (r2 I:kotlin.text.MatcherMatchResult$groups$1)\l kotlin.text.MatcherMatchResult$groups$1$iterator$1.\<init\>(kotlin.text.MatcherMatchResult$groups$1):void type: DIRECT \l0x000f: CHECK_CAST  (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r0 I:kotlin.sequences.Sequence) = \l  (r0 I:kotlin.sequences.Sequence)\l  (r1 I:kotlin.jvm.functions.Function1)\l kotlin.sequences.SequencesKt.map(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence type: STATIC \l0x0015: INVOKE  (r0 I:java.util.Iterator) = (r0 I:kotlin.sequences.Sequence) kotlin.sequences.Sequence.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN  (r0 I:java.util.Iterator\<kotlin.text.MatchGroup\>) \l}"];
MethodNode[shape=record,label="{public java.util.Iterator\<kotlin.text.MatchGroup\> kotlin.text.MatcherMatchResult$groups$1.iterator((r2 'this' I:kotlin.text.MatcherMatchResult$groups$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Iterator\<, Lkotlin\/text\/MatchGroup;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

