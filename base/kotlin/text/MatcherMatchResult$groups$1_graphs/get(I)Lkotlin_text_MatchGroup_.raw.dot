digraph "CFG forkotlin.text.MatcherMatchResult$groups$1.get(I)Lkotlin\/text\/MatchGroup;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:kotlin.text.MatcherMatchResult) = (r3 I:kotlin.text.MatcherMatchResult$groups$1) kotlin.text.MatcherMatchResult$groups$1.this$0 kotlin.text.MatcherMatchResult \l0x0002: INVOKE  (r0 I:java.util.regex.MatchResult) = (r0 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.access$getMatchResult$p(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult type: STATIC \l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"matchResult\" \l0x0008: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000b: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r0 I:java.util.regex.MatchResult), (r4 I:int) kotlin.text.RegexKt.access$range(java.util.regex.MatchResult, int):kotlin.ranges.IntRange type: STATIC \l0x000f: INVOKE  (r1 I:java.lang.Integer) = (r0 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getStart():java.lang.Integer type: VIRTUAL \l0x0013: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: NEW_INSTANCE  (r1 I:kotlin.text.MatchGroup) =  kotlin.text.MatchGroup \l0x001b: IGET  (r2 I:kotlin.text.MatcherMatchResult) = (r3 I:kotlin.text.MatcherMatchResult$groups$1) kotlin.text.MatcherMatchResult$groups$1.this$0 kotlin.text.MatcherMatchResult \l0x001d: INVOKE  (r2 I:java.util.regex.MatchResult) = (r2 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.access$getMatchResult$p(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult type: STATIC \l0x0021: INVOKE  (r4 I:java.lang.String) = (r2 I:java.util.regex.MatchResult), (r4 I:int) java.util.regex.MatchResult.group(int):java.lang.String type: INTERFACE \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"matchResult.group(index)\" \l0x0027: INVOKE  (r4 I:java.lang.Object), (r2 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x002a: INVOKE  \l  (r1 I:kotlin.text.MatchGroup)\l  (r4 I:java.lang.String)\l  (r0 I:kotlin.ranges.IntRange)\l kotlin.text.MatchGroup.\<init\>(java.lang.String, kotlin.ranges.IntRange):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x002e|0x002e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: RETURN  (r1 I:kotlin.text.MatchGroup) \l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchGroup kotlin.text.MatcherMatchResult$groups$1.get((r3 'this' I:kotlin.text.MatcherMatchResult$groups$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

