digraph "CFG forkotlin.text.CharCategory.Companion.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: NEW_ARRAY  (r0 I:kotlin.reflect.KProperty[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: kotlin.reflect.KProperty[] \l0x0003: NEW_INSTANCE  (r1 I:kotlin.jvm.internal.PropertyReference1Impl) =  kotlin.jvm.internal.PropertyReference1Impl \l0x0005: CONST_CLASS  (r2 I:java.lang.Class\<kotlin.text.CharCategory$Companion\>) =  kotlin.text.CharCategory$Companion.class \l0x0007: INVOKE  (r2 I:kotlin.reflect.KClass) = (r2 I:java.lang.Class) kotlin.jvm.internal.Reflection.getOrCreateKotlinClass(java.lang.Class):kotlin.reflect.KClass type: STATIC \l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"categoryMap\" \l0x000d: CONST_STR  (r4 I:java.lang.String) =  \"getCategoryMap()Ljava\/util\/Map;\" \l0x000f: INVOKE  \l  (r1 I:kotlin.jvm.internal.PropertyReference1Impl)\l  (r2 I:kotlin.reflect.KDeclarationContainer)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l kotlin.jvm.internal.PropertyReference1Impl.\<init\>(kotlin.reflect.KDeclarationContainer, java.lang.String, java.lang.String):void type: DIRECT \l0x0012: INVOKE  (r1 I:kotlin.reflect.KProperty1) = (r1 I:kotlin.jvm.internal.PropertyReference1) kotlin.jvm.internal.Reflection.property1(kotlin.jvm.internal.PropertyReference1):kotlin.reflect.KProperty1 type: STATIC \l0x0016: CHECK_CAST  (r1 I:kotlin.reflect.KProperty) = (kotlin.reflect.KProperty) (r1 I:?[OBJECT, ARRAY]) \l0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x001b: SPUT  (r0 I:kotlin.reflect.KProperty[]) kotlin.text.CharCategory.Companion.$$delegatedProperties kotlin.reflect.KProperty[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: RETURN   \l}"];
MethodNode[shape=record,label="{static void kotlin.text.CharCategory.Companion.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

