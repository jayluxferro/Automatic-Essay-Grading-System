digraph "CFG forkotlin.text.RegexKt.matchEntire(Ljava\/util\/regex\/Matcher;Ljava\/lang\/CharSequence;)Lkotlin\/text\/MatchResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r1 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:kotlin.text.MatcherMatchResult) =  kotlin.text.MatcherMatchResult \l0x000a: INVOKE  \l  (r0 I:kotlin.text.MatcherMatchResult)\l  (r1 I:java.util.regex.Matcher)\l  (r2 I:java.lang.CharSequence)\l kotlin.text.MatcherMatchResult.\<init\>(java.util.regex.Matcher, java.lang.CharSequence):void type: DIRECT \l0x000d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000e: CHECK_CAST  (r1 I:kotlin.text.MatchResult) = (kotlin.text.MatchResult) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r1 I:kotlin.text.MatchResult) \l}"];
MethodNode[shape=record,label="{private static final kotlin.text.MatchResult kotlin.text.RegexKt.matchEntire((r1 I:java.util.regex.Matcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

