digraph "CFG forkotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1.invoke(Ljava\/lang\/Enum;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1) kotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1.$value$inlined int \l0x0002: CHECK_CAST  (r3 I:kotlin.text.FlagEnum) = (kotlin.text.FlagEnum) (r3 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  (r1 I:int) = (r3 I:kotlin.text.FlagEnum) kotlin.text.FlagEnum.getMask():int type: INTERFACE \l0x0008: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r1 I:?[int, boolean, short, byte, char]) \l0x0009: INVOKE  (r3 I:int) = (r3 I:kotlin.text.FlagEnum) kotlin.text.FlagEnum.getValue():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1.invoke((r2 'this' I:kotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

