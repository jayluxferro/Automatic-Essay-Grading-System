digraph "CFG forkotlin.text.DelimitedRangesSequence$iterator$1.calcNext()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IPUT  \l  (r1 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextState int \l0x0007: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CHECK_CAST  (r0 I:kotlin.ranges.IntRange) = (kotlin.ranges.IntRange) (r0 I:?[OBJECT, ARRAY]) \l0x000a: IPUT  \l  (r0 I:kotlin.ranges.IntRange)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r0 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0010: INVOKE  (r0 I:int) = (r0 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getLimit$p(kotlin.text.DelimitedRangesSequence):int type: STATIC \l0x0014: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0015: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.counter int \l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x001b: IPUT  \l  (r0 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.counter int \l0x001d: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.counter int \l0x001f: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0021: INVOKE  (r4 I:int) = (r4 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getLimit$p(kotlin.text.DelimitedRangesSequence):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:9:0x0035 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l0x0029: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x002b: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence type: STATIC \l0x002f: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) java.lang.CharSequence.length():int type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r0 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:10:0x004b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x0037: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0039: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x003b: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence type: STATIC \l0x003f: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l0x0043: INVOKE  (r1 I:kotlin.ranges.IntRange), (r0 I:int), (r4 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l0x0046: IPUT  \l  (r1 I:kotlin.ranges.IntRange)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0048: IPUT  \l  (r2 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: IGET  (r0 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x004d: INVOKE  (r0 I:kotlin.jvm.functions.Function2) = (r0 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence):kotlin.jvm.functions.Function2 type: STATIC \l0x0051: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0053: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence type: STATIC \l0x0057: IGET  (r5 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l0x0059: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x005d: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlin.jvm.functions.Function2)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0061: CHECK_CAST  (r0 I:kotlin.Pair) = (kotlin.Pair) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0063|0x0063: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x007b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|0x0065: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x0067: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0069: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x006b: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence type: STATIC \l0x006f: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int type: STATIC \l0x0073: INVOKE  (r1 I:kotlin.ranges.IntRange), (r0 I:int), (r4 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l0x0076: IPUT  \l  (r1 I:kotlin.ranges.IntRange)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0078: IPUT  \l  (r2 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l}"];
Node_13 [shape=record,label="{13\:\ 0x007b|0x007b: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlin.Pair) kotlin.Pair.component1():java.lang.Object type: VIRTUAL \l0x007f: CHECK_CAST  (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:?[OBJECT, ARRAY]) \l0x0081: INVOKE  (r2 I:int) = (r2 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l0x0085: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.Pair) kotlin.Pair.component2():java.lang.Object type: VIRTUAL \l0x0089: CHECK_CAST  (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:?[OBJECT, ARRAY]) \l0x008b: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l0x008f: IGET  (r4 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x0091: INVOKE  (r4 I:kotlin.ranges.IntRange) = (r4 I:int), (r2 I:int) kotlin.ranges.RangesKt.until(int, int):kotlin.ranges.IntRange type: STATIC \l0x0095: IPUT  \l  (r4 I:kotlin.ranges.IntRange)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0097: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0098: IPUT  \l  (r2 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x009a: IGET  (r2 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l}"];
Node_14 [shape=record,label="{14\:\ 0x009c|0x009c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x009f \l}"];
Node_15 [shape=record,label="{15\:\ 0x009e|0x009e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x009f|0x009f: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x00a0: IPUT  \l  (r2 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l}"];
Node_17 [shape=record,label="{17\:\ 0x00a2|0x00a2: IPUT  \l  (r3 I:int)\l  (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextState int \l}"];
Node_18 [shape=record,label="{18\:\ 0x00a4|0x00a4: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlin.text.DelimitedRangesSequence$iterator$1.calcNext((r6 'this' I:kotlin.text.DelimitedRangesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

