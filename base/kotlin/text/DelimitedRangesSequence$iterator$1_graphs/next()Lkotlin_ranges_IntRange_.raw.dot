digraph "CFG forkotlin.text.DelimitedRangesSequence$iterator$1.next()Lkotlin\/ranges\/IntRange;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.calcNext():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r0 I:kotlin.ranges.IntRange) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CHECK_CAST  (r2 I:kotlin.ranges.IntRange) = (kotlin.ranges.IntRange) (r2 I:?[OBJECT, ARRAY]) \l0x0013: IPUT  \l  (r2 I:kotlin.ranges.IntRange)\l  (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0015: IPUT  \l  (r1 I:int)\l  (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1)\l kotlin.text.DelimitedRangesSequence$iterator$1.nextState int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r0 I:kotlin.ranges.IntRange) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x001a: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.ranges.IntRange\" \l0x001c: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0022: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x0025: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public kotlin.ranges.IntRange kotlin.text.DelimitedRangesSequence$iterator$1.next((r3 'this' I:kotlin.text.DelimitedRangesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

