digraph "CFG forkotlin.LazyKt__LazyJVMKt.lazy(Lkotlin\/LazyThreadSafetyMode;Lkotlin\/jvm\/functions\/Function0;)Lkotlin\/Lazy;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"mode\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"initializer\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: SGET  (r0 I:int[]) =  kotlin.LazyKt.WhenMappings.$EnumSwitchMapping$0 int[] \l0x000c: INVOKE  (r2 I:int) = (r2 I:kotlin.LazyThreadSafetyMode) kotlin.LazyThreadSafetyMode.ordinal():int type: VIRTUAL \l0x0010: AGET  (r2 I:?[int, float]) = (r0 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x002b, 0x0023, 0x001b] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: NEW_INSTANCE  (r2 I:kotlin.NoWhenBranchMatchedException) =  kotlin.NoWhenBranchMatchedException \l0x0017: INVOKE  (r2 I:kotlin.NoWhenBranchMatchedException) kotlin.NoWhenBranchMatchedException.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: NEW_INSTANCE  (r2 I:kotlin.UnsafeLazyImpl) =  kotlin.UnsafeLazyImpl \l0x001d: INVOKE  \l  (r2 I:kotlin.UnsafeLazyImpl)\l  (r3 I:kotlin.jvm.functions.Function0)\l kotlin.UnsafeLazyImpl.\<init\>(kotlin.jvm.functions.Function0):void type: DIRECT \l0x0020: CHECK_CAST  (r2 I:kotlin.Lazy) = (kotlin.Lazy) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: NEW_INSTANCE  (r2 I:kotlin.SafePublicationLazyImpl) =  kotlin.SafePublicationLazyImpl \l0x0025: INVOKE  \l  (r2 I:kotlin.SafePublicationLazyImpl)\l  (r3 I:kotlin.jvm.functions.Function0)\l kotlin.SafePublicationLazyImpl.\<init\>(kotlin.jvm.functions.Function0):void type: DIRECT \l0x0028: CHECK_CAST  (r2 I:kotlin.Lazy) = (kotlin.Lazy) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: NEW_INSTANCE  (r2 I:kotlin.SynchronizedLazyImpl) =  kotlin.SynchronizedLazyImpl \l0x002d: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x002e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002f: INVOKE  \l  (r2 I:kotlin.SynchronizedLazyImpl)\l  (r3 I:kotlin.jvm.functions.Function0)\l  (r1 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:kotlin.jvm.internal.DefaultConstructorMarker)\l kotlin.SynchronizedLazyImpl.\<init\>(kotlin.jvm.functions.Function0, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker):void type: DIRECT \l0x0032: CHECK_CAST  (r2 I:kotlin.Lazy) = (kotlin.Lazy) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: RETURN  (r2 I:kotlin.Lazy\<T\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.Lazy\<T\> kotlin.LazyKt__LazyJVMKt.lazy((r2 I:kotlin.LazyThreadSafetyMode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function0\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/LazyThreadSafetyMode;, Lkotlin\/jvm\/functions\/Function0\<, +TT;\>;), Lkotlin\/Lazy\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

