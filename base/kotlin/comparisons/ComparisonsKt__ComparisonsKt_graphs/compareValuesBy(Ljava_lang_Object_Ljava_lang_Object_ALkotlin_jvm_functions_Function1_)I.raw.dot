digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesBy(Ljava\/lang\/Object;Ljava\/lang\/Object;[Lkotlin\/jvm\/functions\/Function1;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"selectors\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: ARRAY_LENGTH  (r0 I:int) = (r3 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r1 I:int) = \l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l  (r3 I:kotlin.jvm.functions.Function1[])\l kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesByImpl$ComparisonsKt__ComparisonsKt(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1[]):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN  (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0014: CONST_STR  (r2 I:java.lang.String) =  \"Failed requirement.\" \l0x0016: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x001a: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x001d: CHECK_CAST  (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesBy((r1 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Comparable\<?\>\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;TT;[, Lkotlin\/jvm\/functions\/Function1\<, \-TT;+, Ljava\/lang\/Comparable\<, *\>;\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

