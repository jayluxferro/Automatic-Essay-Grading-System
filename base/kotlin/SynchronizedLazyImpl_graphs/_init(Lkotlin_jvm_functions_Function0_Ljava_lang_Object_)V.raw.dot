digraph "CFG forkotlin.SynchronizedLazyImpl.\<init\>(Lkotlin\/jvm\/functions\/Function0;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"initializer\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r2 I:kotlin.jvm.functions.Function0\<? extends T\>)\l  (r1 I:kotlin.SynchronizedLazyImpl)\l kotlin.SynchronizedLazyImpl.initializer kotlin.jvm.functions.Function0 \l0x000a: SGET  (r2 I:kotlin.UNINITIALIZED_VALUE) =  kotlin.UNINITIALIZED_VALUE.INSTANCE kotlin.UNINITIALIZED_VALUE \l0x000c: IPUT  (r2 I:java.lang.Object), (r1 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IPUT  (r3 I:java.lang.Object), (r1 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.lock java.lang.Object \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.SynchronizedLazyImpl.\<init\>((r1 'this' I:kotlin.SynchronizedLazyImpl A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.jvm.functions.Function0\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/jvm\/functions\/Function0\<, +TT;\>;, Ljava\/lang\/Object;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
}

