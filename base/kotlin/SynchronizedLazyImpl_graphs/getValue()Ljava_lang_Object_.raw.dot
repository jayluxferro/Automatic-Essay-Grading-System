digraph "CFG forkotlin.SynchronizedLazyImpl.getValue()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.Object) = (r3 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object \l0x0002: SGET  (r1 I:kotlin.UNINITIALIZED_VALUE) =  kotlin.UNINITIALIZED_VALUE.INSTANCE kotlin.UNINITIALIZED_VALUE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r0 I:T) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:java.lang.Object) = (r3 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.lock java.lang.Object \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|SYNTHETIC\lSplitter:B:5:0x000a\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000a\l|0x000a: IGET  (r1 I:java.lang.Object) = (r3 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x000c: SGET  (r2 I:kotlin.UNINITIALIZED_VALUE) =  kotlin.UNINITIALIZED_VALUE.INSTANCE kotlin.UNINITIALIZED_VALUE A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0011 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: GOTO  \-\> 0x0023 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IGET  (r1 I:kotlin.jvm.functions.Function0\<? extends T\>) = (r3 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.initializer kotlin.jvm.functions.Function0 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0025 \}]\l0x001c: IPUT  (r1 I:java.lang.Object), (r3 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object A[Catch:\{ all \-\> 0x0025 \}]\l0x001e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0025 \}]\l0x001f: CHECK_CAST  (r2 I:kotlin.jvm.functions.Function0) = (kotlin.jvm.functions.Function0) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l0x0021: IPUT  \l  (r2 I:kotlin.jvm.functions.Function0\<? extends T\>)\l  (r3 I:kotlin.SynchronizedLazyImpl)\l kotlin.SynchronizedLazyImpl.initializer kotlin.jvm.functions.Function0 A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: RETURN  (r1 I:T) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|ExcHandler: all null\lSplitter:B:5:0x000a\l|0x0025: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.SynchronizedLazyImpl.getValue((r3 'this' I:kotlin.SynchronizedLazyImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

