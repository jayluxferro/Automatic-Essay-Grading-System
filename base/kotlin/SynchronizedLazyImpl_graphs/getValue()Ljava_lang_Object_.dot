digraph "CFG forkotlin.SynchronizedLazyImpl.getValue()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object r0 = r3._value\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == kotlin.UNINITIALIZED_VALUE.INSTANCE) goto L_0x0007\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|RETURN\l|return r0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.Object r0 = r3.lock\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|monitor\-enter(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ ?|java.lang.Object r1 = r3._value\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if (r1 == kotlin.UNINITIALIZED_VALUE.INSTANCE) goto L_0x0011\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010}"];
Node_9 [shape=record,label="{9\:\ 0x0011|kotlin.jvm.functions.Function0\<? extends T\> r1 = r3.initializer\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|if (r1 != null) goto L_0x0018\l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|kotlin.jvm.internal.Intrinsics.throwNpe()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|java.lang.Object r1 = r1.invoke()\lr3._value = r1\lr3.initializer = null\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|PHI: r1 \l  PHI: (r1v3 T) = (r1v5 T), (r1v2 T) binds: [B:12:0x0018, B:8:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\l|return r1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|REMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public T kotlin.SynchronizedLazyImpl.getValue((r3v0 'this' kotlin.SynchronizedLazyImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

