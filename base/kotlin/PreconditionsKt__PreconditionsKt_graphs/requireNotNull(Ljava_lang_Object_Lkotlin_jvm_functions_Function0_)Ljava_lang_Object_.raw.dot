digraph "CFG forkotlin.PreconditionsKt__PreconditionsKt.requireNotNull(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN  (r0 I:T) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r0 I:java.lang.Object) = (r1 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE \l0x0007: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0009: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x000d: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r0 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0010: CHECK_CAST  (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final T kotlin.PreconditionsKt__PreconditionsKt.requireNotNull((r0 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:kotlin.jvm.functions.Function0\<? extends java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(TT;, Lkotlin\/jvm\/functions\/Function0\<, +, Ljava\/lang\/Object;, \>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
}

