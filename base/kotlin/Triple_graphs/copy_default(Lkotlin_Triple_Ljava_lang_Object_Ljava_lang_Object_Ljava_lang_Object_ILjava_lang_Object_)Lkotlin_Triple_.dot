digraph "CFG forkotlin.Triple.copy$default(Lkotlin\/Triple;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;ILjava\/lang\/Object;)Lkotlin\/Triple;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r4 & 1) == 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|A r1 = r0.first\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 A) = (r1v0 java.lang.Object), (r1v2 A) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if ((r4 & 2) == 0) goto L_0x000c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|B r2 = r0.second\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|PHI: r2 \l  PHI: (r2v1 B) = (r2v0 java.lang.Object), (r2v2 B) binds: [B:4:0x0008, B:5:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if ((r4 & 4) == 0) goto L_0x0012\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|C r3 = r0.third\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|PHI: r3 \l  PHI: (r3v1 C) = (r3v0 java.lang.Object), (r3v2 C) binds: [B:7:0x000e, B:8:0x0010] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|RETURN\l|return r0.copy(r1, r2, r3)\l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ kotlin.Triple kotlin.Triple.copy$default((r0v0 kotlin.Triple A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

