digraph "CFG forkotlin.ranges.CharRange.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.CharRange) kotlin.ranges.CharRange.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:char) = (r2 I:kotlin.ranges.CharRange) kotlin.ranges.CharRange.getFirst():char type: VIRTUAL \l0x000c: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x000e: INVOKE  (r1 I:char) = (r2 I:kotlin.ranges.CharRange) kotlin.ranges.CharRange.getLast():char type: VIRTUAL \l0x0012: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int kotlin.ranges.CharRange.hashCode((r2 'this' I:kotlin.ranges.CharRange A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

