digraph "CFG forkotlin.ranges.ComparableRange.hashCode()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.ComparableRange) kotlin.ranges.ComparableRange.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:java.lang.Comparable) = (r2 I:kotlin.ranges.ComparableRange) kotlin.ranges.ComparableRange.getStart():java.lang.Comparable type: VIRTUAL \l0x000c: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l0x0010: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x0012: INVOKE  (r1 I:java.lang.Comparable) = (r2 I:kotlin.ranges.ComparableRange) kotlin.ranges.ComparableRange.getEndInclusive():java.lang.Comparable type: VIRTUAL \l0x0016: INVOKE  (r1 I:int) = (r1 I:java.lang.Object) java.lang.Object.hashCode():int type: VIRTUAL \l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int kotlin.ranges.ComparableRange.hashCode((r2 'this' I:kotlin.ranges.ComparableRange A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

