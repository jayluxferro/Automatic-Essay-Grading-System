digraph "CFG forkotlin.ranges.IntProgression.isEmpty()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4.step \<= 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r4.first \<= r4.last) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|SYNTHETIC\lRETURN\l|return true\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r4.first \>= r4.last) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.IntProgression.isEmpty((r4v0 'this' kotlin.ranges.IntProgression A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_4[style=dashed];
Node_6 -> Node_8;
}

