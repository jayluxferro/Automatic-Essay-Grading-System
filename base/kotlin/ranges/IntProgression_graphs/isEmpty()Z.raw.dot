digraph "CFG forkotlin.ranges.IntProgression.isEmpty()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.step int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r4 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.first int \l0x0008: IGET  (r3 I:int) = (r4 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.last int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r0 I:int) = (r4 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.first int \l0x0010: IGET  (r3 I:int) = (r4 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.last int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.IntProgression.isEmpty((r4 'this' I:kotlin.ranges.IntProgression A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_4[style=dashed];
}

