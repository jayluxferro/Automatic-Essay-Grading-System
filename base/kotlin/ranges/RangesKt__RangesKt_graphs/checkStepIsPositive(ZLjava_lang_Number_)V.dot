digraph "CFG forkotlin.ranges.RangesKt__RangesKt.checkStepIsPositive(ZLjava\/lang\/Number;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"step\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|if (r2 == false) goto L_0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Step must be positive, was: \")\lr0.append(r3)\lr0.append('.')\l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
MethodNode[shape=record,label="{public static final void kotlin.ranges.RangesKt__RangesKt.checkStepIsPositive((r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Number A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

