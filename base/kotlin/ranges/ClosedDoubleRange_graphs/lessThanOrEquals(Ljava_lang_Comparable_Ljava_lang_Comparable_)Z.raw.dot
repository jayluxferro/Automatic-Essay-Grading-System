digraph "CFG forkotlin.ranges.ClosedDoubleRange.lessThanOrEquals(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CHECK_CAST  (r3 I:java.lang.Number) = (java.lang.Number) (r3 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r0 I:double) = (r3 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x0006: CHECK_CAST  (r4 I:java.lang.Number) = (java.lang.Number) (r4 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r3 I:double) = (r4 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x000c: INVOKE  (r3 I:boolean) = \l  (r2 I:kotlin.ranges.ClosedDoubleRange)\l  (r0 I:double)\l  (r3 I:double)\l kotlin.ranges.ClosedDoubleRange.lessThanOrEquals(double, double):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ boolean kotlin.ranges.ClosedDoubleRange.lessThanOrEquals((r2 'this' I:kotlin.ranges.ClosedDoubleRange A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Comparable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Comparable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

