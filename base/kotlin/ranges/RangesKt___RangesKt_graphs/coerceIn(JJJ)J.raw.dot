digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(JJJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CMP_L  (r0 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:9:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CMP_L  (r0 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: RETURN  (r3 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CMP_L  (r3 I:int) = (r1 I:long), (r5 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x000e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN  (r5 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: RETURN  (r1 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|0x000f: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0011: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0013: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0016: CONST_STR  (r0 I:java.lang.String) =  \"Cannot coerce value to an empty range: maximum \" \l0x0018: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001b: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x001e: CONST_STR  (r5 I:java.lang.String) =  \" is less than minimum \" \l0x0020: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0023: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0026: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0028: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002b: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002f: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0032: CHECK_CAST  (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.ranges.RangesKt___RangesKt.coerceIn((r1 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_9 -> Node_10;
}

