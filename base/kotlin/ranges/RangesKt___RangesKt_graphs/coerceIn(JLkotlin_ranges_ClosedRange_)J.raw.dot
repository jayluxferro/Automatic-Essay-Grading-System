digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(JLkotlin\/ranges\/ClosedRange;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) kotlin.ranges.ClosedFloatingPointRange \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r2 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x000d: CHECK_CAST  (r2 I:java.lang.Comparable) = (java.lang.Comparable) (r2 I:?[OBJECT, ARRAY]) \l0x000f: CHECK_CAST  (r4 I:kotlin.ranges.ClosedFloatingPointRange) = (kotlin.ranges.ClosedFloatingPointRange) (r4 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:java.lang.Comparable) = \l  (r2 I:java.lang.Comparable)\l  (r4 I:kotlin.ranges.ClosedFloatingPointRange)\l kotlin.ranges.RangesKt.coerceIn(java.lang.Comparable, kotlin.ranges.ClosedFloatingPointRange):java.lang.Comparable type: STATIC \l0x0015: CHECK_CAST  (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r2 I:long) = (r2 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN  (r2 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.ClosedRange) kotlin.ranges.ClosedRange.isEmpty():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0054 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange) kotlin.ranges.ClosedRange.getStart():java.lang.Comparable type: INTERFACE \l0x0026: CHECK_CAST  (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r0 I:long) = (r0 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l0x002c: CMP_L  (r0 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: INVOKE  (r2 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange) kotlin.ranges.ClosedRange.getStart():java.lang.Comparable type: INTERFACE \l0x0034: CHECK_CAST  (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:?[OBJECT, ARRAY]) \l0x0036: INVOKE  (r2 I:long) = (r2 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange) kotlin.ranges.ClosedRange.getEndInclusive():java.lang.Comparable type: INTERFACE \l0x003f: CHECK_CAST  (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:?[OBJECT, ARRAY]) \l0x0041: INVOKE  (r0 I:long) = (r0 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l0x0045: CMP_L  (r0 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0053 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: INVOKE  (r2 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange) kotlin.ranges.ClosedRange.getEndInclusive():java.lang.Comparable type: INTERFACE \l0x004d: CHECK_CAST  (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  (r2 I:long) = (r2 I:java.lang.Number) java.lang.Number.longValue():long type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: RETURN  (r2 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0056: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005b: CONST_STR  (r0 I:java.lang.String) =  \"Cannot coerce value to an empty range: \" \l0x005d: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0063: CONST  (r4 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0065: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0068: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006c: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x006f: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0071|0x0071: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.ranges.RangesKt___RangesKt.coerceIn((r2 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.ranges.ClosedRange\<java.lang.Long\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(J, Lkotlin\/ranges\/ClosedRange\<, Ljava\/lang\/Long;, \>;)J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

