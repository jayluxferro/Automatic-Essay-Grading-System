digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(Ljava\/lang\/Comparable;Lkotlin\/ranges\/ClosedFloatingPointRange;)Ljava\/lang\/Comparable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: INVOKE  (r0 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable type: INTERFACE \l0x0014: INVOKE  (r0 I:boolean) = \l  (r3 I:kotlin.ranges.ClosedFloatingPointRange)\l  (r2 I:java.lang.Comparable)\l  (r0 I:java.lang.Comparable)\l kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: INVOKE  (r0 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable type: INTERFACE \l0x001e: INVOKE  (r0 I:boolean) = \l  (r3 I:kotlin.ranges.ClosedFloatingPointRange)\l  (r0 I:java.lang.Comparable)\l  (r2 I:java.lang.Comparable)\l kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r2 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: INVOKE  (r0 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable type: INTERFACE \l0x002d: INVOKE  (r0 I:boolean) = \l  (r3 I:kotlin.ranges.ClosedFloatingPointRange)\l  (r0 I:java.lang.Comparable)\l  (r2 I:java.lang.Comparable)\l kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: INVOKE  (r0 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable type: INTERFACE \l0x0037: INVOKE  (r0 I:boolean) = \l  (r3 I:kotlin.ranges.ClosedFloatingPointRange)\l  (r2 I:java.lang.Comparable)\l  (r0 I:java.lang.Comparable)\l kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: INVOKE  (r2 I:java.lang.Comparable) = (r3 I:kotlin.ranges.ClosedFloatingPointRange) kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: RETURN  (r2 I:T) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0044: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0046: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0049: CONST_STR  (r1 I:java.lang.String) =  \"Cannot coerce value to an empty range: \" \l0x004b: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004e: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0051: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0053: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0056: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005a: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x005d: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|0x005f: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.ranges.RangesKt___RangesKt.coerceIn((r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.ranges.ClosedFloatingPointRange\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Comparable\<, \-TT;\>;\>(TT;, Lkotlin\/ranges\/ClosedFloatingPointRange\<, TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

