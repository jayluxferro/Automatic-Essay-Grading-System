digraph "CFG forkotlin.ranges.RangesKt___RangesKt.step(Lkotlin\/ranges\/LongProgression;J)Lkotlin\/ranges\/LongProgression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r11 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0007: CMP_L  (r2 I:int) = (r12 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r3 I:java.lang.Long) = (r12 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0012: CHECK_CAST  (r3 I:java.lang.Number) = (java.lang.Number) (r3 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  (r2 I:boolean), (r3 I:java.lang.Number) kotlin.ranges.RangesKt.checkStepIsPositive(boolean, java.lang.Number):void type: STATIC \l0x0017: SGET  (r4 I:kotlin.ranges.LongProgression$Companion) =  kotlin.ranges.LongProgression.Companion kotlin.ranges.LongProgression$Companion \l0x0019: INVOKE  (r5 I:long) = (r11 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.getFirst():long type: VIRTUAL \l0x001d: INVOKE  (r7 I:long) = (r11 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.getLast():long type: VIRTUAL \l0x0021: INVOKE  (r2 I:long) = (r11 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.getStep():long type: VIRTUAL \l0x0025: CMP_L  (r11 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IF  (r11 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x002b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: MOVE  (r9 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: NEG  (r12 I:long) = (r12 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: INVOKE  (r11 I:kotlin.ranges.LongProgression) = \l  (r4 I:kotlin.ranges.LongProgression$Companion)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l kotlin.ranges.LongProgression.Companion.fromClosedRange(long, long, long):kotlin.ranges.LongProgression type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: RETURN  (r11 I:kotlin.ranges.LongProgression) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.LongProgression kotlin.ranges.RangesKt___RangesKt.step((r11 I:kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
}

