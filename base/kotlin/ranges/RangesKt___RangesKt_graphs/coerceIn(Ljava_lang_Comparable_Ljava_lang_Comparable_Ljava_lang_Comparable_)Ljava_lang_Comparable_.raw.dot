digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0043 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r0 I:int) = (r3 I:java.lang.Comparable), (r4 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:11:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: INVOKE  (r0 I:int) = (r2 I:java.lang.Comparable), (r3 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r3 I:T) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: INVOKE  (r3 I:int) = (r2 I:java.lang.Comparable), (r4 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0055 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: RETURN  (r4 I:T) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001f: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"Cannot coerce value to an empty range: maximum \" \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0029: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002c: CONST_STR  (r4 I:java.lang.String) =  \" is less than minimum \" \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0034: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003d: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0040: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: INVOKE  (r0 I:int) = (r2 I:java.lang.Comparable), (r3 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x004c \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: RETURN  (r3 I:T) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0055 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: INVOKE  (r3 I:int) = (r2 I:java.lang.Comparable), (r4 I:java.lang.Object) java.lang.Comparable.compareTo(java.lang.Object):int type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0055 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: RETURN  (r4 I:T) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0055|0x0055: RETURN  (r2 I:T) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.ranges.RangesKt___RangesKt.coerceIn((r2 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Comparable\<, \-TT;\>;\>(TT;TT;TT;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_11 -> Node_12;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
}

