digraph "CFG forkotlin.ranges.RangesKt___RangesKt.step(Lkotlin\/ranges\/LongProgression;J)Lkotlin\/ranges\/LongProgression;" {
subgraph cluster_Region_304718472 {
label = "R(4:0|4|(1:7)|9)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r11, \"$receiver\")\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|PHI: r2 \l  PHI: (r2v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.ranges.RangesKt.checkStepIsPositive(r12 \> 0, java.lang.Long.valueOf(r12))\lkotlin.ranges.LongProgression$Companion kotlin.ranges.LongProgression.Companion r4 = kotlin.ranges.LongProgression.Companion\llong long r5 = r11.getFirst()\llong long r7 = r11.getLast()\l}"];
subgraph cluster_IfRegion_1945502901 {
label = "IF [B:5:0x0027] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0027|if (r11.getStep() \<= 0) goto L_0x002b\l}"];
subgraph cluster_Region_1650561357 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002b|long r12 = \-r12\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x0031|RETURN\l|return r4.fromClosedRange(r5, r7, r12)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0009}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0029|PHI: r12 \l  PHI: (r12v2 long) = (r12v0 long), (r12v1 long) binds: [B:5:0x0027, B:7:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002d}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.LongProgression kotlin.ranges.RangesKt___RangesKt.step((r11v0 kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_6 -> Node_8;
Node_8 -> Node_9;
}

