digraph "CFG forkotlin.ranges.RangesKt___RangesKt.until(II)Lkotlin\/ranges\/IntRange;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r1 I:kotlin.ranges.IntRange$Companion) =  kotlin.ranges.IntRange.Companion kotlin.ranges.IntRange$Companion \l0x0006: INVOKE  (r1 I:kotlin.ranges.IntRange) = (r1 I:kotlin.ranges.IntRange$Companion) kotlin.ranges.IntRange.Companion.getEMPTY():kotlin.ranges.IntRange type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r1 I:kotlin.ranges.IntRange) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x000d: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x000f: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) kotlin.ranges.IntRange.\<init\>(int, int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:kotlin.ranges.IntRange) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.IntRange kotlin.ranges.RangesKt___RangesKt.until((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

