digraph "CFG forkotlin.ranges.RangesKt___RangesKt.step(Lkotlin\/ranges\/IntProgression;I)Lkotlin\/ranges\/IntProgression;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r1 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x000e: CHECK_CAST  (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean), (r1 I:java.lang.Number) kotlin.ranges.RangesKt.checkStepIsPositive(boolean, java.lang.Number):void type: STATIC \l0x0013: SGET  (r0 I:kotlin.ranges.IntProgression$Companion) =  kotlin.ranges.IntProgression.Companion kotlin.ranges.IntProgression$Companion \l0x0015: INVOKE  (r1 I:int) = (r3 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getFirst():int type: VIRTUAL \l0x0019: INVOKE  (r2 I:int) = (r3 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getLast():int type: VIRTUAL \l0x001d: INVOKE  (r3 I:int) = (r3 I:kotlin.ranges.IntProgression) kotlin.ranges.IntProgression.getStep():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: NEG  (r4 I:int) = (r4 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: INVOKE  (r3 I:kotlin.ranges.IntProgression) = \l  (r0 I:kotlin.ranges.IntProgression$Companion)\l  (r1 I:int)\l  (r2 I:int)\l  (r4 I:int)\l kotlin.ranges.IntProgression.Companion.fromClosedRange(int, int, int):kotlin.ranges.IntProgression type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: RETURN  (r3 I:kotlin.ranges.IntProgression) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.IntProgression kotlin.ranges.RangesKt___RangesKt.step((r3 I:kotlin.ranges.IntProgression A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
}

