digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(III)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:6:0x0009 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r3 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r2 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: RETURN  (r4 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: RETURN  (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000b: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"Cannot coerce value to an empty range: maximum \" \l0x0012: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0018: CONST_STR  (r4 I:java.lang.String) =  \" is less than minimum \" \l0x001a: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0020: CONST  (r3 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0022: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0025: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x002c: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.ranges.RangesKt___RangesKt.coerceIn((r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_6 -> Node_7;
}

