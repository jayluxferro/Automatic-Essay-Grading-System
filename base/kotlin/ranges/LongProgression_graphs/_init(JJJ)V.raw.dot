digraph "CFG forkotlin.ranges.LongProgression.\<init\>(JJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IPUT  (r3 I:long), (r2 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.first long \l0x000b: INVOKE  (r3 I:long) = (r3 I:long), (r5 I:long), (r7 I:long) kotlin.internal.ProgressionUtilKt.getProgressionLastElement(long, long, long):long type: STATIC \l0x000f: IPUT  (r3 I:long), (r2 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.last long \l0x0011: IPUT  (r7 I:long), (r2 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.step long \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0016: CONST_STR  (r4 I:java.lang.String) =  \"Step must be non\-zero\" \l0x0018: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x001b: CHECK_CAST  (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.LongProgression.\<init\>((r2 'this' I:kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

