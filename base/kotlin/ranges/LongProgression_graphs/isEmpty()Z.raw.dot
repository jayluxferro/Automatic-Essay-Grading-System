digraph "CFG forkotlin.ranges.LongProgression.isEmpty()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r6 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.step long \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:long) = (r6 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.first long \l0x000c: IGET  (r4 I:long) = (r6 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.last long \l0x000e: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IGET  (r0 I:long) = (r6 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.first long \l0x0016: IGET  (r4 I:long) = (r6 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.last long \l0x0018: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.LongProgression.isEmpty((r6 'this' I:kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_4[style=dashed];
}

