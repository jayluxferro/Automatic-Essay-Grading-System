digraph "CFG forkotlin.ranges.IntProgressionIterator.\<init\>(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:kotlin.collections.IntIterator) kotlin.collections.IntIterator.\<init\>():void type: DIRECT \l0x0003: IPUT  (r5 I:int), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.step int \l0x0005: IPUT  (r4 I:int), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.finalElement int \l0x0007: IGET  (r5 I:int) = (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.step int \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IPUT  (r0 I:boolean), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.hasNext boolean \l0x0016: IGET  (r4 I:boolean) = (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.hasNext boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IGET  (r3 I:int) = (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.finalElement int \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IPUT  (r3 I:int), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.next int \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.IntProgressionIterator.\<init\>((r2 'this' I:kotlin.ranges.IntProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_6;
Node_4 -> Node_6;
Node_4 -> Node_3[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
}

