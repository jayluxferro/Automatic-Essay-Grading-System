digraph "CFG forkotlin.ranges.IntProgressionIterator.\<init\>(III)V" {
subgraph cluster_Region_1259106982 {
label = "R(4:0|(1:3)|5|8)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.step = r5\lr2.finalElement = r4\lboolean r0 = false\l}"];
subgraph cluster_IfRegion_103308928 {
label = "IF [B:1:0x000b, B:2:0x000d, B:4:0x0011] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000b|ADDED_TO_REGION\l|if (r2.step \<= 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|ADDED_TO_REGION\l|if (r3 \<= r4) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|ADDED_TO_REGION\l|if (r3 \>= r4) goto L_0x000f\l}"];
subgraph cluster_Region_1231650164 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|r0 = true\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0014|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v2 boolean), (r0v0 boolean) binds: [B:4:0x0011, B:3:0x000f, B:2:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r2.hasNext = r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:6:0x0018, B:7:0x001b] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r2.next = !r2.hasNext ? r2.finalElement : r3\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001b}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001f}"];
MethodNode[shape=record,label="{public void kotlin.ranges.IntProgressionIterator.\<init\>((r2v0 'this' kotlin.ranges.IntProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_3;
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

