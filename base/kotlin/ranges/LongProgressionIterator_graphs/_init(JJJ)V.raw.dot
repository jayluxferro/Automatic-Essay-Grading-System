digraph "CFG forkotlin.ranges.LongProgressionIterator.\<init\>(JJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:kotlin.collections.LongIterator) kotlin.collections.LongIterator.\<init\>():void type: DIRECT \l0x0003: IPUT  (r9 I:long), (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.step long \l0x0005: IPUT  (r7 I:long), (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.finalElement long \l0x0007: IGET  (r9 I:long) = (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.step long \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000d: CMP_L  (r9 I:int) = (r9 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: CMP_L  (r7 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CMP_L  (r7 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IPUT  \l  (r0 I:boolean)\l  (r4 I:kotlin.ranges.LongProgressionIterator)\l kotlin.ranges.LongProgressionIterator.hasNext boolean \l0x001e: IGET  (r7 I:boolean) = (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.hasNext boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0023 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r5 I:long) = (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.finalElement long \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IPUT  (r5 I:long), (r4 I:kotlin.ranges.LongProgressionIterator) kotlin.ranges.LongProgressionIterator.next long \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.LongProgressionIterator.\<init\>((r4 'this' I:kotlin.ranges.LongProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_4[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
}

