digraph "CFG forkotlin.math.MathKt__MathJVMKt.asinh(D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:double) =  kotlin.math.Constants.taylor_n_bound double \l0x0002: CMP_L  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:double) =  kotlin.math.Constants.upper_taylor_n_bound double \l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: CMP_L  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: SGET  (r0 I:double) =  kotlin.math.Constants.upper_taylor_2_bound double \l0x000f: CMP_L  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.log(double):double type: STATIC \l0x0017: SGET  (r0 I:double) =  kotlin.math.Constants.LN2 double \l0x0019: ARITH  (r4 I:double) = (r4 I:double) + (r0 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001c: CAST  (r0 I:double) = (double) (r0 I:int) \l0x001d: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double) \l0x001f: CAST  (r0 I:double) = (double) (r2 I:int) \l0x0020: ARITH  (r0 I:double) = (r0 I:double) \/ (r4 I:double) \l0x0021: ARITH  (r4 I:double) = (r4 I:double) + (r0 I:double) \l0x0022: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.log(double):double type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: ARITH  (r0 I:double) = (r4 I:double) * (r4 I:double) \l0x0029: CAST  (r2 I:double) = (double) (r2 I:int) \l0x002a: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x002b: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x002f: ARITH  (r4 I:double) = (r4 I:double) + (r0 I:double) \l0x0030: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.log(double):double type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: SGET  (r0 I:double) =  kotlin.math.Constants.taylor_n_bound double \l0x0037: NEG  (r0 I:double) = (r0 I:double) \l0x0038: CMP_G  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:12:0x0043 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|0x003c: NEG  (r4 I:double) = (r4 I:double) \l0x003d: INVOKE  (r4 I:double) = (r4 I:double) kotlin.math.MathKt.asinh(double):double type: STATIC \l0x0041: NEG  (r4 I:double) = (r4 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: INVOKE  (r0 I:double) = (r4 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0047: SGET  (r2 I:double) =  kotlin.math.Constants.taylor_2_bound double \l0x0049: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: ARITH  (r0 I:double) = (r4 I:double) * (r4 I:double) \l0x004f: ARITH  (r0 I:double) = (r0 I:double) * (r4 I:double) \l0x0051: CONST  (r2 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x0052: CAST  (r2 I:double) = (double) (r2 I:int) \l0x0053: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0054: ARITH  (r4 I:double) = (r4 I:double) \- (r0 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: RETURN  (r4 I:double) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.asinh((r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_15;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

