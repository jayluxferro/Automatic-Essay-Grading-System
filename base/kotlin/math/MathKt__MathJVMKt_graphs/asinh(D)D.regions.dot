digraph "CFG forkotlin.math.MathKt__MathJVMKt.asinh(D)D" {
subgraph cluster_Region_514443403 {
label = "R(1:(1:(2:(1:18)|(1:(2:(1:16)|(2:7|17)))))(1:(1:19)(1:13)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2042293341 {
label = "IF [B:1:0x0004] THEN: R(1:(2:(1:18)|(1:(2:(1:16)|(2:7|17))))) ELSE: R(1:(1:19)(1:13))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r4 \>= kotlin.math.Constants.taylor_n_bound) goto L_0x0006\l}"];
subgraph cluster_Region_337480321 {
label = "R(1:(2:(1:18)|(1:(2:(1:16)|(2:7|17)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1939518490 {
label = "R(2:(1:18)|(1:(2:(1:16)|(2:7|17))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_589813618 {
label = "IF [B:3:0x000b] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r4 \<= kotlin.math.Constants.upper_taylor_n_bound) goto L_0x0027\l}"];
subgraph cluster_Region_231808847 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(r4 + java.lang.Math.sqrt((r4 * r4) + ((double) 1)))\l}"];
}
}
subgraph cluster_Region_1977665014 {
label = "R(1:(2:(1:16)|(2:7|17)))";
node [shape=record,color=blue];
subgraph cluster_Region_1409058100 {
label = "R(2:(1:16)|(2:7|17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1325220990 {
label = "IF [B:5:0x0011] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r4 \> kotlin.math.Constants.upper_taylor_2_bound) goto L_0x0013\l}"];
subgraph cluster_Region_1272119689 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(r4) + kotlin.math.Constants.LN2\l}"];
}
}
subgraph cluster_Region_349805481 {
label = "R(2:7|17)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001b|double double r4 = r4 * ((double) 2)\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(r4 + (((double) 1) \/ r4))\l}"];
}
}
}
}
}
subgraph cluster_Region_955232880 {
label = "R(1:(1:19)(1:13)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_252532092 {
label = "IF [B:10:0x003a] THEN: R(1:19) ELSE: R(1:13) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x003a|if (r4 \<= (\-kotlin.math.Constants.taylor_n_bound)) goto L_0x003c\l}"];
subgraph cluster_Region_729230935 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return \-kotlin.math.MathKt.asinh(\-r4)\l}"];
}
subgraph cluster_Region_2021375481 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x004b|RETURN\l|return java.lang.Math.abs(r4) \>= kotlin.math.Constants.taylor_2_bound ? r4 \- (((r4 * r4) * r4) \/ ((double) 6)) : r4\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0027}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0035}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x003c}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0043}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x004d}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.asinh((r4v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_9[style=dashed];
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_7 -> Node_17;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_20;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_16;
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

