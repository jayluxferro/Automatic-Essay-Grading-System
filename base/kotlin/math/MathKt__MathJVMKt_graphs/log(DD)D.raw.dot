digraph "CFG forkotlin.math.MathKt__MathJVMKt.log(DD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_G  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0008: CMP_G  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.log(double):double type: STATIC \l0x0011: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.log(double):double type: STATIC \l0x0015: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r2 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r2 I:kotlin.jvm.internal.DoubleCompanionObject) =  kotlin.jvm.internal.DoubleCompanionObject.INSTANCE kotlin.jvm.internal.DoubleCompanionObject \l0x0019: INVOKE  (r2 I:double) = (r2 I:kotlin.jvm.internal.DoubleCompanionObject) kotlin.jvm.internal.DoubleCompanionObject.getNaN():double type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: RETURN  (r2 I:double) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.log((r2 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

