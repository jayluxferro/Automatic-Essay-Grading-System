digraph "CFG forkotlin.math.MathKt__MathJVMKt.truncate(D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r2 I:double) java.lang.Double.isInfinite(double):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CAST  (r0 I:double) = (double) (r0 I:int) \l0x000f: CMP_L  (r0 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.floor(double):double type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.ceil(double):double type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN  (r2 I:double) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.truncate((r2 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
}

