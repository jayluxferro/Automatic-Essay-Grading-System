digraph "CFG forkotlin.math.MathKt__MathJVMKt.log(FF)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CMP_G  (r0 I:int) = (r3 I:float), (r0 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0007: CMP_G  (r0 I:int) = (r3 I:float), (r0 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CAST  (r0 I:double) = (double) (r2 I:float) \l0x000d: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.log(double):double type: STATIC \l0x0011: CAST  (r2 I:double) = (double) (r3 I:float) \l0x0012: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.log(double):double type: STATIC \l0x0016: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0017: CAST  (r2 I:float) = (float) (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: RETURN  (r2 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: SGET  (r2 I:kotlin.jvm.internal.FloatCompanionObject) =  kotlin.jvm.internal.FloatCompanionObject.INSTANCE kotlin.jvm.internal.FloatCompanionObject \l0x001b: INVOKE  (r2 I:float) = (r2 I:kotlin.jvm.internal.FloatCompanionObject) kotlin.jvm.internal.FloatCompanionObject.getNaN():float type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: RETURN  (r2 I:float) \l}"];
MethodNode[shape=record,label="{public static final float kotlin.math.MathKt__MathJVMKt.log((r2 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

