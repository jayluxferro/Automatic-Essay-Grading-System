digraph "CFG forkotlin.math.MathKt__MathJVMKt.acosh(D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CAST  (r0 I:double) = (double) (r0 I:int) \l0x0002: CMP_G  (r2 I:int) = (r6 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r6 I:kotlin.jvm.internal.DoubleCompanionObject) =  kotlin.jvm.internal.DoubleCompanionObject.INSTANCE kotlin.jvm.internal.DoubleCompanionObject \l0x0008: INVOKE  (r6 I:double) = (r6 I:kotlin.jvm.internal.DoubleCompanionObject) kotlin.jvm.internal.DoubleCompanionObject.getNaN():double type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: SGET  (r2 I:double) =  kotlin.math.Constants.upper_taylor_2_bound double \l0x000f: CMP_L  (r2 I:int) = (r6 I:double), (r2 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r6 I:double) = (r6 I:double) java.lang.Math.log(double):double type: STATIC \l0x0017: SGET  (r0 I:double) =  kotlin.math.Constants.LN2 double \l0x0019: ARITH  (r6 I:double) = (r6 I:double) + (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: ARITH  (r2 I:double) = (r6 I:double) \- (r0 I:double) \l0x001e: SGET  (r4 I:double) =  kotlin.math.Constants.taylor_n_bound double \l0x0020: CMP_L  (r4 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: ARITH  (r2 I:double) = (r6 I:double) * (r6 I:double) \l0x0026: ARITH  (r2 I:double) = (r2 I:double) \- (r0 I:double) \l0x0027: INVOKE  (r0 I:double) = (r2 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x002b: ARITH  (r6 I:double) = (r6 I:double) + (r0 I:double) \l0x002c: INVOKE  (r6 I:double) = (r6 I:double) java.lang.Math.log(double):double type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: INVOKE  (r6 I:double) = (r2 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0035: SGET  (r0 I:double) =  kotlin.math.Constants.taylor_2_bound double \l0x0037: CMP_L  (r0 I:int) = (r6 I:double), (r0 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: ARITH  (r0 I:double) = (r6 I:double) * (r6 I:double) \l0x003d: ARITH  (r0 I:double) = (r0 I:double) * (r6 I:double) \l0x003f: CONST  (r2 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l0x0041: CAST  (r2 I:double) = (double) (r2 I:int) \l0x0042: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0043: ARITH  (r6 I:double) = (r6 I:double) \- (r0 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: CONST  (r0 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0046: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x004a: ARITH  (r6 I:double) = (r6 I:double) * (r0 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: RETURN  (r6 I:double) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.acosh((r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

