digraph "CFG forkotlin.coroutines.experimental.SequenceBuilder.yieldAll(Ljava\/lang\/Iterable;Lkotlin\/coroutines\/experimental\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0005: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: SGET  (r2 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0014: INVOKE  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r2 I:java.util.Iterator)\l  (r3 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yieldAll(java.util.Iterator, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN  (r2 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.coroutines.experimental.SequenceBuilder.yieldAll((r1 'this' I:kotlin.coroutines.experimental.SequenceBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.experimental.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Iterable\<, +TT;\>;, Lkotlin\/coroutines\/experimental\/Continuation\<, \-, Lkotlin\/Unit;, \>;), Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

