digraph "CFG forkotlin.coroutines.experimental.SafeContinuation.resumeWithException(Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"exception\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IGET  (r0 I:java.lang.Object) = (r3 I:kotlin.coroutines.experimental.SafeContinuation) kotlin.coroutines.experimental.SafeContinuation.result java.lang.Object \l0x0007: SGET  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.UNDECIDED java.lang.Object \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<kotlin.coroutines.experimental.SafeContinuation\<?\>, java.lang.Object\>) =  kotlin.coroutines.experimental.SafeContinuation.RESULT java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x000d: SGET  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.UNDECIDED java.lang.Object \l0x000f: NEW_INSTANCE  (r2 I:kotlin.coroutines.experimental.SafeContinuation$Fail) =  kotlin.coroutines.experimental.SafeContinuation$Fail \l0x0011: INVOKE  \l  (r2 I:kotlin.coroutines.experimental.SafeContinuation$Fail)\l  (r4 I:java.lang.Throwable)\l kotlin.coroutines.experimental.SafeContinuation.Fail.\<init\>(java.lang.Throwable):void type: DIRECT \l0x0014: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0005 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: INVOKE  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<kotlin.coroutines.experimental.SafeContinuation\<?\>, java.lang.Object\>) =  kotlin.coroutines.experimental.SafeContinuation.RESULT java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0023: INVOKE  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC \l0x0027: SGET  (r2 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.RESUMED java.lang.Object \l0x0029: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0005 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IGET  (r0 I:kotlin.coroutines.experimental.Continuation\<T\>) = (r3 I:kotlin.coroutines.experimental.SafeContinuation) kotlin.coroutines.experimental.SafeContinuation.delegate kotlin.coroutines.experimental.Continuation \l0x0031: INVOKE  \l  (r0 I:kotlin.coroutines.experimental.Continuation)\l  (r4 I:java.lang.Throwable)\l kotlin.coroutines.experimental.Continuation.resumeWithException(java.lang.Throwable):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0037: CONST_STR  (r0 I:java.lang.String) =  \"Already resumed\" \l0x0039: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l0x003c: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.experimental.SafeContinuation.resumeWithException((r3 'this' I:kotlin.coroutines.experimental.SafeContinuation A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
}

