digraph "CFG forkotlin.coroutines.experimental.SafeContinuation.getResult()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object r0 = r3.result\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 != UNDECIDED) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (RESULT.compareAndSet(r3, UNDECIDED, kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) == false) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014}"];
Node_5 [shape=record,label="{5\:\ 0x0018|RETURN\l|return kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|java.lang.Object r0 = r3.result\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|PHI: r0 \l  PHI: (r0v1 java.lang.Object) = (r0v0 java.lang.Object), (r0v7 java.lang.Object) binds: [B:1:0x0004, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if (r0 != RESUMED) goto L_0x0024\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f}"];
Node_10 [shape=record,label="{10\:\ 0x0023|RETURN\l|return kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024}"];
Node_12 [shape=record,label="{12\:\ 0x0026|if ((r0 instanceof kotlin.coroutines.experimental.SafeContinuation.Fail) != false) goto L_0x0029\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029}"];
Node_15 [shape=record,label="{15\:\ 0x002f|throw ((kotlin.coroutines.experimental.SafeContinuation.Fail) r0).getException()\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.coroutines.experimental.SafeContinuation.getResult((r3v0 'this' kotlin.coroutines.experimental.SafeContinuation A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, kotlin.PublishedApi, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

