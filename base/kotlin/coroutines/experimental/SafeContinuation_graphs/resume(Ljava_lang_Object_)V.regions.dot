digraph "CFG forkotlin.coroutines.experimental.SafeContinuation.resume(Ljava\/lang\/Object;)V" {
subgraph cluster_Region_139757561 {
label = "R(1:(2:0|(1:(1:(1:4)))(1:(1:12)(1:(2:9|10)(0)))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1180919892 {
label = "LOOP:0: (2:0|(1:(1:(1:4)))(1:(1:12)(1:(2:9|10)(0))))";
node [shape=record,color=blue];
subgraph cluster_Region_687017217 {
label = "R(2:0|(1:(1:(1:4)))(1:(1:12)(1:(2:9|10)(0))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:13:0x0000\l|java.lang.Object java.lang.Object r0 = r3.result\l}"];
subgraph cluster_IfRegion_792938421 {
label = "IF [B:1:0x0004] THEN: R(1:(1:(1:4))) ELSE: R(1:(1:12)(1:(2:9|10)(0)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == UNDECIDED) goto L_0x0006\l}"];
subgraph cluster_Region_1883035855 {
label = "R(1:(1:(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_7110338 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_749423225 {
label = "IF [B:3:0x000e] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (RESULT.compareAndSet(r3, UNDECIDED, r4) == true) goto L_0x0010\l}"];
subgraph cluster_Region_1901569648 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|RETURN\l|return\l}"];
}
}
}
}
subgraph cluster_Region_1731977781 {
label = "R(1:(1:12)(1:(2:9|10)(0))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_227255664 {
label = "IF [B:6:0x0015] THEN: R(1:12) ELSE: R(1:(2:9|10)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0015|if (r0 != kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L_0x002b\l}"];
subgraph cluster_Region_71441022 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0034|throw new java.lang.IllegalStateException(\"Already resumed\")\l}"];
}
subgraph cluster_Region_1926000653 {
label = "R(1:(2:9|10)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1055140866 {
label = "IF [B:8:0x0023] THEN: R(2:9|10) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0023|if (RESULT.compareAndSet(r3, kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED(), RESUMED) == true) goto L_0x0025\l}"];
subgraph cluster_Region_108420001 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0025|r3.delegate.resume(r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|RETURN\l|return\l}"];
}
subgraph cluster_Region_309534971 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002b}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:0:0x0000\-\>B:13:0x0000\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0025|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x002b|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0010|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0000|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0000|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.experimental.SafeContinuation.resume((r3v0 'this' kotlin.coroutines.experimental.SafeContinuation A[IMMUTABLE_TYPE, THIS]), (r4v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_16;
Node_3 -> Node_17[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_8 -> Node_14;
Node_8 -> Node_18[style=dashed];
Node_9 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_11 -> Node_12;
Node_13 -> Node_0;
Node_14 -> Node_9;
Node_15 -> Node_11;
Node_16 -> Node_4;
Node_17 -> Node_13;
Node_18 -> Node_13;
}

