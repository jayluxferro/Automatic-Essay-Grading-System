digraph "CFG forkotlin.coroutines.experimental.SafeContinuation.resume(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.Object) = (r3 I:kotlin.coroutines.experimental.SafeContinuation) kotlin.coroutines.experimental.SafeContinuation.result java.lang.Object \l0x0002: SGET  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.UNDECIDED java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<kotlin.coroutines.experimental.SafeContinuation\<?\>, java.lang.Object\>) =  kotlin.coroutines.experimental.SafeContinuation.RESULT java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0008: SGET  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.UNDECIDED java.lang.Object \l0x000a: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<kotlin.coroutines.experimental.SafeContinuation\<?\>, java.lang.Object\>) =  kotlin.coroutines.experimental.SafeContinuation.RESULT java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0019: INVOKE  (r1 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC \l0x001d: SGET  (r2 I:java.lang.Object) =  kotlin.coroutines.experimental.SafeContinuation.RESUMED java.lang.Object \l0x001f: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IGET  (r0 I:kotlin.coroutines.experimental.Continuation\<T\>) = (r3 I:kotlin.coroutines.experimental.SafeContinuation) kotlin.coroutines.experimental.SafeContinuation.delegate kotlin.coroutines.experimental.Continuation \l0x0027: INVOKE  \l  (r0 I:kotlin.coroutines.experimental.Continuation)\l  (r4 I:java.lang.Object)\l kotlin.coroutines.experimental.Continuation.resume(java.lang.Object):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x002d: CONST_STR  (r0 I:java.lang.String) =  \"Already resumed\" \l0x002f: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l0x0032: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.experimental.SafeContinuation.resume((r3 'this' I:kotlin.coroutines.experimental.SafeContinuation A[IMMUTABLE_TYPE, THIS]), (r4 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_0;
Node_3 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_0;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_11 -> Node_12;
}

