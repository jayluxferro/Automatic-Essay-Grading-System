digraph "CFG forkotlin.coroutines.experimental.CoroutinesKt.processBareContinuationResume(Lkotlin\/coroutines\/experimental\/Continuation;Lkotlin\/jvm\/functions\/Function0;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r2 I:java.lang.Object) = (r2 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE A[Catch:\{ Throwable \-\> 0x0018 \}, TRY_ENTER]\l0x0004: INVOKE  (r0 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC A[Catch:\{ Throwable \-\> 0x0018 \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c A[Catch:\{ Throwable \-\> 0x0018 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 A[Catch:\{ Throwable \-\> 0x0018 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  \l  (r1 I:kotlin.coroutines.experimental.Continuation)\l  (r2 I:java.lang.Object)\l kotlin.coroutines.experimental.Continuation.resume(java.lang.Object):void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0018 \}]\l0x000f: GOTO  \-\> 0x001c A[Catch:\{ Throwable \-\> 0x0018 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: NEW_INSTANCE  (r2 I:kotlin.TypeCastException) =  kotlin.TypeCastException A[Catch:\{ Throwable \-\> 0x0018 \}]\l0x0012: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.coroutines.experimental.Continuation\<kotlin.Any?\>\" A[Catch:\{ Throwable \-\> 0x0018 \}]\l0x0014: INVOKE  (r2 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ Throwable \-\> 0x0018 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ Throwable \-\> 0x0018 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|ExcHandler: Throwable null\lSplitter:B:0:0x0000\l|0x0018: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: INVOKE  \l  (r1 I:kotlin.coroutines.experimental.Continuation)\l  (r2 I:java.lang.Throwable)\l kotlin.coroutines.experimental.Continuation.resumeWithException(java.lang.Throwable):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{private static final void kotlin.coroutines.experimental.CoroutinesKt.processBareContinuationResume((r1 I:kotlin.coroutines.experimental.Continuation\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function0\<? extends java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/coroutines\/experimental\/Continuation\<, *\>;, Lkotlin\/jvm\/functions\/Function0\<, +, Ljava\/lang\/Object;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

