digraph "CFG forkotlin.coroutines.experimental.CoroutinesKt.processBareContinuationResume(Lkotlin\/coroutines\/experimental\/Continuation;Lkotlin\/jvm\/functions\/Function0;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ Throwable \-\> 0x0018 \}\lSplitter:B:0:0x0000\l|java.lang.Object r2 = r2.invoke()     \/\/ Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|Catch:\{ Throwable \-\> 0x0018 \}\l|if (r2 == kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L_?     \/\/ Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|Catch:\{ Throwable \-\> 0x0018 \}\l|if (r1 == null) goto L_0x0010     \/\/ Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|Catch:\{ Throwable \-\> 0x0018 \}\l|r1.resume(r2)     \/\/ Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|Catch:\{ Throwable \-\> 0x0018 \}\l|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.coroutines.experimental.Continuation\<kotlin.Any?\>\")     \/\/ Catch:\{ Throwable \-\> 0x0018 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|ExcHandler: Throwable (r2v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|r1.resumeWithException(r2)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static final void kotlin.coroutines.experimental.CoroutinesKt.processBareContinuationResume((r1v0 kotlin.coroutines.experimental.Continuation\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.jvm.functions.Function0\<? extends java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lkotlin\/coroutines\/experimental\/Continuation\<, *\>;, Lkotlin\/jvm\/functions\/Function0\<, +, Ljava\/lang\/Object;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_7;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

