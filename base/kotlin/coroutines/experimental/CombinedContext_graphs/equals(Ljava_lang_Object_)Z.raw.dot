digraph "CFG forkotlin.coroutines.experimental.CombinedContext.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0001: CHECK_CAST  (r0 I:kotlin.coroutines.experimental.CombinedContext) = (kotlin.coroutines.experimental.CombinedContext) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) kotlin.coroutines.experimental.CombinedContext \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CHECK_CAST  (r3 I:kotlin.coroutines.experimental.CombinedContext) = (kotlin.coroutines.experimental.CombinedContext) (r3 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r0 I:int) = (r3 I:kotlin.coroutines.experimental.CombinedContext) kotlin.coroutines.experimental.CombinedContext.size():int type: DIRECT \l0x000f: INVOKE  (r1 I:int) = (r2 I:kotlin.coroutines.experimental.CombinedContext) kotlin.coroutines.experimental.CombinedContext.size():int type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r3 I:boolean) = \l  (r3 I:kotlin.coroutines.experimental.CombinedContext)\l  (r2 I:kotlin.coroutines.experimental.CombinedContext)\l kotlin.coroutines.experimental.CombinedContext.containsAll(kotlin.coroutines.experimental.CombinedContext):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.coroutines.experimental.CombinedContext.equals((r2 'this' I:kotlin.coroutines.experimental.CombinedContext A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

