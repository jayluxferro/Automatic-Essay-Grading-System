digraph "CFG forkotlin.coroutines.experimental.SequenceBuilderIterator.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x0022, 0x0022, 0x0013, 0x000a] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.Throwable) = \l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.exceptionalState():java.lang.Throwable type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IPUT  \l  (r0 I:int)\l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l0x000d: IGET  (r0 I:T) = \l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextValue java.lang.Object \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: IPUT  \l  (r1 I:T)\l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextValue java.lang.Object \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:T) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0014: IPUT  \l  (r0 I:int)\l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l0x0016: IGET  (r0 I:java.util.Iterator\<? extends T\>) = \l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextIterator java.util.Iterator \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN  (r0 I:T) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextNotReady():java.lang.Object type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: RETURN  (r0 I:T) \l}"];
MethodNode[shape=record,label="{public T kotlin.coroutines.experimental.SequenceBuilderIterator.next((r2 'this' I:kotlin.coroutines.experimental.SequenceBuilderIterator A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

