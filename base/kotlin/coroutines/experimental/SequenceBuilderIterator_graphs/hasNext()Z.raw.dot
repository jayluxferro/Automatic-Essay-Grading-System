digraph "CFG forkotlin.coroutines.experimental.SequenceBuilderIterator.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4] t:[0x0025, 0x000f, 0x000e, 0x000e, 0x000c] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.Throwable) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.exceptionalState():java.lang.Throwable type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r0 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: RETURN  (r2 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IGET  (r0 I:java.util.Iterator\<? extends T\>) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextIterator java.util.Iterator \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0016 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0020 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001d: IPUT  \l  (r0 I:int)\l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: RETURN  (r2 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0021: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x0023: IPUT  \l  (r0 I:java.util.Iterator\<? extends T\>)\l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextIterator java.util.Iterator \l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: CONST  (r0 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0026: IPUT  \l  (r0 I:int)\l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.state int \l0x0028: IGET  (r0 I:kotlin.coroutines.experimental.Continuation\<? super kotlin.Unit\>) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextStep kotlin.coroutines.experimental.Continuation \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: CHECK_CAST  (r1 I:kotlin.coroutines.experimental.Continuation) = (kotlin.coroutines.experimental.Continuation) (r1 I:?[OBJECT, ARRAY]) \l0x0031: IPUT  \l  (r1 I:kotlin.coroutines.experimental.Continuation\<? super kotlin.Unit\>)\l  (r3 I:kotlin.coroutines.experimental.SequenceBuilderIterator)\l kotlin.coroutines.experimental.SequenceBuilderIterator.nextStep kotlin.coroutines.experimental.Continuation \l0x0033: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l0x0035: INVOKE  \l  (r0 I:kotlin.coroutines.experimental.Continuation)\l  (r1 I:java.lang.Object)\l kotlin.coroutines.experimental.Continuation.resume(java.lang.Object):void type: INTERFACE \l}"];
MethodNode[shape=record,label="{public boolean kotlin.coroutines.experimental.SequenceBuilderIterator.hasNext((r3 'this' I:kotlin.coroutines.experimental.SequenceBuilderIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_7;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_0;
}

