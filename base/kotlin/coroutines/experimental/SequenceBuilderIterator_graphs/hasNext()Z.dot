digraph "CFG forkotlin.coroutines.experimental.SequenceBuilderIterator.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lLOOP_START\lLOOP:0: B:0:0x0000\-\>B:17:0x002f\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|switch(r3.state) \{\l    case 0: goto L_0x0025;\l    case 1: goto L_0x000f;\l    case 2: goto L_0x000e;\l    case 3: goto L_0x000e;\l    case 4: goto L_0x000c;\l    default: goto L_0x0007;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x0007}"];
Node_3 [shape=record,label="{3\:\ 0x000b|throw exceptionalState()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return false\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return true\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|java.util.Iterator\<? extends T\> r0 = r3.nextIterator\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|if (r0 != null) goto L_0x0016\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|kotlin.jvm.internal.Intrinsics.throwNpe()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016}"];
Node_10 [shape=record,label="{10\:\ 0x001a|if (r0.hasNext() == false) goto L_0x0020\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|r3.state = 2\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|RETURN\l|return true\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|r3.nextIterator = null\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|r3.state = 5\lkotlin.coroutines.experimental.Continuation\<? super kotlin.Unit\> r0 = r3.nextStep\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|if (r0 != null) goto L_0x002f\l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|kotlin.jvm.internal.Intrinsics.throwNpe()\l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|LOOP_END\lLOOP:0: B:0:0x0000\-\>B:17:0x002f\l|r3.nextStep = null\lr0.resume(kotlin.Unit.INSTANCE)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean kotlin.coroutines.experimental.SequenceBuilderIterator.hasNext((r3v0 'this' kotlin.coroutines.experimental.SequenceBuilderIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_6;
Node_1 -> Node_14;
Node_1 -> Node_18;
Node_1 -> Node_19;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_13;
Node_10 -> Node_21[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_22;
Node_17 -> Node_0;
Node_18 -> Node_2;
Node_19 -> Node_4;
Node_20 -> Node_5;
Node_21 -> Node_11;
Node_22 -> Node_17;
Node_23 -> Node_17;
}

