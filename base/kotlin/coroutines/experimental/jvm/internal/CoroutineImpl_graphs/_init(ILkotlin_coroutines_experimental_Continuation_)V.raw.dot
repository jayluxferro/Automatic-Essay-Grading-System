digraph "CFG forkotlin.coroutines.experimental.jvm.internal.CoroutineImpl.\<init\>(ILkotlin\/coroutines\/experimental\/Continuation;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:kotlin.jvm.internal.Lambda), (r1 I:int) kotlin.jvm.internal.Lambda.\<init\>(int):void type: DIRECT \l0x0003: IPUT  \l  (r2 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>)\l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.completion kotlin.coroutines.experimental.Continuation \l0x0005: IGET  (r1 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>) = \l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.completion kotlin.coroutines.experimental.Continuation \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IPUT  \l  (r1 I:int)\l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x000e: IGET  (r1 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>) = \l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.completion kotlin.coroutines.experimental.Continuation \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r1 I:kotlin.coroutines.experimental.CoroutineContext) = (r1 I:kotlin.coroutines.experimental.Continuation) kotlin.coroutines.experimental.Continuation.getContext():kotlin.coroutines.experimental.CoroutineContext type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IPUT  \l  (r1 I:kotlin.coroutines.experimental.CoroutineContext)\l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._context kotlin.coroutines.experimental.CoroutineContext \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.\<init\>((r0 'this' I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Lkotlin\/coroutines\/experimental\/Continuation\<, Ljava\/lang\/Object;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

