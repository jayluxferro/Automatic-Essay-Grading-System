digraph "CFG forkotlin.coroutines.experimental.jvm.internal.CoroutineImpl.getContext()Lkotlin\/coroutines\/experimental\/CoroutineContext;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:kotlin.coroutines.experimental.CoroutineContext) = \l  (r1 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._context kotlin.coroutines.experimental.CoroutineContext \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:kotlin.coroutines.experimental.CoroutineContext) \l}"];
MethodNode[shape=record,label="{public kotlin.coroutines.experimental.CoroutineContext kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.getContext((r1 'this' I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

