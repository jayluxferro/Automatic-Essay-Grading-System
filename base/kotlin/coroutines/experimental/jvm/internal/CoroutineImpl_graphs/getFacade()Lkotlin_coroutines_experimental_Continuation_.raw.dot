digraph "CFG forkotlin.coroutines.experimental.jvm.internal.CoroutineImpl.getFacade()Lkotlin\/coroutines\/experimental\/Continuation;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>) = \l  (r2 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._facade kotlin.coroutines.experimental.Continuation \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:kotlin.coroutines.experimental.CoroutineContext) = \l  (r2 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._context kotlin.coroutines.experimental.CoroutineContext \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x000c: CHECK_CAST  (r1 I:kotlin.coroutines.experimental.Continuation) = (kotlin.coroutines.experimental.Continuation) (r1 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:kotlin.coroutines.experimental.Continuation) = \l  (r0 I:kotlin.coroutines.experimental.CoroutineContext)\l  (r1 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.jvm.internal.CoroutineIntrinsics.interceptContinuationIfNeeded(kotlin.coroutines.experimental.CoroutineContext, kotlin.coroutines.experimental.Continuation):kotlin.coroutines.experimental.Continuation type: STATIC \l0x0012: IPUT  \l  (r0 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>)\l  (r2 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._facade kotlin.coroutines.experimental.Continuation \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r0 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>) = \l  (r2 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl._facade kotlin.coroutines.experimental.Continuation \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: RETURN  \l  (r0 I:kotlin.coroutines.experimental.Continuation\<java.lang.Object\>)\l \l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.experimental.Continuation\<java.lang.Object\> kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.getFacade((r2 'this' I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lkotlin\/coroutines\/experimental\/Continuation\<, Ljava\/lang\/Object;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
}

