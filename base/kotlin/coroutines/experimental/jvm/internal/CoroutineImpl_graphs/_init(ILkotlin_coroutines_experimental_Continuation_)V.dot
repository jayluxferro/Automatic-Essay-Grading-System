digraph "CFG forkotlin.coroutines.experimental.jvm.internal.CoroutineImpl.\<init\>(ILkotlin\/coroutines\/experimental\/Continuation;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r1)\lr0.completion = r2\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r0.completion == null) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|r1 = \-1\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r1 \l  PHI: (r1v2 int) = (r1v7 int), (r1v8 int) binds: [B:3:0x000b, B:2:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|r0.label = r1\lkotlin.coroutines.experimental.Continuation\<java.lang.Object\> r1 = r0.completion\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r1 == null) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|kotlin.coroutines.experimental.CoroutineContext r1 = r1.getContext()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|r1 = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|PHI: r1 \l  PHI: (r1v4 kotlin.coroutines.experimental.CoroutineContext) = (r1v5 kotlin.coroutines.experimental.CoroutineContext), (r1v6 kotlin.coroutines.experimental.CoroutineContext) binds: [B:7:0x0017, B:6:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|r0._context = r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.\<init\>((r0v0 'this' kotlin.coroutines.experimental.jvm.internal.CoroutineImpl A[IMMUTABLE_TYPE, THIS]), (r1v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.coroutines.experimental.Continuation\<java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | , Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Lkotlin\/coroutines\/experimental\/Continuation\<, Ljava\/lang\/Object;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

