digraph "CFG forkotlin.coroutines.experimental.jvm.internal.CoroutineIntrinsics.interceptContinuationIfNeeded(Lkotlin\/coroutines\/experimental\/CoroutineContext;Lkotlin\/coroutines\/experimental\/Continuation;)Lkotlin\/coroutines\/experimental\/Continuation;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"context\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"continuation\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: SGET  (r0 I:kotlin.coroutines.experimental.ContinuationInterceptor$Key) =  kotlin.coroutines.experimental.ContinuationInterceptor.Key kotlin.coroutines.experimental.ContinuationInterceptor$Key \l0x000c: CHECK_CAST  (r0 I:kotlin.coroutines.experimental.CoroutineContext$Key) = (kotlin.coroutines.experimental.CoroutineContext$Key) (r0 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r1 I:kotlin.coroutines.experimental.CoroutineContext$Element) = \l  (r1 I:kotlin.coroutines.experimental.CoroutineContext)\l  (r0 I:kotlin.coroutines.experimental.CoroutineContext$Key)\l kotlin.coroutines.experimental.CoroutineContext.get(kotlin.coroutines.experimental.CoroutineContext$Key):kotlin.coroutines.experimental.CoroutineContext$Element type: INTERFACE \l0x0012: CHECK_CAST  (r1 I:kotlin.coroutines.experimental.ContinuationInterceptor) = (kotlin.coroutines.experimental.ContinuationInterceptor) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  (r1 I:kotlin.coroutines.experimental.Continuation) = \l  (r1 I:kotlin.coroutines.experimental.ContinuationInterceptor)\l  (r2 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.ContinuationInterceptor.interceptContinuation(kotlin.coroutines.experimental.Continuation):kotlin.coroutines.experimental.Continuation type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: RETURN  (r1 I:kotlin.coroutines.experimental.Continuation\<T\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.coroutines.experimental.Continuation\<T\> kotlin.coroutines.experimental.jvm.internal.CoroutineIntrinsics.interceptContinuationIfNeeded((r1 I:kotlin.coroutines.experimental.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.experimental.Continuation\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/coroutines\/experimental\/CoroutineContext;, Lkotlin\/coroutines\/experimental\/Continuation\<, \-TT;\>;), Lkotlin\/coroutines\/experimental\/Continuation\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
}

