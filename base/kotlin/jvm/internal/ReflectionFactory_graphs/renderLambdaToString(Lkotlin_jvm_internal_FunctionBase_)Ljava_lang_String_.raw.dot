digraph "CFG forkotlin.jvm.internal.ReflectionFactory.renderLambdaToString(Lkotlin\/jvm\/internal\/FunctionBase;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:java.lang.Class) = (r2 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: INVOKE  (r2 I:java.lang.reflect.Type[]) = (r2 I:java.lang.Class) java.lang.Class.getGenericInterfaces():java.lang.reflect.Type[] type: VIRTUAL \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000b: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"kotlin.jvm.functions.\" \l0x0011: INVOKE  (r0 I:boolean) = (r2 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0021 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: CONST_STR  (r0 I:java.lang.String) =  \"kotlin.jvm.functions.\" \l0x0019: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x001d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.jvm.internal.ReflectionFactory.renderLambdaToString((r1 'this' I:kotlin.jvm.internal.ReflectionFactory A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.jvm.internal.FunctionBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.3\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

