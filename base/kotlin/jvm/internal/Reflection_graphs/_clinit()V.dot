digraph "CFG forkotlin.jvm.internal.Reflection.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException \-\> 0x000f \}\lSplitter:B:1:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|r0 = (kotlin.jvm.internal.ReflectionFactory) java.lang.Class.forName(\"kotlin.reflect.jvm.internal.ReflectionFactoryImpl\").newInstance()     \/\/ Catch:\{ ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException \-\> 0x000f \}\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lExcHandler: ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException (unused java.lang.Throwable)\lSplitter:B:1:0x0003\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|PHI: r0 \l  PHI: (r0v1 kotlin.jvm.internal.ReflectionFactory) = (r0v0 kotlin.jvm.internal.ReflectionFactory), (r0v6 kotlin.jvm.internal.ReflectionFactory) binds: [B:4:?, B:3:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|kotlin.jvm.internal.ReflectionFactory r0 = new kotlin.jvm.internal.ReflectionFactory()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|PHI: r0 \l  PHI: (r0v2 kotlin.jvm.internal.ReflectionFactory) = (r0v1 kotlin.jvm.internal.ReflectionFactory), (r0v5 kotlin.jvm.internal.ReflectionFactory) binds: [B:5:0x0010, B:6:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|factory = r0\lEMPTY_K_CLASS_ARRAY = new kotlin.reflect.KClass[0]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|RETURN\l|return\l}"];
MethodNode[shape=record,label="{static void kotlin.jvm.internal.Reflection.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
}

