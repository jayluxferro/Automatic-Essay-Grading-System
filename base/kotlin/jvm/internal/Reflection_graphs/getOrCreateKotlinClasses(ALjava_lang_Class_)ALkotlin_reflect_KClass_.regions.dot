digraph "CFG forkotlin.jvm.internal.Reflection.getOrCreateKotlinClasses([Ljava\/lang\/Class;)[Lkotlin\/reflect\/KClass;" {
subgraph cluster_Region_1466503204 {
label = "R(2:0|(2:(1:3)|(3:4|(1:6)|7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r4.length\l}"];
subgraph cluster_Region_602581697 {
label = "R(2:(1:3)|(3:4|(1:6)|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1824560884 {
label = "IF [B:1:0x0001] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r0 == 0) goto L_0x0003\l}"];
subgraph cluster_Region_513787528 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|RETURN\l|return EMPTY_K_CLASS_ARRAY\l}"];
}
}
subgraph cluster_Region_586434348 {
label = "R(3:4|(1:6)|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|kotlin.reflect.KClass[] kotlin.reflect.KClass[] r1 = new kotlin.reflect.KClass[r0]\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1757999496 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:4:0x0006, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0009\-\>B:6:0x000b\l|if (r2 \< r0) goto L_0x000b\l}"];
subgraph cluster_Region_2000626821 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|LOOP_END\lLOOP:0: B:5:0x0009\-\>B:6:0x000b\l|r1[r2] = getOrCreateKotlinClass(r4[r2])\lr2++\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r1\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static kotlin.reflect.KClass[] kotlin.jvm.internal.Reflection.getOrCreateKotlinClasses((r4v0 java.lang.Class[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_6 -> Node_5;
Node_2 -> Node_3;
Node_8 -> Node_7;
}

