digraph "CFG forkotlin.jvm.internal.Reflection.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST_STR  (r1 I:java.lang.String) =  \"kotlin.reflect.jvm.internal.ReflectionFactoryImpl\" \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0003\l|0x0003: INVOKE  (r1 I:java.lang.Class) = (r1 I:java.lang.String) java.lang.Class.forName(java.lang.String):java.lang.Class type: STATIC A[Catch:\{ ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException \-\> 0x000f \}, TRY_ENTER]\l0x0007: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.Class) java.lang.Class.newInstance():java.lang.Object type: VIRTUAL A[Catch:\{ ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException \-\> 0x000f \}]\l0x000b: CHECK_CAST  (r1 I:kotlin.jvm.internal.ReflectionFactory) = (kotlin.jvm.internal.ReflectionFactory) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException \-\> 0x000f \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: ClassCastException \| ClassNotFoundException \| IllegalAccessException \| InstantiationException null\lSplitter:B:1:0x0003\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:kotlin.jvm.internal.ReflectionFactory) =  kotlin.jvm.internal.ReflectionFactory \l0x0015: INVOKE  (r0 I:kotlin.jvm.internal.ReflectionFactory) kotlin.jvm.internal.ReflectionFactory.\<init\>():void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: SPUT  (r0 I:kotlin.jvm.internal.ReflectionFactory) kotlin.jvm.internal.Reflection.factory kotlin.jvm.internal.ReflectionFactory \l0x001a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: NEW_ARRAY  (r0 I:kotlin.reflect.KClass[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: kotlin.reflect.KClass[] \l0x001d: SPUT  (r0 I:kotlin.reflect.KClass[]) kotlin.jvm.internal.Reflection.EMPTY_K_CLASS_ARRAY kotlin.reflect.KClass[] \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{static void kotlin.jvm.internal.Reflection.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
}

