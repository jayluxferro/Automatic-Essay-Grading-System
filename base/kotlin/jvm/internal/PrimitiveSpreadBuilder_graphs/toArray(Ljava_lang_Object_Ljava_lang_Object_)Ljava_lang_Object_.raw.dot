digraph "CFG forkotlin.jvm.internal.PrimitiveSpreadBuilder.toArray(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"values\" \l0x0002: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"result\" \l0x0007: INVOKE  (r9 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: IGET  (r0 I:int) = (r7 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.size int \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IGET  (r5 I:T[]) = (r7 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads java.lang.Object[] \l0x0016: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: ARITH  (r6 I:int) = (r2 I:int) \- (r3 I:int) \l0x001e: INVOKE  \l  (r8 I:java.lang.Object)\l  (r3 I:int)\l  (r9 I:java.lang.Object)\l  (r4 I:int)\l  (r6 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0021: ARITH  (r4 I:int) = (r4 I:int) + (r6 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: INVOKE  (r3 I:int) = \l  (r7 I:kotlin.jvm.internal.PrimitiveSpreadBuilder)\l  (r5 I:java.lang.Object)\l kotlin.jvm.internal.PrimitiveSpreadBuilder.getSize(java.lang.Object):int type: VIRTUAL \l0x0026: INVOKE  \l  (r5 I:java.lang.Object)\l  (r1 I:int)\l  (r9 I:java.lang.Object)\l  (r4 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0029: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l0x002a: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IGET  (r0 I:int) = (r7 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.size int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:15:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: IGET  (r0 I:int) = (r7 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.size int \l0x003a: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x003b: INVOKE  \l  (r8 I:java.lang.Object)\l  (r1 I:int)\l  (r9 I:java.lang.Object)\l  (r4 I:int)\l  (r0 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: RETURN  (r9 I:T) \l}"];
MethodNode[shape=record,label="{protected final T kotlin.jvm.internal.PrimitiveSpreadBuilder.toArray((r7 'this' I:kotlin.jvm.internal.PrimitiveSpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r8 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;TT;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

