digraph "CFG forkotlin.jvm.internal.PrimitiveSpreadBuilder.toArray(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"values\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, \"result\")\lint r0 = r7.size + \-1\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if (r0 \< 0) goto L_0x0033\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|r2 = 0\lr3 = 0\lr4 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|LOOP_START\lPHI: r2 r3 r4 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:2:0x0011, B:9:0x002e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:2:0x0011, B:9:0x002e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v3 int) = (r4v2 int), (r4v4 int) binds: [B:2:0x0011, B:9:0x002e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0014\-\>B:9:0x002e\l|r5 = r7.spreads[r2]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r5 == null) goto L_0x002c\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r3 \>= r2) goto L_0x0022\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|int r6 = r2 \- r3\ljava.lang.System.arraycopy(r8, r3, r9, r4, r6)\lint r4 = r4 + r6\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|PHI: r4 \l  PHI: (r4v5 int) = (r4v3 int), (r4v7 int) binds: [B:5:0x001a, B:6:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = getSize(r5)\ljava.lang.System.arraycopy(r5, 0, r9, r4, r3)\lint r4 = r4 + r3\lint r3 = r2 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|PHI: r3 r4 \l  PHI: (r3v2 int) = (r3v1 int), (r3v4 int) binds: [B:4:0x0018, B:7:0x0022] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 int) = (r4v3 int), (r4v6 int) binds: [B:4:0x0018, B:7:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == r0) goto L_0x0031\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|LOOP_END\lLOOP:0: B:3:0x0014\-\>B:9:0x002e\l|int r2 = r2 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|r1 = r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|r4 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|PHI: r1 r4 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:11:0x0033, B:10:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v0 int) = (r4v1 int), (r4v4 int) binds: [B:11:0x0033, B:10:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|if (r1 \>= r7.size) goto L_0x003e\l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|java.lang.System.arraycopy(r8, r1, r9, r4, r7.size \- r1)\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|RETURN\l|return r9\l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected final T kotlin.jvm.internal.PrimitiveSpreadBuilder.toArray((r7v0 'this' kotlin.jvm.internal.PrimitiveSpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r8v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TT;TT;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_3;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_16 -> Node_10;
}

