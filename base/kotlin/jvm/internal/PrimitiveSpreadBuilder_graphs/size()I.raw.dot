digraph "CFG forkotlin.jvm.internal.PrimitiveSpreadBuilder.size()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.size int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r4 I:T[]) = (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads java.lang.Object[] \l0x000a: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: INVOKE  (r4 I:int) = \l  (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder)\l  (r4 I:java.lang.Object)\l kotlin.jvm.internal.PrimitiveSpreadBuilder.getSize(java.lang.Object):int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{protected final int kotlin.jvm.internal.PrimitiveSpreadBuilder.size((r5 'this' I:kotlin.jvm.internal.PrimitiveSpreadBuilder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_3;
}

