digraph "CFG forkotlin.jvm.internal.PackageReference.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) kotlin.jvm.internal.PackageReference \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:java.lang.Class) = (r1 I:kotlin.jvm.internal.PackageReference) kotlin.jvm.internal.PackageReference.getJClass():java.lang.Class type: VIRTUAL \l0x0008: CHECK_CAST  (r2 I:kotlin.jvm.internal.PackageReference) = (kotlin.jvm.internal.PackageReference) (r2 I:?[OBJECT, ARRAY]) \l0x000a: INVOKE  (r2 I:java.lang.Class) = (r2 I:kotlin.jvm.internal.PackageReference) kotlin.jvm.internal.PackageReference.getJClass():java.lang.Class type: VIRTUAL \l0x000e: INVOKE  (r2 I:boolean) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.PackageReference.equals((r1 'this' I:kotlin.jvm.internal.PackageReference A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

