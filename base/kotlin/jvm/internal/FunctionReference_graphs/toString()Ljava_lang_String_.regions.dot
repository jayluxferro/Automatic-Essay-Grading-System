digraph "CFG forkotlin.jvm.internal.FunctionReference.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_1296421009 {
label = "R(2:0|(2:(1:3)|(1:(2:(1:6)|(2:7|8)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.reflect.KCallable kotlin.reflect.KCallable r0 = compute()\l}"];
subgraph cluster_Region_1231275299 {
label = "R(2:(1:3)|(1:(2:(1:6)|(2:7|8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1771096314 {
label = "IF [B:1:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 != r2) goto L_0x0006\l}"];
subgraph cluster_Region_1253502298 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r0.toString()\l}"];
}
}
subgraph cluster_Region_1249980695 {
label = "R(1:(2:(1:6)|(2:7|8)))";
node [shape=record,color=blue];
subgraph cluster_Region_414063466 {
label = "R(2:(1:6)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1854932577 {
label = "IF [B:5:0x0015] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|if (\"\<init\>\".equals(getName()) == true) goto L_0x0017\l}"];
subgraph cluster_Region_957193293 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|SYNTHETIC\lRETURN\l|return \"constructor (Kotlin reflection is not available)\"\l}"];
}
}
subgraph cluster_Region_2059865074 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \"function \" + getName() + \" (Kotlin reflection is not available)\"\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.jvm.internal.FunctionReference.toString((r2v0 'this' kotlin.jvm.internal.FunctionReference A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

