digraph "CFG forkotlin.jvm.internal.FunctionReference.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) kotlin.jvm.internal.FunctionReference \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0053 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CHECK_CAST  (r5 I:kotlin.jvm.internal.FunctionReference) = (kotlin.jvm.internal.FunctionReference) (r5 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:kotlin.reflect.KDeclarationContainer) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: INVOKE  (r1 I:kotlin.reflect.KDeclarationContainer) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: INVOKE  (r1 I:kotlin.reflect.KDeclarationContainer) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l0x001c: INVOKE  (r3 I:kotlin.reflect.KDeclarationContainer) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l0x0020: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: INVOKE  (r1 I:java.lang.String) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getName():java.lang.String type: VIRTUAL \l0x002a: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getName():java.lang.String type: VIRTUAL \l0x002e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: INVOKE  (r1 I:java.lang.String) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getSignature():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getSignature():java.lang.String type: VIRTUAL \l0x003c: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: INVOKE  (r1 I:java.lang.Object) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getBoundReceiver():java.lang.Object type: VIRTUAL \l0x0046: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.getBoundReceiver():java.lang.Object type: VIRTUAL \l0x004a: INVOKE  (r5 I:boolean) = (r1 I:java.lang.Object), (r5 I:java.lang.Object) kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) kotlin.reflect.KFunction \l}"];
Node_22 [shape=record,label="{22\:\ 0x0055|0x0055: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0060 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0057|0x0057: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r4 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.compute():kotlin.reflect.KCallable type: VIRTUAL \l0x005b: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Object), (r0 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x005f|0x005f: RETURN  (r5 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0060|0x0060: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.FunctionReference.equals((r4 'this' I:kotlin.jvm.internal.FunctionReference A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_19;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
}

