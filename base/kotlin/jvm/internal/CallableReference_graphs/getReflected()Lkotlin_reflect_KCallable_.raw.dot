digraph "CFG forkotlin.jvm.internal.CallableReference.getReflected()Lkotlin\/reflect\/KCallable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r1 I:kotlin.jvm.internal.CallableReference) kotlin.jvm.internal.CallableReference.compute():kotlin.reflect.KCallable type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r0 I:kotlin.reflect.KCallable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:kotlin.jvm.KotlinReflectionNotSupportedError) =  kotlin.jvm.KotlinReflectionNotSupportedError \l0x0009: INVOKE  (r0 I:kotlin.jvm.KotlinReflectionNotSupportedError) kotlin.jvm.KotlinReflectionNotSupportedError.\<init\>():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected kotlin.reflect.KCallable kotlin.jvm.internal.CallableReference.getReflected((r1 'this' I:kotlin.jvm.internal.CallableReference A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

