digraph "CFG forkotlin.jvm.internal.CollectionToArray.toArrayImpl(Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function0;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r2 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r2 I:java.lang.Object) = (r3 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE \l0x000a: CHECK_CAST  (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r2 I:java.lang.Object[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l0x0011: INVOKE  (r1 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: INVOKE  (r2 I:java.lang.Object) = (r3 I:kotlin.jvm.functions.Function0) kotlin.jvm.functions.Function0.invoke():java.lang.Object type: INTERFACE \l0x001b: CHECK_CAST  (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r2 I:java.lang.Object[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r3 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0022: INVOKE  (r3 I:java.lang.Object) = \l  (r4 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0026: CHECK_CAST  (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:?[OBJECT, ARRAY]) \l0x0028: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: ARITH  (r0 I:int) = (r4 I:int) + (1 int) \l0x002b: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002f: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0031: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:21:0x005e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003b \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: RETURN  (r3 I:java.lang.Object[]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: ARITH  (r4 I:int) = (r0 I:int) * (3 int) \l0x003d: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x003f: ARITH  (r4 I:int) = (r4 I:int) \>\>\> (1 int) \l0x0041: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2147483645(0x7ffffffd, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:20:0x0054 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:18:0x004c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (2147483645(0x7ffffffd, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: NEW_INSTANCE  (r2 I:java.lang.OutOfMemoryError) =  java.lang.OutOfMemoryError \l0x004e: INVOKE  (r2 I:java.lang.OutOfMemoryError) java.lang.OutOfMemoryError.\<init\>():void type: DIRECT \l0x0051: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|0x0053: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: INVOKE  (r3 I:java.lang.Object[]) = (r3 I:java.lang.Object[]), (r4 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x0058: CONST_STR  (r4 I:java.lang.String) =  \"Arrays.copyOf(result, newSize)\" \l0x005a: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|0x005e: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|0x0062: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x006f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: INVOKE  (r2 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0068: INVOKE  (r2 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function2)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x006c: CHECK_CAST  (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x006e|0x006e: RETURN  (r2 I:java.lang.Object[]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x006f|0x006f: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private static final java.lang.Object[] kotlin.jvm.internal.CollectionToArray.toArrayImpl((r2 I:java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function0\<java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super java.lang.Integer, java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super java.lang.Object[], ? super java.lang.Integer, java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;, Lkotlin\/jvm\/functions\/Function0\<, [, Ljava\/lang\/Object;, \>;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Integer;, [, Ljava\/lang\/Object;, \>;, Lkotlin\/jvm\/functions\/Function2\<, \-[, Ljava\/lang\/Object;, \-, Ljava\/lang\/Integer;, [, Ljava\/lang\/Object;, \>;)[, Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_9;
}

