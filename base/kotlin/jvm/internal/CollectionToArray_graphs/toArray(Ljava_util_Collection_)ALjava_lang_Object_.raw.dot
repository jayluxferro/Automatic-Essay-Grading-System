digraph "CFG forkotlin.jvm.internal.CollectionToArray.toArray(Ljava\/util\/Collection;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"collection\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r0 I:int) = (r4 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: SGET  (r4 I:java.lang.Object[]) =  kotlin.jvm.internal.CollectionToArray.EMPTY java.lang.Object[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l0x0012: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x001e: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0022: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0024: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r2 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:19:0x0052 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: ARITH  (r1 I:int) = (r2 I:int) * (3 int) \l0x0031: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0033: ARITH  (r1 I:int) = (r1 I:int) \>\>\> (1 int) \l0x0035: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (2147483645(0x7ffffffd, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:18:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:16:0x0040 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2147483645(0x7ffffffd, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: NEW_INSTANCE  (r4 I:java.lang.OutOfMemoryError) =  java.lang.OutOfMemoryError \l0x0042: INVOKE  (r4 I:java.lang.OutOfMemoryError) java.lang.OutOfMemoryError.\<init\>():void type: DIRECT \l0x0045: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.lang.Object[]), (r1 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x004c: CONST_STR  (r1 I:java.lang.String) =  \"Arrays.copyOf(result, newSize)\" \l0x004e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: INVOKE  (r1 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0062 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: INVOKE  (r4 I:java.lang.Object[]) = (r0 I:java.lang.Object[]), (r2 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x005c: CONST_STR  (r0 I:java.lang.String) =  \"Arrays.copyOf(result, size)\" \l0x005e: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0061|0x0061: RETURN  (r4 I:java.lang.Object[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{public static final java.lang.Object[] kotlin.jvm.internal.CollectionToArray.toArray((r4 I:java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;)[, Ljava\/lang\/Object;]\}], Annotation[BUILD, kotlin.jvm.JvmName, \{name=toArray\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_2[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_23 -> Node_7;
}

