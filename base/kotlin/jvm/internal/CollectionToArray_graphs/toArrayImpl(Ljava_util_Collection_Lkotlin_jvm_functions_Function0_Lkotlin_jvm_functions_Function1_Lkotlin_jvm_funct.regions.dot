digraph "CFG forkotlin.jvm.internal.CollectionToArray.toArrayImpl(Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function0;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;)[Ljava\/lang\/Object;" {
subgraph cluster_Region_642133598 {
label = "R(2:0|(2:(1:3)|(2:4|(2:(1:7)|(2:8|(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25))))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r2.size()\l}"];
subgraph cluster_Region_549455928 {
label = "R(2:(1:3)|(2:4|(2:(1:7)|(2:8|(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1057538302 {
label = "IF [B:1:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == 0) goto L_0x0006\l}"];
subgraph cluster_Region_1355457216 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return r3.invoke()\l}"];
}
}
subgraph cluster_Region_1341180902 {
label = "R(2:4|(2:(1:7)|(2:8|(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25))))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000d|java.util.Iterator java.util.Iterator\<?\> r2 = r2.iterator()\l}"];
subgraph cluster_Region_1465530237 {
label = "R(2:(1:7)|(2:8|(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1490237592 {
label = "IF [B:5:0x0015] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r2.hasNext() == false) goto L_0x0017\l}"];
subgraph cluster_Region_189535593 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001d|RETURN\l|return r3.invoke()\l}"];
}
}
subgraph cluster_Region_1147858192 {
label = "R(2:8|(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001e|java.lang.Object[] java.lang.Object[] r3 = r4.invoke(java.lang.Integer.valueOf(r0))\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_736976368 {
label = "LOOP:0: (3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25)";
node [shape=record,color=blue];
subgraph cluster_Region_556080204 {
label = "R(3:9|(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))(1:(1:24)(0))|25)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0029|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v4 java.lang.Object[]) = (r3v3 java.lang.Object[]), (r3v5 java.lang.Object[]) binds: [B:8:0x001e, B:25:0x006f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 int) = (r4v1 int), (r4v4 int) binds: [B:8:0x001e, B:25:0x006f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0029\-\>B:25:0x006f\l|int int r0 = r4 + 1\lr3[r4] = r2.next()\l}"];
subgraph cluster_IfRegion_860518708 {
label = "IF [B:10:0x0032] THEN: R(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20))) ELSE: R(1:(1:24)(0))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0032|if (r0 \>= r3.length) goto L_0x0034\l}"];
subgraph cluster_Region_775169775 {
label = "R(1:(2:(1:13)|(3:14|(1:(1:17)(1:19))|20)))";
node [shape=record,color=blue];
subgraph cluster_Region_684924299 {
label = "R(2:(1:13)|(3:14|(1:(1:17)(1:19))|20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_842299157 {
label = "IF [B:12:0x0038] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0038|if (r2.hasNext() == false) goto L_0x003a\l}"];
subgraph cluster_Region_576138391 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x003a|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_981779796 {
label = "R(3:14|(1:(1:17)(1:19))|20)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x003b|int int r4 = ((r0 * 3) + 1) \>\>\> 1\l}"];
subgraph cluster_IfRegion_1425496063 {
label = "IF [B:15:0x0044] THEN: R(1:(1:17)(1:19)) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0044|if (r4 \<= r0) goto L_0x0046\l}"];
subgraph cluster_Region_1130341029 {
label = "R(1:(1:17)(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_873727884 {
label = "IF [B:16:0x0046] THEN: R(1:17) ELSE: R(1:19)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0046|if (r0 \< MAX_SIZE) goto L_0x0048\l}"];
subgraph cluster_Region_792503821 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0048|r4 = MAX_SIZE\l}"];
}
subgraph cluster_Region_35419619 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0053|throw new java.lang.OutOfMemoryError()\l}"];
}
}
}
}
Node_20 [shape=record,label="{20\:\ 0x0054|PHI: r4 \l  PHI: (r4v10 int) = (r4v9 int), (r4v12 int) binds: [B:15:0x0044, B:17:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Object[] r3 = java.util.Arrays.copyOf(r3, r4)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r3, \"Arrays.copyOf(result, newSize)\")\l}"];
}
}
}
subgraph cluster_Region_227551249 {
label = "R(1:(1:24)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2077369678 {
label = "IF [B:22:0x0062] THEN: R(1:24) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0062|if (r2.hasNext() == false) goto L_0x0064\l}"];
subgraph cluster_Region_1212519878 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x006e|RETURN\l|return r5.invoke(r3, java.lang.Integer.valueOf(r0))\l}"];
}
subgraph cluster_Region_1025459053 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_25 [shape=record,label="{25\:\ 0x006f|LOOP_END\lPHI: r3 \l  PHI: (r3v5 java.lang.Object[]) = (r3v4 java.lang.Object[]), (r3v6 java.lang.Object[]) binds: [B:30:0x006f, B:29:0x006f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0029\-\>B:25:0x006f\l|r4 = r0\l}"];
}
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0034}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x004c}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x005e}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0064}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0064|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x004c|SYNTHETIC\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x003a|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x006f|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x006f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final java.lang.Object[] kotlin.jvm.internal.CollectionToArray.toArrayImpl((r2v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function0\<java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super java.lang.Integer, java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function2\<? super java.lang.Object[], ? super java.lang.Integer, java.lang.Object[]\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;, Lkotlin\/jvm\/functions\/Function0\<, [, Ljava\/lang\/Object;, \>;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Integer;, [, Ljava\/lang\/Object;, \>;, Lkotlin\/jvm\/functions\/Function2\<, \-[, Ljava\/lang\/Object;, \-, Ljava\/lang\/Integer;, [, Ljava\/lang\/Object;, \>;)[, Ljava\/lang\/Object;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_21[style=dashed];
Node_12 -> Node_14[style=dashed];
Node_12 -> Node_28;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_20[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_27[style=dashed];
Node_17 -> Node_20;
Node_20 -> Node_29;
Node_22 -> Node_26;
Node_22 -> Node_30[style=dashed];
Node_25 -> Node_9;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_11 -> Node_12;
Node_18 -> Node_19;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_26 -> Node_23;
Node_27 -> Node_18;
Node_28 -> Node_13;
Node_29 -> Node_25;
Node_30 -> Node_25;
}

