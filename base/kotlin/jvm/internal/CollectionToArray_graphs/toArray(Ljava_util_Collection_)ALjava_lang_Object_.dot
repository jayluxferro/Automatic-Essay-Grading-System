digraph "CFG forkotlin.jvm.internal.CollectionToArray.toArray(Ljava\/util\/Collection;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"collection\")\lint r0 = r4.size()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r0 != 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b}"];
Node_3 [shape=record,label="{3\:\ 0x000e|java.util.Iterator r4 = r4.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (r4.hasNext() != false) goto L_0x0019\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|java.lang.Object[] r0 = new java.lang.Object[r0]\lr1 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v3 java.lang.Object[]) = (r0v2 java.lang.Object[]), (r0v4 java.lang.Object[]) binds: [B:5:0x0019, B:21:0x0062] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 int) = (r1v1 int), (r1v4 int) binds: [B:5:0x0019, B:21:0x0062] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x001c\-\>B:21:0x0062\l|int r2 = r1 + 1\lr0[r1] = r4.next()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|if (r2 \< r0.length) goto L_0x0052\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027}"];
Node_9 [shape=record,label="{9\:\ 0x002b|if (r4.hasNext() != false) goto L_0x002f\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x002f|int r1 = ((r2 * 3) + 1) \>\>\> 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|if (r1 \> r2) goto L_0x0048\l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|if (r2 \>= MAX_SIZE) goto L_0x0040\l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|r1 = MAX_SIZE\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040}"];
Node_16 [shape=record,label="{16\:\ 0x0047|throw new java.lang.OutOfMemoryError()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|PHI: r1 \l  PHI: (r1v10 int) = (r1v9 int), (r1v12 int) binds: [B:12:0x0038, B:14:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Object[] r0 = java.util.Arrays.copyOf(r0, r1)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r0, \"Arrays.copyOf(result, newSize)\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0052}"];
Node_19 [shape=record,label="{19\:\ 0x0056|if (r4.hasNext() != false) goto L_0x0062\l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|java.lang.Object[] r4 = java.util.Arrays.copyOf(r0, r2)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r4, \"Arrays.copyOf(result, size)\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|LOOP_END\lPHI: r0 \l  PHI: (r0v4 java.lang.Object[]) = (r0v3 java.lang.Object[]), (r0v6 java.lang.Object[]) binds: [B:26:0x0062, B:25:0x0062] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x001c\-\>B:21:0x0062\l|r1 = r2\l}"];
Node_22 [shape=record,label="{22\:\ 0x0058|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0040|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x002d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0062|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0062|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r4\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return EMPTY\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object[] kotlin.jvm.internal.CollectionToArray.toArray((r4v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;)[, Ljava\/lang\/Object;]\}], Annotation[BUILD, kotlin.jvm.JvmName, \{name=toArray\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_28;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_2[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_24[style=dashed];
Node_10 -> Node_29;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_22[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_27;
Node_21 -> Node_6;
Node_22 -> Node_20;
Node_23 -> Node_15;
Node_24 -> Node_10;
Node_25 -> Node_21;
Node_26 -> Node_21;
}

