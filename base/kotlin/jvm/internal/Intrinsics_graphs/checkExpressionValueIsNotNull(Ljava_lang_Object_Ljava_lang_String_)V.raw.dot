digraph "CFG forkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(Ljava\/lang\/Object;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0005: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x000a: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000d: CONST_STR  (r2 I:java.lang.String) =  \" must not be null\" \l0x000f: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0012: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0016: INVOKE  \l  (r1 I:java.lang.IllegalStateException)\l  (r2 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l0x0019: INVOKE  (r1 I:java.lang.Throwable) = (r1 I:java.lang.Throwable) kotlin.jvm.internal.Intrinsics.sanitizeStackTrace(java.lang.Throwable):java.lang.Throwable type: STATIC \l0x001d: CHECK_CAST  (r1 I:java.lang.IllegalStateException) = (java.lang.IllegalStateException) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull((r1 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
}

