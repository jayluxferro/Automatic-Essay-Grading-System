digraph "CFG forkotlin.jvm.internal.Intrinsics.areEqual(Ljava\/lang\/Float;Ljava\/lang\/Float;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: INVOKE  (r2 I:float) = (r2 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x000e: INVOKE  (r3 I:float) = (r3 I:java.lang.Float) java.lang.Float.floatValue():float type: VIRTUAL \l0x0012: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean kotlin.jvm.internal.Intrinsics.areEqual((r2 I:java.lang.Float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_3[style=dashed];
}

