digraph "CFG forkotlin.jvm.internal.Intrinsics.checkHasClass(Ljava\/lang\/String;)V" {
subgraph cluster_Region_635385494 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String java.lang.String r4 = r4.replace('\/', '.')\l}"];
subgraph cluster_TryCatchRegion_941011672 {
label = "Try: R(1:2) catches: R(3:4|5|6)";
node [shape=record,color=blue];
subgraph cluster_Region_1511078964 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x000c \}\lSplitter:B:1:0x0008\l|java.lang.Class.forName(r4)     \/\/ Catch:\{ ClassNotFoundException \-\> 0x000c \}\l}"];
}
subgraph cluster_Region_313791762 {
label = "R(3:4|5|6) | ExcHandler: ClassNotFoundException (r0v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|ExcHandler: ClassNotFoundException (r0v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x002e|throw ((java.lang.ClassNotFoundException) sanitizeStackTrace(new java.lang.ClassNotFoundException(\"Class \" + r4 + \" is not found. Please update the Kotlin runtime to the latest version\", r0)))\l}"];
}
}
}
subgraph cluster_Region_313791762 {
label = "R(3:4|5|6) | ExcHandler: ClassNotFoundException (r0v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|ExcHandler: ClassNotFoundException (r0v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x002e|throw ((java.lang.ClassNotFoundException) sanitizeStackTrace(new java.lang.ClassNotFoundException(\"Class \" + r4 + \" is not found. Please update the Kotlin runtime to the latest version\", r0)))\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
MethodNode[shape=record,label="{public static void kotlin.jvm.internal.Intrinsics.checkHasClass((r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.ClassNotFoundException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_4;
}

