digraph "CFG forkotlin.jvm.internal.Intrinsics.areEqual(Ljava\/lang\/Double;Ljava\/lang\/Double;)Z" {
subgraph cluster_Region_332253906 {
label = "R(1:(2:(1:2)|(1:(1:9))))";
node [shape=record,color=blue];
subgraph cluster_Region_723243993 {
label = "R(2:(1:2)|(1:(1:9)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1466420763 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4 == null) goto L_0x0004\l}"];
subgraph cluster_Region_1416295221 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return r5 == null\l}"];
}
}
subgraph cluster_Region_688662576 {
label = "R(1:(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1551676371 {
label = "IF [B:4:0x0008, B:6:0x0014] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r5 == null) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|ADDED_TO_REGION\l|if (r4.doubleValue() != r5.doubleValue()) goto L_?\l}"];
subgraph cluster_Region_897755473 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return false\l}"];
MethodNode[shape=record,label="{public static boolean kotlin.jvm.internal.Intrinsics.areEqual((r4v0 java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_6 -> Node_3[style=dashed];
Node_6 -> Node_9;
Node_0 -> Node_1;
Node_5 -> Node_6;
}

