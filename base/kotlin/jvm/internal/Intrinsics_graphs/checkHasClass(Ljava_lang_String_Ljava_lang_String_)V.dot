digraph "CFG forkotlin.jvm.internal.Intrinsics.checkHasClass(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.String r4 = r4.replace('\/', '.')\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ ClassNotFoundException \-\> 0x000c \}\lSplitter:B:1:0x0008\l|java.lang.Class.forName(r4)     \/\/ Catch:\{ ClassNotFoundException \-\> 0x000c \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|ExcHandler: ClassNotFoundException (r0v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0008\l|java.lang.ClassNotFoundException r0 = move\-exception\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Class \")\lr2.append(r4)\lr2.append(\" is not found: this code requires the Kotlin runtime of version at least \")\lr2.append(r5)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|throw ((java.lang.ClassNotFoundException) sanitizeStackTrace(new java.lang.ClassNotFoundException(r2.toString(), r0)))\l}"];
MethodNode[shape=record,label="{public static void kotlin.jvm.internal.Intrinsics.checkHasClass((r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.ClassNotFoundException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

