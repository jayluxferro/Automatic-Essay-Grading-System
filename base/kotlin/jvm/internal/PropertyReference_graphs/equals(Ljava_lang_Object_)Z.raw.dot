digraph "CFG forkotlin.jvm.internal.PropertyReference.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) kotlin.jvm.internal.PropertyReference \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0046 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CHECK_CAST  (r5 I:kotlin.jvm.internal.PropertyReference) = (kotlin.jvm.internal.PropertyReference) (r5 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:kotlin.reflect.KDeclarationContainer) = (r4 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l0x000f: INVOKE  (r3 I:kotlin.reflect.KDeclarationContainer) = (r5 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getOwner():kotlin.reflect.KDeclarationContainer type: VIRTUAL \l0x0013: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r1 I:java.lang.String) = (r4 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getName():java.lang.String type: VIRTUAL \l0x001d: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getName():java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r1 I:java.lang.String) = (r4 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getSignature():java.lang.String type: VIRTUAL \l0x002b: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getSignature():java.lang.String type: VIRTUAL \l0x002f: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r1 I:java.lang.Object) = (r4 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getBoundReceiver():java.lang.Object type: VIRTUAL \l0x0039: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.getBoundReceiver():java.lang.Object type: VIRTUAL \l0x003d: INVOKE  (r5 I:boolean) = (r1 I:java.lang.Object), (r5 I:java.lang.Object) kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: RETURN  (r0 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) kotlin.reflect.KProperty \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0053 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r4 I:kotlin.jvm.internal.PropertyReference) kotlin.jvm.internal.PropertyReference.compute():kotlin.reflect.KCallable type: VIRTUAL \l0x004e: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Object), (r0 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: RETURN  (r5 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|0x0053: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.PropertyReference.equals((r4 'this' I:kotlin.jvm.internal.PropertyReference A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
}

