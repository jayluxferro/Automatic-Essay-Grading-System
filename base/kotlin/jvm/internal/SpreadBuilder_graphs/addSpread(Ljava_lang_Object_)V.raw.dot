digraph "CFG forkotlin.jvm.internal.SpreadBuilder.addSpread(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.Object[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CHECK_CAST  (r5 I:java.lang.Object[]) = (java.lang.Object[]) (r5 I:?[OBJECT, ARRAY]) \l0x0009: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:24:0x0063 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IGET  (r0 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x000e: IGET  (r1 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x0010: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0014: ARRAY_LENGTH  (r2 I:int) = (r5 I:?[]) \l0x0015: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0016: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.ensureCapacity(int):void type: VIRTUAL \l0x0019: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x001a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:24:0x0063 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001f: IGET  (r3 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x0021: INVOKE  (r3 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0024: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IGET  (r0 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x002d: CHECK_CAST  (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:?[OBJECT, ARRAY]) \l0x002f: INVOKE  (r0 I:java.util.ArrayList), (r5 I:java.util.Collection) java.util.ArrayList.addAll(java.util.Collection):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.lang.Iterable \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: CHECK_CAST  (r5 I:java.lang.Iterable) = (java.lang.Iterable) (r5 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0063 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0047: IGET  (r1 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x0049: INVOKE  (r1 I:java.util.ArrayList), (r0 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.util.Iterator \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0064 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|0x0051: CHECK_CAST  (r5 I:java.util.Iterator) = (java.util.Iterator) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|0x0057: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0063 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|0x0059: IGET  (r0 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList \l0x005b: INVOKE  (r1 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x005f: INVOKE  (r0 I:java.util.ArrayList), (r1 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0063|0x0063: RETURN   \l}"];
Node_25 [shape=record,label="{25\:\ 0x0064|0x0064: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException \l0x0066: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0068: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006b: CONST_STR  (r2 I:java.lang.String) =  \"Don't know how to spread \" \l0x006d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0070: INVOKE  (r5 I:java.lang.Class) = (r5 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0074: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0077: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007b: INVOKE  \l  (r0 I:java.lang.UnsupportedOperationException)\l  (r5 I:java.lang.String)\l java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x007e|0x007e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.jvm.internal.SpreadBuilder.addSpread((r4 'this' I:kotlin.jvm.internal.SpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_24;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_15;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_21;
Node_25 -> Node_26;
}

