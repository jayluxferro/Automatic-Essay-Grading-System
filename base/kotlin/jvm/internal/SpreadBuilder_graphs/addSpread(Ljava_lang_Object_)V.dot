digraph "CFG forkotlin.jvm.internal.SpreadBuilder.addSpread(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 != null) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if ((r5 instanceof java.lang.Object[]) == false) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|java.lang.Object[] r5 = (java.lang.Object[]) r5\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r5.length \<= 0) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|r4.list.ensureCapacity(r4.list.size() + r5.length)\lint r0 = r5.length\lr1 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|LOOP_START\lPHI: r1 \l  PHI: (r1v7 int) = (r1v6 int), (r1v8 int) binds: [B:6:0x000c, B:8:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x001b\-\>B:8:0x001d\l|if (r1 \>= r0) goto L_0x0063\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|LOOP_END\lLOOP:0: B:7:0x001b\-\>B:8:0x001d\l|r2 = r5[r1]\lr4.list.add(r2)\lint r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027}"];
Node_10 [shape=record,label="{10\:\ 0x0029|if ((r5 instanceof java.util.Collection) == false) goto L_0x0033\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|r4.list.addAll((java.util.Collection) r5)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033}"];
Node_13 [shape=record,label="{13\:\ 0x0035|if ((r5 instanceof java.lang.Iterable) == false) goto L_0x004d\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|java.util.Iterator r5 = ((java.lang.Iterable) r5).iterator()\l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|LOOP_START\lLOOP:1: B:15:0x003d\-\>B:17:0x0043\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|if (r5.hasNext() == false) goto L_0x0063\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|LOOP_END\lLOOP:1: B:15:0x003d\-\>B:17:0x0043\l|java.lang.Object r0 = r5.next()\lr4.list.add(r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d}"];
Node_19 [shape=record,label="{19\:\ 0x004f|if ((r5 instanceof java.util.Iterator) == false) goto L_0x0064\l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|java.util.Iterator r5 = (java.util.Iterator) r5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|LOOP_START\lLOOP:2: B:21:0x0053\-\>B:23:0x0059\l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|if (r5.hasNext() == false) goto L_0x0063\l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|LOOP_END\lLOOP:2: B:21:0x0053\-\>B:23:0x0059\l|r4.list.add(r5.next())\l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Don't know how to spread \")\lr1.append(r5.getClass())\l}"];
Node_25 [shape=record,label="{25\:\ 0x007e|throw new java.lang.UnsupportedOperationException(r1.toString())\l}"];
Node_26 [shape=record,label="{26\:\ 0x0063|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlin.jvm.internal.SpreadBuilder.addSpread((r4v0 'this' kotlin.jvm.internal.SpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_29;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_26;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_30;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_27;
Node_17 -> Node_15;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_21;
Node_24 -> Node_25;
Node_26 -> Node_31;
Node_27 -> Node_32;
Node_28 -> Node_33;
}

