digraph "CFG forkotlin.jvm.JvmClassMappingKt.getJavaObjectType(Lkotlin\/reflect\/KClass;)Ljava\/lang\/Class;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CHECK_CAST  (r2 I:kotlin.jvm.internal.ClassBasedDeclarationContainer) = (kotlin.jvm.internal.ClassBasedDeclarationContainer) (r2 I:?[OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:java.lang.Class) = (r2 I:kotlin.jvm.internal.ClassBasedDeclarationContainer) kotlin.jvm.internal.ClassBasedDeclarationContainer.getJClass():java.lang.Class type: INTERFACE \l0x000b: INVOKE  (r0 I:boolean) = (r2 I:java.lang.Class) java.lang.Class.isPrimitive():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN  (r2 I:java.lang.Class\<T\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0016: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Class\<T\>\" \l0x0018: INVOKE  (r2 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: INVOKE  (r1 I:int) = (r0 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-1325958191, 104431, 3039496, 3052374, 3327612, 3625364, 64711720, 97526364, 109413500] t:[0x0084, 0x0079, 0x006e, 0x0063, 0x0058, 0x004d, 0x0042, 0x0037, 0x002c] \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: CONST_STR  (r1 I:java.lang.String) =  \"short\" \l0x002e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Short\>) =  java.lang.Short.class \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: CONST_STR  (r1 I:java.lang.String) =  \"float\" \l0x0039: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Float\>) =  java.lang.Float.class \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: CONST_STR  (r1 I:java.lang.String) =  \"boolean\" \l0x0044: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|0x0048: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Boolean\>) =  java.lang.Boolean.class \l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: CONST_STR  (r1 I:java.lang.String) =  \"void\" \l0x004f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|0x0053: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0055|0x0055: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Void\>) =  java.lang.Void.class \l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|0x0058: CONST_STR  (r1 I:java.lang.String) =  \"long\" \l0x005a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x005e|0x005e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0060|0x0060: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Long\>) =  java.lang.Long.class \l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|0x0063: CONST_STR  (r1 I:java.lang.String) =  \"char\" \l0x0065: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0069|0x0069: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_29 [shape=record,label="{29\:\ 0x006b|0x006b: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Character\>) =  java.lang.Character.class \l}"];
Node_30 [shape=record,label="{30\:\ 0x006e|0x006e: CONST_STR  (r1 I:java.lang.String) =  \"byte\" \l0x0070: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0074|0x0074: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_32 [shape=record,label="{32\:\ 0x0076|0x0076: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Byte\>) =  java.lang.Byte.class \l}"];
Node_33 [shape=record,label="{33\:\ 0x0079|0x0079: CONST_STR  (r1 I:java.lang.String) =  \"int\" \l0x007b: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x007f|0x007f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_35 [shape=record,label="{35\:\ 0x0081|0x0081: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Integer\>) =  java.lang.Integer.class \l}"];
Node_36 [shape=record,label="{36\:\ 0x0084|0x0084: CONST_STR  (r1 I:java.lang.String) =  \"double\" \l0x0086: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x008a|0x008a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x008e \l}"];
Node_38 [shape=record,label="{38\:\ 0x008c|0x008c: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Double\>) =  java.lang.Double.class \l}"];
Node_39 [shape=record,label="{39\:\ 0x008e|0x008e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0091 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0090|0x0090: RETURN  (r2 I:java.lang.Class\<T\>) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0091|0x0091: NEW_INSTANCE  (r2 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0093: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Class\<T\>\" \l0x0095: INVOKE  (r2 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x0098|0x0098: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Class\<T\> kotlin.jvm.JvmClassMappingKt.getJavaObjectType((r2 I:kotlin.reflect.KClass\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/reflect\/KClass\<, TT;\>;), Ljava\/lang\/Class\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_39[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_15;
Node_10 -> Node_18;
Node_10 -> Node_21;
Node_10 -> Node_24;
Node_10 -> Node_27;
Node_10 -> Node_30;
Node_10 -> Node_33;
Node_10 -> Node_36;
Node_10 -> Node_39;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_39;
Node_14 -> Node_39;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_39;
Node_17 -> Node_39;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_39;
Node_20 -> Node_39;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_39;
Node_23 -> Node_39;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_39;
Node_26 -> Node_39;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_39;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_41 -> Node_42;
}

