digraph "CFG forkotlin.io.FileTreeWalk.DirectoryState.\<init\>(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"rootDir\")\lsuper(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (kotlin._Assertions.ENABLED == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|boolean r2 = r2.isDirectory()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (kotlin._Assertions.ENABLED == false) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r2 == false) goto L_0x0017\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017}"];
Node_6 [shape=record,label="{6\:\ 0x0020|throw new java.lang.AssertionError(\"rootDir must be verified to be directory beforehand.\")\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlin.io.FileTreeWalk.DirectoryState.\<init\>((r1v0 'this' kotlin.io.FileTreeWalk$DirectoryState A[IMMUTABLE_TYPE, THIS]), (r2v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6;
}

