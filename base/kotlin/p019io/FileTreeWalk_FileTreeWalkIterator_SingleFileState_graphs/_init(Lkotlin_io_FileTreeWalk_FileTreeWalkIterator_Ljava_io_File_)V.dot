digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>(Lkotlin\/io\/FileTreeWalk$FileTreeWalkIterator;Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"rootFile\")\lr1.this$0 = r2\lsuper(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (kotlin._Assertions.ENABLED == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|boolean r2 = r3.isFile()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (kotlin._Assertions.ENABLED == false) goto L_?\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (r2 == false) goto L_0x0019\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019}"];
Node_6 [shape=record,label="{6\:\ 0x0022|throw new java.lang.AssertionError(\"rootFile must be verified to be file beforehand.\")\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>((r1v0 'this' kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.io.FileTreeWalk$FileTreeWalkIterator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/File;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6;
}

