digraph "CFG forkotlin.io.FilePathComponents.subPath(II)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r11 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r11 I:?[int, byte, short, char]) \> (r12 I:?[int, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r10 I:kotlin.io.FilePathComponents) kotlin.io.FilePathComponents.getSize():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r12 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.io.File) =  java.io.File \l0x000c: IGET  (r1 I:java.util.List\<java.io.File\>) = (r10 I:kotlin.io.FilePathComponents) kotlin.io.FilePathComponents.segments java.util.List \l0x000e: INVOKE  (r11 I:java.util.List) = (r1 I:java.util.List), (r11 I:int), (r12 I:int) java.util.List.subList(int, int):java.util.List type: INTERFACE \l0x0012: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0013: CHECK_CAST  (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:?[OBJECT, ARRAY]) \l0x0015: SGET  (r11 I:java.lang.String) =  java.io.File.separator java.lang.String \l0x0017: CONST_STR  (r12 I:java.lang.String) =  \"File.separator\" \l0x0019: INVOKE  (r11 I:java.lang.Object), (r12 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x001c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x001d: CHECK_CAST  (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:?[OBJECT, ARRAY]) \l0x001f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: CONST  (r8 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x0026: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: INVOKE  (r11 I:java.lang.String) = \l  (r1 I:java.lang.Iterable)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:int)\l  (r6 I:java.lang.CharSequence)\l  (r7 I:kotlin.jvm.functions.Function1)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l kotlin.collections.CollectionsKt.joinToString$default(java.lang.Iterable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String type: STATIC \l0x002b: INVOKE  (r0 I:java.io.File), (r11 I:java.lang.String) java.io.File.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: RETURN  (r0 I:java.io.File) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: NEW_INSTANCE  (r11 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0031: INVOKE  (r11 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l0x0034: CHECK_CAST  (r11 I:java.lang.Throwable) = (java.lang.Throwable) (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.io.File kotlin.io.FilePathComponents.subPath((r10 'this' I:kotlin.io.FilePathComponents A[IMMUTABLE_TYPE, THIS]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_6;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

