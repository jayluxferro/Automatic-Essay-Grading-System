digraph "CFG forkotlin.io.FilesKt__FilePathComponentsKt.getRootName(Ljava\/io\/File;)Ljava\/lang\/String;" {
subgraph cluster_Region_65444041 {
label = "R(2:0|(2:(2:2|3)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\ljava.lang.String java.lang.String r0 = r2.getPath()\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r0, \"path\")\ljava.lang.String java.lang.String r2 = r2.getPath()\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r2, \"path\")\lint int r2 = getRootLength$FilesKt__FilePathComponentsKt(r2)\l}"];
subgraph cluster_Region_1880804601 {
label = "R(2:(2:2|3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1689120765 {
label = "IF [B:1:0x001b] THEN: R(2:2|3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001b|if (r0 != null) goto L_0x001d\l}"];
subgraph cluster_Region_188357884 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001d|java.lang.String java.lang.String r2 = r0.substring(0, r2)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r2, \"(this as java.lang.Strinâ€¦ing(startIndex, endIndex)\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_391336713 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002f|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type java.lang.String\")\l}"];
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0028}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.FilesKt__FilePathComponentsKt.getRootName((r2v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
}

