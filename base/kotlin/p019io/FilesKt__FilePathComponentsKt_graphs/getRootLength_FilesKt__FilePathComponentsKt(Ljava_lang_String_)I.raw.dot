digraph "CFG forkotlin.io.FilesKt__FilePathComponentsKt.getRootLength$FilesKt__FilePathComponentsKt(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0001: CHECK_CAST  (r6 I:java.lang.CharSequence) = (java.lang.CharSequence) (r6 I:?[OBJECT, ARRAY]) \l0x0003: SGET  (r1 I:char) =  java.io.File.separatorChar char \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0008: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:int) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:char)\l  (r2 I:int)\l  (r3 I:boolean)\l  (r4 I:int)\l  (r5 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int type: STATIC \l0x000e: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: INVOKE  (r0 I:char) = (r8 I:java.lang.String), (r7 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001b: SGET  (r1 I:char) =  java.io.File.separatorChar char \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: SGET  (r1 I:char) =  java.io.File.separatorChar char \l0x0021: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0022: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0024: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0026: INVOKE  (r0 I:int) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:char)\l  (r2 I:int)\l  (r3 I:boolean)\l  (r4 I:int)\l  (r5 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: SGET  (r1 I:char) =  java.io.File.separatorChar char \l0x002e: ARITH  (r2 I:int) = (r0 I:int) + (1 int) \l0x0030: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0031: CONST  (r4 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0032: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r0 I:int) = \l  (r0 I:java.lang.CharSequence)\l  (r1 I:char)\l  (r2 I:int)\l  (r3 I:boolean)\l  (r4 I:int)\l  (r5 I:java.lang.Object)\l kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x003c \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: RETURN  (r0 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: INVOKE  (r8 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: RETURN  (r8 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: RETURN  (r7 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: CONST  (r1 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0050 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: ARITH  (r2 I:int) = (r0 I:int) + (\-1 int) \l0x0048: INVOKE  (r2 I:char) = (r8 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0050 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: RETURN  (r0 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0050|0x0050: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0051: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_22 [shape=record,label="{22\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0061 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|0x0054: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0055: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0056: INVOKE  (r0 I:boolean) = \l  (r6 I:java.lang.CharSequence)\l  (r1 I:char)\l  (r3 I:boolean)\l  (r0 I:int)\l  (r2 I:java.lang.Object)\l kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|0x005a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0061 \l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|0x005c: INVOKE  (r8 I:int) = (r8 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0060|0x0060: RETURN  (r8 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|0x0061: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private static final int kotlin.io.FilesKt__FilePathComponentsKt.getRootLength$FilesKt__FilePathComponentsKt((r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
}

