digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.\<init\>(Lkotlin\/io\/FileTreeWalk;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r3 I:kotlin.io.FileTreeWalk)\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x0002: INVOKE  (r2 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r0 I:java.util.Stack) =  java.util.Stack \l0x0007: INVOKE  (r0 I:java.util.Stack) java.util.Stack.\<init\>():void type: DIRECT \l0x000a: IPUT  \l  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>)\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x000c: INVOKE  (r0 I:java.io.File) = (r3 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.access$getStart$p(kotlin.io.FileTreeWalk):java.io.File type: STATIC \l0x0010: INVOKE  (r0 I:boolean) = (r0 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0024 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x0018: INVOKE  (r3 I:java.io.File) = (r3 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.access$getStart$p(kotlin.io.FileTreeWalk):java.io.File type: STATIC \l0x001c: INVOKE  (r3 I:kotlin.io.FileTreeWalk$DirectoryState) = \l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l  (r3 I:java.io.File)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.directoryState(java.io.File):kotlin.io.FileTreeWalk$DirectoryState type: DIRECT \l0x0020: INVOKE  (r0 I:java.util.Stack), (r3 I:java.lang.Object) java.util.Stack.push(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|0x0024: INVOKE  (r0 I:java.io.File) = (r3 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.access$getStart$p(kotlin.io.FileTreeWalk):java.io.File type: STATIC \l0x0028: INVOKE  (r0 I:boolean) = (r0 I:java.io.File) java.io.File.isFile():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003d \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x0030: NEW_INSTANCE  (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState) =  kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState \l0x0032: INVOKE  (r3 I:java.io.File) = (r3 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.access$getStart$p(kotlin.io.FileTreeWalk):java.io.File type: STATIC \l0x0036: INVOKE  \l  (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState)\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l  (r3 I:java.io.File)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File):void type: DIRECT \l0x0039: INVOKE  (r0 I:java.util.Stack), (r1 I:java.lang.Object) java.util.Stack.push(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x003d|0x003d: INVOKE  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.done():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: RETURN   \l}"];
MethodNode[shape=record,label="{public void kotlin.io.FileTreeWalk.FileTreeWalkIterator.\<init\>((r2 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

