digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.gotoNext()Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.Stack) java.util.Stack.empty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:java.io.File) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CHECK_CAST  (r0 I:kotlin.io.FileTreeWalk$WalkState) = (kotlin.io.FileTreeWalk$WalkState) (r0 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r1 I:java.io.File) = (r0 I:kotlin.io.FileTreeWalk$WalkState) kotlin.io.FileTreeWalk.WalkState.step():java.io.File type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x001f: INVOKE  (r0 I:java.util.Stack) java.util.Stack.pop():java.lang.Object type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: INVOKE  (r0 I:java.io.File) = (r0 I:kotlin.io.FileTreeWalk$WalkState) kotlin.io.FileTreeWalk.WalkState.getRoot():java.io.File type: VIRTUAL \l0x0027: INVOKE  (r0 I:boolean) = (r1 I:java.lang.Object), (r0 I:java.lang.Object) kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004c \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: INVOKE  (r0 I:boolean) = (r1 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x0035: INVOKE  (r0 I:int) = (r0 I:java.util.Stack) java.util.Stack.size():int type: VIRTUAL \l0x0039: IGET  (r2 I:kotlin.io.FileTreeWalk) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x003b: INVOKE  (r2 I:int) = (r2 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.access$getMaxDepth$p(kotlin.io.FileTreeWalk):int type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:17:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: IGET  (r0 I:java.util.Stack\<kotlin.io.FileTreeWalk$WalkState\>) = (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.state java.util.Stack \l0x0044: INVOKE  (r1 I:kotlin.io.FileTreeWalk$DirectoryState) = \l  (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l  (r1 I:java.io.File)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.directoryState(java.io.File):kotlin.io.FileTreeWalk$DirectoryState type: DIRECT \l0x0048: INVOKE  (r0 I:java.util.Stack), (r1 I:java.lang.Object) java.util.Stack.push(java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: RETURN  (r1 I:java.io.File) \l}"];
MethodNode[shape=record,label="{private final java.io.File kotlin.io.FileTreeWalk.FileTreeWalkIterator.gotoNext((r3 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_0;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_0;
}

