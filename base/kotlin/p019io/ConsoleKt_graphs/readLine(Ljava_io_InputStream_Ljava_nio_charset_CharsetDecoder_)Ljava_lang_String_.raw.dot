digraph "CFG forkotlin.io.ConsoleKt.readLine(Ljava\/io\/InputStream;Ljava\/nio\/charset\/CharsetDecoder;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"inputStream\" \l0x0002: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"decoder\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:float) = (r8 I:java.nio.charset.CharsetDecoder) java.nio.charset.CharsetDecoder.maxCharsPerByte():float type: VIRTUAL \l0x000e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: CAST  (r2 I:float) = (float) (r1 I:int) \l0x0010: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: CMP_G  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0092 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x001c: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:int) java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer type: STATIC \l0x0020: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0021: INVOKE  (r2 I:java.nio.CharBuffer) = (r2 I:int) java.nio.CharBuffer.allocate(int):java.nio.CharBuffer type: STATIC \l0x0025: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002a: INVOKE  (r5 I:int) = (r7 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL \l0x002e: CONST  (r6 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: RETURN  (r7 I:java.lang.String) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: CAST  (r5 I:byte) = (byte) (r5 I:int) \l0x0034: INVOKE  (r0 I:java.nio.ByteBuffer), (r5 I:byte) java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer type: VIRTUAL \l0x0037: CONST_STR  (r5 I:java.lang.String) =  \"byteBuffer\" \l0x0039: INVOKE  (r0 I:java.lang.Object), (r5 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x003c: CONST_STR  (r5 I:java.lang.String) =  \"charBuffer\" \l0x003e: INVOKE  (r2 I:java.lang.Object), (r5 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0041: INVOKE  (r5 I:boolean) = \l  (r8 I:java.nio.charset.CharsetDecoder)\l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:java.nio.CharBuffer)\l  (r3 I:boolean)\l kotlin.io.ConsoleKt.tryDecode(java.nio.charset.CharsetDecoder, java.nio.ByteBuffer, java.nio.CharBuffer, boolean):boolean type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: INVOKE  (r5 I:boolean) = (r2 I:java.nio.CharBuffer) kotlin.io.ConsoleKt.containsLineSeparator(java.nio.CharBuffer):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004e \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: INVOKE  (r5 I:boolean) = (r2 I:java.nio.CharBuffer) java.nio.CharBuffer.hasRemaining():boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|0x0054: INVOKE  (r5 I:char) = (r2 I:java.nio.CharBuffer) kotlin.io.ConsoleKt.dequeue(java.nio.CharBuffer):char type: STATIC \l0x0058: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x005b|0x005b: INVOKE  (r5 I:int) = (r7 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x005f|0x005f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0033 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|0x0061: INVOKE  \l  (r8 I:java.nio.charset.CharsetDecoder)\l  (r0 I:java.nio.ByteBuffer)\l  (r2 I:java.nio.CharBuffer)\l  (r1 I:boolean)\l kotlin.io.ConsoleKt.tryDecode(java.nio.charset.CharsetDecoder, java.nio.ByteBuffer, java.nio.CharBuffer, boolean):boolean type: STATIC \l0x0064: INVOKE  (r8 I:java.nio.charset.CharsetDecoder) java.nio.charset.CharsetDecoder.reset():java.nio.charset.CharsetDecoder type: VIRTUAL \l0x0067: INVOKE  (r7 I:int) = (r2 I:java.nio.CharBuffer) java.nio.CharBuffer.position():int type: VIRTUAL \l0x006b: INVOKE  (r8 I:char) = (r2 I:java.nio.CharBuffer), (r3 I:int) java.nio.CharBuffer.get(int):char type: VIRTUAL \l0x006f: INVOKE  (r0 I:char) = (r2 I:java.nio.CharBuffer), (r1 I:int) java.nio.CharBuffer.get(int):char type: VIRTUAL \l0x0073: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|0x0075: SWITCH  \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2] t:[0x0088, 0x0079] \l}"];
Node_22 [shape=record,label="{22\:\ 0x0079|0x0079: CONST  (r7 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x007b|0x007b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x007f \l}"];
Node_24 [shape=record,label="{24\:\ 0x007d|0x007d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0082 \l}"];
Node_25 [shape=record,label="{25\:\ 0x007f|0x007f: INVOKE  (r4 I:java.lang.StringBuilder), (r8 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0082|0x0082: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x008d \l}"];
Node_27 [shape=record,label="{27\:\ 0x0084|0x0084: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0088|0x0088: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x008d \l}"];
Node_29 [shape=record,label="{29\:\ 0x008a|0x008a: INVOKE  (r4 I:java.lang.StringBuilder), (r8 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x008d|0x008d: INVOKE  (r7 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0091|0x0091: RETURN  (r7 I:java.lang.String) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0092|0x0092: NEW_INSTANCE  (r7 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0094: CONST_STR  (r8 I:java.lang.String) =  \"Encodings with multiple chars per byte are not supported\" \l0x0096: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x009a: INVOKE  \l  (r7 I:java.lang.IllegalArgumentException)\l  (r8 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x009d: CHECK_CAST  (r7 I:java.lang.Throwable) = (java.lang.Throwable) (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x009f|0x009f: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.ConsoleKt.readLine((r7 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.nio.charset.CharsetDecoder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_32;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_19[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_9;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_28;
Node_20 -> Node_30;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_30;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_32 -> Node_33;
}

