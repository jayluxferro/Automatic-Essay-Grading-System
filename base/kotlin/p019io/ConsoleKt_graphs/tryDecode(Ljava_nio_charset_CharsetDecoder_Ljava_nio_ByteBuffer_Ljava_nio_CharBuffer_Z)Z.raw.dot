digraph "CFG forkotlin.io.ConsoleKt.tryDecode(Ljava\/nio\/charset\/CharsetDecoder;Ljava\/nio\/ByteBuffer;Ljava\/nio\/CharBuffer;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r3 I:java.nio.CharBuffer) java.nio.CharBuffer.position():int type: VIRTUAL \l0x0004: INVOKE  (r2 I:java.nio.ByteBuffer) java.nio.ByteBuffer.flip():java.nio.Buffer type: VIRTUAL \l0x0007: INVOKE  (r1 I:java.nio.charset.CoderResult) = \l  (r1 I:java.nio.charset.CharsetDecoder)\l  (r2 I:java.nio.ByteBuffer)\l  (r3 I:java.nio.CharBuffer)\l  (r4 I:boolean)\l java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean):java.nio.charset.CoderResult type: VIRTUAL \l0x000b: INVOKE  (r4 I:boolean) = (r1 I:java.nio.charset.CoderResult) java.nio.charset.CoderResult.isError():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: INVOKE  (r1 I:java.nio.charset.CoderResult) java.nio.charset.CoderResult.throwException():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r1 I:int) = (r3 I:java.nio.CharBuffer) java.nio.CharBuffer.position():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r1 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: INVOKE  (r2 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CHECK_CAST  (r2 I:java.nio.Buffer) = (java.nio.Buffer) (r2 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:java.nio.Buffer) kotlin.io.ConsoleKt.flipBack(java.nio.Buffer):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.io.ConsoleKt.tryDecode((r1 I:java.nio.charset.CharsetDecoder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.CharBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

