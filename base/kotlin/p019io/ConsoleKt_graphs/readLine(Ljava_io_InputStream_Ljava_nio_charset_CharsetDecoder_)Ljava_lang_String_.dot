digraph "CFG forkotlin.io.ConsoleKt.readLine(Ljava\/io\/InputStream;Ljava\/nio\/charset\/CharsetDecoder;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"inputStream\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"decoder\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|if ((r8.maxCharsPerByte() \> ((float) 1) ? 1 : (r8.maxCharsPerByte() == ((float) 1) ? 0 : \-1)) \> 0) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v8 boolean), (r0v9 boolean) binds: [B:3:0x0017, B:2:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x0092\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|java.nio.ByteBuffer r0 = java.nio.ByteBuffer.allocate(32)\ljava.nio.CharBuffer r2 = java.nio.CharBuffer.allocate(2)\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lint r5 = r7.read()\l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|if (r5 != \-1) goto L_0x0033\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|LOOP_START\lPHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v6 int) binds: [B:6:0x002f, B:16:0x005f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0033\-\>B:16:0x005f\l|r0.put((byte) r5)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r0, \"byteBuffer\")\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r2, \"charBuffer\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|if (tryDecode(r8, r0, r2, false) == false) goto L_0x005b\l}"];
Node_10 [shape=record,label="{10\:\ 0x0047}"];
Node_11 [shape=record,label="{11\:\ 0x004b|if (containsLineSeparator(r2) == false) goto L_0x004e\l}"];
Node_12 [shape=record,label="{12\:\ 0x004e}"];
Node_13 [shape=record,label="{13\:\ 0x0052|if (r2.hasRemaining() != false) goto L_0x005b\l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|r4.append(dequeue(r2))\l}"];
Node_15 [shape=record,label="{15\:\ 0x005b|int r5 = r7.read()\l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|LOOP_END\lLOOP:0: B:8:0x0033\-\>B:16:0x005f\l|if (r5 != \-1) goto L_0x0033\l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|tryDecode(r8, r0, r2, true)\lr8.reset()\lint r7 = r2.position()\lchar r8 = r2.get(0)\lchar r0 = r2.get(1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0075|switch(r7) \{\l    case 1: goto L_0x0088;\l    case 2: goto L_0x0079;\l    default: goto L_0x0078;\l\}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0079}"];
Node_20 [shape=record,label="{20\:\ 0x007b|if (r8 != 13) goto L_0x007f\l}"];
Node_21 [shape=record,label="{21\:\ 0x007d|if (r0 == 10) goto L_0x0082\l}"];
Node_22 [shape=record,label="{22\:\ 0x007f|r4.append(r8)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0082|if (r0 == 10) goto L_0x008d\l}"];
Node_24 [shape=record,label="{24\:\ 0x0084|r4.append(r0)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0088|if (r8 == 10) goto L_0x008d\l}"];
Node_26 [shape=record,label="{26\:\ 0x008a|r4.append(r8)\l}"];
Node_27 [shape=record,label="{27\:\ 0x008d}"];
Node_28 [shape=record,label="{28\:\ 0x0091|RETURN\l|return r4.toString()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0092}"];
Node_30 [shape=record,label="{30\:\ 0x009f|throw new java.lang.IllegalArgumentException(\"Encodings with multiple chars per byte are not supported\".toString())\l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0061|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.ConsoleKt.readLine((r7v0 java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.nio.charset.CharsetDecoder A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_29;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_31[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_8;
Node_16 -> Node_32[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_27;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_17;
Node_32 -> Node_17;
}

