digraph "CFG forkotlin.io.ByteStreamsKt.byteInputStream(Ljava\/lang\/String;Ljava\/nio\/charset\/Charset;)Ljava\/io\/ByteArrayInputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r0 I:byte[]) = (r0 I:java.lang.String), (r1 I:java.nio.charset.Charset) java.lang.String.getBytes(java.nio.charset.Charset):byte[] type: VIRTUAL \l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"(this as java.lang.String).getBytes(charset)\" \l0x0008: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000b: NEW_INSTANCE  (r1 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream \l0x000d: INVOKE  (r1 I:java.io.ByteArrayInputStream), (r0 I:byte[]) java.io.ByteArrayInputStream.\<init\>(byte[]):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: RETURN  (r1 I:java.io.ByteArrayInputStream) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.String\" \l0x0015: INVOKE  (r0 I:kotlin.TypeCastException), (r1 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final java.io.ByteArrayInputStream kotlin.io.ByteStreamsKt.byteInputStream((r0 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

