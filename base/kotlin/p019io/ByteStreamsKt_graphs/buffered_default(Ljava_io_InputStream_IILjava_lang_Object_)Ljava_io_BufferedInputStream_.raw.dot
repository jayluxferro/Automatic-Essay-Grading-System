digraph "CFG forkotlin.io.ByteStreamsKt.buffered$default(Ljava\/io\/InputStream;IILjava\/lang\/Object;)Ljava\/io\/BufferedInputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INSTANCE_OF  (r2 I:boolean) = (r0 I:?[OBJECT, ARRAY]) java.io.BufferedInputStream \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CHECK_CAST  (r0 I:java.io.BufferedInputStream) = (java.io.BufferedInputStream) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: NEW_INSTANCE  (r2 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream \l0x000f: INVOKE  \l  (r2 I:java.io.BufferedInputStream)\l  (r0 I:java.io.InputStream)\l  (r1 I:int)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream, int):void type: DIRECT \l0x0012: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r0 I:java.io.BufferedInputStream) \l}"];
MethodNode[shape=record,label="{static \/* bridge *\/ \/* synthetic *\/ java.io.BufferedInputStream kotlin.io.ByteStreamsKt.buffered$default((r0 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

