digraph "CFG forkotlin.io.ByteStreamsKt.buffered(Ljava\/io\/InputStream;I)Ljava\/io\/BufferedInputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.io.BufferedInputStream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CHECK_CAST  (r1 I:java.io.BufferedInputStream) = (java.io.BufferedInputStream) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.io.BufferedInputStream) =  java.io.BufferedInputStream \l0x0009: INVOKE  \l  (r0 I:java.io.BufferedInputStream)\l  (r1 I:java.io.InputStream)\l  (r2 I:int)\l java.io.BufferedInputStream.\<init\>(java.io.InputStream, int):void type: DIRECT \l0x000c: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r1 I:java.io.BufferedInputStream) \l}"];
MethodNode[shape=record,label="{private static final java.io.BufferedInputStream kotlin.io.ByteStreamsKt.buffered((r1 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

