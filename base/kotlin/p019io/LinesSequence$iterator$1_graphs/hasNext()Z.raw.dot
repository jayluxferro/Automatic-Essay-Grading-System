digraph "CFG forkotlin.io.LinesSequence$iterator$1.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:boolean) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.done boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:kotlin.io.LinesSequence) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.this$0 kotlin.io.LinesSequence \l0x000b: INVOKE  (r0 I:java.io.BufferedReader) = (r0 I:kotlin.io.LinesSequence) kotlin.io.LinesSequence.access$getReader$p(kotlin.io.LinesSequence):java.io.BufferedReader type: STATIC \l0x000f: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.BufferedReader) java.io.BufferedReader.readLine():java.lang.String type: VIRTUAL \l0x0013: IPUT  \l  (r0 I:java.lang.String)\l  (r2 I:kotlin.io.LinesSequence$iterator$1)\l kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l0x0015: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IPUT  (r1 I:boolean), (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.done boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.io.LinesSequence$iterator$1.hasNext((r2 'this' I:kotlin.io.LinesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
}

