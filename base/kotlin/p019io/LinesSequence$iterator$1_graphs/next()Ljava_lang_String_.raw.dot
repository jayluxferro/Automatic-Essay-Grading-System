digraph "CFG forkotlin.io.LinesSequence$iterator$1.next()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l0x000b: IPUT  \l  (r1 I:java.lang.String)\l  (r2 I:kotlin.io.LinesSequence$iterator$1)\l kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE   kotlin.jvm.internal.Intrinsics.throwNpe():void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:java.lang.String) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0015: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x0018: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.io.LinesSequence$iterator$1.next((r2 'this' I:kotlin.io.LinesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

