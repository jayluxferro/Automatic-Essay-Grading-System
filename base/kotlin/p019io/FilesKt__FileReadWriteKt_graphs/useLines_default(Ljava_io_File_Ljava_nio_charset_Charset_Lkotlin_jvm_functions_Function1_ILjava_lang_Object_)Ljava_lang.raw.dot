digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.useLines$default(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r2 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST_STR  (r4 I:java.lang.String) =  \"$receiver\" \l0x0008: INVOKE  (r1 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000b: CONST_STR  (r4 I:java.lang.String) =  \"charset\" \l0x000d: INVOKE  (r2 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0010: CONST_STR  (r4 I:java.lang.String) =  \"block\" \l0x0012: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0015: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l0x0017: NEW_INSTANCE  (r0 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x0019: INVOKE  (r0 I:java.io.FileInputStream), (r1 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT \l0x001c: CHECK_CAST  (r0 I:java.io.InputStream) = (java.io.InputStream) (r0 I:?[OBJECT, ARRAY]) \l0x001e: NEW_INSTANCE  (r1 I:java.io.InputStreamReader) =  java.io.InputStreamReader \l0x0020: INVOKE  \l  (r1 I:java.io.InputStreamReader)\l  (r0 I:java.io.InputStream)\l  (r2 I:java.nio.charset.Charset)\l java.io.InputStreamReader.\<init\>(java.io.InputStream, java.nio.charset.Charset):void type: DIRECT \l0x0023: CHECK_CAST  (r1 I:java.io.Reader) = (java.io.Reader) (r1 I:?[OBJECT, ARRAY]) \l0x0025: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.io.BufferedReader \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: CHECK_CAST  (r1 I:java.io.BufferedReader) = (java.io.BufferedReader) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: NEW_INSTANCE  (r2 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x002e: INVOKE  \l  (r2 I:java.io.BufferedReader)\l  (r1 I:java.io.Reader)\l  (r4 I:int)\l java.io.BufferedReader.\<init\>(java.io.Reader, int):void type: DIRECT \l0x0031: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: CHECK_CAST  (r1 I:java.io.Closeable) = (java.io.Closeable) (r1 I:?[OBJECT, ARRAY]) \l0x0034: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0035: CHECK_CAST  (r2 I:java.lang.Throwable) = (java.lang.Throwable) (r2 I:?[OBJECT, ARRAY]) \l0x0037: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|SYNTHETIC\lSplitter:B:8:0x0039\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0039\l|0x0039: CHECK_CAST  (r0 I:java.io.BufferedReader) = (java.io.BufferedReader) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0059 \}, TRY_ENTER]\l0x003b: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:java.io.BufferedReader) kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence type: STATIC A[Catch:\{ Throwable \-\> 0x0059 \}]\l0x003f: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1)\l  (r0 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ Throwable \-\> 0x0059 \}]\l0x0042: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|0x0043: INVOKE  (r5 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x0046: INVOKE  (r4 I:boolean) = (r5 I:int), (r5 I:int), (r4 I:int) kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|0x004a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0050 \l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: INVOKE  (r1 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: INVOKE  (r5 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: RETURN  (r3 I:java.lang.Object) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|ExcHandler: all null\lSplitter:B:19:0x005a\l|0x0057: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|ExcHandler: Throwable null\lSplitter:B:8:0x0039\l|0x0059: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|SYNTHETIC\lSplitter:B:19:0x005a\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x005a\l|0x005a: THROW  (r2 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0057 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|0x005b: INVOKE  (r5 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x005e: INVOKE  (r4 I:boolean) = (r5 I:int), (r5 I:int), (r4 I:int) kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|0x0062: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x006e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0064|0x0064: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x006a \l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: INVOKE  (r1 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x006a|SYNTHETIC\lSplitter:B:25:0x006a\l}"];
Node_26 [shape=record,label="{26\:\ ?|Splitter:B:25:0x006a\l|0x006a: INVOKE  (r1 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0071 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x006e|0x006e: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_29 [shape=record,label="{29\:\ 0x0071|0x0071: INVOKE  (r5 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lExcHandler: Throwable null\lSplitter:B:25:0x006a\l}"];
Node_31 [shape=record,label="{31\:\ 0x0074|0x0074: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ java.lang.Object kotlin.io.FilesKt__FileReadWriteKt.useLines$default((r1 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_25 -> Node_30;
Node_26 -> Node_30;
Node_26 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_30 -> Node_29;
}

