digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.appendBytes(Ljava\/io\/File;[B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"array\")\ljava.io.Closeable r0 = new java.io.FileOutputStream(r2, true)\ljava.lang.Throwable r2 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ all \-\> 0x0021 \}\l|((java.io.FileOutputStream) r0).write(r3)     \/\/ Catch:\{ all \-\> 0x0021 \}\lkotlin.Unit r3 = kotlin.Unit.INSTANCE     \/\/ Catch:\{ all \-\> 0x0021 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|kotlin.p019io.CloseableKt.closeFinally(r0, r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|ExcHandler: all (r3v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x0024\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|REMOVE\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|SYNTHETIC\lREMOVE\lSplitter:B:7:0x0024\l}"];
Node_8 [shape=record,label="{8\:\ ?|REMOVE\lCatch:\{ all \-\> 0x0021 \}\lSplitter:B:7:0x0024\l|throw r2     \/\/ Catch:\{ all \-\> 0x0021 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|kotlin.p019io.CloseableKt.closeFinally(r0, r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|throw r3\l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.FilesKt__FileReadWriteKt.appendBytes((r2v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_5;
Node_9 -> Node_10;
}

