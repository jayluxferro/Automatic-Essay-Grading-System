digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.printWriter$default(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;ILjava\/lang\/Object;)Ljava\/io\/PrintWriter;" {
subgraph cluster_Region_287337542 {
label = "R(3:(1:2)|3|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1649214989 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r2 & 1) != 0) goto L_0x0004\l}"];
subgraph cluster_Region_1359153743 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|java.nio.charset.Charset r1 = kotlin.text.Charsets.UTF_8\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 java.nio.charset.Charset) = (r1v0 java.nio.charset.Charset), (r1v5 java.nio.charset.Charset) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|java.io.Writer java.io.Writer r0 = new java.io.OutputStreamWriter(new java.io.FileOutputStream(r0), r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|RETURN\l|return new java.io.PrintWriter(r0 instanceof java.io.BufferedWriter ? (java.io.BufferedWriter) r0 : new java.io.BufferedWriter(r0, 8192))\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0018}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001d}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0023|PHI: r0 \l  PHI: (r0v3 java.io.BufferedWriter) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{static \/* bridge *\/ \/* synthetic *\/ java.io.PrintWriter kotlin.io.FilesKt__FileReadWriteKt.printWriter$default((r0v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

