digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.readBytes(Ljava\/io\/File;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"$receiver\")\ljava.io.Closeable r0 = new java.io.FileInputStream(r8)\ljava.lang.Throwable r1 = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|SYNTHETIC\lSplitter:B:1:0x0010\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lSplitter:B:1:0x0010\l|java.io.FileInputStream r2 = (java.io.FileInputStream) r0     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3 = 0     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\llong r4 = r8.length()     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|if ((r4 \> ((long) Integer.MAX_VALUE) ? 1 : (r4 == ((long) Integer.MAX_VALUE) ? 0 : \-1)) \> 0) goto L_0x003e     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|int r8 = (int) r4     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lbyte[] r4 = new byte[r8]     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|LOOP_START\lCatch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lPHI: r3 r8 \l  PHI: (r3v2 int) = (r3v0 int), (r3v3 int) binds: [B:4:0x001f, B:9:0x002b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v7 int) = (r8v6 int), (r8v9 int) binds: [B:4:0x001f, B:9:0x002b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0022\-\>B:9:0x002b\l|if (r8 \<= 0) goto L_0x002e     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|int r5 = r2.read(r4, r3, r8)     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|if (r5 \>= 0) goto L_0x002b     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|LOOP_END\lCatch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lLOOP:0: B:5:0x0022\-\>B:9:0x002b\l|int r8 = r8 \- r5     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lint r3 = r3 + r5     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|if (r8 != 0) goto L_0x0031     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|byte[] r4 = java.util.Arrays.copyOf(r4, r3)     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r4, \"java.util.Arrays.copyOf(this, newSize)\")     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|PHI: r4 \l  PHI: (r4v2 byte[]) = (r4v3 byte[]), (r4v1 byte[]) binds: [B:12:0x0031, B:11:0x0030] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.p019io.CloseableKt.closeFinally(r0, r1)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|RETURN\l|return r4\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|SYNTHETIC\lSplitter:B:15:0x003e\l}"];
Node_16 [shape=record,label="{16\:\ ?|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lSplitter:B:15:0x003e\l|java.lang.StringBuilder r3 = new java.lang.StringBuilder()     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3.append(\"File \")     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3.append(r8)     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3.append(\" is too big (\")     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3.append(r4)     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lr3.append(\" bytes) to fit in memory.\")     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l|throw new java.lang.OutOfMemoryError(r3.toString())     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|ExcHandler: all (r8v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:21:0x0068\l|java.lang.Throwable r8 = move\-exception\l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|ExcHandler: Throwable (r8v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:1:0x0010\l|java.lang.Throwable r8 = move\-exception\l}"];
Node_20 [shape=record,label="{20\:\ 0x0067|r1 = r8\l}"];
Node_21 [shape=record,label="{21\:\ 0x0068|SYNTHETIC\lSplitter:B:21:0x0068\l}"];
Node_22 [shape=record,label="{22\:\ ?|Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\lSplitter:B:21:0x0068\l|throw r1     \/\/ Catch:\{ Throwable \-\> 0x0066, all \-\> 0x0064 \}\l}"];
Node_23 [shape=record,label="{23\:\ 0x0069|kotlin.p019io.CloseableKt.closeFinally(r0, r1)\l}"];
Node_24 [shape=record,label="{24\:\ 0x006c|throw r8\l}"];
Node_25 [shape=record,label="{25\:\ 0x002e|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final byte[] kotlin.io.FilesKt__FileReadWriteKt.readBytes((r8v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_25;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_26[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_5;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_18;
Node_23 -> Node_24;
Node_25 -> Node_10;
Node_26 -> Node_8;
}

