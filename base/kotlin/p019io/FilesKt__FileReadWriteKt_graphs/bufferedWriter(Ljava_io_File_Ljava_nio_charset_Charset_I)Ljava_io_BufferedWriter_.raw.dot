digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.bufferedWriter(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;I)Ljava\/io\/BufferedWriter;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.FileOutputStream) =  java.io.FileOutputStream \l0x0002: INVOKE  (r0 I:java.io.FileOutputStream), (r1 I:java.io.File) java.io.FileOutputStream.\<init\>(java.io.File):void type: DIRECT \l0x0005: CHECK_CAST  (r0 I:java.io.OutputStream) = (java.io.OutputStream) (r0 I:?[OBJECT, ARRAY]) \l0x0007: NEW_INSTANCE  (r1 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x0009: INVOKE  \l  (r1 I:java.io.OutputStreamWriter)\l  (r0 I:java.io.OutputStream)\l  (r2 I:java.nio.charset.Charset)\l java.io.OutputStreamWriter.\<init\>(java.io.OutputStream, java.nio.charset.Charset):void type: DIRECT \l0x000c: CHECK_CAST  (r1 I:java.io.Writer) = (java.io.Writer) (r1 I:?[OBJECT, ARRAY]) \l0x000e: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.io.BufferedWriter \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: CHECK_CAST  (r1 I:java.io.BufferedWriter) = (java.io.BufferedWriter) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: NEW_INSTANCE  (r2 I:java.io.BufferedWriter) =  java.io.BufferedWriter \l0x0017: INVOKE  \l  (r2 I:java.io.BufferedWriter)\l  (r1 I:java.io.Writer)\l  (r3 I:int)\l java.io.BufferedWriter.\<init\>(java.io.Writer, int):void type: DIRECT \l0x001a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: RETURN  (r1 I:java.io.BufferedWriter) \l}"];
MethodNode[shape=record,label="{private static final java.io.BufferedWriter kotlin.io.FilesKt__FileReadWriteKt.bufferedWriter((r1 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, kotlin.internal.InlineOnly, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

