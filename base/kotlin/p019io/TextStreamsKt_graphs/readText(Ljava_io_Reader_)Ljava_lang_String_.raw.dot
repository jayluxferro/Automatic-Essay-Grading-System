digraph "CFG forkotlin.io.TextStreamsKt.readText(Ljava\/io\/Reader;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: NEW_INSTANCE  (r0 I:java.io.StringWriter) =  java.io.StringWriter \l0x0007: INVOKE  (r0 I:java.io.StringWriter) java.io.StringWriter.\<init\>():void type: DIRECT \l0x000a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000b: CHECK_CAST  (r1 I:java.io.Writer) = (java.io.Writer) (r1 I:?[OBJECT, ARRAY]) \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  \l  (r5 I:java.io.Reader)\l  (r1 I:java.io.Writer)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:java.lang.Object)\l kotlin.io.TextStreamsKt.copyTo$default(java.io.Reader, java.io.Writer, int, int, java.lang.Object):long type: STATIC \l0x0013: INVOKE  (r5 I:java.lang.String) = (r0 I:java.io.StringWriter) java.io.StringWriter.toString():java.lang.String type: VIRTUAL \l0x0017: CONST_STR  (r0 I:java.lang.String) =  \"buffer.toString()\" \l0x0019: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|0x001c: RETURN  (r5 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.TextStreamsKt.readText((r5 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

