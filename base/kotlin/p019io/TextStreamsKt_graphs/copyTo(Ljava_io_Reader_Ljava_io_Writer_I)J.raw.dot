digraph "CFG forkotlin.io.TextStreamsKt.copyTo(Ljava\/io\/Reader;Ljava\/io\/Writer;I)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"out\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: NEW_ARRAY  (r7 I:char[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x000c: INVOKE  (r0 I:int) = (r5 I:java.io.Reader), (r7 I:char[]) java.io.Reader.read(char[]):int type: VIRTUAL \l0x0010: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x001f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: INVOKE  \l  (r6 I:java.io.Writer)\l  (r7 I:char[])\l  (r3 I:int)\l  (r0 I:int)\l java.io.Writer.write(char[], int, int):void type: VIRTUAL \l0x0018: CAST  (r3 I:long) = (long) (r0 I:int) \l0x0019: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x001a: INVOKE  (r0 I:int) = (r5 I:java.io.Reader), (r7 I:char[]) java.io.Reader.read(char[]):int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: RETURN  (r1 I:long) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.io.TextStreamsKt.copyTo((r5 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.io.Writer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

