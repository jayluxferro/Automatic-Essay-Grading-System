digraph "CFG forkotlin.io.TextStreamsKt.forEachLine(Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"action\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if ((r3 instanceof java.io.BufferedReader) == false) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|java.io.BufferedReader r3 = (java.io.BufferedReader) r3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|r3 = new java.io.BufferedReader(r3, 8192)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|PHI: r3 \l  PHI: (r3v1 java.io.BufferedReader) = (r3v3 java.io.BufferedReader), (r3v4 java.io.BufferedReader) binds: [B:3:0x0011, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|java.io.Closeable r3 = r3\ljava.lang.Throwable r0 = null\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|SYNTHETIC\lSplitter:B:5:0x001f\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\lSplitter:B:5:0x001f\l|java.util.Iterator r1 = lineSequence((java.io.BufferedReader) r3).iterator()     \/\/ Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|LOOP_START\lCatch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\lLOOP:0: B:7:0x0029\-\>B:9:0x002f\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l|if (r1.hasNext() == false) goto L_0x0037     \/\/ Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|LOOP_END\lCatch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\lLOOP:0: B:7:0x0029\-\>B:9:0x002f\l|r4.invoke(r1.next())     \/\/ Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l|kotlin.Unit r4 = kotlin.Unit.INSTANCE     \/\/ Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|kotlin.p019io.CloseableKt.closeFinally(r3, r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|ExcHandler: all (r4v2 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:16:0x0041\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|ExcHandler: Throwable (r4v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:5:0x001f\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|r0 = r4\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|SYNTHETIC\lSplitter:B:16:0x0041\l}"];
Node_17 [shape=record,label="{17\:\ ?|Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\lSplitter:B:16:0x0041\l|throw r0     \/\/ Catch:\{ Throwable \-\> 0x003f, all \-\> 0x003d \}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|kotlin.p019io.CloseableKt.closeFinally(r3, r0)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|throw r4\l}"];
Node_20 [shape=record,label="{20\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.TextStreamsKt.forEachLine((r3v0 java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super java.lang.String, kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/Reader;, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/String;, Lkotlin\/Unit;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_20 -> Node_10;
}

