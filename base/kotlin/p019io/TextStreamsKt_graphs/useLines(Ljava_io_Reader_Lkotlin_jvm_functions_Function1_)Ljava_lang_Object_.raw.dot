digraph "CFG forkotlin.io.TextStreamsKt.useLines(Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"block\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.io.BufferedReader \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CHECK_CAST  (r4 I:java.io.BufferedReader) = (java.io.BufferedReader) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l0x0015: INVOKE  \l  (r0 I:java.io.BufferedReader)\l  (r4 I:java.io.Reader)\l  (r1 I:int)\l java.io.BufferedReader.\<init\>(java.io.Reader, int):void type: DIRECT \l0x0018: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: CHECK_CAST  (r4 I:java.io.Closeable) = (java.io.Closeable) (r4 I:?[OBJECT, ARRAY]) \l0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l0x001e: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|SYNTHETIC\lSplitter:B:5:0x0021\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0021\l|0x0021: CHECK_CAST  (r3 I:java.io.BufferedReader) = (java.io.BufferedReader) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0041 \}, TRY_ENTER]\l0x0023: INVOKE  (r3 I:kotlin.sequences.Sequence) = (r3 I:java.io.BufferedReader) kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence type: STATIC A[Catch:\{ Throwable \-\> 0x0041 \}]\l0x0027: INVOKE  (r5 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ Throwable \-\> 0x0041 \}]\l0x002a: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: INVOKE  (r2 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x002e: INVOKE  (r1 I:boolean) = (r2 I:int), (r2 I:int), (r1 I:int) kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: INVOKE  (r4 I:java.io.Closeable), (r0 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: INVOKE  (r4 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: INVOKE  (r2 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: RETURN  (r5 I:T) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|ExcHandler: all null\lSplitter:B:17:0x0043\l|0x003f: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|ExcHandler: Throwable null\lSplitter:B:5:0x0021\l|0x0041: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|SYNTHETIC\lSplitter:B:17:0x0043\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0043\l|0x0043: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x003f \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: INVOKE  (r2 I:int) kotlin.jvm.internal.InlineMarker.finallyStart(int):void type: STATIC \l0x0047: INVOKE  (r1 I:boolean) = (r2 I:int), (r2 I:int), (r1 I:int) kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0057 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0053 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004f|0x004f: INVOKE  (r4 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE \l}"];
Node_23 [shape=record,label="{23\:\ 0x0053|SYNTHETIC\lSplitter:B:23:0x0053\l}"];
Node_24 [shape=record,label="{24\:\ ?|Splitter:B:23:0x0053\l|0x0053: INVOKE  (r4 I:java.io.Closeable) java.io.Closeable.close():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x005a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0057|0x0057: INVOKE  (r4 I:java.io.Closeable), (r0 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_27 [shape=record,label="{27\:\ 0x005a|0x005a: INVOKE  (r2 I:int) kotlin.jvm.internal.InlineMarker.finallyEnd(int):void type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lExcHandler: Throwable null\lSplitter:B:23:0x0053\l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|0x005d: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.io.TextStreamsKt.useLines((r4 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super kotlin.sequences.Sequence\<java.lang.String\>, ? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/io\/Reader;, Lkotlin\/jvm\/functions\/Function1\<, \-, Lkotlin\/sequences\/Sequence\<, Ljava\/lang\/String;, \>;+TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_13;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_23 -> Node_28;
Node_24 -> Node_28;
Node_24 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_28 -> Node_27;
}

