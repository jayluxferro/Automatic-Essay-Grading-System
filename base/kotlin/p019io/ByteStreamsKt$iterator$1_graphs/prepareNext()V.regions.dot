digraph "CFG forkotlin.io.ByteStreamsKt$iterator$1.prepareNext()V" {
subgraph cluster_Region_379896807 {
label = "R(1:(1:(3:4|(1:6)|7)))";
node [shape=record,color=blue];
subgraph cluster_Region_310809974 {
label = "R(1:(3:4|(1:6)|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1766133925 {
label = "IF [B:1:0x0002, B:3:0x0006] THEN: R(3:4|(1:6)|7) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.nextPrepared != true) goto L_0x0004\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|ADDED_TO_REGION\l|if (r3.finished != true) goto L_0x0008\l}"];
subgraph cluster_Region_1359469403 {
label = "R(3:4|(1:6)|7)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|r3.nextByte = r3.receiver$0.read()\lboolean r0 = true\lr3.nextPrepared = true\l}"];
subgraph cluster_IfRegion_165139965 {
label = "IF [B:5:0x0016] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r3.nextByte != \-1) goto L_0x0019\l}"];
subgraph cluster_Region_1619234562 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0019|r0 = false\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x001a|PHI: r0 \l  PHI: (r0v5 boolean) = (r0v4 boolean), (r0v6 boolean) binds: [B:5:0x0016, B:6:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|r3.finished = r0\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlin.io.ByteStreamsKt$iterator$1.prepareNext((r3v0 'this' kotlin.io.ByteStreamsKt$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

