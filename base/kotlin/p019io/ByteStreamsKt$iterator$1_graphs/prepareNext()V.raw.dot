digraph "CFG forkotlin.io.ByteStreamsKt$iterator$1.prepareNext()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextPrepared boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:boolean) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.finished boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:java.io.BufferedInputStream) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.receiver$0 java.io.BufferedInputStream \l0x000a: INVOKE  (r0 I:int) = (r0 I:java.io.BufferedInputStream) java.io.BufferedInputStream.read():int type: VIRTUAL \l0x000e: IPUT  (r0 I:int), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextByte int \l0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: IPUT  (r0 I:boolean), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextPrepared boolean \l0x0013: IGET  (r1 I:int) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextByte int \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IPUT  (r0 I:boolean), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.finished boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlin.io.ByteStreamsKt$iterator$1.prepareNext((r3 'this' I:kotlin.io.ByteStreamsKt$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
}

