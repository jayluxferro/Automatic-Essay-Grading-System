digraph "CFG forkotlin.io.FileTreeWalk.maxDepth(I)Lkotlin\/io\/FileTreeWalk;" {
subgraph cluster_Region_1762693260 {
label = "R(1:(2:(1:2)|(2:3|4)))";
node [shape=record,color=blue];
subgraph cluster_Region_368442598 {
label = "R(2:(1:2)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1089140823 {
label = "IF [B:0:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 \> 0) goto L_0x0002\l}"];
subgraph cluster_Region_1103841583 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0013|RETURN\l|return new kotlin.p019io.FileTreeWalk(r8.start, r8.direction, r8.onEnter, r8.onLeave, r8.onFail, r9)\l}"];
}
}
subgraph cluster_Region_749876586 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0014}"];
Node_4 [shape=record,label="{4\:\ 0x0031|throw new java.lang.IllegalArgumentException(\"depth must be positive, but was \" + r9 + '.')\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
MethodNode[shape=record,label="{public final kotlin.io.FileTreeWalk kotlin.io.FileTreeWalk.maxDepth((r8v0 'this' kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_1 -> Node_2;
}

