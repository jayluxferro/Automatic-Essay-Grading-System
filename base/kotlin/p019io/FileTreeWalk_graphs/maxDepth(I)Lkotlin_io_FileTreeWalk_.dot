digraph "CFG forkotlin.io.FileTreeWalk.maxDepth(I)Lkotlin\/io\/FileTreeWalk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r9 \<= 0) goto L_0x0014\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0013|RETURN\l|return new kotlin.p019io.FileTreeWalk(r8.start, r8.direction, r8.onEnter, r8.onLeave, r8.onFail, r9)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"depth must be positive, but was \")\lr1.append(r9)\lr1.append('.')\l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public final kotlin.io.FileTreeWalk kotlin.io.FileTreeWalk.maxDepth((r8v0 'this' kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

