digraph "CFG forkotlin.io.FileTreeWalk.maxDepth(I)Lkotlin\/io\/FileTreeWalk;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r7 I:kotlin.io.FileTreeWalk) =  kotlin.io.FileTreeWalk \l0x0004: IGET  (r1 I:java.io.File) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.start java.io.File \l0x0006: IGET  (r2 I:kotlin.io.FileWalkDirection) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.direction kotlin.io.FileWalkDirection \l0x0008: IGET  (r3 I:kotlin.jvm.functions.Function1\<java.io.File, java.lang.Boolean\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onEnter kotlin.jvm.functions.Function1 \l0x000a: IGET  (r4 I:kotlin.jvm.functions.Function1\<java.io.File, kotlin.Unit\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onLeave kotlin.jvm.functions.Function1 \l0x000c: IGET  (r5 I:kotlin.jvm.functions.Function2\<java.io.File, java.io.IOException, kotlin.Unit\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onFail kotlin.jvm.functions.Function2 \l0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  \l  (r0 I:kotlin.io.FileTreeWalk)\l  (r1 I:java.io.File)\l  (r2 I:kotlin.io.FileWalkDirection)\l  (r3 I:kotlin.jvm.functions.Function1)\l  (r4 I:kotlin.jvm.functions.Function1)\l  (r5 I:kotlin.jvm.functions.Function2)\l  (r6 I:int)\l kotlin.io.FileTreeWalk.\<init\>(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: RETURN  (r7 I:kotlin.io.FileTreeWalk) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0016: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"depth must be positive, but was \" \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r1 I:java.lang.StringBuilder), (r9 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0023: CONST  (r9 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder), (r9 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0028: INVOKE  (r9 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002c: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r9 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x002f: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final kotlin.io.FileTreeWalk kotlin.io.FileTreeWalk.maxDepth((r8 'this' I:kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

