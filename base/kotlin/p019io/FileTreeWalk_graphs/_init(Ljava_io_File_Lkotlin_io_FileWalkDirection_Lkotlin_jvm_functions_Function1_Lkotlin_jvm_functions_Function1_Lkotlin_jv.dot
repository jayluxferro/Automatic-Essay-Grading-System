digraph "CFG forkotlin.io.FileTreeWalk.\<init\>(Ljava\/io\/File;Lkotlin\/io\/FileWalkDirection;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;IILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r14 & 2) == 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|kotlin.io.FileWalkDirection r9 = kotlin.p019io.FileWalkDirection.TOP_DOWN\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|PHI: r9 \l  PHI: (r9v1 kotlin.io.FileWalkDirection) = (r9v0 kotlin.io.FileWalkDirection), (r9v3 kotlin.io.FileWalkDirection) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r9\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if ((r14 & 32) == 0) goto L_0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|r6 = Integer.MAX_VALUE\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|r6 = r13\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|PHI: r6 \l  PHI: (r6v0 int) = (r6v1 int), (r6v2 int) binds: [B:6:0x0012, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r7\lthis(r8, r2, r10, r11, r12, r6)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|RETURN\l|return\l}"];
MethodNode[shape=record,label="{\/* synthetic *\/ void kotlin.io.FileTreeWalk.\<init\>((r7v0 'this' kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r8v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 kotlin.io.FileWalkDirection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlin.jvm.functions.Function2 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

