digraph "CFG forkotlin.io.FilesKt__UtilsKt.normalize$FilesKt__UtilsKt(Ljava\/util\/List;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r1 I:int) = (r5 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0009: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l0x000b: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: INVOKE  (r1 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x006c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0019: CHECK_CAST  (r1 I:java.io.File) = (java.io.File) (r1 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:java.lang.String) = (r1 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r3 I:int) = (r2 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x0026: CONST  (r4 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005f \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1472(0x5c0, float:2.063E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: CONST_STR  (r3 I:java.lang.String) =  \"..\" \l0x0031: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0068 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: INVOKE  (r2 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|0x003b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005b \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.List) kotlin.collections.CollectionsKt.last(java.util.List):java.lang.Object type: STATIC \l0x0041: CHECK_CAST  (r2 I:java.io.File) = (java.io.File) (r2 I:?[OBJECT, ARRAY]) \l0x0043: INVOKE  (r2 I:java.lang.String) = (r2 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0047: CONST_STR  (r3 I:java.lang.String) =  \"..\" \l0x0049: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object), (r3 I:java.lang.Object) kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean type: STATIC \l0x004d: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x005b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|0x0051: INVOKE  (r1 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0055: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0057: INVOKE  (r0 I:java.util.List), (r1 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: CONST_STR  (r3 I:java.lang.String) =  \".\" \l0x0061: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0065|0x0065: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0068 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0068|0x0068: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_23 [shape=record,label="{23\:\ 0x006c|0x006c: RETURN  (r0 I:java.util.List\<java.io.File\>) \l}"];
MethodNode[shape=record,label="{private static final java.util.List\<java.io.File\> kotlin.io.FilesKt__UtilsKt.normalize$FilesKt__UtilsKt((r5 I:java.util.List\<? extends java.io.File\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, +, Ljava\/io\/File;, \>;), Ljava\/util\/List\<, Ljava\/io\/File;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_23;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_22[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_22[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_1;
Node_18 -> Node_1;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_1[style=dashed];
Node_22 -> Node_1;
}

