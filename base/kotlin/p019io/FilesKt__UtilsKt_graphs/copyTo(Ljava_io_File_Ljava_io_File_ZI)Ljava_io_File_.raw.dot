digraph "CFG forkotlin.io.FilesKt__UtilsKt.copyTo(Ljava\/io\/File;Ljava\/io\/File;ZI)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"target\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r7 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0088 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: INVOKE  (r0 I:boolean) = (r8 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r9 I:boolean) = (r8 I:java.io.File) java.io.File.delete():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0025 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: NEW_INSTANCE  (r9 I:kotlin.io.FileAlreadyExistsException) =  kotlin.io.FileAlreadyExistsException \l0x0027: CONST_STR  (r10 I:java.lang.String) =  \"The destination file already exists.\" \l0x0029: INVOKE  \l  (r9 I:kotlin.io.FileAlreadyExistsException)\l  (r7 I:java.io.File)\l  (r8 I:java.io.File)\l  (r10 I:java.lang.String)\l kotlin.io.FileAlreadyExistsException.\<init\>(java.io.File, java.io.File, java.lang.String):void type: DIRECT \l0x002c: CHECK_CAST  (r9 I:java.lang.Throwable) = (java.lang.Throwable) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: INVOKE  (r9 I:boolean) = (r7 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0046 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: INVOKE  (r9 I:boolean) = (r8 I:java.io.File) java.io.File.mkdirs():boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x003c \l}"];
Node_20 [shape=record,label="{20\:\ 0x003c|0x003c: NEW_INSTANCE  (r9 I:kotlin.io.FileSystemException) =  kotlin.io.FileSystemException \l0x003e: CONST_STR  (r10 I:java.lang.String) =  \"Failed to create target directory.\" \l0x0040: INVOKE  \l  (r9 I:kotlin.io.FileSystemException)\l  (r7 I:java.io.File)\l  (r8 I:java.io.File)\l  (r10 I:java.lang.String)\l kotlin.io.FileSystemException.\<init\>(java.io.File, java.io.File, java.lang.String):void type: DIRECT \l0x0043: CHECK_CAST  (r9 I:java.lang.Throwable) = (java.lang.Throwable) (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: INVOKE  (r9 I:java.io.File) = (r8 I:java.io.File) java.io.File.getParentFile():java.io.File type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004f \l}"];
Node_24 [shape=record,label="{24\:\ 0x004c|0x004c: INVOKE  (r9 I:java.io.File) java.io.File.mkdirs():boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: NEW_INSTANCE  (r9 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x0051: INVOKE  (r9 I:java.io.FileInputStream), (r7 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT \l0x0054: CHECK_CAST  (r9 I:java.io.Closeable) = (java.io.Closeable) (r9 I:?[OBJECT, ARRAY]) \l0x0056: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0058: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l0x005a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|SYNTHETIC\lSplitter:B:26:0x005b\l}"];
Node_27 [shape=record,label="{27\:\ ?|Splitter:B:26:0x005b\l|0x005b: CHECK_CAST  (r1 I:java.io.FileInputStream) = (java.io.FileInputStream) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0081 \}, TRY_ENTER]\l0x005d: NEW_INSTANCE  (r2 I:java.io.FileOutputStream) =  java.io.FileOutputStream A[Catch:\{ Throwable \-\> 0x0081 \}]\l0x005f: INVOKE  (r2 I:java.io.FileOutputStream), (r8 I:java.io.File) java.io.FileOutputStream.\<init\>(java.io.File):void type: DIRECT A[Catch:\{ Throwable \-\> 0x0081 \}]\l0x0062: CHECK_CAST  (r2 I:java.io.Closeable) = (java.io.Closeable) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0081 \}]\l0x0064: CHECK_CAST  (r7 I:java.lang.Throwable) = (java.lang.Throwable) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0081 \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0066|0x0066: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0067|SYNTHETIC\lSplitter:B:29:0x0067\l}"];
Node_30 [shape=record,label="{30\:\ ?|Splitter:B:29:0x0067\l|0x0067: CHECK_CAST  (r3 I:java.io.FileOutputStream) = (java.io.FileOutputStream) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0079 \}, TRY_ENTER]\l0x0069: CHECK_CAST  (r1 I:java.io.InputStream) = (java.io.InputStream) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0079 \}]\l0x006b: CHECK_CAST  (r3 I:java.io.OutputStream) = (java.io.OutputStream) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ Throwable \-\> 0x0079 \}]\l0x006d: INVOKE  \l  (r1 I:java.io.InputStream)\l  (r3 I:java.io.OutputStream)\l  (r10 I:int)\l kotlin.io.ByteStreamsKt.copyTo(java.io.InputStream, java.io.OutputStream, int):long type: STATIC A[Catch:\{ Throwable \-\> 0x0079 \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0070|SYNTHETIC\lSplitter:B:31:0x0070\l}"];
Node_32 [shape=record,label="{32\:\ ?|Splitter:B:31:0x0070\l|0x0070: INVOKE  (r2 I:java.io.Closeable), (r7 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC A[Catch:\{ Throwable \-\> 0x0081 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0073|0x0073: INVOKE  (r9 I:java.io.Closeable), (r0 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_34 [shape=record,label="{34\:\ 0x0076|0x0076: RETURN  (r8 I:java.io.File) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0077|ExcHandler: all null\lSplitter:B:38:0x007a\l|0x0077: MOVE_EXCEPTION  (r8 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x0079|ExcHandler: Throwable null\lSplitter:B:29:0x0067\l|0x0079: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_38 [shape=record,label="{38\:\ 0x007a|SYNTHETIC\lSplitter:B:38:0x007a\l}"];
Node_39 [shape=record,label="{39\:\ ?|Splitter:B:38:0x007a\l|0x007a: THROW  (r7 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0077 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_40 [shape=record,label="{40\:\ 0x007b|SYNTHETIC\lSplitter:B:40:0x007b\l}"];
Node_41 [shape=record,label="{41\:\ ?|Splitter:B:40:0x007b\l|0x007b: INVOKE  (r2 I:java.io.Closeable), (r7 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC A[Catch:\{ Throwable \-\> 0x0081 \}, TRY_ENTER]\l}"];
Node_42 [shape=record,label="{42\:\ 0x007e|0x007e: THROW  (r8 I:java.lang.Throwable) A[Catch:\{ Throwable \-\> 0x0081 \}, TRY_LEAVE]\l}"];
Node_43 [shape=record,label="{43\:\ 0x007f|ExcHandler: all null\lSplitter:B:47:0x0083\l|0x007f: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_45 [shape=record,label="{45\:\ 0x0081|ExcHandler: Throwable null\lSplitter:B:26:0x005b\l|0x0081: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_46 [shape=record,label="{46\:\ 0x0082|0x0082: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0083|SYNTHETIC\lSplitter:B:47:0x0083\l}"];
Node_48 [shape=record,label="{48\:\ ?|Splitter:B:47:0x0083\l|0x0083: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x007f \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0084|0x0084: INVOKE  (r9 I:java.io.Closeable), (r0 I:java.lang.Throwable) kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void type: STATIC \l}"];
Node_50 [shape=record,label="{50\:\ 0x0087|0x0087: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0088|0x0088: NEW_INSTANCE  (r8 I:kotlin.io.NoSuchFileException) =  kotlin.io.NoSuchFileException \l0x008a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008b: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x008c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008d: CONST_STR  (r4 I:java.lang.String) =  \"The source file doesn't exist.\" \l0x008f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0090: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0091: INVOKE  \l  (r1 I:kotlin.io.NoSuchFileException)\l  (r2 I:java.io.File)\l  (r3 I:java.io.File)\l  (r4 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:kotlin.jvm.internal.DefaultConstructorMarker)\l kotlin.io.NoSuchFileException.\<init\>(java.io.File, java.io.File, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker):void type: DIRECT \l0x0094: CHECK_CAST  (r8 I:java.lang.Throwable) = (java.lang.Throwable) (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0096|0x0096: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.io.File kotlin.io.FilesKt__UtilsKt.copyTo((r7 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_51;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_11[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_34[style=dashed];
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_45;
Node_27 -> Node_28;
Node_27 -> Node_45;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_31 -> Node_45;
Node_32 -> Node_33;
Node_32 -> Node_45;
Node_33 -> Node_34;
Node_35 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_35;
Node_39 -> Node_35;
Node_40 -> Node_41;
Node_40 -> Node_45;
Node_41 -> Node_42;
Node_43 -> Node_49;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_47 -> Node_43;
Node_48 -> Node_43;
Node_49 -> Node_50;
Node_51 -> Node_52;
}

