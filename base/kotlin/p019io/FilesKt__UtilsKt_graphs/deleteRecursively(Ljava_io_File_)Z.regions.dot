digraph "CFG forkotlin.io.FilesKt__UtilsKt.deleteRecursively(Ljava\/io\/File;)Z" {
subgraph cluster_Region_975934157 {
label = "R(2:0|(2:1|(1:(2:(1:10)|(3:4|(1:(0)(0))(0)|9)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\ljava.util.Iterator java.util.Iterator r4 = kotlin.p019io.FilesKt.walkBottomUp(r4).iterator()\l}"];
subgraph cluster_LoopRegion_1797860038 {
label = "LOOP:0: (2:1|(1:(2:(1:10)|(3:4|(1:(0)(0))(0)|9))))";
node [shape=record,color=blue];
subgraph cluster_Region_1226638966 {
label = "R(2:1|(1:(2:(1:10)|(3:4|(1:(0)(0))(0)|9))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0010|LOOP_START\lLOOP:0: B:1:0x0010\-\>B:14:0x0010\l|boolean r1 = true\l}"];
subgraph cluster_LoopRegion_77433186 {
label = "LOOP:1: (1:(2:(1:10)|(3:4|(1:(0)(0))(0)|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_188438140 {
label = "R(1:(2:(1:10)|(3:4|(1:(0)(0))(0)|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1104562014 {
label = "R(2:(1:10)|(3:4|(1:(0)(0))(0)|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1839053953 {
label = "IF [B:3:0x0015] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r4.hasNext() != true) goto L_0x002e\l}"];
subgraph cluster_Region_801527906 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002e|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_501387636 {
label = "R(3:4|(1:(0)(0))(0)|9)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|java.io.File java.io.File r2 = (java.io.File) r4.next()\l}"];
subgraph cluster_IfRegion_643812637 {
label = "IF [B:5:0x0021, B:7:0x0027] THEN: R(1:(0)(0)) ELSE: R(0)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0021|if (r2.delete() == true) goto L_0x0029\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|ADDED_TO_REGION\l|if (r2.exists() == false) goto L_0x0029\l}"];
subgraph cluster_Region_1670064824 {
label = "R(1:(0)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_801079471 {
label = "IF [B:8:0x0029] THEN: R(0) ELSE: R(0)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0029|if (r1 == true) goto L_0x0010\l}"];
subgraph cluster_Region_196438322 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_1525433998 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_703796794 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_9 [shape=record,label="{9\:\ 0x002c|LOOP_END\lLOOP:1: B:2:0x0011\-\>B:9:0x002c\l|r1 = false\l}"];
}
}
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0011|LOOP_START\lPHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:1:0x0010, B:9:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:2:0x0011\-\>B:9:0x002c\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0023}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002e|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0029|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0029|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0010\-\>B:14:0x0010\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x002c|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.io.FilesKt__UtilsKt.deleteRecursively((r4v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_7 -> Node_13;
Node_7 -> Node_15[style=dashed];
Node_8 -> Node_14;
Node_8 -> Node_16[style=dashed];
Node_9 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_11 -> Node_10;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_14 -> Node_1;
Node_15 -> Node_9;
Node_16 -> Node_9;
}

