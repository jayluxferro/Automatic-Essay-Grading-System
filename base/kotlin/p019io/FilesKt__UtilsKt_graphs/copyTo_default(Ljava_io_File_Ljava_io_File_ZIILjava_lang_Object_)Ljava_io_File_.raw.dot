digraph "CFG forkotlin.io.FilesKt__UtilsKt.copyTo$default(Ljava\/io\/File;Ljava\/io\/File;ZIILjava\/lang\/Object;)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: ARITH  (r4 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INVOKE  (r0 I:java.io.File) = \l  (r0 I:java.io.File)\l  (r1 I:java.io.File)\l  (r2 I:boolean)\l  (r3 I:int)\l kotlin.io.FilesKt.copyTo(java.io.File, java.io.File, boolean, int):java.io.File type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: RETURN  (r0 I:java.io.File) \l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ java.io.File kotlin.io.FilesKt__UtilsKt.copyTo$default((r0 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

