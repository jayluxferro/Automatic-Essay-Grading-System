digraph "CFG forkotlin.collections.ArraysKt__ArraysKt.unzip([Lkotlin\/Pair;)Lkotlin\/Pair;" {
subgraph cluster_Region_499763129 {
label = "R(3:0|(1:2)|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\ljava.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList(r6.length)\ljava.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(r6.length)\lint int r2 = r6.length\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1498360458 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0013|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:2:0x0015] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:2:0x0015\l|if (r3 \< r2) goto L_0x0015\l}"];
subgraph cluster_Region_1676162596 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0015|LOOP_END\lLOOP:0: B:1:0x0013\-\>B:2:0x0015\l|r4 = r6[r3]\lr0.add(r4.getFirst())\lr1.add(r4.getSecond())\lr3++\l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x002c|RETURN\l|return kotlin.TuplesKt.m174to(r0, r1)\l}"];
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0028}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0028|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\> kotlin.collections.ArraysKt__ArraysKt.unzip((r6v0 kotlin.Pair\<? extends T, ? extends R\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>([, Lkotlin\/Pair\<, +TT;+TR;\>;), Lkotlin\/Pair\<, Ljava\/util\/List\<, TT;\>;, Ljava\/util\/List\<, TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

