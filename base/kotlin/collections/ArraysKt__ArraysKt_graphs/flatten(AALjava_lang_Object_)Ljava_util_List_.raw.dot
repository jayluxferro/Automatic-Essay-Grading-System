digraph "CFG forkotlin.collections.ArraysKt__ArraysKt.flatten([[Ljava\/lang\/Object;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0006: CHECK_CAST  (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:?[OBJECT, ARRAY]) \l0x0008: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: AGET  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0010: CHECK_CAST  (r5 I:java.lang.Object[]) = (java.lang.Object[]) (r5 I:?[OBJECT, ARRAY]) \l0x0012: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l0x0013: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0014: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0019: INVOKE  (r0 I:java.util.ArrayList), (r4 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x001c: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x002a \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: AGET  (r3 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0021: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0022: CHECK_CAST  (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r4 I:java.util.Collection), (r3 I:java.lang.Object[]) kotlin.collections.CollectionsKt.addAll(java.util.Collection, java.lang.Object[]):boolean type: STATIC \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: RETURN  (r0 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.ArraysKt__ArraysKt.flatten((r6 I:T[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([[TT;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
}

