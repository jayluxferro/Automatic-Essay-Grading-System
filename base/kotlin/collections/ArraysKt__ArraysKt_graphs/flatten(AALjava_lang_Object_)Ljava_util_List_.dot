digraph "CFG forkotlin.collections.ArraysKt__ArraysKt.flatten([[Ljava\/lang\/Object;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\ljava.lang.Object[] r0 = (java.lang.Object[]) r6\lint r1 = r0.length\lr2 = 0\lr3 = 0\lr4 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r3 r4 \l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:0:0x0000, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v4 int) binds: [B:0:0x0000, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:2:0x000e\l|if (r3 \>= r1) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:2:0x000e\l|int r4 = r4 + ((java.lang.Object[]) r0[r3]).length\lint r3 = r3 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|java.util.ArrayList r0 = new java.util.ArrayList(r4)\lint r1 = r6.length\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:3:0x0017, B:5:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x001d\-\>B:5:0x001f\l|if (r2 \>= r1) goto L_0x002a\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|LOOP_END\lLOOP:1: B:4:0x001d\-\>B:5:0x001f\l|java.util.Collection r4 = r0\lkotlin.collections.CollectionsKt.addAll(r4, r6[r2])\lint r2 = r2 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a}"];
Node_7 [shape=record,label="{7\:\ 0x002c|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.ArraysKt__ArraysKt.flatten((r6v0 T[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([[TT;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_3;
Node_9 -> Node_6;
}

