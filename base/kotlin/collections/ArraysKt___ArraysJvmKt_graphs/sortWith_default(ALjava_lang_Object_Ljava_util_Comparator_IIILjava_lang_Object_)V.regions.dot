digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.sortWith$default([Ljava\/lang\/Object;Ljava\/util\/Comparator;IIILjava\/lang\/Object;)V" {
subgraph cluster_Region_890303746 {
label = "R(3:(1:2)|(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_642684786 {
label = "IF [B:1:0x0002] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r4 & 2) != 0) goto L_0x0004\l}"];
subgraph cluster_Region_16199405 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = 0\l}"];
}
}
subgraph cluster_IfRegion_953032017 {
label = "IF [B:4:0x0007] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r4 & 4) != 0) goto L_0x0009\l}"];
subgraph cluster_Region_180639663 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|int r3 = r0.length\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x000a|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0007, B:5:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.collections.ArraysKt.sortWith(r0, r1, r2, r3)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0005|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:1:0x0002, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000d}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ void kotlin.collections.ArraysKt___ArraysJvmKt.sortWith$default((r0v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 java.util.Comparator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

