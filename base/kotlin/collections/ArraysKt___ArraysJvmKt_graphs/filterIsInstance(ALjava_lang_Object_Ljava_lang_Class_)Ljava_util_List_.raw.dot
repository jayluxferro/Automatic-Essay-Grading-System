digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.filterIsInstance([Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"klass\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000f: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:java.util.Collection) = \l  (r1 I:java.lang.Object[])\l  (r0 I:java.util.Collection)\l  (r2 I:java.lang.Class)\l kotlin.collections.ArraysKt.filterIsInstanceTo(java.lang.Object[], java.util.Collection, java.lang.Class):java.util.Collection type: STATIC \l0x0015: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: RETURN  (r1 I:java.util.List\<R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.ArraysKt___ArraysJvmKt.filterIsInstance((r1 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Class\<R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>([, Ljava\/lang\/Object;, Ljava\/lang\/Class\<, TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

