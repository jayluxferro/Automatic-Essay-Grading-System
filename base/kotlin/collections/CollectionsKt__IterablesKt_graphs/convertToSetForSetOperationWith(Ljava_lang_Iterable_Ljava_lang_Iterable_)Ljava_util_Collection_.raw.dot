digraph "CFG forkotlin.collections.CollectionsKt__IterablesKt.convertToSetForSetOperationWith(Ljava\/lang\/Iterable;Ljava\/lang\/Iterable;)Ljava\/util\/Collection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"source\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.util.Set \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INSTANCE_OF  (r0 I:boolean) = (r1 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:int) = (r2 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x001f: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0026: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r0 I:boolean) = (r2 I:java.util.Collection) kotlin.collections.CollectionsKt__IterablesKt.safeToConvertToSet$CollectionsKt__IterablesKt(java.util.Collection):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0035 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: INVOKE  (r1 I:java.util.HashSet) = (r1 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet type: STATIC \l0x0032: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|0x0035: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: INVOKE  (r1 I:java.util.HashSet) = (r1 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet type: STATIC \l0x003b: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: RETURN  (r1 I:java.util.Collection\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Collection\<T\> kotlin.collections.CollectionsKt__IterablesKt.convertToSetForSetOperationWith((r1 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;, Ljava\/lang\/Iterable\<, +TT;\>;), Ljava\/util\/Collection\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_13 -> Node_15;
Node_14 -> Node_15;
}

