digraph "CFG forkotlin.collections.CollectionsKt__IterablesKt.convertToSetForSetOperation(Ljava\/lang\/Iterable;)Ljava\/util\/Collection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.Set \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0011: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r1 I:boolean) = (r0 I:java.util.Collection) kotlin.collections.CollectionsKt__IterablesKt.safeToConvertToSet$CollectionsKt__IterablesKt(java.util.Collection):boolean type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r2 I:java.util.HashSet) = (r2 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet type: STATIC \l0x001d: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r2 I:java.util.HashSet) = (r2 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet type: STATIC \l0x0026: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: RETURN  (r2 I:java.util.Collection\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Collection\<T\> kotlin.collections.CollectionsKt__IterablesKt.convertToSetForSetOperation((r2 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;), Ljava\/util\/Collection\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

