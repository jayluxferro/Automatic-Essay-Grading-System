digraph "CFG forkotlin.collections.RingBuffer$iterator$1.computeNext()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.done():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IGET  (r0 I:kotlin.collections.RingBuffer) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.this$0 kotlin.collections.RingBuffer \l0x000a: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.access$getBuffer$p(kotlin.collections.RingBuffer):java.lang.Object[] type: STATIC \l0x000e: IGET  (r1 I:int) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l0x0010: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0012: INVOKE  \l  (r2 I:kotlin.collections.RingBuffer$iterator$1)\l  (r0 I:java.lang.Object)\l kotlin.collections.RingBuffer$iterator$1.setNext(java.lang.Object):void type: VIRTUAL \l0x0015: IGET  (r0 I:kotlin.collections.RingBuffer) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.this$0 kotlin.collections.RingBuffer \l0x0017: IGET  (r1 I:int) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l0x0019: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001b: INVOKE  (r0 I:int) = (r0 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.getCapacity():int type: VIRTUAL \l0x001f: ARITH  (r1 I:int) = (r1 I:int) % (r0 I:int) \l0x0020: IPUT  (r1 I:int), (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l0x0022: IGET  (r0 I:int) = (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int \l0x0024: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0026: IPUT  (r0 I:int), (r2 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: RETURN   \l}"];
MethodNode[shape=record,label="{protected void kotlin.collections.RingBuffer$iterator$1.computeNext((r2 'this' I:kotlin.collections.RingBuffer$iterator$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

