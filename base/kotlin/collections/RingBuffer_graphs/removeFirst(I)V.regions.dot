digraph "CFG forkotlin.collections.RingBuffer.removeFirst(I)V" {
subgraph cluster_Region_1788835776 {
label = "R(2:0|(2:(1:7)|(2:15|16)(1:(3:10|(1:12)(1:13)|14)(0)))(2:17|18))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r0 = true\l}"];
subgraph cluster_IfRegion_880529675 {
label = "IF [B:4:0x0007] THEN: R(2:(1:7)|(2:15|16)(1:(3:10|(1:12)(1:13)|14)(0))) ELSE: R(2:17|18)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r2 \l  PHI: (r2v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7 \>= 0) == true) goto L_0x0009\l}"];
subgraph cluster_Region_11423115 {
label = "R(2:(1:7)|(2:15|16)(1:(3:10|(1:12)(1:13)|14)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_108218043 {
label = "IF [B:6:0x000d] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000d|if (r7 \> size()) goto L_0x0010\l}"];
subgraph cluster_Region_1906809059 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|r0 = false\l}"];
}
}
subgraph cluster_IfRegion_47498739 {
label = "IF [B:8:0x0011] THEN: R(2:15|16) ELSE: R(1:(3:10|(1:12)(1:13)|14)(0))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0011|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v0 boolean), (r0v12 boolean) binds: [B:6:0x000d, B:7:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != true) goto L_0x003e\l}"];
subgraph cluster_Region_718227293 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x003e}"];
Node_16 [shape=record,label="{16\:\ 0x0066|throw new java.lang.IllegalArgumentException((\"n shouldn't be greater than the buffer size: n = \" + r7 + \", size = \" + size()).toString())\l}"];
}
subgraph cluster_Region_1087780998 {
label = "R(1:(3:10|(1:12)(1:13)|14)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_845608706 {
label = "IF [B:9:0x0013] THEN: R(3:10|(1:12)(1:13)|14) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0013|if (r7 \> 0) goto L_0x0015\l}"];
subgraph cluster_Region_1842541716 {
label = "R(3:10|(1:12)(1:13)|14)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0015|int int r0 = r6.startIndex\lint int r2 = (r0 + r7) % getCapacity()\l}"];
subgraph cluster_IfRegion_2086846361 {
label = "IF [B:11:0x001f] THEN: R(1:12) ELSE: R(1:13)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001f|if (r0 \> r2) goto L_0x0021\l}"];
subgraph cluster_Region_827281526 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0021|fill(r6.buffer, (java.lang.Object) null, r0, r6.capacity)\lfill(r6.buffer, (java.lang.Object) null, 0, r2)\l}"];
}
subgraph cluster_Region_353431793 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002e|fill(r6.buffer, (java.lang.Object) null, r0, r2)\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0033|r6.startIndex = r2\lsetSize(size() \- r7)\l}"];
}
subgraph cluster_Region_775698795 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
subgraph cluster_Region_2123986526 {
label = "R(2:17|18)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0067}"];
Node_18 [shape=record,label="{18\:\ 0x0083|throw new java.lang.IllegalArgumentException((\"n shouldn't be negative but it is \" + r7).toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0009}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.RingBuffer.removeFirst((r6v0 'this' kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_17[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_15 -> Node_16;
Node_9 -> Node_10;
Node_9 -> Node_20[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_19;
Node_17 -> Node_18;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

