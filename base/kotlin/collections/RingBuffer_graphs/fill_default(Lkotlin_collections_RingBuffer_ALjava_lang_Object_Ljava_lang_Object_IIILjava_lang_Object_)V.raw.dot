digraph "CFG forkotlin.collections.RingBuffer.fill$default(Lkotlin\/collections\/RingBuffer;[Ljava\/lang\/Object;Ljava\/lang\/Object;IIILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: ARRAY_LENGTH  (r4 I:int) = (r1 I:?[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  \l  (r0 I:kotlin.collections.RingBuffer)\l  (r1 I:java.lang.Object[])\l  (r2 I:java.lang.Object)\l  (r3 I:int)\l  (r4 I:int)\l kotlin.collections.RingBuffer.fill(java.lang.Object[], java.lang.Object, int, int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN   \l}"];
MethodNode[shape=record,label="{static \/* bridge *\/ \/* synthetic *\/ void kotlin.collections.RingBuffer.fill$default((r0 I:kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

