digraph "CFG forkotlin.collections.RingBuffer.removeFirst(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7 \< 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r2 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r2 \l  PHI: (r2v0 boolean) = (r2v4 boolean), (r2v5 boolean) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L_0x0067\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009}"];
Node_6 [shape=record,label="{6\:\ 0x000d|if (r7 \> size()) goto L_0x0010\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|r0 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v0 boolean), (r0v12 boolean) binds: [B:6:0x000d, B:7:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x003e\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|if (r7 \<= 0) goto L_?\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|int r0 = r6.startIndex\lint r2 = (r0 + r7) % getCapacity()\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|if (r0 \<= r2) goto L_0x002e\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|fill(r6.buffer, (java.lang.Object) null, r0, r6.capacity)\lfill(r6.buffer, (java.lang.Object) null, 0, r2)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|fill(r6.buffer, (java.lang.Object) null, r0, r2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|r6.startIndex = r2\lsetSize(size() \- r7)\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"n shouldn't be greater than the buffer size: n = \")\lr0.append(r7)\lr0.append(\", size = \")\lr0.append(size())\l}"];
Node_16 [shape=record,label="{16\:\ 0x0066|throw new java.lang.IllegalArgumentException(r0.toString().toString())\l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"n shouldn't be negative but it is \")\lr0.append(r7)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0083|throw new java.lang.IllegalArgumentException(r0.toString().toString())\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.RingBuffer.removeFirst((r6v0 'this' kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

