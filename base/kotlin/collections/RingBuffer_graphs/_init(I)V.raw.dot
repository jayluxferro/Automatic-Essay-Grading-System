digraph "CFG forkotlin.collections.RingBuffer.\<init\>(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:kotlin.collections.AbstractList) kotlin.collections.AbstractList.\<init\>():void type: DIRECT \l0x0003: IPUT  (r2 I:int), (r1 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l0x0005: IGET  (r2 I:int) = (r1 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IGET  (r2 I:int) = (r1 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l0x0010: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0012: IPUT  \l  (r2 I:java.lang.Object[])\l  (r1 I:kotlin.collections.RingBuffer)\l kotlin.collections.RingBuffer.buffer java.lang.Object[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0017: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001a: CONST_STR  (r0 I:java.lang.String) =  \"ring buffer capacity should not be negative but it is \" \l0x001c: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001f: IGET  (r0 I:int) = (r1 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l0x0021: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0028: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x002e: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0031: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.collections.RingBuffer.\<init\>((r1 'this' I:kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

