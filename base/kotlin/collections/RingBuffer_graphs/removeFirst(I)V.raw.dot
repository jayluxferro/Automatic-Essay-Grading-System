digraph "CFG forkotlin.collections.RingBuffer.removeFirst(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0067 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r2 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r7 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:8:0x0010 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x003d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: IGET  (r0 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.startIndex int \l0x0017: ARITH  (r2 I:int) = (r0 I:int) + (r7 I:int) \l0x0019: INVOKE  (r3 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.getCapacity():int type: VIRTUAL \l0x001d: ARITH  (r2 I:int) = (r2 I:int) % (r3 I:int) \l0x001e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|0x001f: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: IGET  (r4 I:java.lang.Object[]) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x0023: IGET  (r5 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l0x0025: INVOKE  \l  (r6 I:kotlin.collections.RingBuffer)\l  (r4 I:java.lang.Object[])\l  (r3 I:java.lang.Object)\l  (r0 I:int)\l  (r5 I:int)\l kotlin.collections.RingBuffer.fill(java.lang.Object[], java.lang.Object, int, int):void type: DIRECT \l0x0028: IGET  (r0 I:java.lang.Object[]) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x002a: INVOKE  \l  (r6 I:kotlin.collections.RingBuffer)\l  (r0 I:java.lang.Object[])\l  (r3 I:java.lang.Object)\l  (r1 I:int)\l  (r2 I:int)\l kotlin.collections.RingBuffer.fill(java.lang.Object[], java.lang.Object, int, int):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: IGET  (r1 I:java.lang.Object[]) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x0030: INVOKE  \l  (r6 I:kotlin.collections.RingBuffer)\l  (r1 I:java.lang.Object[])\l  (r3 I:java.lang.Object)\l  (r0 I:int)\l  (r2 I:int)\l kotlin.collections.RingBuffer.fill(java.lang.Object[], java.lang.Object, int, int):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: IPUT  (r2 I:int), (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.startIndex int \l0x0035: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x0039: ARITH  (r0 I:int) = (r0 I:int) \- (r7 I:int) \l0x003a: INVOKE  (r6 I:kotlin.collections.RingBuffer), (r0 I:int) kotlin.collections.RingBuffer.setSize(int):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0040: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0043: CONST_STR  (r1 I:java.lang.String) =  \"n shouldn't be greater than the buffer size: n = \" \l0x0045: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x004b: CONST_STR  (r7 I:java.lang.String) =  \", size = \" \l0x004d: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0050: INVOKE  (r7 I:int) = (r6 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x0054: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0057: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005d: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0061: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0064: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0066|0x0066: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|0x0067: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0069: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006c: CONST_STR  (r1 I:java.lang.String) =  \"n shouldn't be negative but it is \" \l0x006e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0071: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0074: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0078: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007a: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x007e: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0081: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0083|0x0083: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.RingBuffer.removeFirst((r6 'this' I:kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

