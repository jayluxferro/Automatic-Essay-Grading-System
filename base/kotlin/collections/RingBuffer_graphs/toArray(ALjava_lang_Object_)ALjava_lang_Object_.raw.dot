digraph "CFG forkotlin.collections.RingBuffer.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[]) \l0x0006: INVOKE  (r1 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r0 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x0010: INVOKE  (r6 I:java.lang.Object[]) = (r6 I:java.lang.Object[]), (r0 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"java.util.Arrays.copyOf(this, newSize)\" \l0x0016: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: INVOKE  (r0 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x001d: IGET  (r1 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.startIndex int \l0x001f: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IGET  (r4 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IGET  (r4 I:java.lang.Object[]) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x002a: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x002c: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x002e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0030: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0040 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r3 I:java.lang.Object[]) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x0037: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0039: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x003b: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x003d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|0x0040: ARRAY_LENGTH  (r0 I:int) = (r6 I:?[]) \l0x0041: INVOKE  (r1 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:13:0x004e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: INVOKE  (r0 I:int) = (r5 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x004b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004c: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x004e|0x004e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0051 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: RETURN  (r6 I:T[]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: NEW_INSTANCE  (r6 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0053: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x0055: INVOKE  (r6 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T[] kotlin.collections.RingBuffer.toArray((r5 'this' I:kotlin.collections.RingBuffer A[IMMUTABLE_TYPE, THIS]), (r6 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_4;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
}

