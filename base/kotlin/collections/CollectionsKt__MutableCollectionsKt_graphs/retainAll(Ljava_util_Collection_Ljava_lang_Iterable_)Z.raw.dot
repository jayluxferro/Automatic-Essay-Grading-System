digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;Ljava\/lang\/Iterable;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x000b: CHECK_CAST  (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:?[OBJECT, ARRAY]) \l0x000d: INVOKE  (r2 I:java.util.Collection) = (r2 I:java.lang.Iterable), (r0 I:java.lang.Iterable) kotlin.collections.CollectionsKt.convertToSetForSetOperationWith(java.lang.Iterable, java.lang.Iterable):java.util.Collection type: STATIC \l0x0011: INVOKE  (r1 I:java.util.Collection) = (r1 I:java.lang.Object) kotlin.jvm.internal.TypeIntrinsics.asMutableCollection(java.lang.Object):java.util.Collection type: STATIC \l0x0015: INVOKE  (r1 I:boolean) = (r1 I:java.util.Collection), (r2 I:java.util.Collection) java.util.Collection.retainAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r1 I:java.util.Collection\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Collection\<, \-TT;\>;, Ljava\/lang\/Iterable\<, +TT;\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

