digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(Ljava\/util\/Collection;Lkotlin\/sequences\/Sequence;)Z" {
subgraph cluster_Region_2022071987 {
label = "R(3:0|(1:(1:5)(0))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"elements\")\ljava.util.Iterator r3 = r3.iterator()\lboolean r0 = false\l}"];
subgraph cluster_LoopRegion_2017881724 {
label = "LOOP:0: (1:(1:5)(0))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0013|if (r3.hasNext() != false) goto L_0x0015\l}"];
subgraph cluster_Region_1440994939 {
label = "R(1:(1:5)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_743360078 {
label = "IF [B:4:0x001d] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|if (r2.add(r1) == true) goto L_0x001f\l}"];
subgraph cluster_Region_1818251334 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|r0 = true\l}"];
}
subgraph cluster_Region_1273530754 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0021|RETURN\l|return r0\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x000f|LOOP_START\lPHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v4 boolean) binds: [B:0:0x0000, B:7:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:7:0x000f\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0015}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f|LOOP_END\lSYNTHETIC\lPHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v5 boolean) binds: [B:9:0x000f, B:10:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:7:0x000f\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0021|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll((r2v0 java.util.Collection\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Collection\<, \-TT;\>;, Lkotlin\/sequences\/Sequence\<, +TT;\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_10;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_1;
Node_8 -> Node_6;
Node_9 -> Node_7;
Node_10 -> Node_7;
}

