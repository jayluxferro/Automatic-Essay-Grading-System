digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;Lkotlin\/sequences\/Sequence;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r2 I:java.util.HashSet) = (r2 I:kotlin.sequences.Sequence) kotlin.sequences.SequencesKt.toHashSet(kotlin.sequences.Sequence):java.util.HashSet type: STATIC \l0x000e: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean) = (r2 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l0x0014: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|0x0018: INVOKE  (r1 I:boolean) = (r1 I:java.util.Collection), (r2 I:java.util.Collection) java.util.Collection.retainAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: RETURN  (r1 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: INVOKE  (r1 I:boolean) = (r1 I:java.util.Collection) kotlin.collections.CollectionsKt__MutableCollectionsKt.retainNothing$CollectionsKt__MutableCollectionsKt(java.util.Collection):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r1 I:java.util.Collection\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Collection\<, \-TT;\>;, Lkotlin\/sequences\/Sequence\<, +TT;\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

