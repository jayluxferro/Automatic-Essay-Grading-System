digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:?[OBJECT, ARRAY]) java.util.RandomAccess \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r6 I:java.lang.Iterable) = (r6 I:java.lang.Object) kotlin.jvm.internal.TypeIntrinsics.asMutableIterable(java.lang.Object):java.lang.Iterable type: STATIC \l0x000a: INVOKE  (r6 I:boolean) = \l  (r6 I:java.lang.Iterable)\l  (r7 I:kotlin.jvm.functions.Function1)\l  (r8 I:boolean)\l kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable, kotlin.jvm.functions.Function1, boolean):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN  (r6 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: NEW_INSTANCE  (r6 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0011: CONST_STR  (r7 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.collections.MutableIterable\<T\>\" \l0x0013: INVOKE  (r6 I:kotlin.TypeCastException), (r7 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r0 I:int) = (r6 I:java.util.List) kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int type: STATIC \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:18:0x003d \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INVOKE  (r4 I:java.lang.Object) = (r6 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0024: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1)\l  (r4 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0028: CHECK_CAST  (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0036 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: INVOKE  (r6 I:java.util.List), (r3 I:int), (r4 I:java.lang.Object) java.util.List.set(int, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003e \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: INVOKE  (r7 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: IF  (r3 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:28:0x0054 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: INVOKE  (r7 I:int) = (r6 I:java.util.List) kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IF  (r7 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:26:0x0052 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: INVOKE  (r6 I:java.util.List), (r7 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0052 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0052|0x0052: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: RETURN  (r6 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|0x0054: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt((r6 I:java.util.List\<T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;Z)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_18;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_16[style=dashed];
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_10;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_28;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_23;
Node_26 -> Node_27;
}

