digraph "CFG forkotlin.collections.AbstractMap.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0001: CHECK_CAST  (r0 I:kotlin.collections.AbstractMap) = (kotlin.collections.AbstractMap) (r0 I:?[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.util.Map \l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:int) = (r4 I:kotlin.collections.AbstractMap) kotlin.collections.AbstractMap.size():int type: VIRTUAL \l0x0011: CHECK_CAST  (r5 I:java.util.Map) = (java.util.Map) (r5 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r3 I:int) = (r5 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r5 I:java.util.Set) = (r5 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x001e: CHECK_CAST  (r5 I:java.lang.Iterable) = (java.lang.Iterable) (r5 I:?[OBJECT, ARRAY]) \l0x0020: INSTANCE_OF  (r0 I:boolean) = (r5 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0025: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002e \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0045 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x003c: CHECK_CAST  (r0 I:java.util.Map$Entry) = (java.util.Map$Entry) (r0 I:?[OBJECT, ARRAY]) \l0x003e: INVOKE  (r0 I:boolean) = \l  (r4 I:kotlin.collections.AbstractMap)\l  (r0 I:java.util.Map$Entry)\l kotlin.collections.AbstractMap.containsEntry$kotlin_stdlib(java.util.Map$Entry):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractMap.equals((r4 'this' I:kotlin.collections.AbstractMap A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_20[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_20;
}

