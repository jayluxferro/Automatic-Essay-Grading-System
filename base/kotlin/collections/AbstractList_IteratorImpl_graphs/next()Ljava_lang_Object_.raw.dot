digraph "CFG forkotlin.collections.AbstractList.IteratorImpl.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r3 I:kotlin.collections.AbstractList$IteratorImpl) kotlin.collections.AbstractList.IteratorImpl.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:kotlin.collections.AbstractList) = (r3 I:kotlin.collections.AbstractList$IteratorImpl) kotlin.collections.AbstractList.IteratorImpl.this$0 kotlin.collections.AbstractList \l0x0008: IGET  (r1 I:int) = (r3 I:kotlin.collections.AbstractList$IteratorImpl) kotlin.collections.AbstractList.IteratorImpl.index int \l0x000a: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x000c: IPUT  \l  (r2 I:int)\l  (r3 I:kotlin.collections.AbstractList$IteratorImpl)\l kotlin.collections.AbstractList.IteratorImpl.index int \l0x000e: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.collections.AbstractList), (r1 I:int) kotlin.collections.AbstractList.get(int):java.lang.Object type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: RETURN  (r0 I:E) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x0015: INVOKE  (r0 I:java.util.NoSuchElementException) java.util.NoSuchElementException.\<init\>():void type: DIRECT \l0x0018: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public E kotlin.collections.AbstractList.IteratorImpl.next((r3 'this' I:kotlin.collections.AbstractList$IteratorImpl A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TE;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

