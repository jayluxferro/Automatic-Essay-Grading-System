digraph "CFG forkotlin.collections.SlidingWindowKt$windowedIterator$1.doResume(Ljava\/lang\/Object;Ljava\/lang\/Throwable;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r11 I:java.lang.Object) =  kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object type: STATIC \l0x0004: IGET  (r0 I:int) = \l  (r10 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5] t:[0x006b, 0x0052, 0x0045, 0x002e, 0x001d, 0x0012] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: NEW_INSTANCE  (r11 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000c: CONST_STR  (r12 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000e: INVOKE  \l  (r11 I:java.lang.IllegalStateException)\l  (r12 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IGET  (r11 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x0014: CHECK_CAST  (r11 I:kotlin.collections.RingBuffer) = (kotlin.collections.RingBuffer) (r11 I:?[OBJECT, ARRAY]) \l0x0016: IGET  (r11 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r0 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x001f: CHECK_CAST  (r0 I:kotlin.collections.RingBuffer) = (kotlin.collections.RingBuffer) (r0 I:?[OBJECT, ARRAY]) \l0x0021: IGET  (r2 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x0023: IGET  (r3 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x0025: CHECK_CAST  (r3 I:kotlin.coroutines.experimental.SequenceBuilder) = (kotlin.coroutines.experimental.SequenceBuilder) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x002a: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: IGET  (r0 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$3 java.lang.Object \l0x0030: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x0032: IGET  (r2 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2 java.lang.Object \l0x0034: IGET  (r2 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x0036: CHECK_CAST  (r2 I:kotlin.collections.RingBuffer) = (kotlin.collections.RingBuffer) (r2 I:?[OBJECT, ARRAY]) \l0x0038: IGET  (r3 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x003a: IGET  (r4 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x003c: CHECK_CAST  (r4 I:kotlin.coroutines.experimental.SequenceBuilder) = (kotlin.coroutines.experimental.SequenceBuilder) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0044 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0041: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|0x0044: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: IGET  (r11 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$1 int \l0x0047: IGET  (r11 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x0049: CHECK_CAST  (r11 I:java.util.ArrayList) = (java.util.ArrayList) (r11 I:?[OBJECT, ARRAY]) \l0x004b: IGET  (r11 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0051 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: IGET  (r0 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$3 java.lang.Object \l0x0054: CHECK_CAST  (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:?[OBJECT, ARRAY]) \l0x0056: IGET  (r2 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2 java.lang.Object \l0x0058: IGET  (r2 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$1 int \l0x005a: IGET  (r2 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x005c: CHECK_CAST  (r2 I:java.util.ArrayList) = (java.util.ArrayList) (r2 I:?[OBJECT, ARRAY]) \l0x005e: IGET  (r3 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x0060: IGET  (r4 I:java.lang.Object) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x0062: CHECK_CAST  (r4 I:kotlin.coroutines.experimental.SequenceBuilder) = (kotlin.coroutines.experimental.SequenceBuilder) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|0x0064: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x006a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0066|0x0066: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0067: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0068: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x006a|0x006a: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x006b|0x006b: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x018c \l}"];
Node_25 [shape=record,label="{25\:\ 0x006d|0x006d: IGET  (r12 I:kotlin.coroutines.experimental.SequenceBuilder) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.p$ kotlin.coroutines.experimental.SequenceBuilder \l0x006f: IGET  (r0 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$step int \l0x0071: IGET  (r2 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l0x0073: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0074|0x0074: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:52:0x00ec \l}"];
Node_27 [shape=record,label="{27\:\ 0x0076|0x0076: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x0078: IGET  (r3 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l0x007a: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x007d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007e: IGET  (r4 I:java.util.Iterator) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator java.util.Iterator \l0x0080: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0081: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0082: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0083: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x0084: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0085: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0086|0x0086: INVOKE  (r6 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_29 [shape=record,label="{29\:\ 0x008a|0x008a: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00c6 \l}"];
Node_30 [shape=record,label="{30\:\ 0x008c|0x008c: INVOKE  (r6 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_31 [shape=record,label="{31\:\ 0x0090|0x0090: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:33:0x0095 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0092|0x0092: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0095|0x0095: INVOKE  (r2 I:java.util.ArrayList), (r6 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0098: INVOKE  (r7 I:int) = (r2 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x009c: IGET  (r8 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l}"];
Node_34 [shape=record,label="{34\:\ 0x009e|0x009e: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0086 \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a0|0x00a0: IPUT  \l  (r4 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x00a2: IPUT  \l  (r12 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x00a4: IPUT  \l  (r2 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x00a6: IPUT  \l  (r3 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$1 int \l0x00a8: IPUT  \l  (r6 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2 java.lang.Object \l0x00aa: IPUT  \l  (r0 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$3 java.lang.Object \l0x00ac: IPUT  \l  (r1 I:int)\l  (r11 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x00ae: INVOKE  (r3 I:java.lang.Object) = \l  (r4 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r2 I:java.lang.Object)\l  (r11 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yield(java.lang.Object, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b2|0x00b2: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00b5 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b4|0x00b4: RETURN  (r5 I:java.lang.Object) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00b5|0x00b5: IGET  (r3 I:boolean) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer boolean \l}"];
Node_39 [shape=record,label="{39\:\ 0x00b7|0x00b7: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00bd \l}"];
Node_40 [shape=record,label="{40\:\ 0x00b9|0x00b9: INVOKE  (r2 I:java.util.ArrayList) java.util.ArrayList.clear():void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x00bd|0x00bd: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x00bf: IGET  (r3 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l0x00c1: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x00c4|0x00c4: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_43 [shape=record,label="{43\:\ 0x00c6|0x00c6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x00c7: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x00c9: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l0x00cd: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (r1 I:?[int, boolean, short, byte, char]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ce|0x00ce: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d0|0x00d0: IGET  (r0 I:boolean) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows boolean \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d2|0x00d2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x00dc \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d4|0x00d4: INVOKE  (r0 I:int) = (r2 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x00d8: IGET  (r1 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l}"];
Node_48 [shape=record,label="{48\:\ 0x00da|0x00da: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_49 [shape=record,label="{49\:\ 0x00dc|0x00dc: IPUT  \l  (r12 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x00de: IPUT  \l  (r2 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x00e0: IPUT  \l  (r3 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$1 int \l0x00e2: CONST  (r12 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x00e3: IPUT  \l  (r12 I:int)\l  (r11 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x00e5: INVOKE  (r11 I:java.lang.Object) = \l  (r4 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r2 I:java.lang.Object)\l  (r11 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yield(java.lang.Object, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_50 [shape=record,label="{50\:\ 0x00e9|0x00e9: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_51 [shape=record,label="{51\:\ 0x00eb|0x00eb: RETURN  (r5 I:java.lang.Object) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00ec|0x00ec: NEW_INSTANCE  (r2 I:kotlin.collections.RingBuffer) =  kotlin.collections.RingBuffer \l0x00ee: IGET  (r3 I:int) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l0x00f0: INVOKE  (r2 I:kotlin.collections.RingBuffer), (r3 I:int) kotlin.collections.RingBuffer.\<init\>(int):void type: DIRECT \l0x00f3: IGET  (r3 I:java.util.Iterator) = \l  (r10 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator java.util.Iterator \l0x00f5: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x00f6: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x00f7: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x00f8: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x00f9: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00fa: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x00fb|0x00fb: INVOKE  (r5 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_54 [shape=record,label="{54\:\ 0x00ff|0x00ff: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x013a \l}"];
Node_55 [shape=record,label="{55\:\ 0x0101|0x0101: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0105: INVOKE  \l  (r2 I:kotlin.collections.RingBuffer)\l  (r5 I:java.lang.Object)\l kotlin.collections.RingBuffer.add(java.lang.Object):void type: VIRTUAL \l0x0108: INVOKE  (r6 I:boolean) = (r2 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.isFull():boolean type: VIRTUAL \l}"];
Node_56 [shape=record,label="{56\:\ 0x010c|0x010c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x00fb \l}"];
Node_57 [shape=record,label="{57\:\ 0x010e|0x010e: IGET  (r6 I:boolean) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer boolean \l}"];
Node_58 [shape=record,label="{58\:\ 0x0110|0x0110: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0116 \l}"];
Node_59 [shape=record,label="{59\:\ 0x0112|0x0112: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0113: CHECK_CAST  (r6 I:java.util.List) = (java.util.List) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0116|0x0116: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x0118: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0119: CHECK_CAST  (r7 I:java.util.Collection) = (java.util.Collection) (r7 I:?[OBJECT, ARRAY]) \l0x011b: INVOKE  (r6 I:java.util.ArrayList), (r7 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x011e: CHECK_CAST  (r6 I:java.util.List) = (java.util.List) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0120|0x0120: IPUT  \l  (r4 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x0122: IPUT  \l  (r3 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x0124: IPUT  \l  (r2 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x0126: IPUT  \l  (r5 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2 java.lang.Object \l0x0128: IPUT  \l  (r0 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$3 java.lang.Object \l0x012a: CONST  (r5 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x012b: IPUT  \l  (r5 I:int)\l  (r11 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x012d: INVOKE  (r5 I:java.lang.Object) = \l  (r4 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r6 I:java.lang.Object)\l  (r11 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yield(java.lang.Object, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_62 [shape=record,label="{62\:\ 0x0131|0x0131: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0134 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0133|0x0133: RETURN  (r12 I:java.lang.Object) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0134|0x0134: IGET  (r5 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$step int \l0x0136: INVOKE  (r2 I:kotlin.collections.RingBuffer), (r5 I:int) kotlin.collections.RingBuffer.removeFirst(int):void type: VIRTUAL \l}"];
Node_65 [shape=record,label="{65\:\ 0x013a|0x013a: IGET  (r0 I:boolean) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows boolean \l}"];
Node_66 [shape=record,label="{66\:\ 0x013c|0x013c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_67 [shape=record,label="{67\:\ 0x013e|0x013e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x013f: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0140: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0141|0x0141: INVOKE  (r4 I:int) = (r0 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size():int type: VIRTUAL \l0x0145: IGET  (r5 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$step int \l}"];
Node_69 [shape=record,label="{69\:\ 0x0147|0x0147: IF  (r4 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:78:0x0171 \l}"];
Node_70 [shape=record,label="{70\:\ 0x0149|0x0149: IGET  (r4 I:boolean) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer boolean \l}"];
Node_71 [shape=record,label="{71\:\ 0x014b|0x014b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0151 \l}"];
Node_72 [shape=record,label="{72\:\ 0x014d|0x014d: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x014e: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0151|0x0151: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x0153: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0154: CHECK_CAST  (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:?[OBJECT, ARRAY]) \l0x0156: INVOKE  (r4 I:java.util.ArrayList), (r5 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x0159: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_74 [shape=record,label="{74\:\ 0x015b|0x015b: IPUT  \l  (r3 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x015d: IPUT  \l  (r2 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x015f: IPUT  \l  (r0 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1 java.lang.Object \l0x0161: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0162: IPUT  \l  (r5 I:int)\l  (r11 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x0164: INVOKE  (r4 I:java.lang.Object) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r4 I:java.lang.Object)\l  (r11 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yield(java.lang.Object, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_75 [shape=record,label="{75\:\ 0x0168|0x0168: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x016b \l}"];
Node_76 [shape=record,label="{76\:\ 0x016a|0x016a: RETURN  (r12 I:java.lang.Object) \l}"];
Node_77 [shape=record,label="{77\:\ 0x016b|0x016b: IGET  (r4 I:int) = \l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$step int \l0x016d: INVOKE  (r0 I:kotlin.collections.RingBuffer), (r4 I:int) kotlin.collections.RingBuffer.removeFirst(int):void type: VIRTUAL \l}"];
Node_78 [shape=record,label="{78\:\ 0x0171|0x0171: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0172: CHECK_CAST  (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:?[OBJECT, ARRAY]) \l0x0174: INVOKE  (r4 I:boolean) = (r4 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l0x0178: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (r4 I:?[int, boolean, short, byte, char]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0179|0x0179: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_80 [shape=record,label="{80\:\ 0x017b|0x017b: IPUT  \l  (r2 I:int)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0 int \l0x017d: IPUT  \l  (r0 I:java.lang.Object)\l  (r11 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0 java.lang.Object \l0x017f: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0180: IPUT  \l  (r1 I:int)\l  (r11 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.label int \l0x0182: INVOKE  (r11 I:java.lang.Object) = \l  (r3 I:kotlin.coroutines.experimental.SequenceBuilder)\l  (r0 I:java.lang.Object)\l  (r11 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.SequenceBuilder.yield(java.lang.Object, kotlin.coroutines.experimental.Continuation):java.lang.Object type: VIRTUAL \l}"];
Node_81 [shape=record,label="{81\:\ 0x0186|0x0186: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x0189 \l}"];
Node_82 [shape=record,label="{82\:\ 0x0188|0x0188: RETURN  (r12 I:java.lang.Object) \l}"];
Node_83 [shape=record,label="{83\:\ 0x0189|0x0189: SGET  (r11 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_84 [shape=record,label="{84\:\ 0x018b|0x018b: RETURN  (r11 I:java.lang.Object) \l}"];
Node_85 [shape=record,label="{85\:\ 0x018c|0x018c: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.collections.SlidingWindowKt$windowedIterator$1.doResume((r10 'this' I:kotlin.collections.SlidingWindowKt$windowedIterator$1 A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.Throwable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_8;
Node_1 -> Node_12;
Node_1 -> Node_16;
Node_1 -> Node_20;
Node_1 -> Node_24;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_83[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_77;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_64;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_83[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_38;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_85;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_52;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_43;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_28;
Node_33 -> Node_34;
Node_34 -> Node_28;
Node_34 -> Node_35[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_28;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_83;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_49;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_83;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_83;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_65;
Node_55 -> Node_56;
Node_56 -> Node_53;
Node_56 -> Node_57[style=dashed];
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_64 -> Node_53;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_83;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_78;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_73;
Node_72 -> Node_74;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_77 -> Node_68;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_83;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_83;
Node_83 -> Node_84;
}

