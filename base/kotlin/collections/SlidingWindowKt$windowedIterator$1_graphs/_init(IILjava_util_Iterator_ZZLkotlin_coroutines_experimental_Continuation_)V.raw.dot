digraph "CFG forkotlin.collections.SlidingWindowKt$windowedIterator$1.\<init\>(IILjava\/util\/Iterator;ZZLkotlin\/coroutines\/experimental\/Continuation;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r1 I:int)\l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$step int \l0x0002: IPUT  \l  (r2 I:int)\l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$size int \l0x0004: IPUT  \l  (r3 I:java.util.Iterator)\l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator java.util.Iterator \l0x0006: IPUT  \l  (r4 I:boolean)\l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer boolean \l0x0008: IPUT  \l  (r5 I:boolean)\l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows boolean \l0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000b: INVOKE  \l  (r0 I:kotlin.coroutines.experimental.jvm.internal.CoroutineImpl)\l  (r1 I:int)\l  (r6 I:kotlin.coroutines.experimental.Continuation)\l kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.\<init\>(int, kotlin.coroutines.experimental.Continuation):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{void kotlin.collections.SlidingWindowKt$windowedIterator$1.\<init\>((r0 'this' I:kotlin.collections.SlidingWindowKt$windowedIterator$1 A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.Iterator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.experimental.Continuation A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

