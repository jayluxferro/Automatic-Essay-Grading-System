digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.slice([BLjava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"indices\")\lint r0 = kotlin.collections.CollectionsKt.collectionSizeOrDefault(r3, 10)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if (r0 != 0) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012}"];
Node_3 [shape=record,label="{3\:\ 0x0016|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|java.util.ArrayList r1 = new java.util.ArrayList(r0)\ljava.util.Iterator r3 = r3.iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|LOOP_START\lLOOP:0: B:5:0x0020\-\>B:7:0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r3.hasNext() == false) goto L_0x003a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|LOOP_END\lLOOP:0: B:5:0x0020\-\>B:7:0x0026\l|r1.add(java.lang.Byte.valueOf(r2[r3.next().intValue()]))\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a}"];
Node_9 [shape=record,label="{9\:\ 0x003c|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Byte\> kotlin.collections.ArraysKt___ArraysKt.slice((r2v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Iterable\<java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([B, Ljava\/lang\/Iterable\<, Ljava\/lang\/Integer;, \>;), Ljava\/util\/List\<, Ljava\/lang\/Byte;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_10 -> Node_8;
}

