digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.associate([BLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x000b: INVOKE  (r0 I:int) = (r0 I:int) kotlin.collections.MapsKt.mapCapacity(int):int type: STATIC \l0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) kotlin.ranges.RangesKt.coerceAtLeast(int, int):int type: STATIC \l0x0015: NEW_INSTANCE  (r1 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0017: INVOKE  (r1 I:java.util.LinkedHashMap), (r0 I:int) java.util.LinkedHashMap.\<init\>(int):void type: DIRECT \l0x001a: CHECK_CAST  (r1 I:java.util.Map) = (java.util.Map) (r1 I:?[OBJECT, ARRAY]) \l0x001c: ARRAY_LENGTH  (r0 I:int) = (r5 I:?[]) \l0x001d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x003a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: AGET  (r3 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0022: INVOKE  (r3 I:java.lang.Byte) = (r3 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x0026: INVOKE  (r3 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x002a: CHECK_CAST  (r3 I:kotlin.Pair) = (kotlin.Pair) (r3 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  (r4 I:java.lang.Object) = (r3 I:kotlin.Pair) kotlin.Pair.getFirst():java.lang.Object type: VIRTUAL \l0x0030: INVOKE  (r3 I:java.lang.Object) = (r3 I:kotlin.Pair) kotlin.Pair.getSecond():java.lang.Object type: VIRTUAL \l0x0034: INVOKE  \l  (r1 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0037: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|0x003a: RETURN  (r1 I:java.util.Map\<K, V\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.collections.ArraysKt___ArraysKt.associate((r5 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Byte, ? extends kotlin.Pair\<? extends K, ? extends V\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>([B, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Byte;, +, Lkotlin\/Pair\<, +TK;+TV;\>;\>;), Ljava\/util\/Map\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

