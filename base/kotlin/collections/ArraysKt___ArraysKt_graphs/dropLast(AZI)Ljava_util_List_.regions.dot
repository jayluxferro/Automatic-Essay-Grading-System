digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.dropLast([ZI)Ljava\/util\/List;" {
subgraph cluster_Region_1612066216 {
label = "R(2:0|(2:(1:6)|(2:7|8)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_Region_1203456422 {
label = "R(2:(1:6)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1791749403 {
label = "IF [B:4:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r1 \l  PHI: (r1v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 \>= 0) == true) goto L_0x000d\l}"];
subgraph cluster_Region_1000877935 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|RETURN\l|return kotlin.collections.ArraysKt.take(r2, kotlin.ranges.RangesKt.coerceAtLeast(r2.length \- r3, 0))\l}"];
}
}
subgraph cluster_Region_1778527967 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0018}"];
Node_8 [shape=record,label="{8\:\ 0x0039|throw new java.lang.IllegalArgumentException((\"Requested element count \" + r3 + \" is less than zero.\").toString())\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Boolean\> kotlin.collections.ArraysKt___ArraysKt.dropLast((r2v0 boolean[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([ZI), Ljava\/util\/List\<, Ljava\/lang\/Boolean;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

