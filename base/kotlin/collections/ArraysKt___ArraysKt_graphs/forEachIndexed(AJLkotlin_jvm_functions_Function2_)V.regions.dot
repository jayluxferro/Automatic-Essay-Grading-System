digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.forEachIndexed([JLkotlin\/jvm\/functions\/Function2;)V" {
subgraph cluster_Region_63905209 {
label = "R(2:0|(1:2))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"action\")\lint int r0 = r6.length\lint r1 = 0\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_519349815 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:2:0x000f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:2:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:2:0x000f\l|if (r1 \< r0) goto L_0x000f\l}"];
subgraph cluster_Region_1408535950 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|LOOP_END\lLOOP:0: B:1:0x000d\-\>B:2:0x000f\l|java.lang.Integer java.lang.Integer r5 = java.lang.Integer.valueOf(r2)\lr2++\lr7.invoke(r5, java.lang.Long.valueOf(r3))\lr1++\l}"];
}
}
}
Node_3 [shape=record,color=red,label="{3\:\ 0x0021}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.ArraysKt___ArraysKt.forEachIndexed((r6v0 long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Long, kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([J, Lkotlin\/jvm\/functions\/Function2\<, \-, Ljava\/lang\/Integer;, \-, Ljava\/lang\/Long;, Lkotlin\/Unit;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_1;
Node_4 -> Node_3;
}

