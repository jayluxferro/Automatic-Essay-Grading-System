digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.takeWhile([ILkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"predicate\")\ljava.util.ArrayList r0 = new java.util.ArrayList()\lint r1 = r5.length\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:4:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0011\-\>B:4:0x0026\l|if (r2 \>= r1) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|r3 = r5[r2]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|if (r6.invoke(java.lang.Integer.valueOf(r3)).booleanValue() != false) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|LOOP_END\lLOOP:0: B:1:0x0011\-\>B:4:0x0026\l|r0.add(java.lang.Integer.valueOf(r3))\lint r2 = r2 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030}"];
Node_6 [shape=record,label="{6\:\ 0x0032|RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Integer\> kotlin.collections.ArraysKt___ArraysKt.takeWhile((r5v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Integer, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([I, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Integer;, Ljava\/lang\/Boolean;, \>;), Ljava\/util\/List\<, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_7 -> Node_5;
Node_8 -> Node_5;
}

