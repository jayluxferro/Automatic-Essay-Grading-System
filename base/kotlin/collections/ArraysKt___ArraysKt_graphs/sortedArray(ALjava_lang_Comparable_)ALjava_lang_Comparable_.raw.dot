digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sortedArray([Ljava\/lang\/Comparable;)[Ljava\/lang\/Comparable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: ARRAY_LENGTH  (r0 I:int) = (r1 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: RETURN  (r1 I:T[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: ARRAY_LENGTH  (r0 I:int) = (r1 I:?[]) \l0x000f: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r0 I:int) java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] type: STATIC \l0x0013: CONST_STR  (r0 I:java.lang.String) =  \"java.util.Arrays.copyOf(this, size)\" \l0x0015: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0018: CHECK_CAST  (r1 I:java.lang.Comparable[]) = (java.lang.Comparable[]) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x001d: CHECK_CAST  (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:java.lang.Object[]) kotlin.collections.ArraysKt.sort(java.lang.Object[]):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: RETURN  (r1 I:T[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: NEW_INSTANCE  (r1 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0025: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<kotlin.Any?\>\" \l0x0027: INVOKE  (r1 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T[] kotlin.collections.ArraysKt___ArraysKt.sortedArray((r1 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Comparable\<, \-TT;\>;\>([TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

