digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.take([ZI)Ljava\/util\/List;" {
subgraph cluster_Region_1020205376 {
label = "R(2:0|(2:22|23)(1:(1:7)(1:(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21)))))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lint r0 = 0\l}"];
subgraph cluster_IfRegion_1208475011 {
label = "IF [B:4:0x000c] THEN: R(2:22|23) ELSE: R(1:(1:7)(1:(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21))))))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r2 \l  PHI: (r2v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7 \>= 0) != true) goto L_0x0048\l}"];
subgraph cluster_Region_1958993355 {
label = "R(2:22|23)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0048}"];
Node_23 [shape=record,label="{23\:\ 0x0069|throw new java.lang.IllegalArgumentException((\"Requested element count \" + r7 + \" is less than zero.\").toString())\l}"];
}
subgraph cluster_Region_915015663 {
label = "R(1:(1:7)(1:(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_136737036 {
label = "IF [B:5:0x000e] THEN: R(1:7) ELSE: R(1:(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r7 == 0) goto L_0x0010\l}"];
subgraph cluster_Region_2117815886 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
}
subgraph cluster_Region_343730631 {
label = "R(1:(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1915691480 {
label = "R(2:(1:11)|(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1228570752 {
label = "IF [B:9:0x0016] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0016|if (r7 \>= r6.length) goto L_0x0018\l}"];
subgraph cluster_Region_1842872023 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001c|RETURN\l|return kotlin.collections.ArraysKt.toList(r6)\l}"];
}
}
subgraph cluster_Region_504758395 {
label = "R(1:(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21)))";
node [shape=record,color=blue];
subgraph cluster_Region_364692352 {
label = "R(2:(1:14)|(3:15|(2:17|(2:(1:25)|(1:19)))|21))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_136277815 {
label = "IF [B:12:0x001d] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001d|if (r7 == 1) goto L_0x001f\l}"];
subgraph cluster_Region_1517029797 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0029|RETURN\l|return kotlin.collections.CollectionsKt.listOf(java.lang.Boolean.valueOf(r6[0]))\l}"];
}
}
subgraph cluster_Region_1460650967 {
label = "R(3:15|(2:17|(2:(1:25)|(1:19)))|21)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002a|java.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(r7)\lint int r2 = r6.length\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_642450560 {
label = "LOOP:0: (2:17|(2:(1:25)|(1:19)))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0031|LOOP_START\lPHI: r0 r3 \l  PHI: (r0v3 int) = (r0v1 int), (r0v4 int) binds: [B:15:0x002a, B:19:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:15:0x002a, B:19:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:16:0x0031\-\>B:19:0x003a\l|if (r0 \< r2) goto L_0x0033\l}"];
subgraph cluster_Region_332320247 {
label = "R(2:17|(2:(1:25)|(1:19)))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0033|boolean boolean r4 = r6[r0]\lint int r5 = r3 + 1\l}"];
subgraph cluster_Region_1960300363 {
label = "R(2:(1:25)|(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_617327506 {
label = "IF [B:18:0x0037] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0037|if (r3 == r7) goto L_0x0045\l}"];
subgraph cluster_Region_117748370 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0045|SYNTHETIC\lEDGE_INSN: B:25:0x0045\-\>B:20:0x0045 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_291265905 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x003a|LOOP_END\lLOOP:0: B:16:0x0031\-\>B:19:0x003a\l|r1.add(java.lang.Boolean.valueOf(r4))\lr0++\lr3 = r5\l}"];
}
}
}
}
Node_21 [shape=record,label="{21\:\ 0x0047|RETURN\l|return r1\l}"];
}
}
}
}
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0007}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0015}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0018}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001f}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0045|EDGE_INSN: B:25:0x0045\-\>B:20:0x0045 ?: BREAK  \l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0045|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Boolean\> kotlin.collections.ArraysKt___ArraysKt.take((r6v0 boolean[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([ZI), Ljava\/util\/List\<, Ljava\/lang\/Boolean;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_22;
Node_22 -> Node_23;
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_24[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_25 -> Node_20;
Node_19 -> Node_16;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_13 -> Node_14;
Node_20 -> Node_21;
Node_24 -> Node_20;
}

