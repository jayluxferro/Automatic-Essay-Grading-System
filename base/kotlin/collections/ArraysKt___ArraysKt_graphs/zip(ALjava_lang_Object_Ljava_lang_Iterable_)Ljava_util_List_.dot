digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.zip([Ljava\/lang\/Object;Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"other\")\lint r0 = r5.length\ljava.util.ArrayList r2 = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt.collectionSizeOrDefault(r6, 10), r0))\ljava.util.Iterator r6 = r6.iterator()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|LOOP_START\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v7 int) binds: [B:0:0x0000, B:5:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001f\-\>B:5:0x002c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0023|if (r6.hasNext() == false) goto L_0x0039\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|java.lang.Object r3 = r6.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|if (r1 \< r0) goto L_0x002c\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|LOOP_END\lLOOP:0: B:1:0x001f\-\>B:5:0x002c\l|int r4 = r1 + 1\lr2.add(kotlin.TuplesKt.m174to(r5[r1], r3))\lr1 = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0039}"];
Node_7 [shape=record,label="{7\:\ 0x003b|RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<T, R\>\> kotlin.collections.ArraysKt___ArraysKt.zip((r5v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Iterable\<? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>([TT;, Ljava\/lang\/Iterable\<, +TR;\>;), Ljava\/util\/List\<, Lkotlin\/Pair\<, TT;TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_6;
}

