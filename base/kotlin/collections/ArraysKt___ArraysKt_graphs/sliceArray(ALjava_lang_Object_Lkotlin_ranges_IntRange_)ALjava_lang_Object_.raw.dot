digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sliceArray([Ljava\/lang\/Object;Lkotlin\/ranges\/IntRange;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r2 I:int), (r2 I:int) java.util.Arrays.copyOfRange(java.lang.Object[], int, int):java.lang.Object[] type: STATIC \l0x0015: CONST_STR  (r2 I:java.lang.String) =  \"java.util.Arrays.copyOfR…this, fromIndex, toIndex)\" \l0x0017: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: RETURN  (r1 I:T[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: INVOKE  (r0 I:java.lang.Integer) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getStart():java.lang.Integer type: VIRTUAL \l0x001f: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0023: INVOKE  (r2 I:java.lang.Integer) = (r2 I:kotlin.ranges.IntRange) kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer type: VIRTUAL \l0x0027: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x002b: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x002d: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r0 I:int), (r2 I:int) java.util.Arrays.copyOfRange(java.lang.Object[], int, int):java.lang.Object[] type: STATIC \l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"java.util.Arrays.copyOfR…this, fromIndex, toIndex)\" \l0x0033: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|0x0036: RETURN  (r1 I:T[]) \l}"];
MethodNode[shape=record,label="{public static final T[] kotlin.collections.ArraysKt___ArraysKt.sliceArray((r1 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;, Lkotlin\/ranges\/IntRange;, )[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

