digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.foldIndexed([BLjava\/lang\/Object;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"operation\")\lint r0 = r5.length\lr1 = 0\lr2 = r6\lr6 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r1 r2 r6 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 R) = (r2v0 R), (r2v2 R) binds: [B:0:0x0000, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 int) = (r6v1 int), (r6v3 int) binds: [B:0:0x0000, B:2:0x0010] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|if (r1 \>= r0) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_END\lLOOP:0: B:1:0x000e\-\>B:2:0x0010\l|byte r3 = r5[r1]\ljava.lang.Integer r4 = java.lang.Integer.valueOf(r6)\lint r6 = r6 + 1\ljava.lang.Object r2 = r7.invoke(r4, r2, java.lang.Byte.valueOf(r3))\lint r1 = r1 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|RETURN\l|return r2\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final R kotlin.collections.ArraysKt___ArraysKt.foldIndexed((r5v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 R A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 ? I:kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super R, ? super java.lang.Byte, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lJADX WARNING: type inference failed for: r7v0, types: [kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super R, ? super java.lang.Byte, ? extends R\>, kotlin.jvm.functions.Function3, java.lang.Object]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>([BTR;, Lkotlin\/jvm\/functions\/Function3\<, \-, Ljava\/lang\/Integer;, \-TR;\-, Ljava\/lang\/Byte;, +TR;\>;)TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_1;
Node_4 -> Node_3;
}

