digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.mapIndexed([CLkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"transform\")\ljava.util.Collection r0 = new java.util.ArrayList(r6.length)\lint r1 = r6.length\lr2 = 0\lr3 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|LOOP_START\lPHI: r2 r3 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:2:0x0017] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:0:0x0000, B:2:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0015\-\>B:2:0x0017\l|if (r2 \>= r1) goto L_0x002d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|LOOP_END\lLOOP:0: B:1:0x0015\-\>B:2:0x0017\l|char r4 = r6[r2]\ljava.lang.Integer r5 = java.lang.Integer.valueOf(r3)\lint r3 = r3 + 1\lr0.add(r7.invoke(r5, java.lang.Character.valueOf(r4)))\lint r2 = r2 + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x002d}"];
Node_4 [shape=record,label="{4\:\ 0x002f|RETURN\l|return (java.util.List) r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.ArraysKt___ArraysKt.mapIndexed((r6v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Character, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>([C, Lkotlin\/jvm\/functions\/Function2\<, \-, Ljava\/lang\/Integer;, \-, Ljava\/lang\/Character;, +TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_3;
}

