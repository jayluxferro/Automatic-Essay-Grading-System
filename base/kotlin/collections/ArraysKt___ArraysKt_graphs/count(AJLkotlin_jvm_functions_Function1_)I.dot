digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.count([JLkotlin\/jvm\/functions\/Function1;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"predicate\")\lint r0 = r5.length\lr1 = 0\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x0023] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:5:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x0023\l|if (r1 \>= r0) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f}"];
Node_3 [shape=record,label="{3\:\ 0x001f|if (r6.invoke(java.lang.Long.valueOf(r5[r1])).booleanValue() == false) goto L_0x0023\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|int r2 = r2 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|LOOP_END\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:9:0x0023, B:8:0x0023] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000d\-\>B:5:0x0023\l|int r1 = r1 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|RETURN\l|return r2\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.ArraysKt___ArraysKt.count((r5v0 long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.functions.Function1\<? super java.lang.Long, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([J, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Long;, Ljava\/lang\/Boolean;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

