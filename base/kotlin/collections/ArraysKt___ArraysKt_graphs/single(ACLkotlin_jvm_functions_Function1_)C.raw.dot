digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.single([CLkotlin\/jvm\/functions\/Function1;)C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: CHECK_CAST  (r0 I:java.lang.Character) = (java.lang.Character) (r0 I:?[OBJECT, ARRAY]) \l0x000d: ARRAY_LENGTH  (r1 I:int) = (r6 I:?[]) \l0x000e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0010: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:9:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: AGET  (r4 I:char A[IMMUTABLE_TYPE]) = \l  (r6 I:char[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l \l0x0015: INVOKE  (r5 I:java.lang.Character) = (r4 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x0019: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1)\l  (r5 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x001d: CHECK_CAST  (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0039 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: INVOKE  (r0 I:java.lang.Character) = (r4 I:char) java.lang.Character.valueOf(char):java.lang.Character type: STATIC \l0x002b: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0031: CONST_STR  (r7 I:java.lang.String) =  \"Array contains more than one matching element.\" \l0x0033: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r7 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0036: CHECK_CAST  (r6 I:java.lang.Throwable) = (java.lang.Throwable) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004d \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0045 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: INVOKE  (r6 I:char) = (r3 I:java.lang.Character) java.lang.Character.charValue():char type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0044|0x0044: RETURN  (r6 I:char) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: NEW_INSTANCE  (r6 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0047: CONST_STR  (r7 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Char\" \l0x0049: INVOKE  (r6 I:kotlin.TypeCastException), (r7 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|0x004d: NEW_INSTANCE  (r6 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x004f: CONST_STR  (r7 I:java.lang.String) =  \"Array contains no element matching the predicate.\" \l0x0051: INVOKE  \l  (r6 I:java.util.NoSuchElementException)\l  (r7 I:java.lang.String)\l java.util.NoSuchElementException.\<init\>(java.lang.String):void type: DIRECT \l0x0054: CHECK_CAST  (r6 I:java.lang.Throwable) = (java.lang.Throwable) (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.collections.ArraysKt___ArraysKt.single((r6 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[([C, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;)C]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

