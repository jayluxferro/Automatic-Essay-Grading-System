digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.reversedArray([I)[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r5.length != 0) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v5 boolean), (r0v6 boolean) binds: [B:3:0x000b, B:2:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return r5\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|int[] r0 = new int[r5.length]\lint r2 = kotlin.collections.ArraysKt.getLastIndex(r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if (r2 \< 0) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:7:0x0016, B:10:0x0020] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0018\-\>B:10:0x0020\l|r0[r2 \- r1] = r5[r1]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|if (r1 == r2) goto L_0x0023\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|LOOP_END\lLOOP:0: B:8:0x0018\-\>B:10:0x0020\l|int r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final int[] kotlin.collections.ArraysKt___ArraysKt.reversedArray((r5v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_8;
Node_12 -> Node_11;
}

