digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.fold([JLjava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1395967641 {
label = "R(3:0|(1:2)|3)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"operation\")\lint int r0 = r4.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_664936923 {
label = "LOOP:0: (1:2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000c|LOOP_START\lPHI: r1 r5 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 R) = (r5v0 R), (r5v2 R) binds: [B:0:0x0000, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000c\-\>B:2:0x000e\l|if (r1 \< r0) goto L_0x000e\l}"];
subgraph cluster_Region_54128110 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000e|LOOP_END\lLOOP:0: B:1:0x000c\-\>B:2:0x000e\l|java.lang.Object r5 = r6.invoke(r5, java.lang.Long.valueOf(r2))\lr1++\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x001b|RETURN\l|return r5\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final R kotlin.collections.ArraysKt___ArraysKt.fold((r4v0 long[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 R A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 ? I:kotlin.jvm.functions.Function2\<? super R, ? super java.lang.Long, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lJADX WARNING: type inference failed for: r6v0, types: [java.lang.Object, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2\<? super R, ? super java.lang.Long, ? extends R\>]\lUnknown variable types count: 1\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<R:, Ljava\/lang\/Object;, \>([JTR;, Lkotlin\/jvm\/functions\/Function2\<, \-TR;\-, Ljava\/lang\/Long;, +TR;\>;)TR;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_1;
Node_4 -> Node_3;
}

