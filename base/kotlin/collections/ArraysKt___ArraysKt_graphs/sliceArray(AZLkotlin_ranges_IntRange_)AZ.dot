digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sliceArray([ZLkotlin\/ranges\/IntRange;)[Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"indices\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r2.isEmpty() == false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010}"];
Node_3 [shape=record,label="{3\:\ 0x0013|RETURN\l|return new boolean[0]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|boolean[] r1 = java.util.Arrays.copyOfRange(r1, r2.getStart().intValue(), r2.getEndInclusive().intValue() + 1)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r1, \"java.util.Arrays.copyOfRâ€¦this, fromIndex, toIndex)\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public static final boolean[] kotlin.collections.ArraysKt___ArraysKt.sliceArray((r1v0 boolean[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

