digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.lastOrNull([DLkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r4 I:double[]) kotlin.collections.ArraysKt.getIndices(double[]):kotlin.ranges.IntRange type: STATIC \l0x000e: CHECK_CAST  (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Iterable) kotlin.collections.CollectionsKt.reversed(java.lang.Iterable):java.util.List type: STATIC \l0x0014: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003f \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:?[OBJECT, ARRAY]) \l0x0024: INVOKE  (r1 I:int) = (r1 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l0x0028: AGET  (r1 I:?[long, double]) = (r4 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x002a: INVOKE  (r3 I:java.lang.Double) = (r1 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x002e: INVOKE  (r3 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x003a|0x003a: INVOKE  (r4 I:java.lang.Double) = (r1 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: RETURN  (r4 I:java.lang.Double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: RETURN  (r4 I:java.lang.Double) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Double kotlin.collections.ArraysKt___ArraysKt.lastOrNull((r4 I:double[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.lang.Double, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([D, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Double;, Ljava\/lang\/Boolean;, \>;), Ljava\/lang\/Double;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
}

