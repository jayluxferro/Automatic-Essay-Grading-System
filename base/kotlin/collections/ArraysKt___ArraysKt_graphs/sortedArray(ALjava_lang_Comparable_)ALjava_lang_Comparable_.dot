digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sortedArray([Ljava\/lang\/Comparable;)[Ljava\/lang\/Comparable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r1.length != 0) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v8 boolean), (r0v9 boolean) binds: [B:3:0x000a, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\l|return r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|java.lang.Object[] r1 = java.util.Arrays.copyOf(r1, r1.length)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r1, \"java.util.Arrays.copyOf(this, size)\")\ljava.lang.Comparable[] r1 = (java.lang.Comparable[]) r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|if (r1 == null) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|kotlin.collections.ArraysKt.sort((T[]) (java.lang.Object[]) r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023}"];
Node_11 [shape=record,label="{11\:\ 0x002a|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.Array\<kotlin.Any?\>\")\l}"];
MethodNode[shape=record,label="{public static final T[] kotlin.collections.ArraysKt___ArraysKt.sortedArray((r1v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Comparable\<, \-TT;\>;\>([TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

