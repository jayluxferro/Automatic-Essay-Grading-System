digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.asSequence([Ljava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_1127541570 {
label = "R(2:0|(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\l}"];
subgraph cluster_Region_43234506 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_876074088 {
label = "IF [B:4:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r1.length == 0) == true) goto L_0x000d\l}"];
subgraph cluster_Region_1054849979 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\l|return kotlin.sequences.SequencesKt.emptySequence()\l}"];
}
}
subgraph cluster_Region_1515534809 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\l|return new kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$1(r1)\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0012}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.collections.ArraysKt___ArraysKt.asSequence((r1v0 T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;), Lkotlin\/sequences\/Sequence\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

