digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.slice([BLkotlin\/ranges\/IntRange;)Ljava\/util\/List;" {
subgraph cluster_Region_957868808 {
label = "R(2:0|(2:(1:3)|(2:4|5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"indices\")\l}"];
subgraph cluster_Region_987524297 {
label = "R(2:(1:3)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1015406122 {
label = "IF [B:1:0x000e] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r2.isEmpty() == true) goto L_0x0010\l}"];
subgraph cluster_Region_201523201 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0014|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
}
}
subgraph cluster_Region_2000721124 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|byte[] byte[] r1 = java.util.Arrays.copyOfRange(r1, r2.getStart().intValue(), r2.getEndInclusive().intValue() + 1)\lkotlin.jvm.internal.Intrinsics.checkExpressionValueIsNotNull(r1, \"java.util.Arrays.copyOfRâ€¦this, fromIndex, toIndex)\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|RETURN\l|return kotlin.collections.ArraysKt.asList(r1)\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0010}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Byte\> kotlin.collections.ArraysKt___ArraysKt.slice((r1v0 byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.ranges.IntRange A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([B, Lkotlin\/ranges\/IntRange;, ), Ljava\/util\/List\<, Ljava\/lang\/Byte;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_4 -> Node_5;
Node_2 -> Node_3;
}

