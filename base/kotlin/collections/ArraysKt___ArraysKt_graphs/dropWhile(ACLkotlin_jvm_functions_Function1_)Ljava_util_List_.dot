digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.dropWhile([CLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"predicate\")\ljava.util.ArrayList r0 = new java.util.ArrayList()\lint r1 = r6.length\lr2 = 0\lr3 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|LOOP_START\lPHI: r2 r3 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:8:0x0038] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:0:0x0000, B:8:0x0038] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:8:0x0038\l|if (r2 \>= r1) goto L_0x003b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|char r4 = r6[r2]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if (r3 == false) goto L_0x0020\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|r0.add(java.lang.Character.valueOf(r4))\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020}"];
Node_6 [shape=record,label="{6\:\ 0x002e|if (r7.invoke(java.lang.Character.valueOf(r4)).booleanValue() != false) goto L_0x0038\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|r0.add(java.lang.Character.valueOf(r4))\lr3 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|LOOP_END\lPHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v4 boolean), (r3v1 boolean) binds: [B:14:0x0038, B:12:0x0038, B:13:0x0038] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0012\-\>B:8:0x0038\l|int r2 = r2 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b}"];
Node_10 [shape=record,label="{10\:\ 0x003d|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Character\> kotlin.collections.ArraysKt___ArraysKt.dropWhile((r6v0 char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([C, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/lang\/Character;, Ljava\/lang\/Boolean;, \>;), Ljava\/util\/List\<, Ljava\/lang\/Character;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_12;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_14 -> Node_8;
}

