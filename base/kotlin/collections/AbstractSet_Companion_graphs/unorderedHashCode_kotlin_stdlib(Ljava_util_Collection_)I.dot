digraph "CFG forkotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"c\")\ljava.util.Iterator r4 = r4.iterator()\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:7:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:7:0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r4.hasNext() == false) goto L_0x001f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|java.lang.Object r2 = r4.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (r2 == null) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|int r2 = r2.hashCode()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|r2 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_END\lPHI: r2 \l  PHI: (r2v2 int) = (r2v3 int), (r2v4 int) binds: [B:10:0x001d, B:11:0x001d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:7:0x001d\l|int r1 = r1 + r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|RETURN\l|return r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib((r3v0 'this' kotlin.collections.AbstractSet$Companion A[IMMUTABLE_TYPE, THIS]), (r4v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_10;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

