digraph "CFG forkotlin.collections.AbstractList.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_4913795 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1337788853 {
label = "R(2:(1:2)|(1:(2:(1:5)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_689329824 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3 == r2) goto L_0x0005\l}"];
subgraph cluster_Region_1432691669 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_44844312 {
label = "R(1:(2:(1:5)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_628819033 {
label = "R(2:(1:5)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1053025536 {
label = "IF [B:4:0x0009] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|if ((r3 instanceof java.util.List) == false) goto L_0x000b\l}"];
subgraph cluster_Region_1111753350 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_572525395 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|return Companion.orderedEquals$kotlin_stdlib(r2, (java.util.Collection) r3)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000d}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractList.equals((r2v0 'this' kotlin.collections.AbstractList A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
}

