digraph "CFG forkotlin.collections.AbstractList.indexOf(Ljava\/lang\/Object;)I" {
subgraph cluster_Region_1920233857 {
label = "R(3:0|(1:(2:(1:9)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = iterator()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_2119081863 {
label = "LOOP:0: (1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|if (r0.hasNext() != false) goto L_0x000b\l}"];
subgraph cluster_Region_477950714 {
label = "R(1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1050941621 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1158661497 {
label = "IF [B:4:0x0013] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|if (kotlin.jvm.internal.Intrinsics.areEqual(r2, r4) == true) goto L_0x001a\l}"];
subgraph cluster_Region_1215439643 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_1355561079 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x0016\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0019|SYNTHETIC\lRETURN\lORIG_RETURN\l|return \-1\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0005|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:0:0x0000, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x0016\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000b}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int kotlin.collections.AbstractList.indexOf((r3v0 'this' kotlin.collections.AbstractList A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_9;
Node_8 -> Node_6;
}

