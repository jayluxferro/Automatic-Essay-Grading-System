digraph "CFG forkotlin.collections.AbstractIterator.tryToComputeNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:kotlin.collections.State) =  kotlin.collections.State.Failed kotlin.collections.State \l0x0002: IPUT  \l  (r0 I:kotlin.collections.State)\l  (r2 I:kotlin.collections.AbstractIterator)\l kotlin.collections.AbstractIterator.state kotlin.collections.State \l0x0004: INVOKE  (r2 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.computeNext():void type: VIRTUAL \l0x0007: IGET  (r0 I:kotlin.collections.State) = (r2 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.state kotlin.collections.State \l0x0009: SGET  (r1 I:kotlin.collections.State) =  kotlin.collections.State.Ready kotlin.collections.State \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlin.collections.AbstractIterator.tryToComputeNext((r2 'this' I:kotlin.collections.AbstractIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

