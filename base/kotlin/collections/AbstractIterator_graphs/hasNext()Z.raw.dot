digraph "CFG forkotlin.collections.AbstractIterator.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:kotlin.collections.State) = (r4 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.state kotlin.collections.State \l0x0002: SGET  (r1 I:kotlin.collections.State) =  kotlin.collections.State.Failed kotlin.collections.State \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r0 I:kotlin.collections.State) = (r4 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.state kotlin.collections.State \l0x000f: SGET  (r1 I:int[]) =  kotlin.collections.AbstractIterator.WhenMappings.$EnumSwitchMapping$0 int[] \l0x0011: INVOKE  (r0 I:int) = (r0 I:kotlin.collections.State) kotlin.collections.State.ordinal():int type: VIRTUAL \l0x0015: AGET  (r0 I:?[int, float]) = (r1 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2] t:[0x0020, 0x001f] \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: INVOKE  (r2 I:boolean) = (r4 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.tryToComputeNext():boolean type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: RETURN  (r2 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: CONST_STR  (r1 I:java.lang.String) =  \"Failed requirement.\" \l0x0025: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0029: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x002c: CHECK_CAST  (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractIterator.hasNext((r4 'this' I:kotlin.collections.AbstractIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

