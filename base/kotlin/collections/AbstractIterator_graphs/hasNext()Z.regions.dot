digraph "CFG forkotlin.collections.AbstractIterator.hasNext()Z" {
subgraph cluster_Region_1891959181 {
label = "R(1:(1:6)(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1578075446 {
label = "IF [B:4:0x000b] THEN: R(1:6) ELSE: R(1:10)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r0 \l  PHI: (r0v1 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r4.state != kotlin.collections.State.Failed) == true) goto L_0x000d\l}"];
subgraph cluster_Region_1693593168 {
label = "R(1:6)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_111784441 {
label = "Switch: 2, default: R(1:12)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|switch(r4.state) \{\l    case kotlin.collections.State.Done :kotlin.collections.State: goto L_0x0020;\l    case kotlin.collections.State.Ready :kotlin.collections.State: goto L_0x001f;\l    default: goto L_0x001a;\l\}\l}"];
subgraph cluster_Region_1589121480 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
subgraph cluster_Region_2092701980 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
}
subgraph cluster_Region_155789429 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return tryToComputeNext()\l}"];
}
}
}
subgraph cluster_Region_1109681884 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002e|throw new java.lang.IllegalArgumentException(\"Failed requirement.\".toString())\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0006}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000a}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0021}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractIterator.hasNext((r4v0 'this' kotlin.collections.AbstractIterator A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_6 -> Node_11;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_12;
Node_9 -> Node_10;
}

