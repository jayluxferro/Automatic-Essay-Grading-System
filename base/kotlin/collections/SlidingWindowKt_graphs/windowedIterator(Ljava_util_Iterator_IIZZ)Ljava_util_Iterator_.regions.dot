digraph "CFG forkotlin.collections.SlidingWindowKt.windowedIterator(Ljava\/util\/Iterator;IIZZ)Ljava\/util\/Iterator;" {
subgraph cluster_Region_986598760 {
label = "R(2:0|(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"iterator\")\l}"];
subgraph cluster_Region_1334711639 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_481107563 {
label = "IF [B:1:0x0009] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r8.hasNext() == false) goto L_0x000b\l}"];
subgraph cluster_Region_2105171700 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|return kotlin.collections.EmptyIterator.INSTANCE\l}"];
}
}
subgraph cluster_Region_899152190 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0022|RETURN\l|return kotlin.coroutines.experimental.SequenceBuilderKt.buildIterator(new kotlin.collections.SlidingWindowKt$windowedIterator$1(r10, r9, r8, r12, r11, (kotlin.coroutines.experimental.Continuation) null))\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x000b}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
MethodNode[shape=record,label="{public static final java.util.Iterator\<java.util.List\<T\>\> kotlin.collections.SlidingWindowKt.windowedIterator((r8v0 java.util.Iterator\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Iterator\<, +TT;\>;IIZZ), Ljava\/util\/Iterator\<, Ljava\/util\/List\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
}

