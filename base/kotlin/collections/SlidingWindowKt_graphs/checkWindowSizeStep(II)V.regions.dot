digraph "CFG forkotlin.collections.SlidingWindowKt.checkWindowSizeStep(II)V" {
subgraph cluster_Region_262124214 {
label = "R(1:(1:(2:(1:6)(1:7)|9))) | DECL_VAR: java.lang.String null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1676286285 {
label = "R(1:(2:(1:6)(1:7)|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2044824204 {
label = "IF [B:4:0x0007] THEN: R(2:(1:6)(1:7)|9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r0 \l  PHI: (r0v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r2 \> 0 && r3 \> 0) == false) goto L_0x0009\l}"];
subgraph cluster_Region_2074417839 {
label = "R(2:(1:6)(1:7)|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_165485935 {
label = "IF [B:5:0x0009] THEN: R(1:6) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r2 != r3) goto L_0x000b\l}"];
subgraph cluster_Region_801751020 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|java.lang.String r2 = \"Both size \" + r2 + \" and step \" + r3 + \" must be greater than zero.\"\l}"];
}
subgraph cluster_Region_1076482427 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002a|java.lang.String r2 = \"size \" + r2 + \" must be greater than zero.\"\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x004b|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|REMOVE\lADDED_TO_REGION\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0040|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v4 java.lang.String), (r2v7 java.lang.String) binds: [B:7:0x002a, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x004c}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.SlidingWindowKt.checkWindowSizeStep((r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_8 -> Node_9;
}

