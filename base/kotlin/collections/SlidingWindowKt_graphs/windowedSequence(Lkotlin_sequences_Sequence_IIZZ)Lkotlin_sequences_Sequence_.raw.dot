digraph "CFG forkotlin.collections.SlidingWindowKt.windowedSequence(Lkotlin\/sequences\/Sequence;IIZZ)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r8 I:int), (r9 I:int) kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void type: STATIC \l0x0008: NEW_INSTANCE  (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) =  kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1 \l0x000a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x000b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: INVOKE  \l  (r1 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1)\l  (r2 I:kotlin.sequences.Sequence)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l  (r6 I:boolean)\l kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.\<init\>(kotlin.sequences.Sequence, int, int, boolean, boolean):void type: DIRECT \l0x0013: CHECK_CAST  (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: RETURN  (r0 I:kotlin.sequences.Sequence\<java.util.List\<T\>\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<java.util.List\<T\>\> kotlin.collections.SlidingWindowKt.windowedSequence((r7 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Lkotlin\/sequences\/Sequence\<, +TT;\>;IIZZ), Lkotlin\/sequences\/Sequence\<, Ljava\/util\/List\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

