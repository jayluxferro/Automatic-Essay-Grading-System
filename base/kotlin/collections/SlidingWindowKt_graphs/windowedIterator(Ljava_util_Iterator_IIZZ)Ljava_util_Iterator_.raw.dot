digraph "CFG forkotlin.collections.SlidingWindowKt.windowedIterator(Ljava\/util\/Iterator;IIZZ)Ljava\/util\/Iterator;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"iterator\" \l0x0002: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r0 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: SGET  (r8 I:kotlin.collections.EmptyIterator) =  kotlin.collections.EmptyIterator.INSTANCE kotlin.collections.EmptyIterator \l0x000d: CHECK_CAST  (r8 I:java.util.Iterator) = (java.util.Iterator) (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r8 I:java.util.Iterator\<java.util.List\<T\>\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: NEW_INSTANCE  (r7 I:kotlin.collections.SlidingWindowKt$windowedIterator$1) =  kotlin.collections.SlidingWindowKt$windowedIterator$1 \l0x0012: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0014: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0017: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: INVOKE  \l  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:java.util.Iterator)\l  (r4 I:boolean)\l  (r5 I:boolean)\l  (r6 I:kotlin.coroutines.experimental.Continuation)\l kotlin.collections.SlidingWindowKt$windowedIterator$1.\<init\>(int, int, java.util.Iterator, boolean, boolean, kotlin.coroutines.experimental.Continuation):void type: DIRECT \l0x001c: CHECK_CAST  (r7 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r7 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r8 I:java.util.Iterator) = (r7 I:kotlin.jvm.functions.Function2) kotlin.coroutines.experimental.SequenceBuilderKt.buildIterator(kotlin.jvm.functions.Function2):java.util.Iterator type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: RETURN  (r8 I:java.util.Iterator\<java.util.List\<T\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Iterator\<java.util.List\<T\>\> kotlin.collections.SlidingWindowKt.windowedIterator((r8 I:java.util.Iterator\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Iterator\<, +TT;\>;IIZZ), Ljava\/util\/Iterator\<, Ljava\/util\/List\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

