digraph "CFG forkotlin.collections.SlidingWindowKt.checkWindowSizeStep(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 \<= 0) goto L_0x0006\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 \<= 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r0 \l  PHI: (r0v0 boolean) = (r0v3 boolean), (r0v4 boolean) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L_0x004c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r2 == r3) goto L_0x002a\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Both size \")\lr0.append(r2)\lr0.append(\" and step \")\lr0.append(r3)\lr0.append(\" must be greater than zero.\")\ljava.lang.String r2 = r0.toString()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"size \")\lr3.append(r2)\lr3.append(\" must be greater than zero.\")\ljava.lang.String r2 = r3.toString()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v4 java.lang.String), (r2v7 java.lang.String) binds: [B:7:0x002a, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.SlidingWindowKt.checkWindowSizeStep((r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

