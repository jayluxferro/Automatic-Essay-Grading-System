digraph "CFG forkotlin.collections.MapWithDefaultImpl.getOrImplicitDefault(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.Map) = (r2 I:kotlin.collections.MapWithDefaultImpl) kotlin.collections.MapWithDefaultImpl.getMap():java.util.Map type: VIRTUAL \l0x0004: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r0 I:kotlin.jvm.functions.Function1\<K, V\>) = (r2 I:kotlin.collections.MapWithDefaultImpl) kotlin.collections.MapWithDefaultImpl.default kotlin.jvm.functions.Function1 \l0x0012: INVOKE  (r1 I:java.lang.Object) = \l  (r0 I:kotlin.jvm.functions.Function1)\l  (r3 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r1 I:V) \l}"];
MethodNode[shape=record,label="{public V kotlin.collections.MapWithDefaultImpl.getOrImplicitDefault((r2 'this' I:kotlin.collections.MapWithDefaultImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:K A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(TK;)TV;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

