digraph "CFG forkotlin.collections.AbstractList.Companion.orderedEquals$kotlin_stdlib(Ljava\/util\/Collection;Ljava\/util\/Collection;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"c\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"other\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|if (r5.size() == r6.size()) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|java.util.Iterator r6 = r6.iterator()\ljava.util.Iterator r5 = r5.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|LOOP_START\lLOOP:0: B:4:0x001e\-\>B:7:0x0032\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|if (r5.hasNext() == false) goto L_0x0035\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025}"];
Node_7 [shape=record,label="{7\:\ 0x0032|LOOP_END\lLOOP:0: B:4:0x001e\-\>B:7:0x0032\l|if ((kotlin.jvm.internal.Intrinsics.areEqual((java.lang.Object) r5.next(), (java.lang.Object) r6.next()) ^ true) == false) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|RETURN\l|return true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.AbstractList.Companion.orderedEquals$kotlin_stdlib((r4v0 'this' kotlin.collections.AbstractList$Companion A[IMMUTABLE_TYPE, THIS]), (r5v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;, Ljava\/util\/Collection\<, *\>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_10[style=dashed];
Node_10 -> Node_8;
Node_11 -> Node_9;
}

