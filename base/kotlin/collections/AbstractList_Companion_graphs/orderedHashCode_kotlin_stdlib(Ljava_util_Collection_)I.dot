digraph "CFG forkotlin.collections.AbstractList.Companion.orderedHashCode$kotlin_stdlib(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"c\")\ljava.util.Iterator r3 = r3.iterator()\lr0 = 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v4 int) binds: [B:0:0x0000, B:7:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:7:0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|if (r3.hasNext() == false) goto L_0x0020\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|java.lang.Object r1 = r3.next()\lint r0 = r0 * 31\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if (r1 == null) goto L_0x001d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|int r1 = r1.hashCode()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|r1 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|LOOP_END\lPHI: r1 \l  PHI: (r1v2 int) = (r1v3 int), (r1v4 int) binds: [B:10:0x001e, B:11:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:7:0x001e\l|int r0 = r0 + r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.AbstractList.Companion.orderedHashCode$kotlin_stdlib((r2v0 'this' kotlin.collections.AbstractList$Companion A[IMMUTABLE_TYPE, THIS]), (r3v0 java.util.Collection\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, *\>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_10;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

