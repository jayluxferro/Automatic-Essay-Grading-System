digraph "CFG forkotlin.collections.AbstractCollection.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0006: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r2 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r2 I:java.lang.Object[]) kotlin.jvm.internal.CollectionToArray.toArray(java.util.Collection, java.lang.Object[]):java.lang.Object[] type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: RETURN  (r2 I:T[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: NEW_INSTANCE  (r2 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0011: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x0013: INVOKE  (r2 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T[] kotlin.collections.AbstractCollection.toArray((r1 'this' I:kotlin.collections.AbstractCollection A[IMMUTABLE_TYPE, THIS]), (r2 I:T[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>([TT;)[TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

