digraph "CFG forkotlin.collections.AbstractCollection.containsAll(Ljava\/util\/Collection;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CHECK_CAST  (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0008: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) java.util.Collection.isEmpty():boolean type: INTERFACE \l0x000e: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r0 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0020: INVOKE  (r0 I:boolean) = \l  (r2 I:kotlin.collections.AbstractCollection)\l  (r0 I:java.lang.Object)\l kotlin.collections.AbstractCollection.contains(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0016 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractCollection.containsAll((r2 'this' I:kotlin.collections.AbstractCollection A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.Collection\<? extends java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, +, Ljava\/lang\/Object;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
}

