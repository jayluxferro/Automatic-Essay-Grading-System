digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.binarySearch(Ljava\/util\/List;Ljava\/lang\/Object;Ljava\/util\/Comparator;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparator\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000e: INVOKE  (r0 I:int), (r5 I:int), (r6 I:int) kotlin.collections.CollectionsKt__CollectionsKt.rangeCheck$CollectionsKt__CollectionsKt(int, int, int):void type: STATIC \l0x0011: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:8:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: ARITH  (r0 I:int) = (r5 I:int) + (r6 I:int) \l0x0017: ARITH  (r0 I:int) = (r0 I:int) \>\>\> (1 int) \l0x0019: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001d: INVOKE  (r1 I:int) = \l  (r4 I:java.util.Comparator)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Comparator.compare(java.lang.Object, java.lang.Object):int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0025: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x002b: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0030: NEG  (r2 I:int) = (r5 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt__CollectionsKt.binarySearch((r2 I:java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Comparator\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;TT;, Ljava\/util\/Comparator\<, \-TT;\>;II)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_8 -> Node_9;
}

