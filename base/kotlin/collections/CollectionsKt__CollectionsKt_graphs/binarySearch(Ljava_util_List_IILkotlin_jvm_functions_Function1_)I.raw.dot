digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.binarySearch(Ljava\/util\/List;IILkotlin\/jvm\/functions\/Function1;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparison\" \l0x0007: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000e: INVOKE  (r0 I:int), (r3 I:int), (r4 I:int) kotlin.collections.CollectionsKt__CollectionsKt.rangeCheck$CollectionsKt__CollectionsKt(int, int, int):void type: STATIC \l0x0011: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:8:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: ARITH  (r0 I:int) = (r3 I:int) + (r4 I:int) \l0x0017: ARITH  (r0 I:int) = (r0 I:int) \>\>\> (1 int) \l0x0019: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001d: INVOKE  (r1 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0021: CHECK_CAST  (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:?[OBJECT, ARRAY]) \l0x0023: INVOKE  (r1 I:int) = (r1 I:java.lang.Number) java.lang.Number.intValue():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x002b: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0033 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0031: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0036: NEG  (r2 I:int) = (r3 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt__CollectionsKt.binarySearch((r2 I:java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Integer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;II, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Integer;, \>;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_8 -> Node_9;
}

