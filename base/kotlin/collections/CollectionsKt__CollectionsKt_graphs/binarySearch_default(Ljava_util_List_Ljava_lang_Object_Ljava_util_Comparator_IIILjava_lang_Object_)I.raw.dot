digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.binarySearch$default(Ljava\/util\/List;Ljava\/lang\/Object;Ljava\/util\/Comparator;IIILjava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r4 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:int) = \l  (r0 I:java.util.List)\l  (r1 I:java.lang.Object)\l  (r2 I:java.util.Comparator)\l  (r3 I:int)\l  (r4 I:int)\l kotlin.collections.CollectionsKt.binarySearch(java.util.List, java.lang.Object, java.util.Comparator, int, int):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static \/* bridge *\/ \/* synthetic *\/ int kotlin.collections.CollectionsKt__CollectionsKt.binarySearch$default((r0 I:java.util.List A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.util.Comparator A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

