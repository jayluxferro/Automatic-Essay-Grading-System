digraph "CFG forkotlin.collections.MapsKt__MapsKt.toMap(Ljava\/lang\/Iterable;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0048 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x000a: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:int) = (r0 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1] t:[0x0043, 0x0027] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0015: INVOKE  (r0 I:int) = (r0 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0019: INVOKE  (r0 I:int) = (r0 I:int) kotlin.collections.MapsKt.mapCapacity(int):int type: STATIC \l0x001d: INVOKE  (r1 I:java.util.LinkedHashMap), (r0 I:int) java.util.LinkedHashMap.\<init\>(int):void type: DIRECT \l0x0020: CHECK_CAST  (r1 I:java.util.Map) = (java.util.Map) (r1 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  (r2 I:java.util.Map) = (r2 I:java.lang.Iterable), (r1 I:java.util.Map) kotlin.collections.MapsKt.toMap(java.lang.Iterable, java.util.Map):java.util.Map type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) java.util.List \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0035 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: CHECK_CAST  (r2 I:java.util.List) = (java.util.List) (r2 I:?[OBJECT, ARRAY]) \l0x002d: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: CHECK_CAST  (r2 I:kotlin.Pair) = (kotlin.Pair) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0039: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: INVOKE  (r2 I:java.util.Map) = (r2 I:kotlin.Pair) kotlin.collections.MapsKt.mapOf(kotlin.Pair):java.util.Map type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: INVOKE  (r2 I:java.util.Map) =  kotlin.collections.MapsKt.emptyMap():java.util.Map type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: RETURN  (r2 I:java.util.Map\<K, V\>) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x004a: INVOKE  (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.\<init\>():void type: DIRECT \l0x004d: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  (r2 I:java.util.Map) = (r2 I:java.lang.Iterable), (r0 I:java.util.Map) kotlin.collections.MapsKt.toMap(java.lang.Iterable, java.util.Map):java.util.Map type: STATIC \l0x0053: INVOKE  (r2 I:java.util.Map) = (r2 I:java.util.Map) kotlin.collections.MapsKt.optimizeReadOnlyMap(java.util.Map):java.util.Map type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|0x0057: RETURN  (r2 I:java.util.Map\<K, V\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.collections.MapsKt__MapsKt.toMap((r2 I:java.lang.Iterable\<? extends kotlin.Pair\<? extends K, ? extends V\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +, Lkotlin\/Pair\<, +TK;+TV;\>;\>;), Ljava\/util\/Map\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_3 -> Node_11;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

