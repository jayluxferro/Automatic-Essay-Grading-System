digraph "CFG forkotlin.collections.MapsKt__MapsKt.plus(Ljava\/util\/Map;[Lkotlin\/Pair;)Ljava\/util\/Map;" {
subgraph cluster_Region_741604603 {
label = "R(2:0|(2:(1:5)|(2:3|4)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r1, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"pairs\")\l}"];
subgraph cluster_Region_596551083 {
label = "R(2:(1:5)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_391701235 {
label = "IF [B:1:0x000e] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r1.isEmpty() == true) goto L_0x0010\l}"];
subgraph cluster_Region_693534437 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.MapsKt.toMap(r2)\l}"];
}
}
subgraph cluster_Region_1907302046 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0015|java.util.Map java.util.Map\<K, V\> r1 = new java.util.LinkedHashMap\<\>(r1)\lkotlin.collections.MapsKt.putAll(r1, r2)\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r1\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0010}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.collections.MapsKt__MapsKt.plus((r1v0 java.util.Map\<? extends K, ? extends V\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.Pair\<? extends K, ? extends V\>[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Map\<, +TK;+TV;\>;[, Lkotlin\/Pair\<, +TK;+TV;\>;), Ljava\/util\/Map\<, TK;TV;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_2 -> Node_5;
}

