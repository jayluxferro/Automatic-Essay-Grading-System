digraph "CFG forkotlin.collections.MapsKt___MapsKt.toList(Ljava\/util\/Map;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r0 I:int) = (r4 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r4 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r4 I:java.util.List\<kotlin.Pair\<K, V\>\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r0 I:java.util.Set) = (r4 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0014: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l0x0018: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r4 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: RETURN  (r4 I:java.util.List\<kotlin.Pair\<K, V\>\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: NEW_INSTANCE  (r4 I:kotlin.Pair) =  kotlin.Pair \l0x0031: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0035: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0039: INVOKE  \l  (r4 I:kotlin.Pair)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT \l0x003c: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Object) kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: RETURN  (r4 I:java.util.List\<kotlin.Pair\<K, V\>\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x0043: INVOKE  (r4 I:int) = (r4 I:java.util.Map) java.util.Map.size():int type: INTERFACE \l0x0047: INVOKE  (r2 I:java.util.ArrayList), (r4 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x004a: NEW_INSTANCE  (r4 I:kotlin.Pair) =  kotlin.Pair \l0x004c: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0050: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0054: INVOKE  \l  (r4 I:kotlin.Pair)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT \l0x0057: INVOKE  (r2 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x005e: CHECK_CAST  (r4 I:java.util.Map$Entry) = (java.util.Map$Entry) (r4 I:?[OBJECT, ARRAY]) \l0x0060: NEW_INSTANCE  (r1 I:kotlin.Pair) =  kotlin.Pair \l0x0062: INVOKE  (r3 I:java.lang.Object) = (r4 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0066: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x006a: INVOKE  \l  (r1 I:kotlin.Pair)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT \l0x006d: INVOKE  (r2 I:java.util.ArrayList), (r1 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0070: INVOKE  (r4 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0074|0x0074: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0076|0x0076: CHECK_CAST  (r2 I:java.util.List) = (java.util.List) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0078|0x0078: RETURN  (r2 I:java.util.List\<kotlin.Pair\<K, V\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<K, V\>\> kotlin.collections.MapsKt___MapsKt.toList((r4 I:java.util.Map\<? extends K, ? extends V\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<K:, Ljava\/lang\/Object;, V:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Map\<, +TK;+TV;\>;), Ljava\/util\/List\<, Lkotlin\/Pair\<, TK;TV;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_13;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_16;
}

