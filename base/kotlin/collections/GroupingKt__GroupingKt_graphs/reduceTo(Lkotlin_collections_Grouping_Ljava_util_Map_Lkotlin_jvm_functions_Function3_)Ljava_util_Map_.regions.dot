digraph "CFG forkotlin.collections.GroupingKt__GroupingKt.reduceTo(Lkotlin\/collections\/Grouping;Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function3;)Ljava\/util\/Map;" {
subgraph cluster_Region_1710366363 {
label = "R(3:0|(3:3|(1:10)(0)|11)|12)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, com.google.firebase.analytics.FirebaseAnalytics.Param.DESTINATION)\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, \"operation\")\ljava.util.Iterator java.util.Iterator\<T\> r0 = r5.sourceIterator()\l}"];
subgraph cluster_LoopRegion_1567712441 {
label = "LOOP:0: (3:3|(1:10)(0)|11)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0017|if (r0.hasNext() != false) goto L_0x0019\l}"];
subgraph cluster_Region_1956650288 {
label = "R(3:3|(1:10)(0)|11)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0019|java.lang.Object T r1 = r0.next()\ljava.lang.Object java.lang.Object r2 = r5.keyOf(r1)\ljava.lang.Object java.lang.Object r3 = r6.get(r2)\l}"];
subgraph cluster_IfRegion_1517029693 {
label = "IF [B:9:0x0030] THEN: R(1:10) ELSE: R(0)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0030|PHI: r4 \l  PHI: (r4v0 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3 == null && !r6.containsKey(r2)) != true) goto L_0x0033\l}"];
subgraph cluster_Region_799001747 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0033|java.lang.Object r1 = r7.invoke(r2, r3, r1)\l}"];
}
subgraph cluster_Region_1295832416 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_11 [shape=record,label="{11\:\ 0x0037|LOOP_END\lPHI: r1 \l  PHI: (r1v2 T) = (r1v1 T), (r1v3 T) binds: [B:15:0x0037, B:14:0x0037] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0013\-\>B:11:0x0037\l|r6.put(r2, r1)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x003b|RETURN\l|return r6\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0013|LOOP_START\lLOOP:0: B:1:0x0013\-\>B:11:0x0037\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0025}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0027}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x002b|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002f}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x003b|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0037|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0037|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final M kotlin.collections.GroupingKt__GroupingKt.reduceTo((r5v0 kotlin.collections.Grouping\<T, ? extends K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 M A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 ? I:kotlin.jvm.functions.Function3\<? super K, ? super S, ? super T, ? extends S\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lJADX WARNING: type inference failed for: r7v0, types: [kotlin.jvm.functions.Function3\<? super K, ? super S, ? super T, ? extends S\>, kotlin.jvm.functions.Function3, java.lang.Object]\lUnknown variable types count: 1\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<S:, Ljava\/lang\/Object;, T::TS;K:, Ljava\/lang\/Object;, M::, Ljava\/util\/Map\<, \-TK;TS;\>;\>(, Lkotlin\/collections\/Grouping\<, TT;+TK;\>;TM;, Lkotlin\/jvm\/functions\/Function3\<, \-TK;\-TS;\-TT;+TS;\>;)TM;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_13[style=dashed];
Node_3 -> Node_4;
Node_9 -> Node_10;
Node_9 -> Node_15[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_13 -> Node_12;
Node_14 -> Node_11;
Node_15 -> Node_11;
}

