digraph "CFG forkotlin.collections.GroupingKt__GroupingKt.fold(Lkotlin\/collections\/Grouping;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x000c: INVOKE  (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.\<init\>():void type: DIRECT \l0x000f: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:java.util.Iterator) = (r6 I:kotlin.collections.Grouping) kotlin.collections.Grouping.sourceIterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003d \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001f: INVOKE  (r3 I:java.lang.Object) = (r6 I:kotlin.collections.Grouping), (r2 I:java.lang.Object) kotlin.collections.Grouping.keyOf(java.lang.Object):java.lang.Object type: INTERFACE \l0x0023: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: INVOKE  (r5 I:boolean) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r2 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function2)\l  (r4 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0039: INVOKE  \l  (r0 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: RETURN  (r0 I:java.util.Map\<K, R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, R\> kotlin.collections.GroupingKt__GroupingKt.fold((r6 I:kotlin.collections.Grouping\<T, ? extends K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:R A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function2\<? super R, ? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, K:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Lkotlin\/collections\/Grouping\<, TT;+TK;\>;TR;, Lkotlin\/jvm\/functions\/Function2\<, \-TR;\-TT;+TR;\>;), Ljava\/util\/Map\<, TK;TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

