digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.sumOfShort(Ljava\/lang\/Iterable;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0009: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r1 I:short) = (r1 I:java.lang.Number) java.lang.Number.shortValue():short type: VIRTUAL \l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.sumOfShort((r2 I:java.lang.Iterable\<java.lang.Short\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Iterable\<, Ljava\/lang\/Short;, \>;)I]\}], Annotation[BUILD, kotlin.jvm.JvmName, \{name=sumOfShort\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

