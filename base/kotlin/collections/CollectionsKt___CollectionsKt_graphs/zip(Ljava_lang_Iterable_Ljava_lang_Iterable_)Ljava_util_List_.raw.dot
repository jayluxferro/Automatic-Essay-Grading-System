digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.zip(Ljava\/lang\/Iterable;Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r3 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x000e: INVOKE  (r1 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0012: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0014: INVOKE  (r3 I:int) = (r3 I:java.lang.Iterable), (r2 I:int) kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int type: STATIC \l0x0018: INVOKE  (r4 I:int) = (r4 I:java.lang.Iterable), (r2 I:int) kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int type: STATIC \l0x001c: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0020: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x0022: INVOKE  (r4 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0029|0x0029: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x002f|0x002f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0041 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0035: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0039: INVOKE  (r3 I:kotlin.Pair) = (r3 I:java.lang.Object), (r2 I:java.lang.Object) kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair type: STATIC \l0x003d: INVOKE  (r4 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0041|0x0041: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: RETURN  (r4 I:java.util.List\<kotlin.Pair\<T, R\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<T, R\>\> kotlin.collections.CollectionsKt___CollectionsKt.zip((r3 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Iterable\<? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;, Ljava\/lang\/Iterable\<, +TR;\>;), Ljava\/util\/List\<, Lkotlin\/Pair\<, TT;TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_7;
}

