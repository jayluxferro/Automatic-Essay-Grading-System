digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZ)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r9 I:int), (r10 I:int) kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void type: STATIC \l0x0008: INSTANCE_OF  (r0 I:boolean) = (r8 I:?[OBJECT, ARRAY]) java.util.RandomAccess \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INSTANCE_OF  (r0 I:boolean) = (r8 I:?[OBJECT, ARRAY]) java.util.List \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CHECK_CAST  (r8 I:java.util.List) = (java.util.List) (r8 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r0 I:int) = (r8 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0017: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x0019: ARITH  (r3 I:int) = (r0 I:int) + (r10 I:int) \l0x001b: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x001d: ARITH  (r3 I:int) = (r3 I:int) \/ (r10 I:int) \l0x001e: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0021: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x004a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: ARITH  (r4 I:int) = (r0 I:int) \- (r3 I:int) \l0x0026: INVOKE  (r4 I:int) = (r9 I:int), (r4 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: IF  (r4 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: NEW_INSTANCE  (r5 I:java.util.ArrayList) =  java.util.ArrayList \l0x0031: INVOKE  (r5 I:java.util.ArrayList), (r4 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0034: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: IF  (r6 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:13:0x0043 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: ARITH  (r7 I:int) = (r6 I:int) + (r3 I:int) \l0x0039: INVOKE  (r7 I:java.lang.Object) = (r8 I:java.util.List), (r7 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003d: INVOKE  (r5 I:java.util.ArrayList), (r7 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0040: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: CHECK_CAST  (r5 I:java.util.List) = (java.util.List) (r5 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  (r2 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0048: ARITH  (r3 I:int) = (r3 I:int) + (r10 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: CHECK_CAST  (r2 I:java.util.List) = (java.util.List) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: RETURN  (r2 I:java.util.List\<java.util.List\<T\>\>) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x004f: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0052: INVOKE  (r8 I:java.util.Iterator) = (r8 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0056: INVOKE  (r8 I:java.util.Iterator) = \l  (r8 I:java.util.Iterator)\l  (r9 I:int)\l  (r10 I:int)\l  (r11 I:boolean)\l  (r1 I:boolean)\l kotlin.collections.SlidingWindowKt.windowedIterator(java.util.Iterator, int, int, boolean, boolean):java.util.Iterator type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: INVOKE  (r9 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x005e|0x005e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x006a \l}"];
Node_19 [shape=record,label="{19\:\ 0x0060|0x0060: INVOKE  (r9 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0064: CHECK_CAST  (r9 I:java.util.List) = (java.util.List) (r9 I:?[OBJECT, ARRAY]) \l0x0066: INVOKE  (r0 I:java.util.ArrayList), (r9 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|0x006a: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006c|0x006c: RETURN  (r0 I:java.util.List\<java.util.List\<T\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.util.List\<T\>\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r8 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;IIZ), Ljava\/util\/List\<, Ljava\/util\/List\<, TT;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_14[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_5;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_17;
Node_20 -> Node_21;
}

