digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r8 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r5 I:int), (r6 I:int) kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void type: STATIC \l0x000d: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.RandomAccess \l0x000f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.List \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x001c: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x001e: ARITH  (r3 I:int) = (r0 I:int) + (r6 I:int) \l0x0020: ARITH  (r3 I:int) = (r3 I:int) \- (r1 I:int) \l0x0021: ARITH  (r3 I:int) = (r3 I:int) \/ (r6 I:int) \l0x0022: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0025: NEW_INSTANCE  (r1 I:kotlin.collections.MovingSubList) =  kotlin.collections.MovingSubList \l0x0027: INVOKE  \l  (r1 I:kotlin.collections.MovingSubList)\l  (r4 I:java.util.List)\l kotlin.collections.MovingSubList.\<init\>(java.util.List):void type: DIRECT \l0x002a: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x0048 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: ARITH  (r3 I:int) = (r4 I:int) + (r5 I:int) \l0x002f: INVOKE  (r3 I:int) = (r3 I:int), (r0 I:int) kotlin.ranges.RangesKt.coerceAtMost(int, int):int type: STATIC \l0x0033: INVOKE  \l  (r1 I:kotlin.collections.MovingSubList)\l  (r4 I:int)\l  (r3 I:int)\l kotlin.collections.MovingSubList.move(int, int):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: INVOKE  (r3 I:int) = (r1 I:kotlin.collections.MovingSubList) kotlin.collections.MovingSubList.size():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x003f \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: INVOKE  (r3 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0043: INVOKE  (r2 I:java.util.ArrayList), (r3 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0046: ARITH  (r4 I:int) = (r4 I:int) + (r6 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|0x0048: CHECK_CAST  (r2 I:java.util.List) = (java.util.List) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: RETURN  (r2 I:java.util.List\<R\>) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|0x004b: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x004d: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0050: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0054: INVOKE  (r4 I:java.util.Iterator) = \l  (r4 I:java.util.Iterator)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l  (r1 I:boolean)\l kotlin.collections.SlidingWindowKt.windowedIterator(java.util.Iterator, int, int, boolean, boolean):java.util.Iterator type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|0x005c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006c \l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0062: CHECK_CAST  (r5 I:java.util.List) = (java.util.List) (r5 I:?[OBJECT, ARRAY]) \l0x0064: INVOKE  (r5 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1)\l  (r5 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0068: INVOKE  (r0 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|0x006c: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|0x006e: RETURN  (r0 I:java.util.List\<R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r4 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/util\/List\<, +TT;\>;+TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_15;
Node_18 -> Node_19;
}

