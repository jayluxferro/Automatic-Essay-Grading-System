digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.reduceIndexed(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x000e: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0018: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: INVOKE  (r3 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: INVOKE  (r3 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0025: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0026: INVOKE  (r4 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002a: INVOKE  (r2 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function3)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: RETURN  (r2 I:S) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: NEW_INSTANCE  (r5 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException \l0x0032: CONST_STR  (r6 I:java.lang.String) =  \"Empty collection can't be reduced.\" \l0x0034: INVOKE  \l  (r5 I:java.lang.UnsupportedOperationException)\l  (r6 I:java.lang.String)\l java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void type: DIRECT \l0x0037: CHECK_CAST  (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|0x0039: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final S kotlin.collections.CollectionsKt___CollectionsKt.reduceIndexed((r5 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super S, ? super T, ? extends S\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<S:, Ljava\/lang\/Object;, T::TS;\>(, Ljava\/lang\/Iterable\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function3\<, \-, Ljava\/lang\/Integer;, \-TS;\-TT;+TS;\>;)TS;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_7 -> Node_8;
}

