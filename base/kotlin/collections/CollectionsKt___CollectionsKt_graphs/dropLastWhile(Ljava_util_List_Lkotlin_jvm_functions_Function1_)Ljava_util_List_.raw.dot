digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.dropLastWhile(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: INVOKE  (r0 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0014: INVOKE  (r0 I:java.util.ListIterator) = (r2 I:java.util.List), (r0 I:int) java.util.List.listIterator(int):java.util.ListIterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: INVOKE  (r1 I:boolean) = (r0 I:java.util.ListIterator) java.util.ListIterator.hasPrevious():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.ListIterator) java.util.ListIterator.previous():java.lang.Object type: INTERFACE \l0x0022: INVOKE  (r1 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x0026: CHECK_CAST  (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: CHECK_CAST  (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  (r3 I:int) = (r0 I:java.util.ListIterator) java.util.ListIterator.nextIndex():int type: INTERFACE \l0x0034: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0036: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.Iterable), (r3 I:int) kotlin.collections.CollectionsKt.take(java.lang.Iterable, int):java.util.List type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: INVOKE  (r2 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: RETURN  (r2 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.dropLastWhile((r2 I:java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
}

