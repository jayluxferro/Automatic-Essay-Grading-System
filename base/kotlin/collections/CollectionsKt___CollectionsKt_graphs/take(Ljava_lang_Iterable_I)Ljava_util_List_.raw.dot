digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.take(Ljava\/lang\/Iterable;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0056 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r4 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: INSTANCE_OF  (r2 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x001a: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r2 I:int) = (r2 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r5 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:14:0x0027 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.lang.Iterable) kotlin.collections.CollectionsKt.first(java.lang.Iterable):java.lang.Object type: STATIC \l0x002d: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Object) kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0034: INVOKE  (r1 I:java.util.ArrayList), (r5 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0037: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: INVOKE  (r2 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0045: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004a \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x004d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x004f|0x004f: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l0x0051: INVOKE  (r4 I:java.util.List) = (r1 I:java.util.List) kotlin.collections.CollectionsKt.optimizeReadOnlyList(java.util.List):java.util.List type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0055|0x0055: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0056|0x0056: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005b: CONST_STR  (r0 I:java.lang.String) =  \"Requested element count \" \l0x005d: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0063: CONST_STR  (r5 I:java.lang.String) =  \" is less than zero.\" \l0x0065: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0068: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006c: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006e: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0072: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x0075: CHECK_CAST  (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0077|0x0077: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.take((r4 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;I), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
Node_23 -> Node_18;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

