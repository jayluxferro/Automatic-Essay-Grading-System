digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.none(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"predicate\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if ((r2 instanceof java.util.Collection) == false) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if (((java.util.Collection) r2).isEmpty() == false) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|return true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|java.util.Iterator r2 = r2.iterator()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|LOOP_START\lLOOP:0: B:6:0x001d\-\>B:9:0x0031\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r2.hasNext() == false) goto L_0x0035\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023}"];
Node_9 [shape=record,label="{9\:\ 0x0031|LOOP_END\lLOOP:0: B:6:0x001d\-\>B:9:0x0031\l|if (r3.invoke(r2.next()).booleanValue() == false) goto L_0x001d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt___CollectionsKt.none((r2v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_12[style=dashed];
Node_12 -> Node_10;
Node_13 -> Node_11;
}

