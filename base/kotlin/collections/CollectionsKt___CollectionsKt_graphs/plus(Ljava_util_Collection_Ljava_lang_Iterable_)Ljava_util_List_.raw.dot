digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.plus(Ljava\/util\/Collection;Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0027 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0010: INVOKE  (r1 I:int) = (r3 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0014: CHECK_CAST  (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r2 I:int) = (r4 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x001a: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001b: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x001e: INVOKE  (r0 I:java.util.ArrayList), (r3 I:java.util.Collection) java.util.ArrayList.addAll(java.util.Collection):boolean type: VIRTUAL \l0x0021: INVOKE  (r0 I:java.util.ArrayList), (r4 I:java.util.Collection) java.util.ArrayList.addAll(java.util.Collection):boolean type: VIRTUAL \l0x0024: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0026|0x0026: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0029: INVOKE  (r0 I:java.util.ArrayList), (r3 I:java.util.Collection) java.util.ArrayList.\<init\>(java.util.Collection):void type: DIRECT \l0x002c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x002d: CHECK_CAST  (r3 I:java.util.Collection) = (java.util.Collection) (r3 I:?[OBJECT, ARRAY]) \l0x002f: INVOKE  (r3 I:java.util.Collection), (r4 I:java.lang.Iterable) kotlin.collections.CollectionsKt.addAll(java.util.Collection, java.lang.Iterable):boolean type: STATIC \l0x0032: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: RETURN  (r0 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.plus((r3 I:java.util.Collection\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/Collection\<, +TT;\>;, Ljava\/lang\/Iterable\<, +TT;\>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

