digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.sorted(Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0049 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x000a: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:int) = (r0 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0010: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: NEW_ARRAY  (r3 I:java.lang.Comparable[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Comparable[] \l0x001b: INVOKE  (r3 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r3 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CHECK_CAST  (r3 I:java.lang.Comparable[]) = (java.lang.Comparable[]) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: CHECK_CAST  (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r3 I:java.lang.Object[]) kotlin.collections.ArraysKt.sort(java.lang.Object[]):void type: STATIC \l0x002c: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Object[]) kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: NEW_INSTANCE  (r3 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0033: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<kotlin.Any?\>\" \l0x0035: INVOKE  (r3 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: NEW_INSTANCE  (r3 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x003b: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x003d: INVOKE  (r3 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: NEW_INSTANCE  (r3 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0043: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x0045: INVOKE  (r3 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toMutableList(java.lang.Iterable):java.util.List type: STATIC \l0x004d: INVOKE  (r3 I:java.util.List) kotlin.collections.CollectionsKt.sort(java.util.List):void type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: RETURN  (r3 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.sorted((r3 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T::, Ljava\/lang\/Comparable\<, \-TT;\>;\>(, Ljava\/lang\/Iterable\<, +TT;\>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

