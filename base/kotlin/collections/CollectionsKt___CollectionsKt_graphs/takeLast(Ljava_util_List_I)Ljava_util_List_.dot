digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.takeLast(Ljava\/util\/List;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r3, \"$receiver\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4 \< 0) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r1 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|r1 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|PHI: r1 \l  PHI: (r1v0 boolean) = (r1v3 boolean), (r1v4 boolean) binds: [B:3:0x000a, B:2:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L_0x005b\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r4 != 0) goto L_0x0014\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|int r1 = r3.size()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|if (r4 \< r1) goto L_0x0021\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a}"];
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|return kotlin.collections.CollectionsKt.toList(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|if (r4 != 1) goto L_0x002c\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023}"];
Node_14 [shape=record,label="{14\:\ 0x002b|RETURN\l|return kotlin.collections.CollectionsKt.listOf(kotlin.collections.CollectionsKt.last(r3))\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|java.util.ArrayList r0 = new java.util.ArrayList(r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|if ((r3 instanceof java.util.RandomAccess) == false) goto L_0x0043\l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|int r4 = r1 \- r4\l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|LOOP_START\lPHI: r4 \l  PHI: (r4v7 int) = (r4v6 int), (r4v8 int) binds: [B:17:0x0035, B:19:0x0039] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:18:0x0037\-\>B:19:0x0039\l|if (r4 \>= r1) goto L_0x0058\l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|LOOP_END\lLOOP:0: B:18:0x0037\-\>B:19:0x0039\l|r0.add(r3.get(r4))\lint r4 = r4 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|java.util.Iterator r3 = r3.listIterator(r1 \- r4)\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|LOOP_START\lLOOP:1: B:21:0x004a\-\>B:23:0x0050\l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|if (r3.hasNext() == false) goto L_0x0058\l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|LOOP_END\lLOOP:1: B:21:0x004a\-\>B:23:0x0050\l|r0.add(r3.next())\l}"];
Node_24 [shape=record,label="{24\:\ 0x0058}"];
Node_25 [shape=record,label="{25\:\ 0x005a|RETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Requested element count \")\lr3.append(r4)\lr3.append(\" is less than zero.\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x007c|throw new java.lang.IllegalArgumentException(r3.toString().toString())\l}"];
Node_28 [shape=record,label="{28\:\ 0x0058|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0058|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.takeLast((r3v0 java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;I), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_21;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_24;
Node_29 -> Node_24;
}

