digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.zip(Ljava\/lang\/Iterable;[Ljava\/lang\/Object;)Ljava\/util\/List;" {
subgraph cluster_Region_956730706 {
label = "R(3:0|(2:3|(2:(1:9)|(1:5)))|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r5, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"other\")\lint int r0 = r6.length\ljava.util.ArrayList java.util.ArrayList r2 = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt.collectionSizeOrDefault(r5, 10), r0))\ljava.util.Iterator r5 = r5.iterator()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_247155179 {
label = "LOOP:0: (2:3|(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0023|if (r5.hasNext() != false) goto L_0x0025\l}"];
subgraph cluster_Region_761502372 {
label = "R(2:3|(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0025|java.lang.Object r3 = r5.next()\l}"];
subgraph cluster_Region_395093333 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1477744865 {
label = "IF [B:4:0x0029] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0029|if (r1 \>= r0) goto L_0x0039\l}"];
subgraph cluster_Region_1499096558 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0039|SYNTHETIC\lEDGE_INSN: B:9:0x0039\-\>B:6:0x0039 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_831971555 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002c|LOOP_END\lLOOP:0: B:1:0x001f\-\>B:5:0x002c\l|r2.add(kotlin.TuplesKt.m174to(r3, r6[r1]))\lr1++\l}"];
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x003b|RETURN\l|return r2\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x001f|LOOP_START\lPHI: r1 \l  PHI: (r1v4 int) = (r1v3 int), (r1v7 int) binds: [B:0:0x0000, B:5:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001f\-\>B:5:0x002c\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0039|EDGE_INSN: B:9:0x0039\-\>B:6:0x0039 ?: BREAK  \l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0039|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<T, R\>\> kotlin.collections.CollectionsKt___CollectionsKt.zip((r5v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 R[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;[TR;), Ljava\/util\/List\<, Lkotlin\/Pair\<, TT;TR;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_9 -> Node_6;
Node_5 -> Node_1;
Node_1 -> Node_2;
Node_6 -> Node_7;
Node_8 -> Node_6;
}

