digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.takeLast(Ljava\/util\/List;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x005b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r3 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r1 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: IF  (r4 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: CHECK_CAST  (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List) kotlin.collections.CollectionsKt.last(java.util.List):java.lang.Object type: STATIC \l0x0027: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Object) kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x002e: INVOKE  (r0 I:java.util.ArrayList), (r4 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0031: INSTANCE_OF  (r2 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.util.RandomAccess \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: ARITH  (r4 I:int) = (r1 I:int) \- (r4 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: IF  (r4 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:24:0x0058 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003d: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0040: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: ARITH  (r1 I:int) = (r1 I:int) \- (r4 I:int) \l0x0044: INVOKE  (r3 I:java.util.ListIterator) = (r3 I:java.util.List), (r1 I:int) java.util.List.listIterator(int):java.util.ListIterator type: INTERFACE \l0x0048: CHECK_CAST  (r3 I:java.util.Iterator) = (java.util.Iterator) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0058 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0054: INVOKE  (r0 I:java.util.ArrayList), (r4 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|0x0058: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|0x005a: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005d: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0060: CONST_STR  (r0 I:java.lang.String) =  \"Requested element count \" \l0x0062: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0065: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0068: CONST_STR  (r4 I:java.lang.String) =  \" is less than zero.\" \l0x006a: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006d: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0071: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0073: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x0077: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x007a: CHECK_CAST  (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x007c|0x007c: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.takeLast((r3 I:java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;I), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_21;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

