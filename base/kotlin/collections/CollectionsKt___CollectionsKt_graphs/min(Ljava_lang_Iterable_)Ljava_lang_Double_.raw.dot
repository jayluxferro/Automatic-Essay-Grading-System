digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.min(Ljava\/lang\/Iterable;)Ljava\/lang\/Double;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l0x0009: INVOKE  (r0 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: RETURN  (r5 I:java.lang.Double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r0 I:double) = (r0 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x001b: INVOKE  (r2 I:boolean) = (r0 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: INVOKE  (r5 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r5 I:java.lang.Double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: INVOKE  (r2 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0047 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0030: CHECK_CAST  (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  (r2 I:double) = (r2 I:java.lang.Number) java.lang.Number.doubleValue():double type: VIRTUAL \l0x0036: INVOKE  (r4 I:boolean) = (r2 I:double) java.lang.Double.isNaN(double):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: INVOKE  (r5 I:java.lang.Double) = (r2 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: RETURN  (r5 I:java.lang.Double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CMP_L  (r4 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: MOVE  (r0 I:?[long, double]) = (r2 I:?[long, double]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0047|0x0047: INVOKE  (r5 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|0x004b: RETURN  (r5 I:java.lang.Double) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Double kotlin.collections.CollectionsKt___CollectionsKt.min((r5 I:java.lang.Iterable\<java.lang.Double\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lRENAME_REASON:collision with other method in class\lAnnotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/Iterable\<, Ljava\/lang\/Double;, \>;), Ljava\/lang\/Double;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_8;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_8;
Node_17 -> Node_18;
}

