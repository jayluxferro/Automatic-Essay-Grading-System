digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.lastOrNull(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1727062753 {
label = "R(2:0|(2:(2:2|(2:(1:15)|(1:14)))|(2:5|(2:(1:7)|(3:8|(1:11)|12)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_Region_2095509617 {
label = "R(2:(2:2|(2:(1:15)|(1:14)))|(2:5|(2:(1:7)|(3:8|(1:11)|12))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_691548375 {
label = "IF [B:1:0x0008] THEN: R(2:2|(2:(1:15)|(1:14))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0008|if ((r2 instanceof java.util.List) == true) goto L_0x000a\l}"];
subgraph cluster_Region_1416015761 {
label = "R(2:2|(2:(1:15)|(1:14)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|java.util.List java.util.List r2 = (java.util.List) r2\l}"];
subgraph cluster_Region_345009314 {
label = "R(2:(1:15)|(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_651748872 {
label = "IF [B:3:0x0010] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|if (r2.isEmpty() == true) goto L_?\l}"];
subgraph cluster_Region_1972790075 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1041451827 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2.get(r2.size() \- 1)\l}"];
}
}
}
}
subgraph cluster_Region_1867229682 {
label = "R(2:5|(2:(1:7)|(3:8|(1:11)|12)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001e|java.util.Iterator java.util.Iterator\<? extends T\> r2 = r2.iterator()\l}"];
subgraph cluster_Region_1052270720 {
label = "R(2:(1:7)|(3:8|(1:11)|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1818590888 {
label = "IF [B:6:0x0026] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0026|if (r2.hasNext() == false) goto L_0x0028\l}"];
subgraph cluster_Region_1458454792 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0028|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1957744522 {
label = "R(3:8|(1:11)|12)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0029|java.lang.Object T r0 = r2.next()\l}"];
subgraph cluster_LoopRegion_554121866 {
label = "LOOP:0: (1:11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0031|if (r2.hasNext() != false) goto L_0x0033\l}"];
subgraph cluster_Region_321979233 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0033|LOOP_END\lLOOP:0: B:9:0x002d\-\>B:11:0x0033\l|java.lang.Object r0 = r2.next()\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0038|RETURN\l|return r0\l}"];
}
}
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002d|LOOP_START\lPHI: r0 \l  PHI: (r0v4 T) = (r0v3 T), (r0v5 T) binds: [B:8:0x0029, B:11:0x0033] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x002d\-\>B:11:0x0033\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.lastOrNull((r2v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.Nullable, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_9;
Node_4 -> Node_14;
Node_9 -> Node_10;
Node_13 -> Node_12;
}

