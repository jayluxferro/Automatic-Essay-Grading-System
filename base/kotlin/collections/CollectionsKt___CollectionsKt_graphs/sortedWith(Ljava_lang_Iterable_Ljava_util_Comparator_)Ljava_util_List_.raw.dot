digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.sortedWith(Ljava\/lang\/Iterable;Ljava\/util\/Comparator;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparator\" \l0x0007: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0040 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x000f: CHECK_CAST  (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:?[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:int) = (r0 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0015: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0020: INVOKE  (r3 I:java.lang.Object[]) = (r0 I:java.util.Collection), (r3 I:java.lang.Object[]) java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0030 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: INVOKE  (r3 I:java.lang.Object[]), (r4 I:java.util.Comparator) kotlin.collections.ArraysKt.sortWith(java.lang.Object[], java.util.Comparator):void type: STATIC \l0x002b: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Object[]) kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: NEW_INSTANCE  (r3 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x0032: CONST_STR  (r4 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x0034: INVOKE  (r3 I:kotlin.TypeCastException), (r4 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: NEW_INSTANCE  (r3 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x003a: CONST_STR  (r4 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T\>\" \l0x003c: INVOKE  (r3 I:kotlin.TypeCastException), (r4 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: INVOKE  (r3 I:java.util.List) = (r3 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toMutableList(java.lang.Iterable):java.util.List type: STATIC \l0x0044: INVOKE  (r3 I:java.util.List), (r4 I:java.util.Comparator) kotlin.collections.CollectionsKt.sortWith(java.util.List, java.util.Comparator):void type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: RETURN  (r3 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.sortedWith((r3 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Comparator\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;, Ljava\/util\/Comparator\<, \-TT;\>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

