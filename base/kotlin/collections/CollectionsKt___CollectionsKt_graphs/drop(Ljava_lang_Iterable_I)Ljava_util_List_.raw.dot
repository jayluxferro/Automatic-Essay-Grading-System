digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.drop(Ljava\/lang\/Iterable;I)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r4 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x008e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: INSTANCE_OF  (r2 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.Collection \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x006b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x001a: CHECK_CAST  (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r2 I:int) = (r2 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l0x0020: ARITH  (r2 I:int) = (r2 I:int) \- (r5 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: INVOKE  (r4 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.lang.Iterable) kotlin.collections.CollectionsKt.last(java.lang.Iterable):java.lang.Object type: STATIC \l0x002e: INVOKE  (r4 I:java.util.List) = (r4 I:java.lang.Object) kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0035: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0038: INSTANCE_OF  (r2 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.List \l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0070 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|0x003c: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) java.util.RandomAccess \l}"];
Node_20 [shape=record,label="{20\:\ 0x003e|0x003e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0052 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0040|0x0040: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l0x0042: INVOKE  (r0 I:int) = (r4 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:28:0x0068 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004c: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x004f: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0052|0x0052: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l0x0054: INVOKE  (r4 I:java.util.ListIterator) = (r4 I:java.util.List), (r5 I:int) java.util.List.listIterator(int):java.util.ListIterator type: INTERFACE \l0x0058: CHECK_CAST  (r4 I:java.util.Iterator) = (java.util.Iterator) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005a|0x005a: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_26 [shape=record,label="{26\:\ 0x005e|0x005e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0068 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0060|0x0060: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0064: INVOKE  (r1 I:java.util.ArrayList), (r5 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0068|0x0068: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x006a|0x006a: RETURN  (r1 I:java.util.List\<T\>) \l}"];
Node_30 [shape=record,label="{30\:\ 0x006b|0x006b: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x006d: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x0070|0x0070: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_32 [shape=record,label="{32\:\ 0x0074|0x0074: INVOKE  (r2 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_33 [shape=record,label="{33\:\ 0x0078|0x0078: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0087 \l}"];
Node_34 [shape=record,label="{34\:\ 0x007a|0x007a: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x007e: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0080|0x0080: IF  (r0 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:37:0x0085 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0082|0x0082: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0085|0x0085: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x0087|0x0087: CHECK_CAST  (r1 I:java.util.List) = (java.util.List) (r1 I:?[OBJECT, ARRAY]) \l0x0089: INVOKE  (r4 I:java.util.List) = (r1 I:java.util.List) kotlin.collections.CollectionsKt.optimizeReadOnlyList(java.util.List):java.util.List type: STATIC \l}"];
Node_39 [shape=record,label="{39\:\ 0x008d|0x008d: RETURN  (r4 I:java.util.List\<T\>) \l}"];
Node_40 [shape=record,label="{40\:\ 0x008e|0x008e: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0090: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0093: CONST_STR  (r0 I:java.lang.String) =  \"Requested element count \" \l0x0095: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0098: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x009b: CONST_STR  (r5 I:java.lang.String) =  \" is less than zero.\" \l0x009d: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a0: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a4: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00a6: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) java.lang.Object.toString():java.lang.String type: VIRTUAL \l0x00aa: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l0x00ad: CHECK_CAST  (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00af|0x00af: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.drop((r4 I:java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;I), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_40;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_30;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_31;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_22;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_25;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_38;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_32;
Node_38 -> Node_39;
Node_40 -> Node_41;
}

