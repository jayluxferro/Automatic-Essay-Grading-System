digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.reversed(Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
subgraph cluster_Region_2013710627 {
label = "R(2:0|(2:(1:5)|(2:6|7)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
subgraph cluster_Region_884188722 {
label = "R(2:(1:5)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_399485491 {
label = "IF [B:1:0x0007, B:3:0x0011] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r2 instanceof java.util.Collection) != false) goto L_0x0009\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|ADDED_TO_REGION\l|if (((java.util.Collection) r2).size() \<= 1) goto L_0x0013\l}"];
subgraph cluster_Region_1524917719 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|RETURN\l|return kotlin.collections.CollectionsKt.toList(r2)\l}"];
}
}
subgraph cluster_Region_283982409 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|java.util.List java.util.List\<T\> r2 = kotlin.collections.CollectionsKt.toMutableList(r2)\lkotlin.collections.CollectionsKt.reverse(r2)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|RETURN\l|return r2\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0009}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0013}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.reversed((r2v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

