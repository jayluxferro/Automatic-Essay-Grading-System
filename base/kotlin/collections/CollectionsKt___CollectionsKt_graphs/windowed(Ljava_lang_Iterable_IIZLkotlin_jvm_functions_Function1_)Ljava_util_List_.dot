digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r4, \"$receiver\")\lkotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, \"transform\")\lkotlin.collections.SlidingWindowKt.checkWindowSizeStep(r5, r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|if ((r4 instanceof java.util.RandomAccess) == false) goto L_0x004b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if ((r4 instanceof java.util.List) == false) goto L_0x004b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|java.util.List r4 = (java.util.List) r4\lint r0 = r4.size()\ljava.util.ArrayList r2 = new java.util.ArrayList(((r0 + r6) \- 1) \/ r6)\lkotlin.collections.MovingSubList r1 = new kotlin.collections.MovingSubList(r4)\lr4 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|LOOP_START\lPHI: r4 \l  PHI: (r4v5 int) = (r4v4 int), (r4v6 int) binds: [B:4:0x0016, B:10:0x003f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x002b\-\>B:10:0x003f\l|if (r4 \>= r0) goto L_0x0048\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|r1.move(r4, kotlin.ranges.RangesKt.coerceAtMost(r4 + r5, r0))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|if (r7 != false) goto L_0x003f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038}"];
Node_9 [shape=record,label="{9\:\ 0x003c|if (r1.size() \>= r5) goto L_0x003f\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|LOOP_END\lLOOP:0: B:5:0x002b\-\>B:10:0x003f\l|r2.add(r8.invoke(r1))\lint r4 = r4 + r6\l}"];
Node_11 [shape=record,label="{11\:\ 0x0048}"];
Node_12 [shape=record,label="{12\:\ 0x004a|RETURN\l|return r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|java.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.Iterator r4 = kotlin.collections.SlidingWindowKt.windowedIterator(r4.iterator(), r5, r6, r7, true)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0058|LOOP_START\lLOOP:1: B:14:0x0058\-\>B:16:0x005e\l}"];
Node_15 [shape=record,label="{15\:\ 0x005c|if (r4.hasNext() == false) goto L_0x006c\l}"];
Node_16 [shape=record,label="{16\:\ 0x005e|LOOP_END\lLOOP:1: B:14:0x0058\-\>B:16:0x005e\l|r0.add(r8.invoke(r4.next()))\l}"];
Node_17 [shape=record,label="{17\:\ 0x006c}"];
Node_18 [shape=record,label="{18\:\ 0x006e|RETURN\l|return r0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x006c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r4v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], , , , Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.2\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, R:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;IIZ, Lkotlin\/jvm\/functions\/Function1\<, \-, Ljava\/util\/List\<, +TT;\>;+TR;\>;), Ljava\/util\/List\<, TR;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_21;
Node_8 -> Node_9;
Node_9 -> Node_20[style=dashed];
Node_9 -> Node_22;
Node_10 -> Node_5;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_19 -> Node_11;
Node_20 -> Node_11;
Node_21 -> Node_10;
Node_22 -> Node_10;
Node_23 -> Node_17;
}

