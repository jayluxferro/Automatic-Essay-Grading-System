digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.indexOf(Ljava\/lang\/Iterable;Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r2, \"$receiver\")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if ((r2 instanceof java.util.List) == false) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009}"];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|return ((java.util.List) r2).indexOf(r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|r0 = 0\ljava.util.Iterator r2 = r2.iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:4:0x0010, B:10:0x0026] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0015\-\>B:10:0x0026\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|if (r2.hasNext() == false) goto L_0x0029\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x0023|if (kotlin.jvm.internal.Intrinsics.areEqual((java.lang.Object) r3, (java.lang.Object) r2.next()) == false) goto L_0x0026\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|RETURN\l|return r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|LOOP_END\lLOOP:0: B:5:0x0015\-\>B:10:0x0026\l|int r0 = r0 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|RETURN\l|return \-1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.indexOf((r2v0 java.lang.Iterable\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], \lAnnotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/lang\/Iterable\<, +TT;\>;TT;)I]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_5;
Node_12 -> Node_9;
Node_13 -> Node_11;
}

