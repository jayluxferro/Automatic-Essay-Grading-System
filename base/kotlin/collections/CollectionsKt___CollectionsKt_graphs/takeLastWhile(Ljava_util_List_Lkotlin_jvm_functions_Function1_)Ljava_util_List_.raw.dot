digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.takeLastWhile(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r3 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x000a: INVOKE  (r0 I:boolean) = (r2 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: INVOKE  (r2 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: INVOKE  (r0 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0019: INVOKE  (r0 I:java.util.ListIterator) = (r2 I:java.util.List), (r0 I:int) java.util.List.listIterator(int):java.util.ListIterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r1 I:boolean) = (r0 I:java.util.ListIterator) java.util.ListIterator.hasPrevious():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x005c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.ListIterator) java.util.ListIterator.previous():java.lang.Object type: INTERFACE \l0x0027: INVOKE  (r1 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1)\l  (r1 I:java.lang.Object)\l kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object type: INTERFACE \l0x002b: CHECK_CAST  (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Boolean) java.lang.Boolean.booleanValue():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: INVOKE  (r0 I:java.util.ListIterator) java.util.ListIterator.next():java.lang.Object type: INTERFACE \l0x0036: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x003a: INVOKE  (r3 I:int) = (r0 I:java.util.ListIterator) java.util.ListIterator.nextIndex():int type: INTERFACE \l0x003e: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0046 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: INVOKE  (r2 I:java.util.List) =  kotlin.collections.CollectionsKt.emptyList():java.util.List type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|0x0046: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x0048: INVOKE  (r3 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x004b|0x004b: INVOKE  (r2 I:boolean) = (r0 I:java.util.ListIterator) java.util.ListIterator.hasNext():boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.ListIterator) java.util.ListIterator.next():java.lang.Object type: INTERFACE \l0x0055: INVOKE  (r3 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: CHECK_CAST  (r3 I:java.util.List) = (java.util.List) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005c|0x005c: CHECK_CAST  (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:?[OBJECT, ARRAY]) \l0x005e: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.Iterable) kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List type: STATIC \l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|0x0062: RETURN  (r2 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.takeLastWhile((r2 I:java.util.List\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, \>(, Ljava\/util\/List\<, +TT;\>;, Lkotlin\/jvm\/functions\/Function1\<, \-TT;, Ljava\/lang\/Boolean;, \>;), Ljava\/util\/List\<, TT;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_19;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

