digraph "CFG forkotlin.collections.GroupingKt__GroupingJVMKt.eachCount(Lkotlin\/collections\/Grouping;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$receiver\" \l0x0002: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(java.lang.Object, java.lang.String):void type: STATIC \l0x0005: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0007: INVOKE  (r0 I:java.util.LinkedHashMap) java.util.LinkedHashMap.\<init\>():void type: DIRECT \l0x000a: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:java.util.Iterator) = (r6 I:kotlin.collections.Grouping) kotlin.collections.Grouping.sourceIterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0040 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001a: INVOKE  (r2 I:java.lang.Object) = (r6 I:kotlin.collections.Grouping), (r2 I:java.lang.Object) kotlin.collections.Grouping.keyOf(java.lang.Object):java.lang.Object type: INTERFACE \l0x001e: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: INVOKE  (r5 I:boolean) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: NEW_INSTANCE  (r3 I:kotlin.jvm.internal.Ref$IntRef) =  kotlin.jvm.internal.Ref$IntRef \l0x0032: INVOKE  (r3 I:kotlin.jvm.internal.Ref$IntRef) kotlin.jvm.internal.Ref.IntRef.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: CHECK_CAST  (r3 I:kotlin.jvm.internal.Ref$IntRef) = (kotlin.jvm.internal.Ref$IntRef) (r3 I:?[OBJECT, ARRAY]) \l0x0037: IGET  (r5 I:int) = (r3 I:kotlin.jvm.internal.Ref$IntRef) kotlin.jvm.internal.Ref.IntRef.element int \l0x0039: ARITH  (r5 I:int) = (r5 I:int) + (r4 I:int) \l0x003a: IPUT  (r5 I:int), (r3 I:kotlin.jvm.internal.Ref$IntRef) kotlin.jvm.internal.Ref.IntRef.element int \l0x003c: INVOKE  \l  (r0 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: INVOKE  (r6 I:java.util.Set) = (r0 I:java.util.Map) java.util.Map.entrySet():java.util.Set type: INTERFACE \l0x0044: CHECK_CAST  (r6 I:java.lang.Iterable) = (java.lang.Iterable) (r6 I:?[OBJECT, ARRAY]) \l0x0046: INVOKE  (r6 I:java.util.Iterator) = (r6 I:java.lang.Iterable) java.lang.Iterable.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|0x004a: INVOKE  (r1 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0074 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|0x0050: INVOKE  (r1 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0054: CHECK_CAST  (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|0x0058: INVOKE  (r2 I:java.util.Map$Entry) = (r1 I:java.lang.Object) kotlin.jvm.internal.TypeIntrinsics.asMutableMapEntry(java.lang.Object):java.util.Map$Entry type: STATIC \l0x005c: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x0060: CHECK_CAST  (r1 I:kotlin.jvm.internal.Ref$IntRef) = (kotlin.jvm.internal.Ref$IntRef) (r1 I:?[OBJECT, ARRAY]) \l0x0062: IGET  (r1 I:int) = (r1 I:kotlin.jvm.internal.Ref$IntRef) kotlin.jvm.internal.Ref.IntRef.element int \l0x0064: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0068: INVOKE  (r2 I:java.util.Map$Entry), (r1 I:java.lang.Object) java.util.Map.Entry.setValue(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|0x006c: NEW_INSTANCE  (r6 I:kotlin.TypeCastException) =  kotlin.TypeCastException \l0x006e: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.collections.MutableMap.MutableEntry\<K, R\>\" \l0x0070: INVOKE  (r6 I:kotlin.TypeCastException), (r0 I:java.lang.String) kotlin.TypeCastException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0073|0x0073: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: INVOKE  (r6 I:java.util.Map) = (r0 I:java.lang.Object) kotlin.jvm.internal.TypeIntrinsics.asMutableMap(java.lang.Object):java.util.Map type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0078|0x0078: RETURN  (r6 I:java.util.Map\<K, java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, java.lang.Integer\> kotlin.collections.GroupingKt__GroupingJVMKt.eachCount((r6 I:kotlin.collections.Grouping\<T, ? extends K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, K:, Ljava\/lang\/Object;, \>(, Lkotlin\/collections\/Grouping\<, TT;+TK;\>;), Ljava\/util\/Map\<, TK;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

