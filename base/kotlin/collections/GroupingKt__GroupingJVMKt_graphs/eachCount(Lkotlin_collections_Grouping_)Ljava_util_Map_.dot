digraph "CFG forkotlin.collections.GroupingKt__GroupingJVMKt.eachCount(Lkotlin\/collections\/Grouping;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, \"$receiver\")\ljava.util.Map r0 = new java.util.LinkedHashMap()\ljava.util.Iterator r1 = r6.sourceIterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|LOOP_START\lLOOP:0: B:1:0x0010\-\>B:11:0x0035\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|if (r1.hasNext() == false) goto L_0x0040\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|java.lang.Object r2 = r6.keyOf(r1.next())\ljava.lang.Object r3 = r0.get(r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r3 != null) goto L_0x002d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025}"];
Node_6 [shape=record,label="{6\:\ 0x0029|if (r0.containsKey(r2) != false) goto L_0x002d\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|r5 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|r5 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|PHI: r5 \l  PHI: (r5v0 boolean) = (r5v3 boolean), (r5v5 boolean) binds: [B:8:0x002d, B:7:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L_0x0035\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|kotlin.jvm.internal.Ref$IntRef r3 = new kotlin.jvm.internal.Ref.IntRef()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|LOOP_END\lPHI: r3 \l  PHI: (r3v1 java.lang.Object) = (r3v0 java.lang.Object), (r3v3 java.lang.Object) binds: [B:24:0x0035, B:23:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0010\-\>B:11:0x0035\l|kotlin.jvm.internal.Ref$IntRef r3 = (kotlin.jvm.internal.Ref.IntRef) r3\lr3.element = r3.element + 1\lr0.put(r2, r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|java.util.Iterator r6 = r0.entrySet().iterator()\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|LOOP_START\lLOOP:1: B:13:0x004a\-\>B:17:0x0058\l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|if (r6.hasNext() == false) goto L_0x0074\l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|java.util.Map$Entry r1 = (java.util.Map.Entry) r6.next()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|if (r1 == null) goto L_0x006c\l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|LOOP_END\lLOOP:1: B:13:0x004a\-\>B:17:0x0058\l|kotlin.jvm.internal.TypeIntrinsics.asMutableMapEntry(r1).setValue(java.lang.Integer.valueOf(((kotlin.jvm.internal.Ref.IntRef) r1.getValue()).element))\l}"];
Node_18 [shape=record,label="{18\:\ 0x006c}"];
Node_19 [shape=record,label="{19\:\ 0x0073|throw new kotlin.TypeCastException(\"null cannot be cast to non\-null type kotlin.collections.MutableMap.MutableEntry\<K, R\>\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x0074}"];
Node_21 [shape=record,label="{21\:\ 0x0078|RETURN\l|return kotlin.jvm.internal.TypeIntrinsics.asMutableMap(r0)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0035|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x006c|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0074|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, java.lang.Integer\> kotlin.collections.GroupingKt__GroupingJVMKt.eachCount((r6v0 kotlin.collections.Grouping\<T, ? extends K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, org.jetbrains.annotations.NotNull, \{\}]\lAnnotation[BUILD, org.jetbrains.annotations.NotNull, \{\}], Annotation[BUILD, kotlin.SinceKotlin, \{version=1.1\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[\<T:, Ljava\/lang\/Object;, K:, Ljava\/lang\/Object;, \>(, Lkotlin\/collections\/Grouping\<, TT;+TK;\>;), Ljava\/util\/Map\<, TK;, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_24;
Node_10 -> Node_23;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_26;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_12;
Node_23 -> Node_11;
Node_24 -> Node_11;
Node_25 -> Node_18;
Node_26 -> Node_20;
}

