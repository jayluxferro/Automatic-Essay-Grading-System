digraph "CFG fororg.spatialite.AbstractCursor.onDeactivateOrClose()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.database.ContentObserver) = (r2 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mSelfObserver android.database.ContentObserver \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.content.ContentResolver) = (r2 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mContentResolver android.content.ContentResolver \l0x0006: IGET  (r1 I:android.database.ContentObserver) = (r2 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mSelfObserver android.database.ContentObserver \l0x0008: INVOKE  \l  (r0 I:android.content.ContentResolver)\l  (r1 I:android.database.ContentObserver)\l android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver):void type: VIRTUAL \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: IPUT  (r0 I:boolean), (r2 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mSelfObserverRegistered boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r0 I:android.database.DataSetObservable) = (r2 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mDataSetObservable android.database.DataSetObservable \l0x0010: INVOKE  (r0 I:android.database.DataSetObservable) android.database.DataSetObservable.notifyInvalidated():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.spatialite.AbstractCursor.onDeactivateOrClose((r2 'this' I:org.spatialite.AbstractCursor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

