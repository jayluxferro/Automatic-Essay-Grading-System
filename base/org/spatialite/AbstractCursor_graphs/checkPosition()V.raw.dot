digraph "CFG fororg.spatialite.AbstractCursor.checkPosition()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mPos int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r3 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.getCount():int type: VIRTUAL \l0x0009: IGET  (r1 I:int) = (r3 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mPos int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:android.database.CursorIndexOutOfBoundsException) =  android.database.CursorIndexOutOfBoundsException \l0x0010: IGET  (r1 I:int) = (r3 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.mPos int \l0x0012: INVOKE  (r2 I:int) = (r3 I:org.spatialite.AbstractCursor) org.spatialite.AbstractCursor.getCount():int type: VIRTUAL \l0x0016: INVOKE  \l  (r0 I:android.database.CursorIndexOutOfBoundsException)\l  (r1 I:int)\l  (r2 I:int)\l android.database.CursorIndexOutOfBoundsException.\<init\>(int, int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void org.spatialite.AbstractCursor.checkPosition((r3 'this' I:org.spatialite.AbstractCursor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

