digraph "CFG fororg.spatialite.database.SQLiteDatabase.isDatabaseIntegrityOk()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|acquireReference()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLiteException \-\> 0x002d \}\lSplitter:B:1:0x0003\l|java.util.List r0 = getAttachedDbs()     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|Catch:\{ SQLiteException \-\> 0x002d \}\l|if (r0 == null) goto L_0x000a     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|Catch:\{ SQLiteException \-\> 0x002d \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|Catch:\{ SQLiteException \-\> 0x002d \}\l|java.lang.StringBuilder r1 = new java.lang.StringBuilder()     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\lr1.append(\"databaselist for: \")     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\lr1.append(getPath())     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\lr1.append(\" couldn't be retrieved. probably because the database is closed\")     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|Catch:\{ SQLiteException \-\> 0x002d \}\l|throw new java.lang.IllegalStateException(r1.toString())     \/\/ Catch:\{ SQLiteException \-\> 0x002d \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|ExcHandler: all (r0v9 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:8:0x002d\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|SYNTHETIC\lSplitter:B:8:0x002d\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lSplitter:B:8:0x002d\l|java.util.ArrayList r0 = new java.util.ArrayList()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lr0.add(new android.util.Pair(\"main\", getPath()))     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lPHI: r0 \l  PHI: (r0v0 java.util.List) = (r0v8 java.util.List), (r0v10 java.util.List) binds: [B:9:?, B:4:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|java.util.Iterator r0 = r0.iterator()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|LOOP_START\lCatch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lLOOP:0: B:11:0x0044\-\>B:41:0x0044\l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|if (r0.hasNext() == false) goto L_0x00b7     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_13 [shape=record,label="{13\:\ 0x004a|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|android.util.Pair r1 = (android.util.Pair) r0.next()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_14 [shape=record,label="{14\:\ 0x0050}"];
Node_15 [shape=record,label="{15\:\ 0x0051|SYNTHETIC\lSplitter:B:15:0x0051\l}"];
Node_16 [shape=record,label="{16\:\ ?|Catch:\{ all \-\> 0x00af \}\lSplitter:B:15:0x0051\l|java.lang.StringBuilder r3 = new java.lang.StringBuilder()     \/\/ Catch:\{ all \-\> 0x00af \}\lr3.append(\"PRAGMA \")     \/\/ Catch:\{ all \-\> 0x00af \}\lr3.append((java.lang.String) r1.first)     \/\/ Catch:\{ all \-\> 0x00af \}\lr3.append(\".integrity_check(1);\")     \/\/ Catch:\{ all \-\> 0x00af \}\lorg.spatialite.database.SQLiteStatement r3 = compileStatement(r3.toString())     \/\/ Catch:\{ all \-\> 0x00af \}\l}"];
Node_17 [shape=record,label="{17\:\ 0x006f|SYNTHETIC\lSplitter:B:17:0x006f\l}"];
Node_18 [shape=record,label="{18\:\ ?|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lSplitter:B:17:0x006f\l|java.lang.String r2 = r3.simpleQueryForString()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0079|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|if (r2.equalsIgnoreCase(\"ok\") != false) goto L_0x00a7     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_20 [shape=record,label="{20\:\ 0x007b|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|java.lang.StringBuilder r4 = new java.lang.StringBuilder()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lr4.append(\"PRAGMA integrity_check on \")     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lr4.append((java.lang.String) r1.second)     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lr4.append(\" returned: \")     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lr4.append(r2)     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\landroid.util.Log.e(TAG, r4.toString())     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_21 [shape=record,label="{21\:\ 0x009d}"];
Node_22 [shape=record,label="{22\:\ 0x009e|if (r3 == null) goto L_0x00a3\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a0|SYNTHETIC\lSplitter:B:23:0x00a0\l}"];
Node_24 [shape=record,label="{24\:\ ?|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lSplitter:B:23:0x00a0\l|r3.close()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a3|releaseReference()\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a6|RETURN\l|return false\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a7|if (r3 == null) goto L_0x0044\l}"];
Node_28 [shape=record,label="{28\:\ 0x00a9|SYNTHETIC\lSplitter:B:28:0x00a9\l}"];
Node_29 [shape=record,label="{29\:\ ?|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lSplitter:B:28:0x00a9\l|r3.close()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_30 [shape=record,label="{30\:\ 0x00ad|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lExcHandler: all (th java.lang.Throwable)\lSplitter:B:17:0x006f\l|java.lang.Throwable r0 = th     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_31 [shape=record,label="{31\:\ 0x00ae|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_32 [shape=record,label="{32\:\ 0x00af|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lExcHandler: all (th java.lang.Throwable)\lSplitter:B:15:0x0051\l|java.lang.Throwable r0 = th     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_33 [shape=record,label="{33\:\ 0x00b0|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|r3 = null     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_34 [shape=record,label="{34\:\ 0x00b1|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\lPHI: r0 r3 \l  PHI: (r0v3 'th' java.lang.Throwable) = (r0v4 'th' java.lang.Throwable), (r0v5 'th' java.lang.Throwable) binds: [B:33:0x00b0, B:31:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v0 org.spatialite.database.SQLiteStatement) = (r3v1 org.spatialite.database.SQLiteStatement), (r3v4 org.spatialite.database.SQLiteStatement) binds: [B:33:0x00b0, B:31:0x00ae] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == null) goto L_0x00b6     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_35 [shape=record,label="{35\:\ 0x00b3|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|r3.close()     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_36 [shape=record,label="{36\:\ 0x00b6|Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l|throw r0     \/\/ Catch:\{ all \-\> 0x00ad, all \-\> 0x002a \}\l}"];
Node_37 [shape=record,label="{37\:\ 0x00b7|releaseReference()\l}"];
Node_38 [shape=record,label="{38\:\ 0x00bb|RETURN\l|return true\l}"];
Node_39 [shape=record,label="{39\:\ 0x00bc|releaseReference()\l}"];
Node_40 [shape=record,label="{40\:\ 0x00bf|throw r0\l}"];
Node_41 [shape=record,label="{41\:\ 0x0044|LOOP_END\lSYNTHETIC\lLOOP:0: B:11:0x0044\-\>B:41:0x0044\l}"];
Node_42 [shape=record,label="{42\:\ 0x00b7|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x007b|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0044|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0044|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.spatialite.database.SQLiteDatabase.isDatabaseIntegrityOk((r6v0 'this' org.spatialite.database.SQLiteDatabase A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_39;
Node_8 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_42;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_32;
Node_15 -> Node_7;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_30;
Node_17 -> Node_7;
Node_18 -> Node_19;
Node_19 -> Node_27;
Node_19 -> Node_43[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_23 -> Node_7;
Node_24 -> Node_25;
Node_24 -> Node_7;
Node_25 -> Node_26;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_44;
Node_28 -> Node_29;
Node_28 -> Node_7;
Node_29 -> Node_45;
Node_30 -> Node_31;
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_41 -> Node_11;
Node_42 -> Node_37;
Node_43 -> Node_20;
Node_44 -> Node_41;
Node_45 -> Node_41;
}

