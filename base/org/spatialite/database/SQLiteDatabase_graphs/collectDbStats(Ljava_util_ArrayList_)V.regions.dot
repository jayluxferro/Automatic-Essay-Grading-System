digraph "CFG fororg.spatialite.database.SQLiteDatabase.collectDbStats(Ljava\/util\/ArrayList;)V" {
subgraph cluster_Region_1123684402 {
label = "R(2:0|2)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_SynchronizedRegion_1344172388 {
label = "Synchronized:R(2:1|(1:(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
subgraph cluster_Region_2134407484 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1655664637 {
label = "IF [B:4:0x0005] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r2.mConnectionPoolLocked != null) goto L_0x0007\l}"];
subgraph cluster_Region_1883674650 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0007|r2.mConnectionPoolLocked.collectDbStats(r3)\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x000c: MONITOR_EXIT  \l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000e|REMOVE\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f|REMOVE\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0010|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteDatabase.collectDbStats((r2v0 'this' org.spatialite.database.SQLiteDatabase A[IMMUTABLE_TYPE, THIS]), (r3v0 java.util.ArrayList\<org.spatialite.database.SQLiteDebug$DbStats\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Lorg\/spatialite\/database\/SQLiteDebug$DbStats;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

