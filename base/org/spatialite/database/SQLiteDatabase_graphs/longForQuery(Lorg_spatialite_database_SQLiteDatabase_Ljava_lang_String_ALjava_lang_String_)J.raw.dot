digraph "CFG fororg.spatialite.database.SQLiteDatabase.longForQuery(Lorg\/spatialite\/database\/SQLiteDatabase;Ljava\/lang\/String;[Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.spatialite.database.SQLiteStatement) = \l  (r0 I:org.spatialite.database.SQLiteDatabase)\l  (r1 I:java.lang.String)\l org.spatialite.database.SQLiteDatabase.compileStatement(java.lang.String):org.spatialite.database.SQLiteStatement type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|SYNTHETIC\lSplitter:B:1:0x0004\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0004\l|0x0004: INVOKE  (r1 I:long) = \l  (r0 I:org.spatialite.database.SQLiteStatement)\l  (r2 I:java.lang.String[])\l org.spatialite.database.SQLiteDatabase.longForQuery(org.spatialite.database.SQLiteStatement, java.lang.String[]):long type: STATIC A[Catch:\{ all \-\> 0x000c \}, TRY_ENTER]\l0x0007: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:org.spatialite.database.SQLiteStatement) org.spatialite.database.SQLiteStatement.close():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: RETURN  (r1 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|ExcHandler: all null\lSplitter:B:1:0x0004\l|0x000c: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INVOKE  (r0 I:org.spatialite.database.SQLiteStatement) org.spatialite.database.SQLiteStatement.close():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static long org.spatialite.database.SQLiteDatabase.longForQuery((r0 I:org.spatialite.database.SQLiteDatabase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

