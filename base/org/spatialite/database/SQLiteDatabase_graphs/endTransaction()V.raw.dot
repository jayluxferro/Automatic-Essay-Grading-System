digraph "CFG fororg.spatialite.database.SQLiteDatabase.endTransaction()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:org.spatialite.database.SQLiteDatabase) org.spatialite.database.SQLiteDatabase.acquireReference():void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0003\l|0x0003: INVOKE  (r0 I:org.spatialite.database.SQLiteSession) = (r2 I:org.spatialite.database.SQLiteDatabase) org.spatialite.database.SQLiteDatabase.getThreadSession():org.spatialite.database.SQLiteSession type: VIRTUAL A[Catch:\{ all \-\> 0x000f \}, TRY_ENTER]\l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x000f \}]\l0x0008: INVOKE  \l  (r0 I:org.spatialite.database.SQLiteSession)\l  (r1 I:android.support.v4.os.CancellationSignal)\l org.spatialite.database.SQLiteSession.endTransaction(android.support.v4.os.CancellationSignal):void type: VIRTUAL A[Catch:\{ all \-\> 0x000f \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: INVOKE  (r2 I:org.spatialite.database.SQLiteDatabase) org.spatialite.database.SQLiteDatabase.releaseReference():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: all null\lSplitter:B:1:0x0003\l|0x000f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r2 I:org.spatialite.database.SQLiteDatabase) org.spatialite.database.SQLiteDatabase.releaseReference():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.spatialite.database.SQLiteDatabase.endTransaction((r2 'this' I:org.spatialite.database.SQLiteDatabase A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

