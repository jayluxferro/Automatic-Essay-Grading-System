digraph "CFG fororg.spatialite.database.SQLiteStatement.executeInsert()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|acquireReference()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|SYNTHETIC\lSplitter:B:1:0x0003\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\lSplitter:B:1:0x0003\l|long r0 = getSession().executeForLastInsertedRowId(getSql(), getBindArgs(), getConnectionFlags(), (android.support.p000v4.p002os.CancellationSignal) null)     \/\/ Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|releaseReference()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|ExcHandler: all (r0v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:7:0x001f\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|ExcHandler: SQLiteDatabaseCorruptException (r0v0 'e' android.database.sqlite.SQLiteDatabaseCorruptException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0003\l|android.database.sqlite.SQLiteDatabaseCorruptException r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|SYNTHETIC\lSplitter:B:7:0x001f\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\lSplitter:B:7:0x001f\l|onCorruption()     \/\/ Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\l|throw r0     \/\/ Catch:\{ SQLiteDatabaseCorruptException \-\> 0x001e, all \-\> 0x001c \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|releaseReference()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|throw r0\l}"];
MethodNode[shape=record,label="{public long org.spatialite.database.SQLiteStatement.executeInsert((r5v0 'this' org.spatialite.database.SQLiteStatement A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

