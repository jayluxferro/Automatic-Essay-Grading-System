digraph "CFG fororg.spatialite.database.SQLiteSession.execute(Ljava\/lang\/String;[Ljava\/lang\/Object;ILandroid\/support\/v4\/os\/CancellationSignal;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 == null) goto L_0x001a\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002}"];
Node_2 [shape=record,label="{2\:\ 0x0006|if (executeSpecial(r2, r3, r4, r5) == false) goto L_0x0009\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|acquireConnection(r2, r4, r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|SYNTHETIC\lSplitter:B:5:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ all \-\> 0x0015 \}\lSplitter:B:5:0x000c\l|r1.mConnection.execute(r2, r3, r5)     \/\/ Catch:\{ all \-\> 0x0015 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|DONT_GENERATE\l|releaseConnection()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|ExcHandler:  FINALLY\lSplitter:B:5:0x000c\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|FINALLY_INSNS\l|releaseConnection()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|throw r2\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a}"];
Node_13 [shape=record,label="{13\:\ 0x0021|throw new java.lang.IllegalArgumentException(\"sql must not be null.\")\l}"];
MethodNode[shape=record,label="{public void org.spatialite.database.SQLiteSession.execute((r1v0 'this' org.spatialite.database.SQLiteSession A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 android.support.v4.os.CancellationSignal A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

