digraph "CFG fororg.spatialite.database.SQLiteSession.throwIfTransactionMarkedSuccessful()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.spatialite.database.SQLiteSession$Transaction) = (r2 I:org.spatialite.database.SQLiteSession) org.spatialite.database.SQLiteSession.mTransactionStack org.spatialite.database.SQLiteSession$Transaction \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:org.spatialite.database.SQLiteSession$Transaction) = (r2 I:org.spatialite.database.SQLiteSession) org.spatialite.database.SQLiteSession.mTransactionStack org.spatialite.database.SQLiteSession$Transaction \l0x0006: IGET  (r0 I:boolean) = (r0 I:org.spatialite.database.SQLiteSession$Transaction) org.spatialite.database.SQLiteSession.Transaction.mMarkedSuccessful boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"Cannot perform this operation because the transaction has already been marked successful.  The only thing you can do now is call endTransaction().\" \l0x000f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteSession.throwIfTransactionMarkedSuccessful((r2 'this' I:org.spatialite.database.SQLiteSession A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
}

