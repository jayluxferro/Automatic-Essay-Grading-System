digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.finishAcquireConnectionLocked(Lorg\/spatialite\/database\/SQLiteConnection;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r5 & 1) == 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|SYNTHETIC\lPHI: r0 \l  PHI: (r0v1 boolean) = (r0v4 boolean), (r0v5 boolean) binds: [B:3:0x0006, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\lSplitter:B:4:0x0007\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ RuntimeException \-\> 0x0012 \}\lSplitter:B:4:0x0007\l|r4.setOnlyAllowReadOnlyOperations(r0)     \/\/ Catch:\{ RuntimeException \-\> 0x0012 \}\lr3.mAcquiredConnections.put(r4, org.spatialite.database.SQLiteConnectionPool.AcquiredConnectionStatus.NORMAL)     \/\/ Catch:\{ RuntimeException \-\> 0x0012 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|ExcHandler: RuntimeException (r0v2 'e' java.lang.RuntimeException A[CUSTOM_DECLARE])\lSplitter:B:4:0x0007\l|java.lang.RuntimeException r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Failed to prepare acquired connection for session, closing it: \")\lr1.append(r4)\lr1.append(\", connectionFlags=\")\lr1.append(r5)\landroid.util.Log.e(TAG, r1.toString())\lcloseConnectionAndLogExceptionsLocked(r4)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|throw r0\l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteConnectionPool.finishAcquireConnectionLocked((r3v0 'this' org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS]), (r4v0 org.spatialite.database.SQLiteConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

