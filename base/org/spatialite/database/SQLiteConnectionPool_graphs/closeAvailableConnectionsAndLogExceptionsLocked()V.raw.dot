digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked():void type: DIRECT \l0x0003: IGET  (r0 I:org.spatialite.database.SQLiteConnection) = (r1 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailablePrimaryConnection org.spatialite.database.SQLiteConnection \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:org.spatialite.database.SQLiteConnection) = (r1 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailablePrimaryConnection org.spatialite.database.SQLiteConnection \l0x0009: INVOKE  \l  (r1 I:org.spatialite.database.SQLiteConnectionPool)\l  (r0 I:org.spatialite.database.SQLiteConnection)\l org.spatialite.database.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(org.spatialite.database.SQLiteConnection):void type: DIRECT \l0x000c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: IPUT  \l  (r0 I:org.spatialite.database.SQLiteConnection)\l  (r1 I:org.spatialite.database.SQLiteConnectionPool)\l org.spatialite.database.SQLiteConnectionPool.mAvailablePrimaryConnection org.spatialite.database.SQLiteConnection \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked((r1 'this' I:org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

