digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.markAcquiredConnectionsLocked(Lorg\/spatialite\/database\/SQLiteConnectionPool$AcquiredConnectionStatus;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.WeakHashMap\<org.spatialite.database.SQLiteConnection, org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus\>) = (r5 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAcquiredConnections java.util.WeakHashMap \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.WeakHashMap) java.util.WeakHashMap.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0053 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x000a: IGET  (r1 I:java.util.WeakHashMap\<org.spatialite.database.SQLiteConnection, org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus\>) = (r5 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAcquiredConnections java.util.WeakHashMap \l0x000c: INVOKE  (r1 I:int) = (r1 I:java.util.WeakHashMap) java.util.WeakHashMap.size():int type: VIRTUAL \l0x0010: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0013: IGET  (r1 I:java.util.WeakHashMap\<org.spatialite.database.SQLiteConnection, org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus\>) = (r5 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAcquiredConnections java.util.WeakHashMap \l0x0015: INVOKE  (r1 I:java.util.Set) = (r1 I:java.util.WeakHashMap) java.util.WeakHashMap.entrySet():java.util.Set type: VIRTUAL \l0x0019: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x003d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Map$Entry) java.util.Map.Entry.getValue():java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r3 I:org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus) = (org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: SGET  (r4 I:org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus) =  org.spatialite.database.SQLiteConnectionPool.AcquiredConnectionStatus.DISCARD org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map$Entry) java.util.Map.Entry.getKey():java.lang.Object type: INTERFACE \l0x0039: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0053 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x004b: CHECK_CAST  (r1 I:org.spatialite.database.SQLiteConnection) = (org.spatialite.database.SQLiteConnection) (r1 I:?[OBJECT, ARRAY]) \l0x004d: IGET  (r2 I:java.util.WeakHashMap\<org.spatialite.database.SQLiteConnection, org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus\>) = (r5 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAcquiredConnections java.util.WeakHashMap \l0x004f: INVOKE  \l  (r2 I:java.util.WeakHashMap)\l  (r1 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l java.util.WeakHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|0x0053: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteConnectionPool.markAcquiredConnectionsLocked((r5 'this' I:org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS]), (r6 I:org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_3;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_11;
}

