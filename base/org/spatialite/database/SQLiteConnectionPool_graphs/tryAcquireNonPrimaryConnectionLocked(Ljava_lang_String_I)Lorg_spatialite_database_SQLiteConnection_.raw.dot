digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(Ljava\/lang\/String;I)Lorg\/spatialite\/database\/SQLiteConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.ArrayList\<org.spatialite.database.SQLiteConnection\>) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailableNonPrimaryConnections java.util.ArrayList \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:10:0x0029 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r4 I:java.util.ArrayList\<org.spatialite.database.SQLiteConnection\>) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailableNonPrimaryConnections java.util.ArrayList \l0x0011: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0015: CHECK_CAST  (r4 I:org.spatialite.database.SQLiteConnection) = (org.spatialite.database.SQLiteConnection) (r4 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r5 I:boolean) = \l  (r4 I:org.spatialite.database.SQLiteConnection)\l  (r7 I:java.lang.String)\l org.spatialite.database.SQLiteConnection.isPreparedStatementInCache(java.lang.String):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r7 I:java.util.ArrayList\<org.spatialite.database.SQLiteConnection\>) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailableNonPrimaryConnections java.util.ArrayList \l0x001f: INVOKE  (r7 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.remove(int):java.lang.Object type: VIRTUAL \l0x0022: INVOKE  \l  (r6 I:org.spatialite.database.SQLiteConnectionPool)\l  (r4 I:org.spatialite.database.SQLiteConnection)\l  (r8 I:int)\l org.spatialite.database.SQLiteConnectionPool.finishAcquireConnectionLocked(org.spatialite.database.SQLiteConnection, int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: RETURN  (r4 I:org.spatialite.database.SQLiteConnection) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IGET  (r7 I:java.util.ArrayList\<org.spatialite.database.SQLiteConnection\>) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailableNonPrimaryConnections java.util.ArrayList \l0x002d: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x002e: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.remove(int):java.lang.Object type: VIRTUAL \l0x0032: CHECK_CAST  (r7 I:org.spatialite.database.SQLiteConnection) = (org.spatialite.database.SQLiteConnection) (r7 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  \l  (r6 I:org.spatialite.database.SQLiteConnectionPool)\l  (r7 I:org.spatialite.database.SQLiteConnection)\l  (r8 I:int)\l org.spatialite.database.SQLiteConnectionPool.finishAcquireConnectionLocked(org.spatialite.database.SQLiteConnection, int):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: RETURN  (r7 I:org.spatialite.database.SQLiteConnection) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IGET  (r7 I:java.util.WeakHashMap\<org.spatialite.database.SQLiteConnection, org.spatialite.database.SQLiteConnectionPool$AcquiredConnectionStatus\>) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAcquiredConnections java.util.WeakHashMap \l0x003a: INVOKE  (r7 I:int) = (r7 I:java.util.WeakHashMap) java.util.WeakHashMap.size():int type: VIRTUAL \l0x003e: IGET  (r0 I:org.spatialite.database.SQLiteConnection) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mAvailablePrimaryConnection org.spatialite.database.SQLiteConnection \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0044 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0044|0x0044: IGET  (r0 I:int) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mMaxConnectionPoolSize int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: IF  (r7 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:20:0x004a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: RETURN  (r7 I:org.spatialite.database.SQLiteConnection) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004a|0x004a: IGET  (r7 I:org.spatialite.database.SQLiteDatabaseConfiguration) = (r6 I:org.spatialite.database.SQLiteConnectionPool) org.spatialite.database.SQLiteConnectionPool.mConfiguration org.spatialite.database.SQLiteDatabaseConfiguration \l0x004c: INVOKE  (r7 I:org.spatialite.database.SQLiteConnection) = \l  (r6 I:org.spatialite.database.SQLiteConnectionPool)\l  (r7 I:org.spatialite.database.SQLiteDatabaseConfiguration)\l  (r1 I:boolean)\l org.spatialite.database.SQLiteConnectionPool.openConnectionLocked(org.spatialite.database.SQLiteDatabaseConfiguration, boolean):org.spatialite.database.SQLiteConnection type: DIRECT \l0x0050: INVOKE  \l  (r6 I:org.spatialite.database.SQLiteConnectionPool)\l  (r7 I:org.spatialite.database.SQLiteConnection)\l  (r8 I:int)\l org.spatialite.database.SQLiteConnectionPool.finishAcquireConnectionLocked(org.spatialite.database.SQLiteConnection, int):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: RETURN  (r7 I:org.spatialite.database.SQLiteConnection) \l}"];
MethodNode[shape=record,label="{private org.spatialite.database.SQLiteConnection org.spatialite.database.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked((r6 'this' I:org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_4;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

