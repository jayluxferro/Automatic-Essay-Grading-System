digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(I)Lorg\/spatialite\/database\/SQLiteConnection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.spatialite.database.SQLiteConnection r0 = r3.mAvailablePrimaryConnection\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r0 == null) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r3.mAvailablePrimaryConnection = null\lfinishAcquireConnectionLocked(r0, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|java.util.Iterator r0 = r3.mAcquiredConnections.keySet().iterator()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|LOOP_START\lLOOP:0: B:5:0x0015\-\>B:8:0x0025\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|if (r0.hasNext() == false) goto L_0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b}"];
Node_8 [shape=record,label="{8\:\ 0x0025|LOOP_END\lLOOP:0: B:5:0x0015\-\>B:8:0x0025\l|if (r0.next().isPrimaryConnection() == false) goto L_0x0015\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|RETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|org.spatialite.database.SQLiteConnection r0 = openConnectionLocked(r3.mConfiguration, true)\lfinishAcquireConnectionLocked(r0, r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private org.spatialite.database.SQLiteConnection org.spatialite.database.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked((r3v0 'this' org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_9;
Node_13 -> Node_10;
}

