digraph "CFG fororg.spatialite.database.SQLiteConnectionPool.shouldYieldConnection(Lorg\/spatialite\/database\/SQLiteConnection;I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object r0 = r2.mLock\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r2.mAcquiredConnections.containsKey(r3) == false) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b}"];
Node_6 [shape=record,label="{6\:\ 0x000d|if (r2.mIsOpen != false) goto L_0x0012\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f}"];
Node_8 [shape=record,label="{8\:\ 0x0010|monitor\-exit(r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|boolean r3 = isSessionBlockingImportantConnectionWaitersLocked(r3.isPrimaryConnection(), r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|monitor\-exit(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c}"];
Node_14 [shape=record,label="{14\:\ 0x0023|throw new java.lang.IllegalStateException(\"Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|REMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public boolean org.spatialite.database.SQLiteConnectionPool.shouldYieldConnection((r2v0 'this' org.spatialite.database.SQLiteConnectionPool A[IMMUTABLE_TYPE, THIS]), (r3v0 org.spatialite.database.SQLiteConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

