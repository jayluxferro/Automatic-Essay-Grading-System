digraph "CFG fororg.spatialite.database.SQLiteQueryBuilder.buildQueryString(ZLjava\/lang\/String;[Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_1954359145 {
label = "R(1:(1:5)(1:(5:12|(1:14)|(1:19)(1:18)|20|21)(2:10|11)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_497429812 {
label = "IF [B:1:0x0004, B:3:0x000a] THEN: R(1:5) ELSE: R(1:(5:12|(1:14)|(1:19)(1:18)|20|21)(2:10|11))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if (android.text.TextUtils.isEmpty(r6) != false) goto L_0x0006\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ADDED_TO_REGION\l|if (android.text.TextUtils.isEmpty(r7) != true) goto L_0x000d\l}"];
subgraph cluster_Region_81360490 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|throw new java.lang.IllegalArgumentException(\"HAVING clauses are only permitted when using a groupBy clause\")\l}"];
}
subgraph cluster_Region_1976750637 {
label = "R(1:(5:12|(1:14)|(1:19)(1:18)|20|21)(2:10|11)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1745483153 {
label = "IF [B:7:0x0019, B:9:0x0025] THEN: R(5:12|(1:14)|(1:19)(1:18)|20|21) ELSE: R(2:10|11) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0019|if (android.text.TextUtils.isEmpty(r9) == true) goto L_0x003f\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|ADDED_TO_REGION\l|if (sLimitPattern.matcher(r9).matches() == true) goto L_0x003f\l}"];
subgraph cluster_Region_1677366494 {
label = "R(5:12|(1:14)|(1:19)(1:18)|20|21)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x003f|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(120)\lr0.append(\"SELECT \")\l}"];
subgraph cluster_IfRegion_1147841065 {
label = "IF [B:13:0x004b] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x004b|if (r2 == true) goto L_0x004d\l}"];
subgraph cluster_Region_1723093815 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x004d|r0.append(\"DISTINCT \")\l}"];
}
}
subgraph cluster_IfRegion_198176488 {
label = "IF [B:15:0x0052, B:17:0x0055] THEN: R(1:19) ELSE: R(1:18)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0052|if (r4 == null) goto L_0x005b\l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|ADDED_TO_REGION\l|if (r4.length == 0) goto L_0x005b\l}"];
subgraph cluster_Region_1961548243 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x005b|r0.append(\"* \")\l}"];
}
subgraph cluster_Region_2076307304 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0057|appendColumns(r0, r4)\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x0060|r0.append(\"FROM \")\lr0.append(r3)\lappendClause(r0, \" WHERE \", r5)\lappendClause(r0, \" GROUP BY \", r6)\lappendClause(r0, \" HAVING \", r7)\lappendClause(r0, \" ORDER BY \", r8)\lappendClause(r0, \" LIMIT \", r9)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0085|RETURN\l|return r0.toString()\l}"];
}
subgraph cluster_Region_1752106502 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028}"];
Node_11 [shape=record,label="{11\:\ 0x003e|throw new java.lang.IllegalArgumentException(\"invalid LIMIT clauses:\" + r9)\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0006}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0015}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001b}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0054}"];
MethodNode[shape=record,label="{public static java.lang.String org.spatialite.database.SQLiteQueryBuilder.buildQueryString((r2v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_10 -> Node_11;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_16 -> Node_17;
}

