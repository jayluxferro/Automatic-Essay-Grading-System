digraph "CFG fororg.spatialite.database.SQLiteQueryBuilder.buildUnionQuery([Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder(128)\lint r1 = r6.length\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r5.mDistinct == false) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|java.lang.String r2 = \" UNION \"\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|java.lang.String r2 = \" UNION ALL \"\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v2 java.lang.String), (r2v3 java.lang.String) binds: [B:3:0x000f, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|r3 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0011, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0012\-\>B:8:0x0019\l|if (r3 \>= r1) goto L_0x0021\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (r3 \<= 0) goto L_0x0019\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|r0.append(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_END\lLOOP:0: B:5:0x0012\-\>B:8:0x0019\l|r0.append(r6[r3])\lint r3 = r3 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|appendClause(r0, \" ORDER BY \", r7)\lappendClause(r0, \" LIMIT \", r8)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|RETURN\l|return r0.toString()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String org.spatialite.database.SQLiteQueryBuilder.buildUnionQuery((r5v0 'this' org.spatialite.database.SQLiteQueryBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_12;
Node_8 -> Node_5;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

