digraph "CFG fororg.spatialite.database.SQLiteQueryBuilder.buildQueryString(ZLjava\/lang\/String;[Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r6 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r7 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"HAVING clauses are only permitted when using a groupBy clause\" \l0x0011: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) = (r9 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: SGET  (r0 I:java.util.regex.Pattern) =  org.spatialite.database.SQLiteQueryBuilder.sLimitPattern java.util.regex.Pattern \l0x001d: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r0 I:java.util.regex.Pattern)\l  (r9 I:java.lang.CharSequence)\l java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x0021: INVOKE  (r0 I:boolean) = (r0 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002a: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002c: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002f: CONST_STR  (r4 I:java.lang.String) =  \"invalid LIMIT clauses:\" \l0x0031: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r3 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003b: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0041: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (120(0x78, float:1.68E\-43) ?[int, float, short, byte, char])\l \l0x0043: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.\<init\>(int):void type: DIRECT \l0x0046: CONST_STR  (r1 I:java.lang.String) =  \"SELECT \" \l0x0048: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0052 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: CONST_STR  (r2 I:java.lang.String) =  \"DISTINCT \" \l0x004f: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0054|0x0054: ARRAY_LENGTH  (r2 I:int) = (r4 I:?[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String[]) org.spatialite.database.SQLiteQueryBuilder.appendColumns(java.lang.StringBuilder, java.lang.String[]):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|0x005b: CONST_STR  (r2 I:java.lang.String) =  \"* \" \l0x005d: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0060|0x0060: CONST_STR  (r2 I:java.lang.String) =  \"FROM \" \l0x0062: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0065: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0068: CONST_STR  (r2 I:java.lang.String) =  \" WHERE \" \l0x006a: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l  (r5 I:java.lang.String)\l org.spatialite.database.SQLiteQueryBuilder.appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String):void type: STATIC \l0x006d: CONST_STR  (r2 I:java.lang.String) =  \" GROUP BY \" \l0x006f: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l  (r6 I:java.lang.String)\l org.spatialite.database.SQLiteQueryBuilder.appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String):void type: STATIC \l0x0072: CONST_STR  (r2 I:java.lang.String) =  \" HAVING \" \l0x0074: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l  (r7 I:java.lang.String)\l org.spatialite.database.SQLiteQueryBuilder.appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String):void type: STATIC \l0x0077: CONST_STR  (r2 I:java.lang.String) =  \" ORDER BY \" \l0x0079: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l  (r8 I:java.lang.String)\l org.spatialite.database.SQLiteQueryBuilder.appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String):void type: STATIC \l0x007c: CONST_STR  (r2 I:java.lang.String) =  \" LIMIT \" \l0x007e: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.String)\l  (r9 I:java.lang.String)\l org.spatialite.database.SQLiteQueryBuilder.appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String):void type: STATIC \l0x0081: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0085|0x0085: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String org.spatialite.database.SQLiteQueryBuilder.buildQueryString((r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

