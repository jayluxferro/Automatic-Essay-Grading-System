digraph "CFG fororg.spatialite.database.CloseGuard.open(Ljava\/lang\/String;)V" {
subgraph cluster_Region_503642141 {
label = "R(1:(1:8)(1:(1:5)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_999095758 {
label = "IF [B:0:0x0000] THEN: R(1:8) ELSE: R(1:(1:5)(0))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 == null) goto L_0x002a\l}"];
subgraph cluster_Region_1013460023 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0031|throw new java.lang.NullPointerException(\"closer == null\")\l}"];
}
subgraph cluster_Region_761826898 {
label = "R(1:(1:5)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_336941042 {
label = "IF [B:2:0x0004, B:4:0x0008] THEN: R(1:5) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r2 != NOOP) goto L_0x0006\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|ADDED_TO_REGION\l|if (ENABLED != false) goto L_0x000b\l}"];
subgraph cluster_Region_1210819123 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|r2.allocationSite = new java.lang.Throwable(\"Explicit termination method '\" + r3 + \"' not called\")\l}"];
}
subgraph cluster_Region_903820949 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0028}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002a}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.spatialite.database.CloseGuard.open((r2v0 'this' org.spatialite.database.CloseGuard A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_8;
}

