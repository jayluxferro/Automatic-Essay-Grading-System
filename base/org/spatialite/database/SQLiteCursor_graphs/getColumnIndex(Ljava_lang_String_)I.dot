digraph "CFG fororg.spatialite.database.SQLiteCursor.getColumnIndex(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mColumnNameMap != null) goto L_0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.lang.String[] r0 = r6.mColumns\lint r1 = r0.length\landroid.util.SparseIntArray r2 = new android.util.SparseIntArray(r1)\lr3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lPHI: r3 \l  PHI: (r3v2 int) = (r3v1 int), (r3v3 int) binds: [B:2:0x0004, B:4:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000d\-\>B:4:0x000f\l|if (r3 \>= r1) goto L_0x001b\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:4:0x000f\l|r2.put(r0[r3].hashCode(), r3)\lint r3 = r3 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|r6.mColumnNameMap = r2\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|int r0 = r7.lastIndexOf(46)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if (r0 == \-1) goto L_0x0047\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|java.lang.Exception r2 = new java.lang.Exception()\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"requesting column name with table name \-\- \")\lr4.append(r7)\landroid.util.Log.e(TAG, r4.toString(), r2)\ljava.lang.String r7 = r7.substring(r0 + 1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|PHI: r7 \l  PHI: (r7v1 java.lang.String) = (r7v0 java.lang.String), (r7v4 java.lang.String) binds: [B:7:0x0024, B:8:0x0026] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|RETURN\l|return r6.mColumnNameMap.get(r7.hashCode(), \-1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int org.spatialite.database.SQLiteCursor.getColumnIndex((r6v0 'this' org.spatialite.database.SQLiteCursor A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_5;
}

