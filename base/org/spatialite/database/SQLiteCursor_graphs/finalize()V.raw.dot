digraph "CFG fororg.spatialite.database.SQLiteCursor.finalize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:org.spatialite.CursorWindow) = (r1 I:org.spatialite.database.SQLiteCursor) org.spatialite.database.SQLiteCursor.mWindow org.spatialite.CursorWindow A[Catch:\{ all \-\> 0x0010 \}, TRY_ENTER]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r0 I:org.spatialite.database.CloseGuard) = (r1 I:org.spatialite.database.SQLiteCursor) org.spatialite.database.SQLiteCursor.mCloseGuard org.spatialite.database.CloseGuard A[Catch:\{ all \-\> 0x0010 \}]\l0x0006: INVOKE  (r0 I:org.spatialite.database.CloseGuard) org.spatialite.database.CloseGuard.warnIfOpen():void type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0009: INVOKE  (r1 I:org.spatialite.database.SQLiteCursor) org.spatialite.database.SQLiteCursor.close():void type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r1 I:org.spatialite.AbstractWindowedCursor) org.spatialite.AbstractWindowedCursor.finalize():void type: SUPER \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x0010: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: INVOKE  (r1 I:org.spatialite.AbstractWindowedCursor) org.spatialite.AbstractWindowedCursor.finalize():void type: SUPER \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void org.spatialite.database.SQLiteCursor.finalize((r1 'this' I:org.spatialite.database.SQLiteCursor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

