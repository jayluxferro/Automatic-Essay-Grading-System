digraph "CFG fororg.spatialite.database.SQLiteCursor.close()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:org.spatialite.AbstractWindowedCursor) org.spatialite.AbstractWindowedCursor.close():void type: SUPER \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0004\l|0x0004: IGET  (r0 I:org.spatialite.database.SQLiteQuery) = (r1 I:org.spatialite.database.SQLiteCursor) org.spatialite.database.SQLiteCursor.mQuery org.spatialite.database.SQLiteQuery A[Catch:\{ all \-\> 0x0010 \}, TRY_ENTER]\l0x0006: INVOKE  (r0 I:org.spatialite.database.SQLiteQuery) org.spatialite.database.SQLiteQuery.close():void type: VIRTUAL A[Catch:\{ all \-\> 0x0010 \}]\l0x0009: IGET  (r0 I:org.spatialite.database.SQLiteCursorDriver) = (r1 I:org.spatialite.database.SQLiteCursor) org.spatialite.database.SQLiteCursor.mDriver org.spatialite.database.SQLiteCursorDriver A[Catch:\{ all \-\> 0x0010 \}]\l0x000b: INVOKE  (r0 I:org.spatialite.database.SQLiteCursorDriver) org.spatialite.database.SQLiteCursorDriver.cursorClosed():void type: INTERFACE A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN   A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|ExcHandler: all null\lSplitter:B:2:0x0004\l|0x0010: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0010 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0010 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.spatialite.database.SQLiteCursor.close((r1 'this' I:org.spatialite.database.SQLiteCursor A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

