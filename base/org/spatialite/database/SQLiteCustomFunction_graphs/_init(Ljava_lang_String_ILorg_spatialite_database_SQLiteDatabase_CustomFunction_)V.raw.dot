digraph "CFG fororg.spatialite.database.SQLiteCustomFunction.\<init\>(Ljava\/lang\/String;ILorg\/spatialite\/database\/SQLiteDatabase$CustomFunction;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IPUT  \l  (r1 I:java.lang.String)\l  (r0 I:org.spatialite.database.SQLiteCustomFunction)\l org.spatialite.database.SQLiteCustomFunction.name java.lang.String \l0x0007: IPUT  \l  (r2 I:int)\l  (r0 I:org.spatialite.database.SQLiteCustomFunction)\l org.spatialite.database.SQLiteCustomFunction.numArgs int \l0x0009: IPUT  \l  (r3 I:org.spatialite.database.SQLiteDatabase$CustomFunction)\l  (r0 I:org.spatialite.database.SQLiteCustomFunction)\l org.spatialite.database.SQLiteCustomFunction.callback org.spatialite.database.SQLiteDatabase$CustomFunction \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000e: CONST_STR  (r2 I:java.lang.String) =  \"name must not be null.\" \l0x0010: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.spatialite.database.SQLiteCustomFunction.\<init\>((r0 'this' I:org.spatialite.database.SQLiteCustomFunction A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.spatialite.database.SQLiteDatabase$CustomFunction A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

