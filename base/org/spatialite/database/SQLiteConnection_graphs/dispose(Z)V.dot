digraph "CFG fororg.spatialite.database.SQLiteConnection.dispose(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r4.mCloseGuard == null) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r5 == false) goto L_0x000b\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|r4.mCloseGuard.warnIfOpen()\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|r4.mCloseGuard.close()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if ((r4.mConnectionPtr \> 0 ? 1 : (r4.mConnectionPtr == 0 ? 0 : \-1)) == 0) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|int r5 = r4.mRecentOperations.beginOperation(\"close\", (java.lang.String) null, (java.lang.Object[]) null)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|SYNTHETIC\lSplitter:B:8:0x0021\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ all \-\> 0x0033 \}\lSplitter:B:8:0x0021\l|r4.mPreparedStatementCache.evictAll()     \/\/ Catch:\{ all \-\> 0x0033 \}\lnativeClose(r4.mConnectionPtr)     \/\/ Catch:\{ all \-\> 0x0033 \}\lr4.mConnectionPtr = 0     \/\/ Catch:\{ all \-\> 0x0033 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|DONT_GENERATE\l|org.spatialite.database.SQLiteConnection$OperationLog r0 = r4.mRecentOperations\lr0.endOperation(r5)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|ExcHandler:  FINALLY\lSplitter:B:8:0x0021\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|FINALLY_INSNS\l|r4.mRecentOperations.endOperation(r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|throw r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void org.spatialite.database.SQLiteConnection.dispose((r4v0 'this' org.spatialite.database.SQLiteConnection A[IMMUTABLE_TYPE, THIS]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

