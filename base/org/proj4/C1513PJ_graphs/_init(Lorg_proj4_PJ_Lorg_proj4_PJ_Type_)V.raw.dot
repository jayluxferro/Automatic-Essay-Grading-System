digraph "CFG fororg.proj4.PJ.\<init\>(Lorg\/proj4\/PJ;Lorg\/proj4\/PJ$Type;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: SGET  (r0 I:org.proj4.PJ$Type) =  org.proj4.PJ.Type.GEOGRAPHIC org.proj4.PJ$Type \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r0 I:long) = (r5 I:org.proj4.PJ) org.proj4.PJ.allocateGeoPJ(org.proj4.PJ):long type: STATIC \l0x000d: IPUT  (r0 I:long), (r4 I:org.proj4.PJ) org.proj4.PJ.ptr long \l0x000f: IGET  (r0 I:long) = (r4 I:org.proj4.PJ) org.proj4.PJ.ptr long \l0x0011: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0013: CMP_L  (r6 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: NEW_INSTANCE  (r6 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001a: INVOKE  (r5 I:java.lang.String) = (r5 I:org.proj4.PJ) org.proj4.PJ.getLastError():java.lang.String type: VIRTUAL \l0x001e: INVOKE  \l  (r6 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0024: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"Can not derive the \" \l0x002b: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0031: CONST_STR  (r6 I:java.lang.String) =  \" type.\" \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r6 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003a: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: NEW_INSTANCE  (r5 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x0040: CONST_STR  (r6 I:java.lang.String) =  \"The CRS must be non\-null.\" \l0x0042: INVOKE  \l  (r5 I:java.lang.NullPointerException)\l  (r6 I:java.lang.String)\l java.lang.NullPointerException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.proj4.PJ.\<init\>((r4 'this' I:org.proj4.PJ A[IMMUTABLE_TYPE, THIS]), (r5 I:org.proj4.PJ A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.proj4.PJ$Type A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

