digraph "CFG fororg.kxml2.io.KXmlParser.parseStartTag(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.readName():java.lang.String type: DIRECT \l0x0009: IPUT  (r0 I:java.lang.String), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: IPUT  (r0 I:int), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.skip():void type: DIRECT \l0x0011: INVOKE  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x0017: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r4 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0021: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r2 I:char) org.kxml2.io.KXmlParser.read(char):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r4 I:?[int, float, short, byte, char]) = (47 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0035 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IPUT  (r3 I:boolean), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.degenerated boolean \l0x002b: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x002e: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.skip():void type: DIRECT \l0x0031: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r2 I:char) org.kxml2.io.KXmlParser.read(char):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0046 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|0x0040: CONST_STR  (r8 I:java.lang.String) =  \"Unexpected EOF\" \l0x0042: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r8 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: INVOKE  (r1 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.readName():java.lang.String type: DIRECT \l0x004a: INVOKE  (r2 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x004e|0x004e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00b6 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0050|0x0050: CONST_STR  (r8 I:java.lang.String) =  \"attr name expected\" \l0x0052: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r8 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x0055|0x0055: IGET  (r8 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0057: ARITH  (r1 I:int) = (r8 I:int) + (1 int) \l0x0059: IPUT  (r1 I:int), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x005b: ARITH  (r8 I:int) = (r8 I:int) \<\< (2 int) \l0x005d: IGET  (r1 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x005f: ARITH  (r2 I:int) = (r8 I:int) + (4 int) \l0x0061: INVOKE  (r1 I:java.lang.String[]) = \l  (r7 I:org.kxml2.io.KXmlParser)\l  (r1 I:java.lang.String[])\l  (r2 I:int)\l org.kxml2.io.KXmlParser.ensureCapacity(java.lang.String[], int):java.lang.String[] type: DIRECT \l0x0065: IPUT  (r1 I:java.lang.String[]), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0067: IGET  (r1 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0069: ARITH  (r2 I:int) = (r8 I:int) + (3 int) \l0x006b: IGET  (r4 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x006d: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x006f: IGET  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0071: IGET  (r2 I:int[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x0073: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0074|0x0074: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:25:0x0086 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0076|0x0076: IGET  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0078: ARITH  (r1 I:int) = (r1 I:int) + (4 int) \l0x007a: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x007c: IGET  (r2 I:int[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x007e: IGET  (r4 I:int[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x0080: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x0081: INVOKE  \l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l  (r0 I:int)\l  (r4 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0084: IPUT  (r1 I:int[]), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l}"];
Node_25 [shape=record,label="{25\:\ 0x0086|0x0086: IGET  (r0 I:int[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x0088: IGET  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x008a: IGET  (r2 I:int[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x008c: IGET  (r4 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x008e: ARITH  (r4 I:int) = (r4 I:int) \- (r3 I:int) \l0x008f: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x0091: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0093: IGET  (r0 I:boolean) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.processNsp boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x0095|0x0095: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0097|0x0097: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.adjustNsp():boolean type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x009b|0x009b: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x009d: IPUT  (r0 I:java.lang.String), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l}"];
Node_29 [shape=record,label="{29\:\ 0x009f|0x009f: IGET  (r0 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x00a1: IGET  (r1 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x00a3: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00a5: IGET  (r0 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x00a7: ARITH  (r1 I:int) = (r8 I:int) + (1 int) \l0x00a9: IGET  (r2 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x00ab: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l0x00ad: IGET  (r0 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x00af: ARITH  (r8 I:int) = (r8 I:int) + (2 int) \l0x00b1: IGET  (r1 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x00b3: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r8 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b5|0x00b5: RETURN   \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b6|0x00b6: IGET  (r2 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x00b8: ARITH  (r4 I:int) = (r2 I:int) + (1 int) \l0x00ba: IPUT  (r4 I:int), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x00bc: ARITH  (r2 I:int) = (r2 I:int) \<\< (2 int) \l0x00be: IGET  (r4 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00c0: ARITH  (r5 I:int) = (r2 I:int) + (4 int) \l0x00c2: INVOKE  (r4 I:java.lang.String[]) = \l  (r7 I:org.kxml2.io.KXmlParser)\l  (r4 I:java.lang.String[])\l  (r5 I:int)\l org.kxml2.io.KXmlParser.ensureCapacity(java.lang.String[], int):java.lang.String[] type: DIRECT \l0x00c6: IPUT  (r4 I:java.lang.String[]), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00c8: IGET  (r4 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00ca: ARITH  (r5 I:int) = (r2 I:int) + (1 int) \l0x00cc: CONST_STR  (r6 I:java.lang.String) =  \"\" \l0x00ce: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x00d0: IGET  (r2 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00d2: ARITH  (r4 I:int) = (r5 I:int) + (1 int) \l0x00d4: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d5: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x00d7: IGET  (r2 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00d9: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x00db: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x00dd: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.skip():void type: DIRECT \l0x00e0: INVOKE  (r2 I:int) = (r7 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x00e4: CONST  (r4 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00e6|0x00e6: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0104 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00e8|0x00e8: NEW_INSTANCE  (r2 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x00ea: INVOKE  (r2 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x00ed: CONST_STR  (r3 I:java.lang.String) =  \"Attr.value missing f. \" \l0x00ef: INVOKE  (r2 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00f2: INVOKE  (r2 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00f5: INVOKE  (r1 I:java.lang.String) = (r2 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x00f9: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r1 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l0x00fc: IGET  (r1 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00fe: CONST_STR  (r2 I:java.lang.String) =  \"1\" \l0x0100: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x0104|0x0104: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r4 I:char) org.kxml2.io.KXmlParser.read(char):void type: DIRECT \l0x0107: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.skip():void type: DIRECT \l0x010a: INVOKE  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x010e: CONST  (r2 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l0x0110: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0112|0x0112: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0120 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0114|0x0114: CONST  (r2 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0116|0x0116: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0120 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0118|0x0118: CONST_STR  (r1 I:java.lang.String) =  \"attr value delimiter missing!\" \l0x011a: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r1 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l0x011d: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0120|0x0120: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_40 [shape=record,label="{40\:\ 0x0123|0x0123: IGET  (r2 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x0125: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r1 I:int), (r3 I:boolean) org.kxml2.io.KXmlParser.pushText(int, boolean):void type: DIRECT \l0x0128: IGET  (r3 I:java.lang.String[]) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x012a: INVOKE  (r6 I:java.lang.String) = (r7 I:org.kxml2.io.KXmlParser), (r2 I:int) org.kxml2.io.KXmlParser.get(int):java.lang.String type: DIRECT \l0x012e: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[OBJECT, ARRAY])\l \l0x0130: IPUT  (r2 I:int), (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l}"];
Node_41 [shape=record,label="{41\:\ 0x0132|0x0132: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e \l}"];
Node_42 [shape=record,label="{42\:\ 0x0134|0x0134: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.parseStartTag((r7 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_22;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_3;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_3;
Node_41 -> Node_42[style=dashed];
Node_42 -> Node_3;
}

