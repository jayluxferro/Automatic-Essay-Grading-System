digraph "CFG fororg.kxml2.io.KXmlParser.peek(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r6 I:?[int, byte, short, char]) \< (r0 I:?[int, byte, short, char])  \-\> B:22:0x006d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:char[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l0x0006: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r0 I:java.io.Reader) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.reader java.io.Reader \l0x000d: INVOKE  (r0 I:int) = (r0 I:java.io.Reader) java.io.Reader.read():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcPos int \l0x0014: IGET  (r3 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcCount int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IGET  (r0 I:char[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l0x001a: IGET  (r3 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcPos int \l0x001c: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x001e: IPUT  (r4 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcPos int \l0x0020: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IGET  (r0 I:java.io.Reader) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.reader java.io.Reader \l0x0025: IGET  (r3 I:char[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l0x0027: IGET  (r4 I:char[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l0x0029: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l0x002a: INVOKE  (r0 I:int) = \l  (r0 I:java.io.Reader)\l  (r3 I:char[])\l  (r1 I:int)\l  (r4 I:int)\l java.io.Reader.read(char[], int, int):int type: VIRTUAL \l0x002e: IPUT  (r0 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcCount int \l0x0030: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcCount int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:11:0x0036 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: IGET  (r0 I:char[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l0x0038: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = \l  (r0 I:char[] A[IMMUTABLE_TYPE])\l  (r1 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IPUT  (r2 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcPos int \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: CONST  (r3 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l0x003e: CONST  (r4 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|0x0042: IPUT  (r2 I:boolean), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.wasCR boolean \l0x0044: IGET  (r0 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0046: IGET  (r1 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0048: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x004a: IPUT  (r2 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x004c: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x004f|0x004f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0060 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0051|0x0051: IGET  (r0 I:boolean) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.wasCR boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|0x0053: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006a \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: IGET  (r0 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0057: IGET  (r2 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0059: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x005b: IPUT  (r3 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x005d: APUT  \l  (r0 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|0x0060: IGET  (r2 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0062: IGET  (r3 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0064: ARITH  (r4 I:int) = (r3 I:int) + (1 int) \l0x0066: IPUT  (r4 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0068: APUT  \l  (r2 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|0x006a: IPUT  (r1 I:boolean), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.wasCR boolean \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: IGET  (r0 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x006f: AGET  (r6 I:?[int, float]) = (r0 I:?[int, float][]), (r6 I:?[int, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0071|0x0071: RETURN  (r6 I:int) \l}"];
MethodNode[shape=record,label="{private final int org.kxml2.io.KXmlParser.peek((r5 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_22;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_0;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_0;
Node_22 -> Node_23;
}

