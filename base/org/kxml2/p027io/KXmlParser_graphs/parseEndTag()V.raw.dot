digraph "CFG fororg.kxml2.io.KXmlParser.parseEndTag()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0003: INVOKE  (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0006: INVOKE  (r0 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.readName():java.lang.String type: DIRECT \l0x000a: IPUT  (r0 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x000c: INVOKE  (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.skip():void type: DIRECT \l0x000f: CONST  (r0 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x0011: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r0 I:char) org.kxml2.io.KXmlParser.read(char):void type: DIRECT \l0x0014: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0016: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0018: ARITH  (r0 I:int) = (r0 I:int) \<\< (2 int) \l0x001a: IGET  (r1 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x001c: CONST  (r2 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0028 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: CONST_STR  (r0 I:java.lang.String) =  \"element stack empty\" \l0x0022: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l0x0025: IPUT  (r2 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|0x0027: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IGET  (r1 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x002a: IGET  (r3 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x002c: ARITH  (r4 I:int) = (r0 I:int) + (3 int) \l0x002e: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0030: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0082 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|0x0036: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0038: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x003b: CONST_STR  (r3 I:java.lang.String) =  \"expected: \/\" \l0x003d: INVOKE  (r1 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0040: IGET  (r3 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0042: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0044: INVOKE  (r1 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0047: CONST_STR  (r3 I:java.lang.String) =  \" read: \" \l0x0049: INVOKE  (r1 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x004c: IGET  (r3 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x004e: INVOKE  (r1 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0051: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0055: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r1 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l0x0058: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0059|0x0059: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x007a \l}"];
Node_8 [shape=record,label="{8\:\ 0x005b|0x005b: IGET  (r3 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x005d: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x0061: IGET  (r4 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0063: ARITH  (r5 I:int) = (r1 I:int) + (3 int) \l0x0065: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0067: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x006b: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x006f|0x006f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x007a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0071|0x0071: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l0x0073: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0075: IPUT  (r3 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l0x0077: ARITH  (r1 I:int) = (r1 I:int) + (\-4 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x007a|0x007a: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0082 \l}"];
Node_12 [shape=record,label="{12\:\ 0x007c|0x007c: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007d: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l0x007f: IPUT  (r2 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0081|0x0081: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0082|0x0082: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0084: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0086: IPUT  (r1 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x0088: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x008a: ARITH  (r2 I:int) = (r0 I:int) + (1 int) \l0x008c: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x008e: IPUT  (r1 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x0090: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0092: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l0x0094: AGET  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0096: IPUT  (r0 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l}"];
Node_15 [shape=record,label="{15\:\ 0x0098|0x0098: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.parseEndTag((r6 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_7;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

