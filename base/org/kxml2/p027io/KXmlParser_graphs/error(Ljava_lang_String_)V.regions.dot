digraph "CFG fororg.kxml2.io.KXmlParser.error(Ljava\/lang\/String;)V" {
subgraph cluster_Region_878360395 {
label = "R(1:(1:5)(1:(1:4)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_670727368 {
label = "IF [B:1:0x0002] THEN: R(1:5) ELSE: R(1:(1:4)(0))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.relaxed != true) goto L_0x001c\l}"];
subgraph cluster_Region_1239256979 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001c|exception(r3)\l}"];
}
subgraph cluster_Region_1903701108 {
label = "R(1:(1:4)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_284765695 {
label = "IF [B:3:0x0006] THEN: R(1:4) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.error == null) goto L_0x0008\l}"];
subgraph cluster_Region_1582563578 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|java.lang.StringBuffer java.lang.StringBuffer r0 = new java.lang.StringBuffer()\lr0.append(\"ERR: \")\lr0.append(r3)\lr2.error = r0.toString()\l}"];
}
subgraph cluster_Region_1687228180 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.error((r2v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_5 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

