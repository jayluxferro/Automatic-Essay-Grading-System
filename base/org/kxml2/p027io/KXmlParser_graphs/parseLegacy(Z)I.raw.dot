digraph "CFG fororg.kxml2.io.KXmlParser.parseLegacy(Z)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0002: INVOKE  (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0009: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x000a: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x000c: CONST  (r4 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x000e: CONST  (r5 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l0x0010: CONST  (r6 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l0x0012: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0111 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x001a: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (120(0x78, float:1.68E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0022: CONST  (r9 I:?[int, float, short, byte, char]) = (88 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0109 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r8 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x002a: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (109(0x6d, float:1.53E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0036 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r8 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0032: CONST  (r9 I:?[int, float, short, byte, char]) = (77 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0109 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0046 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x003c: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l0x003f: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r8 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0043: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: INVOKE  (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0049: INVOKE  (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x004c: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0050: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (108(0x6c, float:1.51E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x005c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0058: CONST  (r9 I:?[int, float, short, byte, char]) = (76 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|0x005a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0109 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005c|0x005c: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r8 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0060: CONST  (r9 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0062|0x0062: IF  (r1 I:?[int, byte, short, char]) \> (r9 I:?[int, byte, short, char])  \-\> B:52:0x0109 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.line int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|0x0066: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x006d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|0x0068: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.column int \l0x006a: CONST  (r0 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x006b|0x006b: IF  (r13 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:23:0x0072 \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: CONST_STR  (r13 I:java.lang.String) =  \"PI must not start with xml\" \l0x006f: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r13 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_23 [shape=record,label="{23\:\ 0x0072|0x0072: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r8 I:boolean) org.kxml2.io.KXmlParser.parseStartTag(boolean):void type: DIRECT \l0x0075: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x0077: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0078|0x0078: IF  (r13 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:27:0x0086 \l}"];
Node_25 [shape=record,label="{25\:\ 0x007a|0x007a: CONST_STR  (r13 I:java.lang.String) =  \"version\" \l0x007c: IGET  (r1 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x007e: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0080: INVOKE  (r13 I:boolean) = (r13 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0084|0x0084: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x008b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0086|0x0086: CONST_STR  (r13 I:java.lang.String) =  \"version expected\" \l0x0088: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r13 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x008b|0x008b: IGET  (r13 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x008d: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x008e: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l \l0x0090: IPUT  (r13 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.version java.lang.String \l0x0092: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0094|0x0094: IF  (r8 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:33:0x00ab \l}"];
Node_30 [shape=record,label="{30\:\ 0x0096|0x0096: CONST_STR  (r13 I:java.lang.String) =  \"encoding\" \l0x0098: IGET  (r2 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x009a: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l0x009b: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x009d: INVOKE  (r13 I:boolean) = (r13 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00a1|0x00a1: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00ab \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a3|0x00a3: IGET  (r13 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00a5: CONST  (r2 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x00a6: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l \l0x00a8: IPUT  (r13 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.encoding java.lang.String \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ab|0x00ab: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00ac|0x00ac: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ae|0x00ae: IF  (r0 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:47:0x00f9 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b0|0x00b0: CONST_STR  (r13 I:java.lang.String) =  \"standalone\" \l0x00b2: IGET  (r2 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00b4: ARITH  (r3 I:int) = (r0 I:int) * (4 int) \l0x00b6: ARITH  (r4 I:int) = (r3 I:int) + (2 int) \l0x00b8: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x00ba: INVOKE  (r13 I:boolean) = (r13 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00be|0x00be: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00f9 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c0|0x00c0: IGET  (r13 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00c2: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x00c3: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r13 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l \l0x00c5: CONST_STR  (r1 I:java.lang.String) =  \"yes\" \l0x00c7: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r13 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_39 [shape=record,label="{39\:\ 0x00cb|0x00cb: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00d5 \l}"];
Node_40 [shape=record,label="{40\:\ 0x00cd|0x00cd: NEW_INSTANCE  (r13 I:java.lang.Boolean) =  java.lang.Boolean \l0x00cf: INVOKE  (r13 I:java.lang.Boolean), (r8 I:boolean) java.lang.Boolean.\<init\>(boolean):void type: DIRECT \l}"];
Node_41 [shape=record,label="{41\:\ 0x00d2|0x00d2: IPUT  (r13 I:java.lang.Boolean), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.standalone java.lang.Boolean \l}"];
Node_42 [shape=record,label="{42\:\ 0x00d5|0x00d5: CONST_STR  (r1 I:java.lang.String) =  \"no\" \l0x00d7: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r13 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x00db|0x00db: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00e3 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00dd|0x00dd: NEW_INSTANCE  (r13 I:java.lang.Boolean) =  java.lang.Boolean \l0x00df: INVOKE  (r13 I:java.lang.Boolean), (r7 I:boolean) java.lang.Boolean.\<init\>(boolean):void type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x00e3|0x00e3: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x00e5: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x00e8: CONST_STR  (r2 I:java.lang.String) =  \"illegal standalone value: \" \l0x00ea: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00ed: INVOKE  (r1 I:java.lang.StringBuffer), (r13 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00f0: INVOKE  (r13 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x00f4: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r13 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_46 [shape=record,label="{46\:\ 0x00f7|0x00f7: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_47 [shape=record,label="{47\:\ 0x00f9|0x00f9: IGET  (r13 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l}"];
Node_48 [shape=record,label="{48\:\ 0x00fb|0x00fb: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0102 \l}"];
Node_49 [shape=record,label="{49\:\ 0x00fd|0x00fd: CONST_STR  (r13 I:java.lang.String) =  \"illegal xmldecl\" \l0x00ff: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r13 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_50 [shape=record,label="{50\:\ 0x0102|0x0102: IPUT  (r8 I:boolean), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.isWhitespace boolean \l0x0104: IPUT  (r7 I:int), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x0106: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (998(0x3e6, float:1.398E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_51 [shape=record,label="{51\:\ 0x0108|0x0108: RETURN  (r13 I:int) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0109|0x0109: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x010b: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x010c: CONST  (r13 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x010e: CONST  (r10 I:?[int, float, short, byte, char]) = (63 ?[int, float, short, byte, char]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0111|0x0111: CONST  (r0 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0113|0x0113: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x0190 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0115|0x0115: INVOKE  (r0 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_56 [shape=record,label="{56\:\ 0x0119|0x0119: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0123 \l}"];
Node_57 [shape=record,label="{57\:\ 0x011b|0x011b: CONST_STR  (r0 I:java.lang.String) =  \"\-\-\" \l0x011d: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011e: CONST  (r13 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x0120: CONST  (r10 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0123|0x0123: INVOKE  (r0 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0127: CONST  (r1 I:?[int, float, short, byte, char]) = (91 ?[int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x0129|0x0129: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0134 \l}"];
Node_60 [shape=record,label="{60\:\ 0x012b|0x012b: CONST  (r13 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x012c: CONST_STR  (r0 I:java.lang.String) =  \"[CDATA[\" \l0x012e: CONST  (r1 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l0x0130: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0131: CONST  (r10 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0134|0x0134: CONST_STR  (r0 I:java.lang.String) =  \"DOCTYPE\" \l0x0136: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0137: CONST  (r13 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0139: CONST  (r10 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x013a|0x013a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_63 [shape=record,label="{63\:\ 0x013b|0x013b: INVOKE  (r11 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_64 [shape=record,label="{64\:\ 0x013f|0x013f: IF  (r1 I:?[int, byte, short, char]) \>= (r11 I:?[int, byte, short, char])  \-\> B:66:0x014b \l}"];
Node_65 [shape=record,label="{65\:\ 0x0141|0x0141: INVOKE  (r11 I:char) = (r0 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0145: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r11 I:char) org.kxml2.io.KXmlParser.read(char):void type: DIRECT \l0x0148: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_66 [shape=record,label="{66\:\ 0x014b|0x014b: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0151 \l}"];
Node_67 [shape=record,label="{67\:\ 0x014d|0x014d: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r9 I:boolean) org.kxml2.io.KXmlParser.parseDoctype(boolean):void type: DIRECT \l}"];
Node_68 [shape=record,label="{68\:\ 0x0151|0x0151: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_69 [shape=record,label="{69\:\ 0x0152|0x0152: INVOKE  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_70 [shape=record,label="{70\:\ 0x0156|0x0156: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x015e \l}"];
Node_71 [shape=record,label="{71\:\ 0x0158|0x0158: CONST_STR  (r13 I:java.lang.String) =  \"Unexpected EOF\" \l}"];
Node_72 [shape=record,label="{72\:\ 0x015a|0x015a: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r13 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_73 [shape=record,label="{73\:\ 0x015d|0x015d: RETURN  (r4 I:int) \l}"];
Node_74 [shape=record,label="{74\:\ 0x015e|0x015e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0163 \l}"];
Node_75 [shape=record,label="{75\:\ 0x0160|0x0160: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_76 [shape=record,label="{76\:\ 0x0163|0x0163: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0167 \l}"];
Node_77 [shape=record,label="{77\:\ 0x0165|0x0165: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x018e \l}"];
Node_78 [shape=record,label="{78\:\ 0x0167|0x0167: INVOKE  (r3 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r7 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_79 [shape=record,label="{79\:\ 0x016b|0x016b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x018e \l}"];
Node_80 [shape=record,label="{80\:\ 0x016d|0x016d: INVOKE  (r3 I:int) = (r12 I:org.kxml2.io.KXmlParser), (r8 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0171: CONST  (r11 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0173|0x0173: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x018e \l}"];
Node_82 [shape=record,label="{82\:\ 0x0175|0x0175: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x017e \l}"];
Node_83 [shape=record,label="{83\:\ 0x0177|0x0177: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x017e \l}"];
Node_84 [shape=record,label="{84\:\ 0x0179|0x0179: CONST_STR  (r0 I:java.lang.String) =  \"illegal comment delimiter: \-\-\-\>\" \l0x017b: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_85 [shape=record,label="{85\:\ 0x017e|0x017e: INVOKE  (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0181: INVOKE  (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_86 [shape=record,label="{86\:\ 0x0184|0x0184: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x018d \l}"];
Node_87 [shape=record,label="{87\:\ 0x0186|0x0186: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x018d \l}"];
Node_88 [shape=record,label="{88\:\ 0x0188|0x0188: IGET  (r0 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x018a: ARITH  (r0 I:int) = (r0 I:int) \- (r8 I:int) \l0x018b: IPUT  (r0 I:int), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l}"];
Node_89 [shape=record,label="{89\:\ 0x018d|0x018d: RETURN  (r13 I:int) \l}"];
Node_90 [shape=record,label="{90\:\ 0x018e|0x018e: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_91 [shape=record,label="{91\:\ 0x0190|0x0190: NEW_INSTANCE  (r13 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0192: INVOKE  (r13 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0195: CONST_STR  (r0 I:java.lang.String) =  \"illegal: \<\" \l0x0197: INVOKE  (r13 I:java.lang.StringBuffer), (r0 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x019a: INVOKE  (r13 I:java.lang.StringBuffer), (r1 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x019d: INVOKE  (r13 I:java.lang.String) = (r13 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
MethodNode[shape=record,label="{private final int org.kxml2.io.KXmlParser.parseLegacy((r12 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r13 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_53;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_52;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_52;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_52;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_52;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_46;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_41;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_52 -> Node_62;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_91;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_62;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_62;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_63;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_89;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_74;
Node_71 -> Node_72;
Node_72 -> Node_73;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_76;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_78;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_90;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_90;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_90;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_85;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_85;
Node_84 -> Node_85;
Node_85 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_89;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_89;
Node_90 -> Node_69;
Node_91 -> Node_72;
}

