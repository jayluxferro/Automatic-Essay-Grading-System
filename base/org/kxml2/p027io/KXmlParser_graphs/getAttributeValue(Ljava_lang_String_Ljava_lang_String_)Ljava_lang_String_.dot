digraph "CFG fororg.kxml2.io.KXmlParser.getAttributeValue(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = (r3.attributeCount \<\< 2) + \-4\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v4 int) binds: [B:0:0x0000, B:9:0x0027] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:9:0x0027\l|if (r0 \< 0) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r3.attributes[r0 + 2].equals(r5) == false) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if (r4 == null) goto L_0x0020\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016}"];
Node_6 [shape=record,label="{6\:\ 0x001e|if (r3.attributes[r0].equals(r4) == false) goto L_0x0027\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020}"];
Node_8 [shape=record,label="{8\:\ 0x0026|RETURN\l|return r3.attributes[r0 + 3]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:9:0x0027\l|int r0 = r0 + \-4\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|RETURN\l|return null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.String org.kxml2.io.KXmlParser.getAttributeValue((r3v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_13[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_9 -> Node_1;
Node_11 -> Node_7;
Node_12 -> Node_10;
Node_13 -> Node_7;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

