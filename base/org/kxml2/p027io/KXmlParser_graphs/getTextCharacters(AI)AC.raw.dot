digraph "CFG fororg.kxml2.io.KXmlParser.getTextCharacters([I)[C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: APUT  \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x000e: IGET  (r0 I:java.lang.String) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x0010: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0014: APUT  \l  (r5 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0016: IGET  (r5 I:java.lang.String) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x0018: INVOKE  (r5 I:char[]) = (r5 I:java.lang.String) java.lang.String.toCharArray():char[] type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN  (r5 I:char[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: APUT  \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x001f: IGET  (r0 I:int) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x0021: APUT  \l  (r5 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0023: IGET  (r5 I:char[]) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtBuf char[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: RETURN  (r5 I:char[]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0027: APUT  \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0029: APUT  \l  (r5 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x002b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: RETURN  (r5 I:char[]) \l}"];
MethodNode[shape=record,label="{public char[] org.kxml2.io.KXmlParser.getTextCharacters((r4 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

