digraph "CFG fororg.kxml2.io.KXmlParser.read()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x000d: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x000f: IGET  (r3 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0011: IGET  (r4 I:int[]) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0013: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0015: APUT  \l  (r3 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IGET  (r1 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0019: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x001a: IPUT  (r1 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x001c: IGET  (r1 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.column int \l0x001e: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001f: IPUT  (r1 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.column int \l0x0021: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: IGET  (r1 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.line int \l0x0027: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0028: IPUT  (r1 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.line int \l0x002a: IPUT  (r2 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.column int \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private final int org.kxml2.io.KXmlParser.read((r5 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

