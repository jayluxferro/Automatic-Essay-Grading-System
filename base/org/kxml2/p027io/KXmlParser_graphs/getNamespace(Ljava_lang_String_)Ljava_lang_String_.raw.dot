digraph "CFG fororg.kxml2.io.KXmlParser.getNamespace(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"xml\" \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST_STR  (r3 I:java.lang.String) =  \"http:\/\/www.w3.org\/XML\/1998\/namespace\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r3 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST_STR  (r0 I:java.lang.String) =  \"xmlns\" \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST_STR  (r3 I:java.lang.String) =  \"http:\/\/www.w3.org\/2000\/xmlns\/\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r3 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IGET  (r0 I:int) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0018: INVOKE  (r0 I:int) = (r2 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.getNamespaceCount(int):int type: VIRTUAL \l0x001c: ARITH  (r0 I:int) = (r0 I:int) \<\< (1 int) \l0x001e: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x0045 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IGET  (r1 I:java.lang.String[]) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0026: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0042 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IGET  (r3 I:java.lang.String[]) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x002c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x002e: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: RETURN  (r3 I:java.lang.String) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IGET  (r1 I:java.lang.String[]) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0033: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0035: INVOKE  (r1 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0042 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IGET  (r3 I:java.lang.String[]) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x003d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x003f: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: RETURN  (r3 I:java.lang.String) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|0x0046: RETURN  (r3 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String org.kxml2.io.KXmlParser.getNamespace((r2 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_9;
Node_20 -> Node_21;
}

