digraph "CFG fororg.kxml2.io.KXmlParser.getFeature(Ljava\/lang\/String;)Z" {
subgraph cluster_Region_88435911 {
label = "R(1:(2:(1:3)|(1:(2:(1:7)|(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_736145197 {
label = "R(2:(1:3)|(1:(2:(1:7)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1847149081 {
label = "IF [B:1:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (org.xmlpull.p030v1.XmlPullParser.FEATURE_PROCESS_NAMESPACES.equals(r3) == true) goto L_0x0008\l}"];
subgraph cluster_Region_1418740973 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r2.processNsp\l}"];
}
}
subgraph cluster_Region_2048731628 {
label = "R(1:(2:(1:7)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1420458053 {
label = "R(2:(1:7)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1887957315 {
label = "IF [B:5:0x0012] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|if (isProp(r3, false, \"relaxed\") == true) goto L_0x0014\l}"];
subgraph cluster_Region_644244626 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r2.relaxed\l}"];
}
}
subgraph cluster_Region_900168699 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0017|RETURN\l|return false\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0014}"];
MethodNode[shape=record,label="{public boolean org.kxml2.io.KXmlParser.getFeature((r2v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

