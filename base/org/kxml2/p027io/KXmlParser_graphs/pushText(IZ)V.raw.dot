digraph "CFG fororg.kxml2.io.KXmlParser.pushText(IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x004d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x004d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r3 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x000d: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:30:0x004d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: CONST  (r5 I:?[int, float, short, byte, char]) = (38 ?[int, float, short, byte, char]) \l0x0018: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.pushEntity():void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: CONST  (r5 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: IGET  (r5 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|0x002a: INVOKE  (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: INVOKE  (r4 I:int) = (r7 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|0x0032: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r4 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|0x0035: CONST  (r4 I:?[int, float, short, byte, char]) = (93 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0042 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0039|0x0039: IF  (r2 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:26:0x0042 \l}"];
Node_24 [shape=record,label="{24\:\ 0x003b|0x003b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0042 \l}"];
Node_25 [shape=record,label="{25\:\ 0x003d|0x003d: CONST_STR  (r3 I:java.lang.String) =  \"Illegal: ]]\>\" \l0x003f: INVOKE  (r7 I:org.kxml2.io.KXmlParser), (r3 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x0042|0x0042: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0047 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0044|0x0044: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0047|0x0047: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x0048|0x0048: INVOKE  (r1 I:int) = (r7 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x004d|0x004d: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.pushText((r7 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_30;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_30;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_30;
Node_7 -> Node_9;
Node_7 -> Node_30[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_13;
Node_11 -> Node_30[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_1;
}

