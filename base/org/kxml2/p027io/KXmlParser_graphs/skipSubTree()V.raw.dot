digraph "CFG fororg.kxml2.io.KXmlParser.skipSubTree()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0002: INVOKE  \l  (r4 I:org.kxml2.io.KXmlParser)\l  (r1 I:int)\l  (r0 I:java.lang.String)\l  (r0 I:java.lang.String)\l org.kxml2.io.KXmlParser.require(int, java.lang.String, java.lang.String):void type: VIRTUAL \l0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r2 I:int) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.next():int type: VIRTUAL \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0006 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlParser.skipSubTree((r4 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_1;
}

