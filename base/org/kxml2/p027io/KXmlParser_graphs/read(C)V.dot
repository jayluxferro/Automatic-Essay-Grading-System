digraph "CFG fororg.kxml2.io.KXmlParser.read(C)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = read()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if (r0 == r4) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|java.lang.StringBuffer r1 = new java.lang.StringBuffer()\lr1.append(\"expected: '\")\lr1.append(r4)\lr1.append(\"' actual: '\")\lr1.append((char) r0)\lr1.append(\"'\")\lerror(r1.toString())\l}"];
Node_3 [shape=record,label="{3\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.read((r3v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r4v0 char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

