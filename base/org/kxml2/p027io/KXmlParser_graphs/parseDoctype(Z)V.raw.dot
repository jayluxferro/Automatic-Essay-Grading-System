digraph "CFG fororg.kxml2.io.KXmlParser.parseDoctype(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: INVOKE  (r2 I:int) = (r4 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: CONST  (r3 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r3 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r3 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0016 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0024 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0024 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0024 \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|0x0022: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|0x0024: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0002 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: INVOKE  (r4 I:org.kxml2.io.KXmlParser), (r2 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|0x002a: CONST_STR  (r5 I:java.lang.String) =  \"Unexpected EOF\" \l0x002c: INVOKE  (r4 I:org.kxml2.io.KXmlParser), (r5 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.parseDoctype((r4 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_17[style=dashed];
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_1;
Node_19 -> Node_20;
}

