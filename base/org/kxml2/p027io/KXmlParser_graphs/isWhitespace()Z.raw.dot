digraph "CFG fororg.kxml2.io.KXmlParser.isWhitespace()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x000c: CONST  (r1 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST_STR  (r0 I:java.lang.String) =  \"Wrong event type\" \l0x0011: INVOKE  (r2 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r0 I:boolean) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.isWhitespace boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.kxml2.io.KXmlParser.isWhitespace((r2 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

