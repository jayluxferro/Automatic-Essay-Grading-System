digraph "CFG fororg.kxml2.io.KXmlParser.readName()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r10 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r2 I:int) = (r10 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l0x0007: CONST  (r3 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0009: CONST  (r4 I:?[int, float, short, byte, char]) = (95 ?[int, float, short, byte, char]) \l0x000b: CONST  (r5 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l0x000d: CONST  (r6 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l0x000f: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l0x0011: CONST  (r8 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r2 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r2 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (192(0xc0, float:2.69E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r2 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IGET  (r2 I:boolean) = (r10 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: CONST_STR  (r2 I:java.lang.String) =  \"name expected\" \l0x0029: INVOKE  (r10 I:org.kxml2.io.KXmlParser), (r2 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: INVOKE  (r2 I:int) = (r10 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0030: INVOKE  (r10 I:org.kxml2.io.KXmlParser), (r2 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l0x0033: INVOKE  (r2 I:int) = (r10 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IF  (r2 I:?[int, byte, short, char]) \< (r8 I:?[int, byte, short, char])  \-\> B:15:0x003b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IF  (r2 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: IF  (r2 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:17:0x003f \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: IF  (r2 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: CONST  (r9 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: IF  (r2 I:?[int, byte, short, char]) \< (r9 I:?[int, byte, short, char])  \-\> B:21:0x0047 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|0x0043: CONST  (r9 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IF  (r2 I:?[int, byte, short, char]) \<= (r9 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: CONST  (r9 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004b|0x004b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|0x004f: CONST  (r9 I:?[int, float, short, byte, char]) = (46 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: CONST  (r9 I:?[int, float, short, byte, char]) = \l  (183(0xb7, float:2.56E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0055|0x0055: IF  (r2 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_29 [shape=record,label="{29\:\ 0x0057|0x0057: INVOKE  (r1 I:java.lang.String) = (r10 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.get(int):java.lang.String type: DIRECT \l0x005b: IPUT  (r0 I:int), (r10 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l}"];
Node_30 [shape=record,label="{30\:\ 0x005d|0x005d: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private final java.lang.String org.kxml2.io.KXmlParser.readName((r10 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_12;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_12;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_12;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_20 -> Node_21[style=dashed];
Node_21 -> Node_12;
Node_21 -> Node_22[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_12;
Node_23 -> Node_24[style=dashed];
Node_24 -> Node_12;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_12;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_12;
Node_28 -> Node_29[style=dashed];
Node_29 -> Node_30;
}

