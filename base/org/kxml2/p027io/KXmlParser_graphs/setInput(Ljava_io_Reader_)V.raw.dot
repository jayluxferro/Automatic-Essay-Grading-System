digraph "CFG fororg.kxml2.io.KXmlParser.setInput(Ljava\/io\/Reader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r4 I:java.io.Reader), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.reader java.io.Reader \l0x0002: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.line int \l0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.column int \l0x0008: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x000a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: IPUT  (r1 I:java.lang.String), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x000d: IPUT  (r1 I:java.lang.String), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x000f: IPUT  (r0 I:boolean), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.degenerated boolean \l0x0011: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0012: IPUT  (r2 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x0014: IPUT  (r1 I:java.lang.String), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.encoding java.lang.String \l0x0016: IPUT  (r1 I:java.lang.String), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.version java.lang.String \l0x0018: IPUT  (r1 I:java.lang.Boolean), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.standalone java.lang.Boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|0x001d: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcPos int \l0x001f: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcCount int \l0x0021: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekCount int \l0x0023: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0025: NEW_INSTANCE  (r4 I:java.util.Hashtable) =  java.util.Hashtable \l0x0027: INVOKE  (r4 I:java.util.Hashtable) java.util.Hashtable.\<init\>():void type: DIRECT \l0x002a: IPUT  (r4 I:java.util.Hashtable), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x002c: IGET  (r4 I:java.util.Hashtable) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x002e: CONST_STR  (r0 I:java.lang.String) =  \"amp\" \l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"&\" \l0x0032: INVOKE  \l  (r4 I:java.util.Hashtable)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0035: IGET  (r4 I:java.util.Hashtable) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x0037: CONST_STR  (r0 I:java.lang.String) =  \"apos\" \l0x0039: CONST_STR  (r1 I:java.lang.String) =  \"'\" \l0x003b: INVOKE  \l  (r4 I:java.util.Hashtable)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x003e: IGET  (r4 I:java.util.Hashtable) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x0040: CONST_STR  (r0 I:java.lang.String) =  \"gt\" \l0x0042: CONST_STR  (r1 I:java.lang.String) =  \"\>\" \l0x0044: INVOKE  \l  (r4 I:java.util.Hashtable)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0047: IGET  (r4 I:java.util.Hashtable) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x0049: CONST_STR  (r0 I:java.lang.String) =  \"lt\" \l0x004b: CONST_STR  (r1 I:java.lang.String) =  \"\<\" \l0x004d: INVOKE  \l  (r4 I:java.util.Hashtable)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x0050: IGET  (r4 I:java.util.Hashtable) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x0052: CONST_STR  (r0 I:java.lang.String) =  \"quot\" \l0x0054: CONST_STR  (r1 I:java.lang.String) =  \"\"\" \l0x0056: INVOKE  \l  (r4 I:java.util.Hashtable)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0059|0x0059: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlParser.setInput((r3 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r4 I:java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

