digraph "CFG fororg.kxml2.io.KXmlParser.nextImpl()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.io.Reader) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.reader java.io.Reader \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"No Input specified\" \l0x0006: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0011: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0012: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0015: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x0017: IGET  (r3 I:boolean) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.degenerated boolean \l0x0019: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IPUT  (r4 I:boolean), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.degenerated boolean \l0x001e: IPUT  (r1 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IGET  (r3 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.error java.lang.String \l0x0023: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IGET  (r0 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.error java.lang.String \l0x0028: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:15:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: IGET  (r0 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.error java.lang.String \l0x0030: INVOKE  (r0 I:char) = (r0 I:java.lang.String), (r4 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0034: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l0x0037: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IPUT  (r5 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.error java.lang.String \l0x003c: CONST  (r0 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l0x003e: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: IGET  (r3 I:boolean) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0098 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0045|0x0045: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:25:0x0053 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: INVOKE  (r3 I:int) = (r6 I:org.kxml2.io.KXmlParser), (r4 I:int) org.kxml2.io.KXmlParser.peek(int):int type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0098 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|0x004f: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|0x0051: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:32:0x0098 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0053|0x0053: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x0055: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0056: ARITH  (r0 I:int) = (r0 I:int) \<\< (2 int) \l0x0058: IPUT  (r1 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x005a: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x005c: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x005e: IPUT  (r1 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x0060: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0062: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x0064: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0066: IPUT  (r1 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x0068: IGET  (r1 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x006a: ARITH  (r0 I:int) = (r0 I:int) + (2 int) \l0x006c: AGET  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x006e: IPUT  (r0 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x0070: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l}"];
Node_26 [shape=record,label="{26\:\ 0x0072|0x0072: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x008e \l}"];
Node_27 [shape=record,label="{27\:\ 0x0074|0x0074: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0076: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0079: CONST_STR  (r1 I:java.lang.String) =  \"missing end tag \/\" \l0x007b: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x007e: IGET  (r1 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x0080: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0083: CONST_STR  (r1 I:java.lang.String) =  \" inserted\" \l0x0085: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0088: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x008c: IPUT  (r0 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.error java.lang.String \l}"];
Node_28 [shape=record,label="{28\:\ 0x008e|0x008e: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0090|0x0090: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:31:0x0097 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|0x0092: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l0x0094: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0095: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l}"];
Node_31 [shape=record,label="{31\:\ 0x0097|0x0097: RETURN   \l}"];
Node_32 [shape=record,label="{32\:\ 0x0098|0x0098: IPUT  (r5 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x009a: IPUT  (r5 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x009c: IPUT  (r5 I:java.lang.String), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x009e: INVOKE  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekType():int type: DIRECT \l0x00a2: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x00a4: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x00a6: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a7|0x00a7: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00d7 \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a9|0x00a9: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4] t:[0x00d6, 0x00d3, 0x00cf, 0x00bb] \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ac|0x00ac: IGET  (r0 I:boolean) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.token boolean \l0x00ae: INVOKE  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser), (r0 I:boolean) org.kxml2.io.KXmlParser.parseLegacy(boolean):int type: DIRECT \l0x00b2: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x00b4: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x00b6: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (998(0x3e6, float:1.398E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b8|0x00b8: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00ba|0x00ba: RETURN   \l}"];
Node_38 [shape=record,label="{38\:\ 0x00bb|0x00bb: CONST  (r0 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l0x00bd: IGET  (r1 I:boolean) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.token boolean \l0x00bf: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l0x00c0: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r0 I:int), (r1 I:boolean) org.kxml2.io.KXmlParser.pushText(int, boolean):void type: DIRECT \l0x00c3: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c5|0x00c5: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00ce \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c7|0x00c7: IGET  (r0 I:boolean) = (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.isWhitespace boolean \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c9|0x00c9: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x00ce \l}"];
Node_42 [shape=record,label="{42\:\ 0x00cb|0x00cb: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x00cc: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_43 [shape=record,label="{43\:\ 0x00ce|0x00ce: RETURN   \l}"];
Node_44 [shape=record,label="{44\:\ 0x00cf|0x00cf: INVOKE  (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.parseEndTag():void type: DIRECT \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d2|0x00d2: RETURN   \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d3|0x00d3: INVOKE  (r6 I:org.kxml2.io.KXmlParser), (r4 I:boolean) org.kxml2.io.KXmlParser.parseStartTag(boolean):void type: DIRECT \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d6|0x00d6: RETURN   \l}"];
Node_48 [shape=record,label="{48\:\ 0x00d7|0x00d7: INVOKE  (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.pushEntity():void type: DIRECT \l}"];
Node_49 [shape=record,label="{49\:\ 0x00da|0x00da: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.nextImpl((r6 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_32;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_48;
Node_34 -> Node_35;
Node_34 -> Node_38;
Node_34 -> Node_44;
Node_34 -> Node_46;
Node_34 -> Node_47;
Node_35 -> Node_36;
Node_36 -> Node_6;
Node_36 -> Node_37[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_46 -> Node_47;
Node_48 -> Node_49;
}

