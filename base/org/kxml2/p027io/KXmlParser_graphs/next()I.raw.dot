digraph "CFG fororg.kxml2.io.KXmlParser.next()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x0003: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: IPUT  (r1 I:boolean), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.isWhitespace boolean \l0x0006: IPUT  (r0 I:boolean), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.token boolean \l0x0008: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (9999(0x270f, float:1.4012E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nextImpl():void type: DIRECT \l0x000d: IGET  (r1 I:int) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x0013 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:10:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: INVOKE  (r2 I:int) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peekType():int type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:1:0x000a \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0021: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:13:0x0027 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IPUT  (r1 I:int), (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|0x0029: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int org.kxml2.io.KXmlParser.next((r3 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

