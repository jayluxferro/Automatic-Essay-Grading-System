digraph "CFG fororg.kxml2.io.KXmlParser.getFeature(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (org.xmlpull.p030v1.XmlPullParser.FEATURE_PROCESS_NAMESPACES.equals(r3) == false) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r2.processNsp\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0012|if (isProp(r3, false, \"relaxed\") == false) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return r2.relaxed\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.kxml2.io.KXmlParser.getFeature((r2v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
}

