digraph "CFG fororg.kxml2.io.KXmlParser.nextTag()I" {
subgraph cluster_Region_1703183120 {
label = "R(4:0|(1:4)|(1:9)|11)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|next()\l}"];
subgraph cluster_IfRegion_668514400 {
label = "IF [B:1:0x0006, B:3:0x000a] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|ADDED_TO_REGION\l|if (r2.type == 4) goto L_0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|ADDED_TO_REGION\l|if (r2.isWhitespace == true) goto L_0x000c\l}"];
subgraph cluster_Region_1957426159 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|next()\l}"];
}
}
subgraph cluster_IfRegion_345384347 {
label = "IF [B:6:0x0012, B:8:0x0017] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|ADDED_TO_REGION\l|if (r2.type == 3) goto L_0x001e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|ADDED_TO_REGION\l|if (r2.type == 2) goto L_0x001e\l}"];
subgraph cluster_Region_1431021594 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0019|exception(\"unexpected type\")\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|return r2.type\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000f}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0014}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001e}"];
MethodNode[shape=record,label="{public int org.kxml2.io.KXmlParser.nextTag((r2v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_10 -> Node_11;
}

