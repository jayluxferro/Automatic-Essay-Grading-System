digraph "CFG fororg.kxml2.io.KXmlParser.adjustNsp()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IGET  (r3 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x0005: ARITH  (r3 I:int) = (r3 I:int) \<\< (2 int) \l0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0008: CONST  (r5 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x000a: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:19:0x0089 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IGET  (r3 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x000f: ARITH  (r7 I:int) = (r1 I:int) + (2 int) \l0x0011: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0013: INVOKE  (r5 I:int) = (r3 I:java.lang.String), (r5 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0027 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r4 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:int), (r5 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x001d: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x001f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r5 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0023: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0024: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0025: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: CONST_STR  (r4 I:java.lang.String) =  \"xmlns\" \l0x0029: INVOKE  (r4 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0085 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: CONST_STR  (r5 I:java.lang.String) =  \"xmlns\" \l0x0032: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: IGET  (r3 I:int[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x003c: IGET  (r5 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.depth int \l0x003e: AGET  (r7 I:?[int, float]) = (r3 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0040: ARITH  (r8 I:int) = (r7 I:int) + (1 int) \l0x0042: APUT  \l  (r3 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r8 I:?[int, float])\l \l0x0044: ARITH  (r3 I:int) = (r7 I:int) \<\< (1 int) \l0x0046: IGET  (r5 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0048: ARITH  (r7 I:int) = (r3 I:int) + (2 int) \l0x004a: INVOKE  (r5 I:java.lang.String[]) = \l  (r12 I:org.kxml2.io.KXmlParser)\l  (r5 I:java.lang.String[])\l  (r7 I:int)\l org.kxml2.io.KXmlParser.ensureCapacity(java.lang.String[], int):java.lang.String[] type: DIRECT \l0x004e: IPUT  (r5 I:java.lang.String[]), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0050: IGET  (r5 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0052: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0054: IGET  (r5 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x0056: ARITH  (r3 I:int) = (r3 I:int) + (r6 I:int) \l0x0057: IGET  (r7 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0059: ARITH  (r8 I:int) = (r1 I:int) + (3 int) \l0x005b: AGET  (r7 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x005d: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|0x005f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0072 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0061|0x0061: IGET  (r3 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0063: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0065: CONST_STR  (r4 I:java.lang.String) =  \"\" \l0x0067: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x006b|0x006b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0072 \l}"];
Node_16 [shape=record,label="{16\:\ 0x006d|0x006d: CONST_STR  (r3 I:java.lang.String) =  \"illegal empty namespace\" \l0x006f: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r3 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|0x0072: IGET  (r3 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0074: ARITH  (r4 I:int) = (r1 I:int) + (4 int) \l0x0076: IGET  (r5 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0078: IGET  (r7 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x007a: ARITH  (r7 I:int) = (r7 I:int) \- (r6 I:int) \l0x007b: IPUT  (r7 I:int), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x007d: ARITH  (r6 I:int) = (r7 I:int) \<\< (2 int) \l0x007f: ARITH  (r6 I:int) = (r6 I:int) \- (r1 I:int) \l0x0080: INVOKE  \l  (r3 I:java.lang.Object)\l  (r4 I:int)\l  (r5 I:java.lang.Object)\l  (r1 I:int)\l  (r6 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0083: ARITH  (r1 I:int) = (r1 I:int) + (\-4 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0085|0x0085: ARITH  (r1 I:int) = (r1 I:int) + (4 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0089|0x0089: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x010a \l}"];
Node_20 [shape=record,label="{20\:\ 0x008b|0x008b: IGET  (r1 I:int) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributeCount int \l0x008d: ARITH  (r1 I:int) = (r1 I:int) \<\< (2 int) \l0x008f: ARITH  (r1 I:int) = (r1 I:int) + (\-4 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0091|0x0091: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:39:0x010a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0093|0x0093: IGET  (r3 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0095: ARITH  (r7 I:int) = (r1 I:int) + (2 int) \l0x0097: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r7 I:?[int, short, byte, char]) \l0x0099: INVOKE  (r8 I:int) = (r3 I:java.lang.String), (r5 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x009d|0x009d: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00c3 \l}"];
Node_24 [shape=record,label="{24\:\ 0x009f|0x009f: IGET  (r9 I:boolean) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a1|0x00a1: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00a4 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a4|0x00a4: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x00a6: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x00a8: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x00ab: CONST_STR  (r2 I:java.lang.String) =  \"illegal attribute name: \" \l0x00ad: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00b0: INVOKE  (r1 I:java.lang.StringBuffer), (r3 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00b3: CONST_STR  (r2 I:java.lang.String) =  \" at \" \l0x00b5: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00b8: INVOKE  (r1 I:java.lang.StringBuffer), (r12 I:java.lang.Object) java.lang.StringBuffer.append(java.lang.Object):java.lang.StringBuffer type: VIRTUAL \l0x00bb: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x00bf: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c2|0x00c2: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c3|0x00c3: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0107 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c5|0x00c5: INVOKE  (r9 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:int), (r8 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x00c9: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x00cb: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String), (r8 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x00cf: INVOKE  (r8 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser), (r9 I:java.lang.String) org.kxml2.io.KXmlParser.getNamespace(java.lang.String):java.lang.String type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d3|0x00d3: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00f9 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d5|0x00d5: IGET  (r10 I:boolean) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_33 [shape=record,label="{33\:\ 0x00d7|0x00d7: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00da \l}"];
Node_35 [shape=record,label="{35\:\ 0x00da|0x00da: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x00dc: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x00de: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x00e1: CONST_STR  (r2 I:java.lang.String) =  \"Undefined Prefix: \" \l0x00e3: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00e6: INVOKE  (r1 I:java.lang.StringBuffer), (r9 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00e9: CONST_STR  (r2 I:java.lang.String) =  \" in \" \l0x00eb: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00ee: INVOKE  (r1 I:java.lang.StringBuffer), (r12 I:java.lang.Object) java.lang.StringBuffer.append(java.lang.Object):java.lang.StringBuffer type: VIRTUAL \l0x00f1: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x00f5: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x00f8|0x00f8: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00f9|0x00f9: IGET  (r10 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00fb: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x00fd: IGET  (r8 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x00ff: ARITH  (r10 I:int) = (r1 I:int) + (1 int) \l0x0101: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r10 I:?[int, short, byte, char])\l  (r9 I:?[OBJECT, ARRAY])\l \l0x0103: IGET  (r8 I:java.lang.String[]) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x0105: APUT  \l  (r8 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x0107|0x0107: ARITH  (r1 I:int) = (r1 I:int) + (\-4 int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x010a|0x010a: IGET  (r1 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x010c: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r5 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x0110|0x0110: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0128 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0112|0x0112: NEW_INSTANCE  (r3 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0114: INVOKE  (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0117: CONST_STR  (r5 I:java.lang.String) =  \"illegal tag name: \" \l0x0119: INVOKE  (r3 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x011c: IGET  (r5 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x011e: INVOKE  (r3 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0121: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0125: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r3 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x0128|0x0128: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x013b \l}"];
Node_43 [shape=record,label="{43\:\ 0x012a|0x012a: IGET  (r3 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x012c: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.String), (r0 I:int), (r1 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0130: IPUT  (r0 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x0132: IGET  (r0 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l0x0134: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) \l0x0135: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0139: IPUT  (r0 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l}"];
Node_44 [shape=record,label="{44\:\ 0x013b|0x013b: IGET  (r0 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x013d: INVOKE  (r0 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.getNamespace(java.lang.String):java.lang.String type: VIRTUAL \l0x0141: IPUT  (r0 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l0x0143: IGET  (r0 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l}"];
Node_45 [shape=record,label="{45\:\ 0x0145|0x0145: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0165 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0147|0x0147: IGET  (r0 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l}"];
Node_47 [shape=record,label="{47\:\ 0x0149|0x0149: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0161 \l}"];
Node_48 [shape=record,label="{48\:\ 0x014b|0x014b: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x014d: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0150: CONST_STR  (r1 I:java.lang.String) =  \"undefined prefix: \" \l0x0152: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0155: IGET  (r1 I:java.lang.String) = (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.prefix java.lang.String \l0x0157: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x015a: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x015e: INVOKE  (r12 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_49 [shape=record,label="{49\:\ 0x0161|0x0161: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0163: IPUT  (r0 I:java.lang.String), (r12 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.namespace java.lang.String \l}"];
Node_50 [shape=record,label="{50\:\ 0x0165|0x0165: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean org.kxml2.io.KXmlParser.adjustNsp((r12 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_39;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_39;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_29[style=dashed];
Node_27 -> Node_28;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_37[style=dashed];
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_21;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_50;
}

