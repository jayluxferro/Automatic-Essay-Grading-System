digraph "CFG fororg.kxml2.io.KXmlParser.setInput(Ljava\/io\/Reader;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.reader = r4\lr3.line = 1\lr3.column = 0\lr3.type = 0\lr3.name = null\lr3.namespace = null\lr3.degenerated = false\lr3.attributeCount = \-1\lr3.encoding = null\lr3.version = null\lr3.standalone = null\l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|if (r4 != null) goto L_0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x001d|r3.srcPos = 0\lr3.srcCount = 0\lr3.peekCount = 0\lr3.depth = 0\lr3.entityMap = new java.util.Hashtable()\lr3.entityMap.put(\"amp\", \"&\")\lr3.entityMap.put(\"apos\", \"'\")\lr3.entityMap.put(\"gt\", com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_OPERATION)\lr3.entityMap.put(\"lt\", com.j256.ormlite.stmt.query.SimpleComparison.LESS_THAN_OPERATION)\lr3.entityMap.put(\"quot\", org.osgeo.proj4j.units.AngleFormat.STR_SEC_SYMBOL)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0059|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlParser.setInput((r3v0 'this' org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r4v0 java.io.Reader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

