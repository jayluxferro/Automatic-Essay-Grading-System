digraph "CFG fororg.kxml2.io.KXmlParser.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r6 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x0005: NEW_ARRAY  (r1 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0007: IPUT  (r1 I:java.lang.String[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.elementStack java.lang.String[] \l0x0009: CONST  (r1 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l0x000b: NEW_ARRAY  (r1 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x000d: IPUT  (r1 I:java.lang.String[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspStack java.lang.String[] \l0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0010: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0012: IPUT  (r1 I:int[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.nspCounts int[] \l0x0014: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l0x0016: NEW_ARRAY  (r2 I:char[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0018: IPUT  (r2 I:char[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtBuf char[] \l0x001a: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x001c: IPUT  (r0 I:java.lang.String[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.attributes java.lang.String[] \l0x001e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.stackMismatch int \l0x0021: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0022: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0024: IPUT  (r0 I:int[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.peek int[] \l0x0026: INVOKE  (r0 I:java.lang.Runtime) =  java.lang.Runtime.getRuntime():java.lang.Runtime type: STATIC \l0x002a: INVOKE  (r2 I:long) = (r0 I:java.lang.Runtime) java.lang.Runtime.freeMemory():long type: VIRTUAL \l0x002e: CONST  (r4 I:?[long, double]) = (1048576(0x100000, double:5.180654E\-318) ?[long, double]) \l0x0031: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0033|0x0033: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0037 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0035|0x0035: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (8192(0x2000, float:1.14794E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0037|0x0037: NEW_ARRAY  (r0 I:char[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0039: IPUT  (r0 I:char[]), (r6 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.srcBuf char[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|0x003b: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlParser.\<init\>((r6 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

