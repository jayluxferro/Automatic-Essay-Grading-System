digraph "CFG fororg.kxml2.io.KXmlParser.pushEntity()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x0004: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l0x0007: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r1 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.read():int type: DIRECT \l0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = (59 ?[int, float, short, byte, char]) \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x008e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.String) = (r5 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.get(int):java.lang.String type: DIRECT \l0x0017: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0018: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x0019: IPUT  (r0 I:int), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.txtPos int \l0x001b: IGET  (r0 I:boolean) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.token boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r0 I:int) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.type int \l0x0021: CONST  (r4 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IPUT  (r1 I:java.lang.String), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.name java.lang.String \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0027: INVOKE  (r4 I:char) = (r1 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x004d \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: INVOKE  (r0 I:char) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0031: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (120(0x78, float:1.68E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0036: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x003a: CONST  (r1 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x003c: INVOKE  (r0 I:int) = (r0 I:java.lang.String), (r1 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0045: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r0 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: IGET  (r3 I:java.util.Hashtable) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.entityMap java.util.Hashtable \l0x004f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Hashtable), (r1 I:java.lang.Object) java.util.Hashtable.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0053: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0058 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|0x0059: IPUT  (r2 I:boolean), (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.unresolved boolean \l0x005b: IGET  (r2 I:boolean) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.unresolved boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x007d \l}"];
Node_22 [shape=record,label="{22\:\ 0x005f|0x005f: IGET  (r0 I:boolean) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.token boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x008d \l}"];
Node_24 [shape=record,label="{24\:\ 0x0063|0x0063: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0065: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0068: CONST_STR  (r2 I:java.lang.String) =  \"unresolved: &\" \l0x006a: INVOKE  (r0 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x006d: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0070: CONST_STR  (r1 I:java.lang.String) =  \";\" \l0x0072: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0075: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0079: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ 0x007d|0x007d: INVOKE  (r1 I:int) = (r3 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x0081|0x0081: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:28:0x008d \l}"];
Node_27 [shape=record,label="{27\:\ 0x0083|0x0083: INVOKE  (r1 I:char) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0087: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l0x008a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x008d|0x008d: RETURN   \l}"];
Node_29 [shape=record,label="{29\:\ 0x008e|0x008e: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0090|0x0090: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0092|0x0092: CONST  (r2 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0094|0x0094: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:35:0x009a \l}"];
Node_33 [shape=record,label="{33\:\ 0x0096|0x0096: CONST  (r2 I:?[int, float, short, byte, char]) = (57 ?[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0098|0x0098: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_35 [shape=record,label="{35\:\ 0x009a|0x009a: CONST  (r2 I:?[int, float, short, byte, char]) = (97 ?[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x009c|0x009c: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:39:0x00a2 \l}"];
Node_37 [shape=record,label="{37\:\ 0x009e|0x009e: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (122(0x7a, float:1.71E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x00a0|0x00a0: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_39 [shape=record,label="{39\:\ 0x00a2|0x00a2: CONST  (r2 I:?[int, float, short, byte, char]) = (65 ?[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00a4|0x00a4: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:43:0x00aa \l}"];
Node_41 [shape=record,label="{41\:\ 0x00a6|0x00a6: CONST  (r2 I:?[int, float, short, byte, char]) = (90 ?[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00a8|0x00a8: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_43 [shape=record,label="{43\:\ 0x00aa|0x00aa: CONST  (r2 I:?[int, float, short, byte, char]) = (95 ?[int, float, short, byte, char]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ac|0x00ac: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_45 [shape=record,label="{45\:\ 0x00ae|0x00ae: CONST  (r2 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x00b0|0x00b0: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00b2|0x00b2: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x00c4 \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b4|0x00b4: IGET  (r0 I:boolean) = (r5 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_49 [shape=record,label="{49\:\ 0x00b6|0x00b6: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00bd \l}"];
Node_50 [shape=record,label="{50\:\ 0x00b8|0x00b8: CONST_STR  (r0 I:java.lang.String) =  \"unterminated entity ref\" \l0x00ba: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r0 I:java.lang.String) org.kxml2.io.KXmlParser.error(java.lang.String):void type: DIRECT \l}"];
Node_51 [shape=record,label="{51\:\ 0x00bd|0x00bd: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00be|0x00be: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00c3 \l}"];
Node_53 [shape=record,label="{53\:\ 0x00c0|0x00c0: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
Node_54 [shape=record,label="{54\:\ 0x00c3|0x00c3: RETURN   \l}"];
Node_55 [shape=record,label="{55\:\ 0x00c4|0x00c4: INVOKE  (r5 I:org.kxml2.io.KXmlParser), (r1 I:int) org.kxml2.io.KXmlParser.push(int):void type: DIRECT \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlParser.pushEntity((r5 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_29;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_25;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_55;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_55;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_55;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_55;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_55;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_55;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_55;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_55 -> Node_1;
}

