digraph "CFG fororg.kxml2.io.KXmlParser.getFeature(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"http:\/\/xmlpull.org\/v1\/doc\/features.html#process\-namespaces\" \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r3 I:boolean) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.processNsp boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: RETURN  (r3 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST_STR  (r0 I:java.lang.String) =  \"relaxed\" \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: INVOKE  (r3 I:boolean) = \l  (r2 I:org.kxml2.io.KXmlParser)\l  (r3 I:java.lang.String)\l  (r1 I:boolean)\l  (r0 I:java.lang.String)\l org.kxml2.io.KXmlParser.isProp(java.lang.String, boolean, java.lang.String):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IGET  (r3 I:boolean) = (r2 I:org.kxml2.io.KXmlParser) org.kxml2.io.KXmlParser.relaxed boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN  (r3 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.kxml2.io.KXmlParser.getFeature((r2 'this' I:org.kxml2.io.KXmlParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
}

