digraph "CFG fororg.kxml2.io.KXmlSerializer.getPrefix(Ljava\/lang\/String;ZZ)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0002: IGET  (r1 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0004: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0006: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x0008: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:19:0x0050 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0011: ARITH  (r3 I:int) = (r0 I:int) + (1 int) \l0x0013: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0015: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r7 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x001f: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0021: CONST_STR  (r3 I:java.lang.String) =  \"\" \l0x0023: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x002b: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002d: ARITH  (r3 I:int) = (r0 I:int) + (2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IGET  (r4 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0031: IGET  (r5 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0033: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0035: AGET  (r4 I:?[int, float]) = (r4 I:?[int, float][]), (r5 I:?[int, short, byte, char]) \l0x0037: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:15:0x0049 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IGET  (r4 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x003d: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x003f: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0046 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|0x004a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: RETURN  (r1 I:java.lang.String) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|0x0050: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0053 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0052|0x0052: RETURN  (r1 I:java.lang.String) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0053|0x0053: CONST_STR  (r8 I:java.lang.String) =  \"\" \l0x0055: INVOKE  (r8 I:boolean) = (r8 I:java.lang.String), (r7 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x005e \l}"];
Node_23 [shape=record,label="{23\:\ 0x005b|0x005b: CONST_STR  (r8 I:java.lang.String) =  \"\" \l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: NEW_INSTANCE  (r8 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0060: INVOKE  (r8 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0063: CONST_STR  (r9 I:java.lang.String) =  \"n\" \l0x0065: INVOKE  (r8 I:java.lang.StringBuffer), (r9 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0068: IGET  (r9 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.auto int \l0x006a: ARITH  (r0 I:int) = (r9 I:int) + (1 int) \l0x006c: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.auto int \l0x006e: INVOKE  (r8 I:java.lang.StringBuffer), (r9 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x0071: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0075: IGET  (r9 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0077: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0079: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x007b: AGET  (r9 I:?[int, float]) = (r9 I:?[int, float][]), (r0 I:?[int, short, byte, char]) \l0x007d: ARITH  (r9 I:int) = (r9 I:int) * (2 int) \l0x007f: ARITH  (r9 I:int) = (r9 I:int) + (\-2 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0081|0x0081: IF  (r9 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:30:0x0092 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0083|0x0083: IGET  (r0 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0085: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r9 I:?[int, short, byte, char]) \l0x0087: INVOKE  (r0 I:boolean) = (r8 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x008b|0x008b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x008f \l}"];
Node_28 [shape=record,label="{28\:\ 0x008d|0x008d: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x008f|0x008f: ARITH  (r9 I:int) = (r9 I:int) + (\-2 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|0x0092: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x005e \l}"];
Node_31 [shape=record,label="{31\:\ 0x0094|0x0094: IGET  (r9 I:boolean) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l0x0096: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0097: IPUT  (r0 I:boolean), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l0x0099: INVOKE  \l  (r6 I:org.kxml2.io.KXmlSerializer)\l  (r8 I:java.lang.String)\l  (r7 I:java.lang.String)\l org.kxml2.io.KXmlSerializer.setPrefix(java.lang.String, java.lang.String):void type: VIRTUAL \l0x009c: IPUT  (r9 I:boolean), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l}"];
Node_32 [shape=record,label="{32\:\ 0x009e|0x009e: RETURN  (r8 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private final java.lang.String org.kxml2.io.KXmlSerializer.getPrefix((r6 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_9;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_1;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_25;
Node_30 -> Node_24;
Node_30 -> Node_31[style=dashed];
Node_31 -> Node_32;
}

