digraph "CFG fororg.kxml2.io.KXmlSerializer.setPrefix(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r6 I:org.kxml2.io.KXmlSerializer), (r0 I:boolean) org.kxml2.io.KXmlSerializer.check(boolean):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST_STR  (r7 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST_STR  (r8 I:java.lang.String) =  \"\" \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: INVOKE  (r2 I:java.lang.String) = \l  (r6 I:org.kxml2.io.KXmlSerializer)\l  (r8 I:java.lang.String)\l  (r1 I:boolean)\l  (r0 I:boolean)\l org.kxml2.io.KXmlSerializer.getPrefix(java.lang.String, boolean, boolean):java.lang.String type: DIRECT \l0x0011: INVOKE  (r2 I:boolean) = (r7 I:java.lang.String), (r2 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IGET  (r2 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x001a: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x001c: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x001d: AGET  (r4 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x001f: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x0021: APUT  \l  (r2 I:?[int, float][])\l  (r3 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l0x0023: ARITH  (r1 I:int) = (r4 I:int) \<\< (1 int) \l0x0025: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0027: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x0028: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: IF  (r2 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:11:0x003a \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x002e: ARRAY_LENGTH  (r2 I:int) = (r2 I:?[]) \l0x002f: ARITH  (r2 I:int) = (r2 I:int) + (16 int) \l0x0031: NEW_ARRAY  (r2 I:java.lang.String[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0033: IGET  (r4 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0035: INVOKE  \l  (r4 I:java.lang.Object)\l  (r0 I:int)\l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0038: IPUT  \l  (r2 I:java.lang.String[])\l  (r6 I:org.kxml2.io.KXmlSerializer)\l org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IGET  (r0 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x003c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x003e: IGET  (r7 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0040: APUT  \l  (r7 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlSerializer.setPrefix((r6 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

