digraph "CFG fororg.kxml2.io.KXmlSerializer.setOutput(Ljava\/io\/OutputStream;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 == null) goto L_0x0026\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3 != null) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.io.OutputStreamWriter r0 = new java.io.OutputStreamWriter(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|java.io.OutputStreamWriter r0 = new java.io.OutputStreamWriter(r2, r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|PHI: r0 \l  PHI: (r0v0 java.io.OutputStreamWriter) = (r0v1 java.io.OutputStreamWriter), (r0v2 java.io.OutputStreamWriter) binds: [B:3:0x000a, B:2:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|setOutput(r0)\lr1.encoding = r3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r3 == null) goto L_?\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if (r3.toLowerCase().startsWith(\"utf\") == false) goto L_?\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|r1.unicode = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026}"];
Node_10 [shape=record,label="{10\:\ 0x002b|throw new java.lang.IllegalArgumentException()\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlSerializer.setOutput((r1v0 'this' org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r2v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_9;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_11;
Node_9 -> Node_10;
}

