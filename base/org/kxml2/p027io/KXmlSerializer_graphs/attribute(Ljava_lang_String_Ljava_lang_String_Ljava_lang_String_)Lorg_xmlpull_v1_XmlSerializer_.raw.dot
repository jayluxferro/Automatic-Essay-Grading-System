digraph "CFG fororg.kxml2.io.KXmlSerializer.attribute(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Lorg\/xmlpull\/v1\/XmlSerializer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: INVOKE  (r3 I:java.lang.String) = \l  (r2 I:org.kxml2.io.KXmlSerializer)\l  (r3 I:java.lang.String)\l  (r0 I:boolean)\l  (r1 I:boolean)\l org.kxml2.io.KXmlSerializer.getPrefix(java.lang.String, boolean, boolean):java.lang.String type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r0 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x001b: CONST  (r1 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x001d: INVOKE  (r0 I:java.io.Writer), (r1 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x0020: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0022: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IGET  (r0 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x002a: INVOKE  (r0 I:java.io.Writer), (r3 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x002d: IGET  (r3 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x002f: CONST  (r0 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0031: INVOKE  (r3 I:java.io.Writer), (r0 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: IGET  (r3 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0036: INVOKE  (r3 I:java.io.Writer), (r4 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0039: IGET  (r3 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x003b: CONST  (r4 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l0x003d: INVOKE  (r3 I:java.io.Writer), (r4 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x0040: CONST  (r3 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l0x0042: INVOKE  (r4 I:int) = (r5 I:java.lang.String), (r3 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0046: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004a \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: CONST  (r3 I:?[int, float, short, byte, char]) = (39 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|0x004c: IGET  (r4 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x004e: INVOKE  (r4 I:java.io.Writer), (r3 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x0051: INVOKE  \l  (r2 I:org.kxml2.io.KXmlSerializer)\l  (r5 I:java.lang.String)\l  (r3 I:int)\l org.kxml2.io.KXmlSerializer.writeEscaped(java.lang.String, int):void type: DIRECT \l0x0054: IGET  (r4 I:java.io.Writer) = (r2 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0056: INVOKE  (r4 I:java.io.Writer), (r3 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: RETURN  (r2 I:org.xmlpull.v1.XmlSerializer) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x005c: CONST_STR  (r4 I:java.lang.String) =  \"illegal position for attribute\" \l0x005e: INVOKE  \l  (r3 I:java.lang.IllegalStateException)\l  (r4 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.io.KXmlSerializer.attribute((r2 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

