digraph "CFG fororg.kxml2.io.KXmlSerializer.endDocument()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x0006: IGET  (r1 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0008: ARITH  (r1 I:int) = (r1 I:int) * (3 int) \l0x000a: ARITH  (r1 I:int) = (r1 I:int) + (\-3 int) \l0x000c: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x000e: IGET  (r1 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x0010: IGET  (r2 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0012: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0016: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0018: INVOKE  \l  (r3 I:org.kxml2.io.KXmlSerializer)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l org.kxml2.io.KXmlSerializer.endTag(java.lang.String, java.lang.String):org.xmlpull.v1.XmlSerializer type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: INVOKE  (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.flush():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlSerializer.endDocument((r3 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_0;
Node_3 -> Node_4;
}

