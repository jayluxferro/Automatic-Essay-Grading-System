digraph "CFG fororg.kxml2.io.KXmlSerializer.attribute(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Lorg\/xmlpull\/v1\/XmlSerializer;" {
subgraph cluster_Region_1495002256 {
label = "R(1:(2:(8:(1:3)|5|8|(1:10)|11|(1:13)|14|15)|(1:17)))";
node [shape=record,color=blue];
subgraph cluster_Region_1561030208 {
label = "R(2:(8:(1:3)|5|8|(1:10)|11|(1:13)|14|15)|(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1191738225 {
label = "IF [B:1:0x0002] THEN: R(8:(1:3)|5|8|(1:10)|11|(1:13)|14|15) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.pending == true) goto L_0x0004\l}"];
subgraph cluster_Region_648855385 {
label = "R(8:(1:3)|5|8|(1:10)|11|(1:13)|14|15)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1261613169 {
label = "IF [B:2:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r3 == null) goto L_0x0006\l}"];
subgraph cluster_Region_1305197291 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|java.lang.String r3 = \"\"\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000e|java.lang.String r3 = \"\".equals(r3) ? \"\" : getPrefix(r3, false, true)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|PHI: r3 \l  PHI: (r3v3 java.lang.String) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r2.writer.write(32)\l}"];
subgraph cluster_IfRegion_1199912707 {
label = "IF [B:9:0x0026] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0026|if (\"\".equals(r3) == false) goto L_0x0028\l}"];
subgraph cluster_Region_2003385376 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028|r2.writer.write(r3)\lr2.writer.write(58)\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0034|r2.writer.write(r4)\lr2.writer.write(61)\lint r3 = 34\l}"];
subgraph cluster_IfRegion_1261741180 {
label = "IF [B:12:0x0047] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0047|if (r5.indexOf(34) != \-1) goto L_0x004a\l}"];
subgraph cluster_Region_795246843 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x004a|r3 = 39\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x004c|PHI: r3 \l  PHI: (r3v7 int) = (r3v6 int), (r3v8 int) binds: [B:12:0x0047, B:13:0x004a] A[DONT_GENERATE, DONT_INLINE]\l|r2.writer.write(r3)\lwriteEscaped(r5, r3)\lr2.writer.write(r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1331928472 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0061|throw new java.lang.IllegalStateException(\"illegal position for attribute\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008|PHI: r3 \l  PHI: (r3v2 java.lang.String) = (r3v0 java.lang.String), (r3v12 java.lang.String) binds: [B:2:0x0004, B:3:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0010}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x005a}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.io.KXmlSerializer.attribute((r2v0 'this' org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_16[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_16 -> Node_17;
}

