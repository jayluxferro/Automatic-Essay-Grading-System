digraph "CFG fororg.kxml2.io.KXmlSerializer.endTag(Ljava\/lang\/String;Ljava\/lang\/String;)Lorg\/xmlpull\/v1\/XmlSerializer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0008: IPUT  (r0 I:int), (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x000e: IGET  (r2 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0010: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x0012: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00a0 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IGET  (r0 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x001a: IGET  (r2 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x001c: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x001e: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0020: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00a0 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IGET  (r0 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x0028: IGET  (r2 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x002a: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x002c: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l0x002e: AGET  (r0 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0030: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r5 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00a0 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: IGET  (r4 I:boolean) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: INVOKE  (r3 I:org.kxml2.io.KXmlSerializer), (r1 I:boolean) org.kxml2.io.KXmlSerializer.check(boolean):void type: DIRECT \l0x003d: IGET  (r4 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x003f: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l0x0040: IPUT  (r4 I:int), (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: IGET  (r4 I:boolean[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l0x0045: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0047: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0048: AGET  (r4 I:boolean A[IMMUTABLE_TYPE]) = \l  (r4 I:boolean[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0062 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: IGET  (r4 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x004e: CONST_STR  (r0 I:java.lang.String) =  \"\l\" \l0x0050: INVOKE  (r4 I:java.io.Writer), (r0 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0053: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|0x0054: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:20:0x0062 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: IGET  (r0 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x005a: CONST_STR  (r2 I:java.lang.String) =  \"  \" \l0x005c: INVOKE  (r0 I:java.io.Writer), (r2 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x005f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|0x0062: IGET  (r4 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0064: CONST_STR  (r0 I:java.lang.String) =  \"\<\/\" \l0x0066: INVOKE  (r4 I:java.io.Writer), (r0 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0069: IGET  (r4 I:java.lang.String[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.elementStack java.lang.String[] \l0x006b: IGET  (r0 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x006d: ARITH  (r0 I:int) = (r0 I:int) * (3 int) \l0x006f: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0070: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0072: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0074: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r4 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0078|0x0078: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0086 \l}"];
Node_22 [shape=record,label="{22\:\ 0x007a|0x007a: IGET  (r0 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x007c: INVOKE  (r0 I:java.io.Writer), (r4 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x007f: IGET  (r4 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0081: CONST  (r0 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0083: INVOKE  (r4 I:java.io.Writer), (r0 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0086|0x0086: IGET  (r4 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0088: INVOKE  (r4 I:java.io.Writer), (r5 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x008b: IGET  (r4 I:java.io.Writer) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x008d: CONST  (r5 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l0x008f: INVOKE  (r4 I:java.io.Writer), (r5 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0092|0x0092: IGET  (r4 I:int[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0094: IGET  (r5 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0096: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x0097: IGET  (r0 I:int[]) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0099: IGET  (r1 I:int) = (r3 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x009b: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x009d: APUT  \l  (r4 I:?[int, float][])\l  (r5 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x009f|0x009f: RETURN  (r3 I:org.xmlpull.v1.XmlSerializer) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a0|0x00a0: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00a2: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x00a4: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x00a7: CONST_STR  (r2 I:java.lang.String) =  \"\<\/\{\" \l0x00a9: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00ac: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00af: CONST_STR  (r4 I:java.lang.String) =  \"\}\" \l0x00b1: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00b4: INVOKE  (r1 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00b7: CONST_STR  (r4 I:java.lang.String) =  \"\> does not match start\" \l0x00b9: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x00bc: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x00c0: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c3|0x00c3: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.io.KXmlSerializer.endTag((r3 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_26;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_26;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_17;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
}

