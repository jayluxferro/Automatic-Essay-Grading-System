digraph "CFG fororg.kxml2.io.KXmlSerializer.check(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0009: IPUT  (r0 I:int), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: IPUT  (r0 I:boolean), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.pending boolean \l0x000e: IGET  (r1 I:boolean[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l0x0010: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0011: IGET  (r2 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r1 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0017: ARITH  (r1 I:int) = (r1 I:int) + (4 int) \l0x0019: NEW_ARRAY  (r1 I:boolean[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: boolean[] \l0x001b: IGET  (r2 I:boolean[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l0x001d: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x001f: INVOKE  \l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l  (r0 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x0022: IPUT  (r1 I:boolean[]), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IGET  (r1 I:boolean[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l0x0026: IGET  (r2 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0028: IGET  (r3 I:boolean[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.indent boolean[] \l0x002a: IGET  (r4 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x002c: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x002e: AGET  (r3 I:boolean A[IMMUTABLE_TYPE]) = \l  (r3 I:boolean[] A[IMMUTABLE_TYPE])\l  (r4 I:?[int, short, byte, char])\l \l0x0030: APUT  \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:boolean A[IMMUTABLE_TYPE])\l \l0x0032: IGET  (r1 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x0034: IGET  (r2 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x0036: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0038: AGET  (r1 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IGET  (r2 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x003c: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x003e: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|0x0040: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:20:0x00ac \l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|0x0042: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0044: CONST  (r3 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0046: INVOKE  (r2 I:java.io.Writer), (r3 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x0049: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x004b: CONST_STR  (r3 I:java.lang.String) =  \"xmlns\" \l0x004d: INVOKE  (r2 I:java.io.Writer), (r3 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0050: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x0052: IGET  (r3 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0054: ARITH  (r4 I:int) = (r1 I:int) * (2 int) \l0x0056: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0058: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|0x005c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x006f \l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|0x005e: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0060: CONST  (r3 I:?[int, float, short, byte, char]) = (58 ?[int, float, short, byte, char]) \l0x0062: INVOKE  (r2 I:java.io.Writer), (r3 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x0065: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0067: IGET  (r3 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x0069: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x006b: INVOKE  (r2 I:java.io.Writer), (r3 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x006f|0x006f: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x0071: INVOKE  (r3 I:java.lang.String) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.getNamespace():java.lang.String type: VIRTUAL \l0x0075: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0079|0x0079: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0092 \l}"];
Node_14 [shape=record,label="{14\:\ 0x007b|0x007b: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x007d: IGET  (r3 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x007f: ARITH  (r5 I:int) = (r4 I:int) + (1 int) \l0x0081: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r5 I:?[int, short, byte, char]) \l0x0083: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0087|0x0087: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x008a \l}"];
Node_17 [shape=record,label="{17\:\ 0x008a|0x008a: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x008c: CONST_STR  (r0 I:java.lang.String) =  \"Cannot set default namespace for elements in no namespace\" \l0x008e: INVOKE  \l  (r7 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0091|0x0091: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0092|0x0092: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0094: CONST_STR  (r3 I:java.lang.String) =  \"=\"\" \l0x0096: INVOKE  (r2 I:java.io.Writer), (r3 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l0x0099: IGET  (r2 I:java.lang.String[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspStack java.lang.String[] \l0x009b: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x009d: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x009f: CONST  (r3 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l0x00a1: INVOKE  \l  (r6 I:org.kxml2.io.KXmlSerializer)\l  (r2 I:java.lang.String)\l  (r3 I:int)\l org.kxml2.io.KXmlSerializer.writeEscaped(java.lang.String, int):void type: DIRECT \l0x00a4: IGET  (r2 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x00a6: INVOKE  (r2 I:java.io.Writer), (r3 I:int) java.io.Writer.write(int):void type: VIRTUAL \l0x00a9: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ac|0x00ac: IGET  (r1 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x00ae: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x00af: IGET  (r2 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x00b1: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00b3|0x00b3: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:23:0x00c6 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b5|0x00b5: IGET  (r1 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x00b7: ARITH  (r1 I:int) = (r1 I:int) + (8 int) \l0x00b9: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x00bb: IGET  (r2 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x00bd: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x00bf: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x00c1: INVOKE  \l  (r2 I:java.lang.Object)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l  (r0 I:int)\l  (r3 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC \l0x00c4: IPUT  (r1 I:int[]), (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l}"];
Node_23 [shape=record,label="{23\:\ 0x00c6|0x00c6: IGET  (r0 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x00c8: IGET  (r1 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x00ca: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x00cc: IGET  (r2 I:int[]) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.nspCounts int[] \l0x00ce: IGET  (r3 I:int) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.depth int \l0x00d0: AGET  (r2 I:?[int, float]) = (r2 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x00d2: APUT  \l  (r0 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x00d4: IGET  (r0 I:java.io.Writer) = (r6 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l}"];
Node_24 [shape=record,label="{24\:\ 0x00d6|0x00d6: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x00db \l}"];
Node_25 [shape=record,label="{25\:\ 0x00d8|0x00d8: CONST_STR  (r7 I:java.lang.String) =  \" \/\>\" \l}"];
Node_26 [shape=record,label="{26\:\ 0x00db|0x00db: CONST_STR  (r7 I:java.lang.String) =  \"\>\" \l}"];
Node_27 [shape=record,label="{27\:\ 0x00dd|0x00dd: INVOKE  (r0 I:java.io.Writer), (r7 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00e0|0x00e0: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlSerializer.check((r6 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_19 -> Node_7;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

