digraph "CFG fororg.kxml2.io.KXmlSerializer.startDocument(Ljava\/lang\/String;Ljava\/lang\/Boolean;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.writer.write(\"\<?xml version='1.0' \")\l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|if (r3 == null) goto L_0x001a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|r2.encoding = r3\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r3.toLowerCase().startsWith(\"utf\") == false) goto L_0x001a\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|r2.unicode = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if (r2.encoding == null) goto L_0x0033\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|r2.writer.write(\"encoding='\")\lr2.writer.write(r2.encoding)\lr2.writer.write(\"' \")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|if (r4 == null) goto L_0x0053\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|r2.writer.write(\"standalone='\")\ljava.io.Writer r3 = r2.writer\l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|if (r4.booleanValue() == false) goto L_0x0047\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|java.lang.String r4 = \"yes\"\l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|java.lang.String r4 = com.caverock.androidsvg.SVGParser.XML_STYLESHEET_ATTR_ALTERNATE_NO\l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|PHI: r4 \l  PHI: (r4v3 java.lang.String) = (r4v5 java.lang.String), (r4v6 java.lang.String) binds: [B:12:0x0047, B:11:0x0044] A[DONT_GENERATE, DONT_INLINE]\l|r3.write(r4)\lr2.writer.write(\"' \")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|r2.writer.write(\"?\>\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x005a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlSerializer.startDocument((r2v0 'this' org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

