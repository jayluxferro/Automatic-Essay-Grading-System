digraph "CFG fororg.kxml2.io.KXmlSerializer.endTag(Ljava\/lang\/String;Ljava\/lang\/String;)Lorg\/xmlpull\/v1\/XmlSerializer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.pending != false) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r3.depth = r3.depth \- 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r4 != null) goto L_0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x0014|if (r3.elementStack[r3.depth * 3] != null) goto L_0x00a0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if (r4 == null) goto L_0x0026\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018}"];
Node_8 [shape=record,label="{8\:\ 0x0024|if (r4.equals(r3.elementStack[r3.depth * 3]) == false) goto L_0x00a0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026}"];
Node_10 [shape=record,label="{10\:\ 0x0034|if (r3.elementStack[(r3.depth * 3) + 2].equals(r5) == false) goto L_0x00a0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0036}"];
Node_12 [shape=record,label="{12\:\ 0x0038|if (r3.pending == false) goto L_0x0043\l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|check(true)\lr3.depth = r3.depth \- 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0043}"];
Node_15 [shape=record,label="{15\:\ 0x004a|if (r3.indent[r3.depth + 1] == false) goto L_0x0062\l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|r3.writer.write(\"rn\")\lr4 = 0\l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|LOOP_START\lPHI: r4 \l  PHI: (r4v16 int) = (r4v15 int), (r4v17 int) binds: [B:16:0x004c, B:19:0x0058] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:17:0x0054\-\>B:19:0x0058\l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|if (r4 \>= r3.depth) goto L_0x0062\l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|LOOP_END\lLOOP:0: B:17:0x0054\-\>B:19:0x0058\l|r3.writer.write(\"  \")\lint r4 = r4 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0062|r3.writer.write(\"\<\/\")\lr4 = r3.elementStack[(r3.depth * 3) + 1]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0078|if (\"\".equals(r4) != false) goto L_0x0086\l}"];
Node_22 [shape=record,label="{22\:\ 0x007a|r3.writer.write(r4)\lr3.writer.write(58)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0086|r3.writer.write(r5)\lr3.writer.write(62)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0092|r3.nspCounts[r3.depth + 1] = r3.nspCounts[r3.depth]\l}"];
Node_25 [shape=record,label="{25\:\ 0x009f|RETURN\l|return r3\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a0|java.lang.StringBuffer r1 = new java.lang.StringBuffer()\lr1.append(\"\<\/\{\")\lr1.append(r4)\lr1.append(\"\}\")\lr1.append(r5)\lr1.append(\"\> does not match start\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c3|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_28 [shape=record,label="{28\:\ 0x0062|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.io.KXmlSerializer.endTag((r3v0 'this' org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_26;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_26;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_24;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_17;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_20;
}

