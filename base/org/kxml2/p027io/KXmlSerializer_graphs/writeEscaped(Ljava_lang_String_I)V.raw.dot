digraph "CFG fororg.kxml2.io.KXmlSerializer.writeEscaped(Ljava\/lang\/String;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:32:0x007c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:char) = (r6 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[9, 10, 13, 34, 38, 39, 60, 62] t:[0x002f, 0x002f, 0x002f, 0x0021, 0x0019, 0x0021, 0x0014, 0x000f] \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r1 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"&gt;\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r1 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0016: CONST_STR  (r2 I:java.lang.String) =  \"&lt;\" \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r1 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"&amp;\" \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: INVOKE  (r1 I:java.io.Writer), (r2 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x004d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: IGET  (r2 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = (34 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: CONST_STR  (r1 I:java.lang.String) =  \"&quot;\" \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: CONST_STR  (r1 I:java.lang.String) =  \"&apos;\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0038 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: IGET  (r2 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0034: INVOKE  (r2 I:java.io.Writer), (r1 I:int) java.io.Writer.write(int):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IGET  (r2 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x003a: NEW_INSTANCE  (r3 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x003c: INVOKE  (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x003f: CONST_STR  (r4 I:java.lang.String) =  \"&#\" \l0x0041: INVOKE  (r3 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0044: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x0047: CONST  (r1 I:?[int, float, short, byte, char]) = (59 ?[int, float, short, byte, char]) \l0x0049: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:char) java.lang.StringBuffer.append(char):java.lang.StringBuffer type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: CONST  (r2 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|0x004f: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:28:0x005e \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: CONST  (r2 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|0x0053: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x005e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0055|0x0055: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x0057|0x0057: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|0x0059: IGET  (r2 I:boolean) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.unicode boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x005e \l}"];
Node_28 [shape=record,label="{28\:\ 0x005e|0x005e: IGET  (r2 I:java.io.Writer) = (r5 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.writer java.io.Writer \l0x0060: NEW_INSTANCE  (r3 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0062: INVOKE  (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0065: CONST_STR  (r4 I:java.lang.String) =  \"&#\" \l0x0067: INVOKE  (r3 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x006a: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x006d: CONST_STR  (r1 I:java.lang.String) =  \";\" \l0x006f: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0072|0x0072: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x0076|0x0076: INVOKE  (r2 I:java.io.Writer), (r1 I:java.lang.String) java.io.Writer.write(java.lang.String):void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0079|0x0079: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x007c|0x007c: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlSerializer.writeEscaped((r5 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_32;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7;
Node_4 -> Node_8;
Node_4 -> Node_10;
Node_4 -> Node_15;
Node_4 -> Node_19;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_31;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_30;
Node_14 -> Node_30;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_31;
Node_18 -> Node_29;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_28;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_17;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_17[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_1;
}

