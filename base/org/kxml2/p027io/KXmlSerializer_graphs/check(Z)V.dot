digraph "CFG fororg.kxml2.io.KXmlSerializer.check(Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.pending != false) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|r6.depth = r6.depth + 1\lr6.pending = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r6.indent.length \> r6.depth) goto L_0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|boolean[] r1 = new boolean[(r6.depth + 4)]\ljava.lang.System.arraycopy(r6.indent, 0, r1, 0, r6.depth)\lr6.indent = r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|r6.indent[r6.depth] = r6.indent[r6.depth + \-1]\lr1 = r6.nspCounts[r6.depth + \-1]\l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|LOOP_START\lPHI: r1 \l  PHI: (r1v5 int) = (r1v4 int), (r1v13 int) binds: [B:6:0x0024, B:18:0x0092] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:7:0x003a\-\>B:18:0x0092\l}"];
Node_8 [shape=record,label="{8\:\ 0x0040|if (r1 \>= r6.nspCounts[r6.depth]) goto L_0x00ac\l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|r6.writer.write(32)\lr6.writer.write(\"xmlns\")\lint r4 = r1 * 2\l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|if (\"\".equals(r6.nspStack[r4]) != false) goto L_0x006f\l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|r6.writer.write(58)\lr6.writer.write(r6.nspStack[r4])\l}"];
Node_12 [shape=record,label="{12\:\ 0x006f}"];
Node_13 [shape=record,label="{13\:\ 0x0079|if (\"\".equals(getNamespace()) == false) goto L_0x0092\l}"];
Node_14 [shape=record,label="{14\:\ 0x007b}"];
Node_15 [shape=record,label="{15\:\ 0x0087|if (\"\".equals(r6.nspStack[r4 + 1]) == false) goto L_0x008a\l}"];
Node_16 [shape=record,label="{16\:\ 0x008a}"];
Node_17 [shape=record,label="{17\:\ 0x0091|throw new java.lang.IllegalStateException(\"Cannot set default namespace for elements in no namespace\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0092|LOOP_END\lLOOP:0: B:7:0x003a\-\>B:18:0x0092\l|r6.writer.write(\"=\"\")\lwriteEscaped(r6.nspStack[r4 + 1], 34)\lr6.writer.write(34)\lint r1 = r1 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x00ac}"];
Node_20 [shape=record,label="{20\:\ 0x00b3|if (r6.nspCounts.length \> (r6.depth + 1)) goto L_0x00c6\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b5|int[] r1 = new int[(r6.depth + 8)]\ljava.lang.System.arraycopy(r6.nspCounts, 0, r1, 0, r6.depth + 1)\lr6.nspCounts = r1\l}"];
Node_22 [shape=record,label="{22\:\ 0x00c6|r6.nspCounts[r6.depth + 1] = r6.nspCounts[r6.depth]\ljava.io.Writer r0 = r6.writer\l}"];
Node_23 [shape=record,label="{23\:\ 0x00d6|if (r7 == false) goto L_0x00db\l}"];
Node_24 [shape=record,label="{24\:\ 0x00d8|java.lang.String r7 = \" \/\>\"\l}"];
Node_25 [shape=record,label="{25\:\ 0x00db|java.lang.String r7 = com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_OPERATION\l}"];
Node_26 [shape=record,label="{26\:\ 0x00dd|PHI: r7 \l  PHI: (r7v1 java.lang.String) = (r7v2 java.lang.String), (r7v3 java.lang.String) binds: [B:25:0x00db, B:24:0x00d8] A[DONT_GENERATE, DONT_INLINE]\l|r0.write(r7)\l}"];
Node_27 [shape=record,label="{27\:\ 0x00e0|RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ac|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x008a|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0092|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0092|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0092|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void org.kxml2.io.KXmlSerializer.check((r6v0 'this' org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_28;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_30;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_31;
Node_14 -> Node_15;
Node_15 -> Node_29;
Node_15 -> Node_32[style=dashed];
Node_16 -> Node_17;
Node_18 -> Node_7;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_28 -> Node_19;
Node_29 -> Node_16;
Node_30 -> Node_18;
Node_31 -> Node_18;
Node_32 -> Node_18;
}

