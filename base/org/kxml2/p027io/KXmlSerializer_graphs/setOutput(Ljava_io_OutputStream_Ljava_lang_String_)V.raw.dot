digraph "CFG fororg.kxml2.io.KXmlSerializer.setOutput(Ljava\/io\/OutputStream;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x0006: INVOKE  \l  (r0 I:java.io.OutputStreamWriter)\l  (r2 I:java.io.OutputStream)\l java.io.OutputStreamWriter.\<init\>(java.io.OutputStream):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x000c: INVOKE  \l  (r0 I:java.io.OutputStreamWriter)\l  (r2 I:java.io.OutputStream)\l  (r3 I:java.lang.String)\l java.io.OutputStreamWriter.\<init\>(java.io.OutputStream, java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r1 I:org.kxml2.io.KXmlSerializer), (r0 I:java.io.Writer) org.kxml2.io.KXmlSerializer.setOutput(java.io.Writer):void type: VIRTUAL \l0x0012: IPUT  (r3 I:java.lang.String), (r1 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.encoding java.lang.String \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  (r2 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x001a: CONST_STR  (r3 I:java.lang.String) =  \"utf\" \l0x001c: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0023: IPUT  (r2 I:boolean), (r1 I:org.kxml2.io.KXmlSerializer) org.kxml2.io.KXmlSerializer.unicode boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0028: INVOKE  (r2 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.kxml2.io.KXmlSerializer.setOutput((r1 'this' I:org.kxml2.io.KXmlSerializer A[IMMUTABLE_TYPE, THIS]), (r2 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

