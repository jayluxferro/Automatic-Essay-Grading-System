digraph "CFG fororg.kxml2.kdom.Element.setPrefix(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Vector) = (r3 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.prefixes java.util.Vector \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.Vector) =  java.util.Vector \l0x0006: INVOKE  (r0 I:java.util.Vector) java.util.Vector.\<init\>():void type: DIRECT \l0x0009: IPUT  (r0 I:java.util.Vector), (r3 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.prefixes java.util.Vector \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.Vector) = (r3 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.prefixes java.util.Vector \l0x000d: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x000e: NEW_ARRAY  (r1 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0010: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0013: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0014: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0016: INVOKE  (r0 I:java.util.Vector), (r1 I:java.lang.Object) java.util.Vector.addElement(java.lang.Object):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Element.setPrefix((r3 'this' I:org.kxml2.kdom.Element A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

