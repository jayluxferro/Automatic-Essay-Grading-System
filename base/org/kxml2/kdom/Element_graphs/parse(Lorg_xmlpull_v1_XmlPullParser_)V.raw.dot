digraph "CFG fororg.kxml2.kdom.Element.parse(Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getDepth():int type: INTERFACE \l0x0004: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0006: INVOKE  (r0 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getNamespaceCount(int):int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getDepth():int type: INTERFACE \l0x000e: INVOKE  (r1 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser), (r1 I:int) org.xmlpull.v1.XmlPullParser.getNamespaceCount(int):int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:4:0x0022 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getNamespacePrefix(int):java.lang.String type: INTERFACE \l0x0018: INVOKE  (r2 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getNamespaceUri(int):java.lang.String type: INTERFACE \l0x001c: INVOKE  \l  (r4 I:org.kxml2.kdom.Element)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l org.kxml2.kdom.Element.setPrefix(java.lang.String, java.lang.String):void type: VIRTUAL \l0x001f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r1 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getAttributeCount():int type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeNamespace(int):java.lang.String type: INTERFACE \l0x002d: INVOKE  (r2 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeName(int):java.lang.String type: INTERFACE \l0x0031: INVOKE  (r3 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeValue(int):java.lang.String type: INTERFACE \l0x0035: INVOKE  \l  (r4 I:org.kxml2.kdom.Element)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l org.kxml2.kdom.Element.setAttribute(java.lang.String, java.lang.String, java.lang.String):void type: VIRTUAL \l0x0038: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: INVOKE  (r4 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.init():void type: VIRTUAL \l0x003e: INVOKE  (r0 I:boolean) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.isEmptyElementTag():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0048 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.nextToken():int type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.nextToken():int type: INTERFACE \l0x004b: INVOKE  \l  (r4 I:org.kxml2.kdom.Node)\l  (r5 I:org.xmlpull.v1.XmlPullParser)\l org.kxml2.kdom.Node.parse(org.xmlpull.v1.XmlPullParser):void type: SUPER \l0x004e: INVOKE  (r0 I:int) = (r4 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.getChildCount():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0052|0x0052: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: CONST  (r0 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0055: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0057: INVOKE  \l  (r4 I:org.kxml2.kdom.Element)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l org.kxml2.kdom.Element.addChild(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x005b: INVOKE  (r1 I:java.lang.String) = (r4 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.getNamespace():java.lang.String type: VIRTUAL \l0x005f: INVOKE  (r2 I:java.lang.String) = (r4 I:org.kxml2.kdom.Element) org.kxml2.kdom.Element.getName():java.lang.String type: VIRTUAL \l0x0063: INVOKE  \l  (r5 I:org.xmlpull.v1.XmlPullParser)\l  (r0 I:int)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.require(int, java.lang.String, java.lang.String):void type: INTERFACE \l0x0066: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.nextToken():int type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0069|0x0069: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Element.parse((r4 'this' I:org.kxml2.kdom.Element A[IMMUTABLE_TYPE, THIS]), (r5 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

