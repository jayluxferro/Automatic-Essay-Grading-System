digraph "CFG fororg.kxml2.kdom.Element.write(Lorg\/xmlpull\/v1\/XmlSerializer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r5.prefixes == null) goto L_0x001c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lPHI: r0 \l  PHI: (r0v5 int) = (r0v4 int), (r0v6 int) binds: [B:2:0x0005, B:5:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0006\-\>B:5:0x000e\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if (r0 \>= r5.prefixes.size()) goto L_0x001c\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|LOOP_END\lLOOP:0: B:3:0x0006\-\>B:5:0x000e\l|r6.setPrefix(getNamespacePrefix(r0), getNamespaceUri(r0))\lint r0 = r0 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|r6.startTag(getNamespace(), getName())\lint r0 = getAttributeCount()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:6:0x001c, B:8:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x002b\-\>B:8:0x002d\l|if (r1 \>= r0) goto L_0x003f\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|LOOP_END\lLOOP:1: B:7:0x002b\-\>B:8:0x002d\l|r6.attribute(getAttributeNamespace(r1), getAttributeName(r1), getAttributeValue(r1))\lint r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|writeChildren(r6)\lr6.endTag(getNamespace(), getName())\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Element.write((r5v0 'this' org.kxml2.kdom.Element A[IMMUTABLE_TYPE, THIS]), (r6v0 org.xmlpull.v1.XmlSerializer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_11 -> Node_6;
Node_12 -> Node_9;
}

