digraph "CFG fororg.kxml2.kdom.Node.removeChild(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Vector) = (r4 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.children java.util.Vector \l0x0002: INVOKE  (r0 I:java.util.Vector), (r5 I:int) java.util.Vector.removeElementAt(int):void type: VIRTUAL \l0x0005: IGET  (r0 I:java.lang.StringBuffer) = (r4 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.types java.lang.StringBuffer \l0x0007: INVOKE  (r0 I:int) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.length():int type: VIRTUAL \l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x001e \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r1 I:java.lang.StringBuffer) = (r4 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.types java.lang.StringBuffer \l0x0011: IGET  (r2 I:java.lang.StringBuffer) = (r4 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.types java.lang.StringBuffer \l0x0013: ARITH  (r3 I:int) = (r5 I:int) + (1 int) \l0x0015: INVOKE  (r2 I:char) = (r2 I:java.lang.StringBuffer), (r3 I:int) java.lang.StringBuffer.charAt(int):char type: VIRTUAL \l0x0019: INVOKE  (r1 I:java.lang.StringBuffer), (r5 I:int), (r2 I:char) java.lang.StringBuffer.setCharAt(int, char):void type: VIRTUAL \l0x001c: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IGET  (r5 I:java.lang.StringBuffer) = (r4 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.types java.lang.StringBuffer \l0x0020: INVOKE  (r5 I:java.lang.StringBuffer), (r0 I:int) java.lang.StringBuffer.setLength(int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Node.removeChild((r4 'this' I:org.kxml2.kdom.Node A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

