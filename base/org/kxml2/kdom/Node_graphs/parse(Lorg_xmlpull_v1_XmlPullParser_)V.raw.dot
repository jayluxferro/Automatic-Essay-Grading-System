digraph "CFG fororg.kxml2.kdom.Node.parse(Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getEventType():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0027, 0x0013, 0x0027] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r2 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getText():java.lang.String type: INTERFACE \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0029 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getNamespace():java.lang.String type: INTERFACE \l0x0017: INVOKE  (r2 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE \l0x001b: INVOKE  (r1 I:org.kxml2.kdom.Element) = \l  (r4 I:org.kxml2.kdom.Node)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l org.kxml2.kdom.Node.createElement(java.lang.String, java.lang.String):org.kxml2.kdom.Element type: VIRTUAL \l0x001f: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0020: INVOKE  \l  (r4 I:org.kxml2.kdom.Node)\l  (r2 I:int)\l  (r1 I:java.lang.Object)\l org.kxml2.kdom.Node.addChild(int, java.lang.Object):void type: VIRTUAL \l0x0023: INVOKE  \l  (r1 I:org.kxml2.kdom.Element)\l  (r5 I:org.xmlpull.v1.XmlPullParser)\l org.kxml2.kdom.Element.parse(org.xmlpull.v1.XmlPullParser):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: INVOKE  (r2 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getText():java.lang.String type: INTERFACE \l0x002d: INVOKE  \l  (r4 I:org.kxml2.kdom.Node)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l org.kxml2.kdom.Node.addChild(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0040 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: INVOKE  (r1 I:java.lang.String) = (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE \l0x003d: INVOKE  \l  (r4 I:org.kxml2.kdom.Node)\l  (r3 I:int)\l  (r1 I:java.lang.Object)\l org.kxml2.kdom.Node.addChild(int, java.lang.Object):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.nextToken():int type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Node.parse((r4 'this' I:org.kxml2.kdom.Node A[IMMUTABLE_TYPE, THIS]), (r5 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_15;
Node_8 -> Node_15;
Node_9 -> Node_14;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_15 -> Node_16[style=dashed];
}

