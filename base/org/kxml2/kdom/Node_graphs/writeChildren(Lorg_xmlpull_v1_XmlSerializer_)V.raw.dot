digraph "CFG fororg.kxml2.kdom.Node.writeChildren(Lorg\/xmlpull\/v1\/XmlSerializer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Vector) = (r5 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.children java.util.Vector \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:java.util.Vector) = (r5 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.children java.util.Vector \l0x0007: INVOKE  (r0 I:int) = (r0 I:java.util.Vector) java.util.Vector.size():int type: VIRTUAL \l0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:19:0x0067 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: INVOKE  (r2 I:int) = (r5 I:org.kxml2.kdom.Node), (r1 I:int) org.kxml2.kdom.Node.getType(int):int type: VIRTUAL \l0x0012: IGET  (r3 I:java.util.Vector) = (r5 I:org.kxml2.kdom.Node) org.kxml2.kdom.Node.children java.util.Vector \l0x0014: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Vector), (r1 I:int) java.util.Vector.elementAt(int):java.lang.Object type: VIRTUAL \l0x0018: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005f \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: SWITCH  \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[4, 5, 6, 7, 8, 9, 10] t:[0x0059, 0x0053, 0x004d, 0x0047, 0x0041, 0x003b, 0x0035] \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: NEW_INSTANCE  (r6 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0020: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0022: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r1 I:java.lang.String) =  \"Illegal type: \" \l0x0027: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x002a: INVOKE  (r0 I:java.lang.StringBuffer), (r2 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x002d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  (r6 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0037: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.docdecl(java.lang.String):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.comment(java.lang.String):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0043: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.processingInstruction(java.lang.String):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0049: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.ignorableWhitespace(java.lang.String):void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.entityRef(java.lang.String):void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0053|0x0053: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x0055: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.cdsect(java.lang.String):void type: INTERFACE \l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|0x0059: CHECK_CAST  (r3 I:java.lang.String) = (java.lang.String) (r3 I:?[OBJECT, ARRAY]) \l0x005b: INVOKE  \l  (r6 I:org.xmlpull.v1.XmlSerializer)\l  (r3 I:java.lang.String)\l org.xmlpull.v1.XmlSerializer.text(java.lang.String):org.xmlpull.v1.XmlSerializer type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x005f|0x005f: CHECK_CAST  (r3 I:org.kxml2.kdom.Element) = (org.kxml2.kdom.Element) (r3 I:?[OBJECT, ARRAY]) \l0x0061: INVOKE  \l  (r3 I:org.kxml2.kdom.Element)\l  (r6 I:org.xmlpull.v1.XmlSerializer)\l org.kxml2.kdom.Element.write(org.xmlpull.v1.XmlSerializer):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|0x0067: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Node.writeChildren((r5 'this' I:org.kxml2.kdom.Node A[IMMUTABLE_TYPE, THIS]), (r6 I:org.xmlpull.v1.XmlSerializer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_7 -> Node_11;
Node_7 -> Node_12;
Node_7 -> Node_13;
Node_7 -> Node_14;
Node_7 -> Node_15;
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_10 -> Node_18;
Node_11 -> Node_18;
Node_12 -> Node_18;
Node_13 -> Node_18;
Node_14 -> Node_18;
Node_15 -> Node_18;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_4;
}

