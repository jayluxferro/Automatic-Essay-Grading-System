digraph "CFG fororg.kxml2.kdom.Document.parse(Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  \l  (r3 I:org.xmlpull.v1.XmlPullParser)\l  (r1 I:int)\l  (r0 I:java.lang.String)\l  (r0 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.require(int, java.lang.String, java.lang.String):void type: INTERFACE \l0x0005: INVOKE  (r3 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.nextToken():int type: INTERFACE \l0x0008: INVOKE  (r0 I:java.lang.String) = (r3 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getInputEncoding():java.lang.String type: INTERFACE \l0x000c: IPUT  (r0 I:java.lang.String), (r2 I:org.kxml2.kdom.Document) org.kxml2.kdom.Document.encoding java.lang.String \l0x000e: CONST_STR  (r0 I:java.lang.String) =  \"http:\/\/xmlpull.org\/v1\/doc\/properties.html#xmldecl\-standalone\" \l0x0010: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:org.xmlpull.v1.XmlPullParser)\l  (r0 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.getProperty(java.lang.String):java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:?[OBJECT, ARRAY]) \l0x0016: IPUT  (r0 I:java.lang.Boolean), (r2 I:org.kxml2.kdom.Document) org.kxml2.kdom.Document.standalone java.lang.Boolean \l0x0018: INVOKE  \l  (r2 I:org.kxml2.kdom.Node)\l  (r3 I:org.xmlpull.v1.XmlPullParser)\l org.kxml2.kdom.Node.parse(org.xmlpull.v1.XmlPullParser):void type: SUPER \l0x001b: INVOKE  (r3 I:int) = (r3 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getEventType():int type: INTERFACE \l0x001f: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|0x0023: NEW_INSTANCE  (r3 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0025: CONST_STR  (r0 I:java.lang.String) =  \"Document end expected!\" \l0x0027: INVOKE  (r3 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.kxml2.kdom.Document.parse((r2 'this' I:org.kxml2.kdom.Document A[IMMUTABLE_TYPE, THIS]), (r3 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

