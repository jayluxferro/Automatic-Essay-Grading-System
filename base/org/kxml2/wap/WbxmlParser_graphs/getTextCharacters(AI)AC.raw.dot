digraph "CFG fororg.kxml2.wap.WbxmlParser.getTextCharacters([I)[C" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:4:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: APUT  \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r2 I:?[int, float])\l \l0x0009: IGET  (r0 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x000b: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000f: APUT  \l  (r5 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0011: IGET  (r5 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x0013: INVOKE  (r5 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0017: NEW_ARRAY  (r5 I:char[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0019: IGET  (r0 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x001b: IGET  (r1 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x001d: INVOKE  (r1 I:int) = (r1 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0021: INVOKE  \l  (r0 I:java.lang.String)\l  (r2 I:int)\l  (r1 I:int)\l  (r5 I:char[])\l  (r2 I:int)\l java.lang.String.getChars(int, int, char[], int):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|0x0024: RETURN  (r5 I:char[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0025|0x0025: CONST  (r0 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x0026: APUT  \l  (r5 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0028: APUT  \l  (r5 I:?[int, float][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x002a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: RETURN  (r5 I:char[]) \l}"];
MethodNode[shape=record,label="{public char[] org.kxml2.wap.WbxmlParser.getTextCharacters((r4 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

