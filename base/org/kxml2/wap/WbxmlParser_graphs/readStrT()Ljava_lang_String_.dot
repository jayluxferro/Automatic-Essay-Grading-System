digraph "CFG fororg.kxml2.wap.WbxmlParser.readStrT()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = readInt()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r5.cacheStringTable != null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r5.cacheStringTable = new java.util.Hashtable()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|java.lang.String r1 = (java.lang.String) r5.cacheStringTable.get(new java.lang.Integer(r0))\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|if (r1 != null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|r1 = r0\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|LOOP_START\lPHI: r1 \l  PHI: (r1v5 int) = (r1v4 int), (r1v9 int) binds: [B:5:0x001e, B:10:0x002a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:6:0x001f\-\>B:10:0x002a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|if (r1 \>= r5.stringTable.length) goto L_0x002d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024}"];
Node_9 [shape=record,label="{9\:\ 0x0028|if (r5.stringTable[r1] == 0) goto L_0x002d\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|LOOP_END\lLOOP:0: B:6:0x001f\-\>B:10:0x002a\l|int r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|java.lang.String r2 = new java.lang.String(r5.stringTable, r0, r1 \- r0, r5.encoding)\lr5.cacheStringTable.put(new java.lang.Integer(r0), r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r2\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
MethodNode[shape=record,label="{java.lang.String org.kxml2.wap.WbxmlParser.readStrT((r5v0 'this' org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_6;
Node_11 -> Node_14;
Node_12 -> Node_11;
Node_13 -> Node_11;
}

