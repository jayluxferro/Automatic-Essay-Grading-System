digraph "CFG fororg.kxml2.wap.WbxmlParser.resolveWapExtension(ILjava\/lang\/Object;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r4 I:boolean) = (r5 I:?[OBJECT, ARRAY]) byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r4 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0006: INVOKE  (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0009: CHECK_CAST  (r5 I:byte[]) = (byte[]) (r5 I:?[OBJECT, ARRAY]) \l0x000b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: ARRAY_LENGTH  (r1 I:int) = (r5 I:?[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST_STR  (r1 I:java.lang.String) =  \"0123456789abcdef\" \l0x0011: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0013: ARITH  (r2 I:int) = (r2 I:int) \>\> (4 int) \l0x0015: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0017: INVOKE  (r1 I:char) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x001b: INVOKE  (r4 I:java.lang.StringBuffer), (r1 I:char) java.lang.StringBuffer.append(char):java.lang.StringBuffer type: VIRTUAL \l0x001e: CONST_STR  (r1 I:java.lang.String) =  \"0123456789abcdef\" \l0x0020: AGET  (r2 I:byte A[IMMUTABLE_TYPE]) = \l  (r5 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l \l0x0022: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r2 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0024: INVOKE  (r1 I:char) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0028: INVOKE  (r4 I:java.lang.StringBuffer), (r1 I:char) java.lang.StringBuffer.append(char):java.lang.StringBuffer type: VIRTUAL \l0x002b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: RETURN  (r4 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: NEW_INSTANCE  (r4 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0035: INVOKE  (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0038: CONST_STR  (r0 I:java.lang.String) =  \"$(\" \l0x003a: INVOKE  (r4 I:java.lang.StringBuffer), (r0 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x003d: INVOKE  (r4 I:java.lang.StringBuffer), (r5 I:java.lang.Object) java.lang.StringBuffer.append(java.lang.Object):java.lang.StringBuffer type: VIRTUAL \l0x0040: CONST_STR  (r5 I:java.lang.String) =  \")\" \l0x0042: INVOKE  (r4 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0045: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|0x0049: RETURN  (r4 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{protected java.lang.String org.kxml2.wap.WbxmlParser.resolveWapExtension((r3 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

