digraph "CFG fororg.kxml2.wap.WbxmlParser.readStrI()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x0002: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IGET  (r2 I:java.io.InputStream) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.in java.io.InputStream \l0x0008: INVOKE  (r2 I:int) = (r2 I:java.io.InputStream) java.io.InputStream.read():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001f \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IPUT  (r1 I:boolean), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.isWhitespace boolean \l0x0010: NEW_INSTANCE  (r1 I:java.lang.String) =  java.lang.String \l0x0012: INVOKE  (r2 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l0x0016: IGET  (r3 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.encoding java.lang.String \l0x0018: INVOKE  \l  (r1 I:java.lang.String)\l  (r2 I:byte[])\l  (r3 I:java.lang.String)\l java.lang.String.\<init\>(byte[], java.lang.String):void type: DIRECT \l0x001b: INVOKE  (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: RETURN  (r1 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: CONST  (r3 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:10:0x0027 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: NEW_INSTANCE  (r0 I:java.io.IOException) =  java.io.IOException \l0x002d: CONST_STR  (r1 I:java.lang.String) =  \"Unexpected EOF\" \l0x002f: INVOKE  (r0 I:java.io.IOException), (r1 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{java.lang.String org.kxml2.wap.WbxmlParser.readStrI((r4 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12;
}

