digraph "CFG fororg.kxml2.wap.WbxmlParser.readAttr()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00ce \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r0 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL \l0x000f: INVOKE  \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r0 I:int)\l  (r1 I:boolean)\l org.kxml2.wap.WbxmlParser.selectPage(int, boolean):void type: DIRECT \l0x0012: INVOKE  (r0 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r4 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attrStartTable java.lang.String[] \l0x0019: INVOKE  (r0 I:java.lang.String) = \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r4 I:java.lang.String[])\l  (r0 I:int)\l org.kxml2.wap.WbxmlParser.resolveId(java.lang.String[], int):java.lang.String type: VIRTUAL \l0x001d: CONST  (r4 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l0x001f: INVOKE  (r4 I:int) = (r0 I:java.lang.String), (r4 I:int) java.lang.String.indexOf(int):int type: VIRTUAL \l0x0023: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0028: INVOKE  (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: NEW_INSTANCE  (r5 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x002e: ARITH  (r6 I:int) = (r4 I:int) + (1 int) \l0x0030: INVOKE  (r6 I:java.lang.String) = (r0 I:java.lang.String), (r6 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0034: INVOKE  (r5 I:java.lang.StringBuffer), (r6 I:java.lang.String) java.lang.StringBuffer.\<init\>(java.lang.String):void type: DIRECT \l0x0037: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:int), (r4 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x003b: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: INVOKE  (r5 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL \l0x0040: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (131(0x83, float:1.84E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|0x0050: CONST  (r7 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: IF  (r5 I:?[int, byte, short, char]) \< (r7 I:?[int, byte, short, char])  \-\> B:22:0x0058 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: CONST  (r7 I:?[int, float, short, byte, char]) = (66 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0056|0x0056: IF  (r5 I:?[int, byte, short, char]) \<= (r7 I:?[int, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0058|0x0058: IF  (r5 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:26:0x005f \l}"];
Node_23 [shape=record,label="{23\:\ 0x005a|0x005a: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (130(0x82, float:1.82E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|0x005c: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:26:0x005f \l}"];
Node_26 [shape=record,label="{26\:\ 0x005f|0x005f: IGET  (r6 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x0061: ARITH  (r7 I:int) = (r2 I:int) + (4 int) \l0x0063: INVOKE  (r6 I:java.lang.String[]) = \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r6 I:java.lang.String[])\l  (r7 I:int)\l org.kxml2.wap.WbxmlParser.ensureCapacity(java.lang.String[], int):java.lang.String[] type: DIRECT \l0x0067: IPUT  (r6 I:java.lang.String[]), (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x0069: IGET  (r6 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x006b: ARITH  (r7 I:int) = (r2 I:int) + (1 int) \l0x006d: CONST_STR  (r8 I:java.lang.String) =  \"\" \l0x006f: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0071: IGET  (r2 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x0073: ARITH  (r6 I:int) = (r7 I:int) + (1 int) \l0x0075: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0076: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l \l0x0078: IGET  (r2 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x007a: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x007c: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r6 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x007e: IGET  (r0 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributes java.lang.String[] \l0x0080: ARITH  (r2 I:int) = (r7 I:int) + (1 int) \l0x0082: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0086: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0088: IGET  (r0 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributeCount int \l0x008a: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x008b: IPUT  (r0 I:int), (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attributeCount int \l0x008d: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0090|0x0090: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00c5 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0092|0x0092: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3] t:[0x00bb, 0x00b6] \l}"];
Node_29 [shape=record,label="{29\:\ 0x0095|0x0095: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[64, 65, 66] t:[0x00ad, 0x00ad, 0x00ad] \l}"];
Node_30 [shape=record,label="{30\:\ 0x0098|0x0098: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[128, 129, 130, 131] t:[0x00ad, 0x00ad, 0x00ad, 0x00a8] \l}"];
Node_31 [shape=record,label="{31\:\ 0x009b|0x009b: SWITCH  \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[192, 193, 194, 195] t:[0x00ad, 0x00ad, 0x00ad, 0x00ad] \l}"];
Node_32 [shape=record,label="{32\:\ 0x009e|0x009e: IGET  (r6 I:java.lang.String[]) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.attrValueTable java.lang.String[] \l0x00a0: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r6 I:java.lang.String[])\l  (r5 I:int)\l org.kxml2.wap.WbxmlParser.resolveId(java.lang.String[], int):java.lang.String type: VIRTUAL \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a4|0x00a4: INVOKE  (r4 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a8|0x00a8: INVOKE  (r5 I:java.lang.String) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readStrT():java.lang.String type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ad|0x00ad: INVOKE  (r6 I:java.lang.Object) = (r9 I:org.kxml2.wap.WbxmlParser), (r5 I:int) org.kxml2.wap.WbxmlParser.parseWapExtension(int):java.lang.Object type: VIRTUAL \l0x00b1: INVOKE  (r5 I:java.lang.String) = \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l org.kxml2.wap.WbxmlParser.resolveWapExtension(int, java.lang.Object):java.lang.String type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b6|0x00b6: INVOKE  (r5 I:java.lang.String) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readStrI():java.lang.String type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00bb|0x00bb: INVOKE  (r5 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL \l0x00bf: CAST  (r5 I:char) = (char) (r5 I:int) \l0x00c0: INVOKE  (r4 I:java.lang.StringBuffer), (r5 I:char) java.lang.StringBuffer.append(char):java.lang.StringBuffer type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c5|0x00c5: INVOKE  (r5 I:int) = (r9 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL \l0x00c9: INVOKE  \l  (r9 I:org.kxml2.wap.WbxmlParser)\l  (r5 I:int)\l  (r1 I:boolean)\l org.kxml2.wap.WbxmlParser.selectPage(int, boolean):void type: DIRECT \l}"];
Node_39 [shape=record,label="{39\:\ 0x00ce|0x00ce: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlParser.readAttr((r9 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_39;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_27;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_27;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_27;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_1;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_28 -> Node_36;
Node_28 -> Node_37;
Node_29 -> Node_30;
Node_29 -> Node_35;
Node_30 -> Node_31;
Node_30 -> Node_34;
Node_30 -> Node_35;
Node_31 -> Node_32;
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_9;
Node_34 -> Node_33;
Node_35 -> Node_33;
Node_36 -> Node_33;
Node_37 -> Node_9;
Node_38 -> Node_9;
}

