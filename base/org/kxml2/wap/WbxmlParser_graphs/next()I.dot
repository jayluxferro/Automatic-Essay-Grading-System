digraph "CFG fororg.kxml2.wap.WbxmlParser.next()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.isWhitespace = true\lr0 = 9999\l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r0 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:0:0x0000, B:24:0x0005] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:24:0x0005\l|java.lang.String r1 = r4.text\lnextImpl()\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r4.type \>= r0) goto L_0x0010\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|int r0 = r4.type\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|PHI: r0 \l  PHI: (r0v3 int) = (r0v2 int), (r0v6 int) binds: [B:2:0x000c, B:3:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r0 \<= 5) goto L_0x0014\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014}"];
Node_7 [shape=record,label="{7\:\ 0x0015|if (r0 \< 4) goto L_0x0043\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|if (r1 == null) goto L_0x0031\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019}"];
Node_10 [shape=record,label="{10\:\ 0x001b|if (r4.text != null) goto L_0x001e\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|java.lang.StringBuffer r3 = new java.lang.StringBuffer()\lr3.append(r1)\lr3.append(r4.text)\ljava.lang.String r1 = r3.toString()\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|PHI: r1 \l  PHI: (r1v2 java.lang.String) = (r1v0 java.lang.String), (r1v4 java.lang.String) binds: [B:10:0x001b, B:11:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|r4.text = r1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|int r1 = peekId()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|if (r1 == 68) goto L_0x0005\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039}"];
Node_16 [shape=record,label="{16\:\ 0x003b|if (r1 == 196) goto L_0x0005\l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|switch(r1) \{\l    case 2: goto L_0x0005;\l    case 3: goto L_0x0005;\l    case 4: goto L_0x0005;\l    default: goto L_0x0040;\l\}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|switch(r1) \{\l    case org.kxml2.wap.Wbxml.STR_T :int: goto L_0x0005;\l    case org.kxml2.wap.Wbxml.LITERAL_A :int: goto L_0x0005;\l    default: goto L_0x0043;\l\}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|r4.type = r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|if (r4.type \<= 4) goto L_0x004b\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|r4.type = 4\l}"];
Node_22 [shape=record,label="{22\:\ 0x004b}"];
Node_23 [shape=record,label="{23\:\ 0x004d|RETURN\l|return r4.type\l}"];
Node_24 [shape=record,label="{24\:\ 0x0005|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0005\-\>B:24:0x0005\l}"];
Node_25 [shape=record,label="{25\:\ 0x0043|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0043|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0005|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0005|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0005|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0005|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int org.kxml2.wap.WbxmlParser.next((r4v0 'this' org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_27[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_26;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_28;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_29;
Node_17 -> Node_18;
Node_17 -> Node_30;
Node_18 -> Node_25;
Node_18 -> Node_31;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_1;
Node_25 -> Node_19;
Node_26 -> Node_19;
Node_27 -> Node_24;
Node_28 -> Node_24;
Node_29 -> Node_24;
Node_30 -> Node_24;
Node_31 -> Node_24;
}

