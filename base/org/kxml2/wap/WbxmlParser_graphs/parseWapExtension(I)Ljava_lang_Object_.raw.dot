digraph "CFG fororg.kxml2.wap.WbxmlParser.parseWapExtension(I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[64, 65, 66] t:[0x003c, 0x003c, 0x003c] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[128, 129, 130] t:[0x0032, 0x0032, 0x0032] \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: SWITCH  \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[192, 193, 194, 195] t:[0x0031, 0x0031, 0x0031, 0x001f] \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x000c: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x000f: CONST_STR  (r2 I:java.lang.String) =  \"illegal id: \" \l0x0011: INVOKE  (r1 I:java.lang.StringBuffer), (r2 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0014: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x0017: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x001b: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser), (r4 I:java.lang.String) org.kxml2.wap.WbxmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r0 I:java.lang.Object) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: INVOKE  (r4 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL \l0x0023: NEW_ARRAY  (r0 I:byte[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: byte[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IGET  (r1 I:java.io.InputStream) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.in java.io.InputStream \l0x0029: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x002a: ARITH  (r2 I:int) = (r2 I:int) \- (r4 I:int) \l0x002b: INVOKE  (r1 I:int) = \l  (r1 I:java.io.InputStream)\l  (r0 I:byte[])\l  (r2 I:int)\l  (r4 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL \l0x002f: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: RETURN  (r0 I:java.lang.Object) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: NEW_INSTANCE  (r4 I:java.lang.Integer) =  java.lang.Integer \l0x0034: INVOKE  (r0 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL \l0x0038: INVOKE  (r4 I:java.lang.Integer), (r0 I:int) java.lang.Integer.\<init\>(int):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: RETURN  (r4 I:java.lang.Object) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: INVOKE  (r4 I:java.lang.String) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readStrI():java.lang.String type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|0x0040: RETURN  (r4 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object org.kxml2.wap.WbxmlParser.parseWapExtension((r3 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_12;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_7;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

