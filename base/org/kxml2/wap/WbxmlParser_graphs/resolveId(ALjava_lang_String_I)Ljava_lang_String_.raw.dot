digraph "CFG fororg.kxml2.wap.WbxmlParser.resolveId([Ljava\/lang\/String;I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r4 I:?[int, boolean, short, byte, char]) & (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char]) \l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (\-5 int) \l0x0004: CONST  (r1 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IPUT  (r1 I:int), (r2 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.wapCode int \l0x0009: INVOKE  (r3 I:java.lang.String) = (r2 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readStrT():java.lang.String type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r3 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: ARRAY_LENGTH  (r1 I:int) = (r3 I:?[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: AGET  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: ARITH  (r4 I:int) = (r0 I:int) + (5 int) \l0x001b: IPUT  (r4 I:int), (r2 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.wapCode int \l0x001d: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r3 I:java.lang.String) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: NEW_INSTANCE  (r3 I:java.io.IOException) =  java.io.IOException \l0x0022: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0024: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0027: CONST_STR  (r1 I:java.lang.String) =  \"id \" \l0x0029: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x002c: INVOKE  (r0 I:java.lang.StringBuffer), (r4 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL \l0x002f: CONST_STR  (r4 I:java.lang.String) =  \" undef.\" \l0x0031: INVOKE  (r0 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0034: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r3 I:java.io.IOException), (r4 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{java.lang.String org.kxml2.wap.WbxmlParser.resolveId((r2 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

