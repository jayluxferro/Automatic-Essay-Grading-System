digraph "CFG fororg.kxml2.wap.WbxmlParser.require(ILjava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.String) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.getNamespace():java.lang.String type: VIRTUAL \l0x000a: INVOKE  (r0 I:boolean) = (r5 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0057 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r0 I:java.lang.String) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.getName():java.lang.String type: VIRTUAL \l0x0016: INVOKE  (r0 I:boolean) = (r6 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0057 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: NEW_INSTANCE  (r0 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x001e: INVOKE  (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0021: CONST_STR  (r1 I:java.lang.String) =  \"expected: \" \l0x0023: INVOKE  (r0 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0026: CONST  (r1 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002d \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: CONST_STR  (r4 I:java.lang.String) =  \"WAP Ext.\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: NEW_INSTANCE  (r1 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x002f: INVOKE  (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0032: SGET  (r2 I:java.lang.String[]) =  org.xmlpull.v1.XmlPullParser.TYPES java.lang.String[] \l0x0034: AGET  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0036: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0039: CONST_STR  (r4 I:java.lang.String) =  \" \{\" \l0x003b: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x003e: INVOKE  (r1 I:java.lang.StringBuffer), (r5 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0041: CONST_STR  (r4 I:java.lang.String) =  \"\}\" \l0x0043: INVOKE  (r1 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0046: INVOKE  (r1 I:java.lang.StringBuffer), (r6 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0049: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004d|0x004d: INVOKE  (r0 I:java.lang.StringBuffer), (r4 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0050: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0054: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser), (r4 I:java.lang.String) org.kxml2.wap.WbxmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlParser.require((r3 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

