digraph "CFG fororg.kxml2.wap.WbxmlParser.next()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IPUT  (r0 I:boolean), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.isWhitespace boolean \l0x0003: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (9999(0x270f, float:1.4012E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IGET  (r1 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x0007: INVOKE  (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.nextImpl():void type: DIRECT \l0x000a: IGET  (r2 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r2 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:21:0x0043 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0031 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IGET  (r3 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: NEW_INSTANCE  (r3 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x0020: INVOKE  (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x0023: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0026: IGET  (r1 I:java.lang.String) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l0x0028: INVOKE  (r3 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x002b: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IPUT  (r1 I:java.lang.String), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.text java.lang.String \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: INVOKE  (r1 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.peekId():int type: DIRECT \l0x0035: CONST  (r3 I:?[int, float, short, byte, char]) = (68 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0005 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|0x0039: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (196(0xc4, float:2.75E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0005 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[2, 3, 4] t:[0x0005, 0x0005, 0x0005] \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: SWITCH  \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[131, 132] t:[0x0005, 0x0005] \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: IPUT  (r0 I:int), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l0x0045: IGET  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:24:0x004b \l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|0x0049: IPUT  (r2 I:int), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_24 [shape=record,label="{24\:\ 0x004b|0x004b: IGET  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int org.kxml2.wap.WbxmlParser.next((r4 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_1[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_21;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_1;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

