digraph "CFG fororg.kxml2.wap.WbxmlParser.readStrI()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.ByteArrayOutputStream r0 = new java.io.ByteArrayOutputStream()\lr1 = true\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v4 boolean) binds: [B:0:0x0000, B:10:0x0027] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:10:0x0027\l|int r2 = r4.f264in.read()\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r2 != 0) goto L_0x001f\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|r4.isWhitespace = r1\ljava.lang.String r1 = new java.lang.String(r0.toByteArray(), r4.encoding)\lr0.close()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|RETURN\l|return r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f}"];
Node_6 [shape=record,label="{6\:\ 0x0020|if (r2 == \-1) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022}"];
Node_8 [shape=record,label="{8\:\ 0x0024|if (r2 \<= 32) goto L_0x0027\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|r1 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|LOOP_END\lPHI: r1 \l  PHI: (r1v4 boolean) = (r1v1 boolean), (r1v5 boolean) binds: [B:16:0x0027, B:15:0x0027] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:10:0x0027\l|r0.write(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b}"];
Node_12 [shape=record,label="{12\:\ 0x0032|throw new java.io.IOException(UNEXPECTED_EOF)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.lang.String org.kxml2.wap.WbxmlParser.readStrI((r4v0 'this' org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_5;
Node_2 -> Node_14[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_15;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_13 -> Node_11;
Node_14 -> Node_3;
Node_15 -> Node_10;
Node_16 -> Node_10;
}

