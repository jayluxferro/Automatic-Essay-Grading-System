digraph "CFG fororg.kxml2.wap.WbxmlParser.nextText()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST_STR  (r0 I:java.lang.String) =  \"precondition: START_TAG\" \l0x0007: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser), (r0 I:java.lang.String) org.kxml2.wap.WbxmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.next():int type: VIRTUAL \l0x000d: IGET  (r0 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l0x000f: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: INVOKE  (r0 I:java.lang.String) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.getText():java.lang.String type: VIRTUAL \l0x0016: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.next():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST_STR  (r0 I:java.lang.String) =  \"\" \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r1 I:int) = (r3 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.type int \l0x001e: CONST  (r2 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: CONST_STR  (r1 I:java.lang.String) =  \"END_TAG expected\" \l0x0023: INVOKE  (r3 I:org.kxml2.wap.WbxmlParser), (r1 I:java.lang.String) org.kxml2.wap.WbxmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String org.kxml2.wap.WbxmlParser.nextText((r3 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException, java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
}

