digraph "CFG fororg.kxml2.wap.WbxmlParser.setInput(Ljava\/io\/InputStream;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r5 I:java.io.InputStream)\l  (r4 I:org.kxml2.wap.WbxmlParser)\l org.kxml2.wap.WbxmlParser.in java.io.InputStream \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|SYNTHETIC\lSplitter:B:1:0x0002\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0002\l|0x0002: INVOKE  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readByte():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}, TRY_ENTER]\l0x0006: IPUT  (r0 I:int), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.version int A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0008: INVOKE  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l0x000c: IPUT  (r0 I:int), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.publicIdentifierId int A[Catch:\{ IOException \-\> 0x0062 \}]\l0x000e: IGET  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.publicIdentifierId int A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r0 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: CONST  (r6 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003e A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (106(0x6a, float:1.49E\-43) ?[int, float, short, byte, char])\l A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0027 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: CONST_STR  (r6 I:java.lang.String) =  \"UTF\-8\" A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IPUT  (r6 I:java.lang.String), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.encoding java.lang.String A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0026: GOTO  \-\> 0x0041 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: NEW_INSTANCE  (r5 I:java.io.UnsupportedEncodingException) =  java.io.UnsupportedEncodingException A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0029: NEW_INSTANCE  (r6 I:java.lang.StringBuffer) =  java.lang.StringBuffer A[Catch:\{ IOException \-\> 0x0062 \}]\l0x002b: INVOKE  (r6 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x0062 \}]\l0x002e: CONST_STR  (r1 I:java.lang.String) =  \"\" A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0030: INVOKE  (r6 I:java.lang.StringBuffer), (r1 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0033: INVOKE  (r6 I:java.lang.StringBuffer), (r0 I:int) java.lang.StringBuffer.append(int):java.lang.StringBuffer type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0036: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l0x003a: INVOKE  \l  (r5 I:java.io.UnsupportedEncodingException)\l  (r6 I:java.lang.String)\l java.io.UnsupportedEncodingException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: CONST_STR  (r6 I:java.lang.String) =  \"ISO\-8859\-1\" A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0040: GOTO  \-\> 0x0024 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|0x0041: INVOKE  (r6 I:int) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.readInt():int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0045: NEW_ARRAY  (r0 I:byte[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0047: IPUT  (r0 I:byte[]), (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.stringTable byte[] A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0049: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x0062 \}]\l0x004a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|0x004b: IF  (r1 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:22:0x005a A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: IGET  (r2 I:byte[]) = (r4 I:org.kxml2.wap.WbxmlParser) org.kxml2.wap.WbxmlParser.stringTable byte[] A[Catch:\{ IOException \-\> 0x0062 \}]\l0x004f: ARITH  (r3 I:int) = (r6 I:int) \- (r1 I:int) A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0051: INVOKE  (r2 I:int) = \l  (r5 I:java.io.InputStream)\l  (r2 I:byte[])\l  (r1 I:int)\l  (r3 I:int)\l java.io.InputStream.read(byte[], int, int):int type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: IF  (r2 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:21:0x0058 A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: GOTO  \-\> 0x005a A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) A[Catch:\{ IOException \-\> 0x0062 \}]\l0x0059: GOTO  \-\> 0x004b A[Catch:\{ IOException \-\> 0x0062 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ IOException \-\> 0x0062 \}]\l0x005b: INVOKE  \l  (r4 I:org.kxml2.wap.WbxmlParser)\l  (r0 I:int)\l  (r5 I:boolean)\l org.kxml2.wap.WbxmlParser.selectPage(int, boolean):void type: DIRECT A[Catch:\{ IOException \-\> 0x0062 \}]\l0x005e: INVOKE  \l  (r4 I:org.kxml2.wap.WbxmlParser)\l  (r0 I:int)\l  (r0 I:boolean)\l org.kxml2.wap.WbxmlParser.selectPage(int, boolean):void type: DIRECT A[Catch:\{ IOException \-\> 0x0062 \}, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0062|0x0062: CONST_STR  (r5 I:java.lang.String) =  \"Illegal input format\" \l0x0064: INVOKE  (r4 I:org.kxml2.wap.WbxmlParser), (r5 I:java.lang.String) org.kxml2.wap.WbxmlParser.exception(java.lang.String):void type: DIRECT \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:1:0x0002\l}"];
Node_26 [shape=record,label="{26\:\ 0x0067|0x0067: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlParser.setInput((r4 'this' I:org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_17;
Node_22 -> Node_26;
Node_24 -> Node_26;
Node_25 -> Node_24;
}

