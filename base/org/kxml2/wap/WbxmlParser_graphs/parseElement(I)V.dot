digraph "CFG fororg.kxml2.wap.WbxmlParser.parseElement(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r7.type = 2\lr7.name = resolveId(r7.tagTable, r8 & 63)\lr7.attributeCount = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|if ((r8 & 128) == 0) goto L_0x0017\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|readAttr()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017}"];
Node_4 [shape=record,label="{4\:\ 0x001a|if ((r8 & 64) != 0) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|r8 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|r8 = false\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|PHI: r8 \l  PHI: (r8v2 boolean) = (r8v6 boolean), (r8v7 boolean) binds: [B:6:0x001e, B:5:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|r7.degenerated = r8\lint r8 = r7.depth\lr7.depth = r8 + 1\lint r8 = r8 \<\< 2\lr7.elementStack = ensureCapacity(r7.elementStack, r8 + 4)\lr7.elementStack[r8 + 3] = r7.name\l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|if (r7.depth \< r7.nspCounts.length) goto L_0x0051\l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|int[] r3 = new int[(r7.depth + 4)]\ljava.lang.System.arraycopy(r7.nspCounts, 0, r3, 0, r7.nspCounts.length)\lr7.nspCounts = r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0051|r7.nspCounts[r7.depth] = r7.nspCounts[r7.depth \- 1]\lint r3 = r7.attributeCount \- 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0061|LOOP_START\lPHI: r3 \l  PHI: (r3v8 int) = (r3v7 int), (r3v10 int) binds: [B:10:0x0051, B:18:0x008f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:11:0x0061\-\>B:18:0x008f\l|if (r3 \<= 0) goto L_0x0092\l}"];
Node_12 [shape=record,label="{12\:\ 0x0063|r2 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0064|LOOP_START\lPHI: r2 \l  PHI: (r2v6 int) = (r2v5 int), (r2v7 int) binds: [B:12:0x0063, B:17:0x008c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:13:0x0064\-\>B:17:0x008c\l|if (r2 \>= r3) goto L_0x008f\l}"];
Node_14 [shape=record,label="{14\:\ 0x0066}"];
Node_15 [shape=record,label="{15\:\ 0x0072|if (getAttributeName(r3).equals(getAttributeName(r2)) == false) goto L_0x008c\l}"];
Node_16 [shape=record,label="{16\:\ 0x0074|java.lang.StringBuffer r4 = new java.lang.StringBuffer()\lr4.append(\"Duplicate Attribute: \")\lr4.append(getAttributeName(r3))\lexception(r4.toString())\l}"];
Node_17 [shape=record,label="{17\:\ 0x008c|LOOP_END\lLOOP:1: B:13:0x0064\-\>B:17:0x008c\l|int r2 = r2 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x008f|LOOP_END\lLOOP:0: B:11:0x0061\-\>B:18:0x008f\l|int r3 = r3 + \-1\l}"];
Node_19 [shape=record,label="{19\:\ 0x0092}"];
Node_20 [shape=record,label="{20\:\ 0x0094|if (r7.processNsp == false) goto L_0x009a\l}"];
Node_21 [shape=record,label="{21\:\ 0x0096|adjustNsp()\l}"];
Node_22 [shape=record,label="{22\:\ 0x009a|r7.namespace = \"\"\l}"];
Node_23 [shape=record,label="{23\:\ 0x009e|r7.elementStack[r8] = r7.namespace\lr7.elementStack[r8 + 1] = r7.prefix\lr7.elementStack[r8 + 2] = r7.name\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b3|RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x0092|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x008f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x008c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x008c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void org.kxml2.wap.WbxmlParser.parseElement((r7v0 'this' org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_25;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_26;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_28;
Node_16 -> Node_27;
Node_17 -> Node_13;
Node_18 -> Node_11;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_19;
Node_26 -> Node_18;
Node_27 -> Node_17;
Node_28 -> Node_17;
}

