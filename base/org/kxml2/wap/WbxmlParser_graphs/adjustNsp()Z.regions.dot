digraph "CFG fororg.kxml2.wap.WbxmlParser.adjustNsp()Z" {
subgraph cluster_Region_1838759305 {
label = "R(8:0|(4:3|(1:5)(1:(1:8)(1:18))|(1:11)(3:12|(1:16)|17)|18)|(2:20|(2:22|(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)(2:38|39)))|40|(1:42)(1:(1:44))|45|(2:(1:49)|50)|51) | DECL_VAR: java.lang.String null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\lboolean r2 = false\l}"];
subgraph cluster_LoopRegion_1051511899 {
label = "LOOP:0: (4:3|(1:5)(1:(1:8)(1:18))|(1:11)(3:12|(1:16)|17)|18)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000b|if (r1 \< (r13.attributeCount \<\< 2)) goto L_0x000d\l}"];
subgraph cluster_Region_2112033100 {
label = "R(4:3|(1:5)(1:(1:8)(1:18))|(1:11)(3:12|(1:16)|17)|18)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|java.lang.String r3 = r13.attributes[r1 + 2]\lint int r5 = r3.indexOf(58)\l}"];
subgraph cluster_IfRegion_2051950809 {
label = "IF [B:4:0x0017] THEN: R(1:5) ELSE: R(1:(1:8)(1:18))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0017|if (r5 != \-1) goto L_0x0019\l}"];
subgraph cluster_Region_300062814 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0019|java.lang.String r12 = r3.substring(0, r5)\lr4 = r3.substring(r5 + 1)\lr3 = r12\l}"];
}
subgraph cluster_Region_924780610 {
label = "R(1:(1:8)(1:18)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_376978515 {
label = "IF [B:7:0x002d] THEN: R(1:8) ELSE: R(1:18) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002d|if (r3.equals(\"xmlns\") == true) goto L_0x002f\l}"];
subgraph cluster_Region_2137722790 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002f|r4 = null\l}"];
}
subgraph cluster_Region_410365156 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0085|LOOP_END\lPHI: r1 r2 \l  PHI: (r1v18 int) = (r1v20 int), (r1v1 int), (r1v1 int) binds: [B:53:0x0085, B:55:0x0085, B:54:0x0085] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v6 boolean) = (r2v1 boolean), (r2v7 boolean), (r2v1 boolean) binds: [B:53:0x0085, B:55:0x0085, B:54:0x0085] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:18:0x0085\l|r1 += 4\l}"];
}
}
}
}
subgraph cluster_IfRegion_122056266 {
label = "IF [B:10:0x0036] THEN: R(1:11) ELSE: R(3:12|(1:16)|17)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0036|if (r3.equals(\"xmlns\") == false) goto L_0x0038\l}"];
subgraph cluster_Region_185292262 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0038|r2 = true\l}"];
}
subgraph cluster_Region_444456936 {
label = "R(3:12|(1:16)|17)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x003a|int[] int[] r3 = r13.nspCounts\lint int r5 = r13.depth\lint r7 = r3[r5]\lr3[r5] = r7 + 1\lint int r3 = r7 \<\< 1\lr13.nspStack = ensureCapacity(r13.nspStack, r3 + 2)\lr13.nspStack[r3] = r4\lint int r8 = r1 + 3\lr13.nspStack[r3 + 1] = r13.attributes[r8]\l}"];
subgraph cluster_IfRegion_681983676 {
label = "IF [B:13:0x005f, B:15:0x006b] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x005f|ADDED_TO_REGION\l|if (r4 != null) goto L_0x0061\l}"];
Node_15 [shape=record,label="{15\:\ 0x006b|ADDED_TO_REGION\l|if (r13.attributes[r8].equals(\"\") == true) goto L_0x006d\l}"];
subgraph cluster_Region_2010213960 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x006d|exception(\"illegal empty namespace\")\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x0072|java.lang.String[] java.lang.String[] r5 = r13.attributes\lint int r7 = r13.attributeCount \- 1\lr13.attributeCount = r7\ljava.lang.System.arraycopy(r13.attributes, r1 + 4, r5, r1, (r7 \<\< 2) \- r1)\lr1 \-= 4\l}"];
}
}
Node_18 [shape=record,label="{18\:\ 0x0085|LOOP_END\lPHI: r1 r2 \l  PHI: (r1v18 int) = (r1v20 int), (r1v1 int), (r1v1 int) binds: [B:53:0x0085, B:55:0x0085, B:54:0x0085] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v6 boolean) = (r2v1 boolean), (r2v7 boolean), (r2v1 boolean) binds: [B:53:0x0085, B:55:0x0085, B:54:0x0085] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:18:0x0085\l|r1 += 4\l}"];
}
}
subgraph cluster_IfRegion_1854364858 {
label = "IF [B:19:0x0089] THEN: R(2:20|(2:22|(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)(2:38|39))) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0089|if (r2 == true) goto L_0x008b\l}"];
subgraph cluster_Region_689192263 {
label = "R(2:20|(2:22|(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)(2:38|39)))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x008b|int int r1 = (r13.attributeCount \<\< 2) \- 4\l}"];
subgraph cluster_LoopRegion_1243821553 {
label = "LOOP:1: (2:22|(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)(2:38|39))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0091|LOOP_START\lPHI: r1 \l  PHI: (r1v12 int) = (r1v11 int), (r1v15 int) binds: [B:20:0x008b, B:37:0x011b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:21:0x0091\-\>B:37:0x011b\l|if (r1 \>= 0) goto L_0x0093\l}"];
subgraph cluster_Region_890714658 {
label = "R(2:22|(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)(2:38|39))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0093|int int r7 = r1 + 2\ljava.lang.String r3 = r13.attributes[r7]\lint int r8 = r3.indexOf(58)\l}"];
subgraph cluster_IfRegion_1897802208 {
label = "IF [B:23:0x009d] THEN: R(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37) ELSE: R(2:38|39)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x009d|if (r8 != 0) goto L_0x009f\l}"];
subgraph cluster_Region_677447906 {
label = "R(2:(2:25|(2:27|(2:(1:33)|34))(2:35|36))(0)|37)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1395616281 {
label = "IF [B:24:0x009f] THEN: R(2:25|(2:27|(2:(1:33)|34))(2:35|36)) ELSE: R(0)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x009f|if (r8 != \-1) goto L_0x00a1\l}"];
subgraph cluster_Region_1312349300 {
label = "R(2:25|(2:27|(2:(1:33)|34))(2:35|36))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x00a1|java.lang.String java.lang.String r9 = r3.substring(0, r8)\ljava.lang.String java.lang.String r3 = r3.substring(r8 + 1)\ljava.lang.String java.lang.String r8 = getNamespace(r9)\l}"];
subgraph cluster_IfRegion_546711353 {
label = "IF [B:26:0x00af] THEN: R(2:27|(2:(1:33)|34)) ELSE: R(2:35|36)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x00af|if (r8 != null) goto L_0x00b1\l}"];
subgraph cluster_Region_1029822402 {
label = "R(2:27|(2:(1:33)|34))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x00b1|r13.attributes[r1] = r8\lr13.attributes[r1 + 1] = r9\lr13.attributes[r7] = r3\lint int r7 = (r13.attributeCount \<\< 2) \- 4\l}"];
subgraph cluster_LoopRegion_493350548 {
label = "LOOP:2: (2:(1:33)|34)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x00c5|LOOP_START\lPHI: r7 \l  PHI: (r7v4 int) = (r7v3 int), (r7v5 int) binds: [B:27:0x00b1, B:34:0x00f9] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:28:0x00c5\-\>B:34:0x00f9\l|if (r7 \> r1) goto L_0x00c7\l}"];
subgraph cluster_Region_502010664 {
label = "R(2:(1:33)|34)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_135299649 {
label = "IF [B:30:0x00d1, B:32:0x00db] THEN: R(1:33) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x00d1|ADDED_TO_REGION\l|if (r3.equals(r13.attributes[r7 + 2]) == true) goto L_0x00d3\l}"];
Node_32 [shape=record,label="{32\:\ 0x00db|ADDED_TO_REGION\l|if (r8.equals(r13.attributes[r7]) == true) goto L_0x00dd\l}"];
subgraph cluster_Region_138537866 {
label = "R(1:33)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x00dd|java.lang.StringBuffer java.lang.StringBuffer r9 = new java.lang.StringBuffer()\lr9.append(\"Duplicate Attribute: \{\")\lr9.append(r8)\lr9.append(\"\}\")\lr9.append(r3)\lexception(r9.toString())\l}"];
}
}
Node_34 [shape=record,label="{34\:\ 0x00f9|LOOP_END\lLOOP:2: B:28:0x00c5\-\>B:34:0x00f9\l|r7 \-= 4\l}"];
}
}
}
subgraph cluster_Region_1543296884 {
label = "R(2:35|36)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x00fc|java.lang.StringBuffer java.lang.StringBuffer r1 = new java.lang.StringBuffer()\lr1.append(\"Undefined Prefix: \")\lr1.append(r9)\lr1.append(\" in \")\lr1.append(r13)\l}"];
Node_36 [shape=record,label="{36\:\ 0x011a|throw new java.lang.RuntimeException(r1.toString())\l}"];
}
}
}
subgraph cluster_Region_1443433749 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_37 [shape=record,label="{37\:\ 0x011b|LOOP_END\lLOOP:1: B:21:0x0091\-\>B:37:0x011b\l|r1 \-= 4\l}"];
}
subgraph cluster_Region_1123166651 {
label = "R(2:38|39)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x011f|java.lang.StringBuffer java.lang.StringBuffer r1 = new java.lang.StringBuffer()\lr1.append(\"illegal attribute name: \")\lr1.append(r3)\lr1.append(\" at \")\lr1.append(r13)\l}"];
Node_39 [shape=record,label="{39\:\ 0x013d|throw new java.lang.RuntimeException(r1.toString())\l}"];
}
}
}
}
}
}
Node_40 [shape=record,label="{40\:\ 0x013e|int int r1 = r13.name.indexOf(58)\l}"];
subgraph cluster_IfRegion_443632669 {
label = "IF [B:41:0x0144] THEN: R(1:42) ELSE: R(1:(1:44))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0144|if (r1 == 0) goto L_0x0146\l}"];
subgraph cluster_Region_1462046154 {
label = "R(1:42)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0146|java.lang.StringBuffer java.lang.StringBuffer r0 = new java.lang.StringBuffer()\lr0.append(\"illegal tag name: \")\lr0.append(r13.name)\lexception(r0.toString())\l}"];
}
subgraph cluster_Region_927515599 {
label = "R(1:(1:44)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1122473244 {
label = "IF [B:43:0x015d] THEN: R(1:44) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x015d|if (r1 != \-1) goto L_0x015f\l}"];
subgraph cluster_Region_328359107 {
label = "R(1:44)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x015f|r13.prefix = r13.name.substring(0, r1)\lr13.name = r13.name.substring(r1 + 1)\l}"];
}
}
}
}
Node_45 [shape=record,label="{45\:\ 0x0170|r13.namespace = getNamespace(r13.prefix)\l}"];
subgraph cluster_IfRegion_2019197052 {
label = "IF [B:46:0x017a] THEN: R(2:(1:49)|50) ELSE: null";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x017a|if (r13.namespace == null) goto L_0x017c\l}"];
subgraph cluster_Region_67437073 {
label = "R(2:(1:49)|50)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_452646433 {
label = "IF [B:48:0x017e] THEN: R(1:49) ELSE: null";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x017e|if (r13.prefix != null) goto L_0x0180\l}"];
subgraph cluster_Region_1201971335 {
label = "R(1:49)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x0180|java.lang.StringBuffer java.lang.StringBuffer r0 = new java.lang.StringBuffer()\lr0.append(\"undefined prefix: \")\lr0.append(r13.prefix)\lexception(r0.toString())\l}"];
}
}
Node_50 [shape=record,label="{50\:\ 0x0196|r13.namespace = \"\"\l}"];
}
}
Node_51 [shape=record,label="{51\:\ 0x019a|RETURN\l|return r2\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0003|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v1 int) = (r1v0 int), (r1v19 int) binds: [B:0:0x0000, B:18:0x0085] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v6 boolean) binds: [B:0:0x0000, B:18:0x0085] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:18:0x0085\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0027}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0030|PHI: r3 r4 \l  PHI: (r3v8 java.lang.String) = (r3v7 java.lang.String), (r3v19 java.lang.String) binds: [B:8:0x002f, B:5:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 java.lang.String) = (r4v6 java.lang.String), (r4v8 java.lang.String) binds: [B:8:0x002f, B:5:0x0019] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0061}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x00c7}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x00d3}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x017c}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0089|SYNTHETIC\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x0085|SYNTHETIC\l}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x0085|SYNTHETIC\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x0085|SYNTHETIC\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x00fc|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x013e|SYNTHETIC\l}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x011f|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x011b|SYNTHETIC\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x011b|SYNTHETIC\l}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x00f9|SYNTHETIC\l}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x00f9|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x00f9|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final boolean org.kxml2.wap.WbxmlParser.adjustNsp((r13v0 'this' org.kxml2.wap.WbxmlParser A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_52[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_7 -> Node_8;
Node_7 -> Node_54[style=dashed];
Node_8 -> Node_9;
Node_18 -> Node_1;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_55;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_53;
Node_18 -> Node_1;
Node_19 -> Node_20;
Node_19 -> Node_40[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_57[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_58[style=dashed];
Node_24 -> Node_25;
Node_24 -> Node_59[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_56[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_60[style=dashed];
Node_30 -> Node_31;
Node_30 -> Node_62[style=dashed];
Node_32 -> Node_33;
Node_32 -> Node_63[style=dashed];
Node_33 -> Node_61;
Node_34 -> Node_28;
Node_35 -> Node_36;
Node_37 -> Node_21;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_43[style=dashed];
Node_42 -> Node_45;
Node_43 -> Node_44;
Node_43 -> Node_45[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_46 -> Node_51[style=dashed];
Node_48 -> Node_49;
Node_48 -> Node_50[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_1 -> Node_2;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_14 -> Node_15;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_47 -> Node_48;
Node_52 -> Node_19;
Node_53 -> Node_18;
Node_54 -> Node_18;
Node_55 -> Node_18;
Node_56 -> Node_35;
Node_57 -> Node_40;
Node_58 -> Node_38;
Node_59 -> Node_37;
Node_60 -> Node_37;
Node_61 -> Node_34;
Node_62 -> Node_34;
Node_63 -> Node_34;
}

