digraph "CFG fororg.kxml2.wap.WbxmlSerializer.text([CII)Lorg\/xmlpull\/v1\/XmlSerializer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r1 I:org.kxml2.wap.WbxmlSerializer), (r0 I:boolean) org.kxml2.wap.WbxmlSerializer.checkPending(boolean):void type: VIRTUAL \l0x0004: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x0006: INVOKE  \l  (r0 I:java.lang.String)\l  (r2 I:char[])\l  (r3 I:int)\l  (r4 I:int)\l java.lang.String.\<init\>(char[], int, int):void type: DIRECT \l0x0009: INVOKE  \l  (r1 I:org.kxml2.wap.WbxmlSerializer)\l  (r0 I:java.lang.String)\l org.kxml2.wap.WbxmlSerializer.writeStr(java.lang.String):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN  (r1 I:org.xmlpull.v1.XmlSerializer) \l}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.wap.WbxmlSerializer.text((r1 'this' I:org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r2 I:char[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

