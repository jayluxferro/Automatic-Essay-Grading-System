digraph "CFG fororg.kxml2.wap.WbxmlSerializer.startDocument(Ljava\/lang\/String;Ljava\/lang\/Boolean;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r3 I:java.io.OutputStream) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.out java.io.OutputStream \l0x0002: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0003: INVOKE  (r3 I:java.io.OutputStream), (r0 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l0x0006: IGET  (r3 I:java.io.OutputStream) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.out java.io.OutputStream \l0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  (r3 I:java.io.OutputStream), (r0 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IPUT  \l  (r2 I:java.lang.String)\l  (r1 I:org.kxml2.wap.WbxmlSerializer)\l org.kxml2.wap.WbxmlSerializer.encoding java.lang.String \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r3 I:java.lang.String) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.encoding java.lang.String \l0x0012: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.toUpperCase():java.lang.String type: VIRTUAL \l0x0016: CONST_STR  (r0 I:java.lang.String) =  \"UTF\-8\" \l0x0018: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IGET  (r2 I:java.io.OutputStream) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.out java.io.OutputStream \l0x0020: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (106(0x6a, float:1.49E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r2 I:java.io.OutputStream), (r3 I:int) java.io.OutputStream.write(int):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r3 I:java.lang.String) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.encoding java.lang.String \l0x0028: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) java.lang.String.toUpperCase():java.lang.String type: VIRTUAL \l0x002c: CONST_STR  (r0 I:java.lang.String) =  \"ISO\-8859\-1\" \l0x002e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: IGET  (r2 I:java.io.OutputStream) = (r1 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.out java.io.OutputStream \l0x0036: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: NEW_INSTANCE  (r3 I:java.io.UnsupportedEncodingException) =  java.io.UnsupportedEncodingException \l0x003b: INVOKE  \l  (r3 I:java.io.UnsupportedEncodingException)\l  (r2 I:java.lang.String)\l java.io.UnsupportedEncodingException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlSerializer.startDocument((r1 'this' I:org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_6;
Node_11 -> Node_12;
}

