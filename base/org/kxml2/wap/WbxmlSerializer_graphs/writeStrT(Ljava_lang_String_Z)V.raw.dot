digraph "CFG fororg.kxml2.wap.WbxmlSerializer.writeStrT(Ljava\/lang\/String;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Hashtable) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTable java.util.Hashtable \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Hashtable), (r7 I:java.lang.Object) java.util.Hashtable.get(java.lang.Object):java.lang.Object type: VIRTUAL \l0x0006: CHECK_CAST  (r0 I:java.lang.Integer) = (java.lang.Integer) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r7 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x000c: INVOKE  (r8 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0010: INVOKE  (r7 I:java.io.OutputStream), (r8 I:int) org.kxml2.wap.WbxmlSerializer.writeInt(java.io.OutputStream, int):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IGET  (r0 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTableBuf java.io.ByteArrayOutputStream \l0x0017: INVOKE  (r0 I:int) = (r0 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.size():int type: VIRTUAL \l0x001b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: INVOKE  (r2 I:char) = (r7 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0020: CONST  (r3 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IF  (r2 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:7:0x003f \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x003f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: NEW_INSTANCE  (r8 I:java.lang.StringBuffer) =  java.lang.StringBuffer \l0x002a: INVOKE  (r8 I:java.lang.StringBuffer) java.lang.StringBuffer.\<init\>():void type: DIRECT \l0x002d: INVOKE  (r8 I:java.lang.StringBuffer), (r4 I:char) java.lang.StringBuffer.append(char):java.lang.StringBuffer type: VIRTUAL \l0x0030: INVOKE  (r8 I:java.lang.StringBuffer), (r7 I:java.lang.String) java.lang.StringBuffer.append(java.lang.String):java.lang.StringBuffer type: VIRTUAL \l0x0033: INVOKE  (r7 I:java.lang.String) = (r8 I:java.lang.StringBuffer) java.lang.StringBuffer.toString():java.lang.String type: VIRTUAL \l0x0037: IGET  (r8 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x0039: ARITH  (r2 I:int) = (r0 I:int) + (1 int) \l0x003b: INVOKE  (r8 I:java.io.OutputStream), (r2 I:int) org.kxml2.wap.WbxmlSerializer.writeInt(java.io.OutputStream, int):void type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: IGET  (r8 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x0041: INVOKE  (r8 I:java.io.OutputStream), (r0 I:int) org.kxml2.wap.WbxmlSerializer.writeInt(java.io.OutputStream, int):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: IGET  (r8 I:java.util.Hashtable) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTable java.util.Hashtable \l0x0046: NEW_INSTANCE  (r2 I:java.lang.Integer) =  java.lang.Integer \l0x0048: INVOKE  (r2 I:java.lang.Integer), (r0 I:int) java.lang.Integer.\<init\>(int):void type: DIRECT \l0x004b: INVOKE  \l  (r8 I:java.util.Hashtable)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x004e: INVOKE  (r8 I:char) = (r7 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0052: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0053|0x0053: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0065 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0055|0x0055: IGET  (r8 I:java.util.Hashtable) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTable java.util.Hashtable \l0x0057: INVOKE  (r2 I:java.lang.String) = (r7 I:java.lang.String), (r1 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x005b: NEW_INSTANCE  (r3 I:java.lang.Integer) =  java.lang.Integer \l0x005d: ARITH  (r5 I:int) = (r0 I:int) + (1 int) \l0x005f: INVOKE  (r3 I:java.lang.Integer), (r5 I:int) java.lang.Integer.\<init\>(int):void type: DIRECT \l0x0062: INVOKE  \l  (r8 I:java.util.Hashtable)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0065|0x0065: INVOKE  (r8 I:int) = (r7 I:java.lang.String), (r4 I:int) java.lang.String.lastIndexOf(int):int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0069|0x0069: IF  (r8 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:14:0x008a \l}"];
Node_13 [shape=record,label="{13\:\ 0x006b|0x006b: IGET  (r2 I:java.util.Hashtable) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTable java.util.Hashtable \l0x006d: INVOKE  (r3 I:java.lang.String) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0071: NEW_INSTANCE  (r4 I:java.lang.Integer) =  java.lang.Integer \l0x0073: ARITH  (r0 I:int) = (r0 I:int) + (r8 I:int) \l0x0074: INVOKE  (r4 I:java.lang.Integer), (r0 I:int) java.lang.Integer.\<init\>(int):void type: DIRECT \l0x0077: INVOKE  \l  (r2 I:java.util.Hashtable)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l0x007a: IGET  (r2 I:java.util.Hashtable) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTable java.util.Hashtable \l0x007c: ARITH  (r8 I:int) = (r8 I:int) + (r1 I:int) \l0x007d: INVOKE  (r8 I:java.lang.String) = (r7 I:java.lang.String), (r8 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0081: NEW_INSTANCE  (r3 I:java.lang.Integer) =  java.lang.Integer \l0x0083: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0084: INVOKE  (r3 I:java.lang.Integer), (r0 I:int) java.lang.Integer.\<init\>(int):void type: DIRECT \l0x0087: INVOKE  \l  (r2 I:java.util.Hashtable)\l  (r8 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Hashtable.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x008a|0x008a: IGET  (r8 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTableBuf java.io.ByteArrayOutputStream \l0x008c: INVOKE  \l  (r6 I:org.kxml2.wap.WbxmlSerializer)\l  (r8 I:java.io.OutputStream)\l  (r7 I:java.lang.String)\l org.kxml2.wap.WbxmlSerializer.writeStrI(java.io.OutputStream, java.lang.String):void type: VIRTUAL \l0x008f: IGET  (r7 I:java.io.ByteArrayOutputStream) = (r6 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.stringTableBuf java.io.ByteArrayOutputStream \l0x0091: INVOKE  (r7 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.flush():void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0094|0x0094: RETURN   \l}"];
MethodNode[shape=record,label="{private final void org.kxml2.wap.WbxmlSerializer.writeStrT((r6 'this' I:org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

