digraph "CFG fororg.kxml2.wap.WbxmlSerializer.setTagTable(I[Ljava\/lang\/String;)V" {
subgraph cluster_Region_163272143 {
label = "R(2:0|(2:(1:5)(0)|6))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r1 = 0\l}"];
subgraph cluster_LoopRegion_69631950 {
label = "LOOP:0: (2:(1:5)(0)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|if (r1 \< r7.length) goto L_0x0005\l}"];
subgraph cluster_Region_1050903144 {
label = "R(2:(1:5)(0)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_296276202 {
label = "IF [B:4:0x0007] THEN: R(1:5) ELSE: R(0)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|if (r7[r1] != null) goto L_0x0009\l}"];
subgraph cluster_Region_1122957885 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|r5.tagTable.put(r7[r1], new int[]\{r6, r1 + 5\})\l}"];
}
subgraph cluster_Region_374996218 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_6 [shape=record,label="{6\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:6:0x001a\l|r1++\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:6:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:6:0x001a\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0005}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001d|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001a|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlSerializer.setTagTable((r5v0 'this' org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_10[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

