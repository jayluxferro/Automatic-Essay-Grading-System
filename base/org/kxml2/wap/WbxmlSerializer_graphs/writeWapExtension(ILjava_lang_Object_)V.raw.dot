digraph "CFG fororg.kxml2.wap.WbxmlSerializer.writeWapExtension(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r2 I:org.kxml2.wap.WbxmlSerializer), (r0 I:boolean) org.kxml2.wap.WbxmlSerializer.checkPending(boolean):void type: VIRTUAL \l0x0004: IGET  (r1 I:java.io.ByteArrayOutputStream) = (r2 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x0006: INVOKE  (r1 I:java.io.ByteArrayOutputStream), (r3 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[64, 65, 66] t:[0x002c, 0x002c, 0x002c] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[128, 129, 130] t:[0x0026, 0x0026, 0x0026] \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[192, 193, 194, 195] t:[0x0033, 0x0033, 0x0033, 0x0018] \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0014: INVOKE  (r3 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: CHECK_CAST  (r4 I:byte[]) = (byte[]) (r4 I:?[OBJECT, ARRAY]) \l0x001a: IGET  (r3 I:java.io.ByteArrayOutputStream) = (r2 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x001c: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x001d: INVOKE  (r3 I:java.io.OutputStream), (r0 I:int) org.kxml2.wap.WbxmlSerializer.writeInt(java.io.OutputStream, int):void type: STATIC \l0x0020: IGET  (r3 I:java.io.ByteArrayOutputStream) = (r2 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x0022: INVOKE  (r3 I:java.io.ByteArrayOutputStream), (r4 I:byte[]) java.io.ByteArrayOutputStream.write(byte[]):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0028: INVOKE  \l  (r2 I:org.kxml2.wap.WbxmlSerializer)\l  (r4 I:java.lang.String)\l  (r0 I:boolean)\l org.kxml2.wap.WbxmlSerializer.writeStrT(java.lang.String, boolean):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IGET  (r3 I:java.io.ByteArrayOutputStream) = (r2 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x002e: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0030: INVOKE  \l  (r2 I:org.kxml2.wap.WbxmlSerializer)\l  (r3 I:java.io.OutputStream)\l  (r4 I:java.lang.String)\l org.kxml2.wap.WbxmlSerializer.writeStrI(java.io.OutputStream, java.lang.String):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlSerializer.writeWapExtension((r2 'this' I:org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_8 -> Node_9;
}

