digraph "CFG fororg.kxml2.wap.WbxmlSerializer.endTag(Ljava\/lang\/String;Ljava\/lang\/String;)Lorg\/xmlpull\/v1\/XmlSerializer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r1 I:java.lang.String) = (r0 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.pending java.lang.String \l0x0002: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r0 I:org.kxml2.wap.WbxmlSerializer), (r2 I:boolean) org.kxml2.wap.WbxmlSerializer.checkPending(boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r1 I:java.io.ByteArrayOutputStream) = (r0 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.buf java.io.ByteArrayOutputStream \l0x000b: INVOKE  (r1 I:java.io.ByteArrayOutputStream), (r2 I:int) java.io.ByteArrayOutputStream.write(int):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r1 I:int) = (r0 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.depth int \l0x0010: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0011: IPUT  (r1 I:int), (r0 I:org.kxml2.wap.WbxmlSerializer) org.kxml2.wap.WbxmlSerializer.depth int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN  (r0 I:org.xmlpull.v1.XmlSerializer) \l}"];
MethodNode[shape=record,label="{public org.xmlpull.v1.XmlSerializer org.kxml2.wap.WbxmlSerializer.endTag((r0 'this' I:org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

