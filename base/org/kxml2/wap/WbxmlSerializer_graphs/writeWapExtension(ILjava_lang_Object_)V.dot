digraph "CFG fororg.kxml2.wap.WbxmlSerializer.writeWapExtension(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|checkPending(false)\lr2.buf.write(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|switch(r3) \{\l    case 64: goto L_0x002c;\l    case 65: goto L_0x002c;\l    case 66: goto L_0x002c;\l    default: goto L_0x000c;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|switch(r3) \{\l    case 128: goto L_0x0026;\l    case org.kxml2.wap.Wbxml.EXT_T_1 :int: goto L_0x0026;\l    case org.kxml2.wap.Wbxml.EXT_T_2 :int: goto L_0x0026;\l    default: goto L_0x000f;\l\}\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|switch(r3) \{\l    case org.kxml2.wap.Wbxml.EXT_0 :int: goto L_0x0033;\l    case org.kxml2.wap.Wbxml.EXT_1 :int: goto L_0x0033;\l    case org.kxml2.wap.Wbxml.EXT_2 :int: goto L_0x0033;\l    case org.kxml2.wap.Wbxml.OPAQUE :int: goto L_0x0018;\l    default: goto L_0x0012;\l\}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012}"];
Node_5 [shape=record,label="{5\:\ 0x0017|throw new java.lang.IllegalArgumentException()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|byte[] r4 = (byte[]) r4\lwriteInt(r2.buf, r4.length)\lr2.buf.write(r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|writeStrT((java.lang.String) r4, false)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|writeStrI(r2.buf, (java.lang.String) r4)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlSerializer.writeWapExtension((r2v0 'this' org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_6 -> Node_11;
Node_7 -> Node_12;
Node_8 -> Node_9;
}

