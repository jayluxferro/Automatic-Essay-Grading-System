digraph "CFG fororg.kxml2.wap.WbxmlSerializer.startDocument(Ljava\/lang\/String;Ljava\/lang\/Boolean;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.out.write(3)\lr1.out.write(1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r2 == null) goto L_0x0010\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|r1.encoding = r2\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010}"];
Node_4 [shape=record,label="{4\:\ 0x001c|if (r1.encoding.toUpperCase().equals(p018io.fabric.sdk.android.services.network.HttpRequest.CHARSET_UTF8) == false) goto L_0x0026\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|java.io.OutputStream r2 = r1.out\lr3 = 106\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|PHI: r2 r3 \l  PHI: (r2v2 java.io.OutputStream) = (r2v1 java.io.OutputStream), (r2v3 java.io.OutputStream) binds: [B:9:0x0034, B:5:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v11 int) = (r3v10 int), (r3v12 int) binds: [B:9:0x0034, B:5:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|r2.write(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026}"];
Node_8 [shape=record,label="{8\:\ 0x0032|if (r1.encoding.toUpperCase().equals(\"ISO\-8859\-1\") == false) goto L_0x0039\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|java.io.OutputStream r2 = r1.out\lr3 = 4\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039}"];
Node_12 [shape=record,label="{12\:\ 0x003e|throw new java.io.UnsupportedEncodingException(r2)\l}"];
MethodNode[shape=record,label="{public void org.kxml2.wap.WbxmlSerializer.startDocument((r1v0 'this' org.kxml2.wap.WbxmlSerializer A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_6;
Node_11 -> Node_12;
}

