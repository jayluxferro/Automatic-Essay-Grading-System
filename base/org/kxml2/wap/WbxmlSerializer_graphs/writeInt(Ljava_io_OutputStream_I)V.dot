digraph "CFG fororg.kxml2.wap.WbxmlSerializer.writeInt(Ljava\/io\/OutputStream;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|byte[] r0 = new byte[5]\lr2 = r6\lr6 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r2 r6 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:8:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 int) = (r6v1 int), (r6v7 int) binds: [B:0:0x0000, B:8:0x0024] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:8:0x0024\l|int r3 = r6 + 1\lr0[r6] = (byte) (r2 & 127)\lint r2 = r2 \>\> 7\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r2 != 0) goto L_0x0024\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x0011, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:3:0x0011\-\>B:5:0x0014\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r3 \<= 1) goto L_0x001e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_END\lLOOP:1: B:3:0x0011\-\>B:5:0x0014\l|int r3 = r3 + \-1\lr5.write(r0[r3] \| kotlin.jvm.internal.ByteCompanionObject.MIN_VALUE)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|r5.write(r0[0])\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:8:0x0024\l|r6 = r3\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static void org.kxml2.wap.WbxmlSerializer.writeInt((r5v0 java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_8;
Node_2 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_1;
Node_9 -> Node_3;
Node_10 -> Node_6;
}

