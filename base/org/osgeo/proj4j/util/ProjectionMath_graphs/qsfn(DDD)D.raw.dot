digraph "CFG fororg.osgeo.proj4j.util.ProjectionMath.qsfn(DDD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = \l  (4502148214488346440(0x3e7ad7f29abcaf48, double:1.0E\-7) ?[long, double])\l \l0x0005: CMP_L  (r0 I:int) = (r8 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: ARITH  (r0 I:double) = (r8 I:double) * (r6 I:double) \l0x000b: ARITH  (r2 I:double) = (r0 I:double) * (r0 I:double) \l0x000d: CONST  (r4 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x000f: ARITH  (r2 I:double) = (r4 I:double) \- (r2 I:double) \l0x0011: ARITH  (r6 I:double) = (r6 I:double) \/ (r2 I:double) \l0x0012: CONST  (r2 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0014: ARITH  (r2 I:double) = (r2 I:double) \/ (r8 I:double) \l0x0015: ARITH  (r8 I:double) = (r4 I:double) \- (r0 I:double) \l0x0017: ARITH  (r0 I:double) = (r0 I:double) + (r4 I:double) \l0x0018: ARITH  (r8 I:double) = (r8 I:double) \/ (r0 I:double) \l0x0019: INVOKE  (r8 I:double) = (r8 I:double) java.lang.Math.log(double):double type: STATIC \l0x001d: ARITH  (r2 I:double) = (r2 I:double) * (r8 I:double) \l0x001f: ARITH  (r6 I:double) = (r6 I:double) \- (r2 I:double) \l0x0020: ARITH  (r10 I:double) = (r10 I:double) * (r6 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: RETURN  (r10 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: ARITH  (r6 I:double) = (r6 I:double) + (r6 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: RETURN  (r6 I:double) \l}"];
MethodNode[shape=record,label="{public static double org.osgeo.proj4j.util.ProjectionMath.qsfn((r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

