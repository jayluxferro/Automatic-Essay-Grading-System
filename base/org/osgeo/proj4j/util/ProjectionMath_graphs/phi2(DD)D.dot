digraph "CFG fororg.osgeo.proj4j.util.ProjectionMath.phi2(DD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r2 = 0.5d * r19\ldouble r4 = 1.5707963267948966d \- (java.lang.Math.atan(r17) * 2.0d)\lr10 = 15\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|LOOP_START\lPHI: r4 r10 \l  PHI: (r4v3 double) = (r4v2 double), (r4v4 double) binds: [B:0:0x0000, B:4:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 int) = (r10v0 int), (r10v3 int) binds: [B:0:0x0000, B:4:0x0041] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0015\-\>B:4:0x0041\l|double r11 = java.lang.Math.sin(r4) * r19\ldouble r11 = (1.5707963267948966d \- (java.lang.Math.atan(java.lang.Math.pow((C00 \- r11) \/ (r11 + C00), r2) * r17) * 2.0d)) \- r4\ldouble r4 = r4 + r11\l}"];
Node_2 [shape=record,label="{2\:\ 0x003d|if ((java.lang.Math.abs(r11) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r11) == 1.0E\-10d ? 0 : \-1)) \<= 0) goto L_0x0043\l}"];
Node_3 [shape=record,label="{3\:\ 0x003f|int r10 = r10 + \-1\l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|LOOP_END\lLOOP:0: B:1:0x0015\-\>B:4:0x0041\l|if (r10 != 0) goto L_0x0015\l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|PHI: r10 \l  PHI: (r10v2 int) = (r10v1 int), (r10v3 int) binds: [B:10:0x0043, B:9:0x0043] A[DONT_GENERATE, DONT_INLINE]\l|if (r10 \<= 0) goto L_0x0046\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|RETURN\l|return r4\l}"];
Node_7 [shape=record,label="{7\:\ 0x0046}"];
Node_8 [shape=record,label="{8\:\ 0x004d|throw new org.osgeo.proj4j.ConvergenceFailureException(\"Computation of phi2 failed to converage after 15 iterations\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static double org.osgeo.proj4j.util.ProjectionMath.phi2((r17v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_5;
Node_10 -> Node_5;
}

