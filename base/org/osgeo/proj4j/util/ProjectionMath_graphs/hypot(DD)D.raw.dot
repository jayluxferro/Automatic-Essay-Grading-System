digraph "CFG fororg.osgeo.proj4j.util.ProjectionMath.hypot(DD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_G  (r2 I:int) = (r3 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: NEG  (r3 I:double) = (r3 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CMP_L  (r2 I:int) = (r3 I:double), (r0 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CMP_G  (r3 I:int) = (r5 I:double), (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: NEG  (r5 I:double) = (r5 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: RETURN  (r5 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: CMP_G  (r2 I:int) = (r5 I:double), (r0 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: NEG  (r5 I:double) = (r5 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: CMP_L  (r0 I:int) = (r5 I:double), (r0 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001d \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: RETURN  (r3 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|0x001d: CONST  (r0 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x001f: CMP_G  (r2 I:int) = (r3 I:double), (r5 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0023|0x0023: ARITH  (r3 I:double) = (r3 I:double) \/ (r5 I:double) \l0x0024: ARITH  (r3 I:double) = (r3 I:double) * (r3 I:double) \l0x0026: ARITH  (r3 I:double) = (r3 I:double) + (r0 I:double) \l0x0027: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x002b: ARITH  (r5 I:double) = (r5 I:double) * (r3 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: RETURN  (r5 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: ARITH  (r5 I:double) = (r5 I:double) \/ (r3 I:double) \l0x002f: ARITH  (r5 I:double) = (r5 I:double) * (r5 I:double) \l0x0031: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: ARITH  (r5 I:double) = (r5 I:double) + (r0 I:double) \l0x0033: INVOKE  (r5 I:double) = (r5 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0037: ARITH  (r3 I:double) = (r3 I:double) * (r5 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: RETURN  (r3 I:double) \l}"];
MethodNode[shape=record,label="{public static double org.osgeo.proj4j.util.ProjectionMath.hypot((r3 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_19 -> Node_20;
}

