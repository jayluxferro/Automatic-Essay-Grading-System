digraph "CFG fororg.osgeo.proj4j.io.CSVRecordParser.categorize(C)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0034 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IGET  (r2 I:char) = (r4 I:org.osgeo.proj4j.io.CSVRecordParser) org.osgeo.proj4j.io.CSVRecordParser.quote char \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0017 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: RETURN  (r5 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IGET  (r2 I:char) = (r4 I:org.osgeo.proj4j.io.CSVRecordParser) org.osgeo.proj4j.io.CSVRecordParser.separator char \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x001d \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|0x001c: RETURN  (r5 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = (33 ?[int, float, short, byte, char]) \l0x001f: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0020|0x0020: IF  (r2 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:21:0x0027 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|0x0022: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (126(0x7e, float:1.77E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|0x0024: IF  (r5 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:21:0x0027 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: RETURN  (r3 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|0x0027: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:24:0x002c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|0x0029: IF  (r5 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:24:0x002c \l}"];
Node_23 [shape=record,label="{23\:\ 0x002b|0x002b: RETURN  (r1 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002c|0x002c: INVOKE  (r5 I:boolean) = (r5 I:char) java.lang.Character.isWhitespace(char):boolean type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x0030|0x0030: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0033 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0032|0x0032: RETURN  (r1 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|0x0033: RETURN  (r3 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0034|0x0034: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private int org.osgeo.proj4j.io.CSVRecordParser.categorize((r4 'this' I:org.osgeo.proj4j.io.CSVRecordParser A[IMMUTABLE_TYPE, THIS]), (r5 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_28;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_28;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_28;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
}

