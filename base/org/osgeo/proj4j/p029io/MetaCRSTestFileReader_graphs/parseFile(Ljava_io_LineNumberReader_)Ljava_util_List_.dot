digraph "CFG fororg.osgeo.proj4j.io.MetaCRSTestFileReader.parseFile(Ljava\/io\/LineNumberReader;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\lr1 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lPHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:0:0x0000, B:9:0x0006] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:9:0x0006\l|java.lang.String r2 = r5.readLine()\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r2 != null) goto L_0x000d\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return r0\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d}"];
Node_5 [shape=record,label="{5\:\ 0x0013|if (r2.startsWith(\"#\") == false) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|if (r1 != false) goto L_0x001a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r1 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|r0.add(parseTest(r2))\l}"];
Node_9 [shape=record,label="{9\:\ 0x0006|LOOP_END\lSYNTHETIC\lPHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v1 boolean), (r1v3 boolean) binds: [B:11:0x0006, B:13:0x0006, B:12:0x0006] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0006\-\>B:9:0x0006\l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<org.osgeo.proj4j.io.MetaCRSTestCase\> org.osgeo.proj4j.io.MetaCRSTestFileReader.parseFile((r4v0 'this' org.osgeo.proj4j.io.MetaCRSTestFileReader A[IMMUTABLE_TYPE, THIS]), (r5v0 java.io.LineNumberReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/LineNumberReader;, ), Ljava\/util\/List\<, Lorg\/osgeo\/proj4j\/io\/MetaCRSTestCase;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_4;
Node_2 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_8 -> Node_13;
Node_9 -> Node_1;
Node_10 -> Node_3;
Node_11 -> Node_9;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

