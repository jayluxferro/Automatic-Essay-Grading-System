digraph "CFG fororg.osgeo.proj4j.io.MetaCRSTestFileReader.parseFile(Ljava\/io\/LineNumberReader;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r2 I:java.lang.String) = (r5 I:java.io.LineNumberReader) java.io.LineNumberReader.readLine():java.lang.String type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: RETURN  (r0 I:java.util.List\<org.osgeo.proj4j.io.MetaCRSTestCase\>) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CONST_STR  (r3 I:java.lang.String) =  \"#\" \l0x000f: INVOKE  (r3 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r2 I:org.osgeo.proj4j.io.MetaCRSTestCase) = \l  (r4 I:org.osgeo.proj4j.io.MetaCRSTestFileReader)\l  (r2 I:java.lang.String)\l org.osgeo.proj4j.io.MetaCRSTestFileReader.parseTest(java.lang.String):org.osgeo.proj4j.io.MetaCRSTestCase type: DIRECT \l0x001e: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
MethodNode[shape=record,label="{private java.util.List\<org.osgeo.proj4j.io.MetaCRSTestCase\> org.osgeo.proj4j.io.MetaCRSTestFileReader.parseFile((r4 'this' I:org.osgeo.proj4j.io.MetaCRSTestFileReader A[IMMUTABLE_TYPE, THIS]), (r5 I:java.io.LineNumberReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/LineNumberReader;, ), Ljava\/util\/List\<, Lorg\/osgeo\/proj4j\/io\/MetaCRSTestCase;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_1[style=dashed];
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_1;
}

