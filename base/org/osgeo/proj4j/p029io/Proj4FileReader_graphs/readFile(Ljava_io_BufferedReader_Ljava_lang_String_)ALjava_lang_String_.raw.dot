digraph "CFG fororg.osgeo.proj4j.io.Proj4FileReader.readFile(Ljava\/io\/BufferedReader;Ljava\/lang\/String;)[Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r10 I:java.io.StreamTokenizer) = \l  (r9 I:org.osgeo.proj4j.io.Proj4FileReader)\l  (r10 I:java.io.BufferedReader)\l org.osgeo.proj4j.io.Proj4FileReader.createTokenizer(java.io.BufferedReader):java.io.StreamTokenizer type: DIRECT \l0x0004: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IGET  (r0 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000a: CONST  (r2 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00db \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x0011: IGET  (r0 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l0x0013: CONST  (r3 I:?[int, float, short, byte, char]) = (\-3 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00c0 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IGET  (r0 I:java.lang.String) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.sval java.lang.String \l0x0018: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x001b: IGET  (r4 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l0x001d: CONST  (r5 I:?[int, float, short, byte, char]) = (62 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00a5 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x0024: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList \l0x0026: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IGET  (r6 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0070 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IGET  (r6 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l0x002f: CONST  (r7 I:?[int, float, short, byte, char]) = (43 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: IGET  (r6 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0055 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: IGET  (r6 I:java.lang.String) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.sval java.lang.String \l0x003c: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x003f: IGET  (r7 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l0x0041: CONST  (r8 I:?[int, float, short, byte, char]) = (61 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0051 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x0048: IGET  (r7 I:java.lang.String) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.sval java.lang.String \l0x004a: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x004d: INVOKE  \l  (r4 I:java.util.List)\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.String)\l org.osgeo.proj4j.io.Proj4FileReader.addParam(java.util.List, java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|0x0051: INVOKE  \l  (r4 I:java.util.List)\l  (r6 I:java.lang.String)\l  (r1 I:java.lang.String)\l org.osgeo.proj4j.io.Proj4FileReader.addParam(java.util.List, java.lang.String, java.lang.String):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0055|0x0055: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException \l0x0057: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0059: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005c: INVOKE  (r10 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.lineno():int type: VIRTUAL \l0x0060: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0063: CONST_STR  (r10 I:java.lang.String) =  \": Word expected after '+'\" \l0x0065: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0068: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006c: INVOKE  (r11 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_20 [shape=record,label="{20\:\ 0x006f|0x006f: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0070|0x0070: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x0073: IGET  (r1 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.ttype int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0075|0x0075: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x008a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0077|0x0077: INVOKE  (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.nextToken():int type: VIRTUAL \l0x007a: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r11 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x007e|0x007e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0007 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0080|0x0080: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0081: NEW_ARRAY  (r10 I:java.lang.String[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0083: INVOKE  (r10 I:java.lang.Object[]) = (r4 I:java.util.List), (r10 I:java.lang.Object[]) java.util.List.toArray(java.lang.Object[]):java.lang.Object[] type: INTERFACE \l0x0087: CHECK_CAST  (r10 I:java.lang.String[]) = (java.lang.String[]) (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0089|0x0089: RETURN  (r10 I:java.lang.String[]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x008a|0x008a: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException \l0x008c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x008e: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0091: INVOKE  (r10 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.lineno():int type: VIRTUAL \l0x0095: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0098: CONST_STR  (r10 I:java.lang.String) =  \": '\<\>' expected\" \l0x009a: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009d: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a1: INVOKE  (r11 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_28 [shape=record,label="{28\:\ 0x00a4|0x00a4: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a5|0x00a5: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException \l0x00a7: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00a9: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ac: INVOKE  (r10 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.lineno():int type: VIRTUAL \l0x00b0: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00b3: CONST_STR  (r10 I:java.lang.String) =  \": '\>' expected\" \l0x00b5: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00b8: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00bc: INVOKE  (r11 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x00bf|0x00bf: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00c0|0x00c0: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException \l0x00c2: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00c4: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00c7: INVOKE  (r10 I:int) = (r10 I:java.io.StreamTokenizer) java.io.StreamTokenizer.lineno():int type: VIRTUAL \l0x00cb: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00ce: CONST_STR  (r10 I:java.lang.String) =  \": Word expected after '\<'\" \l0x00d0: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00d3: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00d7: INVOKE  (r11 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_32 [shape=record,label="{32\:\ 0x00da|0x00da: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00db|0x00db: RETURN  (r1 I:java.lang.String[]) \l}"];
MethodNode[shape=record,label="{private java.lang.String[] org.osgeo.proj4j.io.Proj4FileReader.readFile((r9 'this' I:org.osgeo.proj4j.io.Proj4FileReader A[IMMUTABLE_TYPE, THIS]), (r10 I:java.io.BufferedReader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_33;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_31;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_29;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_8;
Node_18 -> Node_8;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_1;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
}

