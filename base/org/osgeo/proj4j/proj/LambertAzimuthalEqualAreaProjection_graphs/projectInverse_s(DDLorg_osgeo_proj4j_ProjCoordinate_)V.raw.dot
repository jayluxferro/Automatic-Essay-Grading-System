digraph "CFG fororg.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.projectInverse_s(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r3 I:?[long, double]) = (r26 I:?[long, double]) \l0x0004: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l0x0006: INVOKE  (r6 I:double) = (r24 I:double), (r26 I:double) java.lang.Math.hypot(double, double):double type: STATIC \l0x000a: CONST  (r8 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x000c: ARITH  (r8 I:double) = (r8 I:double) * (r6 I:double) \l0x000e: CONST  (r10 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0010: CMP_L  (r10 I:int) = (r8 I:double), (r10 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r10 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:35:0x00ae \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: CONST  (r10 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0016: INVOKE  (r8 I:double) = (r8 I:double) java.lang.Math.asin(double):double type: STATIC \l0x001a: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x001c: IGET  (r10 I:int) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.mode int \l0x001e: CONST  (r11 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001f: CONST  (r12 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0020: CONST  (r13 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IGET  (r10 I:int) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.mode int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: MOVE  (r15 I:?[long, double]) = (r13 I:?[long, double]) \l0x002a: MOVE  (r17 I:?[long, double]) = (r15 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: INVOKE  (r15 I:double) = (r8 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0031: INVOKE  (r17 I:double) = (r8 I:double) java.lang.Math.cos(double):double type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r10 I:int) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.mode int \l0x0037: CONST  (r19 I:?[long, double]) = \l  (4457293557087583675(0x3ddb7cdfd9d7bdbb, double:1.0E\-10) ?[long, double])\l \l0x003c: CONST  (r21 I:?[long, double]) = \l  (4609753056924675352(0x3ff921fb54442d18, double:1.5707963267948966) ?[long, double])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: SWITCH  \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3] t:[0x0092, 0x008e, 0x0077, 0x0047] \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: MOVE  (r1 I:?[long, double]) = (r24 I:?[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: INVOKE  (r8 I:double) = (r6 I:double) java.lang.Math.abs(double):double type: STATIC \l0x004b: CMP_G  (r8 I:int) = (r8 I:double), (r19 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: IF  (r8 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:16:0x0053 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: IGET  (r3 I:double) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.phi0 double \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: MOVE  (r8 I:?[long, double]) = (r3 I:?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: IGET  (r8 I:double) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.sinph0 double \l0x0055: ARITH  (r8 I:double) = (r8 I:double) * (r17 I:double) \l0x0057: ARITH  (r3 I:double) = (r3 I:double) * (r15 I:double) \l0x0059: IGET  (r11 I:double) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.cosph0 double \l0x005b: ARITH  (r3 I:double) = (r3 I:double) * (r11 I:double) \l0x005d: ARITH  (r3 I:double) = (r3 I:double) \/ (r6 I:double) \l0x005e: ARITH  (r8 I:double) = (r8 I:double) + (r3 I:double) \l0x005f: INVOKE  (r3 I:double) = (r8 I:double) java.lang.Math.asin(double):double type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0064|0x0064: IGET  (r3 I:double) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.cosph0 double \l0x0066: ARITH  (r15 I:double) = (r15 I:double) * (r3 I:double) \l0x0068: ARITH  (r1 I:double) = (r24 I:double) * (r15 I:double) \l0x006a: INVOKE  (r3 I:double) = (r8 I:double) java.lang.Math.sin(double):double type: STATIC \l0x006e: IGET  (r10 I:double) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.sinph0 double \l0x0070: ARITH  (r3 I:double) = (r3 I:double) * (r10 I:double) \l0x0072: ARITH  (r17 I:double) = (r17 I:double) \- (r3 I:double) \l0x0074: ARITH  (r3 I:double) = (r17 I:double) * (r6 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0077|0x0077: INVOKE  (r8 I:double) = (r6 I:double) java.lang.Math.abs(double):double type: STATIC \l0x007b: CMP_G  (r8 I:int) = (r8 I:double), (r19 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x007d|0x007d: IF  (r8 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:21:0x0081 \l}"];
Node_20 [shape=record,label="{20\:\ 0x007f|0x007f: MOVE  (r8 I:?[long, double]) = (r13 I:?[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0081|0x0081: ARITH  (r3 I:double) = (r3 I:double) * (r15 I:double) \l0x0083: ARITH  (r3 I:double) = (r3 I:double) \/ (r6 I:double) \l0x0084: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.asin(double):double type: STATIC \l0x0088: MOVE  (r8 I:?[long, double]) = (r3 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0089|0x0089: ARITH  (r1 I:double) = (r24 I:double) * (r15 I:double) \l0x008b: ARITH  (r3 I:double) = (r17 I:double) * (r6 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x008e|0x008e: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008f: ARITH  (r8 I:double) = (r8 I:double) \- (r21 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0092|0x0092: NEG  (r3 I:double) = (r3 I:double) \l0x0093: ARITH  (r8 I:double) = (r21 I:double) \- (r8 I:double) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0096|0x0096: CMP_L  (r6 I:int) = (r3 I:double), (r13 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0098|0x0098: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00a5 \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: IGET  (r6 I:int) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.mode int \l0x009c: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x009d|0x009d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00a9 \l}"];
Node_29 [shape=record,label="{29\:\ 0x009f|0x009f: IGET  (r6 I:int) = \l  (r0 I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection)\l org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.mode int \l0x00a1: CONST  (r7 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a2|0x00a2: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00a5 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a5|0x00a5: INVOKE  (r13 I:double) = (r1 I:double), (r3 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a9|0x00a9: IPUT  (r13 I:double), (r5 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x00ab: IPUT  (r8 I:double), (r5 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l}"];
Node_34 [shape=record,label="{34\:\ 0x00ad|0x00ad: RETURN   \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ae|0x00ae: NEW_INSTANCE  (r1 I:org.osgeo.proj4j.ProjectionException) =  org.osgeo.proj4j.ProjectionException \l0x00b0: CONST_STR  (r2 I:java.lang.String) =  \"I_ERROR\" \l0x00b2: INVOKE  \l  (r1 I:org.osgeo.proj4j.ProjectionException)\l  (r2 I:java.lang.String)\l org.osgeo.proj4j.ProjectionException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b5|0x00b5: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.projectInverse_s((r23 'this' I:org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection A[IMMUTABLE_TYPE, THIS]), (r24 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_35;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_10 -> Node_18;
Node_10 -> Node_23;
Node_10 -> Node_24;
Node_11 -> Node_25;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_25;
Node_23 -> Node_11;
Node_24 -> Node_11;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_33[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_35 -> Node_36;
}

