digraph "CFG fororg.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.initialize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.initialize()\lr10.phi0 = r10.projectionLatitude\ldouble r0 = java.lang.Math.abs(r10.phi0)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|if ((java.lang.Math.abs(r0 \- 1.5707963267948966d) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r0 \- 1.5707963267948966d) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x0030\l}"];
Node_2 [shape=record,label="{2\:\ 0x0022}"];
Node_3 [shape=record,label="{3\:\ 0x0028|if ((r10.phi0 \> 0.0d ? 1 : (r10.phi0 == 0.0d ? 0 : \-1)) \>= 0) goto L_0x002c\l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|r0 = 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|r0 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|PHI: r0 \l  PHI: (r0v41 int) = (r0v42 int), (r0v43 int) binds: [B:5:0x002c, B:4:0x002a] A[DONT_GENERATE, DONT_INLINE]\l|r10.mode = r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030}"];
Node_8 [shape=record,label="{8\:\ 0x0036|if ((java.lang.Math.abs(r0) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r0) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x003c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|r10.mode = 2\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|r10.mode = 3\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e}"];
Node_12 [shape=record,label="{12\:\ 0x0040|if (r10.spherical != false) goto L_0x00e3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|r10.f423e = java.lang.Math.sqrt(r10.f424es)\lr10.f383qp = org.osgeo.proj4j.util.ProjectionMath.qsfn(1.0d, r10.f423e, r10.one_es)\lr10.mmf = 0.5d \/ (1.0d \- r10.f424es)\lr10.apa = org.osgeo.proj4j.util.ProjectionMath.authset(r10.f424es)\l}"];
Node_14 [shape=record,label="{14\:\ 0x006a|switch(r10.mode) \{\l    case 0: goto L_0x00e0;\l    case 1: goto L_0x00e0;\l    case 2: goto L_0x00c9;\l    case 3: goto L_0x006f;\l    default: goto L_0x006d;\l\}\l}"];
Node_15 [shape=record,label="{15\:\ 0x006f|r10.f384rq = java.lang.Math.sqrt(r10.f383qp * 0.5d)\ldouble r0 = java.lang.Math.sin(r10.phi0)\lr4 = r0\lr10.sinb1 = org.osgeo.proj4j.util.ProjectionMath.qsfn(r4, r10.f423e, r10.one_es) \/ r10.f383qp\lr10.cosb1 = java.lang.Math.sqrt(1.0d \- (r10.sinb1 * r10.sinb1))\lr10.f382dd = java.lang.Math.cos(r10.phi0) \/ ((java.lang.Math.sqrt(1.0d \- ((r10.f424es * r0) * r0)) * r10.f384rq) * r10.cosb1)\ldouble r0 = r10.f384rq\lr10.xmf = r0\lr10.ymf = r0 \/ r10.f382dd\lr10.xmf = r10.xmf * r10.f382dd\l}"];
Node_16 [shape=record,label="{16\:\ 0x00c9|double r0 = java.lang.Math.sqrt(r10.f383qp * 0.5d)\lr10.f384rq = r0\lr10.f382dd = 1.0d \/ r0\lr10.xmf = 1.0d\lr10.ymf = r10.f383qp * 0.5d\l}"];
Node_17 [shape=record,label="{17\:\ 0x00e0|r10.f382dd = 1.0d\l}"];
Node_18 [shape=record,label="{18\:\ 0x00e3}"];
Node_19 [shape=record,label="{19\:\ 0x00e5|if (r10.mode != 3) goto L_?\l}"];
Node_20 [shape=record,label="{20\:\ 0x00e7|r10.sinph0 = java.lang.Math.sin(r10.phi0)\lr10.cosph0 = java.lang.Math.cos(r10.phi0)\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection.initialize((r10v0 'this' org.osgeo.proj4j.proj.LambertAzimuthalEqualAreaProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_16;
Node_14 -> Node_17;
Node_14 -> Node_26;
Node_15 -> Node_22;
Node_16 -> Node_23;
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
}

