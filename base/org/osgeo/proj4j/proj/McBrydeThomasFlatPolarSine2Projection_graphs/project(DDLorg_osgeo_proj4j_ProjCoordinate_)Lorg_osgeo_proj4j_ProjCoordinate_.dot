digraph "CFG fororg.osgeo.proj4j.proj.McBrydeThomasFlatPolarSine2Projection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = r21\ldouble r3 = java.lang.Math.sin(r19) * f406C3\lr5 = 10\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|LOOP_START\lPHI: r5 \l  PHI: (r5v2 int) = (r5v1 int), (r5v6 int) binds: [B:0:0x0000, B:5:0x004d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000f\-\>B:5:0x004d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|if (r5 \<= 0) goto L_0x0050\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|double r8 = r19 \/ f405C2\ldouble r10 = r2.f295y\ldouble r14 = (((java.lang.Math.sin(r8) * f404C1) + java.lang.Math.sin(r19)) \- r3) \/ ((java.lang.Math.cos(r8) * C1_2) + java.lang.Math.cos(r19))\lr2.f295y = r10 \- r14\l}"];
Node_4 [shape=record,label="{4\:\ 0x004a|if ((java.lang.Math.abs(r14) \> LOOP_TOL ? 1 : (java.lang.Math.abs(r14) == LOOP_TOL ? 0 : \-1)) \>= 0) goto L_0x004d\l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|LOOP_END\lLOOP:0: B:1:0x000f\-\>B:5:0x004d\l|int r5 = r5 + \-1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0050|double r3 = r19 \/ f405C2\lr2.f294x = (C_x * r17) * (((java.lang.Math.cos(r19) * 3.0d) \/ java.lang.Math.cos(r3)) + 1.0d)\lr2.f295y = java.lang.Math.sin(r3) * C_y\l}"];
Node_7 [shape=record,label="{7\:\ 0x007a|RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0050|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.McBrydeThomasFlatPolarSine2Projection.project((r16v0 'this' org.osgeo.proj4j.proj.McBrydeThomasFlatPolarSine2Projection A[IMMUTABLE_TYPE, THIS]), (r17v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_6;
Node_9 -> Node_6;
}

