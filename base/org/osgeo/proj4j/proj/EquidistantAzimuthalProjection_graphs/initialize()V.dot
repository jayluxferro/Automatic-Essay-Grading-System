digraph "CFG fororg.osgeo.proj4j.proj.EquidistantAzimuthalProjection.initialize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.initialize()\l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|if ((java.lang.Math.abs(java.lang.Math.abs(r9.projectionLatitude) \- 1.5707963267948966d) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(java.lang.Math.abs(r9.projectionLatitude) \- 1.5707963267948966d) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x003a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0020}"];
Node_3 [shape=record,label="{3\:\ 0x0024|if ((r9.projectionLatitude \> 0.0d ? 1 : (r9.projectionLatitude == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0028\l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|r0 = 2\l}"];
Node_5 [shape=record,label="{5\:\ 0x0028|r0 = 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|PHI: r0 \l  PHI: (r0v31 int) = (r0v37 int), (r0v38 int) binds: [B:5:0x0028, B:4:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|r9.mode = r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|if ((r9.projectionLatitude \> 0.0d ? 1 : (r9.projectionLatitude == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|r0 = \-1.0d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|r0 = 1.0d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|PHI: r0 \l  PHI: (r0v34 double) = (r0v35 double), (r0v36 double) binds: [B:9:0x0034, B:8:0x0031] A[DONT_GENERATE, DONT_INLINE]\l|r9.sinphi0 = r0\lr9.cosphi0 = 0.0d\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a}"];
Node_12 [shape=record,label="{12\:\ 0x0042|if ((java.lang.Math.abs(r9.projectionLatitude) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r9.projectionLatitude) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x004c\l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|r9.mode = 3\lr9.sinphi0 = 0.0d\lr9.cosphi0 = 1.0d\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|r9.mode = 4\lr9.sinphi0 = java.lang.Math.sin(r9.projectionLatitude)\lr9.cosphi0 = java.lang.Math.cos(r9.projectionLatitude)\l}"];
Node_15 [shape=record,label="{15\:\ 0x005f}"];
Node_16 [shape=record,label="{16\:\ 0x0061|if (r9.spherical != false) goto L_?\l}"];
Node_17 [shape=record,label="{17\:\ 0x0063|r9.f363en = org.osgeo.proj4j.util.ProjectionMath.enfn(r9.f424es)\l}"];
Node_18 [shape=record,label="{18\:\ 0x006d|switch(r9.mode) \{\l    case 1: goto L_0x00b0;\l    case 2: goto L_0x009e;\l    case 3: goto L_0x0071;\l    case 4: goto L_0x0071;\l    default: goto L_0x0070;\l\}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|r9.f362N1 = 1.0d \/ java.lang.Math.sqrt(1.0d \- ((r9.f424es * r9.sinphi0) * r9.sinphi0))\ldouble r0 = r9.sinphi0\ldouble r2 = r9.f423e \/ java.lang.Math.sqrt(r9.one_es)\lr9.f359He = r2\lr9.f358G = r0 * r2\lr9.f359He = r9.f359He * r9.cosphi0\l}"];
Node_20 [shape=record,label="{20\:\ 0x009e|r9.f361Mp = org.osgeo.proj4j.util.ProjectionMath.mlfn(\-1.5707963267948966d, \-1.0d, 0.0d, r9.f363en)\l}"];
Node_21 [shape=record,label="{21\:\ 0x00b0|r9.f361Mp = org.osgeo.proj4j.util.ProjectionMath.mlfn(1.5707963267948966d, 1.0d, 0.0d, r9.f363en)\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.EquidistantAzimuthalProjection.initialize((r9v0 'this' org.osgeo.proj4j.proj.EquidistantAzimuthalProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_20;
Node_18 -> Node_21;
Node_18 -> Node_26;
Node_19 -> Node_24;
Node_20 -> Node_25;
Node_21 -> Node_22;
}

