digraph "CFG fororg.osgeo.proj4j.proj.TransverseMercatorProjection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r40\lr3 = r45\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0.spherical == false) goto L_0x004d\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|double r9 = java.lang.Math.cos(r43)\ldouble r11 = java.lang.Math.sin(r41) * r9\lr3.f294x = (r0.ml0 * r0.scaleFactor) * java.lang.Math.log((r11 + FC1) \/ (FC1 \- r11))\ldouble r1 = org.osgeo.proj4j.util.ProjectionMath.acos((r9 * java.lang.Math.cos(r41)) \/ java.lang.Math.sqrt(FC1 \- (r11 * r11)))\l}"];
Node_3 [shape=record,label="{3\:\ 0x003e|if ((r43 \> 0.0d ? 1 : (r43 == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0041\l}"];
Node_4 [shape=record,label="{4\:\ 0x0040|double r1 = \-r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0041|PHI: r1 \l  PHI: (r1v9 double) = (r1v8 double), (r1v12 double) binds: [B:3:0x003e, B:4:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|r3.f295y = r0.esp * (r1 \- r0.projectionLatitude)\l}"];
Node_6 [shape=record,label="{6\:\ 0x004d|r9 = 0.0d\ldouble r11 = java.lang.Math.sin(r43)\ldouble r21 = java.lang.Math.cos(r43)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0062|if ((java.lang.Math.abs(r21) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r21) == 1.0E\-10d ? 0 : \-1)) \<= 0) goto L_0x0066\l}"];
Node_8 [shape=record,label="{8\:\ 0x0064|double r9 = r11 \/ r21\l}"];
Node_9 [shape=record,label="{9\:\ 0x0066|PHI: r9 \l  PHI: (r9v1 double) = (r9v0 double), (r9v5 double) binds: [B:7:0x0062, B:8:0x0064] A[DONT_GENERATE, DONT_INLINE]\l|double r9 = r9 * r9\ldouble r13 = r21 * r41\ldouble r15 = r13 * r13\ldouble r13 = r13 \/ java.lang.Math.sqrt(FC1 \- ((r0.f424es * r11) * r11))\ldouble r6 = (r0.esp * r21) * r21\lr3.f294x = (r0.scaleFactor * r13) * (((FC3 * r15) * (((FC1 \- r9) + r6) + ((FC5 * r15) * (((((r9 \- 18.0d) * r9) + 5.0d) + ((14.0d \- (r9 * 58.0d)) * r6)) + ((FC7 * r15) * (((((179.0d \- r9) * r9) \- 479.0d) * r9) + 61.0d)))))) + FC1)\ldouble r4 = r0.scaleFactor\lr1 = r45\lr1.f295y = r4 * ((org.osgeo.proj4j.util.ProjectionMath.mlfn(r43, r11, r21, r0.f438en) \- r0.ml0) + ((((r11 * r13) * r41) * FC2) * (((FC4 * r15) * (((5.0d \- r9) + (((4.0d * r6) + 9.0d) * r6)) + ((FC6 * r15) * (((((r9 \- 58.0d) * r9) + 61.0d) + (r6 * (270.0d \- (330.0d * r9)))) + ((r15 * FC8) * ((r9 * (((543.0d \- r9) * r9) \- 3111.0d)) + 1385.0d)))))) + FC1)))\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r1\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.TransverseMercatorProjection.project((r40v0 'this' org.osgeo.proj4j.proj.TransverseMercatorProjection A[IMMUTABLE_TYPE, THIS]), (r41v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r43v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r45v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

