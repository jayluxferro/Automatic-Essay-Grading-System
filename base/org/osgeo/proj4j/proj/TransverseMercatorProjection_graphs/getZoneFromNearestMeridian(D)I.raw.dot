digraph "CFG fororg.osgeo.proj4j.proj.TransverseMercatorProjection.getZoneFromNearestMeridian(D)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:double) = (r4 I:double) org.osgeo.proj4j.util.ProjectionMath.normalizeLongitude(double):double type: STATIC \l0x0004: CONST  (r0 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x0009: ARITH  (r4 I:double) = (r4 I:double) + (r0 I:double) \l0x000a: CONST  (r2 I:?[long, double]) = \l  (4629137466983448576(0x403e000000000000, double:30.0) ?[long, double])\l \l0x000c: ARITH  (r4 I:double) = (r4 I:double) * (r2 I:double) \l0x000e: ARITH  (r4 I:double) = (r4 I:double) \/ (r0 I:double) \l0x000f: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0013: CAST  (r4 I:int) = (int) (r4 I:double) \l0x0014: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0015: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0016: CONST  (r0 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r4 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:5:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: CONST  (r4 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{public static int org.osgeo.proj4j.proj.TransverseMercatorProjection.getZoneFromNearestMeridian((r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

