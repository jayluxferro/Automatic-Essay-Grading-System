digraph "CFG fororg.osgeo.proj4j.proj.LoximuthalProjection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = r11 \- r8.phi1\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|if ((r0 \> EPS ? 1 : (r0 == EPS ? 0 : \-1)) \>= 0) goto L_0x0012\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|double r9 = r9 * r8.cosphi1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|double r11 = (r11 * 0.5d) + 0.7853981633974483d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|if ((java.lang.Math.abs(r11) \> EPS ? 1 : (java.lang.Math.abs(r11) == EPS ? 0 : \-1)) \< 0) goto L_0x0046\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024}"];
Node_6 [shape=record,label="{6\:\ 0x0034|if ((java.lang.Math.abs(java.lang.Math.abs(r11) \- 1.5707963267948966d) \> EPS ? 1 : (java.lang.Math.abs(java.lang.Math.abs(r11) \- 1.5707963267948966d) == EPS ? 0 : \-1)) \>= 0) goto L_0x0037\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|double r9 = (r9 * r0) \/ java.lang.Math.log(java.lang.Math.tan(r11) \/ r8.tanphi1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|r9 = 0.0d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|PHI: r9 \l  PHI: (r9v1 double) = (r9v2 double), (r9v4 double), (r9v5 double) binds: [B:8:0x0046, B:7:0x0037, B:2:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r13.f294x = r9\lr13.f295y = r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|RETURN\l|return r13\l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.LoximuthalProjection.project((r8v0 'this' org.osgeo.proj4j.proj.LoximuthalProjection A[IMMUTABLE_TYPE, THIS]), (r9v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

