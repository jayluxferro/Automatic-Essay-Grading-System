digraph "CFG fororg.osgeo.proj4j.proj.LoximuthalProjection.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:org.osgeo.proj4j.proj.PseudoCylindricalProjection) org.osgeo.proj4j.proj.PseudoCylindricalProjection.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[long, double]) = \l  (4630826316843712512(0x4044000000000000, double:40.0) ?[long, double])\l \l0x0005: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0009: IPUT  \l  (r0 I:double)\l  (r4 I:org.osgeo.proj4j.proj.LoximuthalProjection)\l org.osgeo.proj4j.proj.LoximuthalProjection.phi1 double \l0x000b: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.proj.LoximuthalProjection) org.osgeo.proj4j.proj.LoximuthalProjection.phi1 double \l0x000d: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0011: IPUT  \l  (r0 I:double)\l  (r4 I:org.osgeo.proj4j.proj.LoximuthalProjection)\l org.osgeo.proj4j.proj.LoximuthalProjection.cosphi1 double \l0x0013: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.proj.LoximuthalProjection) org.osgeo.proj4j.proj.LoximuthalProjection.phi1 double \l0x0015: CONST  (r2 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0017: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x0019: CONST  (r2 I:?[long, double]) = \l  (4605249457297304856(0x3fe921fb54442d18, double:0.7853981633974483) ?[long, double])\l \l0x001e: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x001f: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.tan(double):double type: STATIC \l0x0023: IPUT  \l  (r0 I:double)\l  (r4 I:org.osgeo.proj4j.proj.LoximuthalProjection)\l org.osgeo.proj4j.proj.LoximuthalProjection.tanphi1 double \l}"];
Node_1 [shape=record,label="{1\:\ 0x0025|0x0025: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.LoximuthalProjection.\<init\>((r4 'this' I:org.osgeo.proj4j.proj.LoximuthalProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

