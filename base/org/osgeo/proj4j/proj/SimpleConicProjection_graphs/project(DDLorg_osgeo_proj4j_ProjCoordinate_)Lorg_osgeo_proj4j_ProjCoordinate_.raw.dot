digraph "CFG fororg.osgeo.proj4j.proj.SimpleConicProjection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.type int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.rho_c double \l0x000a: ARITH  (r0 I:double) = (r0 I:double) \- (r9 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r0 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.c2 double \l0x000e: IGET  (r2 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.c1 double \l0x0010: IGET  (r4 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.sig double \l0x0012: ARITH  (r9 I:double) = (r9 I:double) \- (r4 I:double) \l0x0013: INVOKE  (r9 I:double) = (r9 I:double) java.lang.Math.tan(double):double type: STATIC \l0x0017: ARITH  (r2 I:double) = (r2 I:double) \- (r9 I:double) \l0x0018: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IGET  (r0 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.rho_c double \l0x001d: IGET  (r2 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.sig double \l0x001f: ARITH  (r2 I:double) = (r2 I:double) \- (r9 I:double) \l0x0020: INVOKE  (r9 I:double) = (r2 I:double) java.lang.Math.tan(double):double type: STATIC \l0x0024: ARITH  (r0 I:double) = (r0 I:double) + (r9 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: IGET  (r9 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.n double \l0x0027: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x0029: INVOKE  (r9 I:double) = (r7 I:double) java.lang.Math.sin(double):double type: STATIC \l0x002d: ARITH  (r9 I:double) = (r9 I:double) * (r0 I:double) \l0x002f: IPUT  (r9 I:double), (r11 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x0031: IGET  (r9 I:double) = (r6 I:org.osgeo.proj4j.proj.SimpleConicProjection) org.osgeo.proj4j.proj.SimpleConicProjection.rho_0 double \l0x0033: INVOKE  (r7 I:double) = (r7 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0037: ARITH  (r0 I:double) = (r0 I:double) * (r7 I:double) \l0x0039: ARITH  (r9 I:double) = (r9 I:double) \- (r0 I:double) \l0x003a: IPUT  (r9 I:double), (r11 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: RETURN  (r11 I:org.osgeo.proj4j.ProjCoordinate) \l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.SimpleConicProjection.project((r6 'this' I:org.osgeo.proj4j.proj.SimpleConicProjection A[IMMUTABLE_TYPE, THIS]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

