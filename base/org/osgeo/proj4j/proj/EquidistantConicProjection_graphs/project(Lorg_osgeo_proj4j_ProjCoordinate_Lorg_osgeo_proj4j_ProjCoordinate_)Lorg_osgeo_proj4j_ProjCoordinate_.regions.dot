digraph "CFG fororg.osgeo.proj4j.proj.EquidistantConicProjection.project(Lorg\/osgeo\/proj4j\/ProjCoordinate;Lorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
subgraph cluster_Region_395056372 {
label = "R(4:0|(1:2)|3|4)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double double r0 = org.osgeo.proj4j.util.ProjectionMath.normalizeLongitude(r13.f294x \- r12.projectionLongitude)\ldouble double r2 = r13.f295y\ldouble double r4 = java.lang.Math.pow((1.0d \- (r12.eccentricity * java.lang.Math.sin(r2))) \/ ((r12.eccentricity * java.lang.Math.sin(r2)) + 1.0d), r12.eccentricity * 0.5d)\ldouble double r2 = java.lang.Math.tan(0.7853981633974483d \- (r2 * 0.5d))\ldouble r6 = 0.0d\l}"];
subgraph cluster_IfRegion_1168271697 {
label = "IF [B:1:0x003b] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x003b|if (r2 != 0.0d) goto L_0x003e\l}"];
subgraph cluster_Region_777848364 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x003e|double r6 = java.lang.Math.pow(r2 \/ r4, r12.f365n)\l}"];
}
}
Node_3 [shape=record,label="{3\:\ 0x0045|PHI: r6 \l  PHI: (r6v7 double) = (r6v6 double), (r6v8 double) binds: [B:1:0x003b, B:2:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|double double r2 = r12.radius * r12.f364f * r6\ldouble double r4 = r12.f365n * r0\lr14.f294x = java.lang.Math.sin(r4) * r2\lr14.f295y = r12.rho0 \- (r2 * java.lang.Math.cos(r4))\l}"];
Node_4 [shape=record,label="{4\:\ 0x0064|RETURN\l|return r14\l}"];
}
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.EquidistantConicProjection.project((r12v0 'this' org.osgeo.proj4j.proj.EquidistantConicProjection A[IMMUTABLE_TYPE, THIS]), (r13v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

