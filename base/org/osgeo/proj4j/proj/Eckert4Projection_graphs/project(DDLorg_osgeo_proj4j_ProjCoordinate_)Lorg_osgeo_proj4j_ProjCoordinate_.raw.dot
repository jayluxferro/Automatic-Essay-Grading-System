digraph "CFG fororg.osgeo.proj4j.proj.Eckert4Projection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r5 I:double) = (r21 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0006: CONST  (r7 I:?[long, double]) = \l  (4615223137303402124(0x400c90fdaa22168c, double:3.5707963267948966) ?[long, double])\l \l0x000b: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x000d: ARITH  (r7 I:double) = (r21 I:double) * (r21 I:double) \l0x000f: CONST  (r9 I:?[long, double]) = \l  (4575919851162565853(0x3f80eedc4133fcdd, double:0.00826809) ?[long, double])\l \l0x0014: ARITH  (r9 I:double) = (r9 I:double) * (r7 I:double) \l0x0016: CONST  (r11 I:?[long, double]) = \l  (4581965114367466532(0x3f9668fec71adc24, double:0.0218849) ?[long, double])\l \l0x001b: ARITH  (r9 I:double) = (r9 I:double) + (r11 I:double) \l0x001c: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x001e: CONST  (r9 I:?[long, double]) = \l  (4606238176087744400(0x3feca5375c8d9f90, double:0.895168) ?[long, double])\l \l0x0023: ARITH  (r7 I:double) = (r7 I:double) + (r9 I:double) \l0x0024: ARITH  (r2 I:double) = (r21 I:double) * (r7 I:double) \l0x0026: CONST  (r7 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0027|0x0027: CONST  (r8 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x0029|0x0029: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0057 \l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|0x002b: INVOKE  (r10 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x002f: INVOKE  (r12 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0033: CONST  (r14 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0035: ARITH  (r14 I:double) = (r14 I:double) + (r10 I:double) \l0x0036: ARITH  (r16 I:double) = (r12 I:double) * (r14 I:double) \l0x0038: ARITH  (r16 I:double) = (r2 I:double) + (r16 I:double) \l0x003a: ARITH  (r16 I:double) = (r16 I:double) \- (r5 I:double) \l0x003c: ARITH  (r10 I:double) = (r10 I:double) * (r14 I:double) \l0x003e: ARITH  (r10 I:double) = (r10 I:double) + (r8 I:double) \l0x003f: ARITH  (r12 I:double) = (r12 I:double) * (r12 I:double) \l0x0041: ARITH  (r10 I:double) = (r10 I:double) \- (r12 I:double) \l0x0042: ARITH  (r16 I:double) = (r16 I:double) \/ (r10 I:double) \l0x0044: ARITH  (r2 I:double) = (r2 I:double) \- (r16 I:double) \l0x0046: INVOKE  (r10 I:double) = (r16 I:double) java.lang.Math.abs(double):double type: STATIC \l0x004a: CONST  (r12 I:?[long, double]) = \l  (4502148214488346440(0x3e7ad7f29abcaf48, double:1.0E\-7) ?[long, double])\l \l0x004f: CMP_G  (r10 I:int) = (r10 I:double), (r12 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0051|0x0051: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0054 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0054|0x0054: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0057|0x0057: CONST  (r5 I:?[long, double]) = \l  (4608652846006691663(0x3ff539588352674f, double:1.3265004281770023) ?[long, double])\l \l0x005c: CONST  (r10 I:?[long, double]) = \l  (4601277987124320704(0x3fdb05f35f5e99c0, double:0.4222382003157712) ?[long, double])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0061|0x0061: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0075 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0063|0x0063: ARITH  (r0 I:double) = (r19 I:double) * (r10 I:double) \l0x0065: IPUT  (r0 I:double), (r4 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x0067: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0069: CMP_G  (r0 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x006b|0x006b: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0072 \l}"];
Node_11 [shape=record,label="{11\:\ 0x006d|0x006d: CONST  (r5 I:?[long, double]) = \l  (\-4614719190848084145(0xbff539588352674f, double:\-1.3265004281770023) ?[long, double])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0072|0x0072: IPUT  (r5 I:double), (r4 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l}"];
Node_13 [shape=record,label="{13\:\ 0x0075|0x0075: ARITH  (r0 I:double) = (r19 I:double) * (r10 I:double) \l0x0077: INVOKE  (r10 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x007b: ARITH  (r10 I:double) = (r10 I:double) + (r8 I:double) \l0x007c: ARITH  (r0 I:double) = (r0 I:double) * (r10 I:double) \l0x007e: IPUT  (r0 I:double), (r4 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x0080: INVOKE  (r0 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0084: ARITH  (r0 I:double) = (r0 I:double) * (r5 I:double) \l0x0086: IPUT  (r0 I:double), (r4 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|0x0088: RETURN  (r4 I:org.osgeo.proj4j.ProjCoordinate) \l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.Eckert4Projection.project((r18 'this' I:org.osgeo.proj4j.proj.Eckert4Projection A[IMMUTABLE_TYPE, THIS]), (r19 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_13 -> Node_14;
}

