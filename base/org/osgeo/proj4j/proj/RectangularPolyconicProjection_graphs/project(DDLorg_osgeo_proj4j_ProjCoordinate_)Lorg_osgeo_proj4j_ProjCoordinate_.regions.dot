digraph "CFG fororg.osgeo.proj4j.proj.RectangularPolyconicProjection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
subgraph cluster_Region_108563888 {
label = "R(3:1|(1:6)(1:7)|8)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|double r7 = r6.mode ? java.lang.Math.tan(r7 * r6.fxb) * r6.fxa : r7 * 0.5d\l}"];
subgraph cluster_IfRegion_1492689910 {
label = "IF [B:5:0x0020] THEN: R(1:6) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0020|if (java.lang.Math.abs(r9) \< EPS) goto L_0x0022\l}"];
subgraph cluster_Region_679166607 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0022|r11.f294x = r7 + r7\lr11.f295y = \-r6.phi0\l}"];
}
subgraph cluster_Region_1062986659 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002b|r11.f295y = 1.0d \/ java.lang.Math.tan(r9)\ldouble double r7 = java.lang.Math.atan(r7 * java.lang.Math.sin(r9)) * 2.0d\lr11.f294x = java.lang.Math.sin(r7) * r11.f295y\lr11.f295y = (r9 \- r6.phi0) + ((1.0d \- java.lang.Math.cos(r7)) * r11.f295y)\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x005c|RETURN\l|return r11\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0011}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0015|PHI: r7 \l  PHI: (r7v1 double) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.RectangularPolyconicProjection.project((r6v0 'this' org.osgeo.proj4j.proj.RectangularPolyconicProjection A[IMMUTABLE_TYPE, THIS]), (r7v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

