digraph "CFG fororg.osgeo.proj4j.proj.PolyconicProjection.initialize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r8 I:org.osgeo.proj4j.proj.Projection) org.osgeo.proj4j.proj.Projection.initialize():void type: SUPER \l0x0003: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: IPUT  \l  (r0 I:boolean)\l  (r8 I:org.osgeo.proj4j.proj.PolyconicProjection)\l org.osgeo.proj4j.proj.PolyconicProjection.spherical boolean \l0x0006: IGET  (r0 I:boolean) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.spherical boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r0 I:double) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.es double \l0x000c: INVOKE  (r0 I:double[]) = (r0 I:double) org.osgeo.proj4j.util.ProjectionMath.enfn(double):double[] type: STATIC \l0x0010: IPUT  \l  (r0 I:double[])\l  (r8 I:org.osgeo.proj4j.proj.PolyconicProjection)\l org.osgeo.proj4j.proj.PolyconicProjection.en double[] \l0x0012: IGET  (r0 I:double[]) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.en double[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r1 I:double) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.projectionLatitude double \l0x0018: IGET  (r3 I:double) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.projectionLatitude double \l0x001a: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.sin(double):double type: STATIC \l0x001e: IGET  (r5 I:double) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.projectionLatitude double \l0x0020: INVOKE  (r5 I:double) = (r5 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0024: IGET  (r7 I:double[]) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.en double[] \l0x0026: INVOKE  (r0 I:double) = \l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:double[])\l org.osgeo.proj4j.util.ProjectionMath.mlfn(double, double, double, double[]):double type: STATIC \l0x002a: IPUT  \l  (r0 I:double)\l  (r8 I:org.osgeo.proj4j.proj.PolyconicProjection)\l org.osgeo.proj4j.proj.PolyconicProjection.ml0 double \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: NEW_INSTANCE  (r0 I:org.osgeo.proj4j.ProjectionException) =  org.osgeo.proj4j.ProjectionException \l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"E\" \l0x0031: INVOKE  \l  (r0 I:org.osgeo.proj4j.ProjectionException)\l  (r1 I:java.lang.String)\l org.osgeo.proj4j.ProjectionException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: IGET  (r0 I:double) = (r8 I:org.osgeo.proj4j.proj.PolyconicProjection) org.osgeo.proj4j.proj.PolyconicProjection.projectionLatitude double \l0x0037: NEG  (r0 I:double) = (r0 I:double) \l0x0038: IPUT  \l  (r0 I:double)\l  (r8 I:org.osgeo.proj4j.proj.PolyconicProjection)\l org.osgeo.proj4j.proj.PolyconicProjection.ml0 double \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.PolyconicProjection.initialize((r8 'this' I:org.osgeo.proj4j.proj.PolyconicProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

