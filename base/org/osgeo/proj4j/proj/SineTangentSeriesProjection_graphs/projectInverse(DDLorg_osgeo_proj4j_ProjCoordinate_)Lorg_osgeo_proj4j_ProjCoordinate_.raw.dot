digraph "CFG fororg.osgeo.proj4j.proj.SineTangentSeriesProjection.projectInverse(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.proj.SineTangentSeriesProjection) org.osgeo.proj4j.proj.SineTangentSeriesProjection.C_y double \l0x0002: ARITH  (r7 I:double) = (r7 I:double) \/ (r0 I:double) \l0x0003: IGET  (r0 I:boolean) = (r4 I:org.osgeo.proj4j.proj.SineTangentSeriesProjection) org.osgeo.proj4j.proj.SineTangentSeriesProjection.tan_mode boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r7 I:double) = (r7 I:double) java.lang.Math.atan(double):double type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r7 I:double) = (r7 I:double) org.osgeo.proj4j.util.ProjectionMath.asin(double):double type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IPUT  (r7 I:double), (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l0x0012: INVOKE  (r7 I:double) = (r7 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0016: IGET  (r0 I:double) = (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l0x0018: IGET  (r2 I:double) = (r4 I:org.osgeo.proj4j.proj.SineTangentSeriesProjection) org.osgeo.proj4j.proj.SineTangentSeriesProjection.C_p double \l0x001a: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x001b: IPUT  (r0 I:double), (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l0x001d: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.proj.SineTangentSeriesProjection) org.osgeo.proj4j.proj.SineTangentSeriesProjection.C_x double \l0x001f: IGET  (r2 I:double) = (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l0x0021: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0025: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x0027: ARITH  (r5 I:double) = (r5 I:double) \/ (r0 I:double) \l0x0028: IPUT  (r5 I:double), (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x002a: IGET  (r5 I:boolean) = (r4 I:org.osgeo.proj4j.proj.SineTangentSeriesProjection) org.osgeo.proj4j.proj.SineTangentSeriesProjection.tan_mode boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0036 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IGET  (r5 I:double) = (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x0030: ARITH  (r7 I:double) = (r7 I:double) * (r7 I:double) \l0x0032: ARITH  (r5 I:double) = (r5 I:double) \/ (r7 I:double) \l0x0033: IPUT  (r5 I:double), (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: IGET  (r5 I:double) = (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x0038: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x003a: IPUT  (r5 I:double), (r9 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: RETURN  (r9 I:org.osgeo.proj4j.ProjCoordinate) \l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.SineTangentSeriesProjection.projectInverse((r4 'this' I:org.osgeo.proj4j.proj.SineTangentSeriesProjection A[IMMUTABLE_TYPE, THIS]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
}

