digraph "CFG fororg.osgeo.proj4j.proj.AlbersProjection.phi1_(DDD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0002: ARITH  (r2 I:double) = (r19 I:double) * (r0 I:double) \l0x0004: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.asin(double):double type: STATIC \l0x0008: CONST  (r4 I:?[long, double]) = \l  (4502148214488346440(0x3e7ad7f29abcaf48, double:1.0E\-7) ?[long, double])\l \l0x000d: CMP_G  (r4 I:int) = (r21 I:double), (r4 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: RETURN  (r2 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: CONST  (r4 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r5 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0018: INVOKE  (r7 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x001c: ARITH  (r9 I:double) = (r21 I:double) * (r5 I:double) \l0x001e: ARITH  (r11 I:double) = (r9 I:double) * (r9 I:double) \l0x0020: CONST  (r13 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0022: ARITH  (r11 I:double) = (r13 I:double) \- (r11 I:double) \l0x0024: ARITH  (r15 I:double) = (r11 I:double) * (r0 I:double) \l0x0026: ARITH  (r15 I:double) = (r15 I:double) * (r11 I:double) \l0x0028: ARITH  (r15 I:double) = (r15 I:double) \/ (r7 I:double) \l0x0029: ARITH  (r17 I:double) = (r19 I:double) \/ (r23 I:double) \l0x002b: ARITH  (r5 I:double) = (r5 I:double) \/ (r11 I:double) \l0x002c: ARITH  (r17 I:double) = (r17 I:double) \- (r5 I:double) \l0x002e: ARITH  (r5 I:double) = (r0 I:double) \/ (r21 I:double) \l0x0030: ARITH  (r11 I:double) = (r13 I:double) \- (r9 I:double) \l0x0032: ARITH  (r9 I:double) = (r9 I:double) + (r13 I:double) \l0x0033: ARITH  (r11 I:double) = (r11 I:double) \/ (r9 I:double) \l0x0034: INVOKE  (r9 I:double) = (r11 I:double) java.lang.Math.log(double):double type: STATIC \l0x0038: ARITH  (r5 I:double) = (r5 I:double) * (r9 I:double) \l0x003a: ARITH  (r17 I:double) = (r17 I:double) + (r5 I:double) \l0x003c: ARITH  (r15 I:double) = (r15 I:double) * (r17 I:double) \l0x003e: ARITH  (r2 I:double) = (r2 I:double) + (r15 I:double) \l0x003f: INVOKE  (r5 I:double) = (r15 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0043: CONST  (r9 I:?[long, double]) = \l  (4457293557087583675(0x3ddb7cdfd9d7bdbb, double:1.0E\-10) ?[long, double])\l \l0x0048: CMP_L  (r5 I:int) = (r5 I:double), (r9 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x004a|0x004a: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0050 \l}"];
Node_6 [shape=record,label="{6\:\ 0x004c|0x004c: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|0x004e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|0x0050: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|0x0053: CONST  (r2 I:?[long, double]) = \l  (9218868437227405311(0x7fefffffffffffff, double:1.7976931348623157E308) ?[long, double])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: RETURN  (r2 I:double) \l}"];
MethodNode[shape=record,label="{private static double org.osgeo.proj4j.proj.AlbersProjection.phi1_((r19 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
}

