digraph "CFG fororg.osgeo.proj4j.proj.Eckert6Projection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r12 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0004: CONST  (r2 I:?[long, double]) = \l  (4612971337489716876(0x400490fdaa22168c, double:2.5707963267948966) ?[long, double])\l \l0x0009: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x000b: CONST  (r2 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: CONST  (r3 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r5 I:double) = (r12 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0015: ARITH  (r5 I:double) = (r5 I:double) + (r12 I:double) \l0x0016: ARITH  (r5 I:double) = (r5 I:double) \- (r0 I:double) \l0x0017: INVOKE  (r7 I:double) = (r12 I:double) java.lang.Math.cos(double):double type: STATIC \l0x001b: ARITH  (r7 I:double) = (r7 I:double) + (r3 I:double) \l0x001c: ARITH  (r5 I:double) = (r5 I:double) \/ (r7 I:double) \l0x001d: ARITH  (r12 I:double) = (r12 I:double) \- (r5 I:double) \l0x001e: INVOKE  (r5 I:double) = (r5 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0022: CONST  (r7 I:?[long, double]) = \l  (4502148214488346440(0x3e7ad7f29abcaf48, double:1.0E\-7) ?[long, double])\l \l0x0027: CMP_G  (r5 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: SGET  (r0 I:double) =  org.osgeo.proj4j.proj.Eckert6Projection.C_x double \l0x0033: ARITH  (r0 I:double) = (r0 I:double) * (r10 I:double) \l0x0035: INVOKE  (r10 I:double) = (r12 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0039: ARITH  (r10 I:double) = (r10 I:double) + (r3 I:double) \l0x003a: ARITH  (r0 I:double) = (r0 I:double) * (r10 I:double) \l0x003c: IPUT  (r0 I:double), (r14 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.x double \l0x003e: SGET  (r10 I:double) =  org.osgeo.proj4j.proj.Eckert6Projection.C_y double \l0x0040: ARITH  (r10 I:double) = (r10 I:double) * (r12 I:double) \l0x0042: IPUT  (r10 I:double), (r14 I:org.osgeo.proj4j.ProjCoordinate) org.osgeo.proj4j.ProjCoordinate.y double \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: RETURN  (r14 I:org.osgeo.proj4j.ProjCoordinate) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: NEW_INSTANCE  (r10 I:org.osgeo.proj4j.ProjectionException) =  org.osgeo.proj4j.ProjectionException \l0x0047: CONST_STR  (r11 I:java.lang.String) =  \"F_ERROR\" \l0x0049: INVOKE  \l  (r10 I:org.osgeo.proj4j.ProjectionException)\l  (r11 I:java.lang.String)\l org.osgeo.proj4j.ProjectionException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|0x004c: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.Eckert6Projection.project((r9 'this' I:org.osgeo.proj4j.proj.Eckert6Projection A[IMMUTABLE_TYPE, THIS]), (r10 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

