digraph "CFG fororg.osgeo.proj4j.proj.AitoffProjection.\<init\>(ID)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:org.osgeo.proj4j.proj.PseudoCylindricalProjection) org.osgeo.proj4j.proj.PseudoCylindricalProjection.\<init\>():void type: DIRECT \l0x0003: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  \l  (r0 I:boolean)\l  (r3 I:org.osgeo.proj4j.proj.AitoffProjection)\l org.osgeo.proj4j.proj.AitoffProjection.winkel boolean \l0x0006: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0008: IPUT  \l  (r1 I:double)\l  (r3 I:org.osgeo.proj4j.proj.AitoffProjection)\l org.osgeo.proj4j.proj.AitoffProjection.cosphi1 double \l0x000a: IPUT  \l  (r5 I:double)\l  (r3 I:org.osgeo.proj4j.proj.AitoffProjection)\l org.osgeo.proj4j.proj.AitoffProjection.projectionLatitude double \l0x000c: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IPUT  \l  (r5 I:boolean)\l  (r3 I:org.osgeo.proj4j.proj.AitoffProjection)\l org.osgeo.proj4j.proj.AitoffProjection.winkel boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.AitoffProjection.\<init\>((r3 'this' I:org.osgeo.proj4j.proj.AitoffProjection A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
}

