digraph "CFG fororg.osgeo.proj4j.proj.AzimuthalProjection.inside(DD)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r9 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0004: INVOKE  (r2 I:double) = (r11 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0008: IGET  (r4 I:double) = (r8 I:org.osgeo.proj4j.proj.AzimuthalProjection) org.osgeo.proj4j.proj.AzimuthalProjection.projectionLongitude double \l0x000a: IGET  (r6 I:double) = (r8 I:org.osgeo.proj4j.proj.AzimuthalProjection) org.osgeo.proj4j.proj.AzimuthalProjection.projectionLatitude double \l0x000c: INVOKE  (r9 I:double) = (r0 I:double), (r2 I:double), (r4 I:double), (r6 I:double) org.osgeo.proj4j.util.ProjectionMath.greatCircleDistance(double, double, double, double):double type: STATIC \l0x0010: IGET  (r11 I:double) = (r8 I:org.osgeo.proj4j.proj.AzimuthalProjection) org.osgeo.proj4j.proj.AzimuthalProjection.mapRadius double \l0x0012: INVOKE  (r11 I:double) = (r11 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0016: CMP_G  (r9 I:int) = (r9 I:double), (r11 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN  (r9 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osgeo.proj4j.proj.AzimuthalProjection.inside((r8 'this' I:org.osgeo.proj4j.proj.AzimuthalProjection A[IMMUTABLE_TYPE, THIS]), (r9 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

