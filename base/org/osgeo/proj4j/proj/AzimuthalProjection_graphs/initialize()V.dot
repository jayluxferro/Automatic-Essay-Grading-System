digraph "CFG fororg.osgeo.proj4j.proj.AzimuthalProjection.initialize()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.initialize()\l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|if ((java.lang.Math.abs(java.lang.Math.abs(r4.projectionLatitude) \- 1.5707963267948966d) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(java.lang.Math.abs(r4.projectionLatitude) \- 1.5707963267948966d) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c}"];
Node_3 [shape=record,label="{3\:\ 0x0022|if ((r4.projectionLatitude \> 0.0d ? 1 : (r4.projectionLatitude == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0026\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|r0 = 2\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|r0 = 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|PHI: r0 \l  PHI: (r0v16 int) = (r0v17 int), (r0v18 int) binds: [B:5:0x0026, B:4:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|r4.mode = r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a}"];
Node_8 [shape=record,label="{8\:\ 0x0032|if ((java.lang.Math.abs(r4.projectionLatitude) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(r4.projectionLatitude) == 1.0E\-10d ? 0 : \-1)) \<= 0) goto L_0x0048\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|r4.mode = 4\lr4.sinphi0 = java.lang.Math.sin(r4.projectionLatitude)\lr4.cosphi0 = java.lang.Math.cos(r4.projectionLatitude)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|r4.mode = 3\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.proj.AzimuthalProjection.initialize((r4v0 'this' org.osgeo.proj4j.proj.AzimuthalProjection A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_11;
}

