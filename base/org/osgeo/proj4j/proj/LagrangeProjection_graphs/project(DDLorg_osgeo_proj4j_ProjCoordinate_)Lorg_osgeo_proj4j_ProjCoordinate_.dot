digraph "CFG fororg.osgeo.proj4j.proj.LagrangeProjection.project(DDLorg\/osgeo\/proj4j\/ProjCoordinate;)Lorg\/osgeo\/proj4j\/ProjCoordinate;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2 = 2.0d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|if ((java.lang.Math.abs(java.lang.Math.abs(r13) \- 1.5707963267948966d) \> 1.0E\-10d ? 1 : (java.lang.Math.abs(java.lang.Math.abs(r13) \- 1.5707963267948966d) == 1.0E\-10d ? 0 : \-1)) \>= 0) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|r15.f294x = 0.0d\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|if ((r13 \> 0.0d ? 1 : (r13 == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0023\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|r2 = \-2.0d\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|PHI: r2 \l  PHI: (r2v2 double) = (r2v1 double), (r2v3 double) binds: [B:3:0x001f, B:4:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|r15.f295y = r2\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|double r13 = java.lang.Math.sin(r13)\ldouble r0 = r10.f380a1 * java.lang.Math.pow((r13 + 1.0d) \/ (1.0d \- r13), r10.hrw)\ldouble r6 = 1.0d \/ r0\ldouble r11 = r11 * r10.f381rw\ldouble r8 = ((r0 + r6) * 0.5d) + java.lang.Math.cos(r11)\l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|if ((r8 \> 1.0E\-10d ? 1 : (r8 == 1.0E\-10d ? 0 : \-1)) \< 0) goto L_0x005d\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|r15.f294x = (java.lang.Math.sin(r11) * 2.0d) \/ r8\lr15.f295y = (r0 \- r6) \/ r8\l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|RETURN\l|return r15\l}"];
Node_10 [shape=record,label="{10\:\ 0x005d}"];
Node_11 [shape=record,label="{11\:\ 0x0062|throw new org.osgeo.proj4j.ProjectionException()\l}"];
MethodNode[shape=record,label="{public org.osgeo.proj4j.ProjCoordinate org.osgeo.proj4j.proj.LagrangeProjection.project((r10v0 'this' org.osgeo.proj4j.proj.LagrangeProjection A[IMMUTABLE_TYPE, THIS]), (r11v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 org.osgeo.proj4j.ProjCoordinate A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

