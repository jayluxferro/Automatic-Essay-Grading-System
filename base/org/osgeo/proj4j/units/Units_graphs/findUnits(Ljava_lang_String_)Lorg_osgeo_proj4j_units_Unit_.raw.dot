digraph "CFG fororg.osgeo.proj4j.units.Units.findUnits(Ljava\/lang\/String;)Lorg\/osgeo\/proj4j\/units\/Unit;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: SGET  (r1 I:org.osgeo.proj4j.units.Unit[]) =  org.osgeo.proj4j.units.Units.units org.osgeo.proj4j.units.Unit[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x0033 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SGET  (r1 I:org.osgeo.proj4j.units.Unit[]) =  org.osgeo.proj4j.units.Units.units org.osgeo.proj4j.units.Unit[] \l0x0008: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x000a: IGET  (r1 I:java.lang.String) = (r1 I:org.osgeo.proj4j.units.Unit) org.osgeo.proj4j.units.Unit.name java.lang.String \l0x000c: INVOKE  (r1 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: SGET  (r1 I:org.osgeo.proj4j.units.Unit[]) =  org.osgeo.proj4j.units.Units.units org.osgeo.proj4j.units.Unit[] \l0x0014: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0016: IGET  (r1 I:java.lang.String) = (r1 I:org.osgeo.proj4j.units.Unit) org.osgeo.proj4j.units.Unit.plural java.lang.String \l0x0018: INVOKE  (r1 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: SGET  (r1 I:org.osgeo.proj4j.units.Unit[]) =  org.osgeo.proj4j.units.Units.units org.osgeo.proj4j.units.Unit[] \l0x0020: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x0022: IGET  (r1 I:java.lang.String) = (r1 I:org.osgeo.proj4j.units.Unit) org.osgeo.proj4j.units.Unit.abbreviation java.lang.String \l0x0024: INVOKE  (r1 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002b \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: SGET  (r2 I:org.osgeo.proj4j.units.Unit[]) =  org.osgeo.proj4j.units.Units.units org.osgeo.proj4j.units.Unit[] \l0x0030: AGET  (r2 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN  (r2 I:org.osgeo.proj4j.units.Unit) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: SGET  (r2 I:org.osgeo.proj4j.units.Unit) =  org.osgeo.proj4j.units.Units.METRES org.osgeo.proj4j.units.Unit \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: RETURN  (r2 I:org.osgeo.proj4j.units.Unit) \l}"];
MethodNode[shape=record,label="{public static org.osgeo.proj4j.units.Unit org.osgeo.proj4j.units.Units.findUnits((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

