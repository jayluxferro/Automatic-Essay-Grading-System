digraph "CFG fororg.osgeo.proj4j.units.Units.findUnits(Ljava\/lang\/String;)Lorg\/osgeo\/proj4j\/units\/Unit;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:9:0x002b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:9:0x002b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|if (r0 \>= units.length) goto L_0x0033\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r2.equals(units[r0].name) != false) goto L_0x002e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012}"];
Node_6 [shape=record,label="{6\:\ 0x001c|if (r2.equals(units[r0].plural) != false) goto L_0x002e\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e}"];
Node_8 [shape=record,label="{8\:\ 0x0028|if (r2.equals(units[r0].abbreviation) == false) goto L_0x002b\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:9:0x002b\l|int r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e}"];
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|return units[r0]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033}"];
Node_13 [shape=record,label="{13\:\ 0x0035|RETURN\l|return METRES\l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static org.osgeo.proj4j.units.Unit org.osgeo.proj4j.units.Units.findUnits((r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_16[style=dashed];
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_10;
Node_15 -> Node_12;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

