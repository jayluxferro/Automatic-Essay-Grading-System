digraph "CFG fororg.osgeo.proj4j.datum.Ellipsoid.isEqual(Lorg\/osgeo\/proj4j\/datum\/Ellipsoid;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.equatorRadius double \l0x0002: IGET  (r2 I:double) = (r5 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.equatorRadius double \l0x0004: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:double) = (r4 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.eccentricity2 double \l0x000a: IGET  (r2 I:double) = (r5 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.eccentricity2 double \l0x000c: CMP_L  (r5 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osgeo.proj4j.datum.Ellipsoid.isEqual((r4 'this' I:org.osgeo.proj4j.datum.Ellipsoid A[IMMUTABLE_TYPE, THIS]), (r5 I:org.osgeo.proj4j.datum.Ellipsoid A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

