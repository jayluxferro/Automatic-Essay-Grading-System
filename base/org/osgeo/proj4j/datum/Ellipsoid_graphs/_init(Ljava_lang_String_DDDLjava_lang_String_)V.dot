digraph "CFG fororg.osgeo.proj4j.datum.Ellipsoid.\<init\>(Ljava\/lang\/String;DDDLjava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r4.equatorRadius = 1.0d\lr4.poleRadius = 1.0d\lr4.eccentricity = 1.0d\lr4.eccentricity2 = 1.0d\lr4.shortName = r5\lr4.name = r12\lr4.equatorRadius = r6\lr4.poleRadius = r8\l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|if ((r8 \> 0.0d ? 1 : (r8 == 0.0d ? 0 : \-1)) != 0) goto L_0x0028\l}"];
Node_2 [shape=record,label="{2\:\ 0x001b}"];
Node_3 [shape=record,label="{3\:\ 0x001d|if ((r10 \> 0.0d ? 1 : (r10 == 0.0d ? 0 : \-1)) == 0) goto L_0x0020\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020}"];
Node_5 [shape=record,label="{5\:\ 0x0027|throw new java.lang.IllegalArgumentException(\"One of poleRadius or reciprocalFlattening must be specified\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028}"];
Node_7 [shape=record,label="{7\:\ 0x002a|if ((r10 \> 0.0d ? 1 : (r10 == 0.0d ? 0 : \-1)) == 0) goto L_0x0043\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|double r8 = 1.0d \/ r10\lr4.eccentricity2 = (2.0d * r8) \- (r8 * r8)\lr4.poleRadius = r6 * java.lang.Math.sqrt(1.0d \- r4.eccentricity2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|r4.eccentricity2 = 1.0d \- ((r8 * r8) \/ (r6 * r6))\l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|r4.eccentricity = java.lang.Math.sqrt(r4.eccentricity2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osgeo.proj4j.datum.Ellipsoid.\<init\>((r4v0 'this' org.osgeo.proj4j.datum.Ellipsoid A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

