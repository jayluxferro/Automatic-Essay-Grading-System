digraph "CFG fororg.osgeo.proj4j.datum.Datum.isEqual(Lorg\/osgeo\/proj4j\/datum\/Datum;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.getTransformType():int type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r9 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.getTransformType():int type: VIRTUAL \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN  (r2 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IGET  (r0 I:org.osgeo.proj4j.datum.Ellipsoid) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.ellipsoid org.osgeo.proj4j.datum.Ellipsoid \l0x000e: INVOKE  (r0 I:double) = (r0 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.getEquatorRadius():double type: VIRTUAL \l0x0012: IGET  (r3 I:org.osgeo.proj4j.datum.Ellipsoid) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.ellipsoid org.osgeo.proj4j.datum.Ellipsoid \l0x0014: INVOKE  (r3 I:double) = (r3 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.getEquatorRadius():double type: VIRTUAL \l0x0018: CMP_L  (r0 I:int) = (r0 I:double), (r3 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IGET  (r0 I:org.osgeo.proj4j.datum.Ellipsoid) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.ellipsoid org.osgeo.proj4j.datum.Ellipsoid \l0x001e: INVOKE  (r0 I:double) = (r0 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.getEccentricitySquared():double type: VIRTUAL \l0x0022: IGET  (r3 I:org.osgeo.proj4j.datum.Ellipsoid) = (r9 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.ellipsoid org.osgeo.proj4j.datum.Ellipsoid \l0x0024: INVOKE  (r3 I:double) = (r3 I:org.osgeo.proj4j.datum.Ellipsoid) org.osgeo.proj4j.datum.Ellipsoid.getEccentricitySquared():double type: VIRTUAL \l0x0028: ARITH  (r0 I:double) = (r0 I:double) \- (r3 I:double) \l0x0029: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.abs(double):double type: STATIC \l0x002d: CONST  (r3 I:?[long, double]) = \l  (4452789957460213179(0x3dcb7cdfd9d7bdbb, double:5.0E\-11) ?[long, double])\l \l0x0032: CMP_L  (r0 I:int) = (r0 I:double), (r3 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0037 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: RETURN  (r2 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0037|0x0037: INVOKE  (r0 I:int) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.getTransformType():int type: VIRTUAL \l0x003b: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x003c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0048 \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: INVOKE  (r0 I:int) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.getTransformType():int type: VIRTUAL \l0x0043: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0047 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: RETURN  (r3 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: IGET  (r1 I:double[]) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.transform double[] \l0x004b: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:21:0x005e \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IGET  (r1 I:double[]) = (r8 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.transform double[] \l0x0050: AGET  (r4 I:?[long, double]) = (r1 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0052: IGET  (r1 I:double[]) = (r9 I:org.osgeo.proj4j.datum.Datum) org.osgeo.proj4j.datum.Datum.transform double[] \l0x0054: AGET  (r6 I:?[long, double]) = (r1 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0056: CMP_L  (r1 I:int) = (r4 I:double), (r6 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005b \l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|0x005a: RETURN  (r2 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|0x005b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|0x005e: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osgeo.proj4j.datum.Datum.isEqual((r8 'this' I:org.osgeo.proj4j.datum.Datum A[IMMUTABLE_TYPE, THIS]), (r9 I:org.osgeo.proj4j.datum.Datum A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_15;
}

