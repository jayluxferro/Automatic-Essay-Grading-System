digraph "CFG fororg.osgeo.proj4j.cmd.MetaCRSTestCmd.parseFlags([Ljava\/lang\/String;)V" {
subgraph cluster_Region_123378972 {
label = "R(2:0|(3:2|(1:6)|7))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r5.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_461235266 {
label = "LOOP:0: (3:2|(1:6)|7)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:7:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:7:0x0019\l|if (r1 \< r0) goto L_0x0004\l}"];
subgraph cluster_Region_704413626 {
label = "R(3:2|(1:6)|7)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = r5[r1]\l}"];
subgraph cluster_IfRegion_1684647624 {
label = "IF [B:3:0x000c, B:5:0x0014] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|ADDED_TO_REGION\l|if (r2.startsWith(\"\-\") == true) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|ADDED_TO_REGION\l|if (r2.equalsIgnoreCase(\"\-verbose\") == true) goto L_0x0016\l}"];
subgraph cluster_Region_2118651263 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016|r4.verbose = true\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0019|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:7:0x0019\l|r1++\l}"];
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ 0x000e}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001c|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0019|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0019|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void org.osgeo.proj4j.cmd.MetaCRSTestCmd.parseFlags((r4v0 'this' org.osgeo.proj4j.cmd.MetaCRSTestCmd A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_11[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_12[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_1;
Node_4 -> Node_5;
Node_9 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_7;
Node_12 -> Node_7;
}

