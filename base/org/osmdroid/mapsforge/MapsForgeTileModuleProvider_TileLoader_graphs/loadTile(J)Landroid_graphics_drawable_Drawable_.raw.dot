digraph "CFG fororg.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.loadTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugTileProviders():boolean type: INTERFACE \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x003c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"MapsForgeTileModuleProvider.TileLoader.loadTile(\" \l0x0012: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0015: INVOKE  (r2 I:java.lang.String) = (r12 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC \l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001c: CONST_STR  (r2 I:java.lang.String) =  \"): \" \l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"OsmDroid\" \l0x0027: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002c: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: CONST_STR  (r4 I:java.lang.String) =  \"tileSource.renderTile\" \l0x0031: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0038: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|0x003c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x003d|0x003d: IGET  (r2 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) = \l  (r11 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider$TileLoader)\l org.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.this$0 org.osmdroid.mapsforge.MapsForgeTileModuleProvider \l0x003f: IGET  (r2 I:org.osmdroid.mapsforge.MapsForgeTileSource) = (r2 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) org.osmdroid.mapsforge.MapsForgeTileModuleProvider.tileSource org.osmdroid.mapsforge.MapsForgeTileSource \l0x0041: INVOKE  (r2 I:android.graphics.drawable.Drawable) = \l  (r2 I:org.osmdroid.mapsforge.MapsForgeTileSource)\l  (r12 I:long)\l org.osmdroid.mapsforge.MapsForgeTileSource.renderTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0045|0x0045: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00cc \l}"];
Node_6 [shape=record,label="{6\:\ 0x0047|0x0047: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) android.graphics.drawable.BitmapDrawable \l}"];
Node_7 [shape=record,label="{7\:\ 0x0049|0x0049: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00cc \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: NEW_INSTANCE  (r3 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream \l0x004d: INVOKE  (r3 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.\<init\>():void type: DIRECT \l0x0050: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0051: CHECK_CAST  (r4 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r4 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  (r4 I:android.graphics.Bitmap) = (r4 I:android.graphics.drawable.BitmapDrawable) android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap type: VIRTUAL \l0x0057: SGET  (r5 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat \l0x0059: CONST  (r6 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) \l0x005b: INVOKE  \l  (r4 I:android.graphics.Bitmap)\l  (r5 I:android.graphics.Bitmap$CompressFormat)\l  (r6 I:int)\l  (r3 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL \l0x005e: INVOKE  (r4 I:byte[]) = (r3 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.toByteArray():byte[] type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0062|SYNTHETIC\lSplitter:B:9:0x0062\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0062\l|0x0062: INVOKE  (r3 I:java.io.ByteArrayOutputStream) java.io.ByteArrayOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0065 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0065|0x0065: INVOKE  (r3 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x0069: INVOKE  (r3 I:boolean) = (r3 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugTileProviders():boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:9:0x0062\l}"];
Node_13 [shape=record,label="{13\:\ 0x006d|0x006d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0099 \l}"];
Node_14 [shape=record,label="{14\:\ 0x006f|0x006f: CONST_STR  (r3 I:java.lang.String) =  \"OsmDroid\" \l0x0071: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0073: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0076: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0079: CONST_STR  (r0 I:java.lang.String) =  \"save tile \" \l0x007b: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007e: ARRAY_LENGTH  (r0 I:int) = (r4 I:?[]) \l0x007f: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0082: CONST_STR  (r0 I:java.lang.String) =  \" bytes to \" \l0x0084: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: IGET  (r0 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) = \l  (r11 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider$TileLoader)\l org.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.this$0 org.osmdroid.mapsforge.MapsForgeTileModuleProvider \l0x0089: IGET  (r0 I:org.osmdroid.mapsforge.MapsForgeTileSource) = (r0 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) org.osmdroid.mapsforge.MapsForgeTileModuleProvider.tileSource org.osmdroid.mapsforge.MapsForgeTileSource \l0x008b: INVOKE  (r0 I:java.lang.String) = \l  (r0 I:org.osmdroid.mapsforge.MapsForgeTileSource)\l  (r12 I:long)\l org.osmdroid.mapsforge.MapsForgeTileSource.getTileRelativeFilenameString(long):java.lang.String type: VIRTUAL \l0x008f: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0092: INVOKE  (r0 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0096: INVOKE  (r3 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0099|SYNTHETIC\lSplitter:B:15:0x0099\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0099\l|0x0099: NEW_INSTANCE  (r0 I:java.io.ByteArrayInputStream) =  java.io.ByteArrayInputStream A[Catch:\{ Exception \-\> 0x00b8 \}, TRY_ENTER]\l0x009b: INVOKE  (r0 I:java.io.ByteArrayInputStream), (r4 I:byte[]) java.io.ByteArrayInputStream.\<init\>(byte[]):void type: DIRECT A[Catch:\{ Exception \-\> 0x00b8 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x009e|SYNTHETIC\lSplitter:B:17:0x009e\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x009e\l|0x009e: IGET  (r1 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) = \l  (r11 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider$TileLoader)\l org.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.this$0 org.osmdroid.mapsforge.MapsForgeTileModuleProvider A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}, TRY_ENTER]\l0x00a0: IGET  (r5 I:org.osmdroid.tileprovider.modules.IFilesystemCache) = (r1 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) org.osmdroid.mapsforge.MapsForgeTileModuleProvider.tilewriter org.osmdroid.tileprovider.modules.IFilesystemCache A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a2: IGET  (r1 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) = \l  (r11 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider$TileLoader)\l org.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.this$0 org.osmdroid.mapsforge.MapsForgeTileModuleProvider A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a4: IGET  (r6 I:org.osmdroid.mapsforge.MapsForgeTileSource) = (r1 I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider) org.osmdroid.mapsforge.MapsForgeTileModuleProvider.tileSource org.osmdroid.mapsforge.MapsForgeTileSource A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a6: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a7: MOVE  (r7 I:?[long, double]) = (r12 I:?[long, double]) A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a8: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}]\l0x00a9: INVOKE  \l  (r5 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r6 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r7 I:long)\l  (r9 I:java.io.InputStream)\l  (r10 I:java.lang.Long)\l org.osmdroid.tileprovider.modules.IFilesystemCache.saveFile(org.osmdroid.tileprovider.tilesource.ITileSource, long, java.io.InputStream, java.lang.Long):boolean type: INTERFACE A[Catch:\{ Exception \-\> 0x00b2, all \-\> 0x00b0 \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x00ac|SYNTHETIC\lSplitter:B:19:0x00ac\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x00ac\l|0x00ac: INVOKE  (r0 I:java.io.ByteArrayInputStream) java.io.ByteArrayInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x00cc \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b0|ExcHandler: all null\lSplitter:B:17:0x009e\l|0x00b0: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x00b2|ExcHandler: Exception null\lSplitter:B:17:0x009e\l|0x00b2: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x00b3|0x00b3: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b5|ExcHandler: all null\lSplitter:B:30:0x00bd\l|0x00b5: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x00b6|0x00b6: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00b8|ExcHandler: Exception null\lSplitter:B:15:0x0099\l|0x00b8: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b9|0x00b9: CONST_STR  (r13 I:java.lang.String) =  \"OsmDroid\" \l0x00bb: CONST_STR  (r0 I:java.lang.String) =  \"forge error storing tile cache\" \l}"];
Node_30 [shape=record,label="{30\:\ 0x00bd|SYNTHETIC\lSplitter:B:30:0x00bd\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x00bd\l|0x00bd: INVOKE  \l  (r13 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r12 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x00b5 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x00c0|0x00c0: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00cc \l}"];
Node_33 [shape=record,label="{33\:\ 0x00c2|SYNTHETIC\lSplitter:B:33:0x00c2\l}"];
Node_34 [shape=record,label="{34\:\ ?|Splitter:B:33:0x00c2\l|0x00c2: INVOKE  (r1 I:java.io.ByteArrayInputStream) java.io.ByteArrayInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x00cc \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x00c6|0x00c6: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x00cb \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c8|SYNTHETIC\lSplitter:B:37:0x00c8\l}"];
Node_38 [shape=record,label="{38\:\ ?|Splitter:B:37:0x00c8\l|0x00c8: INVOKE  (r0 I:java.io.ByteArrayInputStream) java.io.ByteArrayInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x00cb \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x00cb|0x00cb: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:37:0x00c8\l}"];
Node_41 [shape=record,label="{41\:\ 0x00cc|0x00cc: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:19:0x00ac\l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.mapsforge.MapsForgeTileModuleProvider.TileLoader.loadTile((r11 'this' I:org.osmdroid.mapsforge.MapsForgeTileModuleProvider$TileLoader A[IMMUTABLE_TYPE, THIS]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_41;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_41;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_28;
Node_16 -> Node_17;
Node_16 -> Node_28;
Node_17 -> Node_18;
Node_17 -> Node_24;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_18 -> Node_24;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_19 -> Node_42;
Node_20 -> Node_42;
Node_20 -> Node_41;
Node_22 -> Node_36;
Node_24 -> Node_25;
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_26;
Node_31 -> Node_32;
Node_31 -> Node_26;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_41;
Node_33 -> Node_34;
Node_33 -> Node_42;
Node_34 -> Node_42;
Node_34 -> Node_41;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_37 -> Node_40;
Node_38 -> Node_39;
Node_38 -> Node_40;
Node_40 -> Node_39;
Node_42 -> Node_41;
}

