digraph "CFG fororg.osmdroid.mapsforge.MapsForgeTileSource.renderTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Tile) =  org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:int) = (r9 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC A[Catch:\{ all \-\> 0x0060 \}]\l0x0007: INVOKE  (r2 I:int) = (r9 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC A[Catch:\{ all \-\> 0x0060 \}]\l0x000b: INVOKE  (r9 I:int) = (r9 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC A[Catch:\{ all \-\> 0x0060 \}]\l0x000f: CAST  (r9 I:byte) = (byte) (r9 I:int) A[Catch:\{ all \-\> 0x0060 \}]\l0x0010: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0012: INVOKE  \l  (r1 I:org.mapsforge.core.model.Tile)\l  (r0 I:int)\l  (r2 I:int)\l  (r9 I:byte)\l  (r10 I:int)\l org.mapsforge.core.model.Tile.\<init\>(int, int, byte, int):void type: DIRECT A[Catch:\{ all \-\> 0x0060 \}]\l0x0015: IGET  (r9 I:org.mapsforge.map.model.DisplayModel) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.model org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0060 \}]\l0x0017: INVOKE  (r9 I:org.mapsforge.map.model.DisplayModel), (r10 I:int) org.mapsforge.map.model.DisplayModel.setFixedTileSize(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l0x001a: IGET  (r9 I:org.mapsforge.map.datastore.MultiMapDataStore) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.mapDatabase org.mapsforge.map.datastore.MultiMapDataStore A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: RETURN  (r9 I:android.graphics.drawable.Drawable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|SYNTHETIC\lSplitter:B:7:0x0021\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0021\l|0x0021: NEW_INSTANCE  (r9 I:org.mapsforge.map.layer.renderer.RendererJob) =  org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ Exception \-\> 0x0046 \}, TRY_ENTER]\l0x0023: IGET  (r2 I:org.mapsforge.map.datastore.MultiMapDataStore) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.mapDatabase org.mapsforge.map.datastore.MultiMapDataStore A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0025: IGET  (r3 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.theme org.mapsforge.map.rendertheme.rule.RenderThemeFuture A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0027: IGET  (r4 I:org.mapsforge.map.model.DisplayModel) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.model org.mapsforge.map.model.DisplayModel A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0029: IGET  (r5 I:float) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.scale float A[Catch:\{ Exception \-\> 0x0046 \}]\l0x002b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0046 \}]\l0x002c: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0046 \}]\l0x002d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0046 \}]\l0x002e: INVOKE  \l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l  (r1 I:org.mapsforge.core.model.Tile)\l  (r2 I:org.mapsforge.map.datastore.MapDataStore)\l  (r3 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture)\l  (r4 I:org.mapsforge.map.model.DisplayModel)\l  (r5 I:float)\l  (r6 I:boolean)\l  (r7 I:boolean)\l org.mapsforge.map.layer.renderer.RendererJob.\<init\>(org.mapsforge.core.model.Tile, org.mapsforge.map.datastore.MapDataStore, org.mapsforge.map.rendertheme.rule.RenderThemeFuture, org.mapsforge.map.model.DisplayModel, float, boolean, boolean):void type: DIRECT A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0031: IGET  (r0 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) = (r8 I:org.osmdroid.mapsforge.MapsForgeTileSource) org.osmdroid.mapsforge.MapsForgeTileSource.renderer org.mapsforge.map.layer.renderer.DatabaseRenderer A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0033: INVOKE  (r9 I:org.mapsforge.core.graphics.TileBitmap) = \l  (r0 I:org.mapsforge.map.layer.renderer.DatabaseRenderer)\l  (r9 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.DatabaseRenderer.executeJob(org.mapsforge.map.layer.renderer.RendererJob):org.mapsforge.core.graphics.TileBitmap type: VIRTUAL A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0037: CHECK_CAST  (r9 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) = (org.mapsforge.map.android.graphics.AndroidTileBitmap) (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0046 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004e A[Catch:\{ Exception \-\> 0x0046 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: NEW_INSTANCE  (r0 I:android.graphics.drawable.BitmapDrawable) =  android.graphics.drawable.BitmapDrawable A[Catch:\{ Exception \-\> 0x0046 \}]\l0x003d: INVOKE  (r9 I:android.graphics.Bitmap) = (r9 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.map.android.graphics.AndroidGraphicFactory.getBitmap(org.mapsforge.core.graphics.Bitmap):android.graphics.Bitmap type: STATIC A[Catch:\{ Exception \-\> 0x0046 \}]\l0x0041: INVOKE  \l  (r0 I:android.graphics.drawable.BitmapDrawable)\l  (r9 I:android.graphics.Bitmap)\l android.graphics.drawable.BitmapDrawable.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ Exception \-\> 0x0046 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|ExcHandler: Exception null\lSplitter:B:7:0x0021\l|0x0046: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x0049: CONST_STR  (r1 I:java.lang.String) =  \"###################### Mapsforge tile generation failed\" \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|SYNTHETIC\lSplitter:B:15:0x004b\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x004b\l|0x004b: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r9 I:java.lang.Throwable)\l android.util.Log.d(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: SGET  (r9 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.RGB_565 android.graphics.Bitmap$Config A[Catch:\{ all \-\> 0x0060 \}]\l0x0050: INVOKE  (r9 I:android.graphics.Bitmap) = \l  (r10 I:int)\l  (r10 I:int)\l  (r9 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC A[Catch:\{ all \-\> 0x0060 \}]\l0x0054: CONST  (r10 I:?[int, float, short, byte, char]) = \l  (\-256(0xffffffffffffff00, float:NaN) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0060 \}]\l0x0056: INVOKE  (r9 I:android.graphics.Bitmap), (r10 I:int) android.graphics.Bitmap.eraseColor(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l0x0059: NEW_INSTANCE  (r10 I:android.graphics.drawable.BitmapDrawable) =  android.graphics.drawable.BitmapDrawable A[Catch:\{ all \-\> 0x0060 \}]\l0x005b: INVOKE  \l  (r10 I:android.graphics.drawable.BitmapDrawable)\l  (r9 I:android.graphics.Bitmap)\l android.graphics.drawable.BitmapDrawable.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x005e|0x005e: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005f|0x005f: RETURN  (r10 I:android.graphics.drawable.Drawable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0060|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0060: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0061|0x0061: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|0x0062: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized android.graphics.drawable.Drawable org.osmdroid.mapsforge.MapsForgeTileSource.renderTile((r8 'this' I:org.osmdroid.mapsforge.MapsForgeTileSource A[IMMUTABLE_TYPE, THIS]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_2 -> Node_20;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

