digraph "CFG fororg.osmdroid.tileprovider.ReusableBitmapDrawable.isBitmapValid()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r1 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.mBitmapRecycled boolean A[Catch:\{ all \-\> 0x0007 \}, TRY_ENTER]\l0x0003: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0007 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0007 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: RETURN  (r0 I:boolean) A[Catch:\{ all \-\> 0x0007 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0007: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0007 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0007 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.tileprovider.ReusableBitmapDrawable.isBitmapValid((r1 'this' I:org.osmdroid.tileprovider.ReusableBitmapDrawable A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

