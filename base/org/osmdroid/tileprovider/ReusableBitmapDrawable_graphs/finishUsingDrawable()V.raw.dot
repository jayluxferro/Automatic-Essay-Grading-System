digraph "CFG fororg.osmdroid.tileprovider.ReusableBitmapDrawable.finishUsingDrawable()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:int) = (r2 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.mUsageRefCount int A[Catch:\{ all \-\> 0x0015 \}, TRY_ENTER]\l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) A[Catch:\{ all \-\> 0x0015 \}]\l0x0005: IPUT  \l  (r0 I:int)\l  (r2 I:org.osmdroid.tileprovider.ReusableBitmapDrawable)\l org.osmdroid.tileprovider.ReusableBitmapDrawable.mUsageRefCount int A[Catch:\{ all \-\> 0x0015 \}]\l0x0007: IGET  (r0 I:int) = (r2 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.mUsageRefCount int A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x000d A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: RETURN   A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x0015 \}]\l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"Unbalanced endUsingDrawable() called.\" A[Catch:\{ all \-\> 0x0015 \}]\l0x0011: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r1 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0015: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0015 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.ReusableBitmapDrawable.finishUsingDrawable((r2 'this' I:org.osmdroid.tileprovider.ReusableBitmapDrawable A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

