digraph "CFG fororg.osmdroid.tileprovider.MapTilePreCache.next()J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.util.MapTileAreaList) = (r3 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mTileAreas org.osmdroid.util.MapTileAreaList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.util.Iterator\<java.lang.Long\>) = (r3 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mTileIndices java.util.Iterator A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[long, double]) = (\-1 ?[long, double]) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN  (r1 I:long) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IGET  (r1 I:java.util.Iterator\<java.lang.Long\>) = (r3 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mTileIndices java.util.Iterator A[Catch:\{ all \-\> 0x0025 \}]\l0x0011: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0025 \}]\l0x0015: CHECK_CAST  (r1 I:java.lang.Long) = (java.lang.Long) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l0x0017: INVOKE  (r1 I:long) = (r1 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IGET  (r0 I:org.osmdroid.tileprovider.MapTileCache) = (r3 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mCache org.osmdroid.tileprovider.MapTileCache \l0x001e: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r0 I:org.osmdroid.tileprovider.MapTileCache), (r1 I:long) org.osmdroid.tileprovider.MapTileCache.getMapTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:0:0x0000 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: RETURN  (r1 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0025: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|SYNTHETIC\lSplitter:B:14:0x0026\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0026\l|0x0026: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|0x0027: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private long org.osmdroid.tileprovider.MapTilePreCache.next((r3 'this' I:org.osmdroid.tileprovider.MapTilePreCache A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_0;
Node_11 -> Node_12[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16;
Node_15 -> Node_13;
}

