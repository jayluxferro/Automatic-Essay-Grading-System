digraph "CFG fororg.osmdroid.tileprovider.MapTilePreCache.search(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r4 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mProviders java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0041 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|SYNTHETIC\lSplitter:B:4:0x0012\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0012\l|0x0012: INSTANCE_OF  (r2 I:boolean) = (r1 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.modules.MapTileDownloader A[Catch:\{ CantContinueException \-\> 0x003f \}, TRY_ENTER]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x0017: CHECK_CAST  (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = (org.osmdroid.tileprovider.modules.MapTileDownloader) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x0019: INVOKE  (r2 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.getTileSource():org.osmdroid.tileprovider.tilesource.ITileSource type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x001d: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: CHECK_CAST  (r2 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) = (org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x0023: INVOKE  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicy) = \l  (r2 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.getTileSourcePolicy():org.osmdroid.tileprovider.tilesource.TileSourcePolicy type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x0027: INVOKE  (r2 I:boolean) = \l  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicy)\l org.osmdroid.tileprovider.tilesource.TileSourcePolicy.acceptsPreventive():boolean type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002e A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: GOTO  \-\> 0x0006 A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|0x002e: INVOKE  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getTileLoader():org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x0032: INVOKE  (r1 I:android.graphics.drawable.Drawable) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l  (r5 I:long)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.loadTile(long):android.graphics.drawable.Drawable type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0039 A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: GOTO  \-\> 0x0006 A[Catch:\{ CantContinueException \-\> 0x003f \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: IGET  (r2 I:org.osmdroid.tileprovider.MapTileCache) = (r4 I:org.osmdroid.tileprovider.MapTilePreCache) org.osmdroid.tileprovider.MapTilePreCache.mCache org.osmdroid.tileprovider.MapTileCache A[Catch:\{ CantContinueException \-\> 0x003f \}]\l0x003b: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileCache)\l  (r5 I:long)\l  (r1 I:android.graphics.drawable.Drawable)\l org.osmdroid.tileprovider.MapTileCache.putTile(long, android.graphics.drawable.Drawable):void type: VIRTUAL A[Catch:\{ CantContinueException \-\> 0x003f \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lExcHandler: CantContinueException null\lSplitter:B:4:0x0012\l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.MapTilePreCache.search((r4 'this' I:org.osmdroid.tileprovider.MapTilePreCache A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_19;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_18 -> Node_1;
}

