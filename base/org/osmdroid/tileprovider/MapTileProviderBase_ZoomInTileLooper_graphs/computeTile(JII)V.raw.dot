digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.computeTile(JII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r5 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.mOldTileZoomLevel int \l0x0002: INVOKE  (r6 I:int) = (r3 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x0006: IGET  (r0 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.mDiff int \l0x0008: ARITH  (r6 I:int) = (r6 I:int) \>\> (r0 I:int) \l0x0009: INVOKE  (r0 I:int) = (r3 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x000d: IGET  (r1 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.mDiff int \l0x000f: ARITH  (r0 I:int) = (r0 I:int) \>\> (r1 I:int) \l0x0010: INVOKE  (r5 I:long) = (r5 I:int), (r6 I:int), (r0 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0014: IGET  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.this$0 org.osmdroid.tileprovider.MapTileProviderBase \l0x0016: IGET  (r0 I:org.osmdroid.tileprovider.MapTileCache) = (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) org.osmdroid.tileprovider.MapTileProviderBase.mTileCache org.osmdroid.tileprovider.MapTileCache \l0x0018: INVOKE  (r5 I:android.graphics.drawable.Drawable) = (r0 I:org.osmdroid.tileprovider.MapTileCache), (r5 I:long) org.osmdroid.tileprovider.MapTileCache.getMapTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l0x001c: INSTANCE_OF  (r6 I:boolean) = (r5 I:?[OBJECT, ARRAY]) android.graphics.drawable.BitmapDrawable \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: CHECK_CAST  (r5 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r5 I:?[OBJECT, ARRAY]) \l0x0022: IGET  (r6 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.mDiff int \l0x0024: INVOKE  (r5 I:android.graphics.Bitmap) = \l  (r5 I:android.graphics.drawable.BitmapDrawable)\l  (r3 I:long)\l  (r6 I:int)\l org.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom(android.graphics.drawable.BitmapDrawable, long, int):android.graphics.Bitmap type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0033 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: IGET  (r6 I:java.util.HashMap) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.mNewTiles java.util.HashMap \l0x002c: INVOKE  (r3 I:java.lang.Long) = (r3 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0030: INVOKE  \l  (r6 I:java.util.HashMap)\l  (r3 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBase.ZoomInTileLooper.computeTile((r2 'this' I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

