digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.findNextAppropriateProvider(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;)Lorg\/osmdroid\/tileprovider\/modules\/MapTileModuleProviderBase;" {
subgraph cluster_Region_748959046 {
label = "R(3:0|(3:1|(5:3|4|9|(1:13)|14)|(1:(1:19)))|19) | DECL_VAR: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|boolean r1 = false\lboolean r2 = false\lboolean r3 = false\l}"];
subgraph cluster_LoopRegion_969579232 {
label = "LOOP:0: (3:1|(5:3|4|9|(1:13)|14)|(1:(1:19)))";
node [shape=record,color=blue];
subgraph cluster_Region_1899087593 {
label = "R(3:1|(5:3|4|9|(1:13)|14)|(1:(1:19)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|LOOP_START\lPHI: r1 r2 r3 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:0:0x0000, B:20:0x0004] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v2 boolean) binds: [B:0:0x0000, B:20:0x0004] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:0:0x0000, B:20:0x0004] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0004\-\>B:20:0x0004\l|org.osmdroid.tileprovider.modules.MapTileModuleProviderBase r4 = r9.getNextProvider()\l}"];
subgraph cluster_IfRegion_2083705740 {
label = "IF [B:2:0x0008] THEN: R(5:3|4|9|(1:13)|14) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r4 != null) goto L_0x000a\l}"];
subgraph cluster_Region_475021801 {
label = "R(5:3|4|9|(1:13)|14)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|boolean r2 = true\lr1 = !getProviderExists(r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|boolean r3 = !useDataConnection() && r4.getUsesDataConnection()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|PHI: r3 \l  PHI: (r3v4 boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r5 = org.osmdroid.util.MapTileIndex.getZoom(r9.getMapTile())\l}"];
subgraph cluster_IfRegion_1660132074 {
label = "IF [B:10:0x002b, B:12:0x0031] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002b|ADDED_TO_REGION\l|if (r5 \<= r4.getMaximumZoomLevel()) goto L_0x002d\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|ADDED_TO_REGION\l|if (r5 \>= r4.getMinimumZoomLevel()) goto L_0x0034\l}"];
subgraph cluster_Region_103922686 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0034|r2 = false\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0035|PHI: r2 \l  PHI: (r2v4 boolean) = (r2v3 boolean), (r2v3 boolean), (r2v6 boolean) binds: [B:10:0x002b, B:12:0x0031, B:13:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|boolean r7 = r3\lr3 = r2\lr2 = r7\l}"];
}
}
subgraph cluster_Region_673068771 {
label = "R(1:(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_947153566 {
label = "IF [B:15:0x0038, B:16:0x003a, B:17:0x003c, B:18:0x003e] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0038|PHI: r1 r2 r3 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v4 boolean) binds: [B:2:0x0008, B:14:0x0035] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v5 boolean) binds: [B:2:0x0008, B:14:0x0035] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v5 boolean) binds: [B:2:0x0008, B:14:0x0035] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == null) goto L_0x0040\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|ADDED_TO_REGION\l|if (r1 == false) goto L_0x003c\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|ADDED_TO_REGION\l|if (r2 == false) goto L_0x003e\l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|ADDED_TO_REGION\l|if (r3 == false) goto L_0x0040\l}"];
subgraph cluster_Region_2034773168 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0040|RETURN\lEDGE_INSN: B:21:0x0040\-\>B:19:0x0040 ?: BREAK  \lEDGE_INSN: B:22:0x0040\-\>B:19:0x0040 ?: BREAK  \l|return r4\l}"];
}
}
}
}
}
Node_19 [shape=record,label="{19\:\ 0x0040|RETURN\lEDGE_INSN: B:21:0x0040\-\>B:19:0x0040 ?: BREAK  \lEDGE_INSN: B:22:0x0040\-\>B:19:0x0040 ?: BREAK  \l|return r4\l}"];
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0016}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001a|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001c}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002d}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0004|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0004\-\>B:20:0x0004\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0040|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:21:0x0040\-\>B:19:0x0040 ?: BREAK  \l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0040|SYNTHETIC\lEDGE_INSN: B:22:0x0040\-\>B:19:0x0040 ?: BREAK  \l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0004|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0004|SYNTHETIC\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0004|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected org.osmdroid.tileprovider.modules.MapTileModuleProviderBase org.osmdroid.tileprovider.MapTileProviderArray.findNextAppropriateProvider((r8v0 'this' org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r9v0 org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_16 -> Node_23[style=dashed];
Node_17 -> Node_18;
Node_17 -> Node_24[style=dashed];
Node_18 -> Node_22;
Node_18 -> Node_25[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_11 -> Node_12;
Node_20 -> Node_1;
Node_21 -> Node_19;
Node_22 -> Node_19;
Node_23 -> Node_20;
Node_24 -> Node_20;
Node_25 -> Node_20;
}

