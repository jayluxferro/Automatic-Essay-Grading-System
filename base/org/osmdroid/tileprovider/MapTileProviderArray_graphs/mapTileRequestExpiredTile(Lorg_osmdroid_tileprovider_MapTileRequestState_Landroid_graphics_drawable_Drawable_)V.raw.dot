digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.mapTileRequestExpiredTile(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTileProviderBase)\l  (r4 I:org.osmdroid.tileprovider.MapTileRequestState)\l  (r5 I:android.graphics.drawable.Drawable)\l org.osmdroid.tileprovider.MapTileProviderBase.mapTileRequestExpiredTile(org.osmdroid.tileprovider.MapTileRequestState, android.graphics.drawable.Drawable):void type: SUPER \l0x0003: IGET  (r5 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r3 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lSplitter:B:2:0x0006\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0006\l|0x0006: IGET  (r0 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r3 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l0x0008: INVOKE  (r1 I:long) = (r4 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l0x000c: INVOKE  (r1 I:java.lang.Long) = (r1 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x001d \}]\l0x0010: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x001d \}]\l0x0011: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x001d \}]\l0x0015: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r4 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.MapTileProviderArray.runAsyncNextProvider(org.osmdroid.tileprovider.MapTileRequestState):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|ExcHandler: all null\lSplitter:B:2:0x0006\l|0x001d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|SYNTHETIC\lSplitter:B:8:0x001e\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x001e\l|0x001e: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderArray.mapTileRequestExpiredTile((r3 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r4 I:org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_9 -> Node_7;
}

