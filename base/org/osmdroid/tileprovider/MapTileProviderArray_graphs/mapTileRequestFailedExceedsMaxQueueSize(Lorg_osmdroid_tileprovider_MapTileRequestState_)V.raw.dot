digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.mapTileRequestFailedExceedsMaxQueueSize(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase)\l  (r3 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.MapTileProviderBase.mapTileRequestFailed(org.osmdroid.tileprovider.MapTileRequestState):void type: SUPER \l0x0003: INVOKE  (r0 I:long) = (r3 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL \l0x0007: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r0 I:long)\l org.osmdroid.tileprovider.MapTileProviderArray.remove(long):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderArray.mapTileRequestFailedExceedsMaxQueueSize((r2 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r3 I:org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

