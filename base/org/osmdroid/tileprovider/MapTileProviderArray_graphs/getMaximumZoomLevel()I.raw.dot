digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.getMaximumZoomLevel()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileProviderList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileProviderList java.util.List A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}]\l0x0009: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}]\l0x0014: CHECK_CAST  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}]\l0x0016: INVOKE  (r4 I:int) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMaximumZoomLevel():int type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IF  (r4 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:4:0x000a A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  (r2 I:int) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMaximumZoomLevel():int type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l0x0020: GOTO  \-\> 0x000a A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: RETURN  (r2 I:int) A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0023: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int org.osmdroid.tileprovider.MapTileProviderArray.getMaximumZoomLevel((r5 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

