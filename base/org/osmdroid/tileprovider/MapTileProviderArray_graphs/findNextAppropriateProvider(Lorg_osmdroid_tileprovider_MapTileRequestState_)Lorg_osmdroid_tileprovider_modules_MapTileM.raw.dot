digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.findNextAppropriateProvider(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;)Lorg\/osmdroid\/tileprovider\/modules\/MapTileModuleProviderBase;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: INVOKE  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (r9 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getNextProvider():org.osmdroid.tileprovider.modules.MapTileModuleProviderBase type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0038 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = \l  (r8 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.MapTileProviderArray.getProviderExists(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):boolean type: VIRTUAL \l0x000e: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) ^ (r2 I:?[int, boolean, short, byte, char]) \l0x0010: INVOKE  (r3 I:boolean) = (r8 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.useDataConnection():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r3 I:boolean) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getUsesDataConnection():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  (r5 I:long) = (r9 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL \l0x0023: INVOKE  (r5 I:int) = (r5 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x0027: INVOKE  (r6 I:int) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMaximumZoomLevel():int type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:15:0x0035 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: INVOKE  (r6 I:int) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:14:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0036: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0040 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0004 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: RETURN  \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l \l}"];
MethodNode[shape=record,label="{protected org.osmdroid.tileprovider.modules.MapTileModuleProviderBase org.osmdroid.tileprovider.MapTileProviderArray.findNextAppropriateProvider((r8 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r9 I:org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_1;
Node_17 -> Node_18[style=dashed];
Node_18 -> Node_1;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_1;
Node_19 -> Node_20[style=dashed];
}

