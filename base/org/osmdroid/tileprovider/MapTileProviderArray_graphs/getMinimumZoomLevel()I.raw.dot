digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.getMinimumZoomLevel()I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) =  org.osmdroid.util.TileSystem.getMaximumZoomLevel():int type: STATIC \l0x0004: IGET  (r1 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileProviderList java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\lSplitter:B:2:0x0007\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0007\l|0x0007: IGET  (r2 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileProviderList java.util.List A[Catch:\{ all \-\> 0x0026 \}, TRY_ENTER]\l0x0009: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0024 A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0026 \}]\l0x0017: CHECK_CAST  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0026 \}]\l0x0019: INVOKE  (r4 I:int) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:4:0x000d A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: INVOKE  (r0 I:int) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL A[Catch:\{ all \-\> 0x0026 \}]\l0x0023: GOTO  \-\> 0x000d A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN  (r0 I:int) A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|ExcHandler: all null\lSplitter:B:2:0x0007\l|0x0026: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0026 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0026 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public int org.osmdroid.tileprovider.MapTileProviderArray.getMinimumZoomLevel((r5 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

