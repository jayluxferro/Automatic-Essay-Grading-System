digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.getMapTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.MapTileCache) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileCache org.osmdroid.tileprovider.MapTileCache \l0x0002: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r0 I:org.osmdroid.tileprovider.MapTileCache), (r6 I:long) org.osmdroid.tileprovider.MapTileCache.getMapTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r1 I:int) = (r0 I:android.graphics.drawable.Drawable) org.osmdroid.tileprovider.ExpirableBitmapDrawable.getState(android.graphics.drawable.Drawable):int type: STATIC \l0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  (r1 I:boolean) = \l  (r5 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r6 I:long)\l org.osmdroid.tileprovider.MapTileProviderArray.isDowngradedMode(long):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r1 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|SYNTHETIC\lSplitter:B:10:0x001a\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001a\l|0x001a: IGET  (r2 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map A[Catch:\{ all \-\> 0x0042 \}, TRY_ENTER]\l0x001c: INVOKE  (r3 I:java.lang.Long) = (r6 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0042 \}]\l0x0020: INVOKE  (r2 I:boolean) = (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0042 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0028 A[Catch:\{ all \-\> 0x0042 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0042 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: RETURN  (r0 I:android.graphics.drawable.Drawable) A[Catch:\{ all \-\> 0x0042 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: IGET  (r2 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map A[Catch:\{ all \-\> 0x0042 \}]\l0x002a: INVOKE  (r3 I:java.lang.Long) = (r6 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0042 \}]\l0x002e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0042 \}]\l0x002f: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0042 \}]\l0x0033: INVOKE  \l  (r2 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0042 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0042 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: NEW_INSTANCE  (r1 I:org.osmdroid.tileprovider.MapTileRequestState) =  org.osmdroid.tileprovider.MapTileRequestState \l0x0039: IGET  (r2 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = (r5 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mTileProviderList java.util.List \l0x003b: INVOKE  \l  (r1 I:org.osmdroid.tileprovider.MapTileRequestState)\l  (r6 I:long)\l  (r2 I:java.util.List)\l  (r5 I:org.osmdroid.tileprovider.IMapTileProviderCallback)\l org.osmdroid.tileprovider.MapTileRequestState.\<init\>(long, java.util.List, org.osmdroid.tileprovider.IMapTileProviderCallback):void type: DIRECT \l0x003e: INVOKE  \l  (r5 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r1 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.MapTileProviderArray.runAsyncNextProvider(org.osmdroid.tileprovider.MapTileRequestState):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|ExcHandler: all null\lSplitter:B:10:0x001a\l|0x0042: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|SYNTHETIC\lSplitter:B:20:0x0043\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0043\l|0x0043: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0042 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|0x0044: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.MapTileProviderArray.getMapTile((r5 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_19;
Node_21 -> Node_22;
Node_21 -> Node_19;
}

