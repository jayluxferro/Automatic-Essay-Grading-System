digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderArray.runAsyncNextProvider(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r4 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r5 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.MapTileProviderArray.findNextAppropriateProvider(org.osmdroid.tileprovider.MapTileRequestState):org.osmdroid.tileprovider.modules.MapTileModuleProviderBase type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l  (r5 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.loadMapTileAsync(org.osmdroid.tileprovider.MapTileRequestState):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r4 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|SYNTHETIC\lSplitter:B:6:0x000d\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x000d\l|0x000d: IGET  (r1 I:java.util.Map\<java.lang.Long, java.lang.Integer\>) = (r4 I:org.osmdroid.tileprovider.MapTileProviderArray) org.osmdroid.tileprovider.MapTileProviderArray.mWorking java.util.Map A[Catch:\{ all \-\> 0x0031 \}, TRY_ENTER]\l0x000f: INVOKE  (r2 I:long) = (r5 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL A[Catch:\{ all \-\> 0x0031 \}]\l0x0013: INVOKE  (r2 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0031 \}]\l0x0017: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0031 \}]\l0x001b: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INVOKE  (r0 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.MapTileProviderBase)\l  (r5 I:org.osmdroid.tileprovider.MapTileRequestState)\l org.osmdroid.tileprovider.MapTileProviderBase.mapTileRequestFailed(org.osmdroid.tileprovider.MapTileRequestState):void type: SUPER \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: INVOKE  (r0 I:long) = (r5 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL \l0x002d: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r0 I:long)\l org.osmdroid.tileprovider.MapTileProviderArray.remove(long):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|ExcHandler: all null\lSplitter:B:6:0x000d\l|0x0031: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|SYNTHETIC\lSplitter:B:16:0x0032\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x0032\l|0x0032: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.MapTileProviderArray.runAsyncNextProvider((r4 'this' I:org.osmdroid.tileprovider.MapTileProviderArray A[IMMUTABLE_TYPE, THIS]), (r5 I:org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_18;
Node_17 -> Node_15;
}

