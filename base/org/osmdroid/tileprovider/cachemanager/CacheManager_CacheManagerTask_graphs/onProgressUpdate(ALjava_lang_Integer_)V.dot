digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onProgressUpdate([Ljava\/lang\/Integer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = r6.mCallbacks.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:9:0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() == false) goto L_0x002d\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback r1 = r0.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|SYNTHETIC\lSplitter:B:4:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ Throwable \-\> 0x0028 \}\lSplitter:B:4:0x0013\l|r1.updateProgress(r7[0].intValue(), r7[1].intValue(), r6.mZoomMin, r6.mZoomMax)     \/\/ Catch:\{ Throwable \-\> 0x0028 \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|ExcHandler: Throwable (r1v3 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:4:0x0013\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|logFaultyCallback(r1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0006\-\>B:9:0x0006\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onProgressUpdate((r6v0 'this' org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.Integer[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_12;
Node_9 -> Node_1;
Node_10 -> Node_8;
Node_11 -> Node_9;
Node_12 -> Node_9;
}

