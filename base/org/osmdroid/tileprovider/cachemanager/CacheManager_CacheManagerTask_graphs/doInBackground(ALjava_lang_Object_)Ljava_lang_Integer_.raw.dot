digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.doInBackground([Ljava\/lang\/Object;)Ljava\/lang\/Integer;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r9 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mAction org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction \l0x0002: INVOKE  (r9 I:boolean) = \l  (r9 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerAction.preCheck():boolean type: INTERFACE \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: INVOKE  (r9 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: RETURN  (r9 I:java.lang.Integer) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r9 I:org.osmdroid.util.IterableWithSize\<java.lang.Long\>) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mTiles org.osmdroid.util.IterableWithSize \l0x0010: INVOKE  (r9 I:java.util.Iterator) = (r9 I:org.osmdroid.util.IterableWithSize) org.osmdroid.util.IterableWithSize.iterator():java.util.Iterator type: INTERFACE \l0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: INVOKE  (r3 I:boolean) = (r9 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x006a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: INVOKE  (r3 I:java.lang.Object) = (r9 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0020: CHECK_CAST  (r3 I:java.lang.Long) = (java.lang.Long) (r3 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  (r3 I:long) = (r3 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL \l0x0026: INVOKE  (r5 I:int) = (r3 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x002a: IGET  (r6 I:int) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMin int \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r5 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: IGET  (r6 I:int) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMax int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IGET  (r5 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mAction org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction \l0x0034: INVOKE  (r5 I:boolean) = \l  (r5 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction)\l  (r3 I:long)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerAction.tileAction(long):boolean type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003c \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003d: ARITH  (r2 I:int) = (r2 I:int) + (r5 I:int) \l0x003e: IGET  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mAction org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction \l0x0040: INVOKE  (r6 I:int) = \l  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerAction)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerAction.getProgressModulo():int type: INTERFACE \l0x0044: ARITH  (r6 I:int) = (r2 I:int) % (r6 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0046|0x0046: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0048|0x0048: INVOKE  (r6 I:boolean) = \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.isCancelled():boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0053 \l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: INVOKE  (r9 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: RETURN  (r9 I:java.lang.Integer) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|0x0053: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0054: NEW_ARRAY  (r6 I:java.lang.Integer[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: java.lang.Integer[] \l0x0056: INVOKE  (r7 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x005a: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[OBJECT, ARRAY])\l \l0x005c: INVOKE  (r3 I:int) = (r3 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x0060: INVOKE  (r3 I:java.lang.Integer) = (r3 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x0064: APUT  \l  (r6 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:?[OBJECT, ARRAY])\l \l0x0066: INVOKE  \l  (r8 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l  (r6 I:java.lang.Object[])\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.publishProgress(java.lang.Object[]):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|0x006a: INVOKE  (r9 I:java.lang.Integer) = (r1 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: RETURN  (r9 I:java.lang.Integer) \l}"];
MethodNode[shape=record,label="{protected java.lang.Integer org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.doInBackground((r8 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_5;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_5;
Node_21 -> Node_22;
}

