digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onProgressUpdate([Ljava\/lang\/Integer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.ArrayList\<org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback\>) = \l  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mCallbacks java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002d \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback) = (org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback) (r1 I:?[OBJECT, ARRAY]) \l0x0012: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|SYNTHETIC\lSplitter:B:4:0x0013\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0013\l|0x0013: AGET  (r2 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) A[Catch:\{ Throwable \-\> 0x0028 \}, TRY_ENTER]\l0x0015: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x0019: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x001a: AGET  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x001c: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x0020: IGET  (r4 I:int) = \l  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMin int A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x0022: IGET  (r5 I:int) = \l  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMax int A[Catch:\{ Throwable \-\> 0x0028 \}]\l0x0024: INVOKE  \l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerCallback.updateProgress(int, int, int, int):void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0028 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|ExcHandler: Throwable null\lSplitter:B:4:0x0013\l|0x0028: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: INVOKE  \l  (r6 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l  (r1 I:java.lang.Throwable)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.logFaultyCallback(java.lang.Throwable):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onProgressUpdate((r6 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Integer[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

