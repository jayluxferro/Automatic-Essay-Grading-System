digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onPreExecute()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.util.IterableWithSize\<java.lang.Long\>) = \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mTiles org.osmdroid.util.IterableWithSize \l0x0002: INVOKE  (r0 I:int) = (r0 I:org.osmdroid.util.IterableWithSize) org.osmdroid.util.IterableWithSize.size():int type: INTERFACE \l0x0006: IGET  (r1 I:java.util.ArrayList\<org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback\>) = \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mCallbacks java.util.ArrayList \l0x0008: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r2 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback) = (org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|SYNTHETIC\lSplitter:B:4:0x0018\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0018\l|0x0018: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback)\l  (r0 I:int)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerCallback.setPossibleTilesInArea(int):void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0029 \}, TRY_ENTER]\l0x001b: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerCallback.downloadStarted():void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0029 \}]\l0x001e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Throwable \-\> 0x0029 \}]\l0x001f: IGET  (r4 I:int) = \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMin int A[Catch:\{ Throwable \-\> 0x0029 \}]\l0x0021: IGET  (r5 I:int) = \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMin int A[Catch:\{ Throwable \-\> 0x0029 \}]\l0x0023: IGET  (r6 I:int) = \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.mZoomMax int A[Catch:\{ Throwable \-\> 0x0029 \}]\l0x0025: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerCallback)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerCallback.updateProgress(int, int, int, int):void type: INTERFACE A[Catch:\{ Throwable \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|ExcHandler: Throwable null\lSplitter:B:4:0x0018\l|0x0029: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  \l  (r7 I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask)\l  (r2 I:java.lang.Throwable)\l org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.logFaultyCallback(java.lang.Throwable):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.cachemanager.CacheManager.CacheManagerTask.onPreExecute((r7 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_5 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

