digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.\<init\>(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;Lorg\/osmdroid\/tileprovider\/modules\/IFilesystemCache;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:org.osmdroid.tileprovider.modules.TileDownloader) =  org.osmdroid.tileprovider.modules.TileDownloader \l0x0005: INVOKE  (r0 I:org.osmdroid.tileprovider.modules.TileDownloader) org.osmdroid.tileprovider.modules.TileDownloader.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:org.osmdroid.tileprovider.modules.TileDownloader)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mTileDownloader org.osmdroid.tileprovider.modules.TileDownloader \l0x000a: NEW_INSTANCE  (r0 I:java.util.HashSet) =  java.util.HashSet \l0x000c: INVOKE  (r0 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x000f: IPUT  \l  (r0 I:java.util.Set\<org.osmdroid.tileprovider.cachemanager.CacheManager$CacheManagerTask\>)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mPendingTasks java.util.Set \l0x0011: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0012: IPUT  \l  (r0 I:boolean)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.verifyCancel boolean \l0x0014: IPUT  \l  (r2 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mTileSource org.osmdroid.tileprovider.tilesource.ITileSource \l0x0016: IPUT  \l  (r3 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mTileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l0x0018: IPUT  \l  (r4 I:int)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mMinZoomLevel int \l0x001a: IPUT  \l  (r5 I:int)\l  (r1 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l org.osmdroid.tileprovider.cachemanager.CacheManager.mMaxZoomLevel int \l0x001c: INSTANCE_OF  (r3 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase \l}"];
Node_1 [shape=record,label="{1\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0020|0x0020: CHECK_CAST  (r2 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) = (org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) (r2 I:?[OBJECT, ARRAY]) \l0x0022: INVOKE  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicy) = \l  (r2 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.getTileSourcePolicy():org.osmdroid.tileprovider.tilesource.TileSourcePolicy type: VIRTUAL \l0x0026: INVOKE  (r2 I:boolean) = \l  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicy)\l org.osmdroid.tileprovider.tilesource.TileSourcePolicy.acceptsBulkDownload():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: NEW_INSTANCE  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicyException) =  org.osmdroid.tileprovider.tilesource.TileSourcePolicyException \l0x002f: CONST_STR  (r3 I:java.lang.String) =  \"This online tile source doesn't support bulk download\" \l0x0031: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.tilesource.TileSourcePolicyException)\l  (r3 I:java.lang.String)\l org.osmdroid.tileprovider.tilesource.TileSourcePolicyException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.cachemanager.CacheManager.\<init\>((r1 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager A[IMMUTABLE_TYPE, THIS]), (r2 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.osmdroid.tileprovider.modules.IFilesystemCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.tilesource.TileSourcePolicyException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
}

