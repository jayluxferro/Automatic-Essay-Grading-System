digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.getTilesCoverage(Ljava\/util\/ArrayList;I)Ljava\/util\/Collection;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r33 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: NEW_INSTANCE  (r1 I:java.util.HashSet) =  java.util.HashSet \l0x0004: INVOKE  (r1 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0007: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: ARITH  (r3 I:int) = (r2 I:int) \<\< (r0 I:int) \l0x000a: INVOKE  (r4 I:java.util.Iterator) = (r32 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l0x000e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: INVOKE  (r7 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0243 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r7 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001a: CHECK_CAST  (r7 I:org.osmdroid.util.GeoPoint) = (org.osmdroid.util.GeoPoint) (r7 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r8 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0020: INVOKE  (r8 I:double) = (r8 I:double), (r0 I:int) org.osmdroid.util.TileSystem.GroundResolution(double, int):double type: STATIC \l0x0024: INVOKE  (r10 I:int) = (r1 I:java.util.Set) java.util.Set.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0028|0x0028: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x01d8 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x01d2 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r12 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0030: INVOKE  (r14 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0034: ARITH  (r12 I:double) = (r12 I:double) \- (r14 I:double) \l0x0035: INVOKE  (r14 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0039: INVOKE  (r16 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x003d: ARITH  (r14 I:double) = (r14 I:double) \- (r16 I:double) \l0x003f: ARITH  (r12 I:double) = (r12 I:double) \/ (r14 I:double) \l0x0040: INVOKE  (r14 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0044: INVOKE  (r16 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0048: CMP_L  (r10 I:int) = (r14 I:double), (r16 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004a|0x004a: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0057 \l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|0x004c: CONST  (r14 I:?[long, double]) = \l  (4609753056924675352(0x3ff921fb54442d18, double:1.5707963267948966) ?[long, double])\l \l0x0051: INVOKE  (r12 I:double) = (r12 I:double) java.lang.Math.atan(double):double type: STATIC \l0x0055: ARITH  (r14 I:double) = (r14 I:double) \- (r12 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0057|0x0057: CONST  (r14 I:?[long, double]) = \l  (4616991696741409234(0x4012d97c7f3321d2, double:4.71238898038469) ?[long, double])\l \l0x005c: INVOKE  (r12 I:double) = (r12 I:double) java.lang.Math.atan(double):double type: STATIC \l0x0060: ARITH  (r14 I:double) = (r14 I:double) \- (r12 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0061|0x0061: NEW_INSTANCE  (r10 I:org.osmdroid.util.GeoPoint) =  org.osmdroid.util.GeoPoint \l0x0063: INVOKE  (r12 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0067: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0069: INVOKE  (r2 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x006d: INVOKE  \l  (r10 I:org.osmdroid.util.GeoPoint)\l  (r12 I:double)\l  (r2 I:double)\l org.osmdroid.util.GeoPoint.\<init\>(double, double):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0070|0x0070: INVOKE  (r2 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0074: INVOKE  (r12 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0078: CMP_L  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0088 \l}"];
Node_13 [shape=record,label="{13\:\ 0x007c|0x007c: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0080: INVOKE  (r12 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0084: CMP_G  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0086|0x0086: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:19:0x00a0 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0088|0x0088: INVOKE  (r2 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x008c: INVOKE  (r12 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0090: CMP_G  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0092|0x0092: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:48:0x01cd \l}"];
Node_17 [shape=record,label="{17\:\ 0x0094|0x0094: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0098: INVOKE  (r12 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x009c: CMP_L  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x009e|0x009e: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:48:0x01cd \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a0|0x00a0: INVOKE  (r2 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00a4: INVOKE  (r12 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00a8: CMP_L  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00aa|0x00aa: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:23:0x00b8 \l}"];
Node_21 [shape=record,label="{21\:\ 0x00ac|0x00ac: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00b0: INVOKE  (r12 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00b4: CMP_G  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b6|0x00b6: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:27:0x00d0 \l}"];
Node_23 [shape=record,label="{23\:\ 0x00b8|0x00b8: INVOKE  (r2 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00bc: INVOKE  (r12 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00c0: CMP_G  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c2|0x00c2: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:48:0x01cd \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c4|0x00c4: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00c8: INVOKE  (r12 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00cc: CMP_L  (r2 I:int) = (r2 I:double), (r12 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00ce|0x00ce: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:48:0x01cd \l}"];
Node_27 [shape=record,label="{27\:\ 0x00d0|0x00d0: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x00d4: CONST  (r12 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x00d9: ARITH  (r2 I:double) = (r2 I:double) * (r12 I:double) \l0x00db: CONST  (r16 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x00e0: ARITH  (r2 I:double) = (r2 I:double) \/ (r16 I:double) \l0x00e2: INVOKE  (r19 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00e6: ARITH  (r19 I:double) = (r19 I:double) * (r12 I:double) \l0x00e8: ARITH  (r19 I:double) = (r19 I:double) \/ (r16 I:double) \l0x00ea: INVOKE  (r21 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00ee: CONST  (r23 I:?[long, double]) = \l  (4708606483430899712(0x415854a640000000, double:6378137.0) ?[long, double])\l \l0x00f3: ARITH  (r23 I:double) = (r8 I:double) \/ (r23 I:double) \l0x00f5: INVOKE  (r25 I:double) = (r23 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00f9: ARITH  (r21 I:double) = (r21 I:double) * (r25 I:double) \l0x00fb: INVOKE  (r25 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00ff: INVOKE  (r27 I:double) = (r23 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0103: ARITH  (r25 I:double) = (r25 I:double) * (r27 I:double) \l0x0105: INVOKE  (r27 I:double) = (r14 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0109: ARITH  (r25 I:double) = (r25 I:double) * (r27 I:double) \l0x010b: ARITH  (r21 I:double) = (r21 I:double) + (r25 I:double) \l0x010d: INVOKE  (r21 I:double) = (r21 I:double) java.lang.Math.asin(double):double type: STATIC \l0x0111: INVOKE  (r25 I:double) = (r14 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0115: INVOKE  (r27 I:double) = (r23 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0119: ARITH  (r25 I:double) = (r25 I:double) * (r27 I:double) \l0x011b: INVOKE  (r27 I:double) = (r2 I:double) java.lang.Math.cos(double):double type: STATIC \l0x011f: ARITH  (r11 I:double) = (r25 I:double) * (r27 I:double) \l0x0121: INVOKE  (r23 I:double) = (r23 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0125: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0129: INVOKE  (r25 I:double) = (r21 I:double) java.lang.Math.sin(double):double type: STATIC \l0x012d: ARITH  (r2 I:double) = (r2 I:double) * (r25 I:double) \l0x012f: ARITH  (r2 I:double) = (r23 I:double) \- (r2 I:double) \l0x0131: INVOKE  (r2 I:double) = (r11 I:double), (r2 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x0135: ARITH  (r19 I:double) = (r19 I:double) + (r2 I:double) \l0x0137: ARITH  (r21 I:double) = (r21 I:double) * (r16 I:double) \l0x0139: CONST  (r2 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x013e: ARITH  (r11 I:double) = (r21 I:double) \/ (r2 I:double) \l0x0140: INVOKE  (r10 I:org.osmdroid.util.GeoPoint), (r11 I:double) org.osmdroid.util.GeoPoint.setLatitude(double):void type: VIRTUAL \l0x0143: ARITH  (r19 I:double) = (r19 I:double) * (r16 I:double) \l0x0145: ARITH  (r2 I:double) = (r19 I:double) \/ (r2 I:double) \l0x0147: INVOKE  (r10 I:org.osmdroid.util.GeoPoint), (r2 I:double) org.osmdroid.util.GeoPoint.setLongitude(double):void type: VIRTUAL \l0x014a: NEW_INSTANCE  (r2 I:android.graphics.Point) =  android.graphics.Point \l0x014c: INVOKE  (r3 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x0150: INVOKE  (r11 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0154: INVOKE  (r3 I:int) = \l  (r3 I:org.osmdroid.util.TileSystem)\l  (r11 I:double)\l  (r0 I:int)\l org.osmdroid.util.TileSystem.getTileXFromLongitude(double, int):int type: VIRTUAL \l0x0158: INVOKE  (r11 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x015c: INVOKE  (r12 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0160: INVOKE  (r11 I:int) = \l  (r11 I:org.osmdroid.util.TileSystem)\l  (r12 I:double)\l  (r0 I:int)\l org.osmdroid.util.TileSystem.getTileYFromLatitude(double, int):int type: VIRTUAL \l0x0164: INVOKE  (r2 I:android.graphics.Point), (r3 I:int), (r11 I:int) android.graphics.Point.\<init\>(int, int):void type: DIRECT \l0x0167: INVOKE  (r3 I:boolean) = (r2 I:android.graphics.Point), (r6 I:java.lang.Object) android.graphics.Point.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x016b|0x016b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x01c3 \l}"];
Node_29 [shape=record,label="{29\:\ 0x016d|0x016d: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l}"];
Node_30 [shape=record,label="{30\:\ 0x016f|0x016f: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:32:0x0173 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0171|0x0171: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0173|0x0173: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0175: NEG  (r11 I:int) = (r3 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0176|0x0176: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0178|0x0178: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:36:0x017c \l}"];
Node_35 [shape=record,label="{35\:\ 0x017a|0x017a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_36 [shape=record,label="{36\:\ 0x017c|0x017c: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x017e: NEG  (r3 I:int) = (r3 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x017f|0x017f: IGET  (r6 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0181: ARITH  (r6 I:int) = (r6 I:int) + (r11 I:int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0182|0x0182: IGET  (r12 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0184: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0185: ARITH  (r12 I:int) = (r12 I:int) + (r13 I:int) \l0x0186: ARITH  (r12 I:int) = (r12 I:int) + (r11 I:int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0187|0x0187: IF  (r6 I:?[int, byte, short, char]) \> (r12 I:?[int, byte, short, char])  \-\> B:45:0x01ba \l}"];
Node_40 [shape=record,label="{40\:\ 0x0189|0x0189: IGET  (r12 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x018b: ARITH  (r12 I:int) = (r12 I:int) + (r3 I:int) \l0x018c: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x018e|0x018e: IGET  (r4 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x0190: ARITH  (r4 I:int) = (r4 I:int) + (r13 I:int) \l0x0191: ARITH  (r4 I:int) = (r4 I:int) + (r3 I:int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0192|0x0192: IF  (r12 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:44:0x01b1 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0194|0x0194: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0196: INVOKE  (r13 I:int) = (r12 I:int), (r4 I:int) org.osmdroid.util.MyMath.mod(int, int):int type: STATIC \l0x019a: MOVE  (r31 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x019c: INVOKE  (r2 I:int) = (r6 I:int), (r4 I:int) org.osmdroid.util.MyMath.mod(int, int):int type: STATIC \l0x01a0: INVOKE  (r16 I:long) = (r0 I:int), (r2 I:int), (r13 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x01a4: INVOKE  (r2 I:java.lang.Long) = (r16 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x01a8: INVOKE  (r1 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l0x01ab: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l0x01ad: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r31 I:?[OBJECT, ARRAY]) \l0x01af: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x01b1|0x01b1: MOVE  (r31 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x01b3: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01b5: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x01b7: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x01ba|0x01ba: MOVE  (r31 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x01bc: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01be: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c0: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r31 I:?[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x01c3|0x01c3: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01c5: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_47 [shape=record,label="{47\:\ 0x01c7|0x01c7: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c9: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x01cd|0x01cd: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01cf: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_49 [shape=record,label="{49\:\ 0x01d2|0x01d2: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01d4: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_50 [shape=record,label="{50\:\ 0x01d5|0x01d5: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x01d6: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x01d8|0x01d8: MOVE  (r30 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01da: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01db: NEW_INSTANCE  (r2 I:android.graphics.Point) =  android.graphics.Point \l0x01dd: INVOKE  (r3 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x01e1: INVOKE  (r5 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x01e5: INVOKE  (r3 I:int) = \l  (r3 I:org.osmdroid.util.TileSystem)\l  (r5 I:double)\l  (r0 I:int)\l org.osmdroid.util.TileSystem.getTileXFromLongitude(double, int):int type: VIRTUAL \l0x01e9: INVOKE  (r5 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x01ed: INVOKE  (r8 I:double) = (r7 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x01f1: INVOKE  (r5 I:int) = \l  (r5 I:org.osmdroid.util.TileSystem)\l  (r8 I:double)\l  (r0 I:int)\l org.osmdroid.util.TileSystem.getTileYFromLatitude(double, int):int type: VIRTUAL \l0x01f5: INVOKE  (r2 I:android.graphics.Point), (r3 I:int), (r5 I:int) android.graphics.Point.\<init\>(int, int):void type: DIRECT \l0x01f8: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l}"];
Node_52 [shape=record,label="{52\:\ 0x01fa|0x01fa: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:54:0x01fe \l}"];
Node_53 [shape=record,label="{53\:\ 0x01fc|0x01fc: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_54 [shape=record,label="{54\:\ 0x01fe|0x01fe: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0200: NEG  (r11 I:int) = (r3 I:int) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0201|0x0201: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l}"];
Node_56 [shape=record,label="{56\:\ 0x0203|0x0203: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:58:0x0208 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0205|0x0205: CONST  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_58 [shape=record,label="{58\:\ 0x0208|0x0208: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x020a: NEG  (r3 I:int) = (r3 I:int) \l0x020b: MOVE  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_59 [shape=record,label="{59\:\ 0x020d|0x020d: IGET  (r3 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x020f: ARITH  (r3 I:int) = (r3 I:int) + (r11 I:int) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0210|0x0210: IGET  (r5 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0212: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0213: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x0214: ARITH  (r5 I:int) = (r5 I:int) + (r11 I:int) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0215|0x0215: IF  (r3 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:67:0x023b \l}"];
Node_62 [shape=record,label="{62\:\ 0x0217|0x0217: IGET  (r5 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x0219: ARITH  (r5 I:int) = (r5 I:int) + (r29 I:int) \l}"];
Node_63 [shape=record,label="{63\:\ 0x021b|0x021b: IGET  (r8 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x021d: ARITH  (r8 I:int) = (r8 I:int) + (r6 I:int) \l0x021e: ARITH  (r8 I:int) = (r8 I:int) + (r29 I:int) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0220|0x0220: IF  (r5 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char])  \-\> B:66:0x0238 \l}"];
Node_65 [shape=record,label="{65\:\ 0x0222|0x0222: INVOKE  (r8 I:int) = (r5 I:int), (r4 I:int) org.osmdroid.util.MyMath.mod(int, int):int type: STATIC \l0x0226: INVOKE  (r9 I:int) = (r3 I:int), (r4 I:int) org.osmdroid.util.MyMath.mod(int, int):int type: STATIC \l0x022a: INVOKE  (r8 I:long) = (r0 I:int), (r9 I:int), (r8 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x022e: INVOKE  (r8 I:java.lang.Long) = (r8 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0232: INVOKE  (r1 I:java.util.Set), (r8 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l0x0235: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_66 [shape=record,label="{66\:\ 0x0238|0x0238: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_67 [shape=record,label="{67\:\ 0x023b|0x023b: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x023c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x023d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x023e: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l0x0240: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0243|0x0243: RETURN  (r1 I:java.util.Collection\<java.lang.Long\>) \l}"];
MethodNode[shape=record,label="{public static java.util.Collection\<java.lang.Long\> org.osmdroid.tileprovider.cachemanager.CacheManager.getTilesCoverage((r32 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Lorg\/osmdroid\/util\/GeoPoint;, \>;I), Ljava\/util\/Collection\<, Ljava\/lang\/Long;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_68;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_51;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_49;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_48;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_48;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_48;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_48;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_46;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_45;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_41;
Node_44 -> Node_38;
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_11;
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_67;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_59;
Node_58 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_67;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_63;
Node_66 -> Node_60;
Node_67 -> Node_1;
}

