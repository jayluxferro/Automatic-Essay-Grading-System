digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.\<init\>(Lorg\/osmdroid\/tileprovider\/MapTileProviderBase;Lorg\/osmdroid\/tileprovider\/modules\/IFilesystemCache;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (r1 I:org.osmdroid.tileprovider.MapTileProviderBase) org.osmdroid.tileprovider.MapTileProviderBase.getTileSource():org.osmdroid.tileprovider.tilesource.ITileSource type: VIRTUAL \l0x0004: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.cachemanager.CacheManager)\l  (r1 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r2 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r3 I:int)\l  (r4 I:int)\l org.osmdroid.tileprovider.cachemanager.CacheManager.\<init\>(org.osmdroid.tileprovider.tilesource.ITileSource, org.osmdroid.tileprovider.modules.IFilesystemCache, int, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.cachemanager.CacheManager.\<init\>((r0 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager A[IMMUTABLE_TYPE, THIS]), (r1 I:org.osmdroid.tileprovider.MapTileProviderBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:org.osmdroid.tileprovider.modules.IFilesystemCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.tilesource.TileSourcePolicyException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

