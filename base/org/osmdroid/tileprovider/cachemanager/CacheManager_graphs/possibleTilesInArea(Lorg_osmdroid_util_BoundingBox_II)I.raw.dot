digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.possibleTilesInArea(Lorg\/osmdroid\/util\/BoundingBox;II)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:org.osmdroid.util.IterableWithSize) = \l  (r1 I:org.osmdroid.util.BoundingBox)\l  (r2 I:int)\l  (r3 I:int)\l org.osmdroid.tileprovider.cachemanager.CacheManager.getTilesCoverageIterable(org.osmdroid.util.BoundingBox, int, int):org.osmdroid.util.IterableWithSize type: STATIC \l0x0004: INVOKE  (r1 I:int) = (r1 I:org.osmdroid.util.IterableWithSize) org.osmdroid.util.IterableWithSize.size():int type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int org.osmdroid.tileprovider.cachemanager.CacheManager.possibleTilesInArea((r0 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager A[IMMUTABLE_TYPE, THIS]), (r1 I:org.osmdroid.util.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

