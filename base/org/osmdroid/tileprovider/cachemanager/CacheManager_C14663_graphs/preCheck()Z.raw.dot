digraph "CFG fororg.osmdroid.tileprovider.cachemanager.CacheManager.3.preCheck()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.cachemanager.CacheManager) = \l  (r2 I:org.osmdroid.tileprovider.cachemanager.CacheManager$3)\l org.osmdroid.tileprovider.cachemanager.CacheManager.3.this$0 org.osmdroid.tileprovider.cachemanager.CacheManager \l0x0002: IGET  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (r0 I:org.osmdroid.tileprovider.cachemanager.CacheManager) org.osmdroid.tileprovider.cachemanager.CacheManager.mTileSource org.osmdroid.tileprovider.tilesource.ITileSource \l0x0004: INSTANCE_OF  (r0 I:boolean) = (r0 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"TileSource is not an online tile source\" \l0x000e: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x0011: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.tileprovider.cachemanager.CacheManager.3.preCheck((r2 'this' I:org.osmdroid.tileprovider.cachemanager.CacheManager$3 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

