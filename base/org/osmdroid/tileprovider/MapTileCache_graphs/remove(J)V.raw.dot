digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.remove(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x0005: INVOKE  (r2 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0025 \}]\l0x0009: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.HashMap), (r2 I:java.lang.Object) java.util.HashMap.remove(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l0x000d: CHECK_CAST  (r1 I:android.graphics.drawable.Drawable) = (android.graphics.drawable.Drawable) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  (r0 I:org.osmdroid.tileprovider.MapTileCache$TileRemovedListener) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getTileRemovedListener():org.osmdroid.tileprovider.MapTileCache$TileRemovedListener type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: INVOKE  (r0 I:org.osmdroid.tileprovider.MapTileCache$TileRemovedListener) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getTileRemovedListener():org.osmdroid.tileprovider.MapTileCache$TileRemovedListener type: VIRTUAL \l0x001a: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.MapTileCache$TileRemovedListener)\l  (r4 I:long)\l org.osmdroid.tileprovider.MapTileCache.TileRemovedListener.onTileRemoved(long):void type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  (r4 I:org.osmdroid.tileprovider.BitmapPool) =  org.osmdroid.tileprovider.BitmapPool.getInstance():org.osmdroid.tileprovider.BitmapPool type: STATIC \l0x0021: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.BitmapPool)\l  (r1 I:android.graphics.drawable.Drawable)\l org.osmdroid.tileprovider.BitmapPool.asyncRecycle(android.graphics.drawable.Drawable):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0025: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|SYNTHETIC\lSplitter:B:11:0x0026\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0026\l|0x0026: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.MapTileCache.remove((r3 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_10;
Node_12 -> Node_13;
Node_12 -> Node_10;
}

