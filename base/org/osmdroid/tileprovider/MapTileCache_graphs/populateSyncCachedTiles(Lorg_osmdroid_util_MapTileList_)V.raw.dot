digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.populateSyncCachedTiles(Lorg\/osmdroid\/util\/MapTileList;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r4 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r4 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap A[Catch:\{ all \-\> 0x002f \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:int) = (r1 I:java.util.HashMap) java.util.HashMap.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x0009: INVOKE  (r5 I:org.osmdroid.util.MapTileList), (r1 I:int) org.osmdroid.util.MapTileList.ensureCapacity(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x000c: INVOKE  (r5 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.clear():void type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x000f: IGET  (r1 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r4 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap A[Catch:\{ all \-\> 0x002f \}]\l0x0011: INVOKE  (r1 I:java.util.Set) = (r1 I:java.util.HashMap) java.util.HashMap.keySet():java.util.Set type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x0015: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002d A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x002f \}]\l0x0023: CHECK_CAST  (r2 I:java.lang.Long) = (java.lang.Long) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002f \}]\l0x0025: INVOKE  (r2 I:long) = (r2 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x0029: INVOKE  (r5 I:org.osmdroid.util.MapTileList), (r2 I:long) org.osmdroid.util.MapTileList.put(long):void type: VIRTUAL A[Catch:\{ all \-\> 0x002f \}]\l0x002c: GOTO  \-\> 0x0019 A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: RETURN   A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x002f: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x002f \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002f \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.MapTileCache.populateSyncCachedTiles((r4 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS]), (r5 I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

