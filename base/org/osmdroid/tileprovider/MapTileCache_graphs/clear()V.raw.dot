digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.clear()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.osmdroid.util.MapTileList) =  org.osmdroid.util.MapTileList \l0x0002: INVOKE  (r0 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.\<init\>():void type: DIRECT \l0x0005: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.MapTileCache)\l  (r0 I:org.osmdroid.util.MapTileList)\l org.osmdroid.tileprovider.MapTileCache.populateSyncCachedTiles(org.osmdroid.util.MapTileList):void type: DIRECT \l0x0008: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r2 I:int) = (r0 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.getSize():int type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r2 I:long) = (r0 I:org.osmdroid.util.MapTileList), (r1 I:int) org.osmdroid.util.MapTileList.get(int):long type: VIRTUAL \l0x0013: INVOKE  (r4 I:org.osmdroid.tileprovider.MapTileCache), (r2 I:long) org.osmdroid.tileprovider.MapTileCache.remove(long):void type: VIRTUAL \l0x0016: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r4 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap \l0x001b: INVOKE  (r0 I:java.util.HashMap) java.util.HashMap.clear():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileCache.clear((r4 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
}

