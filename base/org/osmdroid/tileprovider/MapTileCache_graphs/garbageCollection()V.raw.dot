digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.garbageCollection()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\>) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCachedTiles java.util.HashMap \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.HashMap) java.util.HashMap.size():int type: VIRTUAL \l0x0006: IGET  (r1 I:boolean) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mStressedMemory boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r1 I:int) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCapacity int \l0x000c: ARITH  (r1 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (2147483647(0x7fffffff, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.refreshAdditionalLists():void type: DIRECT \l0x0017: IGET  (r2 I:boolean) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAutoEnsureCapacity boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mMapTileArea org.osmdroid.util.MapTileArea \l0x001d: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.size():int type: VIRTUAL \l0x0021: IGET  (r3 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0023: INVOKE  (r3 I:int) = (r3 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.size():int type: VIRTUAL \l0x0027: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0028: INVOKE  (r2 I:boolean) = (r5 I:org.osmdroid.tileprovider.MapTileCache), (r2 I:int) org.osmdroid.tileprovider.MapTileCache.ensureCapacity(int):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0039 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IGET  (r2 I:boolean) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mStressedMemory boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0039 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: IGET  (r1 I:int) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mCapacity int \l0x0034: ARITH  (r1 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:15:0x0039 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0038|0x0038: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|0x0039: IGET  (r0 I:org.osmdroid.util.MapTileList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mGC org.osmdroid.util.MapTileList \l0x003b: INVOKE  \l  (r5 I:org.osmdroid.tileprovider.MapTileCache)\l  (r0 I:org.osmdroid.util.MapTileList)\l org.osmdroid.tileprovider.MapTileCache.populateSyncCachedTiles(org.osmdroid.util.MapTileList):void type: DIRECT \l0x003e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: IGET  (r2 I:org.osmdroid.util.MapTileList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mGC org.osmdroid.util.MapTileList \l0x0041: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.getSize():int type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|0x0045: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:25:0x005f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: IGET  (r2 I:org.osmdroid.util.MapTileList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mGC org.osmdroid.util.MapTileList \l0x0049: INVOKE  (r2 I:long) = (r2 I:org.osmdroid.util.MapTileList), (r0 I:int) org.osmdroid.util.MapTileList.get(int):long type: VIRTUAL \l0x004d: INVOKE  (r4 I:boolean) = (r5 I:org.osmdroid.tileprovider.MapTileCache), (r2 I:long) org.osmdroid.tileprovider.MapTileCache.shouldKeepTile(long):boolean type: DIRECT \l}"];
Node_19 [shape=record,label="{19\:\ 0x0051|0x0051: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0054 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0054|0x0054: INVOKE  (r5 I:org.osmdroid.tileprovider.MapTileCache), (r2 I:long) org.osmdroid.tileprovider.MapTileCache.remove(long):void type: VIRTUAL \l0x0057: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|0x0059: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x005c \l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|0x005c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x005f|0x005f: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileCache.garbageCollection((r5 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_24[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_16;
}

