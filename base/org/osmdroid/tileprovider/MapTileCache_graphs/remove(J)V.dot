digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.remove(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.HashMap\<java.lang.Long, android.graphics.drawable.Drawable\> r0 = r3.mCachedTiles\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|android.graphics.drawable.Drawable r1 = r3.mCachedTiles.remove(java.lang.Long.valueOf(r4))\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|monitor\-exit(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (getTileRemovedListener() == null) goto L_0x001d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|getTileRemovedListener().onTileRemoved(r4)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|org.osmdroid.tileprovider.BitmapPool.getInstance().asyncRecycle(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|LOOP_START\lREMOVE\lLOOP:0: B:10:0x0025\-\>B:14:0x0025\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|SYNTHETIC\lREMOVE\lSplitter:B:11:0x0026\l}"];
Node_12 [shape=record,label="{12\:\ ?|REMOVE\lSplitter:B:11:0x0026\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|REMOVE\l|throw r4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:10:0x0025\-\>B:14:0x0025\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.MapTileCache.remove((r3v0 'this' org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_15;
Node_12 -> Node_16;
Node_14 -> Node_10;
Node_15 -> Node_13;
Node_16 -> Node_14;
}

