digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.refreshAdditionalLists()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.util.MapTileAreaComputer\>) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mComputers java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r2 I:org.osmdroid.util.MapTileAreaComputer) = (org.osmdroid.util.MapTileAreaComputer) (r2 I:?[OBJECT, ARRAY]) \l0x0013: IGET  (r3 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0015: INVOKE  (r3 I:java.util.List) = (r3 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x0019: INVOKE  (r3 I:int) = (r3 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r3 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0021: INVOKE  (r3 I:java.util.List) = (r3 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x0025: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0029: CHECK_CAST  (r3 I:org.osmdroid.util.MapTileArea) = (org.osmdroid.util.MapTileArea) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: NEW_INSTANCE  (r3 I:org.osmdroid.util.MapTileArea) =  org.osmdroid.util.MapTileArea \l0x002e: INVOKE  (r3 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.\<init\>():void type: DIRECT \l0x0031: IGET  (r4 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0033: INVOKE  (r4 I:java.util.List) = (r4 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x0037: INVOKE  (r4 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|0x003a: IGET  (r4 I:org.osmdroid.util.MapTileArea) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mMapTileArea org.osmdroid.util.MapTileArea \l0x003c: INVOKE  \l  (r2 I:org.osmdroid.util.MapTileAreaComputer)\l  (r4 I:org.osmdroid.util.MapTileArea)\l  (r3 I:org.osmdroid.util.MapTileArea)\l org.osmdroid.util.MapTileAreaComputer.computeFromSource(org.osmdroid.util.MapTileArea, org.osmdroid.util.MapTileArea):org.osmdroid.util.MapTileArea type: INTERFACE \l0x003f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: IGET  (r0 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0044: INVOKE  (r0 I:java.util.List) = (r0 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x0048: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|0x004c: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:11:0x0064 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|0x004e: IGET  (r0 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0050: INVOKE  (r0 I:java.util.List) = (r0 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x0054: IGET  (r2 I:org.osmdroid.util.MapTileAreaList) = (r5 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x0056: INVOKE  (r2 I:java.util.List) = (r2 I:org.osmdroid.util.MapTileAreaList) org.osmdroid.util.MapTileAreaList.getList():java.util.List type: VIRTUAL \l0x005a: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x005e: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0060: INVOKE  (r0 I:java.util.List), (r2 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0064|0x0064: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.MapTileCache.refreshAdditionalLists((r5 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
}

