digraph "CFG fororg.osmdroid.tileprovider.MapTileCache.shouldKeepTile(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.util.MapTileArea) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mMapTileArea org.osmdroid.util.MapTileArea \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.util.MapTileArea), (r4 I:long) org.osmdroid.util.MapTileArea.contains(long):boolean type: VIRTUAL \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r0 I:org.osmdroid.util.MapTileAreaList) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mAdditionalMapTileList org.osmdroid.util.MapTileAreaList \l0x000c: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.util.MapTileAreaList), (r4 I:long) org.osmdroid.util.MapTileAreaList.contains(long):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r1 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r0 I:java.util.List\<org.osmdroid.util.MapTileContainer\>) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.mProtectors java.util.List \l0x0015: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0023: CHECK_CAST  (r2 I:org.osmdroid.util.MapTileContainer) = (org.osmdroid.util.MapTileContainer) (r2 I:?[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:boolean) = (r2 I:org.osmdroid.util.MapTileContainer), (r4 I:long) org.osmdroid.util.MapTileContainer.contains(long):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: RETURN  (r1 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean org.osmdroid.tileprovider.MapTileCache.shouldKeepTile((r3 'this' I:org.osmdroid.tileprovider.MapTileCache A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_10 -> Node_11[style=dashed];
Node_12 -> Node_13;
}

