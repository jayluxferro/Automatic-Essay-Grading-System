digraph "CFG fororg.osmdroid.tileprovider.tilesource.QuadTreeTileSource.quadTree(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:int) = (r7 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0039 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000c: ARITH  (r3 I:int) = (r1 I:int) + (\-1 int) \l0x000e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: ARITH  (r3 I:int) = (r4 I:int) \<\< (r3 I:int) \l0x0011: INVOKE  (r5 I:int) = (r7 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x0015: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (r3 I:?[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r4 I:int) = (r7 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x001d: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: ARITH  (r2 I:int) = (r2 I:int) + (2 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0024: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0027: CONST_STR  (r4 I:java.lang.String) =  \"\" \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002c: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r2 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|0x0039: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: RETURN  (r7 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{protected java.lang.String org.osmdroid.tileprovider.tilesource.QuadTreeTileSource.quadTree((r6 'this' I:org.osmdroid.tileprovider.tilesource.QuadTreeTileSource A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
}

