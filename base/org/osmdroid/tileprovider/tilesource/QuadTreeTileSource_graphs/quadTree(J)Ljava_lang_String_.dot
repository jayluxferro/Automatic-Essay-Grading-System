digraph "CFG fororg.osmdroid.tileprovider.tilesource.QuadTreeTileSource.quadTree(J)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lint r1 = org.osmdroid.util.MapTileIndex.getZoom(r7)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:8:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0009\-\>B:8:0x0022\l|if (r1 \<= 0) goto L_0x0039\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|r2 = 0\lint r3 = 1 \<\< (r1 + \-1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if ((org.osmdroid.util.MapTileIndex.getX(r7) & r3) == 0) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|r2 = 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v5 int) binds: [B:3:0x0016, B:4:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|if ((r3 & org.osmdroid.util.MapTileIndex.getY(r7)) == 0) goto L_0x0022\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|int r2 = r2 + 2\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|LOOP_END\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v4 int) binds: [B:13:0x0022, B:12:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0009\-\>B:8:0x0022\l|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"\")\lr3.append(r2)\lr0.append(r3.toString())\lint r1 = r1 + \-1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039}"];
Node_10 [shape=record,label="{10\:\ 0x003d|RETURN\l|return r0.toString()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected java.lang.String org.osmdroid.tileprovider.tilesource.QuadTreeTileSource.quadTree((r6v0 'this' org.osmdroid.tileprovider.tilesource.QuadTreeTileSource A[IMMUTABLE_TYPE, THIS]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_12;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

