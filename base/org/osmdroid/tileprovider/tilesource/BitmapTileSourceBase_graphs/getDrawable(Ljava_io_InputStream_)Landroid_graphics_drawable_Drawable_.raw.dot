digraph "CFG fororg.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.getDrawable(Ljava\/io\/InputStream;)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r1 I:android.graphics.BitmapFactory$Options) =  android.graphics.BitmapFactory$Options A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.\<init\>():void type: DIRECT A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x0006: INVOKE  (r2 I:org.osmdroid.tileprovider.BitmapPool) =  org.osmdroid.tileprovider.BitmapPool.getInstance():org.osmdroid.tileprovider.BitmapPool type: STATIC A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x000a: IGET  (r3 I:int) = \l  (r5 I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase)\l org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.mTileSizePixels int A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x000c: IGET  (r4 I:int) = \l  (r5 I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase)\l org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.mTileSizePixels int A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x000e: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.BitmapPool)\l  (r1 I:android.graphics.BitmapFactory$Options)\l  (r3 I:int)\l  (r4 I:int)\l org.osmdroid.tileprovider.BitmapPool.applyReusableOptions(android.graphics.BitmapFactory$Options, int, int):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x0011: INVOKE  (r6 I:android.graphics.Bitmap) = \l  (r6 I:java.io.InputStream)\l  (r0 I:android.graphics.Rect)\l  (r1 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0038 A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: NEW_INSTANCE  (r1 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) =  org.osmdroid.tileprovider.ReusableBitmapDrawable A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}]\l0x0019: INVOKE  \l  (r1 I:org.osmdroid.tileprovider.ReusableBitmapDrawable)\l  (r6 I:android.graphics.Bitmap)\l org.osmdroid.tileprovider.ReusableBitmapDrawable.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ OutOfMemoryError \-\> 0x0039, Exception \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|ExcHandler: Exception null\lSplitter:B:1:0x0001\l|0x001d: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" \l0x0020: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0022: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0025: CONST_STR  (r3 I:java.lang.String) =  \"#547 Error loading bitmap\" \l0x0027: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r3 I:java.lang.String) = \l  (r5 I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase)\l org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.pathBase():java.lang.String type: VIRTUAL \l0x002e: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0035: INVOKE  \l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r6 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|ExcHandler: OutOfMemoryError null\lSplitter:B:1:0x0001\l|0x0039: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x003c: CONST_STR  (r1 I:java.lang.String) =  \"OutOfMemoryError loading bitmap\" \l0x003e: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x0041: INVOKE   java.lang.System.gc():void type: STATIC \l0x0044: NEW_INSTANCE  (r0 I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase$LowMemoryException) =  org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase$LowMemoryException \l0x0046: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase$LowMemoryException)\l  (r6 I:java.lang.Throwable)\l org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.LowMemoryException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|0x0049: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase.getDrawable((r5 'this' I:org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase A[IMMUTABLE_TYPE, THIS]), (r6 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase$LowMemoryException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

