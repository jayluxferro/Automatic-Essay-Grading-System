digraph "CFG fororg.osmdroid.tileprovider.tilesource.TileSourceFactory.getTileSource(Ljava\/lang\/String;)Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;" {
subgraph cluster_Region_1514719340 {
label = "R(4:0|(2:3|(1:5))|6|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = mTileSources.iterator()\l}"];
subgraph cluster_LoopRegion_526991671 {
label = "LOOP:0: (2:3|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() != false) goto L_0x000c\l}"];
subgraph cluster_Region_2114373465 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|org.osmdroid.tileprovider.tilesource.ITileSource r1 = r0.next()\l}"];
subgraph cluster_IfRegion_147196846 {
label = "IF [B:4:0x001a] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001a|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:4:0x001a\l|if (r1.name().equals(r3) == true) goto L_0x001c\l}"];
subgraph cluster_Region_340900210 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001c|RETURN\l|return r1\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x001d}"];
Node_7 [shape=record,label="{7\:\ 0x0033|throw new java.lang.IllegalArgumentException(\"No such tile source: \" + r3)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:4:0x001a\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static org.osmdroid.tileprovider.tilesource.ITileSource org.osmdroid.tileprovider.tilesource.TileSourceFactory.getTileSource((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_1[style=dashed];
Node_4 -> Node_8;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_8 -> Node_5;
Node_9 -> Node_6;
}

