digraph "CFG fororg.osmdroid.tileprovider.tilesource.TileSourceFactory.getTileSource(I)Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;" {
subgraph cluster_Region_82336908 {
label = "R(4:0|(2:3|(1:5))|6|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = mTileSources.iterator()\l}"];
subgraph cluster_LoopRegion_813398045 {
label = "LOOP:0: (2:3|(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r0.hasNext() != false) goto L_0x000c\l}"];
subgraph cluster_Region_1540609764 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|org.osmdroid.tileprovider.tilesource.ITileSource r1 = r0.next()\l}"];
subgraph cluster_IfRegion_2001918872 {
label = "IF [B:4:0x0016] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:4:0x0016\l|if (r1.ordinal() == r3) goto L_0x0018\l}"];
subgraph cluster_Region_823715266 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|RETURN\l|return r1\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0019}"];
Node_7 [shape=record,label="{7\:\ 0x002f|throw new java.lang.IllegalArgumentException(\"No tile source at position: \" + r3)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:4:0x0016\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static org.osmdroid.tileprovider.tilesource.ITileSource org.osmdroid.tileprovider.tilesource.TileSourceFactory.getTileSource((r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}], Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_1[style=dashed];
Node_4 -> Node_8;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_8 -> Node_5;
Node_9 -> Node_6;
}

