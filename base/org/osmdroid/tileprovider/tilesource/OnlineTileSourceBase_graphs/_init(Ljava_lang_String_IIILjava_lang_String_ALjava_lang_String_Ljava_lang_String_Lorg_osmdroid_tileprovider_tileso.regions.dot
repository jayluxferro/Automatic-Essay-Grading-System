digraph "CFG fororg.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.\<init\>(Ljava\/lang\/String;IIILjava\/lang\/String;[Ljava\/lang\/String;Ljava\/lang\/String;Lorg\/osmdroid\/tileprovider\/tilesource\/TileSourcePolicy;)V" {
subgraph cluster_Region_2141635259 {
label = "R(2:0|(1:2)(1:3))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r8, r9, r10, r11, r12, r14)\lr7.mBaseUrls = r13\lr7.mTileSourcePolicy = r15\l}"];
subgraph cluster_IfRegion_1780636780 {
label = "IF [B:1:0x0014] THEN: R(1:2) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r7.mTileSourcePolicy.getMaxConcurrent() \> 0) goto L_0x0016\l}"];
subgraph cluster_Region_1119116243 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0016|r7.mSemaphore = new java.util.concurrent.Semaphore(r7.mTileSourcePolicy.getMaxConcurrent(), true)\l}"];
}
subgraph cluster_Region_1463823756 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0025|r7.mSemaphore = null\l}"];
}
}
}
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.\<init\>((r7v0 'this' org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase A[IMMUTABLE_TYPE, THIS]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 org.osmdroid.tileprovider.tilesource.TileSourcePolicy A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
}

