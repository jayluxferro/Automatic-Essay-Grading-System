digraph "CFG fororg.osmdroid.tileprovider.BitmapPool.obtainBitmapFromPool()Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.LinkedList\<android.graphics.Bitmap\> r0 = r3.mPool\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r3.mPool.isEmpty() == false) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b}"];
Node_6 [shape=record,label="{6\:\ 0x000c|monitor\-exit(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|android.graphics.Bitmap r1 = r3.mPool.removeFirst()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r1.isRecycled() == false) goto L_0x0022\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|android.graphics.Bitmap r1 = obtainBitmapFromPool()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|monitor\-exit(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\l|return r1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|monitor\-exit(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|RETURN\l|return r1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|REMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public android.graphics.Bitmap org.osmdroid.tileprovider.BitmapPool.obtainBitmapFromPool((r3v0 'this' org.osmdroid.tileprovider.BitmapPool A[IMMUTABLE_TYPE, THIS]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

