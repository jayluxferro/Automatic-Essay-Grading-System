digraph "CFG fororg.osmdroid.tileprovider.BitmapPool.obtainBitmapFromPool()Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.LinkedList\<android.graphics.Bitmap\>) = (r3 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.mPool java.util.LinkedList \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:java.util.LinkedList\<android.graphics.Bitmap\>) = (r3 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.mPool java.util.LinkedList A[Catch:\{ all \-\> 0x0024 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:boolean) = (r1 I:java.util.LinkedList) java.util.LinkedList.isEmpty():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000e A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN  (r1 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IGET  (r1 I:java.util.LinkedList\<android.graphics.Bitmap\>) = (r3 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.mPool java.util.LinkedList A[Catch:\{ all \-\> 0x0024 \}]\l0x0010: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.LinkedList) java.util.LinkedList.removeFirst():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l0x0014: CHECK_CAST  (r1 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}]\l0x0016: INVOKE  (r2 I:boolean) = (r1 I:android.graphics.Bitmap) android.graphics.Bitmap.isRecycled():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0022 A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: INVOKE  (r1 I:android.graphics.Bitmap) = (r3 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.obtainBitmapFromPool():android.graphics.Bitmap type: VIRTUAL A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: RETURN  (r1 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: RETURN  (r1 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0024: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0024 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|0x0025: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0024 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|0x0026: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.graphics.Bitmap org.osmdroid.tileprovider.BitmapPool.obtainBitmapFromPool((r3 'this' I:org.osmdroid.tileprovider.BitmapPool A[IMMUTABLE_TYPE, THIS]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

