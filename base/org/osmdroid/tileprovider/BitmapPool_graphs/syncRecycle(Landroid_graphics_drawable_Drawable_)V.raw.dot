digraph "CFG fororg.osmdroid.tileprovider.BitmapPool.syncRecycle(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) android.graphics.drawable.BitmapDrawable \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x000e: CHECK_CAST  (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: INVOKE  (r0 I:android.graphics.Bitmap) android.graphics.Bitmap.recycle():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: INSTANCE_OF  (r0 I:boolean) = (r3 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.ReusableBitmapDrawable \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: CHECK_CAST  (r3 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) = (org.osmdroid.tileprovider.ReusableBitmapDrawable) (r3 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.BitmapPool)\l  (r3 I:org.osmdroid.tileprovider.ReusableBitmapDrawable)\l org.osmdroid.tileprovider.BitmapPool.returnDrawableToPool(org.osmdroid.tileprovider.ReusableBitmapDrawable):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.BitmapPool.syncRecycle((r2 'this' I:org.osmdroid.tileprovider.BitmapPool A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

