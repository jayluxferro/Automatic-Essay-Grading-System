digraph "CFG fororg.osmdroid.tileprovider.BitmapPool.returnDrawableToPool(Lorg\/osmdroid\/tileprovider\/ReusableBitmapDrawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:android.graphics.Bitmap) = (r3 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.tryRecycle():android.graphics.Bitmap type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.isRecycled():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.isMutable():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: INVOKE  (r0 I:android.graphics.Bitmap$Config) = (r3 I:android.graphics.Bitmap) android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IGET  (r0 I:java.util.LinkedList\<android.graphics.Bitmap\>) = (r2 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.mPool java.util.LinkedList \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|SYNTHETIC\lSplitter:B:10:0x001b\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001b\l|0x001b: IGET  (r1 I:java.util.LinkedList\<android.graphics.Bitmap\>) = (r2 I:org.osmdroid.tileprovider.BitmapPool) org.osmdroid.tileprovider.BitmapPool.mPool java.util.LinkedList A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x001d: INVOKE  (r1 I:java.util.LinkedList), (r3 I:java.lang.Object) java.util.LinkedList.addLast(java.lang.Object):void type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|0x0021: GOTO  \-\> 0x002e A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|ExcHandler: all null\lSplitter:B:10:0x001b\l|0x0022: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024|0x0024: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002e \l}"];
Node_18 [shape=record,label="{18\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"OsmDroid\" \l0x0029: CONST_STR  (r0 I:java.lang.String) =  \"Rejected bitmap from being added to BitmapPool.\" \l0x002b: INVOKE  (r3 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|0x002e: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.BitmapPool.returnDrawableToPool((r2 'this' I:org.osmdroid.tileprovider.BitmapPool A[IMMUTABLE_TYPE, THIS]), (r3 I:org.osmdroid.tileprovider.ReusableBitmapDrawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
}

