digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.computeTile(JII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDiff int \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r1 I:int) = (r17 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x000c: IGET  (r2 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDiff int \l0x000e: ARITH  (r1 I:int) = (r1 I:int) \<\< (r2 I:int) \l0x000f: INVOKE  (r2 I:int) = (r17 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x0013: IGET  (r3 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDiff int \l0x0015: ARITH  (r2 I:int) = (r2 I:int) \<\< (r3 I:int) \l0x0016: IGET  (r3 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDiff int \l0x0018: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0019: ARITH  (r3 I:int) = (r4 I:int) \<\< (r3 I:int) \l0x001b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x001d: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x001e: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001f|0x001f: IF  (r6 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:16:0x007d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0022: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0023: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r7 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:15:0x0078 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r10 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mOldTileZoomLevel int \l0x0028: ARITH  (r11 I:int) = (r1 I:int) + (r6 I:int) \l0x002a: ARITH  (r12 I:int) = (r2 I:int) + (r7 I:int) \l0x002c: INVOKE  (r10 I:long) = (r10 I:int), (r11 I:int), (r12 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0030: IGET  (r12 I:org.osmdroid.tileprovider.MapTileProviderBase) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.this$0 org.osmdroid.tileprovider.MapTileProviderBase \l0x0032: IGET  (r12 I:org.osmdroid.tileprovider.MapTileCache) = (r12 I:org.osmdroid.tileprovider.MapTileProviderBase) org.osmdroid.tileprovider.MapTileProviderBase.mTileCache org.osmdroid.tileprovider.MapTileCache \l0x0034: INVOKE  (r10 I:android.graphics.drawable.Drawable) = \l  (r12 I:org.osmdroid.tileprovider.MapTileCache)\l  (r10 I:long)\l org.osmdroid.tileprovider.MapTileCache.getMapTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l0x0038: INSTANCE_OF  (r11 I:boolean) = (r10 I:?[OBJECT, ARRAY]) android.graphics.drawable.BitmapDrawable \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0075 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: CHECK_CAST  (r10 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r10 I:?[OBJECT, ARRAY]) \l0x003e: INVOKE  (r10 I:android.graphics.Bitmap) = (r10 I:android.graphics.drawable.BitmapDrawable) android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0075 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0057 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: IGET  (r8 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mTileSize int \l0x0048: INVOKE  (r8 I:android.graphics.Bitmap) = (r8 I:int) org.osmdroid.tileprovider.modules.MapTileApproximater.getTileBitmap(int):android.graphics.Bitmap type: STATIC \l0x004c: NEW_INSTANCE  (r9 I:android.graphics.Canvas) =  android.graphics.Canvas \l0x004e: INVOKE  \l  (r9 I:android.graphics.Canvas)\l  (r8 I:android.graphics.Bitmap)\l android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void type: DIRECT \l0x0051: CONST  (r11 I:?[int, float, short, byte, char]) = \l  (\-3355444(0xffffffffffcccccc, float:NaN) ?[int, float, short, byte, char])\l \l0x0054: INVOKE  (r9 I:android.graphics.Canvas), (r11 I:int) android.graphics.Canvas.drawColor(int):void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: IGET  (r11 I:android.graphics.Rect) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDestRect android.graphics.Rect \l0x0059: IGET  (r12 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mTileSize_2 int \l0x005b: ARITH  (r12 I:int) = (r12 I:int) * (r6 I:int) \l0x005d: IGET  (r13 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mTileSize_2 int \l0x005f: ARITH  (r13 I:int) = (r13 I:int) * (r7 I:int) \l0x0061: ARITH  (r14 I:int) = (r6 I:int) + (1 int) \l0x0063: IGET  (r15 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mTileSize_2 int \l0x0065: ARITH  (r14 I:int) = (r14 I:int) * (r15 I:int) \l0x0067: ARITH  (r15 I:int) = (r7 I:int) + (1 int) \l0x0069: IGET  (r4 I:int) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mTileSize_2 int \l0x006b: ARITH  (r15 I:int) = (r15 I:int) * (r4 I:int) \l0x006d: INVOKE  \l  (r11 I:android.graphics.Rect)\l  (r12 I:int)\l  (r13 I:int)\l  (r14 I:int)\l  (r15 I:int)\l android.graphics.Rect.set(int, int, int, int):void type: VIRTUAL \l0x0070: IGET  (r4 I:android.graphics.Rect) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mDestRect android.graphics.Rect \l0x0072: INVOKE  \l  (r9 I:android.graphics.Canvas)\l  (r10 I:android.graphics.Bitmap)\l  (r5 I:android.graphics.Rect)\l  (r4 I:android.graphics.Rect)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0075|0x0075: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0078|0x0078: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x007a: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x007b: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x007d|0x007d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0088 \l}"];
Node_17 [shape=record,label="{17\:\ 0x007f|0x007f: IGET  (r1 I:java.util.HashMap) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.mNewTiles java.util.HashMap \l0x0081: INVOKE  (r2 I:java.lang.Long) = (r17 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l0x0085: INVOKE  \l  (r1 I:java.util.HashMap)\l  (r2 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0088|0x0088: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.MapTileProviderBase.ZoomOutTileLooper.computeTile((r16 'this' I:org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper A[IMMUTABLE_TYPE, THIS]), (r17 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_6;
Node_15 -> Node_4;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
}

