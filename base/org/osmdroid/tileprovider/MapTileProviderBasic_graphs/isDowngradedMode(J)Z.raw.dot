digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBasic.isDowngradedMode(J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck) = (r7 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mNetworkAvailabilityCheck org.osmdroid.tileprovider.modules.INetworkAvailablityCheck \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck) = (r7 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mNetworkAvailabilityCheck org.osmdroid.tileprovider.modules.INetworkAvailablityCheck \l0x0007: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)\l org.osmdroid.tileprovider.modules.INetworkAvailablityCheck.getNetworkAvailable():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) = (r7 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.useDataConnection():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN  (r1 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r0 I:java.util.List) = (r7 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x0016: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x001a: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x001c: CONST  (r4 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: INVOKE  (r5 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0042 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) (r5 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r6 I:boolean) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getUsesDataConnection():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: INVOKE  (r6 I:int) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: IF  (r3 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:16:0x0038 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|0x0038: INVOKE  (r5 I:int) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMaximumZoomLevel():int type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0040 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0052 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0047 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|0x0047: INVOKE  (r8 I:int) = (r8 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x004b|0x004b: IF  (r8 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:28:0x0051 \l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: IF  (r8 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:27:0x0050 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0050|0x0050: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0051|0x0051: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0052|0x0052: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean org.osmdroid.tileprovider.MapTileProviderBasic.isDowngradedMode((r7 'this' I:org.osmdroid.tileprovider.MapTileProviderBasic A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_8;
Node_18 -> Node_19[style=dashed];
Node_19 -> Node_8;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_23;
Node_21 -> Node_29[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_27;
Node_25 -> Node_28[style=dashed];
Node_27 -> Node_28;
}

