digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBasic.\<init\>(Lorg\/osmdroid\/tileprovider\/IRegisterReceiver;Lorg\/osmdroid\/tileprovider\/modules\/INetworkAvailablityCheck;Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;Landroid\/content\/Context;Lorg\/osmdroid\/tileprovider\/modules\/IFilesystemCache;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderArray)\l  (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r3 I:org.osmdroid.tileprovider.IRegisterReceiver)\l org.osmdroid.tileprovider.MapTileProviderArray.\<init\>(org.osmdroid.tileprovider.tilesource.ITileSource, org.osmdroid.tileprovider.IRegisterReceiver):void type: DIRECT \l0x0003: IPUT  \l  (r4 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.mNetworkAvailabilityCheck org.osmdroid.tileprovider.modules.INetworkAvailablityCheck \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IPUT  \l  (r7 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.tileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: SGET  (r7 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r7 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:6:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: NEW_INSTANCE  (r7 I:org.osmdroid.tileprovider.modules.TileWriter) =  org.osmdroid.tileprovider.modules.TileWriter \l0x0012: INVOKE  (r7 I:org.osmdroid.tileprovider.modules.TileWriter) org.osmdroid.tileprovider.modules.TileWriter.\<init\>():void type: DIRECT \l0x0015: IPUT  \l  (r7 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.tileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: NEW_INSTANCE  (r7 I:org.osmdroid.tileprovider.modules.SqlTileWriter) =  org.osmdroid.tileprovider.modules.SqlTileWriter \l0x001a: INVOKE  (r7 I:org.osmdroid.tileprovider.modules.SqlTileWriter) org.osmdroid.tileprovider.modules.SqlTileWriter.\<init\>():void type: DIRECT \l0x001d: IPUT  \l  (r7 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.tileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: NEW_INSTANCE  (r7 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider) =  org.osmdroid.tileprovider.modules.MapTileAssetsProvider \l0x0021: INVOKE  (r6 I:android.content.res.AssetManager) = (r6 I:android.content.Context) android.content.Context.getAssets():android.content.res.AssetManager type: VIRTUAL \l0x0025: INVOKE  \l  (r7 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider)\l  (r3 I:org.osmdroid.tileprovider.IRegisterReceiver)\l  (r6 I:android.content.res.AssetManager)\l  (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.MapTileAssetsProvider.\<init\>(org.osmdroid.tileprovider.IRegisterReceiver, android.content.res.AssetManager, org.osmdroid.tileprovider.tilesource.ITileSource):void type: DIRECT \l0x0028: IGET  (r6 I:java.util.List) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x002a: INVOKE  (r6 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x002d: IGET  (r6 I:org.osmdroid.tileprovider.modules.IFilesystemCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.tileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l0x002f: INVOKE  (r6 I:org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase) = \l  (r3 I:org.osmdroid.tileprovider.IRegisterReceiver)\l  (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r6 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l org.osmdroid.tileprovider.MapTileProviderBasic.getMapTileFileStorageProviderBase(org.osmdroid.tileprovider.IRegisterReceiver, org.osmdroid.tileprovider.tilesource.ITileSource, org.osmdroid.tileprovider.modules.IFilesystemCache):org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase type: STATIC \l0x0033: IGET  (r0 I:java.util.List) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x0035: INVOKE  (r0 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0038: NEW_INSTANCE  (r0 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider) =  org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider \l0x003a: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider)\l  (r3 I:org.osmdroid.tileprovider.IRegisterReceiver)\l  (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.\<init\>(org.osmdroid.tileprovider.IRegisterReceiver, org.osmdroid.tileprovider.tilesource.ITileSource):void type: DIRECT \l0x003d: IGET  (r3 I:java.util.List) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x003f: INVOKE  (r3 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0042: NEW_INSTANCE  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater) =  org.osmdroid.tileprovider.modules.MapTileApproximater \l0x0044: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.\<init\>():void type: DIRECT \l0x0047: IPUT  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.mApproximationProvider org.osmdroid.tileprovider.modules.MapTileApproximater \l0x0049: IGET  (r3 I:java.util.List) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x004b: IGET  (r1 I:org.osmdroid.tileprovider.modules.MapTileApproximater) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mApproximationProvider org.osmdroid.tileprovider.modules.MapTileApproximater \l0x004d: INVOKE  (r3 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0050: IGET  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mApproximationProvider org.osmdroid.tileprovider.modules.MapTileApproximater \l0x0052: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l  (r7 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileApproximater.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x0055: IGET  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mApproximationProvider org.osmdroid.tileprovider.modules.MapTileApproximater \l0x0057: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l  (r6 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileApproximater.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x005a: IGET  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mApproximationProvider org.osmdroid.tileprovider.modules.MapTileApproximater \l0x005c: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileApproximater.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x005f: NEW_INSTANCE  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader) =  org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0061: IGET  (r1 I:org.osmdroid.tileprovider.modules.IFilesystemCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.tileWriter org.osmdroid.tileprovider.modules.IFilesystemCache \l0x0063: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l  (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r1 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r4 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)\l org.osmdroid.tileprovider.modules.MapTileDownloader.\<init\>(org.osmdroid.tileprovider.tilesource.ITileSource, org.osmdroid.tileprovider.modules.IFilesystemCache, org.osmdroid.tileprovider.modules.INetworkAvailablityCheck):void type: DIRECT \l0x0066: IPUT  \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l org.osmdroid.tileprovider.MapTileProviderBasic.mDownloaderProvider org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0068: IGET  (r3 I:java.util.List) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mTileProviderList java.util.List \l0x006a: IGET  (r4 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mDownloaderProvider org.osmdroid.tileprovider.modules.MapTileDownloader \l0x006c: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x006f: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x0073: INVOKE  (r3 I:java.util.List) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getProtectedTileComputers():java.util.List type: VIRTUAL \l0x0077: NEW_INSTANCE  (r4 I:org.osmdroid.util.MapTileAreaZoomComputer) =  org.osmdroid.util.MapTileAreaZoomComputer \l0x0079: CONST  (r5 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x007a: INVOKE  \l  (r4 I:org.osmdroid.util.MapTileAreaZoomComputer)\l  (r5 I:int)\l org.osmdroid.util.MapTileAreaZoomComputer.\<init\>(int):void type: DIRECT \l0x007d: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0080: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x0084: INVOKE  (r3 I:java.util.List) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getProtectedTileComputers():java.util.List type: VIRTUAL \l0x0088: NEW_INSTANCE  (r4 I:org.osmdroid.util.MapTileAreaBorderComputer) =  org.osmdroid.util.MapTileAreaBorderComputer \l0x008a: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x008b: INVOKE  \l  (r4 I:org.osmdroid.util.MapTileAreaBorderComputer)\l  (r5 I:int)\l org.osmdroid.util.MapTileAreaBorderComputer.\<init\>(int):void type: DIRECT \l0x008e: INVOKE  (r3 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0091: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x0095: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0096: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTileCache)\l  (r4 I:boolean)\l org.osmdroid.tileprovider.MapTileCache.setAutoEnsureCapacity(boolean):void type: VIRTUAL \l0x0099: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x009d: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTileCache)\l  (r4 I:boolean)\l org.osmdroid.tileprovider.MapTileCache.setStressedMemory(boolean):void type: VIRTUAL \l0x00a0: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x00a4: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTilePreCache) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getPreCache():org.osmdroid.tileprovider.MapTilePreCache type: VIRTUAL \l0x00a8: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTilePreCache)\l  (r7 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.MapTilePreCache.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x00ab: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x00af: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTilePreCache) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getPreCache():org.osmdroid.tileprovider.MapTilePreCache type: VIRTUAL \l0x00b3: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTilePreCache)\l  (r6 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.MapTilePreCache.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x00b6: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x00ba: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTilePreCache) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getPreCache():org.osmdroid.tileprovider.MapTilePreCache type: VIRTUAL \l0x00be: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTilePreCache)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.MapTilePreCache.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x00c1: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x00c5: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTilePreCache) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getPreCache():org.osmdroid.tileprovider.MapTilePreCache type: VIRTUAL \l0x00c9: IGET  (r4 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.mDownloaderProvider org.osmdroid.tileprovider.modules.MapTileDownloader \l0x00cb: INVOKE  \l  (r3 I:org.osmdroid.tileprovider.MapTilePreCache)\l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.MapTilePreCache.addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase):void type: VIRTUAL \l0x00ce: INVOKE  (r3 I:org.osmdroid.tileprovider.MapTileCache) = (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic) org.osmdroid.tileprovider.MapTileProviderBasic.getTileCache():org.osmdroid.tileprovider.MapTileCache type: VIRTUAL \l0x00d2: INVOKE  (r3 I:java.util.List) = (r3 I:org.osmdroid.tileprovider.MapTileCache) org.osmdroid.tileprovider.MapTileCache.getProtectedTileContainers():java.util.List type: VIRTUAL \l0x00d6: INVOKE  (r3 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x00d9: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBasic)\l  (r5 I:boolean)\l org.osmdroid.tileprovider.MapTileProviderBasic.setOfflineFirst(boolean):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x00dc|0x00dc: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBasic.\<init\>((r2 'this' I:org.osmdroid.tileprovider.MapTileProviderBasic A[IMMUTABLE_TYPE, THIS]), (r3 I:org.osmdroid.tileprovider.IRegisterReceiver A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.content.Context A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.osmdroid.tileprovider.modules.IFilesystemCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

