digraph "CFG fororg.osmdroid.tileprovider.TileStates.handleTile(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.mTotal = r3.mTotal + 1\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4 != null) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r3.mNotFound = r3.mNotFound + 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|int r4 = org.osmdroid.tileprovider.ExpirableBitmapDrawable.getState(r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|switch(r4) \{\l    case \-4: goto L_0x0042;\l    case \-3: goto L_0x003b;\l    case \-2: goto L_0x0034;\l    case \-1: goto L_0x002d;\l    default: goto L_0x0016;\l\}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unknown state: \")\lr1.append(r4)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|r3.mUpToDate = r3.mUpToDate + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|r3.mExpired = r3.mExpired + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|r3.mScaled = r3.mScaled + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|r3.mNotFound = r3.mNotFound + 1\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.TileStates.handleTile((r3v0 'this' org.osmdroid.tileprovider.TileStates A[IMMUTABLE_TYPE, THIS]), (r4v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_4 -> Node_8;
Node_4 -> Node_9;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_13;
Node_8 -> Node_14;
Node_9 -> Node_15;
Node_10 -> Node_11;
}

