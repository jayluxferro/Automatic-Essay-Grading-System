digraph "CFG fororg.osmdroid.tileprovider.TileStates.finaliseLoop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: IPUT  (r0 I:boolean), (r2 I:org.osmdroid.tileprovider.TileStates) org.osmdroid.tileprovider.TileStates.mDone boolean \l0x0003: IGET  (r0 I:java.util.Collection\<java.lang.Runnable\>) = (r2 I:org.osmdroid.tileprovider.TileStates) org.osmdroid.tileprovider.TileStates.mRunAfters java.util.Collection \l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0013: CHECK_CAST  (r1 I:java.lang.Runnable) = (java.lang.Runnable) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0009 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: INVOKE  (r1 I:java.lang.Runnable) java.lang.Runnable.run():void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.TileStates.finaliseLoop((r2 'this' I:org.osmdroid.tileprovider.TileStates A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_1;
}

