digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.nextTile()Lorg\/osmdroid\/tileprovider\/MapTileRequestState;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase \l0x0002: IGET  (r0 I:java.lang.Object) = \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mQueueLockObject java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}, TRY_ENTER]\l0x0007: IGET  (r1 I:java.util.LinkedHashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mPending java.util.LinkedHashMap A[Catch:\{ all \-\> 0x00af \}]\l0x0009: INVOKE  (r1 I:java.util.Set) = (r1 I:java.util.LinkedHashMap) java.util.LinkedHashMap.keySet():java.util.Set type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x000d: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00af \}]\l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00af \}]\l0x0012: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r4 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0061 A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: INVOKE  (r4 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00af \}]\l0x001d: CHECK_CAST  (r4 I:java.lang.Long) = (java.lang.Long) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l0x001f: IGET  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x0021: IGET  (r5 I:java.util.HashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mWorking java.util.HashMap A[Catch:\{ all \-\> 0x00af \}]\l0x0023: INVOKE  (r5 I:boolean) = (r5 I:java.util.HashMap), (r4 I:java.lang.Object) java.util.HashMap.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0013 A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: INVOKE  (r3 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x00af \}]\l0x002d: INVOKE  (r3 I:boolean) = (r3 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugTileProviders():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x005f A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: CONST_STR  (r3 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x00af \}]\l0x0035: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x00af \}]\l0x0037: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x00af \}]\l0x003a: CONST_STR  (r6 I:java.lang.String) =  \"TileLoader.nextTile() on provider: \" A[Catch:\{ all \-\> 0x00af \}]\l0x003c: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x003f: IGET  (r6 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x0041: INVOKE  (r6 I:java.lang.String) = \l  (r6 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getName():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0045: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0048: CONST_STR  (r6 I:java.lang.String) =  \" found tile in working queue: \" A[Catch:\{ all \-\> 0x00af \}]\l0x004a: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x004d: INVOKE  (r6 I:long) = (r4 I:java.lang.Long) java.lang.Long.longValue():long type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0051: INVOKE  (r6 I:java.lang.String) = (r6 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x00af \}]\l0x0055: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0058: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x005c: INVOKE  (r3 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x005f|0x005f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l0x0060: GOTO  \-\> 0x0013 A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0061|0x0061: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x00a0 A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0063|0x0063: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x00af \}]\l0x0067: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugTileProviders():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0091 A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x006d|0x006d: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x00af \}]\l0x006f: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x00af \}]\l0x0071: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x00af \}]\l0x0074: CONST_STR  (r5 I:java.lang.String) =  \"TileLoader.nextTile() on provider: \" A[Catch:\{ all \-\> 0x00af \}]\l0x0076: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0079: IGET  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x007b: INVOKE  (r5 I:java.lang.String) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getName():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x007f: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0082: CONST_STR  (r5 I:java.lang.String) =  \" adding tile to working queue: \" A[Catch:\{ all \-\> 0x00af \}]\l0x0084: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x0087: INVOKE  (r4 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x008a: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x008e: INVOKE  (r1 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0091|0x0091: IGET  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x0093: IGET  (r1 I:java.util.HashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mWorking java.util.HashMap A[Catch:\{ all \-\> 0x00af \}]\l0x0095: IGET  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x0097: IGET  (r4 I:java.util.LinkedHashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mPending java.util.LinkedHashMap A[Catch:\{ all \-\> 0x00af \}]\l0x0099: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.LinkedHashMap), (r3 I:java.lang.Object) java.util.LinkedHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x009d: INVOKE  \l  (r1 I:java.util.HashMap)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x00a0|0x00a0: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00ad A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x00a2|0x00a2: IGET  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[Catch:\{ all \-\> 0x00af \}]\l0x00a4: IGET  (r1 I:java.util.LinkedHashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mPending java.util.LinkedHashMap A[Catch:\{ all \-\> 0x00af \}]\l0x00a6: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.LinkedHashMap), (r3 I:java.lang.Object) java.util.LinkedHashMap.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x00af \}]\l0x00aa: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l0x00ab: CHECK_CAST  (r2 I:org.osmdroid.tileprovider.MapTileRequestState) = (org.osmdroid.tileprovider.MapTileRequestState) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x00ad|0x00ad: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x00ae|0x00ae: RETURN  (r2 I:org.osmdroid.tileprovider.MapTileRequestState) A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x00af|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x00af: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x00af \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x00b0|0x00b0: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00af \}, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x00b1|0x00b1: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected org.osmdroid.tileprovider.MapTileRequestState org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.nextTile((r8 'this' I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

