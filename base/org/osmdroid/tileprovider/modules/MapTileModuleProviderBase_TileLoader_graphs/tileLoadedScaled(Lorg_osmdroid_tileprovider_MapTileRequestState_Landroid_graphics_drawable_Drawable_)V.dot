digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.tileLoadedScaled(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (org.osmdroid.config.Configuration.getInstance().isDebugTileProviders() == false) goto L_0x0036\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"TileLoader.tileLoadedScaled() on provider: \")\lr1.append(r4.this$0.getName())\lr1.append(\" with tile: \")\lr1.append(org.osmdroid.util.MapTileIndex.toString(r5.getMapTile()))\landroid.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, r1.toString())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0036|r4.this$0.removeTileFromQueues(r5.getMapTile())\lorg.osmdroid.tileprovider.ExpirableBitmapDrawable.setState(r6, \-3)\lr5.getCallback().mapTileRequestExpiredTile(r5, r6)\l}"];
Node_4 [shape=record,label="{4\:\ 0x004a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.tileLoadedScaled((r4v0 'this' org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader A[IMMUTABLE_TYPE, THIS]), (r5v0 org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

