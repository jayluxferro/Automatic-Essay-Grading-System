digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.getInputStream(JLorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.ArrayList\<org.osmdroid.tileprovider.modules.IArchiveFile\>) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.mArchiveFiles java.util.ArrayList A[Catch:\{ all \-\> 0x004c \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0049 A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x004c \}]\l0x0011: CHECK_CAST  (r1 I:org.osmdroid.tileprovider.modules.IArchiveFile) = (org.osmdroid.tileprovider.modules.IArchiveFile) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r2 I:java.io.InputStream) = \l  (r1 I:org.osmdroid.tileprovider.modules.IArchiveFile)\l  (r7 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r5 I:long)\l org.osmdroid.tileprovider.modules.IArchiveFile.getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource, long):java.io.InputStream type: INTERFACE A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  (r7 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x004c \}]\l0x001f: INVOKE  (r7 I:boolean) = (r7 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMode():boolean type: INTERFACE A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0047 A[Catch:\{ all \-\> 0x004c \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: CONST_STR  (r7 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x004c \}]\l0x0027: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x004c \}]\l0x0029: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x004c \}]\l0x002c: CONST_STR  (r3 I:java.lang.String) =  \"Found tile \" A[Catch:\{ all \-\> 0x004c \}]\l0x002e: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l0x0031: INVOKE  (r5 I:java.lang.String) = (r5 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x004c \}]\l0x0035: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l0x0038: CONST_STR  (r5 I:java.lang.String) =  \" in \" A[Catch:\{ all \-\> 0x004c \}]\l0x003a: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l0x0040: INVOKE  (r5 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004c \}]\l0x0044: INVOKE  (r7 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x004c \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: RETURN  (r2 I:java.io.InputStream) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0049|0x0049: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: RETURN  (r5 I:java.io.InputStream) \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x004c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private synchronized java.io.InputStream org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.getInputStream((r4 'this' I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider A[IMMUTABLE_TYPE, THIS]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

