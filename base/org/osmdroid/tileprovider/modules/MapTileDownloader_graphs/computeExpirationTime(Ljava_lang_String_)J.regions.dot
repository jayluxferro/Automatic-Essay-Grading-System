digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileDownloader.computeExpirationTime(Ljava\/lang\/String;)J" {
subgraph cluster_Region_1380775197 {
label = "R(3:(2:(1:4)|11)|9|11) | DECL_VAR: java.lang.Long null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1532067328 {
label = "IF [B:0:0x0000, B:2:0x0006] THEN: R(2:(1:4)|11) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lADDED_TO_REGION\l|if (r5 != null) goto L_0x0002\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|ADDED_TO_REGION\l|if (r5.length() \> 0) goto L_0x0008\l}"];
subgraph cluster_Region_1207811437 {
label = "R(2:(1:4)|11)";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1741200826 {
label = "Try: R(1:4) catches: R(2:5|(1:8))";
node [shape=record,color=blue];
subgraph cluster_Region_826649830 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ ?|Catch:\{ Exception \-\> 0x001d \}\lSplitter:B:3:0x0008\l|java.lang.Long r0 = java.lang.Long.valueOf(org.osmdroid.config.Configuration.getInstance().getHttpHeaderDateTimeFormat().parse(r5).getTime())     \/\/ Catch:\{ Exception \-\> 0x001d \}\l}"];
}
subgraph cluster_Region_939912283 {
label = "R(2:5|(1:8)) | ExcHandler: Exception (r0v4 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|ExcHandler: Exception (r0v4 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:3:0x0008\l}"];
subgraph cluster_IfRegion_1752445989 {
label = "IF [B:7:0x0026] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0026|if (org.osmdroid.config.Configuration.getInstance().isDebugMapTileDownloader() == true) goto L_0x0028\l}"];
subgraph cluster_Region_1120463507 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|android.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, \"Unable to parse expiration tag for tile, using default, server returned \" + r5, r0)\l}"];
}
}
}
}
Node_11 [shape=record,label="{11\:\ 0x0043|RETURN\l|return computeExpirationTime(r0)\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x003e|r0 = null\l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|RETURN\l|return computeExpirationTime(r0)\l}"];
}
subgraph cluster_Region_939912283 {
label = "R(2:5|(1:8)) | ExcHandler: Exception (r0v4 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|ExcHandler: Exception (r0v4 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:3:0x0008\l}"];
subgraph cluster_IfRegion_1752445989 {
label = "IF [B:7:0x0026] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0026|if (org.osmdroid.config.Configuration.getInstance().isDebugMapTileDownloader() == true) goto L_0x0028\l}"];
subgraph cluster_Region_1120463507 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0028|android.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, \"Unable to parse expiration tag for tile, using default, server returned \" + r5, r0)\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008|SYNTHETIC\lSplitter:B:3:0x0008\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001e}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x003f|PHI: r0 \l  PHI: (r0v0 java.lang.Long) = (r0v2 java.lang.Long), (r0v9 java.lang.Long) binds: [B:9:0x003e, B:4:?] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{private long org.osmdroid.tileprovider.modules.MapTileDownloader.computeExpirationTime((r4v0 'this' org.osmdroid.tileprovider.modules.MapTileDownloader A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_9[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_6 -> Node_7;
Node_10 -> Node_11;
}

