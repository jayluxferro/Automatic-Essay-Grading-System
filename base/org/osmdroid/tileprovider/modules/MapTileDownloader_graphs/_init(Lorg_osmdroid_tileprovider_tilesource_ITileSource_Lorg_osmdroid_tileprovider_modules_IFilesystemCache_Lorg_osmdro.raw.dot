digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileDownloader.\<init\>(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;Lorg\/osmdroid\/tileprovider\/modules\/IFilesystemCache;Lorg\/osmdroid\/tileprovider\/modules\/INetworkAvailablityCheck;II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l  (r4 I:int)\l  (r5 I:int)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.\<init\>(int, int):void type: DIRECT \l0x0003: NEW_INSTANCE  (r4 I:java.util.concurrent.atomic.AtomicReference) =  java.util.concurrent.atomic.AtomicReference \l0x0005: INVOKE  (r4 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r4 I:java.util.concurrent.atomic.AtomicReference\<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase\>)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mTileSource java.util.concurrent.atomic.AtomicReference \l0x000a: NEW_INSTANCE  (r4 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader) =  org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader \l0x000c: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.\<init\>(org.osmdroid.tileprovider.modules.MapTileDownloader):void type: DIRECT \l0x000f: IPUT  \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mTileLoader org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader \l0x0011: NEW_INSTANCE  (r4 I:org.osmdroid.util.UrlBackoff) =  org.osmdroid.util.UrlBackoff \l0x0013: INVOKE  (r4 I:org.osmdroid.util.UrlBackoff) org.osmdroid.util.UrlBackoff.\<init\>():void type: DIRECT \l0x0016: IPUT  \l  (r4 I:org.osmdroid.util.UrlBackoff)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mUrlBackoff org.osmdroid.util.UrlBackoff \l0x0018: NEW_INSTANCE  (r4 I:org.osmdroid.tileprovider.modules.TileDownloader) =  org.osmdroid.tileprovider.modules.TileDownloader \l0x001a: INVOKE  (r4 I:org.osmdroid.tileprovider.modules.TileDownloader) org.osmdroid.tileprovider.modules.TileDownloader.\<init\>():void type: DIRECT \l0x001d: IPUT  \l  (r4 I:org.osmdroid.tileprovider.modules.TileDownloader)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mTileDownloader org.osmdroid.tileprovider.modules.TileDownloader \l0x001f: IPUT  \l  (r2 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mFilesystemCache org.osmdroid.tileprovider.modules.IFilesystemCache \l0x0021: IPUT  \l  (r3 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)\l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.mNetworkAvailablityCheck org.osmdroid.tileprovider.modules.INetworkAvailablityCheck \l0x0023: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader)\l  (r1 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.MapTileDownloader.setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0026|0x0026: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.MapTileDownloader.\<init\>((r0 'this' I:org.osmdroid.tileprovider.modules.MapTileDownloader A[IMMUTABLE_TYPE, THIS]), (r1 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:org.osmdroid.tileprovider.modules.IFilesystemCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

