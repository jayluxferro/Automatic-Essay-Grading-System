digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(ILandroid\/graphics\/Rect;)Ljava\/lang\/StringBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long r3 = (long) ((1 \<\< (r14 + 1)) + \-1)\llong r11 = (long) r14\llong r7 = getIndex(0, 0, r11)\llong r0 = getIndex(r3, r3, r11)\ljava.lang.String r2 = extractXFromKeyInSQL(r14)\ljava.lang.String r14 = extractYFromKeyInSQL(r14)\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append('(')\lr3.append(org.osmdroid.tileprovider.modules.DatabaseFileArchive.COLUMN_KEY)\lr3.append(\" between \")\lr3.append(r7)\lr3.append(\" and \")\lr3.append(r0)\l}"];
Node_1 [shape=record,label="{1\:\ 0x003f|if (r15 == null) goto L_0x00d7\l}"];
Node_2 [shape=record,label="{2\:\ 0x0041|r3.append(\" and \")\l}"];
Node_3 [shape=record,label="{3\:\ 0x004a|if (r15.left != r15.right) goto L_0x005a\l}"];
Node_4 [shape=record,label="{4\:\ 0x004c|r3.append(r2)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.EQUAL_TO_OPERATION)\lr3.append(r15.left)\l}"];
Node_5 [shape=record,label="{5\:\ 0x005a|r3.append(\"(\")\lr3.append(r2)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_EQUAL_TO_OPERATION)\lr3.append(r15.left)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0070|if (r15.left \>= r15.right) goto L_0x0075\l}"];
Node_7 [shape=record,label="{7\:\ 0x0072|java.lang.String r0 = \" and \"\l}"];
Node_8 [shape=record,label="{8\:\ 0x0075|java.lang.String r0 = \" or \"\l}"];
Node_9 [shape=record,label="{9\:\ 0x0077|PHI: r0 \l  PHI: (r0v19 java.lang.String) = (r0v23 java.lang.String), (r0v24 java.lang.String) binds: [B:8:0x0075, B:7:0x0072] A[DONT_GENERATE, DONT_INLINE]\l|r3.append(r0)\lr3.append(r2)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.LESS_THAN_EQUAL_TO_OPERATION)\lr3.append(r15.right)\lr3.append(\")\")\l}"];
Node_10 [shape=record,label="{10\:\ 0x008c|r3.append(\" and \")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0095|if (r15.top != r15.bottom) goto L_0x00a5\l}"];
Node_12 [shape=record,label="{12\:\ 0x0097|r3.append(r14)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.EQUAL_TO_OPERATION)\lr3.append(r15.top)\l}"];
Node_13 [shape=record,label="{13\:\ 0x00a5|r3.append(\"(\")\lr3.append(r14)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.GREATER_THAN_EQUAL_TO_OPERATION)\lr3.append(r15.top)\l}"];
Node_14 [shape=record,label="{14\:\ 0x00bb|if (r15.top \>= r15.bottom) goto L_0x00c0\l}"];
Node_15 [shape=record,label="{15\:\ 0x00bd|java.lang.String r0 = \" and \"\l}"];
Node_16 [shape=record,label="{16\:\ 0x00c0|java.lang.String r0 = \" or \"\l}"];
Node_17 [shape=record,label="{17\:\ 0x00c2|PHI: r0 \l  PHI: (r0v12 java.lang.String) = (r0v13 java.lang.String), (r0v14 java.lang.String) binds: [B:16:0x00c0, B:15:0x00bd] A[DONT_GENERATE, DONT_INLINE]\l|r3.append(r0)\lr3.append(r14)\lr3.append(com.j256.ormlite.stmt.query.SimpleComparison.LESS_THAN_EQUAL_TO_OPERATION)\lr3.append(r15.bottom)\lr3.append(\")\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x00d7|r3.append(')')\l}"];
Node_19 [shape=record,label="{19\:\ 0x00dc|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{protected java.lang.StringBuilder org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause((r13v0 'this' org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r14v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

