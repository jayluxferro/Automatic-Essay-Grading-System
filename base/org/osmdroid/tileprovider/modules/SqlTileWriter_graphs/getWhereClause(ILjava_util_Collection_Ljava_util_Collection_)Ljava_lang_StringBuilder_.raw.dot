digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(ILjava\/util\/Collection;Ljava\/util\/Collection;)Ljava\/lang\/StringBuilder;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[int, float, short, byte, char]) = (40 ?[int, float, short, byte, char]) \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000b: INVOKE  (r2 I:java.lang.StringBuilder) = \l  (r5 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r6 I:int)\l  (r2 I:android.graphics.Rect)\l org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(int, android.graphics.Rect):java.lang.StringBuilder type: VIRTUAL \l0x000f: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r2 I:java.lang.CharSequence)\l java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder type: VIRTUAL \l0x0012: CONST  (r2 I:?[int, float, short, byte, char]) = (41 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  (r3 I:int) = (r7 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: CONST_STR  (r3 I:java.lang.String) =  \" and (\" \l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: CONST_STR  (r3 I:java.lang.String) =  \"\" \l0x0023: INVOKE  (r7 I:java.util.Iterator) = (r7 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: INVOKE  (r4 I:boolean) = (r7 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0046 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: INVOKE  (r4 I:java.lang.Object) = (r7 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0031: CHECK_CAST  (r4 I:android.graphics.Rect) = (android.graphics.Rect) (r4 I:?[OBJECT, ARRAY]) \l0x0033: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0036: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0039: INVOKE  (r3 I:java.lang.StringBuilder) = \l  (r5 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r6 I:int)\l  (r4 I:android.graphics.Rect)\l org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(int, android.graphics.Rect):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r3 I:java.lang.CharSequence)\l java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0043: CONST_STR  (r3 I:java.lang.String) =  \" or \" \l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|0x0046: CONST_STR  (r7 I:java.lang.String) =  \")\" \l0x0048: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0082 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|0x004d: INVOKE  (r7 I:int) = (r8 I:java.util.Collection) java.util.Collection.size():int type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0051|0x0051: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0082 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0053|0x0053: CONST_STR  (r7 I:java.lang.String) =  \" and not(\" \l0x0055: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: CONST_STR  (r7 I:java.lang.String) =  \"\" \l0x005a: INVOKE  (r8 I:java.util.Iterator) = (r8 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x005e|0x005e: INVOKE  (r3 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0062|0x0062: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x007d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: INVOKE  (r3 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0068: CHECK_CAST  (r3 I:android.graphics.Rect) = (android.graphics.Rect) (r3 I:?[OBJECT, ARRAY]) \l0x006a: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0070: INVOKE  (r7 I:java.lang.StringBuilder) = \l  (r5 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r6 I:int)\l  (r3 I:android.graphics.Rect)\l org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(int, android.graphics.Rect):java.lang.StringBuilder type: VIRTUAL \l0x0074: INVOKE  \l  (r0 I:java.lang.StringBuilder)\l  (r7 I:java.lang.CharSequence)\l java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder type: VIRTUAL \l0x0077: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x007a: CONST_STR  (r7 I:java.lang.String) =  \" or \" \l}"];
Node_16 [shape=record,label="{16\:\ 0x007d|0x007d: CONST_STR  (r6 I:java.lang.String) =  \")\" \l0x007f: INVOKE  (r0 I:java.lang.StringBuilder), (r6 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0082|0x0082: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0085|0x0085: RETURN  (r0 I:java.lang.StringBuilder) \l}"];
MethodNode[shape=record,label="{protected java.lang.StringBuilder org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause((r5 'this' I:org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.Collection\<android.graphics.Rect\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.Collection\<android.graphics.Rect\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/Collection\<, Landroid\/graphics\/Rect;, \>;, Ljava\/util\/Collection\<, Landroid\/graphics\/Rect;, \>;), Ljava\/lang\/StringBuilder;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

