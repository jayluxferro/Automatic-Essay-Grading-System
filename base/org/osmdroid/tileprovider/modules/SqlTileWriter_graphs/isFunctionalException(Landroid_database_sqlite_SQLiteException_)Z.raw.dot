digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.isFunctionalException(Landroid\/database\/sqlite\/SQLiteException;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r3 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Class) java.lang.Class.getSimpleName():java.lang.String type: VIRTUAL \l0x0008: INVOKE  (r0 I:int) = (r3 I:java.lang.String) java.lang.String.hashCode():int type: VIRTUAL \l0x000c: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[\-2070793707, \-1764604492, \-1458338457, \-1115484154, \-1113540439, \-672728977, \-669227773, \-119599910, 20404371, 124364321, 325468747, 532355648, 666588538, 1061155622, 1400520606, 1939376593] t:[0x00b6, 0x00ac, 0x00a2, 0x0097, 0x008c, 0x0081, 0x0077, 0x006c, 0x0062, 0x0057, 0x004c, 0x0040, 0x0035, 0x002a, 0x001e, 0x0013] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteDatatypeMismatchException\" \l0x0015: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteDatabaseLockedException\" \l0x0020: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r3 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteConstraintException\" \l0x002c: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|0x0035: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteBlobTooBigException\" \l0x0037: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|0x0040: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteDiskIOException\" \l0x0042: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|0x0046: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: CONST  (r3 I:?[int, float, short, byte, char]) = (12 ?[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x004c|0x004c: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteAbortException\" \l0x004e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0052|0x0052: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|0x0054: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteDoneException\" \l0x0059: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x005d|0x005d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_23 [shape=record,label="{23\:\ 0x005f|0x005f: CONST  (r3 I:?[int, float, short, byte, char]) = (13 ?[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0062|0x0062: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteMisuseException\" \l0x0064: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_26 [shape=record,label="{26\:\ 0x006a|0x006a: CONST  (r3 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x006c|0x006c: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteCantOpenDatabaseException\" \l0x006e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0072|0x0072: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0074|0x0074: CONST  (r3 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0077|0x0077: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteTableLockedException\" \l0x0079: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x007d|0x007d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_32 [shape=record,label="{32\:\ 0x007f|0x007f: CONST  (r3 I:?[int, float, short, byte, char]) = (6 ?[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0081|0x0081: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteAccessPermException\" \l0x0083: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x0087|0x0087: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0089|0x0089: CONST  (r3 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x008c|0x008c: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteDatabaseCorruptException\" \l0x008e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0092|0x0092: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0094|0x0094: CONST  (r3 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0097|0x0097: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteReadOnlyDatabaseException\" \l0x0099: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_40 [shape=record,label="{40\:\ 0x009d|0x009d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_41 [shape=record,label="{41\:\ 0x009f|0x009f: CONST  (r3 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x00a2|0x00a2: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteBindOrColumnIndexOutOfRangeException\" \l0x00a4: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x00a8|0x00a8: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00aa|0x00aa: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_45 [shape=record,label="{45\:\ 0x00ac|0x00ac: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteFullException\" \l0x00ae: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_46 [shape=record,label="{46\:\ 0x00b2|0x00b2: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00b4|0x00b4: CONST  (r3 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b6|0x00b6: CONST_STR  (r0 I:java.lang.String) =  \"SQLiteOutOfMemoryException\" \l0x00b8: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_49 [shape=record,label="{49\:\ 0x00bc|0x00bc: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00c1 \l}"];
Node_50 [shape=record,label="{50\:\ 0x00be|0x00be: CONST  (r3 I:?[int, float, short, byte, char]) = (14 ?[int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x00c1|0x00c1: CONST  (r3 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x00c2|0x00c2: SWITCH  \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] t:[0x00c7, 0x00c7, 0x00c7, 0x00c7, 0x00c7, 0x00c7, 0x00c7, 0x00c6, 0x00c6, 0x00c6, 0x00c6, 0x00c6, 0x00c6, 0x00c6, 0x00c6, 0x00c6] \l}"];
Node_53 [shape=record,label="{53\:\ 0x00c5|0x00c5: RETURN  (r2 I:boolean) \l}"];
Node_54 [shape=record,label="{54\:\ 0x00c6|0x00c6: RETURN  (r2 I:boolean) \l}"];
Node_55 [shape=record,label="{55\:\ 0x00c7|0x00c7: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean org.osmdroid.tileprovider.modules.SqlTileWriter.isFunctionalException((r3 I:android.database.sqlite.SQLiteException A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_3;
Node_1 -> Node_6;
Node_1 -> Node_9;
Node_1 -> Node_12;
Node_1 -> Node_15;
Node_1 -> Node_18;
Node_1 -> Node_21;
Node_1 -> Node_24;
Node_1 -> Node_27;
Node_1 -> Node_30;
Node_1 -> Node_33;
Node_1 -> Node_36;
Node_1 -> Node_39;
Node_1 -> Node_42;
Node_1 -> Node_45;
Node_1 -> Node_48;
Node_1 -> Node_51;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_51;
Node_5 -> Node_52;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_51;
Node_8 -> Node_52;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_51;
Node_11 -> Node_52;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_51;
Node_14 -> Node_52;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_51;
Node_17 -> Node_52;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_51;
Node_20 -> Node_52;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_51;
Node_23 -> Node_52;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_51;
Node_26 -> Node_52;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_51;
Node_29 -> Node_52;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_51;
Node_32 -> Node_52;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_51;
Node_35 -> Node_52;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_51;
Node_38 -> Node_52;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_51;
Node_41 -> Node_52;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_51;
Node_44 -> Node_52;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_51;
Node_47 -> Node_52;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_52 -> Node_54;
Node_52 -> Node_55;
}

