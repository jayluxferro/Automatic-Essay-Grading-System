digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.getExpirationTimestamp(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;J)Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r4 I:long) = (r4 I:long) org.osmdroid.tileprovider.modules.SqlTileWriter.getIndex(long):long type: STATIC A[Catch:\{ Exception \-\> 0x002c, all \-\> 0x0029 \}, TRY_ENTER]\l0x0005: INVOKE  (r3 I:java.lang.String[]) = \l  (r4 I:long)\l  (r3 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.SqlTileWriter.getPrimaryKeyParameters(long, org.osmdroid.tileprovider.tilesource.ITileSource):java.lang.String[] type: STATIC A[Catch:\{ Exception \-\> 0x002c, all \-\> 0x0029 \}]\l0x0009: SGET  (r4 I:java.lang.String[]) =  org.osmdroid.tileprovider.modules.SqlTileWriter.expireQueryColumn java.lang.String[] A[Catch:\{ Exception \-\> 0x002c, all \-\> 0x0029 \}]\l0x000b: INVOKE  (r3 I:android.database.Cursor) = \l  (r2 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r3 I:java.lang.String[])\l  (r4 I:java.lang.String[])\l org.osmdroid.tileprovider.modules.SqlTileWriter.getTileCursor(java.lang.String[], java.lang.String[]):android.database.Cursor type: VIRTUAL A[Catch:\{ Exception \-\> 0x002c, all \-\> 0x0029 \}]\l0x000e: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|SYNTHETIC\lSplitter:B:3:0x000f\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000f\l|0x000f: INVOKE  (r4 I:boolean) = (r3 I:android.database.Cursor) android.database.Cursor.moveToNext():boolean type: INTERFACE A[Catch:\{ Exception \-\> 0x0027 \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0024 A[Catch:\{ Exception \-\> 0x0027 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x0027 \}]\l0x0016: INVOKE  (r4 I:long) = (r3 I:android.database.Cursor), (r4 I:int) android.database.Cursor.getLong(int):long type: INTERFACE A[Catch:\{ Exception \-\> 0x0027 \}]\l0x001a: INVOKE  (r4 I:java.lang.Long) = (r4 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ Exception \-\> 0x0027 \}]\l0x001d: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: RETURN  (r4 I:java.lang.Long) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|ExcHandler: Exception null\lSplitter:B:3:0x000f\l|0x0027: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|ExcHandler: Exception null\lSplitter:B:1:0x0001\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x002d|0x002d: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|0x002e: CONST_STR  (r5 I:java.lang.String) =  \"OsmDroid\" \l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"error getting expiration date from the tile cache\" \l}"];
Node_19 [shape=record,label="{19\:\ 0x0032|SYNTHETIC\lSplitter:B:19:0x0032\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0032\l|0x0032: INVOKE  \l  (r5 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x003e \}, TRY_ENTER]\l0x0035: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r4 I:java.lang.Exception)\l org.osmdroid.tileprovider.modules.SqlTileWriter.catchException(java.lang.Exception):void type: VIRTUAL A[Catch:\{ all \-\> 0x003e \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003d \l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|0x003a: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l}"];
Node_23 [shape=record,label="{23\:\ 0x003d|0x003d: RETURN  (r0 I:java.lang.Long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x003e|ExcHandler: all null\lSplitter:B:19:0x0032\l|0x003e: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x003f|0x003f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0044 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0041|0x0041: INVOKE  (r3 I:android.database.Cursor) android.database.Cursor.close():void type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x0044|0x0044: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Long org.osmdroid.tileprovider.modules.SqlTileWriter.getExpirationTimestamp((r2 'this' I:org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r3 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_23;
Node_10 -> Node_22[style=dashed];
Node_12 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_20 -> Node_24;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
}

