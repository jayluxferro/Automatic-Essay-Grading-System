digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.remove(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|android.database.sqlite.SQLiteDatabase r0 = getDb()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 == null) goto L_0x005e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r0.isOpen() != false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|SYNTHETIC\lSplitter:B:4:0x000f\l}"];
Node_5 [shape=record,label="{5\:\ ?|Catch:\{ Exception \-\> 0x001f \}\lSplitter:B:4:0x000f\l|r0.delete(\"tiles\", primaryKey, getPrimaryKeyParameters(getIndex(r9), r8))     \/\/ Catch:\{ Exception \-\> 0x001f \}\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|RETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|ExcHandler: Exception (r3v2 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:4:0x000f\l|java.lang.Exception r3 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Unable to delete cached tile from \")\lr5.append(r8.name())\lr5.append(\" \")\lr5.append(org.osmdroid.util.MapTileIndex.toString(r9))\lr5.append(\" db is \")\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|if (r0 != null) goto L_0x0049\l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|java.lang.String r8 = \"null\"\l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|java.lang.String r8 = \"not null\"\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|PHI: r8 \l  PHI: (r8v12 java.lang.String) = (r8v16 java.lang.String), (r8v17 java.lang.String) binds: [B:11:0x0049, B:10:0x0046] A[DONT_GENERATE, DONT_INLINE]\l|r5.append(r8)\landroid.util.Log.e(org.osmdroid.api.IMapView.LOGTAG, r5.toString(), r3)\lorg.osmdroid.tileprovider.util.Counters.fileCacheSaveErrors = org.osmdroid.tileprovider.util.Counters.fileCacheSaveErrors + 1\lcatchException(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x005e|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Unable to delete cached tile from \")\lr3.append(r8.name())\lr3.append(\" \")\lr3.append(org.osmdroid.util.MapTileIndex.toString(r9))\lr3.append(\", database not available.\")\landroid.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, r3.toString())\lorg.osmdroid.tileprovider.util.Counters.fileCacheSaveErrors = org.osmdroid.tileprovider.util.Counters.fileCacheSaveErrors + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x008e|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.tileprovider.modules.SqlTileWriter.remove((r7v0 'this' org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r8v0 org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

