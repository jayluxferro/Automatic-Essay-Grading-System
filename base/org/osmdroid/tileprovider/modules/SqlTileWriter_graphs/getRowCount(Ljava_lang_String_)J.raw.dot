digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount(Ljava\/lang\/String;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r0 I:long) = \l  (r3 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r4 I:java.lang.String)\l  (r4 I:java.lang.String[])\l org.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount(java.lang.String, java.lang.String[]):long type: VIRTUAL \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"provider=?\" \l0x000a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000b: NEW_ARRAY  (r1 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x000d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: APUT  \l  (r1 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[OBJECT, ARRAY])\l \l0x0010: INVOKE  (r0 I:long) = \l  (r3 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String[])\l org.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount(java.lang.String, java.lang.String[]):long type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long org.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount((r3 'this' I:org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

