digraph "CFG fororg.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount(Ljava\/lang\/String;ILjava\/util\/Collection;Ljava\/util\/Collection;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r3 I:java.lang.StringBuilder) = \l  (r1 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r3 I:int)\l  (r4 I:java.util.Collection)\l  (r5 I:java.util.Collection)\l org.osmdroid.tileprovider.modules.SqlTileWriter.getWhereClause(int, java.util.Collection, java.util.Collection):java.lang.StringBuilder type: VIRTUAL \l0x0009: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: CONST_STR  (r3 I:java.lang.String) =  \" and provider=?\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001d: NEW_ARRAY  (r4 I:java.lang.String[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x001f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: APUT  \l  (r4 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r2 I:?[OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: INVOKE  (r2 I:long) = \l  (r1 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String[])\l org.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount(java.lang.String, java.lang.String[]):long type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public long org.osmdroid.tileprovider.modules.SqlTileWriter.getRowCount((r1 'this' I:org.osmdroid.tileprovider.modules.SqlTileWriter A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Collection\<android.graphics.Rect\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Collection\<android.graphics.Rect\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/lang\/String;, I, Ljava\/util\/Collection\<, Landroid\/graphics\/Rect;, \>;, Ljava\/util\/Collection\<, Landroid\/graphics\/Rect;, \>;)J]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

