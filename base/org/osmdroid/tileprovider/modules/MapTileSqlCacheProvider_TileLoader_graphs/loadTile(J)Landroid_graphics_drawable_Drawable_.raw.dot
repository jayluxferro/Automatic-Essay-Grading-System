digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.TileLoader.loadTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReference) = \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.access$000(org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider):java.util.concurrent.atomic.AtomicReference type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (org.osmdroid.tileprovider.tilesource.ITileSource) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider \l0x0012: INVOKE  (r2 I:org.osmdroid.tileprovider.modules.SqlTileWriter) = \l  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.access$100(org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider):org.osmdroid.tileprovider.modules.SqlTileWriter type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x006a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|SYNTHETIC\lSplitter:B:5:0x0018\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0018\l|0x0018: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}, TRY_ENTER]\l0x001a: INVOKE  (r2 I:org.osmdroid.tileprovider.modules.SqlTileWriter) = \l  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.access$100(org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider):org.osmdroid.tileprovider.modules.SqlTileWriter type: STATIC A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x001e: INVOKE  (r0 I:android.graphics.drawable.Drawable) = \l  (r2 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r4 I:long)\l org.osmdroid.tileprovider.modules.SqlTileWriter.loadTile(org.osmdroid.tileprovider.tilesource.ITileSource, long):android.graphics.drawable.Drawable type: VIRTUAL A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: SGET  (r2 I:int) =  org.osmdroid.tileprovider.util.Counters.fileCacheMiss int A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x0026: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x0028: SPUT  (r2 I:int) org.osmdroid.tileprovider.util.Counters.fileCacheMiss int A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x002a: GOTO  \-\> 0x0031 A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: SGET  (r2 I:int) =  org.osmdroid.tileprovider.util.Counters.fileCacheHit int A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x002d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}]\l0x002f: SPUT  (r2 I:int) org.osmdroid.tileprovider.util.Counters.fileCacheHit int A[Catch:\{ LowMemoryException \-\> 0x003b, Throwable \-\> 0x0032 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|ExcHandler: Throwable null\lSplitter:B:5:0x0018\l|0x0032: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: CONST_STR  (r5 I:java.lang.String) =  \"OsmDroid\" \l0x0035: CONST_STR  (r0 I:java.lang.String) =  \"Error loading tile\" \l0x0037: INVOKE  \l  (r5 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|ExcHandler: LowMemoryException null\lSplitter:B:5:0x0018\l|0x003b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0041: CONST_STR  (r2 I:java.lang.String) =  \"LowMemoryException downloading MapTile: \" \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r4 I:java.lang.String) = (r4 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC \l0x004a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: CONST_STR  (r4 I:java.lang.String) =  \" : \" \l0x004f: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0055: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0059: CONST_STR  (r5 I:java.lang.String) =  \"OsmDroid\" \l0x005b: INVOKE  (r5 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.w(java.lang.String, java.lang.String):int type: STATIC \l0x005e: SGET  (r4 I:int) =  org.osmdroid.tileprovider.util.Counters.fileCacheOOM int \l0x0060: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0062: SPUT  (r4 I:int) org.osmdroid.tileprovider.util.Counters.fileCacheOOM int \l0x0064: NEW_INSTANCE  (r4 I:org.osmdroid.tileprovider.modules.CantContinueException) =  org.osmdroid.tileprovider.modules.CantContinueException \l0x0066: INVOKE  \l  (r4 I:org.osmdroid.tileprovider.modules.CantContinueException)\l  (r0 I:java.lang.Throwable)\l org.osmdroid.tileprovider.modules.CantContinueException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0069|0x0069: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x006a|0x006a: CONST_STR  (r4 I:java.lang.String) =  \"OsmDroid\" \l0x006c: CONST_STR  (r5 I:java.lang.String) =  \"TileLoader failed to load tile due to mWriter being null (map shutdown?)\" \l0x006e: INVOKE  (r4 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0071|0x0071: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.TileLoader.loadTile((r3 'this' I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.modules.CantContinueException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_5 -> Node_14;
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

