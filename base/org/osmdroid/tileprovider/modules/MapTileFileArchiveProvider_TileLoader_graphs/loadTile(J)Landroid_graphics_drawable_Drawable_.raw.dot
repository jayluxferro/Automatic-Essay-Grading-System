digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.TileLoader.loadTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider) = \l  (r6 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReference) = \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.access$000(org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider):java.util.concurrent.atomic.AtomicReference type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (org.osmdroid.tileprovider.tilesource.ITileSource) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: INVOKE  (r2 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}, TRY_ENTER]\l0x0014: INVOKE  (r2 I:boolean) = (r2 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMode():boolean type: INTERFACE A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST_STR  (r2 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x001c: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x001e: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"Archives \- Tile doesn't exist: \" A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0023: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0026: INVOKE  (r4 I:java.lang.String) = (r7 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x002a: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x002d: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0031: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider) = \l  (r6 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0036: INVOKE  (r2 I:java.io.InputStream) = \l  (r2 I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider)\l  (r7 I:long)\l  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.access$100(org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider, long, org.osmdroid.tileprovider.tilesource.ITileSource):java.io.InputStream type: STATIC A[Catch:\{ Throwable \-\> 0x0071, all \-\> 0x006e \}]\l0x0039: NOP   A[TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0068 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|SYNTHETIC\lSplitter:B:9:0x003c\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x003c\l|0x003c: INVOKE  (r3 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ Throwable \-\> 0x0066 \}, TRY_ENTER]\l0x0040: INVOKE  (r3 I:boolean) = (r3 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMode():boolean type: INTERFACE A[Catch:\{ Throwable \-\> 0x0066 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0044|0x0044: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0060 A[Catch:\{ Throwable \-\> 0x0066 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: CONST_STR  (r3 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x0048: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x004a: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x004d: CONST_STR  (r5 I:java.lang.String) =  \"Use tile from archive: \" A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x004f: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x0052: INVOKE  (r7 I:java.lang.String) = (r7 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x0056: INVOKE  (r4 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x0059: INVOKE  (r7 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x005d: INVOKE  (r3 I:java.lang.String), (r7 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ Throwable \-\> 0x0066 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0060|0x0060: INVOKE  (r7 I:android.graphics.drawable.Drawable) = \l  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r2 I:java.io.InputStream)\l org.osmdroid.tileprovider.tilesource.ITileSource.getDrawable(java.io.InputStream):android.graphics.drawable.Drawable type: INTERFACE A[Catch:\{ Throwable \-\> 0x0066 \}]\l0x0063: NOP   A[TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|ExcHandler: Throwable null\lSplitter:B:9:0x003c\l|0x0066: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0068|0x0068: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x007d \l}"];
Node_18 [shape=record,label="{18\:\ 0x006a|0x006a: INVOKE  (r2 I:java.io.Closeable) org.osmdroid.tileprovider.util.StreamUtils.closeStream(java.io.Closeable):void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x006e|ExcHandler: all null\lSplitter:B:3:0x0010\l|0x006e: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x006f|0x006f: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|ExcHandler: Throwable null\lSplitter:B:3:0x0010\l|0x0071: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0072|0x0072: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0073|0x0073: CONST_STR  (r8 I:java.lang.String) =  \"OsmDroid\" \l0x0075: CONST_STR  (r0 I:java.lang.String) =  \"Error loading tile\" \l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|SYNTHETIC\lSplitter:B:24:0x0077\l}"];
Node_25 [shape=record,label="{25\:\ ?|Splitter:B:24:0x0077\l|0x0077: INVOKE  \l  (r8 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r7 I:java.lang.Throwable)\l android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC A[Catch:\{ all \-\> 0x007e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x007a|0x007a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x007d \l}"];
Node_28 [shape=record,label="{28\:\ 0x007d|0x007d: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x007e|ExcHandler: all null\lSplitter:B:24:0x0077\l|0x007e: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_30 [shape=record,label="{30\:\ 0x007f|0x007f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0084 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0081|0x0081: INVOKE  (r2 I:java.io.Closeable) org.osmdroid.tileprovider.util.StreamUtils.closeStream(java.io.Closeable):void type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x0084|0x0084: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider.TileLoader.loadTile((r6 'this' I:org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_21;
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_17;
Node_15 -> Node_23;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_28;
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_25 -> Node_29;
Node_26 -> Node_28;
Node_26 -> Node_18[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
}

