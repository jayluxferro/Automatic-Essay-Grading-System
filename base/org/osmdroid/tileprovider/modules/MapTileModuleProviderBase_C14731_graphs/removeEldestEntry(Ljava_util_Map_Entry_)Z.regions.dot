digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.1.removeEldestEntry(Ljava\/util\/Map$Entry;)Z" {
subgraph cluster_Region_1350497552 {
label = "R(1:(2:(1:2)|(3:3|(2:6|(1:(2:10|11)))|12))) | DECL_VAR: org.osmdroid.tileprovider.MapTileRequestState null\l";
node [shape=record,color=blue];
subgraph cluster_Region_427281 {
label = "R(2:(1:2)|(3:3|(2:6|(1:(2:10|11)))|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1098236413 {
label = "IF [B:1:0x0007] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0007|if (size() \<= r5) goto L_0x0009\l}"];
subgraph cluster_Region_993347645 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0009|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_482671678 {
label = "R(3:3|(2:6|(1:(2:10|11)))|12)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|java.util.Iterator r6 = org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.this.mPending.keySet().iterator()\l}"];
subgraph cluster_LoopRegion_685690042 {
label = "LOOP:0: (2:6|(1:(2:10|11)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r6.hasNext() != false) goto L_0x001c\l}"];
subgraph cluster_Region_1335934847 {
label = "R(2:6|(1:(2:10|11)))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001c|long long r2 = r0.longValue()\l}"];
subgraph cluster_Region_1204521589 {
label = "R(1:(2:10|11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1161084214 {
label = "IF [B:7:0x0032, B:9:0x0042] THEN: R(2:10|11) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0032|if (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.this.mWorking.containsKey(java.lang.Long.valueOf(r2)) != true) goto L_0x0034\l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|ADDED_TO_REGION\l|if ((r0 = org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.this.mPending.get(java.lang.Long.valueOf(r2))) != null) goto L_0x0044\l}"];
subgraph cluster_Region_203072624 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0044|org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.this.removeTileFromQueues(r2)\lr0.getCallback().mapTileRequestFailedExceedsMaxQueueSize(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|RETURN\l|return false\l}"];
}
}
}
}
}
Node_12 [shape=record,label="{12\:\ 0x0051|RETURN\l|return false\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0016|LOOP_START\lLOOP:0: B:4:0x0016\-\>B:13:0x0016\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0034}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0016|LOOP_END\lSYNTHETIC\lLOOP:0: B:4:0x0016\-\>B:13:0x0016\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0044|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0051|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0016|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected boolean org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.1.removeEldestEntry((r5v0 'this' org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 java.util.Map$Entry\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Map$Entry\<, Ljava\/lang\/Long;, Lorg\/osmdroid\/tileprovider\/MapTileRequestState;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_5 -> Node_15[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_16[style=dashed];
Node_9 -> Node_14;
Node_9 -> Node_17[style=dashed];
Node_10 -> Node_11;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_13 -> Node_4;
Node_14 -> Node_10;
Node_15 -> Node_12;
Node_16 -> Node_13;
Node_17 -> Node_13;
}

