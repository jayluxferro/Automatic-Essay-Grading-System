digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.\<init\>(Lorg\/osmdroid\/tileprovider\/IRegisterReceiver;Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x0004: INVOKE  (r0 I:short) = (r0 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.getTileFileSystemThreads():short type: INTERFACE \l0x0008: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x000c: INVOKE  (r1 I:short) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.getTileFileSystemMaxQueueSize():short type: INTERFACE \l0x0010: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase)\l  (r3 I:org.osmdroid.tileprovider.IRegisterReceiver)\l  (r0 I:int)\l  (r1 I:int)\l org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase.\<init\>(org.osmdroid.tileprovider.IRegisterReceiver, int, int):void type: DIRECT \l0x0013: NEW_INSTANCE  (r3 I:java.util.concurrent.atomic.AtomicReference) =  java.util.concurrent.atomic.AtomicReference \l0x0015: INVOKE  (r3 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.\<init\>():void type: DIRECT \l0x0018: IPUT  \l  (r3 I:java.util.concurrent.atomic.AtomicReference\<org.osmdroid.tileprovider.tilesource.ITileSource\>)\l  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.mTileSource java.util.concurrent.atomic.AtomicReference \l0x001a: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l  (r4 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource):void type: VIRTUAL \l0x001d: NEW_INSTANCE  (r3 I:org.osmdroid.tileprovider.modules.SqlTileWriter) =  org.osmdroid.tileprovider.modules.SqlTileWriter \l0x001f: INVOKE  (r3 I:org.osmdroid.tileprovider.modules.SqlTileWriter) org.osmdroid.tileprovider.modules.SqlTileWriter.\<init\>():void type: DIRECT \l0x0022: IPUT  \l  (r3 I:org.osmdroid.tileprovider.modules.SqlTileWriter)\l  (r2 I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)\l org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.mWriter org.osmdroid.tileprovider.modules.SqlTileWriter \l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|0x0024: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider.\<init\>((r2 'this' I:org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider A[IMMUTABLE_TYPE, THIS]), (r3 I:org.osmdroid.tileprovider.IRegisterReceiver A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

