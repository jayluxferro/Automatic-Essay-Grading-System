digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileAssetsProvider.TileLoader.loadTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileAssetsProvider.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileAssetsProvider \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReference) = \l  (r0 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider)\l org.osmdroid.tileprovider.modules.MapTileAssetsProvider.access$000(org.osmdroid.tileprovider.modules.MapTileAssetsProvider):java.util.concurrent.atomic.AtomicReference type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (org.osmdroid.tileprovider.tilesource.ITileSource) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: IGET  (r2 I:android.content.res.AssetManager) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileAssetsProvider.TileLoader.mAssets android.content.res.AssetManager A[Catch:\{ IOException \-\> 0x0026, LowMemoryException \-\> 0x001f \}, TRY_ENTER]\l0x0012: INVOKE  (r4 I:java.lang.String) = \l  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r4 I:long)\l org.osmdroid.tileprovider.tilesource.ITileSource.getTileRelativeFilenameString(long):java.lang.String type: INTERFACE A[Catch:\{ IOException \-\> 0x0026, LowMemoryException \-\> 0x001f \}]\l0x0016: INVOKE  (r4 I:java.io.InputStream) = \l  (r2 I:android.content.res.AssetManager)\l  (r4 I:java.lang.String)\l android.content.res.AssetManager.open(java.lang.String):java.io.InputStream type: VIRTUAL A[Catch:\{ IOException \-\> 0x0026, LowMemoryException \-\> 0x001f \}]\l0x001a: INVOKE  (r4 I:android.graphics.drawable.Drawable) = \l  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r4 I:java.io.InputStream)\l org.osmdroid.tileprovider.tilesource.ITileSource.getDrawable(java.io.InputStream):android.graphics.drawable.Drawable type: INTERFACE A[Catch:\{ IOException \-\> 0x0026, LowMemoryException \-\> 0x001f \}]\l0x001d: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN  (r4 I:android.graphics.drawable.Drawable) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|ExcHandler: LowMemoryException null\lSplitter:B:3:0x0010\l|0x001f: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: NEW_INSTANCE  (r5 I:org.osmdroid.tileprovider.modules.CantContinueException) =  org.osmdroid.tileprovider.modules.CantContinueException \l0x0022: INVOKE  \l  (r5 I:org.osmdroid.tileprovider.modules.CantContinueException)\l  (r4 I:java.lang.Throwable)\l org.osmdroid.tileprovider.modules.CantContinueException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:3:0x0010\l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.MapTileAssetsProvider.TileLoader.loadTile((r3 'this' I:org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.modules.CantContinueException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_10 -> Node_9;
}

