digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.loadTile(J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReference) = (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$000(org.osmdroid.tileprovider.modules.MapTileDownloader):java.util.concurrent.atomic.AtomicReference type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) = (org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0012: INVOKE  (r2 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck) = (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$300(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.tileprovider.modules.INetworkAvailablityCheck type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0050 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x001a: INVOKE  (r2 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck) = (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$300(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.tileprovider.modules.INetworkAvailablityCheck type: STATIC \l0x001e: INVOKE  (r2 I:boolean) = \l  (r2 I:org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)\l org.osmdroid.tileprovider.modules.INetworkAvailablityCheck.getNetworkAvailable():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0050 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: INVOKE  (r4 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x0028: INVOKE  (r4 I:boolean) = (r4 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMode():boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x004f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|0x002e: CONST_STR  (r4 I:java.lang.String) =  \"OsmDroid\" \l0x0030: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0032: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0035: CONST_STR  (r0 I:java.lang.String) =  \"Skipping \" \l0x0037: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x003c: INVOKE  (r0 I:java.lang.String) = (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.getName():java.lang.String type: VIRTUAL \l0x0040: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0043: CONST_STR  (r0 I:java.lang.String) =  \" due to NetworkAvailabliltyCheck.\" \l0x0045: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0048: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004c: INVOKE  (r4 I:java.lang.String), (r5 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: INVOKE  (r0 I:java.lang.String) = \l  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l  (r4 I:long)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.getTileURLString(long):java.lang.String type: VIRTUAL \l0x0054: INVOKE  (r2 I:boolean) = (r0 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0058|0x0058: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005b \l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005b|0x005b: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x005d: INVOKE  (r2 I:org.osmdroid.util.UrlBackoff) = (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$400(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.util.UrlBackoff type: STATIC \l0x0061: INVOKE  (r2 I:boolean) = \l  (r2 I:org.osmdroid.util.UrlBackoff)\l  (r0 I:java.lang.String)\l org.osmdroid.util.UrlBackoff.shouldWait(java.lang.String):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0065|0x0065: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0068 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0067|0x0067: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0068|0x0068: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0069: INVOKE  (r4 I:android.graphics.drawable.Drawable) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l  (r4 I:long)\l  (r1 I:int)\l  (r0 I:java.lang.String)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.downloadTile(long, int, java.lang.String):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x006d|0x006d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0079 \l}"];
Node_19 [shape=record,label="{19\:\ 0x006f|0x006f: IGET  (r5 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0071: INVOKE  (r5 I:org.osmdroid.util.UrlBackoff) = (r5 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$400(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.util.UrlBackoff type: STATIC \l0x0075: INVOKE  \l  (r5 I:org.osmdroid.util.UrlBackoff)\l  (r0 I:java.lang.String)\l org.osmdroid.util.UrlBackoff.next(java.lang.String):void type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0079|0x0079: IGET  (r5 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x007b: INVOKE  (r5 I:org.osmdroid.util.UrlBackoff) = (r5 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$400(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.util.UrlBackoff type: STATIC \l0x007f: INVOKE  \l  (r5 I:org.osmdroid.util.UrlBackoff)\l  (r0 I:java.lang.String)\l org.osmdroid.util.UrlBackoff.remove(java.lang.String):org.osmdroid.util.Delay type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0082|0x0082: RETURN  (r4 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.loadTile((r3 'this' I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.modules.CantContinueException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
}

