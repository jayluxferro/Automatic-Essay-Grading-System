digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.downloadTile(JILjava\/lang\/String;)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader \l0x0002: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReference) = (r0 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$000(org.osmdroid.tileprovider.modules.MapTileDownloader):java.util.concurrent.atomic.AtomicReference type: STATIC \l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) = (org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase) (r0 I:?[OBJECT, ARRAY]) \l0x000c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.acquire():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0030 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|SYNTHETIC\lSplitter:B:5:0x0013\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0013\l|0x0013: IGET  (r1 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader A[Catch:\{ all \-\> 0x002b \}, TRY_ENTER]\l0x0015: INVOKE  (r1 I:org.osmdroid.tileprovider.modules.TileDownloader) = (r1 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$200(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.tileprovider.modules.TileDownloader type: STATIC A[Catch:\{ all \-\> 0x002b \}]\l0x0019: IGET  (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) = \l  (r8 I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader)\l org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.this$0 org.osmdroid.tileprovider.modules.MapTileDownloader A[Catch:\{ all \-\> 0x002b \}]\l0x001b: INVOKE  (r6 I:org.osmdroid.tileprovider.modules.IFilesystemCache) = (r2 I:org.osmdroid.tileprovider.modules.MapTileDownloader) org.osmdroid.tileprovider.modules.MapTileDownloader.access$100(org.osmdroid.tileprovider.modules.MapTileDownloader):org.osmdroid.tileprovider.modules.IFilesystemCache type: STATIC A[Catch:\{ all \-\> 0x002b \}]\l0x001f: MOVE  (r2 I:?[long, double]) = (r9 I:?[long, double]) A[Catch:\{ all \-\> 0x002b \}]\l0x0020: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x002b \}]\l0x0021: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002b \}]\l0x0022: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002b \}]\l0x0023: INVOKE  (r9 I:android.graphics.drawable.Drawable) = \l  (r1 I:org.osmdroid.tileprovider.modules.TileDownloader)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:java.lang.String)\l  (r6 I:org.osmdroid.tileprovider.modules.IFilesystemCache)\l  (r7 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.modules.TileDownloader.downloadTile(long, int, java.lang.String, org.osmdroid.tileprovider.modules.IFilesystemCache, org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase):android.graphics.drawable.Drawable type: VIRTUAL A[Catch:\{ all \-\> 0x002b \}]\l0x0026: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.release():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: RETURN  (r9 I:android.graphics.drawable.Drawable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|ExcHandler: all null\lSplitter:B:5:0x0013\l|0x002b: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: INVOKE  \l  (r0 I:org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)\l org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase.release():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: InterruptedException null\lSplitter:B:3:0x0010\l}"];
MethodNode[shape=record,label="{protected android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.MapTileDownloader.TileLoader.downloadTile((r8 'this' I:org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader A[IMMUTABLE_TYPE, THIS]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.osmdroid.tileprovider.modules.CantContinueException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_12;
}

