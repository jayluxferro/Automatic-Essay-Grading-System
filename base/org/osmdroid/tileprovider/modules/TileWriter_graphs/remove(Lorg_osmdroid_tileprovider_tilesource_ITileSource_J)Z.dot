digraph "CFG fororg.osmdroid.tileprovider.modules.TileWriter.remove(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;J)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.io.File r0 = getFile(r5, r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r0.exists() == false) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|SYNTHETIC\lSplitter:B:2:0x000a\l}"];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ Exception \-\> 0x000f \}\lSplitter:B:2:0x000a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\l|return r0.delete()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|ExcHandler: Exception (r0v1 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:2:0x000a\l|java.lang.Exception r0 = move\-exception\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Unable to delete cached tile from \")\lr2.append(r5.name())\lr2.append(\" \")\lr2.append(org.osmdroid.util.MapTileIndex.toString(r6))\landroid.util.Log.i(org.osmdroid.api.IMapView.LOGTAG, r2.toString(), r0)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.tileprovider.modules.TileWriter.remove((r4v0 'this' org.osmdroid.tileprovider.modules.TileWriter A[IMMUTABLE_TYPE, THIS]), (r5v0 org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

