digraph "CFG fororg.osmdroid.tileprovider.modules.TileWriter.onDetach()V" {
subgraph cluster_Region_1825429636 {
label = "R(1:(1:(1:3))(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1990442719 {
label = "IF [B:1:0x0002] THEN: R(1:(1:3)) ELSE: R(0)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.initThread != null) goto L_0x0004\l}"];
subgraph cluster_Region_384292916 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1490478148 {
label = "Try: R(1:3) catches: R(0)";
node [shape=record,color=blue];
subgraph cluster_Region_1516047906 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|Catch:\{ Throwable \-\> 0x0009 \}\lSplitter:B:2:0x0004\l|r1.initThread.interrupt()     \/\/ Catch:\{ Throwable \-\> 0x0009 \}\l}"];
}
subgraph cluster_Region_828577520 {
label = "R(0) | ExcHandler: Throwable (unused java.lang.Throwable)\l";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_434982544 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_828577520 {
label = "R(0) | ExcHandler: Throwable (unused java.lang.Throwable)\l";
node [shape=record,color=blue];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004|SYNTHETIC\lSplitter:B:2:0x0004\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lExcHandler: Throwable (unused java.lang.Throwable)\lSplitter:B:2:0x0004\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.TileWriter.onDetach((r1v0 'this' org.osmdroid.tileprovider.modules.TileWriter A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_4 -> Node_6;
}

