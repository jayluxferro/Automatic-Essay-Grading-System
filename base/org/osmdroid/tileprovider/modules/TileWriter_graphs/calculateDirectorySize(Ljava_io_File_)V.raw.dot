digraph "CFG fororg.osmdroid.tileprovider.modules.TileWriter.calculateDirectorySize(Ljava\/io\/File;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.io.File[]) = (r9 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x000c: INVOKE  (r4 I:boolean) = (r3 I:java.io.File) java.io.File.isFile():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: SGET  (r4 I:long) =  org.osmdroid.tileprovider.modules.TileWriter.mUsedCacheSpace long \l0x0014: INVOKE  (r6 I:long) = (r3 I:java.io.File) java.io.File.length():long type: VIRTUAL \l0x0018: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0019: SPUT  (r4 I:long) org.osmdroid.tileprovider.modules.TileWriter.mUsedCacheSpace long \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r4 I:boolean) = (r3 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: INVOKE  (r4 I:boolean) = \l  (r8 I:org.osmdroid.tileprovider.modules.TileWriter)\l  (r9 I:java.io.File)\l  (r3 I:java.io.File)\l org.osmdroid.tileprovider.modules.TileWriter.isSymbolicDirectoryLink(java.io.File, java.io.File):boolean type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: INVOKE  \l  (r8 I:org.osmdroid.tileprovider.modules.TileWriter)\l  (r3 I:java.io.File)\l org.osmdroid.tileprovider.modules.TileWriter.calculateDirectorySize(java.io.File):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.modules.TileWriter.calculateDirectorySize((r8 'this' I:org.osmdroid.tileprovider.modules.TileWriter A[IMMUTABLE_TYPE, THIS]), (r9 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_3;
}

