digraph "CFG fororg.osmdroid.tileprovider.modules.TileWriter.getDirectoryFileList(Ljava\/io\/File;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\ljava.io.File[] r6 = r6.listFiles()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r6 == null) goto L_0x002a\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|int r1 = r6.length\lr2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:2:0x000b, B:10:0x0027] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000d\-\>B:10:0x0027\l|if (r2 \>= r1) goto L_0x002a\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r3 = r6[r2]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r3.isFile() == false) goto L_0x001a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|r0.add(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a}"];
Node_8 [shape=record,label="{8\:\ 0x001e|if (r3.isDirectory() == false) goto L_0x0027\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|r0.addAll(getDirectoryFileList(r3))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:10:0x0027\l|int r2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<java.io.File\> org.osmdroid.tileprovider.modules.TileWriter.getDirectoryFileList((r5v0 'this' org.osmdroid.tileprovider.modules.TileWriter A[IMMUTABLE_TYPE, THIS]), (r6v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/File;, ), Ljava\/util\/List\<, Ljava\/io\/File;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_13;
Node_10 -> Node_3;
Node_12 -> Node_11;
Node_13 -> Node_10;
Node_14 -> Node_10;
}

