digraph "CFG fororg.osmdroid.tileprovider.modules.TileWriter.loadTile(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;J)Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.io.File) = \l  (r7 I:org.osmdroid.tileprovider.modules.TileWriter)\l  (r8 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r9 I:long)\l org.osmdroid.tileprovider.modules.TileWriter.getFile(org.osmdroid.tileprovider.tilesource.ITileSource, long):java.io.File type: VIRTUAL \l0x0004: INVOKE  (r1 I:boolean) = (r0 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r8 I:android.graphics.drawable.Drawable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.String) = (r0 I:java.io.File) java.io.File.getPath():java.lang.String type: VIRTUAL \l0x0010: INVOKE  (r8 I:android.graphics.drawable.Drawable) = \l  (r8 I:org.osmdroid.tileprovider.tilesource.ITileSource)\l  (r1 I:java.lang.String)\l org.osmdroid.tileprovider.tilesource.ITileSource.getDrawable(java.lang.String):android.graphics.drawable.Drawable type: INTERFACE \l0x0014: INVOKE  (r1 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC \l0x0018: INVOKE  (r3 I:long) = (r0 I:java.io.File) java.io.File.lastModified():long type: VIRTUAL \l0x001c: IGET  (r5 I:long) = (r7 I:org.osmdroid.tileprovider.modules.TileWriter) org.osmdroid.tileprovider.modules.TileWriter.mMaximumCachedFileAge long \l0x001e: ARITH  (r1 I:long) = (r1 I:long) \- (r5 I:long) \l0x001f: CMP_L  (r0 I:int) = (r3 I:long), (r1 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|0x0025: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0052 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0052 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r0 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x002e: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMode():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x0036: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0038: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003b: CONST_STR  (r2 I:java.lang.String) =  \"Tile expired: \" \l0x003d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0040: INVOKE  (r9 I:java.lang.String) = (r9 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r9 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r0 I:java.lang.String), (r9 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x004e|0x004e: CONST  (r9 I:?[int, float, short, byte, char]) = (\-2 ?[int, float, short, byte, char]) \l0x004f: INVOKE  (r8 I:android.graphics.drawable.Drawable), (r9 I:int) org.osmdroid.tileprovider.ExpirableBitmapDrawable.setState(android.graphics.drawable.Drawable, int):void type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: RETURN  (r8 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable org.osmdroid.tileprovider.modules.TileWriter.loadTile((r7 'this' I:org.osmdroid.tileprovider.modules.TileWriter A[IMMUTABLE_TYPE, THIS]), (r8 I:org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.Exception]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

