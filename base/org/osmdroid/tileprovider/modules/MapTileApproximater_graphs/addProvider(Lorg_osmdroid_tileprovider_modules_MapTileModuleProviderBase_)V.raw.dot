digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileApproximater.addProvider(Lorg\/osmdroid\/tileprovider\/modules\/MapTileModuleProviderBase;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.mProviders java.util.List \l0x0002: INVOKE  (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0005: INVOKE  \l  (r1 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.computeZoomLevels():void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.MapTileApproximater.addProvider((r1 'this' I:org.osmdroid.tileprovider.modules.MapTileApproximater A[IMMUTABLE_TYPE, THIS]), (r2 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

