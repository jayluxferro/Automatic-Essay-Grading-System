digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom(Landroid\/graphics\/drawable\/BitmapDrawable;JI)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r13 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:android.graphics.Bitmap) = (r10 I:android.graphics.drawable.BitmapDrawable) android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap type: VIRTUAL \l0x0008: INVOKE  (r1 I:int) = (r1 I:android.graphics.Bitmap) android.graphics.Bitmap.getWidth():int type: VIRTUAL \l0x000c: INVOKE  (r2 I:android.graphics.Bitmap) = (r1 I:int) org.osmdroid.tileprovider.modules.MapTileApproximater.getTileBitmap(int):android.graphics.Bitmap type: STATIC \l0x0010: NEW_INSTANCE  (r3 I:android.graphics.Canvas) =  android.graphics.Canvas \l0x0012: INVOKE  \l  (r3 I:android.graphics.Canvas)\l  (r2 I:android.graphics.Bitmap)\l android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void type: DIRECT \l0x0015: INSTANCE_OF  (r4 I:boolean) = (r10 I:?[OBJECT, ARRAY]) org.osmdroid.tileprovider.ReusableBitmapDrawable \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x001a: CHECK_CAST  (r5 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) = (org.osmdroid.tileprovider.ReusableBitmapDrawable) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r5 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.beginUsingDrawable():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0024: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|SYNTHETIC\lSplitter:B:11:0x0027\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0027\l|0x0027: INVOKE  (r8 I:boolean) = (r5 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.isBitmapValid():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}, TRY_ENTER]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x005a A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: GOTO  \-\> 0x0030 A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|ExcHandler: all null\lSplitter:B:11:0x0027\l|0x002e: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: GOTO  \-\> 0x0063 A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: ARITH  (r8 I:int) = (r1 I:int) \>\> (r13 I:int) A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0032|0x0032: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0035 A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: GOTO  \-\> 0x005a A[Catch:\{ all \-\> 0x002e \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0035|0x0035: INVOKE  (r9 I:int) = (r11 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC A[Catch:\{ all \-\> 0x002e \}]\l0x0039: ARITH  (r13 I:int) = (r6 I:int) \<\< (r13 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x003b: ARITH  (r9 I:int) = (r9 I:int) % (r13 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x003c: ARITH  (r9 I:int) = (r9 I:int) * (r8 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x003e: INVOKE  (r11 I:int) = (r11 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC A[Catch:\{ all \-\> 0x002e \}]\l0x0042: ARITH  (r11 I:int) = (r11 I:int) % (r13 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x0043: ARITH  (r11 I:int) = (r11 I:int) * (r8 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x0045: NEW_INSTANCE  (r12 I:android.graphics.Rect) =  android.graphics.Rect A[Catch:\{ all \-\> 0x002e \}]\l0x0047: ARITH  (r13 I:int) = (r9 I:int) + (r8 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x0049: ARITH  (r8 I:int) = (r8 I:int) + (r11 I:int) A[Catch:\{ all \-\> 0x002e \}]\l0x004a: INVOKE  \l  (r12 I:android.graphics.Rect)\l  (r9 I:int)\l  (r11 I:int)\l  (r13 I:int)\l  (r8 I:int)\l android.graphics.Rect.\<init\>(int, int, int, int):void type: DIRECT A[Catch:\{ all \-\> 0x002e \}]\l0x004d: NEW_INSTANCE  (r11 I:android.graphics.Rect) =  android.graphics.Rect A[Catch:\{ all \-\> 0x002e \}]\l0x004f: INVOKE  \l  (r11 I:android.graphics.Rect)\l  (r7 I:int)\l  (r7 I:int)\l  (r1 I:int)\l  (r1 I:int)\l android.graphics.Rect.\<init\>(int, int, int, int):void type: DIRECT A[Catch:\{ all \-\> 0x002e \}]\l0x0052: INVOKE  (r10 I:android.graphics.Bitmap) = (r10 I:android.graphics.drawable.BitmapDrawable) android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}]\l0x0056: INVOKE  \l  (r3 I:android.graphics.Canvas)\l  (r10 I:android.graphics.Bitmap)\l  (r12 I:android.graphics.Rect)\l  (r11 I:android.graphics.Rect)\l  (r0 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void type: VIRTUAL A[Catch:\{ all \-\> 0x002e \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|0x0059: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x005f \l}"];
Node_23 [shape=record,label="{23\:\ 0x005c|0x005c: INVOKE  (r5 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.finishUsingDrawable():void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x005f|0x005f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0062 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0061|0x0061: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0062|0x0062: RETURN  (r2 I:android.graphics.Bitmap) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|0x0063: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0068 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0065|0x0065: INVOKE  (r5 I:org.osmdroid.tileprovider.ReusableBitmapDrawable) org.osmdroid.tileprovider.ReusableBitmapDrawable.finishUsingDrawable():void type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|0x0068: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Bitmap org.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom((r10 I:android.graphics.drawable.BitmapDrawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_27;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
}

