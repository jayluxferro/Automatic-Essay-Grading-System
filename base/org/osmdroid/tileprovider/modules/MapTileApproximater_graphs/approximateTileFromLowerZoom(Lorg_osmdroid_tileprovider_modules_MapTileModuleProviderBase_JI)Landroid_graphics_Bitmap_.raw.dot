digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom(Lorg\/osmdroid\/tileprovider\/modules\/MapTileModuleProviderBase;JI)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r7 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:int) = (r5 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x0008: ARITH  (r1 I:int) = (r1 I:int) \- (r7 I:int) \l0x0009: INVOKE  (r2 I:int) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r2 I:int) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMaximumZoomLevel():int type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: INVOKE  (r2 I:int) = (r5 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \>\> (r7 I:int) \l0x001c: INVOKE  (r3 I:int) = (r5 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x0020: ARITH  (r3 I:int) = (r3 I:int) \>\> (r7 I:int) \l0x0021: INVOKE  (r1 I:long) = (r1 I:int), (r2 I:int), (r3 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|SYNTHETIC\lSplitter:B:10:0x0025\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0025\l|0x0025: INVOKE  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getTileLoader():org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader type: VIRTUAL A[Catch:\{ Exception \-\> 0x0039 \}, TRY_ENTER]\l0x0029: INVOKE  (r4 I:android.graphics.drawable.Drawable) = \l  (r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader)\l  (r1 I:long)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.TileLoader.loadTile(long):android.graphics.drawable.Drawable type: VIRTUAL A[Catch:\{ Exception \-\> 0x0039 \}]\l0x002d: INSTANCE_OF  (r1 I:boolean) = (r4 I:?[OBJECT, ARRAY]) android.graphics.drawable.BitmapDrawable A[Catch:\{ Exception \-\> 0x0039 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0032 A[Catch:\{ Exception \-\> 0x0039 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: RETURN  (r0 I:android.graphics.Bitmap) A[Catch:\{ Exception \-\> 0x0039 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: CHECK_CAST  (r4 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0034: INVOKE  (r4 I:android.graphics.Bitmap) = \l  (r4 I:android.graphics.drawable.BitmapDrawable)\l  (r5 I:long)\l  (r7 I:int)\l org.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom(android.graphics.drawable.BitmapDrawable, long, int):android.graphics.Bitmap type: STATIC A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0037: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: RETURN  (r4 I:android.graphics.Bitmap) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lExcHandler: Exception null\lSplitter:B:10:0x0025\l}"];
MethodNode[shape=record,label="{public static android.graphics.Bitmap org.osmdroid.tileprovider.modules.MapTileApproximater.approximateTileFromLowerZoom((r4 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_17 -> Node_16;
}

