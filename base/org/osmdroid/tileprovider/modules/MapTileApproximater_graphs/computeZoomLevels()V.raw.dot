digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileApproximater.computeZoomLevels()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: IPUT  \l  (r0 I:int)\l  (r5 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.minZoomLevel int \l0x0003: IGET  (r1 I:java.util.List\<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase\>) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.mProviders java.util.List \l0x0005: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0009: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0029 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) = (org.osmdroid.tileprovider.modules.MapTileModuleProviderBase) (r3 I:?[OBJECT, ARRAY]) \l0x0016: INVOKE  (r3 I:int) = \l  (r3 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getMinimumZoomLevel():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IPUT  \l  (r3 I:int)\l  (r5 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.minZoomLevel int \l0x001e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IGET  (r4 I:int) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.minZoomLevel int \l0x0022: INVOKE  (r3 I:int) = (r4 I:int), (r3 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0026: IPUT  \l  (r3 I:int)\l  (r5 I:org.osmdroid.tileprovider.modules.MapTileApproximater)\l org.osmdroid.tileprovider.modules.MapTileApproximater.minZoomLevel int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.tileprovider.modules.MapTileApproximater.computeZoomLevels((r5 'this' I:org.osmdroid.tileprovider.modules.MapTileApproximater A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

