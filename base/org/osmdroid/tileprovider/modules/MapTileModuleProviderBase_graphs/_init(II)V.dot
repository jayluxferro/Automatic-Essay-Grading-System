digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.\<init\>(II)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r6.mQueueLockObject = new java.lang.Object()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r8 \>= r7) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|android.util.Log.w(org.osmdroid.api.IMapView.LOGTAG, \"The pending queue size is smaller than the thread pool size. Automatically reducing the thread pool size.\")\lr7 = r8\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|PHI: r7 \l  PHI: (r7v1 int) = (r7v0 int), (r7v6 int) binds: [B:1:0x000a, B:2:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|r6.mExecutor = java.util.concurrent.Executors.newFixedThreadPool(r7, new org.osmdroid.tileprovider.modules.ConfigurablePriorityThreadFactory(5, getThreadGroupName()))\lr6.mWorking = new java.util.HashMap\<\>()\lr1 = r6\lr5 = r8\lr6.mPending = new org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.C14731(r1, r8 + 2, 0.1f, true)\l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.\<init\>((r6v0 'this' org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[IMMUTABLE_TYPE, THIS]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

