digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.loadMapTileAsync(Lorg\/osmdroid\/tileprovider\/MapTileRequestState;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.ExecutorService) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mExecutor java.util.concurrent.ExecutorService \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.isShutdown():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r0 I:java.lang.Object) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mQueueLockObject java.lang.Object \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|SYNTHETIC\lSplitter:B:5:0x000c\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000c\l|0x000c: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x0080 \}, TRY_ENTER]\l0x0010: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugTileProviders():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x005f A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x0080 \}]\l0x0018: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0080 \}]\l0x001a: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0080 \}]\l0x001d: CONST_STR  (r3 I:java.lang.String) =  \"MapTileModuleProviderBase.loadMaptileAsync() on provider: \" A[Catch:\{ all \-\> 0x0080 \}]\l0x001f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0022: INVOKE  (r3 I:java.lang.String) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getName():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0026: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0029: CONST_STR  (r3 I:java.lang.String) =  \" for tile: \" A[Catch:\{ all \-\> 0x0080 \}]\l0x002b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x002e: INVOKE  (r3 I:long) = (r6 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0032: INVOKE  (r3 I:java.lang.String) = (r3 I:long) org.osmdroid.util.MapTileIndex.toString(long):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l0x0036: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0039: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x003d: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l0x0040: IGET  (r1 I:java.util.LinkedHashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mPending java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0080 \}]\l0x0042: INVOKE  (r2 I:long) = (r6 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0046: INVOKE  (r2 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l0x004a: INVOKE  (r1 I:boolean) = (r1 I:java.util.LinkedHashMap), (r2 I:java.lang.Object) java.util.LinkedHashMap.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x004e|0x004e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0058 A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0050|0x0050: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x0080 \}]\l0x0052: CONST_STR  (r2 I:java.lang.String) =  \"MapTileModuleProviderBase.loadMaptileAsync() tile already exists in request queue for modular provider. Moving to front of queue.\" A[Catch:\{ all \-\> 0x0080 \}]\l0x0054: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l0x0057: GOTO  \-\> 0x005f A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x0080 \}]\l0x005a: CONST_STR  (r2 I:java.lang.String) =  \"MapTileModuleProviderBase.loadMaptileAsync() adding tile to request queue for modular provider.\" A[Catch:\{ all \-\> 0x0080 \}]\l0x005c: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x005f|0x005f: IGET  (r1 I:java.util.LinkedHashMap\<java.lang.Long, org.osmdroid.tileprovider.MapTileRequestState\>) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mPending java.util.LinkedHashMap A[Catch:\{ all \-\> 0x0080 \}]\l0x0061: INVOKE  (r2 I:long) = (r6 I:org.osmdroid.tileprovider.MapTileRequestState) org.osmdroid.tileprovider.MapTileRequestState.getMapTile():long type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l0x0065: INVOKE  (r2 I:java.lang.Long) = (r2 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC A[Catch:\{ all \-\> 0x0080 \}]\l0x0069: INVOKE  \l  (r1 I:java.util.LinkedHashMap)\l  (r2 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0080 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x006c|0x006c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x006d|SYNTHETIC\lSplitter:B:14:0x006d\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x006d\l|0x006d: IGET  (r6 I:java.util.concurrent.ExecutorService) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.mExecutor java.util.concurrent.ExecutorService A[Catch:\{ RejectedExecutionException \-\> 0x0077 \}, TRY_ENTER]\l0x006f: INVOKE  (r0 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader) = \l  (r5 I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)\l org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.getTileLoader():org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader type: VIRTUAL A[Catch:\{ RejectedExecutionException \-\> 0x0077 \}]\l0x0073: INVOKE  \l  (r6 I:java.util.concurrent.ExecutorService)\l  (r0 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ RejectedExecutionException \-\> 0x0077 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0077|ExcHandler: RejectedExecutionException null\lSplitter:B:14:0x006d\l|0x0077: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0078|0x0078: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x007a: CONST_STR  (r1 I:java.lang.String) =  \"RejectedExecutionException\" \l0x007c: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r6 I:java.lang.Throwable)\l android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x007f|0x007f: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x0080|ExcHandler: all null\lSplitter:B:5:0x000c\l|0x0080: MOVE_EXCEPTION  (r6 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0081|SYNTHETIC\lSplitter:B:21:0x0081\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x0081\l|0x0081: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0080 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0082|0x0082: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.loadMapTileAsync((r5 'this' I:org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[IMMUTABLE_TYPE, THIS]), (r6 I:org.osmdroid.tileprovider.MapTileRequestState A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_15 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_20;
Node_22 -> Node_23;
Node_22 -> Node_20;
}

