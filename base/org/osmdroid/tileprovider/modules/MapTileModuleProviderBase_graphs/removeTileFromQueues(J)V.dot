digraph "CFG fororg.osmdroid.tileprovider.modules.MapTileModuleProviderBase.removeTileFromQueues(J)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object r0 = r4.mQueueLockObject\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (org.osmdroid.config.Configuration.getInstance().isDebugTileProviders() == false) goto L_0x0033\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()     \/\/ Catch:\{  \}\lr2.append(\"MapTileModuleProviderBase.removeTileFromQueues() on provider: \")\lr2.append(getName())\lr2.append(\" for tile: \")\lr2.append(org.osmdroid.util.MapTileIndex.toString(r5))\landroid.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, r2.toString())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|r4.mPending.remove(java.lang.Long.valueOf(r5))\lr4.mWorking.remove(java.lang.Long.valueOf(r5))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|monitor\-exit(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|REMOVE\l|java.lang.Throwable r5 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|REMOVE\l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|REMOVE\l|throw r5\l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.tileprovider.modules.MapTileModuleProviderBase.removeTileFromQueues((r4v0 'this' org.osmdroid.tileprovider.modules.MapTileModuleProviderBase A[IMMUTABLE_TYPE, THIS]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

