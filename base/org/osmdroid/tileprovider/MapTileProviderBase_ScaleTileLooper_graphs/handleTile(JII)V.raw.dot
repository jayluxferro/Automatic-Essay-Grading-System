digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.handleTile(JII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r1 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.isWorth boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) = \l  (r1 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.this$0 org.osmdroid.tileprovider.MapTileProviderBase \l0x0007: INVOKE  (r0 I:android.graphics.drawable.Drawable) = \l  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase)\l  (r2 I:long)\l org.osmdroid.tileprovider.MapTileProviderBase.getMapTile(long):android.graphics.drawable.Drawable type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0018 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|SYNTHETIC\lSplitter:B:5:0x000d\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x000d\l|0x000d: INVOKE  \l  (r1 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l  (r2 I:long)\l  (r4 I:int)\l  (r5 I:int)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.computeTile(long, int, int):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0011 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CONST_STR  (r2 I:java.lang.String) =  \"OsmDroid\" \l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"OutOfMemoryError rescaling cache\" \l0x0015: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lExcHandler: OutOfMemoryError null\lSplitter:B:5:0x000d\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.handleTile((r1 'this' I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper A[IMMUTABLE_TYPE, THIS]), (r2 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_6 -> Node_10;
Node_8 -> Node_10;
Node_9 -> Node_8;
}

