digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.initialiseLoop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r2 I:org.osmdroid.util.TileLooper) org.osmdroid.util.TileLooper.initialiseLoop():void type: SUPER \l0x0003: IGET  (r0 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mTileZoomLevel int \l0x0005: IGET  (r1 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mOldTileZoomLevel int \l0x0007: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0008: INVOKE  (r0 I:int) = (r0 I:int) java.lang.Math.abs(int):int type: STATIC \l0x000c: IPUT  \l  (r0 I:int)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mDiff int \l0x000e: IGET  (r0 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mTileSize int \l0x0010: IGET  (r1 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mDiff int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) \>\> (r1 I:int) \l0x0013: IPUT  \l  (r0 I:int)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mTileSize_2 int \l0x0015: IGET  (r0 I:int) = \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.mDiff int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IPUT  \l  (r0 I:boolean)\l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper)\l org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.isWorth boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.initialiseLoop((r2 'this' I:org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

