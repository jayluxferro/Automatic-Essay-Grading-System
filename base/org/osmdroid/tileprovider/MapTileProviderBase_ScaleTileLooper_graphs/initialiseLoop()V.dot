digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.initialiseLoop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super.initialiseLoop()\lr2.mDiff = java.lang.Math.abs(r2.mTileZoomLevel \- r2.mOldTileZoomLevel)\lr2.mTileSize_2 = r2.mTileSize \>\> r2.mDiff\l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|if (r2.mDiff == 0) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|r0 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|r0 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|PHI: r0 \l  PHI: (r0v6 boolean) = (r0v7 boolean), (r0v8 boolean) binds: [B:3:0x001b, B:2:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|r2.isWorth = r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.initialiseLoop((r2v0 'this' org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

