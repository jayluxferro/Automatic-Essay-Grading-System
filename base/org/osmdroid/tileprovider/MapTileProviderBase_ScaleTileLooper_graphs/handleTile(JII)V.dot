digraph "CFG fororg.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.handleTile(JII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.isWorth != false) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005}"];
Node_4 [shape=record,label="{4\:\ 0x000b|if (r1.this$0.getMapTile(r2) != null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|SYNTHETIC\lSplitter:B:5:0x000d\l}"];
Node_6 [shape=record,label="{6\:\ ?|Catch:\{ OutOfMemoryError \-\> 0x0011 \}\lSplitter:B:5:0x000d\l|computeTile(r2, r4, r5)     \/\/ Catch:\{ OutOfMemoryError \-\> 0x0011 \}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|android.util.Log.e(org.osmdroid.api.IMapView.LOGTAG, \"OutOfMemoryError rescaling cache\")\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: OutOfMemoryError (unused java.lang.OutOfMemoryError)\lSplitter:B:5:0x000d\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.tileprovider.MapTileProviderBase.ScaleTileLooper.handleTile((r1v0 'this' org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper A[IMMUTABLE_TYPE, THIS]), (r2v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_6 -> Node_11;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

