digraph "CFG fororg.osmdroid.config.DefaultConfigurationProvider.load(Landroid\/content\/SharedPreferences;Ljava\/util\/Map;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r5 I:java.util.Map) java.util.Map.clear():void type: INTERFACE \l0x0008: INVOKE  (r0 I:java.util.Map) = (r4 I:android.content.SharedPreferences) android.content.SharedPreferences.getAll():java.util.Map type: INTERFACE \l0x000c: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.Map) java.util.Map.keySet():java.util.Set type: INTERFACE \l0x0010: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0039 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001e: CHECK_CAST  (r1 I:java.lang.String) = (java.lang.String) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: INVOKE  (r2 I:boolean) = (r1 I:java.lang.String), (r6 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0014 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: INVOKE  (r2 I:int) = (r6 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x002c: INVOKE  (r2 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0030: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0031: INVOKE  (r1 I:java.lang.String) = \l  (r4 I:android.content.SharedPreferences)\l  (r1 I:java.lang.String)\l  (r3 I:java.lang.String)\l android.content.SharedPreferences.getString(java.lang.String, java.lang.String):java.lang.String type: INTERFACE \l0x0035: INVOKE  \l  (r5 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: RETURN   \l}"];
MethodNode[shape=record,label="{private static void org.osmdroid.config.DefaultConfigurationProvider.load((r4 I:android.content.SharedPreferences A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Map\<java.lang.String, java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Landroid\/content\/SharedPreferences;, Ljava\/util\/Map\<, Ljava\/lang\/String;, Ljava\/lang\/String;, \>;, Ljava\/lang\/String;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_12;
Node_1 -> Node_3;
Node_1 -> Node_12[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_4;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_4;
}

