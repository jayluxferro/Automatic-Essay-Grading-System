digraph "CFG fororg.osmdroid.wms.WMSTileSource.createFrom(Lorg\/osmdroid\/wms\/WMSEndpoint;Lorg\/osmdroid\/wms\/WMSLayer;)Lorg\/osmdroid\/wms\/WMSTileSource;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"EPSG:900913\" \l0x0002: INVOKE  (r1 I:java.util.List) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getSrs():java.util.List type: VIRTUAL \l0x0006: INVOKE  (r1 I:boolean) = (r1 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r0 I:java.util.List) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getSrs():java.util.List type: VIRTUAL \l0x0011: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r0 I:java.lang.String) = (java.lang.String) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:java.util.List) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getStyles():java.util.List type: VIRTUAL \l0x001c: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l0x0020: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0043 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:org.osmdroid.wms.WMSTileSource) =  org.osmdroid.wms.WMSTileSource \l0x0025: INVOKE  (r4 I:java.lang.String) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getName():java.lang.String type: VIRTUAL \l0x0029: NEW_ARRAY  (r5 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x002b: INVOKE  (r1 I:java.lang.String) = (r11 I:org.osmdroid.wms.WMSEndpoint) org.osmdroid.wms.WMSEndpoint.getBaseurl():java.lang.String type: VIRTUAL \l0x002f: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0031: INVOKE  (r6 I:java.lang.String) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getName():java.lang.String type: VIRTUAL \l0x0035: INVOKE  (r7 I:java.lang.String) = (r11 I:org.osmdroid.wms.WMSEndpoint) org.osmdroid.wms.WMSEndpoint.getWmsVersion():java.lang.String type: VIRTUAL \l0x0039: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003a: INVOKE  (r10 I:int) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getPixelSize():int type: VIRTUAL \l0x003e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  \l  (r3 I:org.osmdroid.wms.WMSTileSource)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String[])\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.String)\l  (r8 I:java.lang.String)\l  (r9 I:java.lang.String)\l  (r10 I:int)\l org.osmdroid.wms.WMSTileSource.\<init\>(java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, int):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0042|0x0042: RETURN  (r0 I:org.osmdroid.wms.WMSTileSource) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: NEW_INSTANCE  (r0 I:org.osmdroid.wms.WMSTileSource) =  org.osmdroid.wms.WMSTileSource \l0x0045: INVOKE  (r4 I:java.lang.String) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getName():java.lang.String type: VIRTUAL \l0x0049: NEW_ARRAY  (r5 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x004b: INVOKE  (r1 I:java.lang.String) = (r11 I:org.osmdroid.wms.WMSEndpoint) org.osmdroid.wms.WMSEndpoint.getBaseurl():java.lang.String type: VIRTUAL \l0x004f: APUT  \l  (r5 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0051: INVOKE  (r6 I:java.lang.String) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getName():java.lang.String type: VIRTUAL \l0x0055: INVOKE  (r7 I:java.lang.String) = (r11 I:org.osmdroid.wms.WMSEndpoint) org.osmdroid.wms.WMSEndpoint.getWmsVersion():java.lang.String type: VIRTUAL \l0x0059: INVOKE  (r11 I:java.util.List) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getStyles():java.util.List type: VIRTUAL \l0x005d: INVOKE  (r11 I:java.lang.Object) = (r11 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0061: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0062: CHECK_CAST  (r9 I:java.lang.String) = (java.lang.String) (r9 I:?[OBJECT, ARRAY]) \l0x0064: INVOKE  (r10 I:int) = (r12 I:org.osmdroid.wms.WMSLayer) org.osmdroid.wms.WMSLayer.getPixelSize():int type: VIRTUAL \l0x0068: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0069: INVOKE  \l  (r3 I:org.osmdroid.wms.WMSTileSource)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String[])\l  (r6 I:java.lang.String)\l  (r7 I:java.lang.String)\l  (r8 I:java.lang.String)\l  (r9 I:java.lang.String)\l  (r10 I:int)\l org.osmdroid.wms.WMSTileSource.\<init\>(java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, int):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x006c|0x006c: RETURN  (r0 I:org.osmdroid.wms.WMSTileSource) \l}"];
MethodNode[shape=record,label="{public static org.osmdroid.wms.WMSTileSource org.osmdroid.wms.WMSTileSource.createFrom((r11 I:org.osmdroid.wms.WMSEndpoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.osmdroid.wms.WMSLayer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

