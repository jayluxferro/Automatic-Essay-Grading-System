digraph "CFG fororg.osmdroid.util.TileSystem.TileXYToQuadKey(III)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|char[] r0 = new char[r8]\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:8:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:8:0x0019\l|if (r1 \>= r8) goto L_0x0021\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r2 = '0'\lint r4 = 1 \<\< r1\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r6 & r4) == 0) goto L_0x0011\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|char r2 = (char) 49\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|PHI: r2 \l  PHI: (r2v1 char) = (r2v0 char), (r2v8 char) binds: [B:3:0x000c, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if ((r4 & r7) == 0) goto L_0x0019\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|char r2 = (char) (((char) (r2 + 1)) + 1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_END\lPHI: r2 \l  PHI: (r2v2 char) = (r2v1 char), (r2v6 char) binds: [B:13:0x0019, B:12:0x0019] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:8:0x0019\l|r0[(r8 \- r1) \- 1] = r2\lint r1 = r1 + 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021}"];
Node_10 [shape=record,label="{10\:\ 0x0026|RETURN\l|return new java.lang.String(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.lang.String org.osmdroid.util.TileSystem.TileXYToQuadKey((r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_12;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_11 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

