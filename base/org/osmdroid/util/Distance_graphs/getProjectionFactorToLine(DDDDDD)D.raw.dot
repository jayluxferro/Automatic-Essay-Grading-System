digraph "CFG fororg.osmdroid.util.Distance.getProjectionFactorToLine(DDDDDD)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CMP_L  (r0 I:int) = (r16 I:double), (r20 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CMP_L  (r0 I:int) = (r18 I:double), (r22 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN  (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: MOVE  (r0 I:?[long, double]) = (r16 I:?[long, double]) \l0x000d: MOVE  (r2 I:?[long, double]) = (r18 I:?[long, double]) \l0x000f: MOVE  (r4 I:?[long, double]) = (r20 I:?[long, double]) \l0x0011: MOVE  (r6 I:?[long, double]) = (r22 I:?[long, double]) \l0x0013: MOVE  (r8 I:?[long, double]) = (r12 I:?[long, double]) \l0x0014: MOVE  (r10 I:?[long, double]) = (r14 I:?[long, double]) \l0x0015: INVOKE  (r0 I:double) = \l  (r0 I:double)\l  (r2 I:double)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l org.osmdroid.util.Distance.dotProduct(double, double, double, double, double, double):double type: STATIC \l0x0019: INVOKE  (r2 I:double) = \l  (r16 I:double)\l  (r18 I:double)\l  (r20 I:double)\l  (r22 I:double)\l org.osmdroid.util.Distance.getSquaredDistanceToPoint(double, double, double, double):double type: STATIC \l0x001d: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public static double org.osmdroid.util.Distance.getProjectionFactorToLine((r12 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

