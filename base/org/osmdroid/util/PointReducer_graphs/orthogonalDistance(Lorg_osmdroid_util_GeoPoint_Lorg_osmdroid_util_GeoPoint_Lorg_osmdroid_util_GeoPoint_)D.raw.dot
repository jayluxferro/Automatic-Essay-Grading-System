digraph "CFG fororg.osmdroid.util.PointReducer.orthogonalDistance(Lorg\/osmdroid\/util\/GeoPoint;Lorg\/osmdroid\/util\/GeoPoint;Lorg\/osmdroid\/util\/GeoPoint;)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0004: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0008: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x000a: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x000e: INVOKE  (r4 I:double) = (r8 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0012: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x0014: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0015: INVOKE  (r2 I:double) = (r8 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0019: INVOKE  (r4 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x001d: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x001f: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0020: INVOKE  (r2 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0024: INVOKE  (r4 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0028: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x002a: ARITH  (r0 I:double) = (r0 I:double) \- (r2 I:double) \l0x002b: INVOKE  (r2 I:double) = (r8 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x002f: INVOKE  (r4 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0033: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x0035: ARITH  (r0 I:double) = (r0 I:double) \- (r2 I:double) \l0x0036: INVOKE  (r2 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x003a: INVOKE  (r4 I:double) = (r8 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x003e: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x0040: ARITH  (r0 I:double) = (r0 I:double) \- (r2 I:double) \l0x0041: CONST  (r2 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0043: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0044: INVOKE  (r0 I:double) = (r0 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0048: INVOKE  (r4 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x004c: INVOKE  (r6 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0050: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) \l0x0051: INVOKE  (r8 I:double) = (r9 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0055: INVOKE  (r6 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0059: ARITH  (r8 I:double) = (r8 I:double) \- (r6 I:double) \l0x005a: INVOKE  (r8 I:double) = (r4 I:double), (r8 I:double) java.lang.Math.hypot(double, double):double type: STATIC \l0x005e: ARITH  (r0 I:double) = (r0 I:double) \/ (r8 I:double) \l0x005f: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0061|0x0061: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public static double org.osmdroid.util.PointReducer.orthogonalDistance((r8 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

