digraph "CFG fororg.osmdroid.util.PointReducer.reduceWithTolerance(Ljava\/util\/ArrayList;D)Ljava\/util\/ArrayList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r9 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CMP_G  (r1 I:int) = (r10 I:double), (r1 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x003d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: NEW_ARRAY  (r1 I:boolean[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: boolean[] \l0x0010: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: ARITH  (r7 I:int) = (r0 I:int) + (\-1 int) \l0x0014: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: APUT  \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r3 I:?[int, short, byte, char])\l  (r8 I:boolean A[IMMUTABLE_TYPE])\l \l0x0019: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: APUT  \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r7 I:?[int, short, byte, char])\l  (r2 I:boolean A[IMMUTABLE_TYPE])\l \l0x001e: APUT  \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l  (r2 I:boolean A[IMMUTABLE_TYPE])\l \l0x0020: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0022: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0023: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l0x0024: INVOKE  \l  (r2 I:java.util.ArrayList)\l  (r3 I:boolean[])\l  (r4 I:double)\l  (r6 I:int)\l  (r7 I:int)\l org.osmdroid.util.PointReducer.douglasPeuckerReduction(java.util.ArrayList, boolean[], double, int, int):void type: STATIC \l0x0027: NEW_INSTANCE  (r10 I:java.util.ArrayList) =  java.util.ArrayList \l0x0029: INVOKE  (r10 I:java.util.ArrayList), (r0 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r8 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: AGET  (r11 I:boolean A[IMMUTABLE_TYPE]) = \l  (r1 I:boolean[] A[IMMUTABLE_TYPE])\l  (r8 I:?[int, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: INVOKE  (r11 I:java.lang.Object) = (r9 I:java.util.ArrayList), (r8 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0036: INVOKE  (r10 I:java.util.ArrayList), (r11 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: RETURN  (r10 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: RETURN  (r9 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) \l}"];
MethodNode[shape=record,label="{public static java.util.ArrayList\<org.osmdroid.util.GeoPoint\> org.osmdroid.util.PointReducer.reduceWithTolerance((r9 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/ArrayList\<, Lorg\/osmdroid\/util\/GeoPoint;, \>;D), Ljava\/util\/ArrayList\<, Lorg\/osmdroid\/util\/GeoPoint;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_16[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_10;
}

