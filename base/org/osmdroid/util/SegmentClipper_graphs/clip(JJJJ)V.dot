digraph "CFG fororg.osmdroid.util.SegmentClipper.clip(JJJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r7 = r18\lr5 = r21\lr3 = r23\lr1 = r25\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (r7.mPathMode != false) goto L_0x0013\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if (isOnTheSameSideOut(r19, r21, r23, r25) == false) goto L_0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013}"];
Node_6 [shape=record,label="{6\:\ 0x0017|if (isInClipArea(r19, r21) == false) goto L_0x0071\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if (isInClipArea(r3, r1) == false) goto L_0x0026\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|nextVertex(r19, r21)\lnextVertex(r3, r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026}"];
Node_12 [shape=record,label="{12\:\ 0x002a|if (intersection(r19, r21, r23, r25) == false) goto L_0x004a\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|nextVertex(r19, r21)\lnextVertex(r7.mOptimIntersection.f444x, r7.mOptimIntersection.f445y)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|if (r7.mPathMode == false) goto L_?\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|nextVertex(clipX(r3), clipY(r1))\l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|java.lang.StringBuilder r15 = new java.lang.StringBuilder()\lr15.append(\"Cannot find expected mOptimIntersection for \")\lr5 = r8\lr3 = r15\lorg.osmdroid.util.RectL r8 = new org.osmdroid.util.RectL(r19, r21, r23, r25)\lr3.append(r5)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0070|throw new java.lang.RuntimeException(r3.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x0071}"];
Node_19 [shape=record,label="{19\:\ 0x0075|if (isInClipArea(r3, r1) == false) goto L_0x00c2\l}"];
Node_20 [shape=record,label="{20\:\ 0x0077}"];
Node_21 [shape=record,label="{21\:\ 0x007b|if (intersection(r19, r21, r23, r25) == false) goto L_0x009b\l}"];
Node_22 [shape=record,label="{22\:\ 0x007d}"];
Node_23 [shape=record,label="{23\:\ 0x007f|if (r7.mPathMode == false) goto L_0x008c\l}"];
Node_24 [shape=record,label="{24\:\ 0x0081|nextVertex(clipX(r19), clipY(r5))\l}"];
Node_25 [shape=record,label="{25\:\ 0x008c|nextVertex(r7.mOptimIntersection.f444x, r7.mOptimIntersection.f445y)\lnextVertex(r3, r1)\l}"];
Node_26 [shape=record,label="{26\:\ 0x009a|RETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ 0x009b|java.lang.StringBuilder r15 = new java.lang.StringBuilder()\lr15.append(\"Cannot find expected mOptimIntersection for \")\lr5 = r8\lr3 = r15\lorg.osmdroid.util.RectL r8 = new org.osmdroid.util.RectL(r19, r21, r23, r25)\lr3.append(r5)\l}"];
Node_28 [shape=record,label="{28\:\ 0x00c1|throw new java.lang.RuntimeException(r3.toString())\l}"];
Node_29 [shape=record,label="{29\:\ 0x00c2|r17 = 0\llong r9 = r7.mXMin\llong r11 = r7.mYMin\llong r13 = r7.mXMin\lr15 = r7.mYMax\l}"];
Node_30 [shape=record,label="{30\:\ 0x00dc|if (intersection(r19, r21, r23, r25, r9, r11, r13, r15) == false) goto L_0x00ea\l}"];
Node_31 [shape=record,label="{31\:\ 0x00de|r8 = r18\lr8.mOptimIntersection1.set(r8.mOptimIntersection)\lr17 = 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x00ea|r8 = r18\l}"];
Node_33 [shape=record,label="{33\:\ 0x00ec|PHI: r8 r17 \l  PHI: (r8v0 org.osmdroid.util.SegmentClipper) = (r8v6 org.osmdroid.util.SegmentClipper), (r8v7 org.osmdroid.util.SegmentClipper) binds: [B:32:0x00ea, B:31:0x00de] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v1 int) = (r17v0 int), (r17v6 int) binds: [B:32:0x00ea, B:31:0x00de] A[DONT_GENERATE, DONT_INLINE]\l|long r9 = r8.mXMax\llong r11 = r8.mYMin\llong r13 = r8.mXMax\lr15 = r8.mYMax\l}"];
Node_34 [shape=record,label="{34\:\ 0x0103|if (intersection(r19, r21, r23, r25, r9, r11, r13, r15) == false) goto L_0x011a\l}"];
Node_35 [shape=record,label="{35\:\ 0x0105|int r0 = r17 + 1\l}"];
Node_36 [shape=record,label="{36\:\ 0x0107|if (r17 != 0) goto L_0x010e\l}"];
Node_37 [shape=record,label="{37\:\ 0x0109|r7 = r18\lorg.osmdroid.util.PointL r1 = r7.mOptimIntersection1\l}"];
Node_38 [shape=record,label="{38\:\ 0x010e|r7 = r18\lorg.osmdroid.util.PointL r1 = r7.mOptimIntersection2\l}"];
Node_39 [shape=record,label="{39\:\ 0x0112|PHI: r1 r7 \l  PHI: (r1v13 org.osmdroid.util.PointL) = (r1v14 org.osmdroid.util.PointL), (r1v15 org.osmdroid.util.PointL) binds: [B:38:0x010e, B:37:0x0109] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v13 org.osmdroid.util.SegmentClipper) = (r7v14 org.osmdroid.util.SegmentClipper), (r7v15 org.osmdroid.util.SegmentClipper) binds: [B:38:0x010e, B:37:0x0109] A[DONT_GENERATE, DONT_INLINE]\l|r1.set(r7.mOptimIntersection)\lr17 = r0\l}"];
Node_40 [shape=record,label="{40\:\ 0x011a|r7 = r18\l}"];
Node_41 [shape=record,label="{41\:\ 0x011c|PHI: r7 r17 \l  PHI: (r7v4 org.osmdroid.util.SegmentClipper) = (r7v12 org.osmdroid.util.SegmentClipper), (r7v13 org.osmdroid.util.SegmentClipper) binds: [B:40:0x011a, B:39:0x0112] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v2 int) = (r17v1 int), (r17v5 int) binds: [B:40:0x011a, B:39:0x0112] A[DONT_GENERATE, DONT_INLINE]\l|long r9 = r7.mXMin\llong r11 = r7.mYMin\llong r13 = r7.mXMax\lr15 = r7.mYMin\l}"];
Node_42 [shape=record,label="{42\:\ 0x0133|if (intersection(r19, r21, r23, r25, r9, r11, r13, r15) == false) goto L_0x014a\l}"];
Node_43 [shape=record,label="{43\:\ 0x0135|int r0 = r17 + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x0137|if (r17 != 0) goto L_0x013e\l}"];
Node_45 [shape=record,label="{45\:\ 0x0139|r7 = r18\lorg.osmdroid.util.PointL r1 = r7.mOptimIntersection1\l}"];
Node_46 [shape=record,label="{46\:\ 0x013e|r7 = r18\lorg.osmdroid.util.PointL r1 = r7.mOptimIntersection2\l}"];
Node_47 [shape=record,label="{47\:\ 0x0142|PHI: r1 r7 \l  PHI: (r1v10 org.osmdroid.util.PointL) = (r1v11 org.osmdroid.util.PointL), (r1v12 org.osmdroid.util.PointL) binds: [B:46:0x013e, B:45:0x0139] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v9 org.osmdroid.util.SegmentClipper) = (r7v10 org.osmdroid.util.SegmentClipper), (r7v11 org.osmdroid.util.SegmentClipper) binds: [B:46:0x013e, B:45:0x0139] A[DONT_GENERATE, DONT_INLINE]\l|r1.set(r7.mOptimIntersection)\lr17 = r0\l}"];
Node_48 [shape=record,label="{48\:\ 0x014a|r7 = r18\l}"];
Node_49 [shape=record,label="{49\:\ 0x014c|PHI: r7 r17 \l  PHI: (r7v6 org.osmdroid.util.SegmentClipper) = (r7v8 org.osmdroid.util.SegmentClipper), (r7v9 org.osmdroid.util.SegmentClipper) binds: [B:48:0x014a, B:47:0x0142] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v3 int) = (r17v2 int), (r17v4 int) binds: [B:48:0x014a, B:47:0x0142] A[DONT_GENERATE, DONT_INLINE]\l|long r9 = r7.mXMin\llong r11 = r7.mYMax\llong r13 = r7.mXMax\lr15 = r7.mYMax\l}"];
Node_50 [shape=record,label="{50\:\ 0x0163|if (intersection(r19, r21, r23, r25, r9, r11, r13, r15) == false) goto L_0x0178\l}"];
Node_51 [shape=record,label="{51\:\ 0x0165|int r0 = r17 + 1\l}"];
Node_52 [shape=record,label="{52\:\ 0x0167|if (r17 != 0) goto L_0x016e\l}"];
Node_53 [shape=record,label="{53\:\ 0x0169|r1 = r18\lorg.osmdroid.util.PointL r2 = r1.mOptimIntersection1\l}"];
Node_54 [shape=record,label="{54\:\ 0x016e|r1 = r18\lorg.osmdroid.util.PointL r2 = r1.mOptimIntersection2\l}"];
Node_55 [shape=record,label="{55\:\ 0x0172|PHI: r1 r2 \l  PHI: (r1v7 org.osmdroid.util.SegmentClipper) = (r1v8 org.osmdroid.util.SegmentClipper), (r1v9 org.osmdroid.util.SegmentClipper) binds: [B:54:0x016e, B:53:0x0169] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v16 org.osmdroid.util.PointL) = (r2v17 org.osmdroid.util.PointL), (r2v18 org.osmdroid.util.PointL) binds: [B:54:0x016e, B:53:0x0169] A[DONT_GENERATE, DONT_INLINE]\l|r2.set(r1.mOptimIntersection)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0178|r1 = r18\lr0 = r17\l}"];
Node_57 [shape=record,label="{57\:\ 0x017c|PHI: r0 r1 \l  PHI: (r0v15 int) = (r0v32 int), (r0v33 int) binds: [B:56:0x0178, B:55:0x0172] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v5 org.osmdroid.util.SegmentClipper) = (r1v6 org.osmdroid.util.SegmentClipper), (r1v7 org.osmdroid.util.SegmentClipper) binds: [B:56:0x0178, B:55:0x0172] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_58 [shape=record,label="{58\:\ 0x017d|if (r0 != 2) goto L_0x01e8\l}"];
Node_59 [shape=record,label="{59\:\ 0x017f|double r4 = (double) r1.mOptimIntersection1.f444x\ldouble r6 = (double) r1.mOptimIntersection1.f445y\ldouble r12 = (double) r19\lr14 = r21\ldouble r10 = (double) r14\lr16 = r10\ldouble r4 = org.osmdroid.util.Distance.getSquaredDistanceToPoint(r4, r6, r12, r10)\ldouble r8 = (double) r1.mOptimIntersection2.f444x\ldouble r10 = (double) r1.mOptimIntersection2.f445y\lr6 = r14\lint r0 = (r4 \> org.osmdroid.util.Distance.getSquaredDistanceToPoint(r8, r10, r12, r16) ? 1 : (r4 == org.osmdroid.util.Distance.getSquaredDistanceToPoint(r8, r10, r12, r16) ? 0 : \-1))\l}"];
Node_60 [shape=record,label="{60\:\ 0x01a9|if (r0 \>= 0) goto L_0x01ae\l}"];
Node_61 [shape=record,label="{61\:\ 0x01ab|org.osmdroid.util.PointL r4 = r1.mOptimIntersection1\l}"];
Node_62 [shape=record,label="{62\:\ 0x01ae|org.osmdroid.util.PointL r4 = r1.mOptimIntersection2\l}"];
Node_63 [shape=record,label="{63\:\ 0x01b0|PHI: r4 \l  PHI: (r4v6 org.osmdroid.util.PointL) = (r4v11 org.osmdroid.util.PointL), (r4v12 org.osmdroid.util.PointL) binds: [B:62:0x01ae, B:61:0x01ab] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= 0) goto L_0x01b5\l}"];
Node_64 [shape=record,label="{64\:\ 0x01b2|org.osmdroid.util.PointL r0 = r1.mOptimIntersection2\l}"];
Node_65 [shape=record,label="{65\:\ 0x01b5|org.osmdroid.util.PointL r0 = r1.mOptimIntersection1\l}"];
Node_66 [shape=record,label="{66\:\ 0x01b7|PHI: r0 \l  PHI: (r0v28 org.osmdroid.util.PointL) = (r0v30 org.osmdroid.util.PointL), (r0v31 org.osmdroid.util.PointL) binds: [B:65:0x01b5, B:64:0x01b2] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_67 [shape=record,label="{67\:\ 0x01b9|if (r1.mPathMode == false) goto L_0x01c6\l}"];
Node_68 [shape=record,label="{68\:\ 0x01bb|r1.nextVertex(clipX(r19), r1.clipY(r6))\l}"];
Node_69 [shape=record,label="{69\:\ 0x01c6|r1.nextVertex(r4.f444x, r4.f445y)\lr1.nextVertex(r0.f444x, r0.f445y)\l}"];
Node_70 [shape=record,label="{70\:\ 0x01d6|if (r1.mPathMode == false) goto L_?\l}"];
Node_71 [shape=record,label="{71\:\ 0x01d8|r1.nextVertex(r1.clipX(r23), r1.clipY(r25))\l}"];
Node_72 [shape=record,label="{72\:\ 0x01e8|r2 = r19\lr4 = r23\lr6 = r21\lr8 = r25\l}"];
Node_73 [shape=record,label="{73\:\ 0x01f1|if (r0 != 1) goto L_0x0219\l}"];
Node_74 [shape=record,label="{74\:\ 0x01f3}"];
Node_75 [shape=record,label="{75\:\ 0x01f5|if (r1.mPathMode == false) goto L_?\l}"];
Node_76 [shape=record,label="{76\:\ 0x01f7|r1.nextVertex(clipX(r19), r1.clipY(r6))\lr1.nextVertex(r1.mOptimIntersection1.f444x, r1.mOptimIntersection1.f445y)\lr1.nextVertex(r1.clipX(r4), r1.clipY(r8))\l}"];
Node_77 [shape=record,label="{77\:\ 0x0219|if (r0 != 0) goto L_0x0245\l}"];
Node_78 [shape=record,label="{78\:\ 0x021b}"];
Node_79 [shape=record,label="{79\:\ 0x021d|if (r1.mPathMode == false) goto L_?\l}"];
Node_80 [shape=record,label="{80\:\ 0x021f|r1.nextVertex(clipX(r19), r1.clipY(r6))\lint r0 = getClosestCorner(r19, r21, r23, r25)\lr1.nextVertex(r1.cornerX[r0], r1.cornerY[r0])\lr1.nextVertex(r1.clipX(r4), r1.clipY(r8))\l}"];
Node_81 [shape=record,label="{81\:\ 0x0245|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Impossible mOptimIntersection count (\")\lr3.append(r0)\lr3.append(\")\")\l}"];
Node_82 [shape=record,label="{82\:\ 0x0260|throw new java.lang.RuntimeException(r3.toString())\l}"];
Node_83 [shape=record,label="{83\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_84 [shape=record,label="{84\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_85 [shape=record,label="{85\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_87 [shape=record,label="{87\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_90 [shape=record,label="{90\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.SegmentClipper.clip((r18v0 'this' org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r19v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_84;
Node_15 -> Node_83;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_48;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_56;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_55 -> Node_57;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_72;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_63;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_66;
Node_65 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_86;
Node_71 -> Node_85;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_77;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_88;
Node_76 -> Node_87;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_81;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_90;
Node_80 -> Node_89;
Node_81 -> Node_82;
}

