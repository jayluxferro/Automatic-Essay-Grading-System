digraph "CFG fororg.osmdroid.util.SegmentClipper.isOnTheSameSideOut(JJJJ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x0002: CMP_L  (r0 I:int) = (r3 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x0008: CMP_L  (r0 I:int) = (r7 I:long), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x000e: CMP_L  (r3 I:int) = (r3 I:long), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r3 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0014: CMP_L  (r3 I:int) = (r7 I:long), (r3 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:16:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IGET  (r3 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x001a: CMP_L  (r3 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0024 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IGET  (r3 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0020: CMP_L  (r3 I:int) = (r9 I:long), (r3 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:16:0x0030 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IGET  (r3 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0026: CMP_L  (r3 I:int) = (r5 I:long), (r3 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: IGET  (r3 I:long) = (r2 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x002c: CMP_L  (r3 I:int) = (r9 I:long), (r3 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0032 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|0x0032: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean org.osmdroid.util.SegmentClipper.isOnTheSameSideOut((r2 'this' I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
}

