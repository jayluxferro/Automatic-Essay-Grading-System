digraph "CFG fororg.osmdroid.util.SegmentClipper.clip(JJJJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r5 I:?[long, double]) = (r21 I:?[long, double]) \l0x0004: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x0006: MOVE  (r1 I:?[long, double]) = (r25 I:?[long, double]) \l0x0008: IGET  (r0 I:boolean) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l  (r23 I:long)\l  (r25 I:long)\l org.osmdroid.util.SegmentClipper.isOnTheSameSideOut(long, long, long, long):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r0 I:boolean) = \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l org.osmdroid.util.SegmentClipper.isInClipArea(long, long):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0071 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: INVOKE  (r0 I:boolean) = \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r3 I:long)\l  (r1 I:long)\l org.osmdroid.util.SegmentClipper.isInClipArea(long, long):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0026 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: INVOKE  \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x0022: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r3 I:long)\l  (r1 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  (r0 I:boolean) = \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l  (r23 I:long)\l  (r25 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long):boolean type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004a \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: INVOKE  \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x002f: IGET  (r0 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0031: IGET  (r5 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0033: IGET  (r0 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0035: IGET  (r8 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0037: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r5 I:long)\l  (r8 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x003a: IGET  (r0 I:boolean) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_14 [shape=record,label="{14\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0049 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: INVOKE  (r3 I:long) = (r7 I:org.osmdroid.util.SegmentClipper), (r3 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x0042: INVOKE  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper), (r1 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x0046: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r3 I:long)\l  (r0 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|0x0049: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x004c: NEW_INSTANCE  (r15 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004e: INVOKE  (r15 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0051: CONST_STR  (r8 I:java.lang.String) =  \"Cannot find expected mOptimIntersection for \" \l0x0053: INVOKE  (r15 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0056: NEW_INSTANCE  (r13 I:org.osmdroid.util.RectL) =  org.osmdroid.util.RectL \l0x0058: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0059: MOVE  (r9 I:?[long, double]) = (r19 I:?[long, double]) \l0x005b: MOVE  (r11 I:?[long, double]) = (r21 I:?[long, double]) \l0x005d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x005e: MOVE  (r13 I:?[long, double]) = (r23 I:?[long, double]) \l0x0060: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x0061: MOVE  (r15 I:?[long, double]) = (r25 I:?[long, double]) \l0x0063: INVOKE  \l  (r8 I:org.osmdroid.util.RectL)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.RectL.\<init\>(long, long, long, long):void type: DIRECT \l0x0066: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0069: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x006d: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|0x0070: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|0x0071: INVOKE  (r0 I:boolean) = \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r3 I:long)\l  (r1 I:long)\l org.osmdroid.util.SegmentClipper.isInClipArea(long, long):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0075|0x0075: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00c2 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0077|0x0077: INVOKE  (r0 I:boolean) = \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l  (r23 I:long)\l  (r25 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long):boolean type: DIRECT \l}"];
Node_22 [shape=record,label="{22\:\ 0x007b|0x007b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_23 [shape=record,label="{23\:\ 0x007d|0x007d: IGET  (r0 I:boolean) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_24 [shape=record,label="{24\:\ 0x007f|0x007f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008c \l}"];
Node_25 [shape=record,label="{25\:\ 0x0081|0x0081: INVOKE  (r8 I:long) = (r18 I:org.osmdroid.util.SegmentClipper), (r19 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x0085: INVOKE  (r5 I:long) = (r7 I:org.osmdroid.util.SegmentClipper), (r5 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x0089: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r8 I:long)\l  (r5 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x008c|0x008c: IGET  (r0 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x008e: IGET  (r5 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0090: IGET  (r0 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0092: IGET  (r8 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0094: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r5 I:long)\l  (r8 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x0097: INVOKE  \l  (r7 I:org.osmdroid.util.SegmentClipper)\l  (r3 I:long)\l  (r1 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: RETURN   \l}"];
Node_28 [shape=record,label="{28\:\ 0x009b|0x009b: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x009d: NEW_INSTANCE  (r15 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x009f: INVOKE  (r15 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a2: CONST_STR  (r8 I:java.lang.String) =  \"Cannot find expected mOptimIntersection for \" \l0x00a4: INVOKE  (r15 I:java.lang.StringBuilder), (r8 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a7: NEW_INSTANCE  (r13 I:org.osmdroid.util.RectL) =  org.osmdroid.util.RectL \l0x00a9: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x00aa: MOVE  (r9 I:?[long, double]) = (r19 I:?[long, double]) \l0x00ac: MOVE  (r11 I:?[long, double]) = (r21 I:?[long, double]) \l0x00ae: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x00af: MOVE  (r13 I:?[long, double]) = (r23 I:?[long, double]) \l0x00b1: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x00b2: MOVE  (r15 I:?[long, double]) = (r25 I:?[long, double]) \l0x00b4: INVOKE  \l  (r8 I:org.osmdroid.util.RectL)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.RectL.\<init\>(long, long, long, long):void type: DIRECT \l0x00b7: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x00ba: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00be: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c1|0x00c1: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c2|0x00c2: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00c4: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x00c6: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x00c8: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x00ca: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x00cc: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x00cd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00cf: MOVE  (r1 I:?[long, double]) = (r19 I:?[long, double]) \l0x00d1: MOVE  (r3 I:?[long, double]) = (r21 I:?[long, double]) \l0x00d3: MOVE  (r5 I:?[long, double]) = (r23 I:?[long, double]) \l0x00d5: MOVE  (r7 I:?[long, double]) = (r25 I:?[long, double]) \l0x00d7: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l0x00db: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00dc|0x00dc: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00ea \l}"];
Node_32 [shape=record,label="{32\:\ 0x00de|0x00de: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00e0: IGET  (r0 I:org.osmdroid.util.PointL) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l0x00e2: IGET  (r1 I:org.osmdroid.util.PointL) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x00e4: INVOKE  \l  (r0 I:org.osmdroid.util.PointL)\l  (r1 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l0x00e7: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ea|0x00ea: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00ec|0x00ec: IGET  (r9 I:long) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x00ee: IGET  (r11 I:long) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x00f0: IGET  (r13 I:long) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x00f2: IGET  (r0 I:long) = (r8 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x00f4: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x00f5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x00f7: MOVE  (r1 I:?[long, double]) = (r19 I:?[long, double]) \l0x00f9: MOVE  (r3 I:?[long, double]) = (r21 I:?[long, double]) \l0x00fb: MOVE  (r5 I:?[long, double]) = (r23 I:?[long, double]) \l0x00fd: MOVE  (r7 I:?[long, double]) = (r25 I:?[long, double]) \l0x00ff: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_35 [shape=record,label="{35\:\ 0x0103|0x0103: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x011a \l}"];
Node_36 [shape=record,label="{36\:\ 0x0105|0x0105: ARITH  (r0 I:int) = (r17 I:int) + (1 int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0107|0x0107: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x010e \l}"];
Node_38 [shape=record,label="{38\:\ 0x0109|0x0109: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x010b: IGET  (r1 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l}"];
Node_39 [shape=record,label="{39\:\ 0x010e|0x010e: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0110: IGET  (r1 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l}"];
Node_40 [shape=record,label="{40\:\ 0x0112|0x0112: IGET  (r2 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0114: INVOKE  \l  (r1 I:org.osmdroid.util.PointL)\l  (r2 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l0x0117: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x011a|0x011a: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x011c|0x011c: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x011e: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0120: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0122: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0124: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x0125: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0127: MOVE  (r1 I:?[long, double]) = (r19 I:?[long, double]) \l0x0129: MOVE  (r3 I:?[long, double]) = (r21 I:?[long, double]) \l0x012b: MOVE  (r5 I:?[long, double]) = (r23 I:?[long, double]) \l0x012d: MOVE  (r7 I:?[long, double]) = (r25 I:?[long, double]) \l0x012f: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_43 [shape=record,label="{43\:\ 0x0133|0x0133: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x014a \l}"];
Node_44 [shape=record,label="{44\:\ 0x0135|0x0135: ARITH  (r0 I:int) = (r17 I:int) + (1 int) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0137|0x0137: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x013e \l}"];
Node_46 [shape=record,label="{46\:\ 0x0139|0x0139: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x013b: IGET  (r1 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l}"];
Node_47 [shape=record,label="{47\:\ 0x013e|0x013e: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0140: IGET  (r1 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l}"];
Node_48 [shape=record,label="{48\:\ 0x0142|0x0142: IGET  (r2 I:org.osmdroid.util.PointL) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0144: INVOKE  \l  (r1 I:org.osmdroid.util.PointL)\l  (r2 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l0x0147: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_49 [shape=record,label="{49\:\ 0x014a|0x014a: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x014c|0x014c: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x014e: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0150: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0152: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0154: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x0155: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0157: MOVE  (r1 I:?[long, double]) = (r19 I:?[long, double]) \l0x0159: MOVE  (r3 I:?[long, double]) = (r21 I:?[long, double]) \l0x015b: MOVE  (r5 I:?[long, double]) = (r23 I:?[long, double]) \l0x015d: MOVE  (r7 I:?[long, double]) = (r25 I:?[long, double]) \l0x015f: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_51 [shape=record,label="{51\:\ 0x0163|0x0163: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0178 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0165|0x0165: ARITH  (r0 I:int) = (r17 I:int) + (1 int) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0167|0x0167: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x016e \l}"];
Node_54 [shape=record,label="{54\:\ 0x0169|0x0169: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x016b: IGET  (r2 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l}"];
Node_55 [shape=record,label="{55\:\ 0x016e|0x016e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0170: IGET  (r2 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l}"];
Node_56 [shape=record,label="{56\:\ 0x0172|0x0172: IGET  (r3 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection org.osmdroid.util.PointL \l0x0174: INVOKE  \l  (r2 I:org.osmdroid.util.PointL)\l  (r3 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l}"];
Node_57 [shape=record,label="{57\:\ 0x0178|0x0178: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x017a: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_58 [shape=record,label="{58\:\ 0x017c|0x017c: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x017d|0x017d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x01e8 \l}"];
Node_60 [shape=record,label="{60\:\ 0x017f|0x017f: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l0x0181: IGET  (r2 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0183: CAST  (r4 I:double) = (double) (r2 I:long) \l0x0184: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l0x0186: IGET  (r2 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0188: CAST  (r6 I:double) = (double) (r2 I:long) \l0x0189: MOVE  (r2 I:?[long, double]) = (r19 I:?[long, double]) \l0x018b: CAST  (r12 I:double) = (double) (r2 I:long) \l0x018c: MOVE  (r14 I:?[long, double]) = (r21 I:?[long, double]) \l0x018e: CAST  (r10 I:double) = (double) (r14 I:long) \l0x018f: MOVE  (r8 I:?[long, double]) = (r12 I:?[long, double]) \l0x0190: MOVE  (r16 I:?[long, double]) = (r10 I:?[long, double]) \l0x0192: INVOKE  (r4 I:double) = (r4 I:double), (r6 I:double), (r8 I:double), (r10 I:double) org.osmdroid.util.Distance.getSquaredDistanceToPoint(double, double, double, double):double type: STATIC \l0x0196: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l0x0198: IGET  (r6 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x019a: CAST  (r8 I:double) = (double) (r6 I:long) \l0x019b: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l0x019d: IGET  (r6 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x019f: CAST  (r10 I:double) = (double) (r6 I:long) \l0x01a0: MOVE  (r6 I:?[long, double]) = (r14 I:?[long, double]) \l0x01a1: MOVE  (r14 I:?[long, double]) = (r16 I:?[long, double]) \l0x01a3: INVOKE  (r8 I:double) = \l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.Distance.getSquaredDistanceToPoint(double, double, double, double):double type: STATIC \l0x01a7: CMP_G  (r0 I:int) = (r4 I:double), (r8 I:double) \l}"];
Node_61 [shape=record,label="{61\:\ 0x01a9|0x01a9: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:63:0x01ae \l}"];
Node_62 [shape=record,label="{62\:\ 0x01ab|0x01ab: IGET  (r4 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l}"];
Node_63 [shape=record,label="{63\:\ 0x01ae|0x01ae: IGET  (r4 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l}"];
Node_64 [shape=record,label="{64\:\ 0x01b0|0x01b0: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:66:0x01b5 \l}"];
Node_65 [shape=record,label="{65\:\ 0x01b2|0x01b2: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection2 org.osmdroid.util.PointL \l}"];
Node_66 [shape=record,label="{66\:\ 0x01b5|0x01b5: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l}"];
Node_67 [shape=record,label="{67\:\ 0x01b7|0x01b7: IGET  (r5 I:boolean) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_68 [shape=record,label="{68\:\ 0x01b9|0x01b9: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x01c6 \l}"];
Node_69 [shape=record,label="{69\:\ 0x01bb|0x01bb: INVOKE  (r2 I:long) = (r18 I:org.osmdroid.util.SegmentClipper), (r19 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x01bf: INVOKE  (r5 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r6 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x01c3: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r5 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_70 [shape=record,label="{70\:\ 0x01c6|0x01c6: IGET  (r2 I:long) = (r4 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x01c8: IGET  (r4 I:long) = (r4 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x01ca: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x01cd: IGET  (r2 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x01cf: IGET  (r4 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x01d1: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x01d4: IGET  (r0 I:boolean) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_71 [shape=record,label="{71\:\ 0x01d6|0x01d6: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x01e7 \l}"];
Node_72 [shape=record,label="{72\:\ 0x01d8|0x01d8: MOVE  (r4 I:?[long, double]) = (r23 I:?[long, double]) \l0x01da: INVOKE  (r2 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r4 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x01de: MOVE  (r8 I:?[long, double]) = (r25 I:?[long, double]) \l0x01e0: INVOKE  (r4 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r8 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x01e4: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_73 [shape=record,label="{73\:\ 0x01e7|0x01e7: RETURN   \l}"];
Node_74 [shape=record,label="{74\:\ 0x01e8|0x01e8: MOVE  (r2 I:?[long, double]) = (r19 I:?[long, double]) \l0x01ea: MOVE  (r4 I:?[long, double]) = (r23 I:?[long, double]) \l0x01ec: MOVE  (r6 I:?[long, double]) = (r21 I:?[long, double]) \l0x01ee: MOVE  (r8 I:?[long, double]) = (r25 I:?[long, double]) \l0x01f0: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x01f1|0x01f1: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0219 \l}"];
Node_76 [shape=record,label="{76\:\ 0x01f3|0x01f3: IGET  (r0 I:boolean) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_77 [shape=record,label="{77\:\ 0x01f5|0x01f5: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0218 \l}"];
Node_78 [shape=record,label="{78\:\ 0x01f7|0x01f7: INVOKE  (r2 I:long) = (r18 I:org.osmdroid.util.SegmentClipper), (r19 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x01fb: INVOKE  (r6 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r6 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x01ff: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r6 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x0202: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l0x0204: IGET  (r2 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0206: IGET  (r0 I:org.osmdroid.util.PointL) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mOptimIntersection1 org.osmdroid.util.PointL \l0x0208: IGET  (r6 I:long) = (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x020a: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r6 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x020d: INVOKE  (r2 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r4 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x0211: INVOKE  (r4 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r8 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x0215: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_79 [shape=record,label="{79\:\ 0x0218|0x0218: RETURN   \l}"];
Node_80 [shape=record,label="{80\:\ 0x0219|0x0219: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x0245 \l}"];
Node_81 [shape=record,label="{81\:\ 0x021b|0x021b: IGET  (r0 I:boolean) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_82 [shape=record,label="{82\:\ 0x021d|0x021d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x0244 \l}"];
Node_83 [shape=record,label="{83\:\ 0x021f|0x021f: INVOKE  (r10 I:long) = (r18 I:org.osmdroid.util.SegmentClipper), (r19 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x0223: INVOKE  (r12 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r6 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x0227: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r10 I:long)\l  (r12 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x022a: INVOKE  (r0 I:int) = \l  (r18 I:org.osmdroid.util.SegmentClipper)\l  (r19 I:long)\l  (r21 I:long)\l  (r23 I:long)\l  (r25 I:long)\l org.osmdroid.util.SegmentClipper.getClosestCorner(long, long, long, long):int type: DIRECT \l0x022e: IGET  (r2 I:long[]) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x0230: AGET  (r6 I:?[long, double]) = (r2 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0232: IGET  (r2 I:long[]) = (r1 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x0234: AGET  (r10 I:?[long, double]) = (r2 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0236: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r6 I:long)\l  (r10 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l0x0239: INVOKE  (r2 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r4 I:long) org.osmdroid.util.SegmentClipper.clipX(long):long type: DIRECT \l0x023d: INVOKE  (r4 I:long) = (r1 I:org.osmdroid.util.SegmentClipper), (r8 I:long) org.osmdroid.util.SegmentClipper.clipY(long):long type: DIRECT \l0x0241: INVOKE  \l  (r1 I:org.osmdroid.util.SegmentClipper)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.SegmentClipper.nextVertex(long, long):void type: DIRECT \l}"];
Node_84 [shape=record,label="{84\:\ 0x0244|0x0244: RETURN   \l}"];
Node_85 [shape=record,label="{85\:\ 0x0245|0x0245: NEW_INSTANCE  (r2 I:java.lang.RuntimeException) =  java.lang.RuntimeException \l0x0247: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0249: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x024c: CONST_STR  (r4 I:java.lang.String) =  \"Impossible mOptimIntersection count (\" \l0x024e: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0251: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0254: CONST_STR  (r0 I:java.lang.String) =  \")\" \l0x0256: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0259: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x025d: INVOKE  (r2 I:java.lang.RuntimeException), (r0 I:java.lang.String) java.lang.RuntimeException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_86 [shape=record,label="{86\:\ 0x0260|0x0260: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.SegmentClipper.clip((r18 'this' I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r19 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_19;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_57;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_74;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_64;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_67;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_73;
Node_72 -> Node_73;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_80;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_79;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_85;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_84;
Node_85 -> Node_86;
}

