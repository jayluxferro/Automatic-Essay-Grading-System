digraph "CFG fororg.osmdroid.util.SegmentClipper.getClosestCorner(JJJJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r2 I:?[long, double]) = \l  (9218868437227405311(0x7fefffffffffffff, double:1.7976931348623157E308) ?[long, double])\l \l0x0008: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x000b: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: IF  (r1 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:8:0x0042 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x0010: AGET  (r6 I:?[long, double]) = (r5 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x0012: CAST  (r8 I:double) = (double) (r6 I:long) \l0x0013: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x0015: AGET  (r6 I:?[long, double]) = (r5 I:?[long, double][]), (r1 I:?[int, short, byte, char]) \l0x0017: CAST  (r10 I:double) = (double) (r6 I:long) \l0x0018: MOVE  (r5 I:?[long, double]) = (r26 I:?[long, double]) \l0x001a: CAST  (r12 I:double) = (double) (r5 I:long) \l0x001b: MOVE  (r14 I:?[long, double]) = (r28 I:?[long, double]) \l0x001d: CAST  (r5 I:double) = (double) (r14 I:long) \l0x001e: MOVE  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: MOVE  (r21 I:?[long, double]) = (r2 I:?[long, double]) \l0x0022: MOVE  (r0 I:?[long, double]) = (r30 I:?[long, double]) \l0x0024: CAST  (r2 I:double) = (double) (r0 I:long) \l0x0025: MOVE  (r0 I:?[long, double]) = (r32 I:?[long, double]) \l0x0027: MOVE  (r23 I:?[long, double]) = (r2 I:?[long, double]) \l0x0029: CAST  (r2 I:double) = (double) (r0 I:long) \l0x002a: MOVE  (r14 I:?[long, double]) = (r5 I:?[long, double]) \l0x002b: MOVE  (r16 I:?[long, double]) = (r23 I:?[long, double]) \l0x002d: MOVE  (r18 I:?[long, double]) = (r2 I:?[long, double]) \l0x002f: INVOKE  (r2 I:double) = \l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:double)\l  (r18 I:double)\l org.osmdroid.util.Distance.getSquaredDistanceToSegment(double, double, double, double, double, double):double type: STATIC \l0x0033: CMP_L  (r5 I:int) = (r21 I:double), (r2 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|0x0035: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0037|0x0037: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: MOVE  (r2 I:?[long, double]) = (r21 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: ARITH  (r5 I:int) = (r20 I:int) + (1 int) \l0x003e: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{private int org.osmdroid.util.SegmentClipper.getClosestCorner((r25 'this' I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r26 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

