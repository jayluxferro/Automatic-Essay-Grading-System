digraph "CFG fororg.osmdroid.util.SegmentClipper.set(JJJJLorg\/osmdroid\/util\/PointAccepter;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r1 I:long), (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x0002: IPUT  (r3 I:long), (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0004: IPUT  (r5 I:long), (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0006: IPUT  (r7 I:long), (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0008: IGET  (r1 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x000a: IGET  (r2 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x000c: IGET  (r3 I:long) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x000e: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000f: APUT  \l  (r2 I:?[long, double][])\l  (r5 I:?[int, short, byte, char])\l  (r3 I:?[long, double])\l \l0x0011: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: APUT  \l  (r1 I:?[long, double][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[long, double])\l \l0x0014: IGET  (r1 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x0016: IGET  (r3 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerX long[] \l0x0018: IGET  (r6 I:long) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x001a: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x001b: APUT  \l  (r3 I:?[long, double][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x001d: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001e: APUT  \l  (r1 I:?[long, double][])\l  (r3 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x0020: IGET  (r1 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x0022: IGET  (r6 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x0024: IGET  (r7 I:long) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0026: APUT  \l  (r6 I:?[long, double][])\l  (r3 I:?[int, short, byte, char])\l  (r7 I:?[long, double])\l \l0x0028: APUT  \l  (r1 I:?[long, double][])\l  (r2 I:?[int, short, byte, char])\l  (r7 I:?[long, double])\l \l0x002a: IGET  (r1 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x002c: IGET  (r2 I:long[]) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.cornerY long[] \l0x002e: IGET  (r6 I:long) = (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0030: APUT  \l  (r2 I:?[long, double][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x0032: APUT  \l  (r1 I:?[long, double][])\l  (r5 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x0034: IPUT  \l  (r9 I:org.osmdroid.util.PointAccepter)\l  (r0 I:org.osmdroid.util.SegmentClipper)\l org.osmdroid.util.SegmentClipper.mPointAccepter org.osmdroid.util.PointAccepter \l0x0036: IPUT  (r10 I:boolean), (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mPathMode boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.SegmentClipper.set((r0 'this' I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r1 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.osmdroid.util.PointAccepter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

