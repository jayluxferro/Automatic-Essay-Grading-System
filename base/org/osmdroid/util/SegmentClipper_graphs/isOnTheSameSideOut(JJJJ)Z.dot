digraph "CFG fororg.osmdroid.util.SegmentClipper.isOnTheSameSideOut(JJJJ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r3 \> r2.mXMin ? 1 : (r3 == r2.mXMin ? 0 : \-1)) \>= 0) goto L_0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if ((r7 \> r2.mXMin ? 1 : (r7 == r2.mXMin ? 0 : \-1)) \< 0) goto L_0x0030\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if ((r3 \> r2.mXMax ? 1 : (r3 == r2.mXMax ? 0 : \-1)) \<= 0) goto L_0x0018\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012}"];
Node_7 [shape=record,label="{7\:\ 0x0016|if ((r7 \> r2.mXMax ? 1 : (r7 == r2.mXMax ? 0 : \-1)) \> 0) goto L_0x0030\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018}"];
Node_9 [shape=record,label="{9\:\ 0x001c|if ((r5 \> r2.mYMin ? 1 : (r5 == r2.mYMin ? 0 : \-1)) \>= 0) goto L_0x0024\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if ((r9 \> r2.mYMin ? 1 : (r9 == r2.mYMin ? 0 : \-1)) \< 0) goto L_0x0030\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024}"];
Node_13 [shape=record,label="{13\:\ 0x0028|if ((r5 \> r2.mYMax ? 1 : (r5 == r2.mYMax ? 0 : \-1)) \<= 0) goto L_0x0032\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a}"];
Node_15 [shape=record,label="{15\:\ 0x002e|if ((r9 \> r2.mYMax ? 1 : (r9 == r2.mYMax ? 0 : \-1)) \<= 0) goto L_0x0032\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|SYNTHETIC\lRETURN\l|return true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean org.osmdroid.util.SegmentClipper.isOnTheSameSideOut((r2v0 'this' org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r3v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
}

