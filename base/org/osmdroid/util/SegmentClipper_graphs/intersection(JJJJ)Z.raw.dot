digraph "CFG fororg.osmdroid.util.SegmentClipper.intersection(JJJJ)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r1 I:?[long, double]) = (r21 I:?[long, double]) \l0x0006: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x0008: MOVE  (r5 I:?[long, double]) = (r25 I:?[long, double]) \l0x000a: MOVE  (r7 I:?[long, double]) = (r27 I:?[long, double]) \l0x000c: IGET  (r9 I:long) = (r15 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x000e: IGET  (r11 I:long) = (r15 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0010: IGET  (r13 I:long) = (r15 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x0012: MOVE  (r17 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0014: MOVE  (r18 I:?[long, double]) = (r1 I:?[long, double]) \l0x0016: IGET  (r0 I:long) = (r15 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0018: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x0019: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x001a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r1 I:?[long, double]) = (r18 I:?[long, double]) \l0x001e: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0078 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0024|0x0024: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0026: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0028: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x002a: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x002c: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x002e: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x002f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0031: MOVE  (r1 I:?[long, double]) = (r21 I:?[long, double]) \l0x0033: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x0035: MOVE  (r5 I:?[long, double]) = (r25 I:?[long, double]) \l0x0037: MOVE  (r7 I:?[long, double]) = (r27 I:?[long, double]) \l0x0039: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x003d|0x003d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0078 \l}"];
Node_4 [shape=record,label="{4\:\ 0x003f|0x003f: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0041: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x0043: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0045: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0047: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMin long \l0x0049: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x004c: MOVE  (r1 I:?[long, double]) = (r21 I:?[long, double]) \l0x004e: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x0050: MOVE  (r5 I:?[long, double]) = (r25 I:?[long, double]) \l0x0052: MOVE  (r7 I:?[long, double]) = (r27 I:?[long, double]) \l0x0054: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0058|0x0058: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0078 \l}"];
Node_6 [shape=record,label="{6\:\ 0x005a|0x005a: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005c: IGET  (r9 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMin long \l0x005e: IGET  (r11 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0060: IGET  (r13 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mXMax long \l0x0062: IGET  (r0 I:long) = (r7 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.mYMax long \l0x0064: MOVE  (r15 I:?[long, double]) = (r0 I:?[long, double]) \l0x0065: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0067: MOVE  (r1 I:?[long, double]) = (r21 I:?[long, double]) \l0x0069: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x006b: MOVE  (r5 I:?[long, double]) = (r25 I:?[long, double]) \l0x006d: MOVE  (r7 I:?[long, double]) = (r27 I:?[long, double]) \l0x006f: INVOKE  (r0 I:boolean) = \l  (r0 I:org.osmdroid.util.SegmentClipper)\l  (r1 I:long)\l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:long)\l  (r13 I:long)\l  (r15 I:long)\l org.osmdroid.util.SegmentClipper.intersection(long, long, long, long, long, long, long, long):boolean type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0073|0x0073: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0076 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0076|0x0076: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0078|0x0078: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0079|0x0079: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean org.osmdroid.util.SegmentClipper.intersection((r20 'this' I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, THIS]), (r21 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
}

