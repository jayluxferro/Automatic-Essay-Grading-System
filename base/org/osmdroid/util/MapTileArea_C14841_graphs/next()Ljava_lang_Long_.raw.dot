digraph "CFG fororg.osmdroid.util.MapTileArea.1.next()Ljava\/lang\/Long;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.hasNext():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:java.lang.Long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x000a: INVOKE  (r0 I:int) = (r0 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$000(org.osmdroid.util.MapTileArea):int type: STATIC \l0x000e: IGET  (r1 I:int) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.mIndex int \l0x0010: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0012: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$100(org.osmdroid.util.MapTileArea):int type: STATIC \l0x0016: ARITH  (r1 I:int) = (r1 I:int) % (r2 I:int) \l0x0017: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0018: IGET  (r1 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x001a: INVOKE  (r1 I:int) = (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$200(org.osmdroid.util.MapTileArea):int type: STATIC \l0x001e: IGET  (r2 I:int) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.mIndex int \l0x0020: IGET  (r3 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0022: INVOKE  (r3 I:int) = (r3 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$100(org.osmdroid.util.MapTileArea):int type: STATIC \l0x0026: ARITH  (r2 I:int) = (r2 I:int) \/ (r3 I:int) \l0x0027: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0028: IGET  (r2 I:int) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.mIndex int \l0x002a: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x002c: IPUT  (r2 I:int), (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.mIndex int \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0030: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$300(org.osmdroid.util.MapTileArea):int type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:8:0x003e \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0038: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$300(org.osmdroid.util.MapTileArea):int type: STATIC \l0x003c: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0040: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$300(org.osmdroid.util.MapTileArea):int type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:11:0x004e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0046|0x0046: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0048: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$300(org.osmdroid.util.MapTileArea):int type: STATIC \l0x004c: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x004e|0x004e: IGET  (r2 I:org.osmdroid.util.MapTileArea) = (r4 I:org.osmdroid.util.MapTileArea$1) org.osmdroid.util.MapTileArea.1.this$0 org.osmdroid.util.MapTileArea \l0x0050: INVOKE  (r2 I:int) = (r2 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.access$400(org.osmdroid.util.MapTileArea):int type: STATIC \l0x0054: INVOKE  (r0 I:long) = (r2 I:int), (r0 I:int), (r1 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0058: INVOKE  (r0 I:java.lang.Long) = (r0 I:long) java.lang.Long.valueOf(long):java.lang.Long type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|0x005c: RETURN  (r0 I:java.lang.Long) \l}"];
MethodNode[shape=record,label="{public java.lang.Long org.osmdroid.util.MapTileArea.1.next((r4 'this' I:org.osmdroid.util.MapTileArea$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
Node_11 -> Node_12;
}

