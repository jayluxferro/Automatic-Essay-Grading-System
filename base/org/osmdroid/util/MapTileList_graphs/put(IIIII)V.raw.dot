digraph "CFG fororg.osmdroid.util.MapTileList.put(IIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0001: ARITH  (r1 I:int) = (r0 I:int) \<\< (r7 I:int) \l0x0003: ARITH  (r2 I:int) = (r10 I:int) \- (r8 I:int) \l0x0005: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int) \l0x0006: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r10 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: ARITH  (r2 I:int) = (r2 I:int) + (r10 I:int) \l0x000d: ARITH  (r10 I:int) = (r11 I:int) \- (r9 I:int) \l0x000f: ARITH  (r10 I:int) = (r10 I:int) + (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r11 I:?[int, byte, short, char]) \>= (r9 I:?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: ARITH  (r10 I:int) = (r10 I:int) + (r11 I:int) \l0x0016: INVOKE  (r11 I:int) = (r6 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.getSize():int type: VIRTUAL \l0x001a: ARITH  (r0 I:int) = (r2 I:int) * (r10 I:int) \l0x001c: ARITH  (r11 I:int) = (r11 I:int) + (r0 I:int) \l0x001d: INVOKE  (r6 I:org.osmdroid.util.MapTileList), (r11 I:int) org.osmdroid.util.MapTileList.ensureCapacity(int):void type: VIRTUAL \l0x0020: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r11 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:14:0x0039 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: IF  (r0 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:13:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: ARITH  (r4 I:int) = (r8 I:int) + (r11 I:int) \l0x0028: ARITH  (r4 I:int) = (r4 I:int) % (r1 I:int) \l0x0029: ARITH  (r5 I:int) = (r9 I:int) + (r0 I:int) \l0x002b: ARITH  (r5 I:int) = (r5 I:int) % (r1 I:int) \l0x002c: INVOKE  (r4 I:long) = (r7 I:int), (r4 I:int), (r5 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0030: INVOKE  (r6 I:org.osmdroid.util.MapTileList), (r4 I:long) org.osmdroid.util.MapTileList.put(long):void type: VIRTUAL \l0x0033: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|0x0036: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.MapTileList.put((r6 'this' I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_9;
}

