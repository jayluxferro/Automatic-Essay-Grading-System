digraph "CFG fororg.osmdroid.util.MapTileList.ensureCapacity(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: RETURN   \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r0 I:long[]) = (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:long[]) = (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] \l0x0009: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|SYNTHETIC\lSplitter:B:8:0x000e\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000e\l|0x000e: NEW_ARRAY  (r4 I:long[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: long[] A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER]\l0x0010: IGET  (r0 I:long[]) = (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001d A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|0x0014: IGET  (r0 I:long[]) = (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] A[Catch:\{ all \-\> 0x0021 \}]\l0x0016: IGET  (r1 I:long[]) = (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] A[Catch:\{ all \-\> 0x0021 \}]\l0x0018: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) A[Catch:\{ all \-\> 0x0021 \}]\l0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0021 \}]\l0x001a: INVOKE  \l  (r0 I:java.lang.Object)\l  (r2 I:int)\l  (r4 I:java.lang.Object)\l  (r2 I:int)\l  (r1 I:int)\l java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void type: STATIC A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: IPUT  (r4 I:long[]), (r3 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.mTileIndices long[] A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: RETURN   A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|ExcHandler: all null\lSplitter:B:8:0x000e\l|0x0021: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0021 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|0x0022: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0021 \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0023|0x0023: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.MapTileList.ensureCapacity((r3 'this' I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

