digraph "CFG fororg.osmdroid.util.MapTileAreaBorderComputer.computeFromSource(Lorg\/osmdroid\/util\/MapTileArea;Lorg\/osmdroid\/util\/MapTileArea;)Lorg\/osmdroid\/util\/MapTileArea;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r8 I:org.osmdroid.util.MapTileArea) =  org.osmdroid.util.MapTileArea \l0x0005: INVOKE  (r8 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.size():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: INVOKE  (r8 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.reset():org.osmdroid.util.MapTileArea type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: RETURN  (r8 I:org.osmdroid.util.MapTileArea) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r0 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.getLeft():int type: VIRTUAL \l0x0016: IGET  (r1 I:int) = (r6 I:org.osmdroid.util.MapTileAreaBorderComputer) org.osmdroid.util.MapTileAreaBorderComputer.mBorder int \l0x0018: ARITH  (r2 I:int) = (r0 I:int) \- (r1 I:int) \l0x001a: INVOKE  (r0 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.getTop():int type: VIRTUAL \l0x001e: IGET  (r1 I:int) = (r6 I:org.osmdroid.util.MapTileAreaBorderComputer) org.osmdroid.util.MapTileAreaBorderComputer.mBorder int \l0x0020: ARITH  (r3 I:int) = (r0 I:int) \- (r1 I:int) \l0x0022: IGET  (r0 I:int) = (r6 I:org.osmdroid.util.MapTileAreaBorderComputer) org.osmdroid.util.MapTileAreaBorderComputer.mBorder int \l0x0024: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0026: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0028: INVOKE  (r1 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.getZoom():int type: VIRTUAL \l0x002c: INVOKE  (r4 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.getWidth():int type: VIRTUAL \l0x0030: ARITH  (r4 I:int) = (r4 I:int) + (r2 I:int) \l0x0031: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int) \l0x0032: INVOKE  (r7 I:int) = (r7 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.getHeight():int type: VIRTUAL \l0x0036: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int) \l0x0037: ARITH  (r5 I:int) = (r7 I:int) + (r0 I:int) \l0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x003a: INVOKE  \l  (r0 I:org.osmdroid.util.MapTileArea)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l org.osmdroid.util.MapTileArea.set(int, int, int, int, int):org.osmdroid.util.MapTileArea type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x003d|0x003d: RETURN  (r8 I:org.osmdroid.util.MapTileArea) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.MapTileArea org.osmdroid.util.MapTileAreaBorderComputer.computeFromSource((r6 'this' I:org.osmdroid.util.MapTileAreaBorderComputer A[IMMUTABLE_TYPE, THIS]), (r7 I:org.osmdroid.util.MapTileArea A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.osmdroid.util.MapTileArea A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

