digraph "CFG fororg.osmdroid.util.MapTileArea.set(IIIII)Lorg\/osmdroid\/util\/MapTileArea;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mZoom int \l0x0002: IGET  (r2 I:int) = (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mZoom int \l0x0004: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: ARITH  (r2 I:int) = (r0 I:int) \<\< (r2 I:int) \l0x0007: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mMapTileUpperBound int \l0x0009: INVOKE  (r2 I:int) = \l  (r1 I:org.osmdroid.util.MapTileArea)\l  (r3 I:int)\l  (r5 I:int)\l org.osmdroid.util.MapTileArea.computeSize(int, int):int type: DIRECT \l0x000d: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mWidth int \l0x000f: INVOKE  (r2 I:int) = \l  (r1 I:org.osmdroid.util.MapTileArea)\l  (r4 I:int)\l  (r6 I:int)\l org.osmdroid.util.MapTileArea.computeSize(int, int):int type: DIRECT \l0x0013: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mHeight int \l0x0015: INVOKE  (r2 I:int) = (r1 I:org.osmdroid.util.MapTileArea), (r3 I:int) org.osmdroid.util.MapTileArea.cleanValue(int):int type: DIRECT \l0x0019: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mLeft int \l0x001b: INVOKE  (r2 I:int) = (r1 I:org.osmdroid.util.MapTileArea), (r4 I:int) org.osmdroid.util.MapTileArea.cleanValue(int):int type: DIRECT \l0x001f: IPUT  (r2 I:int), (r1 I:org.osmdroid.util.MapTileArea) org.osmdroid.util.MapTileArea.mTop int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0021|0x0021: RETURN  (r1 I:org.osmdroid.util.MapTileArea) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.MapTileArea org.osmdroid.util.MapTileArea.set((r1 'this' I:org.osmdroid.util.MapTileArea A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

