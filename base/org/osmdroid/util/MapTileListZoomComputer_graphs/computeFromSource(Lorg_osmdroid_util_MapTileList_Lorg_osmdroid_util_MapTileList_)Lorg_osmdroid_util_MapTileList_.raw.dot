digraph "CFG fororg.osmdroid.util.MapTileListZoomComputer.computeFromSource(Lorg\/osmdroid\/util\/MapTileList;Lorg\/osmdroid\/util\/MapTileList;)Lorg\/osmdroid\/util\/MapTileList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r12 I:org.osmdroid.util.MapTileList) =  org.osmdroid.util.MapTileList \l0x0005: INVOKE  (r12 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r2 I:int) = (r11 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.getSize():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:21:0x0064 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: INVOKE  (r2 I:long) = (r11 I:org.osmdroid.util.MapTileList), (r1 I:int) org.osmdroid.util.MapTileList.get(int):long type: VIRTUAL \l0x0014: INVOKE  (r4 I:int) = (r2 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x0018: IGET  (r5 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x001a: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:20:0x0061 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: SGET  (r5 I:int) =  org.osmdroid.util.MapTileIndex.mMaxZoomLevel int \l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|0x001f: IF  (r4 I:?[int, byte, short, char]) \<= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: INVOKE  (r5 I:int) = (r2 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x0026: INVOKE  (r2 I:int) = (r2 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x002a: IGET  (r3 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:14:0x003f \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IGET  (r3 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x0030: NEG  (r3 I:int) = (r3 I:int) \l0x0031: ARITH  (r3 I:int) = (r5 I:int) \>\> (r3 I:int) \l0x0033: IGET  (r5 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x0035: NEG  (r5 I:int) = (r5 I:int) \l0x0036: ARITH  (r2 I:int) = (r2 I:int) \>\> (r5 I:int) \l0x0037: INVOKE  (r2 I:long) = (r4 I:int), (r3 I:int), (r2 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x003b: INVOKE  (r12 I:org.osmdroid.util.MapTileList), (r2 I:long) org.osmdroid.util.MapTileList.put(long):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: IGET  (r3 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x0041: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0042: ARITH  (r3 I:int) = (r6 I:int) \<\< (r3 I:int) \l0x0044: IGET  (r6 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x0046: ARITH  (r5 I:int) = (r5 I:int) \<\< (r6 I:int) \l0x0047: IGET  (r6 I:int) = (r10 I:org.osmdroid.util.MapTileListZoomComputer) org.osmdroid.util.MapTileListZoomComputer.mZoomDelta int \l0x0049: ARITH  (r2 I:int) = (r2 I:int) \<\< (r6 I:int) \l0x004a: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IF  (r6 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:20:0x0061 \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: IF  (r7 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:19:0x005e \l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|0x0050: ARITH  (r8 I:int) = (r5 I:int) + (r6 I:int) \l0x0052: ARITH  (r9 I:int) = (r2 I:int) + (r7 I:int) \l0x0054: INVOKE  (r8 I:long) = (r4 I:int), (r8 I:int), (r9 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0058: INVOKE  (r12 I:org.osmdroid.util.MapTileList), (r8 I:long) org.osmdroid.util.MapTileList.put(long):void type: VIRTUAL \l0x005b: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005e|0x005e: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0061|0x0061: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0064|0x0064: RETURN  (r12 I:org.osmdroid.util.MapTileList) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.MapTileList org.osmdroid.util.MapTileListZoomComputer.computeFromSource((r10 'this' I:org.osmdroid.util.MapTileListZoomComputer A[IMMUTABLE_TYPE, THIS]), (r11 I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_21;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_20[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_17;
Node_19 -> Node_15;
Node_20 -> Node_4;
}

