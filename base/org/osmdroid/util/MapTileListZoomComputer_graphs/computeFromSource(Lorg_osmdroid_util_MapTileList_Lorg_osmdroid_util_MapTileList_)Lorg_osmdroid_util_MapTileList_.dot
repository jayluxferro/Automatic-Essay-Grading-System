digraph "CFG fororg.osmdroid.util.MapTileListZoomComputer.computeFromSource(Lorg\/osmdroid\/util\/MapTileList;Lorg\/osmdroid\/util\/MapTileList;)Lorg\/osmdroid\/util\/MapTileList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r12 == null) goto L_0x0003\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|org.osmdroid.util.MapTileList r12 = new org.osmdroid.util.MapTileList()\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|PHI: r12 \l  PHI: (r12v1 org.osmdroid.util.MapTileList) = (r12v0 org.osmdroid.util.MapTileList), (r12v2 org.osmdroid.util.MapTileList) binds: [B:0:0x0000, B:1:0x0003] A[DONT_GENERATE, DONT_INLINE]\l|r1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:2:0x0008, B:18:0x0061] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x000a\-\>B:18:0x0061\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r1 \>= r11.getSize()) goto L_0x0064\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|long r2 = r11.get(r1)\lint r4 = org.osmdroid.util.MapTileIndex.getZoom(r2) + r10.mZoomDelta\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r4 \< 0) goto L_0x0061\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d}"];
Node_8 [shape=record,label="{8\:\ 0x001f|if (r4 \<= org.osmdroid.util.MapTileIndex.mMaxZoomLevel) goto L_0x0022\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|int r5 = org.osmdroid.util.MapTileIndex.getX(r2)\lint r2 = org.osmdroid.util.MapTileIndex.getY(r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|if (r10.mZoomDelta \> 0) goto L_0x003f\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|r12.put(org.osmdroid.util.MapTileIndex.getTileIndex(r4, r5 \>\> (\-r10.mZoomDelta), r2 \>\> (\-r10.mZoomDelta)))\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|int r3 = 1 \<\< r10.mZoomDelta\lint r5 = r5 \<\< r10.mZoomDelta\lint r2 = r2 \<\< r10.mZoomDelta\lr6 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|LOOP_START\lPHI: r6 \l  PHI: (r6v4 int) = (r6v3 int), (r6v5 int) binds: [B:12:0x003f, B:17:0x005e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:13:0x004b\-\>B:17:0x005e\l|if (r6 \>= r3) goto L_0x0061\l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|r7 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|LOOP_START\lPHI: r7 \l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:14:0x004d, B:16:0x0050] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:15:0x004e\-\>B:16:0x0050\l|if (r7 \>= r3) goto L_0x005e\l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|LOOP_END\lLOOP:2: B:15:0x004e\-\>B:16:0x0050\l|r12.put(org.osmdroid.util.MapTileIndex.getTileIndex(r4, r5 + r6, r2 + r7))\lint r7 = r7 + 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|LOOP_END\lLOOP:1: B:13:0x004b\-\>B:17:0x005e\l|int r6 = r6 + 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|LOOP_END\lLOOP:0: B:3:0x000a\-\>B:18:0x0061\l|int r1 = r1 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|RETURN\l|return r12\l}"];
Node_20 [shape=record,label="{20\:\ 0x0064|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0061|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0061|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0061|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x005e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.MapTileList org.osmdroid.util.MapTileListZoomComputer.computeFromSource((r10v0 'this' org.osmdroid.util.MapTileListZoomComputer A[IMMUTABLE_TYPE, THIS]), (r11v0 org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_2[style=dashed];
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_20;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_21;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_24[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_22;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_15;
Node_17 -> Node_13;
Node_18 -> Node_3;
Node_20 -> Node_19;
Node_21 -> Node_18;
Node_22 -> Node_18;
Node_23 -> Node_18;
Node_24 -> Node_18;
Node_25 -> Node_17;
}

