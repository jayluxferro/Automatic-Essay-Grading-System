digraph "CFG fororg.osmdroid.util.UrlBackoff.shouldWait(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Map\<java.lang.String, org.osmdroid.util.Delay\> r0 = r2.mDelays\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|org.osmdroid.util.Delay r3 = r2.mDelays.get(r3)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|monitor\-exit(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r3 == null) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r3.shouldWait() == false) goto L_0x0016\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|SYNTHETIC\lRETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|LOOP_START\lREMOVE\lLOOP:0: B:10:0x0018\-\>B:14:0x0018\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|SYNTHETIC\lREMOVE\lSplitter:B:11:0x0019\l}"];
Node_12 [shape=record,label="{12\:\ ?|REMOVE\lSplitter:B:11:0x0019\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|REMOVE\l|throw r3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:10:0x0018\-\>B:14:0x0018\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.util.UrlBackoff.shouldWait((r2v0 'this' org.osmdroid.util.UrlBackoff A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_15;
Node_12 -> Node_16;
Node_14 -> Node_10;
Node_15 -> Node_13;
Node_16 -> Node_14;
}

