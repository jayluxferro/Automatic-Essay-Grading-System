digraph "CFG fororg.osmdroid.util.GeoPoint.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 != null) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r7 != r6) goto L_0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|RETURN\l|return true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r7.getClass() == getClass()) goto L_0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|org.osmdroid.util.GeoPoint r7 = (org.osmdroid.util.GeoPoint) r7\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|if ((r7.mLatitude \> r6.mLatitude ? 1 : (r7.mLatitude == r6.mLatitude ? 0 : \-1)) != 0) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d}"];
Node_12 [shape=record,label="{12\:\ 0x0023|if ((r7.mLongitude \> r6.mLongitude ? 1 : (r7.mLongitude == r6.mLongitude ? 0 : \-1)) != 0) goto L_?\l}"];
Node_13 [shape=record,label="{13\:\ 0x0025}"];
Node_14 [shape=record,label="{14\:\ 0x002b|if ((r7.mAltitude \> r6.mAltitude ? 1 : (r7.mAltitude == r6.mAltitude ? 0 : \-1)) != 0) goto L_?\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.util.GeoPoint.equals((r6v0 'this' org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, THIS]), (r7v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
}

