digraph "CFG fororg.osmdroid.util.GEMFFile.getZoomLevels()Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.TreeSet) =  java.util.TreeSet \l0x0002: INVOKE  (r0 I:java.util.TreeSet) java.util.TreeSet.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:java.util.List\<org.osmdroid.util.GEMFFile$GEMFRange\>) = (r3 I:org.osmdroid.util.GEMFFile) org.osmdroid.util.GEMFFile.mRangeData java.util.List \l0x0007: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r2 I:org.osmdroid.util.GEMFFile$GEMFRange) = (org.osmdroid.util.GEMFFile$GEMFRange) (r2 I:?[OBJECT, ARRAY]) \l0x0017: IGET  (r2 I:java.lang.Integer) = (r2 I:org.osmdroid.util.GEMFFile$GEMFRange) org.osmdroid.util.GEMFFile.GEMFRange.zoom java.lang.Integer \l0x0019: INVOKE  (r0 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN  (r0 I:java.util.Set\<java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{public java.util.Set\<java.lang.Integer\> org.osmdroid.util.GEMFFile.getZoomLevels((r3 'this' I:org.osmdroid.util.GEMFFile A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/Set\<, Ljava\/lang\/Integer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

