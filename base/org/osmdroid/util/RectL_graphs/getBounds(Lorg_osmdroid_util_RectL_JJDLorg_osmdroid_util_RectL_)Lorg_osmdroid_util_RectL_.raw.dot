digraph "CFG fororg.osmdroid.util.RectL.getBounds(Lorg\/osmdroid\/util\/RectL;JJDLorg\/osmdroid\/util\/RectL;)Lorg\/osmdroid\/util\/RectL;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r37 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r3 I:org.osmdroid.util.RectL) =  org.osmdroid.util.RectL \l0x0009: INVOKE  (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.\<init\>():void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x000e: CMP_L  (r4 I:int) = (r35 I:double), (r4 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r1 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x0014: IPUT  (r1 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x0016: IGET  (r1 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x0018: IPUT  (r1 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x001a: IGET  (r1 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x001c: IPUT  (r1 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x001e: IGET  (r0 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x0020: IPUT  (r0 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: RETURN  (r3 I:org.osmdroid.util.RectL) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: CONST  (r4 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x0028: ARITH  (r1 I:double) = (r35 I:double) * (r4 I:double) \l0x002a: CONST  (r4 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x002f: ARITH  (r1 I:double) = (r1 I:double) \/ (r4 I:double) \l0x0030: INVOKE  (r16 I:double) = (r1 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0034: INVOKE  (r1 I:double) = (r1 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0038: IGET  (r14 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x003a: IGET  (r12 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x003c: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double]) \l0x003d: MOVE  (r6 I:?[long, double]) = (r12 I:?[long, double]) \l0x003e: MOVE  (r8 I:?[long, double]) = (r31 I:?[long, double]) \l0x0040: MOVE  (r10 I:?[long, double]) = (r33 I:?[long, double]) \l0x0042: MOVE  (r18 I:?[long, double]) = (r12 I:?[long, double]) \l0x0044: MOVE  (r12 I:?[long, double]) = (r16 I:?[long, double]) \l0x0046: MOVE  (r20 I:?[long, double]) = (r14 I:?[long, double]) \l0x0048: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x0049: INVOKE  (r14 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedX(long, long, long, long, double, double):long type: STATIC \l0x004d: MOVE  (r4 I:?[long, double]) = (r20 I:?[long, double]) \l0x004f: MOVE  (r6 I:?[long, double]) = (r18 I:?[long, double]) \l0x0051: MOVE  (r22 I:?[long, double]) = (r14 I:?[long, double]) \l0x0053: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x0054: INVOKE  (r4 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedY(long, long, long, long, double, double):long type: STATIC \l0x0058: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x005a: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x005c: MOVE  (r4 I:?[long, double]) = (r22 I:?[long, double]) \l0x005e: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x0060: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x0062: IGET  (r14 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x0064: IGET  (r12 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x0066: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double]) \l0x0067: MOVE  (r6 I:?[long, double]) = (r12 I:?[long, double]) \l0x0068: MOVE  (r18 I:?[long, double]) = (r12 I:?[long, double]) \l0x006a: MOVE  (r12 I:?[long, double]) = (r16 I:?[long, double]) \l0x006c: MOVE  (r20 I:?[long, double]) = (r14 I:?[long, double]) \l0x006e: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x006f: INVOKE  (r14 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedX(long, long, long, long, double, double):long type: STATIC \l0x0073: MOVE  (r4 I:?[long, double]) = (r20 I:?[long, double]) \l0x0075: MOVE  (r6 I:?[long, double]) = (r18 I:?[long, double]) \l0x0077: MOVE  (r24 I:?[long, double]) = (r14 I:?[long, double]) \l0x0079: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x007a: INVOKE  (r4 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedY(long, long, long, long, double, double):long type: STATIC \l0x007e: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x0080: CMP_L  (r6 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0082|0x0082: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0086 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0084|0x0084: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l}"];
Node_11 [shape=record,label="{11\:\ 0x0086|0x0086: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x0088: CMP_L  (r6 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x008a|0x008a: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x008e \l}"];
Node_13 [shape=record,label="{13\:\ 0x008c|0x008c: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l}"];
Node_14 [shape=record,label="{14\:\ 0x008e|0x008e: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x0090: MOVE  (r6 I:?[long, double]) = (r24 I:?[long, double]) \l0x0092: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0094|0x0094: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0098 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0096|0x0096: IPUT  (r6 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l}"];
Node_17 [shape=record,label="{17\:\ 0x0098|0x0098: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x009a: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x009c|0x009c: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x00a0 \l}"];
Node_19 [shape=record,label="{19\:\ 0x009e|0x009e: IPUT  (r6 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l}"];
Node_20 [shape=record,label="{20\:\ 0x00a0|0x00a0: IGET  (r14 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x00a2: IGET  (r12 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x00a4: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double]) \l0x00a5: MOVE  (r6 I:?[long, double]) = (r12 I:?[long, double]) \l0x00a6: MOVE  (r8 I:?[long, double]) = (r31 I:?[long, double]) \l0x00a8: MOVE  (r10 I:?[long, double]) = (r33 I:?[long, double]) \l0x00aa: MOVE  (r18 I:?[long, double]) = (r12 I:?[long, double]) \l0x00ac: MOVE  (r12 I:?[long, double]) = (r16 I:?[long, double]) \l0x00ae: MOVE  (r20 I:?[long, double]) = (r14 I:?[long, double]) \l0x00b0: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x00b1: INVOKE  (r14 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedX(long, long, long, long, double, double):long type: STATIC \l0x00b5: MOVE  (r4 I:?[long, double]) = (r20 I:?[long, double]) \l0x00b7: MOVE  (r6 I:?[long, double]) = (r18 I:?[long, double]) \l0x00b9: MOVE  (r26 I:?[long, double]) = (r14 I:?[long, double]) \l0x00bb: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x00bc: INVOKE  (r4 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedY(long, long, long, long, double, double):long type: STATIC \l0x00c0: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x00c2: CMP_L  (r6 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00c4|0x00c4: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:23:0x00c8 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00c6|0x00c6: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l}"];
Node_23 [shape=record,label="{23\:\ 0x00c8|0x00c8: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x00ca: CMP_L  (r6 I:int) = (r6 I:long), (r4 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x00cc|0x00cc: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:26:0x00d0 \l}"];
Node_25 [shape=record,label="{25\:\ 0x00ce|0x00ce: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d0|0x00d0: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x00d2: MOVE  (r6 I:?[long, double]) = (r26 I:?[long, double]) \l0x00d4: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00d6|0x00d6: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:29:0x00da \l}"];
Node_28 [shape=record,label="{28\:\ 0x00d8|0x00d8: IPUT  (r6 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l}"];
Node_29 [shape=record,label="{29\:\ 0x00da|0x00da: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x00dc: CMP_L  (r4 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00de|0x00de: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:32:0x00e2 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00e0|0x00e0: IPUT  (r6 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l}"];
Node_32 [shape=record,label="{32\:\ 0x00e2|0x00e2: IGET  (r14 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x00e4: IGET  (r12 I:long) = (r0 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x00e6: MOVE  (r4 I:?[long, double]) = (r14 I:?[long, double]) \l0x00e7: MOVE  (r6 I:?[long, double]) = (r12 I:?[long, double]) \l0x00e8: MOVE  (r8 I:?[long, double]) = (r31 I:?[long, double]) \l0x00ea: MOVE  (r10 I:?[long, double]) = (r33 I:?[long, double]) \l0x00ec: MOVE  (r18 I:?[long, double]) = (r12 I:?[long, double]) \l0x00ee: MOVE  (r12 I:?[long, double]) = (r16 I:?[long, double]) \l0x00f0: MOVE  (r20 I:?[long, double]) = (r14 I:?[long, double]) \l0x00f2: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x00f3: INVOKE  (r14 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedX(long, long, long, long, double, double):long type: STATIC \l0x00f7: MOVE  (r4 I:?[long, double]) = (r20 I:?[long, double]) \l0x00f9: MOVE  (r6 I:?[long, double]) = (r18 I:?[long, double]) \l0x00fb: MOVE  (r28 I:?[long, double]) = (r14 I:?[long, double]) \l0x00fd: MOVE  (r14 I:?[long, double]) = (r1 I:?[long, double]) \l0x00fe: INVOKE  (r0 I:long) = \l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:long)\l  (r10 I:long)\l  (r12 I:double)\l  (r14 I:double)\l org.osmdroid.util.RectL.getRotatedY(long, long, long, long, double, double):long type: STATIC \l0x0102: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l0x0104: CMP_L  (r2 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0106|0x0106: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:35:0x010a \l}"];
Node_34 [shape=record,label="{34\:\ 0x0108|0x0108: IPUT  (r0 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.top long \l}"];
Node_35 [shape=record,label="{35\:\ 0x010a|0x010a: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l0x010c: CMP_L  (r2 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_36 [shape=record,label="{36\:\ 0x010e|0x010e: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:38:0x0112 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0110|0x0110: IPUT  (r0 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.bottom long \l}"];
Node_38 [shape=record,label="{38\:\ 0x0112|0x0112: IGET  (r0 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l0x0114: MOVE  (r4 I:?[long, double]) = (r28 I:?[long, double]) \l0x0116: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0118|0x0118: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:41:0x011c \l}"];
Node_40 [shape=record,label="{40\:\ 0x011a|0x011a: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.left long \l}"];
Node_41 [shape=record,label="{41\:\ 0x011c|0x011c: IGET  (r0 I:long) = (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l0x011e: CMP_L  (r0 I:int) = (r0 I:long), (r4 I:long) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0120|0x0120: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:44:0x0124 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0122|0x0122: IPUT  (r4 I:long), (r3 I:org.osmdroid.util.RectL) org.osmdroid.util.RectL.right long \l}"];
Node_44 [shape=record,label="{44\:\ 0x0124|0x0124: RETURN  (r3 I:org.osmdroid.util.RectL) \l}"];
MethodNode[shape=record,label="{public static org.osmdroid.util.RectL org.osmdroid.util.RectL.getBounds((r30 I:org.osmdroid.util.RectL A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:org.osmdroid.util.RectL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
}

