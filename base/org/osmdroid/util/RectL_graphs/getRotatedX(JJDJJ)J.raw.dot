digraph "CFG fororg.osmdroid.util.RectL.getRotatedX(JJDJJ)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r19 I:double), (r2 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: RETURN  (r15 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST  (r4 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x000c: ARITH  (r0 I:double) = (r19 I:double) * (r4 I:double) \l0x000e: CONST  (r4 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x0013: ARITH  (r0 I:double) = (r0 I:double) \/ (r4 I:double) \l0x0014: INVOKE  (r11 I:double) = (r0 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0018: INVOKE  (r13 I:double) = (r0 I:double) java.lang.Math.sin(double):double type: STATIC \l0x001c: MOVE  (r3 I:?[long, double]) = (r15 I:?[long, double]) \l0x001d: MOVE  (r5 I:?[long, double]) = (r17 I:?[long, double]) \l0x001f: MOVE  (r7 I:?[long, double]) = (r21 I:?[long, double]) \l0x0021: MOVE  (r9 I:?[long, double]) = (r23 I:?[long, double]) \l0x0023: INVOKE  (r0 I:long) = \l  (r3 I:long)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:long)\l  (r11 I:double)\l  (r13 I:double)\l org.osmdroid.util.RectL.getRotatedX(long, long, long, long, double, double):long type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public static long org.osmdroid.util.RectL.getRotatedX((r15 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

