digraph "CFG fororg.osmdroid.util.BoundingBox.increaseByScale(F)Lorg\/osmdroid\/util\/BoundingBox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CMP_G  (r1 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:4:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r1 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x000b: INVOKE  (r2 I:double) = (r21 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getCenterLatitude():double type: VIRTUAL \l0x000f: INVOKE  (r4 I:double) = (r21 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getLatitudeSpan():double type: VIRTUAL \l0x0013: CONST  (r6 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0015: ARITH  (r4 I:double) = (r4 I:double) \/ (r6 I:double) \l0x0016: CAST  (r8 I:double) = (double) (r0 I:float) \l0x0017: ARITH  (r4 I:double) = (r4 I:double) * (r8 I:double) \l0x0019: ARITH  (r10 I:double) = (r2 I:double) + (r4 I:double) \l0x001b: INVOKE  (r13 I:double) = (r1 I:org.osmdroid.util.TileSystem), (r10 I:double) org.osmdroid.util.TileSystem.cleanLatitude(double):double type: VIRTUAL \l0x001f: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0020: INVOKE  (r17 I:double) = (r1 I:org.osmdroid.util.TileSystem), (r2 I:double) org.osmdroid.util.TileSystem.cleanLatitude(double):double type: VIRTUAL \l0x0024: INVOKE  (r2 I:double) = (r21 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getCenterLongitude():double type: VIRTUAL \l0x0028: INVOKE  (r4 I:double) = (r21 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getLongitudeSpanWithDateLine():double type: VIRTUAL \l0x002c: ARITH  (r4 I:double) = (r4 I:double) \/ (r6 I:double) \l0x002d: ARITH  (r4 I:double) = (r4 I:double) * (r8 I:double) \l0x002f: ARITH  (r6 I:double) = (r2 I:double) + (r4 I:double) \l0x0031: INVOKE  (r15 I:double) = (r1 I:org.osmdroid.util.TileSystem), (r6 I:double) org.osmdroid.util.TileSystem.cleanLongitude(double):double type: VIRTUAL \l0x0035: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0036: INVOKE  (r19 I:double) = (r1 I:org.osmdroid.util.TileSystem), (r2 I:double) org.osmdroid.util.TileSystem.cleanLongitude(double):double type: VIRTUAL \l0x003a: NEW_INSTANCE  (r0 I:org.osmdroid.util.BoundingBox) =  org.osmdroid.util.BoundingBox \l0x003c: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r12 I:org.osmdroid.util.BoundingBox)\l  (r13 I:double)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:double)\l org.osmdroid.util.BoundingBox.\<init\>(double, double, double, double):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0040|0x0040: RETURN  (r0 I:org.osmdroid.util.BoundingBox) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|0x0041: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0043: CONST_STR  (r1 I:java.lang.String) =  \"pBoundingboxPaddingRelativeScale must be positive\" \l0x0045: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0048|0x0048: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.BoundingBox org.osmdroid.util.BoundingBox.increaseByScale((r21 'this' I:org.osmdroid.util.BoundingBox A[IMMUTABLE_TYPE, THIS]), (r22 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

