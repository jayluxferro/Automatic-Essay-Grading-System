digraph "CFG fororg.osmdroid.util.BoundingBox.set(DDDD)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  (r2 I:double), (r1 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.mLatNorth double \l0x0002: IPUT  (r4 I:double), (r1 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.mLonEast double \l0x0004: IPUT  (r6 I:double), (r1 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.mLatSouth double \l0x0006: IPUT  (r8 I:double), (r1 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.mLonWest double \l0x0008: INVOKE  (r0 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x000c: INVOKE  (r2 I:boolean) = (r0 I:org.osmdroid.util.TileSystem), (r2 I:double) org.osmdroid.util.TileSystem.isValidLatitude(double):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0076 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: INVOKE  (r2 I:boolean) = (r0 I:org.osmdroid.util.TileSystem), (r6 I:double) org.osmdroid.util.TileSystem.isValidLatitude(double):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INVOKE  (r2 I:boolean) = (r0 I:org.osmdroid.util.TileSystem), (r8 I:double) org.osmdroid.util.TileSystem.isValidLongitude(double):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|0x001c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0040 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: INVOKE  (r2 I:boolean) = (r0 I:org.osmdroid.util.TileSystem), (r4 I:double) org.osmdroid.util.TileSystem.isValidLongitude(double):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0027: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0029: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002c: CONST_STR  (r4 I:java.lang.String) =  \"east must be in \" \l0x002e: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r4 I:java.lang.String) = (r0 I:org.osmdroid.util.TileSystem) org.osmdroid.util.TileSystem.toStringLongitudeSpan():java.lang.String type: VIRTUAL \l0x0035: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0038: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003c: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0042: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0044: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0047: CONST_STR  (r4 I:java.lang.String) =  \"west must be in \" \l0x0049: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004c: INVOKE  (r4 I:java.lang.String) = (r0 I:org.osmdroid.util.TileSystem) org.osmdroid.util.TileSystem.toStringLongitudeSpan():java.lang.String type: VIRTUAL \l0x0050: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0053: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0057: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x005a|0x005a: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x005b|0x005b: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005d: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005f: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0062: CONST_STR  (r4 I:java.lang.String) =  \"south must be in \" \l0x0064: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0067: INVOKE  (r4 I:java.lang.String) = (r0 I:org.osmdroid.util.TileSystem) org.osmdroid.util.TileSystem.toStringLatitudeSpan():java.lang.String type: VIRTUAL \l0x006b: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006e: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0072: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0075|0x0075: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0076|0x0076: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0078: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x007a: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x007d: CONST_STR  (r4 I:java.lang.String) =  \"north must be in \" \l0x007f: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0082: INVOKE  (r4 I:java.lang.String) = (r0 I:org.osmdroid.util.TileSystem) org.osmdroid.util.TileSystem.toStringLatitudeSpan():java.lang.String type: VIRTUAL \l0x0086: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0089: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008d: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x0090|0x0090: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.util.BoundingBox.set((r1 'this' I:org.osmdroid.util.BoundingBox A[IMMUTABLE_TYPE, THIS]), (r2 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

