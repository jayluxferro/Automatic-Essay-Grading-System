digraph "CFG fororg.osmdroid.util.MapTileIndex.checkValues(III)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: SGET  (r0 I:int) =  org.osmdroid.util.MapTileIndex.mMaxZoomLevel int \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r4 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:4:0x000b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"Zoom\" \l0x0008: INVOKE  (r4 I:int), (r4 I:int), (r0 I:java.lang.String) org.osmdroid.util.MapTileIndex.throwIllegalValue(int, int, java.lang.String):void type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000c: ARITH  (r0 I:int) = (r0 I:int) \<\< (r4 I:int) \l0x000d: CAST  (r0 I:long) = (long) (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CAST  (r2 I:long) = (long) (r5 I:int) \l0x0011: CMP_L  (r2 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST_STR  (r2 I:java.lang.String) =  \"X\" \l0x0017: INVOKE  (r4 I:int), (r5 I:int), (r2 I:java.lang.String) org.osmdroid.util.MapTileIndex.throwIllegalValue(int, int, java.lang.String):void type: STATIC \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:12:0x0021 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: CAST  (r2 I:long) = (long) (r6 I:int) \l0x001d: CMP_L  (r5 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IF  (r5 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:13:0x0026 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: CONST_STR  (r5 I:java.lang.String) =  \"Y\" \l0x0023: INVOKE  (r4 I:int), (r6 I:int), (r5 I:java.lang.String) org.osmdroid.util.MapTileIndex.throwIllegalValue(int, int, java.lang.String):void type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: RETURN   \l}"];
MethodNode[shape=record,label="{private static void org.osmdroid.util.MapTileIndex.checkValues((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

