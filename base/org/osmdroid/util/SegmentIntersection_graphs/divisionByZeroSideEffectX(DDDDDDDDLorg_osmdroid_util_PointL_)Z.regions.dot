digraph "CFG fororg.osmdroid.util.SegmentIntersection.divisionByZeroSideEffectX(DDDDDDDDLorg\/osmdroid\/util\/PointL;)Z" {
subgraph cluster_Region_2085429609 {
label = "R(1:(2:(1:5)|(2:6|7)))";
node [shape=record,color=blue];
subgraph cluster_Region_810761065 {
label = "R(2:(1:5)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1821618100 {
label = "IF [B:1:0x0003, B:4:0x0008] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r21 != r25) goto L_0x0005\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|ADDED_TO_REGION\l|if (r29 == r33) goto L_0x000a\l}"];
subgraph cluster_Region_1808103333 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000a|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_2115392989 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b}"];
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\l|return check(r21, r23, r25, r27, r29, r31, r33, r35, r37, r21, (((r21 \- r29) \/ (r33 \- r29)) * (r35 \- r31)) + r31)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006}"];
MethodNode[shape=record,label="{private static boolean org.osmdroid.util.SegmentIntersection.divisionByZeroSideEffectX((r21v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37v0 org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
}

