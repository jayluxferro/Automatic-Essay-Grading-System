digraph "CFG fororg.osmdroid.util.SegmentIntersection.intersection(DDDDDDDDLorg\/osmdroid\/util\/PointL;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (parallelSideEffect(r33, r35, r37, r39, r41, r43, r45, r47, r49) == false) goto L_0x0009\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (divisionByZeroSideEffect(r33, r35, r37, r39, r41, r43, r45, r47, r49) == false) goto L_0x0010\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\l|return true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|double r16 = r33 \- r37\ldouble r19 = r43 \- r47\ldouble r23 = r35 \- r39\ldouble r25 = r41 \- r45\ldouble r21 = (r16 * r19) \- (r23 * r25)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|if ((r21 \> 0.0d ? 1 : (r21 == 0.0d ? 0 : \-1)) != 0) goto L_0x0028\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|double r27 = (r33 * r39) \- (r35 * r37)\ldouble r29 = (r41 * r47) \- (r43 * r45)\lr0 = r33\lr2 = r35\lr4 = r37\lr6 = r39\lr8 = r41\lr10 = r43\lr12 = r45\lr14 = r47\lr16 = r49\l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|RETURN\l|return check(r0, r2, r4, r6, r8, r10, r12, r14, r16, ((r25 * r27) \- (r16 * r29)) \/ r21, ((r19 * r27) \- (r23 * r29)) \/ r21)\l}"];
MethodNode[shape=record,label="{public static boolean org.osmdroid.util.SegmentIntersection.intersection((r33v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r39v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r41v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r43v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r45v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r47v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r49v0 org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
}

