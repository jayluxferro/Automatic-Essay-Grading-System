digraph "CFG fororg.osmdroid.util.SegmentIntersection.intersection(DDDDDDDDLorg\/osmdroid\/util\/PointL;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r16 I:boolean) = \l  (r33 I:double)\l  (r35 I:double)\l  (r37 I:double)\l  (r39 I:double)\l  (r41 I:double)\l  (r43 I:double)\l  (r45 I:double)\l  (r47 I:double)\l  (r49 I:org.osmdroid.util.PointL)\l org.osmdroid.util.SegmentIntersection.parallelSideEffect(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL):boolean type: STATIC \l0x0004: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN  (r17 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: INVOKE  (r16 I:boolean) = \l  (r33 I:double)\l  (r35 I:double)\l  (r37 I:double)\l  (r39 I:double)\l  (r41 I:double)\l  (r43 I:double)\l  (r45 I:double)\l  (r47 I:double)\l  (r49 I:org.osmdroid.util.PointL)\l org.osmdroid.util.SegmentIntersection.divisionByZeroSideEffect(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL):boolean type: STATIC \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r17 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: ARITH  (r16 I:double) = (r33 I:double) \- (r37 I:double) \l0x0014: ARITH  (r19 I:double) = (r43 I:double) \- (r47 I:double) \l0x0016: ARITH  (r21 I:double) = (r16 I:double) * (r19 I:double) \l0x0018: ARITH  (r23 I:double) = (r35 I:double) \- (r39 I:double) \l0x001a: ARITH  (r25 I:double) = (r41 I:double) \- (r45 I:double) \l0x001c: ARITH  (r27 I:double) = (r23 I:double) * (r25 I:double) \l0x001e: ARITH  (r21 I:double) = (r21 I:double) \- (r27 I:double) \l0x0020: CONST  (r27 I:?[long, double]) = (0 ?[long, double]) \l0x0022: CMP_L  (r18 I:int) = (r21 I:double), (r27 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: RETURN  (r0 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: ARITH  (r27 I:double) = (r33 I:double) * (r39 I:double) \l0x002a: ARITH  (r29 I:double) = (r35 I:double) * (r37 I:double) \l0x002c: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002e: ARITH  (r27 I:double) = (r27 I:double) \- (r29 I:double) \l0x0030: ARITH  (r25 I:double) = (r25 I:double) * (r27 I:double) \l0x0032: ARITH  (r29 I:double) = (r41 I:double) * (r47 I:double) \l0x0034: ARITH  (r31 I:double) = (r43 I:double) * (r45 I:double) \l0x0036: ARITH  (r29 I:double) = (r29 I:double) \- (r31 I:double) \l0x0038: ARITH  (r16 I:double) = (r16 I:double) * (r29 I:double) \l0x003a: ARITH  (r25 I:double) = (r25 I:double) \- (r16 I:double) \l0x003c: ARITH  (r17 I:double) = (r25 I:double) \/ (r21 I:double) \l0x003e: ARITH  (r19 I:double) = (r19 I:double) * (r27 I:double) \l0x0040: ARITH  (r23 I:double) = (r23 I:double) * (r29 I:double) \l0x0042: ARITH  (r19 I:double) = (r19 I:double) \- (r23 I:double) \l0x0044: ARITH  (r19 I:double) = (r19 I:double) \/ (r21 I:double) \l0x0046: MOVE  (r0 I:?[long, double]) = (r33 I:?[long, double]) \l0x0048: MOVE  (r2 I:?[long, double]) = (r35 I:?[long, double]) \l0x004a: MOVE  (r4 I:?[long, double]) = (r37 I:?[long, double]) \l0x004c: MOVE  (r6 I:?[long, double]) = (r39 I:?[long, double]) \l0x004e: MOVE  (r8 I:?[long, double]) = (r41 I:?[long, double]) \l0x0050: MOVE  (r10 I:?[long, double]) = (r43 I:?[long, double]) \l0x0052: MOVE  (r12 I:?[long, double]) = (r45 I:?[long, double]) \l0x0054: MOVE  (r14 I:?[long, double]) = (r47 I:?[long, double]) \l0x0056: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r49 I:?[OBJECT, ARRAY]) \l0x0058: INVOKE  (r0 I:boolean) = \l  (r0 I:double)\l  (r2 I:double)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:org.osmdroid.util.PointL)\l  (r17 I:double)\l  (r19 I:double)\l org.osmdroid.util.SegmentIntersection.check(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL, double, double):boolean type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x005c|0x005c: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean org.osmdroid.util.SegmentIntersection.intersection((r33 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r39 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r41 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r43 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r45 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r47 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r49 I:org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

