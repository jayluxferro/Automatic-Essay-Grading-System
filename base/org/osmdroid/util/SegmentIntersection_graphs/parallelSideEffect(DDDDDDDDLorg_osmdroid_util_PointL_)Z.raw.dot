digraph "CFG fororg.osmdroid.util.SegmentIntersection.parallelSideEffect(DDDDDDDDLorg\/osmdroid\/util\/PointL;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CMP_L  (r0 I:int) = (r21 I:double), (r25 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = \l  (r21 I:double)\l  (r23 I:double)\l  (r25 I:double)\l  (r27 I:double)\l  (r29 I:double)\l  (r31 I:double)\l  (r33 I:double)\l  (r35 I:double)\l  (r37 I:org.osmdroid.util.PointL)\l org.osmdroid.util.SegmentIntersection.parallelSideEffectSameX(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL):boolean type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CMP_L  (r0 I:int) = (r29 I:double), (r33 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MOVE  (r0 I:?[long, double]) = (r29 I:?[long, double]) \l0x000f: MOVE  (r2 I:?[long, double]) = (r31 I:?[long, double]) \l0x0011: MOVE  (r4 I:?[long, double]) = (r33 I:?[long, double]) \l0x0013: MOVE  (r6 I:?[long, double]) = (r35 I:?[long, double]) \l0x0015: MOVE  (r8 I:?[long, double]) = (r21 I:?[long, double]) \l0x0017: MOVE  (r10 I:?[long, double]) = (r23 I:?[long, double]) \l0x0019: MOVE  (r12 I:?[long, double]) = (r25 I:?[long, double]) \l0x001b: MOVE  (r14 I:?[long, double]) = (r27 I:?[long, double]) \l0x001d: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:boolean) = \l  (r0 I:double)\l  (r2 I:double)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:org.osmdroid.util.PointL)\l org.osmdroid.util.SegmentIntersection.parallelSideEffectSameX(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL):boolean type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: RETURN  (r0 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: ARITH  (r0 I:double) = (r27 I:double) \- (r23 I:double) \l0x0027: ARITH  (r2 I:double) = (r25 I:double) \- (r21 I:double) \l0x0029: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x002a: ARITH  (r2 I:double) = (r35 I:double) \- (r31 I:double) \l0x002c: ARITH  (r4 I:double) = (r33 I:double) \- (r29 I:double) \l0x002e: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x002f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: CMP_L  (r5 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: RETURN  (r4 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: ARITH  (r0 I:double) = (r0 I:double) * (r21 I:double) \l0x0037: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0038: ARITH  (r0 I:double) = (r23 I:double) \- (r0 I:double) \l0x003a: ARITH  (r2 I:double) = (r2 I:double) * (r29 I:double) \l0x003c: ARITH  (r2 I:double) = (r31 I:double) \- (r2 I:double) \l0x003e: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0043 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: RETURN  (r4 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: MOVE  (r0 I:?[long, double]) = (r21 I:?[long, double]) \l0x0045: MOVE  (r2 I:?[long, double]) = (r25 I:?[long, double]) \l0x0047: MOVE  (r4 I:?[long, double]) = (r29 I:?[long, double]) \l0x0049: MOVE  (r6 I:?[long, double]) = (r33 I:?[long, double]) \l0x004b: INVOKE  (r17 I:double) = (r0 I:double), (r2 I:double), (r4 I:double), (r6 I:double) org.osmdroid.util.SegmentIntersection.middle(double, double, double, double):double type: STATIC \l0x004f: MOVE  (r0 I:?[long, double]) = (r23 I:?[long, double]) \l0x0051: MOVE  (r2 I:?[long, double]) = (r27 I:?[long, double]) \l0x0053: MOVE  (r4 I:?[long, double]) = (r31 I:?[long, double]) \l0x0055: MOVE  (r6 I:?[long, double]) = (r35 I:?[long, double]) \l0x0057: INVOKE  (r19 I:double) = (r0 I:double), (r2 I:double), (r4 I:double), (r6 I:double) org.osmdroid.util.SegmentIntersection.middle(double, double, double, double):double type: STATIC \l0x005b: MOVE  (r0 I:?[long, double]) = (r21 I:?[long, double]) \l0x005d: MOVE  (r2 I:?[long, double]) = (r23 I:?[long, double]) \l0x005f: MOVE  (r4 I:?[long, double]) = (r25 I:?[long, double]) \l0x0061: MOVE  (r6 I:?[long, double]) = (r27 I:?[long, double]) \l0x0063: MOVE  (r8 I:?[long, double]) = (r29 I:?[long, double]) \l0x0065: MOVE  (r10 I:?[long, double]) = (r31 I:?[long, double]) \l0x0067: MOVE  (r12 I:?[long, double]) = (r33 I:?[long, double]) \l0x0069: MOVE  (r14 I:?[long, double]) = (r35 I:?[long, double]) \l0x006b: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x006d: INVOKE  (r0 I:boolean) = \l  (r0 I:double)\l  (r2 I:double)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:org.osmdroid.util.PointL)\l  (r17 I:double)\l  (r19 I:double)\l org.osmdroid.util.SegmentIntersection.check(double, double, double, double, double, double, double, double, org.osmdroid.util.PointL, double, double):boolean type: STATIC \l}"];
Node_15 [shape=record,label="{15\:\ 0x0071|0x0071: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean org.osmdroid.util.SegmentIntersection.parallelSideEffect((r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
}

