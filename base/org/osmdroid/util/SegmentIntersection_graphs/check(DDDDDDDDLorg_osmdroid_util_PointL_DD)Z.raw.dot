digraph "CFG fororg.osmdroid.util.SegmentIntersection.check(DDDDDDDDLorg\/osmdroid\/util\/PointL;DD)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[long, double]) = (r19 I:?[long, double]) \l0x0002: MOVE  (r2 I:?[long, double]) = (r21 I:?[long, double]) \l0x0004: MOVE  (r4 I:?[long, double]) = (r23 I:?[long, double]) \l0x0006: MOVE  (r6 I:?[long, double]) = (r25 I:?[long, double]) \l0x0008: MOVE  (r8 I:?[long, double]) = (r27 I:?[long, double]) \l0x000a: MOVE  (r10 I:?[long, double]) = (r29 I:?[long, double]) \l0x000c: MOVE  (r12 I:?[long, double]) = (r31 I:?[long, double]) \l0x000e: MOVE  (r14 I:?[long, double]) = (r33 I:?[long, double]) \l0x0010: INVOKE  (r16 I:double) = (r0 I:double), (r4 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0014: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CMP_G  (r16 I:int) = (r36 I:double), (r16 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r16 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:28:0x006b \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: INVOKE  (r0 I:double) = (r0 I:double), (r4 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x001e: CMP_L  (r0 I:int) = (r36 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r0 I:double) = (r8 I:double), (r12 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0027: CMP_G  (r0 I:int) = (r36 I:double), (r0 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:27:0x006a \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: INVOKE  (r0 I:double) = (r8 I:double), (r12 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x002f: CMP_L  (r0 I:int) = (r36 I:double), (r0 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|0x0034: INVOKE  (r0 I:double) = (r2 I:double), (r6 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0038: CMP_G  (r0 I:int) = (r38 I:double), (r0 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:26:0x0069 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: INVOKE  (r0 I:double) = (r2 I:double), (r6 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x0040: CMP_L  (r0 I:int) = (r38 I:double), (r0 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:15:0x0045 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: INVOKE  (r0 I:double) = (r10 I:double), (r14 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0049: CMP_G  (r0 I:int) = (r38 I:double), (r0 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:25:0x0068 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: INVOKE  (r0 I:double) = (r10 I:double), (r14 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x0051: CMP_L  (r0 I:int) = (r38 I:double), (r0 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|0x0053: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:20:0x0056 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0056|0x0056: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r35 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0066 \l}"];
Node_22 [shape=record,label="{22\:\ 0x005a|0x005a: INVOKE  (r1 I:long) = (r36 I:double) java.lang.Math.round(double):long type: STATIC \l0x005e: IPUT  (r1 I:long), (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0060: INVOKE  (r1 I:long) = (r38 I:double) java.lang.Math.round(double):long type: STATIC \l0x0064: IPUT  (r1 I:long), (r0 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l}"];
Node_23 [shape=record,label="{23\:\ 0x0066|0x0066: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0067|0x0067: RETURN  (r0 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0068|0x0068: RETURN  (r18 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0069|0x0069: RETURN  (r18 I:boolean) \l}"];
Node_27 [shape=record,label="{27\:\ 0x006a|0x006a: RETURN  (r18 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x006b|0x006b: RETURN  (r18 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean org.osmdroid.util.SegmentIntersection.check((r19 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_28;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_28[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_27;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_27[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_26;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_26[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_25[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
}

