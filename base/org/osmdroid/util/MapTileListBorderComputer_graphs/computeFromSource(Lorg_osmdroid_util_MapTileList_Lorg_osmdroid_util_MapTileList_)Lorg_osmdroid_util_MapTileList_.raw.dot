digraph "CFG fororg.osmdroid.util.MapTileListBorderComputer.computeFromSource(Lorg\/osmdroid\/util\/MapTileList;Lorg\/osmdroid\/util\/MapTileList;)Lorg\/osmdroid\/util\/MapTileList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r12 I:org.osmdroid.util.MapTileList) =  org.osmdroid.util.MapTileList \l0x0005: INVOKE  (r12 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r1 I:int) = (r11 I:org.osmdroid.util.MapTileList) org.osmdroid.util.MapTileList.getSize():int type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:33:0x0065 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r1 I:long) = (r11 I:org.osmdroid.util.MapTileList), (r0 I:int) org.osmdroid.util.MapTileList.get(int):long type: VIRTUAL \l0x0013: INVOKE  (r3 I:int) = (r1 I:long) org.osmdroid.util.MapTileIndex.getZoom(long):int type: STATIC \l0x0017: INVOKE  (r4 I:int) = (r1 I:long) org.osmdroid.util.MapTileIndex.getX(long):int type: STATIC \l0x001b: INVOKE  (r1 I:int) = (r1 I:long) org.osmdroid.util.MapTileIndex.getY(long):int type: STATIC \l0x001f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0020: ARITH  (r2 I:int) = (r2 I:int) \<\< (r3 I:int) \l0x0021: IGET  (r5 I:int) = (r10 I:org.osmdroid.util.MapTileListBorderComputer) org.osmdroid.util.MapTileListBorderComputer.mBorder int \l0x0023: NEG  (r5 I:int) = (r5 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IGET  (r6 I:int) = (r10 I:org.osmdroid.util.MapTileListBorderComputer) org.osmdroid.util.MapTileListBorderComputer.mBorder int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r5 I:?[int, byte, short, char]) \> (r6 I:?[int, byte, short, char])  \-\> B:32:0x0062 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: IGET  (r6 I:int) = (r10 I:org.osmdroid.util.MapTileListBorderComputer) org.osmdroid.util.MapTileListBorderComputer.mBorder int \l0x002a: NEG  (r6 I:int) = (r6 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IGET  (r7 I:int) = (r10 I:org.osmdroid.util.MapTileListBorderComputer) org.osmdroid.util.MapTileListBorderComputer.mBorder int \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r6 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:31:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: ARITH  (r7 I:int) = (r4 I:int) + (r5 I:int) \l0x0031: ARITH  (r8 I:int) = (r1 I:int) + (r6 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: ARITH  (r7 I:int) = (r7 I:int) + (r2 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: ARITH  (r8 I:int) = (r8 I:int) + (r2 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: IF  (r7 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|0x003d: ARITH  (r7 I:int) = (r7 I:int) \- (r2 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IF  (r8 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:21:0x0043 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: ARITH  (r8 I:int) = (r8 I:int) \- (r2 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: INVOKE  (r7 I:long) = (r3 I:int), (r7 I:int), (r8 I:int) org.osmdroid.util.MapTileIndex.getTileIndex(int, int, int):long type: STATIC \l0x0047: INVOKE  (r9 I:boolean) = (r12 I:org.osmdroid.util.MapTileList), (r7 I:long) org.osmdroid.util.MapTileList.contains(long):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x004e \l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: INVOKE  (r9 I:boolean) = (r11 I:org.osmdroid.util.MapTileList), (r7 I:long) org.osmdroid.util.MapTileList.contains(long):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|0x0052: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0059 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0054|0x0054: IGET  (r9 I:boolean) = (r10 I:org.osmdroid.util.MapTileListBorderComputer) org.osmdroid.util.MapTileListBorderComputer.mIncludeAll boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|0x0056: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0059 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0059|0x0059: INVOKE  (r12 I:org.osmdroid.util.MapTileList), (r7 I:long) org.osmdroid.util.MapTileList.put(long):void type: VIRTUAL \l}"];
Node_30 [shape=record,label="{30\:\ 0x005c|0x005c: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x005f|0x005f: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0062|0x0062: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0065|0x0065: RETURN  (r12 I:org.osmdroid.util.MapTileList) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.MapTileList org.osmdroid.util.MapTileListBorderComputer.computeFromSource((r10 'this' I:org.osmdroid.util.MapTileListBorderComputer A[IMMUTABLE_TYPE, THIS]), (r11 I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.osmdroid.util.MapTileList A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_33;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_32;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_31;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_13;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_15;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_17;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_19;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_30[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_10;
Node_31 -> Node_7;
Node_32 -> Node_4;
}

