digraph "CFG fororg.osmdroid.util.LocationUtils.getLastKnownLocation(Landroid\/location\/LocationManager;Ljava\/lang\/String;)Landroid\/location\/Location;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:boolean) = \l  (r2 I:android.location.LocationManager)\l  (r3 I:java.lang.String)\l android.location.LocationManager.isProviderEnabled(java.lang.String):boolean type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x000d \}, TRY_ENTER]\l0x0004: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: RETURN  (r0 I:android.location.Location) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: INVOKE  (r2 I:android.location.Location) = \l  (r2 I:android.location.LocationManager)\l  (r3 I:java.lang.String)\l android.location.LocationManager.getLastKnownLocation(java.lang.String):android.location.Location type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: RETURN  (r2 I:android.location.Location) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN  (r0 I:android.location.Location) \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: IllegalArgumentException null\lSplitter:B:1:0x0001\l}"];
MethodNode[shape=record,label="{private static android.location.Location org.osmdroid.util.LocationUtils.getLastKnownLocation((r2 I:android.location.LocationManager A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_8 -> Node_7;
}

