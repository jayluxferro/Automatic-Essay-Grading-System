digraph "CFG fororg.osmdroid.views.MapController.zoomToSpan(DD)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_G  (r2 I:int) = (r8 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0065 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CMP_G  (r0 I:int) = (r10 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r0 I:org.osmdroid.views.MapView) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mMapView org.osmdroid.views.MapView \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.isLayoutOccurred():boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r0 I:org.osmdroid.views.MapController$ReplayController) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mReplayController org.osmdroid.views.MapController$ReplayController \l0x0015: INVOKE  \l  (r0 I:org.osmdroid.views.MapController$ReplayController)\l  (r8 I:double)\l  (r10 I:double)\l org.osmdroid.views.MapController.ReplayController.zoomToSpan(double, double):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IGET  (r0 I:org.osmdroid.views.MapView) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mMapView org.osmdroid.views.MapView \l0x001b: INVOKE  (r0 I:org.osmdroid.views.Projection) = (r0 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x001f: INVOKE  (r0 I:org.osmdroid.util.BoundingBox) = (r0 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getBoundingBox():org.osmdroid.util.BoundingBox type: VIRTUAL \l0x0023: IGET  (r1 I:org.osmdroid.views.MapView) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mMapView org.osmdroid.views.MapView \l0x0025: INVOKE  (r1 I:org.osmdroid.views.Projection) = (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x0029: INVOKE  (r1 I:double) = (r1 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getZoomLevel():double type: VIRTUAL \l0x002d: INVOKE  (r3 I:double) = (r0 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getLatitudeSpan():double type: VIRTUAL \l0x0031: INVOKE  (r5 I:double) = (r0 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getLongitudeSpan():double type: VIRTUAL \l0x0035: ARITH  (r8 I:double) = (r8 I:double) \/ (r3 I:double) \l0x0036: ARITH  (r10 I:double) = (r10 I:double) \/ (r5 I:double) \l0x0037: INVOKE  (r8 I:double) = (r8 I:double), (r10 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x003b: CONST  (r10 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x003d: CMP_L  (r0 I:int) = (r8 I:double), (r10 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|0x003f: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x004e \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: IGET  (r10 I:org.osmdroid.views.MapView) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mMapView org.osmdroid.views.MapView \l0x0043: CAST  (r8 I:float) = (float) (r8 I:double) \l0x0044: INVOKE  (r8 I:int) = (r8 I:float) org.osmdroid.util.MyMath.getNextSquareNumberAbove(float):int type: STATIC \l0x0048: CAST  (r8 I:double) = (double) (r8 I:int) \l0x0049: ARITH  (r1 I:double) = (r1 I:double) \- (r8 I:double) \l0x004a: INVOKE  (r10 I:org.osmdroid.views.MapView), (r1 I:double) org.osmdroid.views.MapView.setZoomLevel(double):double type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|0x004e: CONST  (r3 I:?[long, double]) = \l  (4602678819172646912(0x3fe0000000000000, double:0.5) ?[long, double])\l \l0x0050: CMP_G  (r0 I:int) = (r8 I:double), (r3 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|0x0052: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0064 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0054|0x0054: IGET  (r0 I:org.osmdroid.views.MapView) = (r7 I:org.osmdroid.views.MapController) org.osmdroid.views.MapController.mMapView org.osmdroid.views.MapView \l0x0056: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x0058: CAST  (r8 I:float) = (float) (r8 I:double) \l0x0059: ARITH  (r3 I:float) = (r3 I:float) \/ (r8 I:float) \l0x005a: INVOKE  (r8 I:int) = (r3 I:float) org.osmdroid.util.MyMath.getNextSquareNumberAbove(float):int type: STATIC \l0x005e: CAST  (r8 I:double) = (double) (r8 I:int) \l0x005f: ARITH  (r1 I:double) = (r1 I:double) + (r8 I:double) \l0x0060: ARITH  (r1 I:double) = (r1 I:double) \- (r10 I:double) \l0x0061: INVOKE  (r0 I:org.osmdroid.views.MapView), (r1 I:double) org.osmdroid.views.MapView.setZoomLevel(double):double type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.MapController.zoomToSpan((r7 'this' I:org.osmdroid.views.MapController A[IMMUTABLE_TYPE, THIS]), (r8 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_16[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
}

