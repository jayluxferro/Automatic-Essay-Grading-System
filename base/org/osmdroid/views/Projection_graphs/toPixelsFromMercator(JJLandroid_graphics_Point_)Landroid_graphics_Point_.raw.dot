digraph "CFG fororg.osmdroid.views.Projection.toPixelsFromMercator(JJLandroid\/graphics\/Point;)Landroid\/graphics\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0003 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: NEW_INSTANCE  (r6 I:android.graphics.Point) =  android.graphics.Point \l0x0005: INVOKE  (r6 I:android.graphics.Point) android.graphics.Point.\<init\>():void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  (r2 I:long) = \l  (r1 I:org.osmdroid.views.Projection)\l  (r2 I:long)\l  (r0 I:boolean)\l org.osmdroid.views.Projection.getLongPixelXFromMercator(long, boolean):long type: DIRECT \l0x000d: INVOKE  (r2 I:int) = (r2 I:long) org.osmdroid.util.TileSystem.truncateToInt(long):int type: STATIC \l0x0011: IPUT  (r2 I:int), (r6 I:android.graphics.Point) android.graphics.Point.x int \l0x0013: INVOKE  (r2 I:long) = \l  (r1 I:org.osmdroid.views.Projection)\l  (r4 I:long)\l  (r0 I:boolean)\l org.osmdroid.views.Projection.getLongPixelYFromMercator(long, boolean):long type: DIRECT \l0x0017: INVOKE  (r2 I:int) = (r2 I:long) org.osmdroid.util.TileSystem.truncateToInt(long):int type: STATIC \l0x001b: IPUT  (r2 I:int), (r6 I:android.graphics.Point) android.graphics.Point.y int \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: RETURN  (r6 I:android.graphics.Point) \l}"];
MethodNode[shape=record,label="{public android.graphics.Point org.osmdroid.views.Projection.toPixelsFromMercator((r1 'this' I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, THIS]), (r2 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.graphics.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[RUNTIME, java.lang.Deprecated, \{\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_2;
Node_0 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
}

