digraph "CFG fororg.osmdroid.views.Projection.metersToEquatorPixels(F)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r4 I:double) = (r6 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.mZoomLevelProjection double \l0x0002: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0005: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  (r7 I:float) = \l  (r0 I:org.osmdroid.views.Projection)\l  (r1 I:float)\l  (r2 I:double)\l  (r4 I:double)\l org.osmdroid.views.Projection.metersToPixels(float, double, double):float type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: RETURN  (r7 I:float) \l}"];
MethodNode[shape=record,label="{public float org.osmdroid.views.Projection.metersToEquatorPixels((r6 'this' I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, THIS]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

