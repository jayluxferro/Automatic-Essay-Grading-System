digraph "CFG fororg.osmdroid.views.Projection.getCloserPixel(JIID)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r0 I:int) = (r11 I:int) + (r12 I:int) \l0x0002: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x0004: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0005: CAST  (r2 I:long) = (long) (r11 I:int) \l0x0006: CONST  (r4 I:?[long, double]) = (0 ?[long, double]) \l0x0008: CMP_L  (r11 I:int) = (r9 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|0x000c: MOVE  (r6 I:?[long, double]) = (r9 I:?[long, double]) \l0x000d: MOVE  (r9 I:?[long, double]) = (r4 I:?[long, double]) \l0x000e: MOVE  (r4 I:?[long, double]) = (r6 I:?[long, double]) \l0x000f: CMP_L  (r11 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CAST  (r9 I:double) = (double) (r4 I:long) \l0x0014: ARITH  (r9 I:double) = (r9 I:double) + (r13 I:double) \l0x0015: CAST  (r9 I:long) = (long) (r9 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CAST  (r11 I:long) = (long) (r12 I:int) \l0x0018: CMP_L  (r11 I:int) = (r4 I:long), (r11 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: RETURN  (r4 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: ARITH  (r11 I:long) = (r0 I:long) \- (r4 I:long) \l0x0020: INVOKE  (r11 I:long) = (r11 I:long) java.lang.Math.abs(long):long type: STATIC \l0x0024: ARITH  (r0 I:long) = (r0 I:long) \- (r9 I:long) \l0x0025: INVOKE  (r13 I:long) = (r0 I:long) java.lang.Math.abs(long):long type: STATIC \l0x0029: CMP_L  (r11 I:int) = (r11 I:long), (r13 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x002e \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  (r4 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: RETURN  (r9 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: MOVE  (r6 I:?[long, double]) = (r9 I:?[long, double]) \l0x0030: MOVE  (r9 I:?[long, double]) = (r4 I:?[long, double]) \l0x0031: MOVE  (r4 I:?[long, double]) = (r6 I:?[long, double]) \l0x0032: CMP_L  (r11 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r11 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CAST  (r9 I:double) = (double) (r4 I:long) \l0x0037: ARITH  (r9 I:double) = (r9 I:double) \- (r13 I:double) \l0x0038: CAST  (r9 I:long) = (long) (r9 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003a|0x003a: CAST  (r11 I:long) = (long) (r12 I:int) \l0x003b: CMP_L  (r11 I:int) = (r9 I:long), (r11 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|0x003d: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:18:0x0040 \l}"];
Node_17 [shape=record,label="{17\:\ 0x003f|0x003f: RETURN  (r9 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0041: ARITH  (r11 I:long) = (r0 I:long) \- (r4 I:long) \l0x0043: INVOKE  (r11 I:long) = (r11 I:long) java.lang.Math.abs(long):long type: STATIC \l0x0047: ARITH  (r0 I:long) = (r0 I:long) \- (r9 I:long) \l0x0048: INVOKE  (r13 I:long) = (r0 I:long) java.lang.Math.abs(long):long type: STATIC \l0x004c: CMP_L  (r11 I:int) = (r11 I:long), (r13 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004e|0x004e: IF  (r11 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x0051 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: RETURN  (r4 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: RETURN  (r9 I:long) \l}"];
MethodNode[shape=record,label="{private long org.osmdroid.views.Projection.getCloserPixel((r8 'this' I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, THIS]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
}

