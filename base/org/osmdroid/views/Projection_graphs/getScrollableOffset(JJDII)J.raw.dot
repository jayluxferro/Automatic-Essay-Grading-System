digraph "CFG fororg.osmdroid.views.Projection.getScrollableOffset(JJDII)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: ARITH  (r0 I:long) = (r7 I:long) \- (r5 I:long) \l0x0003: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: CAST  (r7 I:double) = (double) (r7 I:long) \l0x000a: ARITH  (r7 I:double) = (r7 I:double) + (r9 I:double) \l0x000b: CAST  (r7 I:long) = (long) (r7 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: ARITH  (r9 I:int) = (r12 I:int) * (2 int) \l0x000f: ARITH  (r9 I:int) = (r11 I:int) \- (r9 I:int) \l0x0011: CAST  (r9 I:long) = (long) (r9 I:int) \l0x0012: CMP_L  (r9 I:int) = (r0 I:long), (r9 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: CONST  (r9 I:?[long, double]) = (2 ?[long, double]) \l0x0018: ARITH  (r0 I:long) = (r0 I:long) \/ (r9 I:long) \l0x0019: ARITH  (r11 I:int) = (r11 I:int) \/ (2 int) \l0x001b: CAST  (r9 I:long) = (long) (r11 I:int) \l0x001c: ARITH  (r11 I:long) = (r9 I:long) \- (r0 I:long) \l0x001e: ARITH  (r11 I:long) = (r11 I:long) \- (r5 I:long) \l0x001f: CMP_L  (r5 I:int) = (r11 I:long), (r2 I:long) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: RETURN  (r11 I:long) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0025: ARITH  (r9 I:long) = (r9 I:long) + (r0 I:long) \l0x0026: ARITH  (r9 I:long) = (r9 I:long) \- (r7 I:long) \l0x0027: CMP_L  (r5 I:int) = (r9 I:long), (r2 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:11:0x002c \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: RETURN  (r9 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: RETURN  (r2 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: CAST  (r9 I:long) = (long) (r12 I:int) \l0x002e: ARITH  (r9 I:long) = (r9 I:long) \- (r5 I:long) \l0x002f: CMP_L  (r5 I:int) = (r9 I:long), (r2 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0034 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: RETURN  (r9 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: ARITH  (r11 I:int) = (r11 I:int) \- (r12 I:int) \l0x0035: CAST  (r5 I:long) = (long) (r11 I:int) \l0x0036: ARITH  (r5 I:long) = (r5 I:long) \- (r7 I:long) \l0x0037: CMP_L  (r7 I:int) = (r5 I:long), (r2 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x003c \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: RETURN  (r5 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003c|0x003c: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public static long org.osmdroid.views.Projection.getScrollableOffset((r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_0;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
}

