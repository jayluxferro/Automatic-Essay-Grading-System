digraph "CFG fororg.osmdroid.views.Projection.fromPixels(IILorg\/osmdroid\/util\/GeoPoint;Z)Lorg\/osmdroid\/api\/IGeoPoint;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.osmdroid.util.TileSystem r0 = r10.mTileSystem\llong r1 = getCleanMercator(getMercatorXFromPixel(r11), r10.horizontalWrapEnabled)\llong r3 = getCleanMercator(getMercatorYFromPixel(r12), r10.verticalWrapEnabled)\ldouble r5 = r10.mMercatorMapSize\l}"];
Node_1 [shape=record,label="{1\:\ 0x001c|if (r10.horizontalWrapEnabled != false) goto L_0x0023\l}"];
Node_2 [shape=record,label="{2\:\ 0x001e|if (r14 == false) goto L_0x0021\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|r8 = false\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|r8 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|PHI: r8 \l  PHI: (r8v0 boolean) = (r8v1 boolean), (r8v2 boolean) binds: [B:4:0x0023, B:3:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|if (r10.verticalWrapEnabled != false) goto L_0x002d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|if (r14 == false) goto L_0x002b\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|r9 = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|r9 = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|PHI: r9 \l  PHI: (r9v0 boolean) = (r9v1 boolean), (r9v2 boolean) binds: [B:9:0x002d, B:8:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|RETURN\l|return r0.getGeoFromMercator(r1, r3, r5, r13, r8, r9)\l}"];
MethodNode[shape=record,label="{public org.osmdroid.api.IGeoPoint org.osmdroid.views.Projection.fromPixels((r10v0 'this' org.osmdroid.views.Projection A[IMMUTABLE_TYPE, THIS]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

