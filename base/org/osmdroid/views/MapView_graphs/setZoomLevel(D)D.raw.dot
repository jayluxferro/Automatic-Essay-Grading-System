digraph "CFG fororg.osmdroid.views.MapView.setZoomLevel(D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:double) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getMinZoomLevel():double type: VIRTUAL \l0x0004: INVOKE  (r2 I:double) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getMaxZoomLevel():double type: VIRTUAL \l0x0008: INVOKE  (r12 I:double) = (r2 I:double), (r12 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x000c: INVOKE  (r12 I:double) = (r0 I:double), (r12 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x0010: IGET  (r6 I:double) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mZoomLevel double \l0x0012: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0014: CMP_L  (r9 I:int) = (r12 I:double), (r6 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|0x0016: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0018|0x0018: IGET  (r2 I:android.widget.Scroller) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mScroller android.widget.Scroller \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r2 I:android.widget.Scroller) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mScroller android.widget.Scroller \l0x001e: INVOKE  (r2 I:android.widget.Scroller), (r1 I:boolean) android.widget.Scroller.forceFinished(boolean):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IPUT  (r0 I:boolean), (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mIsFlinging boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  (r2 I:org.osmdroid.views.Projection) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x0027: INVOKE  (r2 I:org.osmdroid.util.GeoPoint) = (r2 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getCurrentCenter():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x002b: IPUT  (r12 I:double), (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mZoomLevel double \l0x002d: INVOKE  \l  (r11 I:org.osmdroid.views.MapView)\l  (r2 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.views.MapView.setExpectedCenter(org.osmdroid.api.IGeoPoint):void type: VIRTUAL \l0x0030: INVOKE  (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.checkZoomButtons():void type: DIRECT \l0x0033: INVOKE  (r3 I:boolean) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.isLayoutOccurred():boolean type: VIRTUAL \l0x0037: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x007b \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: INVOKE  (r3 I:org.osmdroid.api.IMapController) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getController():org.osmdroid.api.IMapController type: VIRTUAL \l0x003e: INVOKE  \l  (r3 I:org.osmdroid.api.IMapController)\l  (r2 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.api.IMapController.setCenter(org.osmdroid.api.IGeoPoint):void type: INTERFACE \l0x0041: NEW_INSTANCE  (r2 I:android.graphics.Point) =  android.graphics.Point \l0x0043: INVOKE  (r2 I:android.graphics.Point) android.graphics.Point.\<init\>():void type: DIRECT \l0x0046: INVOKE  (r3 I:org.osmdroid.views.Projection) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x004a: INVOKE  (r4 I:org.osmdroid.views.overlay.OverlayManager) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getOverlayManager():org.osmdroid.views.overlay.OverlayManager type: VIRTUAL \l0x004e: IGET  (r5 I:android.graphics.PointF) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mMultiTouchScaleInitPoint android.graphics.PointF \l0x0050: IGET  (r5 I:float) = (r5 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0052: CAST  (r5 I:int) = (int) (r5 I:float) \l0x0053: IGET  (r8 I:android.graphics.PointF) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mMultiTouchScaleInitPoint android.graphics.PointF \l0x0055: IGET  (r8 I:float) = (r8 I:android.graphics.PointF) android.graphics.PointF.y float \l0x0057: CAST  (r8 I:int) = (int) (r8 I:float) \l0x0058: INVOKE  (r4 I:boolean) = \l  (r4 I:org.osmdroid.views.overlay.OverlayManager)\l  (r5 I:int)\l  (r8 I:int)\l  (r2 I:android.graphics.Point)\l  (r11 I:org.osmdroid.api.IMapView)\l org.osmdroid.views.overlay.OverlayManager.onSnapToItem(int, int, android.graphics.Point, org.osmdroid.api.IMapView):boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x005c|0x005c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x006d \l}"];
Node_10 [shape=record,label="{10\:\ 0x005e|0x005e: IGET  (r4 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.x int \l0x0060: IGET  (r2 I:int) = (r2 I:android.graphics.Point) android.graphics.Point.y int \l0x0062: INVOKE  (r0 I:org.osmdroid.api.IGeoPoint) = \l  (r3 I:org.osmdroid.views.Projection)\l  (r4 I:int)\l  (r2 I:int)\l  (r10 I:org.osmdroid.util.GeoPoint)\l  (r0 I:boolean)\l org.osmdroid.views.Projection.fromPixels(int, int, org.osmdroid.util.GeoPoint, boolean):org.osmdroid.api.IGeoPoint type: VIRTUAL \l0x0066: INVOKE  (r2 I:org.osmdroid.api.IMapController) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getController():org.osmdroid.api.IMapController type: VIRTUAL \l0x006a: INVOKE  \l  (r2 I:org.osmdroid.api.IMapController)\l  (r0 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.api.IMapController.animateTo(org.osmdroid.api.IGeoPoint):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x006d|0x006d: IGET  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mTileProvider org.osmdroid.tileprovider.MapTileProviderBase \l0x006f: IGET  (r0 I:android.graphics.Rect) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mRescaleScreenRect android.graphics.Rect \l0x0071: INVOKE  (r8 I:android.graphics.Rect) = \l  (r11 I:org.osmdroid.views.MapView)\l  (r0 I:android.graphics.Rect)\l org.osmdroid.views.MapView.getScreenRect(android.graphics.Rect):android.graphics.Rect type: VIRTUAL \l0x0075: MOVE  (r4 I:?[long, double]) = (r12 I:?[long, double]) \l0x0076: INVOKE  \l  (r2 I:org.osmdroid.tileprovider.MapTileProviderBase)\l  (r3 I:org.osmdroid.views.Projection)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:android.graphics.Rect)\l org.osmdroid.tileprovider.MapTileProviderBase.rescaleCache(org.osmdroid.views.Projection, double, double, android.graphics.Rect):void type: VIRTUAL \l0x0079: IPUT  (r1 I:boolean), (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.pauseFling boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x007b|0x007b: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x009c \l}"];
Node_13 [shape=record,label="{13\:\ 0x007d|0x007d: IGET  (r0 I:java.util.List\<org.osmdroid.events.MapListener\>) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mListners java.util.List \l0x007f: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0083|0x0083: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x0087|0x0087: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x009c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0089|0x0089: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x008d: CHECK_CAST  (r1 I:org.osmdroid.events.MapListener) = (org.osmdroid.events.MapListener) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|0x008f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0092 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0092|0x0092: NEW_INSTANCE  (r2 I:org.osmdroid.events.ZoomEvent) =  org.osmdroid.events.ZoomEvent \l0x0094: INVOKE  \l  (r2 I:org.osmdroid.events.ZoomEvent)\l  (r11 I:org.osmdroid.views.MapView)\l  (r12 I:double)\l org.osmdroid.events.ZoomEvent.\<init\>(org.osmdroid.views.MapView, double):void type: DIRECT \l0x0097: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0098|0x0098: INVOKE  \l  (r1 I:org.osmdroid.events.MapListener)\l  (r10 I:org.osmdroid.events.ZoomEvent)\l org.osmdroid.events.MapListener.onZoom(org.osmdroid.events.ZoomEvent):boolean type: INTERFACE \l}"];
Node_21 [shape=record,label="{21\:\ 0x009c|0x009c: INVOKE  (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.requestLayout():void type: VIRTUAL \l0x009f: INVOKE  (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.invalidate():void type: VIRTUAL \l0x00a2: IGET  (r12 I:double) = (r11 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mZoomLevel double \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a4|0x00a4: RETURN  (r12 I:double) \l}"];
MethodNode[shape=record,label="{double org.osmdroid.views.MapView.setZoomLevel((r11 'this' I:org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r12 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_22;
}

