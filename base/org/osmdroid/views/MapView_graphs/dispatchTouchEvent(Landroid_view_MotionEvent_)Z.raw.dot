digraph "CFG fororg.osmdroid.views.MapView.dispatchTouchEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMapView():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x000c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"dispatchTouchEvent(\" \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x0019: CONST_STR  (r2 I:java.lang.String) =  \")\" \l0x001b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0022: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: INVOKE  (r0 I:android.view.MotionEvent) = \l  (r5 I:org.osmdroid.views.MapView)\l  (r6 I:android.view.MotionEvent)\l org.osmdroid.views.MapView.rotateTouchEvent(android.view.MotionEvent):android.view.MotionEvent type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|SYNTHETIC\lSplitter:B:4:0x0029\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0029\l|0x0029: INVOKE  (r1 I:boolean) = \l  (r5 I:android.view.ViewGroup)\l  (r6 I:android.view.MotionEvent)\l android.view.ViewGroup.dispatchTouchEvent(android.view.MotionEvent):boolean type: SUPER A[Catch:\{ all \-\> 0x00b1 \}, TRY_ENTER]\l0x002d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0047 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x00b1 \}]\l0x0034: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMapView():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0041 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x003c: CONST_STR  (r3 I:java.lang.String) =  \"super handled onTouchEvent\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x003e: INVOKE  (r1 I:java.lang.String), (r3 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x00b1 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0046 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: RETURN  (r2 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|SYNTHETIC\lSplitter:B:13:0x0047\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0047\l|0x0047: INVOKE  (r1 I:org.osmdroid.views.overlay.OverlayManager) = (r5 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getOverlayManager():org.osmdroid.views.overlay.OverlayManager type: VIRTUAL A[Catch:\{ all \-\> 0x00b1 \}, TRY_ENTER]\l0x004b: INVOKE  (r1 I:boolean) = \l  (r1 I:org.osmdroid.views.overlay.OverlayManager)\l  (r0 I:android.view.MotionEvent)\l  (r5 I:org.osmdroid.views.MapView)\l org.osmdroid.views.overlay.OverlayManager.onTouchEvent(android.view.MotionEvent, org.osmdroid.views.MapView):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00b1 \}]\l0x004e: NOP   A[TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0057 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0056 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0053|0x0053: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: RETURN  (r2 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0057|SYNTHETIC\lSplitter:B:19:0x0057\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0057\l|0x0057: IGET  (r1 I:org.metalev.multitouch.controller.MultiTouchController\<java.lang.Object\>) = (r5 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mMultiTouchController org.metalev.multitouch.controller.MultiTouchController A[Catch:\{ all \-\> 0x00b1 \}, TRY_ENTER]\l0x0059: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|0x005a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0077 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|0x005c: IGET  (r1 I:org.metalev.multitouch.controller.MultiTouchController\<java.lang.Object\>) = (r5 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mMultiTouchController org.metalev.multitouch.controller.MultiTouchController A[Catch:\{ all \-\> 0x00b1 \}]\l0x005e: INVOKE  (r1 I:boolean) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController)\l  (r6 I:android.view.MotionEvent)\l org.metalev.multitouch.controller.MultiTouchController.onTouchEvent(android.view.MotionEvent):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|0x0062: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0077 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0064|0x0064: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x00b1 \}]\l0x0068: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMapView():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x006c|0x006c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0075 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x006e|0x006e: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x0070: CONST_STR  (r4 I:java.lang.String) =  \"mMultiTouchController handled onTouchEvent\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x0072: INVOKE  (r1 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0075|0x0075: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x00b1 \}]\l0x0076: GOTO  \-\> 0x0078 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0077|0x0077: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0078|0x0078: IGET  (r4 I:android.view.GestureDetector) = (r5 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mGestureDetector android.view.GestureDetector A[Catch:\{ all \-\> 0x00b1 \}]\l0x007a: INVOKE  (r4 I:boolean) = \l  (r4 I:android.view.GestureDetector)\l  (r0 I:android.view.MotionEvent)\l android.view.GestureDetector.onTouchEvent(android.view.MotionEvent):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x007e|0x007e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0092 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0080|0x0080: INVOKE  (r1 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC A[Catch:\{ all \-\> 0x00b1 \}]\l0x0084: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMapView():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0088|0x0088: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0091 A[Catch:\{ all \-\> 0x00b1 \}]\l}"];
Node_33 [shape=record,label="{33\:\ 0x008a|0x008a: CONST_STR  (r1 I:java.lang.String) =  \"OsmDroid\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x008c: CONST_STR  (r4 I:java.lang.String) =  \"mGestureDetector handled onTouchEvent\" A[Catch:\{ all \-\> 0x00b1 \}]\l0x008e: INVOKE  (r1 I:java.lang.String), (r4 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC A[Catch:\{ all \-\> 0x00b1 \}, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0091|0x0091: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0092|0x0092: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x009a \l}"];
Node_36 [shape=record,label="{36\:\ 0x0094|0x0094: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0099 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0096|0x0096: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x0099|0x0099: RETURN  (r2 I:boolean) \l}"];
Node_39 [shape=record,label="{39\:\ 0x009a|0x009a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x009f \l}"];
Node_40 [shape=record,label="{40\:\ 0x009c|0x009c: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x009f|0x009f: INVOKE  (r6 I:org.osmdroid.config.IConfigurationProvider) =  org.osmdroid.config.Configuration.getInstance():org.osmdroid.config.IConfigurationProvider type: STATIC \l0x00a3: INVOKE  (r6 I:boolean) = (r6 I:org.osmdroid.config.IConfigurationProvider) org.osmdroid.config.IConfigurationProvider.isDebugMapView():boolean type: INTERFACE \l}"];
Node_42 [shape=record,label="{42\:\ 0x00a7|0x00a7: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x00b0 \l}"];
Node_43 [shape=record,label="{43\:\ 0x00a9|0x00a9: CONST_STR  (r6 I:java.lang.String) =  \"OsmDroid\" \l0x00ab: CONST_STR  (r0 I:java.lang.String) =  \"no\-one handled onTouchEvent\" \l0x00ad: INVOKE  (r6 I:java.lang.String), (r0 I:java.lang.String) android.util.Log.d(java.lang.String, java.lang.String):int type: STATIC \l}"];
Node_44 [shape=record,label="{44\:\ 0x00b0|0x00b0: RETURN  (r3 I:boolean) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00b1|ExcHandler: all null\lSplitter:B:4:0x0029\l|0x00b1: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_46 [shape=record,label="{46\:\ 0x00b2|0x00b2: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00b7 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00b4|0x00b4: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b7|0x00b7: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.views.MapView.dispatchTouchEvent((r5 'this' I:org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r6 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_45;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_45;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_45;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
}

