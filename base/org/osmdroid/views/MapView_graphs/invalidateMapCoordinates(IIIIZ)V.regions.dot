digraph "CFG fororg.osmdroid.views.MapView.invalidateMapCoordinates(IIIIZ)V" {
subgraph cluster_Region_1724562556 {
label = "R(3:0|(1:2)|(1:4)(1:5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.mInvalidateRect.set(r2, r3, r4, r5)\lint int r2 = getWidth() \/ 2\lint int r3 = getHeight() \/ 2\l}"];
subgraph cluster_IfRegion_2001095072 {
label = "IF [B:1:0x0018] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0018|if (getMapOrientation() != 0.0f) goto L_0x001a\l}"];
subgraph cluster_Region_1132841158 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001a|org.osmdroid.util.GeometryMath.getBoundingBoxForRotatatedRectangle(r1.mInvalidateRect, r2, r3, getMapOrientation() + 180.0f, r1.mInvalidateRect)\l}"];
}
}
subgraph cluster_IfRegion_1454753047 {
label = "IF [B:3:0x0028] THEN: R(1:4) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0028|if (r6 == true) goto L_0x002a\l}"];
subgraph cluster_Region_856059345 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x002a|super.postInvalidate(r1.mInvalidateRect.left, r1.mInvalidateRect.top, r1.mInvalidateRect.right, r1.mInvalidateRect.bottom)\l}"];
}
subgraph cluster_Region_2084738702 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x003e|super.invalidate(r1.mInvalidateRect)\l}"];
}
}
}
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void org.osmdroid.views.MapView.invalidateMapCoordinates((r1v0 'this' org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
}

