digraph "CFG fororg.osmdroid.views.MapView.zoomToBoundingBox(Lorg\/osmdroid\/util\/BoundingBox;ZIDLjava\/lang\/Long;)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.mTileSystem org.osmdroid.util.TileSystem \l0x0002: INVOKE  (r1 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getWidth():int type: VIRTUAL \l0x0006: ARITH  (r2 I:int) = (r17 I:int) * (2 int) \l0x0008: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0009: INVOKE  (r3 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getHeight():int type: VIRTUAL \l0x000d: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int) \l0x000e: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x000f: INVOKE  (r0 I:double) = \l  (r0 I:org.osmdroid.util.TileSystem)\l  (r15 I:org.osmdroid.util.BoundingBox)\l  (r1 I:int)\l  (r3 I:int)\l org.osmdroid.util.TileSystem.getBoundingBoxZoom(org.osmdroid.util.BoundingBox, int, int):double type: VIRTUAL \l0x0013: CONST  (r3 I:?[long, double]) = (1 ?[long, double]) \l0x0015: CMP_L  (r3 I:int) = (r0 I:double), (r3 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: CMP_L  (r5 I:int) = (r0 I:double), (r18 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: MOVE  (r0 I:?[long, double]) = (r18 I:?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: INVOKE  (r3 I:double) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getMaxZoomLevel():double type: VIRTUAL \l0x0023: INVOKE  (r5 I:double) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getMinZoomLevel():double type: VIRTUAL \l0x0027: INVOKE  (r0 I:double) = (r0 I:double), (r5 I:double) java.lang.Math.max(double, double):double type: STATIC \l0x002b: INVOKE  (r0 I:double) = (r3 I:double), (r0 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x002f: INVOKE  (r3 I:org.osmdroid.util.GeoPoint) = (r15 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getCenterWithDateLine():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0033: NEW_INSTANCE  (r4 I:org.osmdroid.views.Projection) =  org.osmdroid.views.Projection \l0x0035: INVOKE  (r8 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getWidth():int type: VIRTUAL \l0x0039: INVOKE  (r9 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getHeight():int type: VIRTUAL \l0x003d: INVOKE  (r11 I:float) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getMapOrientation():float type: VIRTUAL \l0x0041: INVOKE  (r12 I:boolean) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.isHorizontalMapRepetitionEnabled():boolean type: VIRTUAL \l0x0045: INVOKE  (r13 I:boolean) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.isVerticalMapRepetitionEnabled():boolean type: VIRTUAL \l0x0049: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x004a: MOVE  (r6 I:?[long, double]) = (r0 I:?[long, double]) \l0x004b: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x004c: INVOKE  \l  (r5 I:org.osmdroid.views.Projection)\l  (r6 I:double)\l  (r8 I:int)\l  (r9 I:int)\l  (r10 I:org.osmdroid.util.GeoPoint)\l  (r11 I:float)\l  (r12 I:boolean)\l  (r13 I:boolean)\l org.osmdroid.views.Projection.\<init\>(double, int, int, org.osmdroid.util.GeoPoint, float, boolean, boolean):void type: DIRECT \l0x004f: NEW_INSTANCE  (r5 I:android.graphics.Point) =  android.graphics.Point \l0x0051: INVOKE  (r5 I:android.graphics.Point) android.graphics.Point.\<init\>():void type: DIRECT \l0x0054: INVOKE  (r6 I:double) = (r15 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getCenterLongitude():double type: VIRTUAL \l0x0058: NEW_INSTANCE  (r8 I:org.osmdroid.util.GeoPoint) =  org.osmdroid.util.GeoPoint \l0x005a: INVOKE  (r9 I:double) = (r15 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getActualNorth():double type: VIRTUAL \l0x005e: INVOKE  \l  (r8 I:org.osmdroid.util.GeoPoint)\l  (r9 I:double)\l  (r6 I:double)\l org.osmdroid.util.GeoPoint.\<init\>(double, double):void type: DIRECT \l0x0061: INVOKE  \l  (r4 I:org.osmdroid.views.Projection)\l  (r8 I:org.osmdroid.api.IGeoPoint)\l  (r5 I:android.graphics.Point)\l org.osmdroid.views.Projection.toPixels(org.osmdroid.api.IGeoPoint, android.graphics.Point):android.graphics.Point type: VIRTUAL \l0x0064: IGET  (r8 I:int) = (r5 I:android.graphics.Point) android.graphics.Point.y int \l0x0066: NEW_INSTANCE  (r9 I:org.osmdroid.util.GeoPoint) =  org.osmdroid.util.GeoPoint \l0x0068: INVOKE  (r10 I:double) = (r15 I:org.osmdroid.util.BoundingBox) org.osmdroid.util.BoundingBox.getActualSouth():double type: VIRTUAL \l0x006c: INVOKE  \l  (r9 I:org.osmdroid.util.GeoPoint)\l  (r10 I:double)\l  (r6 I:double)\l org.osmdroid.util.GeoPoint.\<init\>(double, double):void type: DIRECT \l0x006f: INVOKE  \l  (r4 I:org.osmdroid.views.Projection)\l  (r9 I:org.osmdroid.api.IGeoPoint)\l  (r5 I:android.graphics.Point)\l org.osmdroid.views.Projection.toPixels(org.osmdroid.api.IGeoPoint, android.graphics.Point):android.graphics.Point type: VIRTUAL \l0x0072: IGET  (r2 I:int) = (r5 I:android.graphics.Point) android.graphics.Point.y int \l0x0074: INVOKE  (r5 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getHeight():int type: VIRTUAL \l0x0078: ARITH  (r5 I:int) = (r5 I:int) \- (r2 I:int) \l0x0079: ARITH  (r5 I:int) = (r5 I:int) \- (r8 I:int) \l0x007a: ARITH  (r5 I:int) = (r5 I:int) \/ (2 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x007c|0x007c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0093 \l}"];
Node_7 [shape=record,label="{7\:\ 0x007e|0x007e: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0080: CAST  (r8 I:long) = (long) (r5 I:int) \l0x0081: INVOKE  \l  (r4 I:org.osmdroid.views.Projection)\l  (r6 I:long)\l  (r8 I:long)\l org.osmdroid.views.Projection.adjustOffsets(long, long):void type: VIRTUAL \l0x0084: INVOKE  (r2 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getWidth():int type: VIRTUAL \l0x0088: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x008a: INVOKE  (r5 I:int) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getHeight():int type: VIRTUAL \l0x008e: ARITH  (r5 I:int) = (r5 I:int) \/ (2 int) \l0x0090: INVOKE  \l  (r4 I:org.osmdroid.views.Projection)\l  (r2 I:int)\l  (r5 I:int)\l  (r3 I:org.osmdroid.util.GeoPoint)\l org.osmdroid.views.Projection.fromPixels(int, int, org.osmdroid.util.GeoPoint):org.osmdroid.api.IGeoPoint type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0093|0x0093: IF  (r16 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x00a3 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0095|0x0095: INVOKE  (r2 I:org.osmdroid.api.IMapController) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getController():org.osmdroid.api.IMapController type: VIRTUAL \l0x0099: INVOKE  (r4 I:java.lang.Double) = (r0 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l0x009d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x009f: INVOKE  \l  (r2 I:org.osmdroid.api.IMapController)\l  (r3 I:org.osmdroid.api.IGeoPoint)\l  (r4 I:java.lang.Double)\l  (r5 I:java.lang.Long)\l org.osmdroid.api.IMapController.animateTo(org.osmdroid.api.IGeoPoint, java.lang.Double, java.lang.Long):void type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x00a3|0x00a3: INVOKE  (r2 I:org.osmdroid.api.IMapController) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getController():org.osmdroid.api.IMapController type: VIRTUAL \l0x00a7: INVOKE  (r2 I:org.osmdroid.api.IMapController), (r0 I:double) org.osmdroid.api.IMapController.setZoom(double):double type: INTERFACE \l0x00aa: INVOKE  (r2 I:org.osmdroid.api.IMapController) = (r14 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getController():org.osmdroid.api.IMapController type: VIRTUAL \l0x00ae: INVOKE  \l  (r2 I:org.osmdroid.api.IMapController)\l  (r3 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.api.IMapController.setCenter(org.osmdroid.api.IGeoPoint):void type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x00b1|0x00b1: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public double org.osmdroid.views.MapView.zoomToBoundingBox((r14 'this' I:org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r15 I:org.osmdroid.util.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.lang.Long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
}

