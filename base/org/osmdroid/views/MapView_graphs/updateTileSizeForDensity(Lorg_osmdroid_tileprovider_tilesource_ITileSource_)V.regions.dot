digraph "CFG fororg.osmdroid.views.MapView.updateTileSizeForDensity(Lorg\/osmdroid\/tileprovider\/tilesource\/ITileSource;)V" {
subgraph cluster_Region_1022366559 {
label = "R(4:0|4|(1:6)|7)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|float float r4 = (float) r4.getTileSizePixels()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|PHI: r0 \l  PHI: (r0v5 float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r4 = (int) (r4 * (isTilesScaledToDpi() ? ((getResources().getDisplayMetrics().density * 256.0f) \/ r4) * r3.mTilesScaleFactor : r3.mTilesScaleFactor))\l}"];
subgraph cluster_IfRegion_1725126624 {
label = "IF [B:5:0x002c] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x002c|if (org.osmdroid.config.Configuration.getInstance().isDebugMapView() == true) goto L_0x002e\l}"];
subgraph cluster_Region_1687173024 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002e|android.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, \"Scaling tiles to \" + r4)\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0044|org.osmdroid.util.TileSystem.setTileSize(r4)\l}"];
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0018}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x001a}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0047}"];
MethodNode[shape=record,label="{private void org.osmdroid.views.MapView.updateTileSizeForDensity((r3v0 'this' org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r4v0 org.osmdroid.tileprovider.tilesource.ITileSource A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_1 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
}

