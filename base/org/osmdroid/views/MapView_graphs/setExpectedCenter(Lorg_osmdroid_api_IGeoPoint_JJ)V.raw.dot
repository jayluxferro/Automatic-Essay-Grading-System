digraph "CFG fororg.osmdroid.views.MapView.setExpectedCenter(Lorg\/osmdroid\/api\/IGeoPoint;JJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.views.Projection) = (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x0004: INVOKE  (r0 I:org.osmdroid.util.GeoPoint) = (r0 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getCurrentCenter():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0008: CHECK_CAST  (r2 I:org.osmdroid.util.GeoPoint) = (org.osmdroid.util.GeoPoint) (r2 I:?[OBJECT, ARRAY]) \l0x000a: IPUT  \l  (r2 I:org.osmdroid.util.GeoPoint)\l  (r1 I:org.osmdroid.views.MapView)\l org.osmdroid.views.MapView.mCenter org.osmdroid.util.GeoPoint \l0x000c: NEG  (r2 I:long) = (r3 I:long) \l0x000d: NEG  (r4 I:long) = (r5 I:long) \l0x000e: INVOKE  (r1 I:org.osmdroid.views.MapView), (r2 I:long), (r4 I:long) org.osmdroid.views.MapView.setMapScroll(long, long):void type: VIRTUAL \l0x0011: INVOKE  (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.resetProjection():void type: DIRECT \l0x0014: INVOKE  (r2 I:org.osmdroid.views.Projection) = (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.getProjection():org.osmdroid.views.Projection type: VIRTUAL \l0x0018: INVOKE  (r2 I:org.osmdroid.util.GeoPoint) = (r2 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getCurrentCenter():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x001c: INVOKE  (r2 I:boolean) = (r2 I:org.osmdroid.util.GeoPoint), (r0 I:java.lang.Object) org.osmdroid.util.GeoPoint.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0022|0x0022: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: IGET  (r3 I:java.util.List\<org.osmdroid.events.MapListener\>) = (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.mListners java.util.List \l0x0025: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0042 \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r4 I:org.osmdroid.events.MapListener) = (org.osmdroid.events.MapListener) (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: NEW_INSTANCE  (r2 I:org.osmdroid.events.ScrollEvent) =  org.osmdroid.events.ScrollEvent \l0x003a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003b: INVOKE  \l  (r2 I:org.osmdroid.events.ScrollEvent)\l  (r1 I:org.osmdroid.views.MapView)\l  (r5 I:int)\l  (r5 I:int)\l org.osmdroid.events.ScrollEvent.\<init\>(org.osmdroid.views.MapView, int, int):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: INVOKE  \l  (r4 I:org.osmdroid.events.MapListener)\l  (r2 I:org.osmdroid.events.ScrollEvent)\l org.osmdroid.events.MapListener.onScroll(org.osmdroid.events.ScrollEvent):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: INVOKE  (r1 I:org.osmdroid.views.MapView) org.osmdroid.views.MapView.invalidate():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.MapView.setExpectedCenter((r1 'this' I:org.osmdroid.views.MapView A[IMMUTABLE_TYPE, THIS]), (r2 I:org.osmdroid.api.IGeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_3;
Node_10 -> Node_11;
}

