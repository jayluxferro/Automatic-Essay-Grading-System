digraph "CFG fororg.osmdroid.views.overlay.mylocation.MyLocationNewOverlay.onSnapToItem(IILandroid\/graphics\/Point;Lorg\/osmdroid\/api\/IMapView;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r3.mLocation == null) goto L_0x0057\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r3.mMapView.getProjection().toPixels(r3.mGeoPoint, r3.mSnapPixel)\lr6.x = r3.mSnapPixel.x\lr6.y = r3.mSnapPixel.y\ldouble r6 = (double) (r4 \- r3.mSnapPixel.x)\ldouble r4 = (double) (r5 \- r3.mSnapPixel.y)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0033|if ((((r6 * r6) + (r4 * r4)) \> 64.0d ? 1 : (((r6 * r6) + (r4 * r4)) == 64.0d ? 0 : \-1)) \>= 0) goto L_0x0036\l}"];
Node_4 [shape=record,label="{4\:\ 0x0035|r0 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v2 boolean) binds: [B:3:0x0033, B:4:0x0035] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|if (org.osmdroid.config.Configuration.getInstance().isDebugMode() == false) goto L_0x0056\l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"snap=\")\lr5.append(r0)\landroid.util.Log.d(org.osmdroid.api.IMapView.LOGTAG, r5.toString())\l}"];
Node_8 [shape=record,label="{8\:\ 0x0056|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0057|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay.onSnapToItem((r3v0 'this' org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.graphics.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 org.osmdroid.api.IMapView A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
}

