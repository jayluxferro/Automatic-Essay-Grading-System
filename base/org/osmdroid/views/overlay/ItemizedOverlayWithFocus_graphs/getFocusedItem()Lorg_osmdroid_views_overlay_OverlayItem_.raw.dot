digraph "CFG fororg.osmdroid.views.overlay.ItemizedOverlayWithFocus.getFocusedItem()Lorg\/osmdroid\/views\/overlay\/OverlayItem;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:org.osmdroid.views.overlay.ItemizedOverlayWithFocus) org.osmdroid.views.overlay.ItemizedOverlayWithFocus.mFocusedItemIndex int \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (\-2147483648(0xffffffff80000000, float:\-0.0) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: RETURN  (r0 I:Item) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:java.util.List) = (r2 I:org.osmdroid.views.overlay.ItemizedOverlayWithFocus) org.osmdroid.views.overlay.ItemizedOverlayWithFocus.mItemList java.util.List \l0x000a: IGET  (r1 I:int) = (r2 I:org.osmdroid.views.overlay.ItemizedOverlayWithFocus) org.osmdroid.views.overlay.ItemizedOverlayWithFocus.mFocusedItemIndex int \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0010: CHECK_CAST  (r0 I:org.osmdroid.views.overlay.OverlayItem) = (org.osmdroid.views.overlay.OverlayItem) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r0 I:Item) \l}"];
MethodNode[shape=record,label="{public Item org.osmdroid.views.overlay.ItemizedOverlayWithFocus.getFocusedItem((r2 'this' I:org.osmdroid.views.overlay.ItemizedOverlayWithFocus A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[()TItem;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

