digraph "CFG fororg.osmdroid.views.overlay.IconOverlay.draw(Landroid\/graphics\/Canvas;Lorg\/osmdroid\/views\/Projection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6.mIcon != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if (r6.mPosition != null) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|r8.toPixels(r6.mPosition, r6.mPositionPixels)\lint r0 = r6.mIcon.getIntrinsicWidth()\lint r1 = r6.mIcon.getIntrinsicHeight()\landroid.graphics.Rect r2 = new android.graphics.Rect(0, 0, r0, r1)\lr2.offset(\-((int) (r6.mAnchorU * ((float) r0))), \-((int) (r6.mAnchorV * ((float) r1))))\lr6.mIcon.setBounds(r2)\lr6.mIcon.setAlpha((int) (r6.mAlpha * 255.0f))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|if (r6.mFlat == false) goto L_0x004e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|float r8 = \-r6.mBearing\l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|PHI: r8 \l  PHI: (r8v3 float) = (r8v2 float), (r8v7 float) binds: [B:10:0x004e, B:8:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|r5 = r8\l}"];
Node_10 [shape=record,label="{10\:\ 0x004e|float r8 = r8.getOrientation() \- r6.mBearing\l}"];
Node_11 [shape=record,label="{11\:\ 0x0056|r0 = r7\ldrawAt(r0, r6.mIcon, r6.mPositionPixels.x, r6.mPositionPixels.y, false, r5)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0065|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.overlay.IconOverlay.draw((r6v0 'this' org.osmdroid.views.overlay.IconOverlay A[IMMUTABLE_TYPE, THIS]), (r7v0 android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
}

