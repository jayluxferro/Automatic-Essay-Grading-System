digraph "CFG fororg.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getStartEndPointsWE(DDI)[D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r5 I:double) = (r22 I:int) org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getIncrementor(int):double type: STATIC \l0x0006: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0008: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0009: CONST  (r10 I:?[long, double]) = \l  (\-4582834833314545664(0xc066800000000000, double:\-180.0) ?[long, double])\l \l0x000e: CONST  (r12 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x0013: CONST  (r14 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r4 I:?[int, byte, short, char]) \>= (r14 I:?[int, byte, short, char])  \-\> B:19:0x003f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: INVOKE  (r0 I:double) = (r18 I:double) java.lang.Math.floor(double):double type: STATIC \l0x001b: MOVE  (r14 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: CMP_L  (r4 I:int) = (r14 I:double), (r0 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: ARITH  (r14 I:double) = (r14 I:double) \- (r5 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r0 I:double) = (r20 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x0026: MOVE  (r2 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: CMP_G  (r4 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: ARITH  (r2 I:double) = (r2 I:double) + (r5 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: CMP_G  (r2 I:int) = (r14 I:double), (r10 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: MOVE  (r14 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: CMP_L  (r2 I:int) = (r0 I:double), (r12 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:16:0x0037 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: MOVE  (r12 I:?[long, double]) = (r0 I:?[long, double]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: NEW_ARRAY  (r0 I:double[]) = (r9 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x003a: APUT  \l  (r0 I:?[long, double][])\l  (r7 I:?[int, short, byte, char])\l  (r12 I:?[long, double])\l \l0x003c: APUT  \l  (r0 I:?[long, double][])\l  (r8 I:?[int, short, byte, char])\l  (r14 I:?[long, double])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: RETURN  (r0 I:double[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: CONST  (r5 I:?[long, double]) = (0 ?[long, double]) \l0x0041: CMP_L  (r14 I:int) = (r18 I:double), (r5 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|0x0043: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0046 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: MOVE  (r10 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0046|0x0046: CMP_G  (r14 I:int) = (r20 I:double), (r5 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: IF  (r14 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:25:0x004b \l}"];
Node_24 [shape=record,label="{24\:\ 0x004a|0x004a: MOVE  (r12 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004c|0x004c: IF  (r5 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:38:0x0085 \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: INVOKE  (r14 I:double) = (r5 I:int) org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getIncrementor(int):double type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x0052|0x0052: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0053: ARITH  (r16 I:double) = (r20 I:double) + (r14 I:double) \l0x0055: CMP_L  (r6 I:int) = (r12 I:double), (r16 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0057|0x0057: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:31:0x005b \l}"];
Node_30 [shape=record,label="{30\:\ 0x0059|0x0059: ARITH  (r12 I:double) = (r12 I:double) \- (r14 I:double) \l}"];
Node_31 [shape=record,label="{31\:\ 0x005b|0x005b: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005c: ARITH  (r16 I:double) = (r18 I:double) \- (r14 I:double) \l0x005e: CMP_G  (r6 I:int) = (r10 I:double), (r16 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0060|0x0060: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:37:0x0080 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0062|0x0062: ARITH  (r10 I:double) = (r10 I:double) + (r14 I:double) \l0x0063: SGET  (r6 I:boolean) =  org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.DEBUG boolean \l}"];
Node_34 [shape=record,label="{34\:\ 0x0065|0x0065: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x007d \l}"];
Node_35 [shape=record,label="{35\:\ 0x0067|0x0067: SGET  (r6 I:java.io.PrintStream) =  java.lang.System.out java.io.PrintStream \l0x0069: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x006b: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x006e: CONST_STR  (r7 I:java.lang.String) =  \"west \" \l0x0070: INVOKE  (r8 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0073: INVOKE  (r8 I:java.lang.StringBuilder), (r10 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x0076: INVOKE  (r7 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x007a: INVOKE  (r6 I:java.io.PrintStream), (r7 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_36 [shape=record,label="{36\:\ 0x007d|0x007d: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007e: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0080|0x0080: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0082: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0083: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0085|0x0085: SGET  (r0 I:boolean) =  org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.DEBUG boolean \l}"];
Node_39 [shape=record,label="{39\:\ 0x0087|0x0087: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00a7 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0089|0x0089: SGET  (r0 I:java.io.PrintStream) =  java.lang.System.out java.io.PrintStream \l0x008b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x008d: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0090: CONST_STR  (r2 I:java.lang.String) =  \"return EW set as \" \l0x0092: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0095: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x0098: CONST_STR  (r2 I:java.lang.String) =  \" \" \l0x009a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009d: INVOKE  (r1 I:java.lang.StringBuilder), (r12 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x00a0: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a4: INVOKE  (r0 I:java.io.PrintStream), (r1 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x00a7|0x00a7: NEW_ARRAY  (r0 I:double[]) = (r9 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x00a9: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00aa: APUT  \l  (r0 I:?[long, double][])\l  (r1 I:?[int, short, byte, char])\l  (r12 I:?[long, double])\l \l0x00ac: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00ad: APUT  \l  (r0 I:?[long, double][])\l  (r1 I:?[int, short, byte, char])\l  (r10 I:?[long, double])\l \l}"];
Node_42 [shape=record,label="{42\:\ 0x00af|0x00af: RETURN  (r0 I:double[]) \l}"];
MethodNode[shape=record,label="{private static double[] org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getStartEndPointsWE((r18 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_28;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_31;
Node_37 -> Node_26;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
}

