digraph "CFG fororg.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getStartEndPointsNS(DDI)[D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r7 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0005: CONST  (r8 I:?[long, double]) = \l  (4636033603912859648(0x4056800000000000, double:90.0) ?[long, double])\l \l0x000a: CONST  (r10 I:?[long, double]) = \l  (\-4587338432941916160(0xc056800000000000, double:\-90.0) ?[long, double])\l \l0x000f: CONST  (r12 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r4 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: INVOKE  (r2 I:double) = (r20 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0017: INVOKE  (r12 I:double) = (r22 I:int) org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getIncrementor(int):double type: STATIC \l0x001b: MOVE  (r14 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: CMP_G  (r4 I:int) = (r14 I:double), (r2 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: ARITH  (r14 I:double) = (r14 I:double) + (r12 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r0 I:double) = (r18 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x0026: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: CMP_L  (r4 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x002d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: ARITH  (r2 I:double) = (r2 I:double) \- (r12 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: CMP_L  (r0 I:int) = (r2 I:double), (r8 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: MOVE  (r2 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: CMP_G  (r0 I:int) = (r14 I:double), (r10 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0037 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: MOVE  (r14 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: NEW_ARRAY  (r0 I:double[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0039: APUT  \l  (r0 I:?[long, double][])\l  (r5 I:?[int, short, byte, char])\l  (r14 I:?[long, double])\l \l0x003b: APUT  \l  (r0 I:?[long, double][])\l  (r6 I:?[int, short, byte, char])\l  (r2 I:?[long, double])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x003d|0x003d: RETURN  (r0 I:double[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: CONST  (r12 I:?[long, double]) = (0 ?[long, double]) \l0x0040: CMP_L  (r14 I:int) = (r20 I:double), (r12 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x0045 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|0x0044: MOVE  (r10 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: CMP_G  (r14 I:int) = (r18 I:double), (r12 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: IF  (r14 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:24:0x004a \l}"];
Node_24 [shape=record,label="{24\:\ 0x004a|0x004a: MOVE  (r12 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x004b|0x004b: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004c|0x004c: IF  (r8 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:40:0x009f \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|0x004e: INVOKE  (r14 I:double) = (r8 I:int) org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getIncrementor(int):double type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x0052|0x0052: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0053: ARITH  (r16 I:double) = (r20 I:double) \- (r14 I:double) \l0x0055: CMP_G  (r9 I:int) = (r10 I:double), (r16 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0057|0x0057: IF  (r9 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:34:0x0077 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0059|0x0059: ARITH  (r10 I:double) = (r10 I:double) + (r14 I:double) \l0x005a: SGET  (r9 I:boolean) =  org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.DEBUG boolean \l}"];
Node_31 [shape=record,label="{31\:\ 0x005c|0x005c: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0074 \l}"];
Node_32 [shape=record,label="{32\:\ 0x005e|0x005e: SGET  (r9 I:java.io.PrintStream) =  java.lang.System.out java.io.PrintStream \l0x0060: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0062: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0065: CONST_STR  (r5 I:java.lang.String) =  \"south \" \l0x0067: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x006a: INVOKE  (r6 I:java.lang.StringBuilder), (r10 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x006d: INVOKE  (r5 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0071: INVOKE  (r9 I:java.io.PrintStream), (r5 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_33 [shape=record,label="{33\:\ 0x0074|0x0074: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0077|0x0077: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0078: ARITH  (r5 I:double) = (r18 I:double) + (r14 I:double) \l0x007a: CMP_L  (r5 I:int) = (r12 I:double), (r5 I:double) \l}"];
Node_35 [shape=record,label="{35\:\ 0x007c|0x007c: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:39:0x009a \l}"];
Node_36 [shape=record,label="{36\:\ 0x007e|0x007e: ARITH  (r12 I:double) = (r12 I:double) \- (r14 I:double) \l0x007f: SGET  (r5 I:boolean) =  org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.DEBUG boolean \l}"];
Node_37 [shape=record,label="{37\:\ 0x0081|0x0081: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0077 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0083|0x0083: SGET  (r5 I:java.io.PrintStream) =  java.lang.System.out java.io.PrintStream \l0x0085: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0087: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x008a: CONST_STR  (r9 I:java.lang.String) =  \"north \" \l0x008c: INVOKE  (r6 I:java.lang.StringBuilder), (r9 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x008f: INVOKE  (r6 I:java.lang.StringBuilder), (r12 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x0092: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0096: INVOKE  (r5 I:java.io.PrintStream), (r6 I:java.lang.String) java.io.PrintStream.println(java.lang.String):void type: VIRTUAL \l}"];
Node_39 [shape=record,label="{39\:\ 0x009a|0x009a: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x009c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009d: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x009f|0x009f: NEW_ARRAY  (r0 I:double[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x00a1: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a2: APUT  \l  (r0 I:?[long, double][])\l  (r1 I:?[int, short, byte, char])\l  (r10 I:?[long, double])\l \l0x00a4: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a5: APUT  \l  (r0 I:?[long, double][])\l  (r1 I:?[int, short, byte, char])\l  (r12 I:?[long, double])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x00a7|0x00a7: RETURN  (r0 I:double[]) \l}"];
MethodNode[shape=record,label="{private static double[] org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay.getStartEndPointsNS((r18 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_40;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_28;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_34;
Node_37 -> Node_38[style=dashed];
Node_38 -> Node_34;
Node_39 -> Node_26;
Node_40 -> Node_41;
}

