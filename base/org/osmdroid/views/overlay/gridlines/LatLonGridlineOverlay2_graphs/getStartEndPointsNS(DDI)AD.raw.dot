digraph "CFG fororg.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2.getStartEndPointsNS(DDI)[D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r24 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: CONST  (r8 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0007: CONST  (r9 I:?[long, double]) = \l  (4636033603912859648(0x4056800000000000, double:90.0) ?[long, double])\l \l0x000c: CONST  (r11 I:?[long, double]) = \l  (\-4587338432941916160(0xc056800000000000, double:\-90.0) ?[long, double])\l \l0x0011: CONST  (r13 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r5 I:?[int, byte, short, char]) \>= (r13 I:?[int, byte, short, char])  \-\> B:19:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: INVOKE  (r3 I:double) = (r22 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0019: INVOKE  (r13 I:double) = \l  (r0 I:org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2)\l  (r5 I:int)\l org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2.getIncrementor(int):double type: VIRTUAL \l0x001d: MOVE  (r15 I:?[long, double]) = (r11 I:?[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: CMP_G  (r5 I:int) = (r15 I:double), (r3 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:6:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: ARITH  (r15 I:double) = (r15 I:double) + (r13 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r1 I:double) = (r20 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x0028: MOVE  (r3 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: CMP_L  (r5 I:int) = (r3 I:double), (r1 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x002f \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: ARITH  (r3 I:double) = (r3 I:double) \- (r13 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: CMP_L  (r1 I:int) = (r3 I:double), (r9 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: MOVE  (r3 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: CMP_G  (r1 I:int) = (r15 I:double), (r11 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0039 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: MOVE  (r11 I:?[long, double]) = (r15 I:?[long, double]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: NEW_ARRAY  (r1 I:double[]) = (r8 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x003c: APUT  \l  (r1 I:?[long, double][])\l  (r6 I:?[int, short, byte, char])\l  (r11 I:?[long, double])\l \l0x003e: APUT  \l  (r1 I:?[long, double][])\l  (r7 I:?[int, short, byte, char])\l  (r3 I:?[long, double])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0040|0x0040: RETURN  (r1 I:double[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|0x0041: CONST  (r13 I:?[long, double]) = (0 ?[long, double]) \l0x0043: CMP_L  (r15 I:int) = (r22 I:double), (r13 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|0x0045: IF  (r15 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:22:0x0048 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0047|0x0047: MOVE  (r11 I:?[long, double]) = (r13 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: CMP_G  (r15 I:int) = (r20 I:double), (r13 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: IF  (r15 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:25:0x004d \l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: MOVE  (r13 I:?[long, double]) = (r9 I:?[long, double]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x004e|0x004e: CONST  (r9 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004f|0x004f: IF  (r9 I:?[int, byte, short, char]) \> (r5 I:?[int, byte, short, char])  \-\> B:36:0x006a \l}"];
Node_28 [shape=record,label="{28\:\ 0x0051|0x0051: INVOKE  (r15 I:double) = \l  (r0 I:org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2)\l  (r9 I:int)\l org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2.getIncrementor(int):double type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|0x0055: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0056: ARITH  (r17 I:double) = (r22 I:double) \- (r15 I:double) \l0x0058: CMP_G  (r10 I:int) = (r11 I:double), (r17 I:double) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005a|0x005a: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:32:0x005e \l}"];
Node_31 [shape=record,label="{31\:\ 0x005c|0x005c: ARITH  (r11 I:double) = (r11 I:double) + (r15 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x005e|0x005e: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005f: ARITH  (r17 I:double) = (r20 I:double) + (r15 I:double) \l0x0061: CMP_L  (r10 I:int) = (r13 I:double), (r17 I:double) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0063|0x0063: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:35:0x0067 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0065|0x0065: ARITH  (r13 I:double) = (r13 I:double) \- (r15 I:double) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0067|0x0067: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x006a|0x006a: NEW_ARRAY  (r1 I:double[]) = (r8 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x006c: APUT  \l  (r1 I:?[long, double][])\l  (r6 I:?[int, short, byte, char])\l  (r11 I:?[long, double])\l \l0x006e: APUT  \l  (r1 I:?[long, double][])\l  (r7 I:?[int, short, byte, char])\l  (r13 I:?[long, double])\l \l}"];
Node_37 [shape=record,label="{37\:\ 0x0070|0x0070: RETURN  (r1 I:double[]) \l}"];
MethodNode[shape=record,label="{protected double[] org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2.getStartEndPointsNS((r19 'this' I:org.osmdroid.views.overlay.gridlines.LatLonGridlineOverlay2 A[IMMUTABLE_TYPE, THIS]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_29;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_32;
Node_35 -> Node_27;
Node_36 -> Node_37;
}

