digraph "CFG fororg.osmdroid.views.overlay.PathOverlay.addGreatCircle(Lorg\/osmdroid\/util\/GeoPoint;Lorg\/osmdroid\/util\/GeoPoint;I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r30 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0002: INVOKE  (r1 I:double) = (r28 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0006: CONST  (r3 I:?[long, double]) = \l  (4614256656552045848(0x400921fb54442d18, double:3.141592653589793) ?[long, double])\l \l0x000b: ARITH  (r1 I:double) = (r1 I:double) * (r3 I:double) \l0x000d: CONST  (r5 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x0012: ARITH  (r1 I:double) = (r1 I:double) \/ (r5 I:double) \l0x0013: INVOKE  (r7 I:double) = (r28 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0017: ARITH  (r7 I:double) = (r7 I:double) * (r3 I:double) \l0x0019: ARITH  (r7 I:double) = (r7 I:double) \/ (r5 I:double) \l0x001a: INVOKE  (r9 I:double) = (r29 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x001e: ARITH  (r9 I:double) = (r9 I:double) * (r3 I:double) \l0x0020: ARITH  (r9 I:double) = (r9 I:double) \/ (r5 I:double) \l0x0021: INVOKE  (r11 I:double) = (r29 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0025: ARITH  (r11 I:double) = (r11 I:double) * (r3 I:double) \l0x0027: ARITH  (r11 I:double) = (r11 I:double) \/ (r5 I:double) \l0x0028: ARITH  (r3 I:double) = (r1 I:double) \- (r9 I:double) \l0x002a: CONST  (r5 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x002c: ARITH  (r3 I:double) = (r3 I:double) \/ (r5 I:double) \l0x002d: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0031: INVOKE  (r3 I:double) = (r3 I:double), (r5 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0035: INVOKE  (r13 I:double) = (r1 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0039: INVOKE  (r15 I:double) = (r9 I:double) java.lang.Math.cos(double):double type: STATIC \l0x003d: ARITH  (r13 I:double) = (r13 I:double) * (r15 I:double) \l0x003f: ARITH  (r15 I:double) = (r7 I:double) \- (r11 I:double) \l0x0041: ARITH  (r17 I:double) = (r15 I:double) \/ (r5 I:double) \l0x0043: MOVE  (r19 I:?[long, double]) = (r11 I:?[long, double]) \l0x0045: INVOKE  (r11 I:double) = (r17 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0049: INVOKE  (r11 I:double) = (r11 I:double), (r5 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x004d: ARITH  (r13 I:double) = (r13 I:double) * (r11 I:double) \l0x004f: ARITH  (r3 I:double) = (r3 I:double) + (r13 I:double) \l0x0050: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0054: INVOKE  (r3 I:double) = (r3 I:double) java.lang.Math.asin(double):double type: STATIC \l0x0058: ARITH  (r3 I:double) = (r3 I:double) * (r5 I:double) \l0x005a: INVOKE  (r11 I:double) = (r15 I:double) java.lang.Math.sin(double):double type: STATIC \l0x005e: INVOKE  (r13 I:double) = (r9 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0062: ARITH  (r11 I:double) = (r11 I:double) * (r13 I:double) \l0x0064: INVOKE  (r13 I:double) = (r1 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0068: INVOKE  (r17 I:double) = (r9 I:double) java.lang.Math.sin(double):double type: STATIC \l0x006c: ARITH  (r13 I:double) = (r13 I:double) * (r17 I:double) \l0x006e: INVOKE  (r17 I:double) = (r1 I:double) java.lang.Math.sin(double):double type: STATIC \l0x0072: INVOKE  (r21 I:double) = (r9 I:double) java.lang.Math.cos(double):double type: STATIC \l0x0076: ARITH  (r17 I:double) = (r17 I:double) * (r21 I:double) \l0x0078: INVOKE  (r15 I:double) = (r15 I:double) java.lang.Math.cos(double):double type: STATIC \l0x007c: ARITH  (r17 I:double) = (r17 I:double) * (r15 I:double) \l0x007e: ARITH  (r13 I:double) = (r13 I:double) \- (r17 I:double) \l0x0080: INVOKE  (r11 I:double) = (r11 I:double), (r13 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x0084: CONST  (r13 I:?[long, double]) = \l  (\-4642684246378242759(0xbf91df46a2529d39, double:\-0.017453292519943295) ?[long, double])\l \l0x0089: ARITH  (r11 I:double) = (r11 I:double) \/ (r13 I:double) \l0x008a: CONST  (r13 I:?[long, double]) = (0 ?[long, double]) \l0x008c: CMP_G  (r11 I:int) = (r11 I:double), (r13 I:double) \l0x008e: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008f: ARITH  (r12 I:int) = (r0 I:int) + (1 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0091|0x0091: IF  (r11 I:?[int, byte, short, char]) \>= (r12 I:?[int, byte, short, char])  \-\> B:3:0x0125 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0093|0x0093: CAST  (r13 I:double) = (double) (r0 I:int) \l0x0094: CONST  (r15 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0096: ARITH  (r13 I:double) = (r15 I:double) \/ (r13 I:double) \l0x0098: CAST  (r5 I:double) = (double) (r11 I:int) \l0x0099: ARITH  (r13 I:double) = (r13 I:double) * (r5 I:double) \l0x009b: ARITH  (r15 I:double) = (r15 I:double) \- (r13 I:double) \l0x009c: ARITH  (r15 I:double) = (r15 I:double) * (r3 I:double) \l0x009e: INVOKE  (r5 I:double) = (r15 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00a2: INVOKE  (r15 I:double) = (r3 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00a6: ARITH  (r5 I:double) = (r5 I:double) \/ (r15 I:double) \l0x00a7: ARITH  (r13 I:double) = (r13 I:double) * (r3 I:double) \l0x00a9: INVOKE  (r13 I:double) = (r13 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00ad: INVOKE  (r15 I:double) = (r3 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00b1: ARITH  (r13 I:double) = (r13 I:double) \/ (r15 I:double) \l0x00b2: INVOKE  (r15 I:double) = (r1 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00b6: ARITH  (r15 I:double) = (r15 I:double) * (r5 I:double) \l0x00b8: INVOKE  (r17 I:double) = (r7 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00bc: ARITH  (r15 I:double) = (r15 I:double) * (r17 I:double) \l0x00be: INVOKE  (r17 I:double) = (r9 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00c2: ARITH  (r17 I:double) = (r17 I:double) * (r13 I:double) \l0x00c4: INVOKE  (r21 I:double) = (r19 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00c8: ARITH  (r17 I:double) = (r17 I:double) * (r21 I:double) \l0x00ca: MOVE  (r23 I:?[long, double]) = (r3 I:?[long, double]) \l0x00cc: ARITH  (r3 I:double) = (r15 I:double) + (r17 I:double) \l0x00ce: INVOKE  (r15 I:double) = (r1 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00d2: ARITH  (r15 I:double) = (r15 I:double) * (r5 I:double) \l0x00d4: INVOKE  (r17 I:double) = (r7 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00d8: ARITH  (r15 I:double) = (r15 I:double) * (r17 I:double) \l0x00da: INVOKE  (r17 I:double) = (r9 I:double) java.lang.Math.cos(double):double type: STATIC \l0x00de: ARITH  (r17 I:double) = (r17 I:double) * (r13 I:double) \l0x00e0: INVOKE  (r21 I:double) = (r19 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00e4: ARITH  (r17 I:double) = (r17 I:double) * (r21 I:double) \l0x00e6: MOVE  (r25 I:?[long, double]) = (r7 I:?[long, double]) \l0x00e8: ARITH  (r7 I:double) = (r15 I:double) + (r17 I:double) \l0x00ea: INVOKE  (r15 I:double) = (r1 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00ee: ARITH  (r5 I:double) = (r5 I:double) * (r15 I:double) \l0x00f0: INVOKE  (r15 I:double) = (r9 I:double) java.lang.Math.sin(double):double type: STATIC \l0x00f4: ARITH  (r13 I:double) = (r13 I:double) * (r15 I:double) \l0x00f6: ARITH  (r5 I:double) = (r5 I:double) + (r13 I:double) \l0x00f7: CONST  (r13 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x00f9: INVOKE  (r15 I:double) = (r3 I:double), (r13 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x00fd: INVOKE  (r17 I:double) = (r7 I:double), (r13 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0101: ARITH  (r15 I:double) = (r15 I:double) + (r17 I:double) \l0x0103: INVOKE  (r13 I:double) = (r15 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0107: INVOKE  (r5 I:double) = (r5 I:double), (r13 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x010b: INVOKE  (r3 I:double) = (r7 I:double), (r3 I:double) java.lang.Math.atan2(double, double):double type: STATIC \l0x010f: CONST  (r7 I:?[long, double]) = \l  (4580687790476533049(0x3f91df46a2529d39, double:0.017453292519943295) ?[long, double])\l \l0x0114: ARITH  (r5 I:double) = (r5 I:double) \/ (r7 I:double) \l0x0115: ARITH  (r3 I:double) = (r3 I:double) \/ (r7 I:double) \l0x0116: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0118: INVOKE  \l  (r7 I:org.osmdroid.views.overlay.PathOverlay)\l  (r5 I:double)\l  (r3 I:double)\l org.osmdroid.views.overlay.PathOverlay.addPoint(double, double):void type: VIRTUAL \l0x011b: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l0x011d: MOVE  (r3 I:?[long, double]) = (r23 I:?[long, double]) \l0x011f: MOVE  (r7 I:?[long, double]) = (r25 I:?[long, double]) \l0x0121: CONST  (r5 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0125|0x0125: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0127|0x0127: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.overlay.PathOverlay.addGreatCircle((r27 'this' I:org.osmdroid.views.overlay.PathOverlay A[IMMUTABLE_TYPE, THIS]), (r28 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
}

