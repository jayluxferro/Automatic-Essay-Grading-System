digraph "CFG fororg.osmdroid.views.overlay.infowindow.InfoWindow.getOpenedInfoWindowsOn(Lorg\/osmdroid\/views\/MapView;)Ljava\/util\/ArrayList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r5.getChildCount()\ljava.util.ArrayList r1 = new java.util.ArrayList\<\>(r0)\lr2 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:0:0x0000, B:7:0x001f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000a\-\>B:7:0x001f\l|if (r2 \>= r0) goto L_0x0022\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|java.lang.Object r3 = r5.getChildAt(r2).getTag()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (r3 == null) goto L_0x001f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if ((r3 instanceof org.osmdroid.views.overlay.infowindow.InfoWindow) == false) goto L_0x001f\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|r1.add((org.osmdroid.views.overlay.infowindow.InfoWindow) r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|LOOP_END\lLOOP:0: B:1:0x000a\-\>B:7:0x001f\l|int r2 = r2 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|RETURN\l|return r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.ArrayList\<org.osmdroid.views.overlay.infowindow.InfoWindow\> org.osmdroid.views.overlay.infowindow.InfoWindow.getOpenedInfoWindowsOn((r5v0 org.osmdroid.views.MapView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/views\/MapView;, ), Ljava\/util\/ArrayList\<, Lorg\/osmdroid\/views\/overlay\/infowindow\/InfoWindow;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_10;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
Node_11 -> Node_7;
Node_12 -> Node_7;
}

