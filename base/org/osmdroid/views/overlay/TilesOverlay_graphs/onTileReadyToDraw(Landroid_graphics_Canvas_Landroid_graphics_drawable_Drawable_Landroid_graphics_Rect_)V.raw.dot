digraph "CFG fororg.osmdroid.views.overlay.TilesOverlay.onTileReadyToDraw(Landroid\/graphics\/Canvas;Landroid\/graphics\/drawable\/Drawable;Landroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.ColorFilter) = (r3 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.currentColorFilter android.graphics.ColorFilter \l0x0002: INVOKE  \l  (r5 I:android.graphics.drawable.Drawable)\l  (r0 I:android.graphics.ColorFilter)\l android.graphics.drawable.Drawable.setColorFilter(android.graphics.ColorFilter):void type: VIRTUAL \l0x0005: IGET  (r0 I:int) = (r6 I:android.graphics.Rect) android.graphics.Rect.left int \l0x0007: IGET  (r1 I:int) = (r6 I:android.graphics.Rect) android.graphics.Rect.top int \l0x0009: IGET  (r2 I:int) = (r6 I:android.graphics.Rect) android.graphics.Rect.right int \l0x000b: IGET  (r6 I:int) = (r6 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x000d: INVOKE  \l  (r5 I:android.graphics.drawable.Drawable)\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:int)\l  (r6 I:int)\l android.graphics.drawable.Drawable.setBounds(int, int, int, int):void type: VIRTUAL \l0x0010: INVOKE  (r6 I:android.graphics.Rect) = (r3 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.getCanvasRect():android.graphics.Rect type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  \l  (r5 I:android.graphics.drawable.Drawable)\l  (r4 I:android.graphics.Canvas)\l android.graphics.drawable.Drawable.draw(android.graphics.Canvas):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|0x0019: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IGET  (r0 I:android.graphics.Rect) = (r3 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mIntersectionRect android.graphics.Rect \l0x001c: INVOKE  (r1 I:android.graphics.Rect) = (r4 I:android.graphics.Canvas) android.graphics.Canvas.getClipBounds():android.graphics.Rect type: VIRTUAL \l0x0020: INVOKE  (r6 I:boolean) = \l  (r0 I:android.graphics.Rect)\l  (r1 I:android.graphics.Rect)\l  (r6 I:android.graphics.Rect)\l android.graphics.Rect.setIntersect(android.graphics.Rect, android.graphics.Rect):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: INVOKE  (r4 I:android.graphics.Canvas) android.graphics.Canvas.save():int type: VIRTUAL \l0x002a: IGET  (r6 I:android.graphics.Rect) = (r3 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mIntersectionRect android.graphics.Rect \l0x002c: INVOKE  \l  (r4 I:android.graphics.Canvas)\l  (r6 I:android.graphics.Rect)\l android.graphics.Canvas.clipRect(android.graphics.Rect):boolean type: VIRTUAL \l0x002f: INVOKE  \l  (r5 I:android.graphics.drawable.Drawable)\l  (r4 I:android.graphics.Canvas)\l android.graphics.drawable.Drawable.draw(android.graphics.Canvas):void type: VIRTUAL \l0x0032: INVOKE  (r4 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.osmdroid.views.overlay.TilesOverlay.onTileReadyToDraw((r3 'this' I:org.osmdroid.views.overlay.TilesOverlay A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
}

