digraph "CFG fororg.osmdroid.views.overlay.TilesOverlay.getLoadingTile()Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.userSelectedLoadingDrawable android.graphics.drawable.Drawable \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.drawable.Drawable) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.userSelectedLoadingDrawable android.graphics.drawable.Drawable \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:android.graphics.drawable.BitmapDrawable) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mLoadingTile android.graphics.drawable.BitmapDrawable \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x007b \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mLoadingBackgroundColor int \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x007b \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|SYNTHETIC\lSplitter:B:8:0x000f\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000f\l|0x000f: IGET  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mTileProvider org.osmdroid.tileprovider.MapTileProviderBase A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}, TRY_ENTER]\l0x0011: INVOKE  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) org.osmdroid.tileprovider.MapTileProviderBase.getTileSource():org.osmdroid.tileprovider.tilesource.ITileSource type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IGET  (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mTileProvider org.osmdroid.tileprovider.MapTileProviderBase A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0019: INVOKE  (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) = (r0 I:org.osmdroid.tileprovider.MapTileProviderBase) org.osmdroid.tileprovider.MapTileProviderBase.getTileSource():org.osmdroid.tileprovider.tilesource.ITileSource type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x001d: INVOKE  (r0 I:int) = (r0 I:org.osmdroid.tileprovider.tilesource.ITileSource) org.osmdroid.tileprovider.tilesource.ITileSource.getTileSizePixels():int type: INTERFACE A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0021: GOTO  \-\> 0x0024 A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (256(0x100, float:3.59E\-43) ?[int, float, short, byte, char])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: SGET  (r1 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0026: INVOKE  (r1 I:android.graphics.Bitmap) = \l  (r0 I:int)\l  (r0 I:int)\l  (r1 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x002a: NEW_INSTANCE  (r8 I:android.graphics.Canvas) =  android.graphics.Canvas A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x002c: INVOKE  \l  (r8 I:android.graphics.Canvas)\l  (r1 I:android.graphics.Bitmap)\l android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x002f: NEW_INSTANCE  (r9 I:android.graphics.Paint) =  android.graphics.Paint A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0031: INVOKE  (r9 I:android.graphics.Paint) android.graphics.Paint.\<init\>():void type: DIRECT A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0034: IGET  (r2 I:int) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mLoadingBackgroundColor int A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0036: INVOKE  (r8 I:android.graphics.Canvas), (r2 I:int) android.graphics.Canvas.drawColor(int):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0039: IGET  (r2 I:int) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mLoadingLineColor int A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x003b: INVOKE  (r9 I:android.graphics.Paint), (r2 I:int) android.graphics.Paint.setColor(int):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x003e: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x003f: INVOKE  (r9 I:android.graphics.Paint), (r2 I:float) android.graphics.Paint.setStrokeWidth(float):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0042: ARITH  (r10 I:int) = (r0 I:int) \/ (16 int) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0044: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0045: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|0x0046: IF  (r11 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:16:0x005e A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0049: CAST  (r12 I:float) = (float) (r11 I:int) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004a: CAST  (r13 I:float) = (float) (r0 I:int) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004c: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004d: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004e: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x004f: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0050: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:android.graphics.Paint)\l android.graphics.Canvas.drawLine(float, float, float, float, android.graphics.Paint):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0053: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0054: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0055: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0056: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0057: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0058: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0059: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:android.graphics.Paint)\l android.graphics.Canvas.drawLine(float, float, float, float, android.graphics.Paint):void type: VIRTUAL A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x005c: ARITH  (r11 I:int) = (r11 I:int) + (r10 I:int) A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x005d: GOTO  \-\> 0x0046 A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x005e|0x005e: NEW_INSTANCE  (r0 I:android.graphics.drawable.BitmapDrawable) =  android.graphics.drawable.BitmapDrawable A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0060: INVOKE  \l  (r0 I:android.graphics.drawable.BitmapDrawable)\l  (r1 I:android.graphics.Bitmap)\l android.graphics.drawable.BitmapDrawable.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}]\l0x0063: IPUT  \l  (r0 I:android.graphics.drawable.BitmapDrawable)\l  (r14 I:org.osmdroid.views.overlay.TilesOverlay)\l org.osmdroid.views.overlay.TilesOverlay.mLoadingTile android.graphics.drawable.BitmapDrawable A[Catch:\{ OutOfMemoryError \-\> 0x0071, NullPointerException \-\> 0x0066 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0066|0x0066: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x0068: CONST_STR  (r1 I:java.lang.String) =  \"NullPointerException getting loading tile\" \l0x006a: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x006d: INVOKE   java.lang.System.gc():void type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lExcHandler: NullPointerException null\lSplitter:B:8:0x000f\l}"];
Node_20 [shape=record,label="{20\:\ 0x0071|0x0071: CONST_STR  (r0 I:java.lang.String) =  \"OsmDroid\" \l0x0073: CONST_STR  (r1 I:java.lang.String) =  \"OutOfMemoryError getting loading tile\" \l0x0075: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) android.util.Log.e(java.lang.String, java.lang.String):int type: STATIC \l0x0078: INVOKE   java.lang.System.gc():void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lExcHandler: OutOfMemoryError null\lSplitter:B:8:0x000f\l}"];
Node_22 [shape=record,label="{22\:\ 0x007b|0x007b: IGET  (r0 I:android.graphics.drawable.BitmapDrawable) = (r14 I:org.osmdroid.views.overlay.TilesOverlay) org.osmdroid.views.overlay.TilesOverlay.mLoadingTile android.graphics.drawable.BitmapDrawable \l}"];
Node_23 [shape=record,label="{23\:\ 0x007d|0x007d: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{private android.graphics.drawable.Drawable org.osmdroid.views.overlay.TilesOverlay.getLoadingTile((r14 'this' I:org.osmdroid.views.overlay.TilesOverlay A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_22;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_9;
Node_8 -> Node_21;
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_14;
Node_16 -> Node_22;
Node_18 -> Node_22;
Node_19 -> Node_18;
Node_20 -> Node_22;
Node_21 -> Node_20;
Node_22 -> Node_23;
}

