digraph "CFG fororg.osmdroid.views.overlay.gestures.RotationGestureOverlay.onPrepareOptionsMenu(Landroid\/view\/Menu;ILorg\/osmdroid\/views\/MapView;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r3 I:int) =  org.osmdroid.views.overlay.gestures.RotationGestureOverlay.MENU_ENABLED int \l0x0002: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int) \l0x0003: INVOKE  (r1 I:android.view.MenuItem) = (r1 I:android.view.Menu), (r3 I:int) android.view.Menu.findItem(int):android.view.MenuItem type: INTERFACE \l0x0007: INVOKE  (r2 I:boolean) = \l  (r0 I:org.osmdroid.views.overlay.gestures.RotationGestureOverlay)\l org.osmdroid.views.overlay.gestures.RotationGestureOverlay.isEnabled():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: CONST_STR  (r2 I:java.lang.String) =  \"Disable rotation\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Enable rotation\" \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r1 I:android.view.MenuItem), (r2 I:java.lang.CharSequence) android.view.MenuItem.setTitle(java.lang.CharSequence):android.view.MenuItem type: INTERFACE \l0x0015: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.views.overlay.gestures.RotationGestureOverlay.onPrepareOptionsMenu((r0 'this' I:org.osmdroid.views.overlay.gestures.RotationGestureOverlay A[IMMUTABLE_TYPE, THIS]), (r1 I:android.view.Menu A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.osmdroid.views.MapView A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

