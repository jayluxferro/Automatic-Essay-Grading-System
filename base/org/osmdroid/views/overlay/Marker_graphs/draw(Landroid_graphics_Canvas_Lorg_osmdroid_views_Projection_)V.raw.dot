digraph "CFG fororg.osmdroid.views.overlay.Marker.draw(Landroid\/graphics\/Canvas;Lorg\/osmdroid\/views\/Projection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mIcon android.graphics.drawable.Drawable \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IGET  (r0 I:org.osmdroid.util.GeoPoint) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mPosition org.osmdroid.util.GeoPoint \l0x0007: IGET  (r1 I:android.graphics.Point) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mPositionPixels android.graphics.Point \l0x0009: INVOKE  \l  (r4 I:org.osmdroid.views.Projection)\l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r1 I:android.graphics.Point)\l org.osmdroid.views.Projection.toPixels(org.osmdroid.api.IGeoPoint, android.graphics.Point):android.graphics.Point type: VIRTUAL \l0x000c: IGET  (r0 I:boolean) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mFlat boolean \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r4 I:float) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mBearing float \l0x0012: NEG  (r4 I:float) = (r4 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r4 I:float) = (r4 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getOrientation():float type: VIRTUAL \l0x0018: NEG  (r4 I:float) = (r4 I:float) \l0x0019: IGET  (r0 I:float) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mBearing float \l0x001b: ARITH  (r4 I:float) = (r4 I:float) \- (r0 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IGET  (r0 I:android.graphics.Point) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mPositionPixels android.graphics.Point \l0x001e: IGET  (r0 I:int) = (r0 I:android.graphics.Point) android.graphics.Point.x int \l0x0020: IGET  (r1 I:android.graphics.Point) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mPositionPixels android.graphics.Point \l0x0022: IGET  (r1 I:int) = (r1 I:android.graphics.Point) android.graphics.Point.y int \l0x0024: INVOKE  \l  (r2 I:org.osmdroid.views.overlay.Marker)\l  (r3 I:android.graphics.Canvas)\l  (r0 I:int)\l  (r1 I:int)\l  (r4 I:float)\l org.osmdroid.views.overlay.Marker.drawAt(android.graphics.Canvas, int, int, float):void type: VIRTUAL \l0x0027: INVOKE  (r3 I:boolean) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.isInfoWindowShown():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: IGET  (r3 I:org.osmdroid.views.overlay.infowindow.InfoWindow) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.mInfoWindow org.osmdroid.views.overlay.infowindow.InfoWindow \l0x002f: INVOKE  (r3 I:org.osmdroid.views.overlay.infowindow.InfoWindow) org.osmdroid.views.overlay.infowindow.InfoWindow.draw():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.overlay.Marker.draw((r2 'this' I:org.osmdroid.views.overlay.Marker A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
}

