digraph "CFG fororg.osmdroid.views.overlay.Marker.isInfoWindowShown()Z" {
subgraph cluster_Region_1932685989 {
label = "R(1:(2:(1:11)|(2:2|3)))";
node [shape=record,color=blue];
subgraph cluster_Region_393905394 {
label = "R(2:(1:11)|(2:2|3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2053897013 {
label = "IF [B:1:0x0004] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r2.mInfoWindow instanceof org.osmdroid.views.overlay.infowindow.MarkerInfoWindow) != true) goto L_0x001c\l}"];
subgraph cluster_Region_486257117 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|return super.isInfoWindowOpen()\l}"];
}
}
subgraph cluster_Region_1443731850 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|org.osmdroid.views.overlay.infowindow.MarkerInfoWindow org.osmdroid.views.overlay.infowindow.MarkerInfoWindow r0 = (org.osmdroid.views.overlay.infowindow.MarkerInfoWindow) r2.mInfoWindow\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return r0 != null && r0.isOpen() && r0.getMarkerReference() == r2\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000c}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0010|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0016|REMOVE\lADDED_TO_REGION\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0018|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001a|SYNTHETIC\lORIG_RETURN\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001c}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.views.overlay.Marker.isInfoWindowShown((r2v0 'this' org.osmdroid.views.overlay.Marker A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_10 -> Node_11;
}

