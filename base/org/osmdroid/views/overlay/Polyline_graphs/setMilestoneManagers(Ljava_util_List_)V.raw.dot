digraph "CFG fororg.osmdroid.views.overlay.Polyline.setMilestoneManagers(Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r1 I:java.util.List\<org.osmdroid.views.overlay.milestones.MilestoneManager\>) = (r0 I:org.osmdroid.views.overlay.Polyline) org.osmdroid.views.overlay.Polyline.mMilestoneManagers java.util.List \l0x0004: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r1 I:java.util.List\<org.osmdroid.views.overlay.milestones.MilestoneManager\>) = (r0 I:org.osmdroid.views.overlay.Polyline) org.osmdroid.views.overlay.Polyline.mMilestoneManagers java.util.List \l0x000c: INVOKE  (r1 I:java.util.List) java.util.List.clear():void type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IPUT  \l  (r1 I:java.util.List\<org.osmdroid.views.overlay.milestones.MilestoneManager\>)\l  (r0 I:org.osmdroid.views.overlay.Polyline)\l org.osmdroid.views.overlay.Polyline.mMilestoneManagers java.util.List \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.overlay.Polyline.setMilestoneManagers((r0 'this' I:org.osmdroid.views.overlay.Polyline A[IMMUTABLE_TYPE, THIS]), (r1 I:java.util.List\<org.osmdroid.views.overlay.milestones.MilestoneManager\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/osmdroid\/views\/overlay\/milestones\/MilestoneManager;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_5;
Node_4 -> Node_5;
}

