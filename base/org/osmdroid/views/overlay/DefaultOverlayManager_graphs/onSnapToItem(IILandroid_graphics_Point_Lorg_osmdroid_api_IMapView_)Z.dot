digraph "CFG fororg.osmdroid.views.overlay.DefaultOverlayManager.onSnapToItem(IILandroid\/graphics\/Point;Lorg\/osmdroid\/api\/IMapView;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r0 = overlaysReversed().iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|LOOP_START\lLOOP:0: B:1:0x0008\-\>B:9:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|if (r0.hasNext() == false) goto L_0x0022\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|org.osmdroid.views.overlay.Overlay r1 = r0.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|if ((r1 instanceof org.osmdroid.views.overlay.Overlay.Snappable) == false) goto L_0x0008\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018}"];
Node_6 [shape=record,label="{6\:\ 0x001e|if (((org.osmdroid.views.overlay.Overlay.Snappable) r1).onSnapToItem(r4, r5, r6, r7) == false) goto L_0x0008\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|RETURN\l|return true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0008|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x0008\-\>B:9:0x0008\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.views.overlay.DefaultOverlayManager.onSnapToItem((r3v0 'this' org.osmdroid.views.overlay.DefaultOverlayManager A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 android.graphics.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 org.osmdroid.api.IMapView A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_11[style=dashed];
Node_6 -> Node_13;
Node_9 -> Node_1;
Node_10 -> Node_8;
Node_11 -> Node_7;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

