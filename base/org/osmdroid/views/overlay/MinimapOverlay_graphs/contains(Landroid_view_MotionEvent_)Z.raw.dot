digraph "CFG fororg.osmdroid.views.overlay.MinimapOverlay.contains(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:android.graphics.Rect) = (r2 I:org.osmdroid.views.overlay.MinimapOverlay) org.osmdroid.views.overlay.MinimapOverlay.getCanvasRect():android.graphics.Rect type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: INVOKE  (r1 I:float) = (r3 I:android.view.MotionEvent) android.view.MotionEvent.getX():float type: VIRTUAL \l0x000a: CAST  (r1 I:int) = (int) (r1 I:float) \l0x000b: INVOKE  (r3 I:float) = (r3 I:android.view.MotionEvent) android.view.MotionEvent.getY():float type: VIRTUAL \l0x000f: CAST  (r3 I:int) = (int) (r3 I:float) \l0x0010: INVOKE  (r3 I:boolean) = (r0 I:android.graphics.Rect), (r1 I:int), (r3 I:int) android.graphics.Rect.contains(int, int):boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|0x0019: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean org.osmdroid.views.overlay.MinimapOverlay.contains((r2 'this' I:org.osmdroid.views.overlay.MinimapOverlay A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
}

