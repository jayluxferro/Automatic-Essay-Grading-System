digraph "CFG fororg.osmdroid.views.overlay.LinearRing.computeDistances()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mDistancesPrecomputed boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: IPUT  \l  (r0 I:boolean)\l  (r10 I:org.osmdroid.views.overlay.LinearRing)\l org.osmdroid.views.overlay.LinearRing.mDistancesPrecomputed boolean \l0x0008: IGET  (r0 I:double[]) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mDistances double[] \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r0 I:double[]) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mDistances double[] \l0x000e: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l0x000f: IGET  (r1 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mOriginalPoints java.util.ArrayList \l0x0011: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IGET  (r0 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mOriginalPoints java.util.ArrayList \l0x0019: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x001d: NEW_ARRAY  (r0 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x001f: IPUT  \l  (r0 I:double[])\l  (r10 I:org.osmdroid.views.overlay.LinearRing)\l org.osmdroid.views.overlay.LinearRing.mDistances double[] \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: NEW_INSTANCE  (r1 I:org.osmdroid.util.GeoPoint) =  org.osmdroid.util.GeoPoint \l0x0024: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0026: INVOKE  \l  (r1 I:org.osmdroid.util.GeoPoint)\l  (r2 I:double)\l  (r2 I:double)\l org.osmdroid.util.GeoPoint.\<init\>(double, double):void type: DIRECT \l0x0029: IGET  (r4 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mOriginalPoints java.util.ArrayList \l0x002b: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0058 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0039: CHECK_CAST  (r5 I:org.osmdroid.util.GeoPoint) = (org.osmdroid.util.GeoPoint) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0042 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IGET  (r6 I:double[]) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mDistances double[] \l0x003f: APUT  \l  (r6 I:?[long, double][])\l  (r0 I:?[int, short, byte, char])\l  (r2 I:?[long, double])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: IGET  (r6 I:double[]) = (r10 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mDistances double[] \l0x0044: INVOKE  (r7 I:double) = \l  (r5 I:org.osmdroid.util.GeoPoint)\l  (r1 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.util.GeoPoint.distanceToAsDouble(org.osmdroid.api.IGeoPoint):double type: VIRTUAL \l0x0048: APUT  \l  (r6 I:?[long, double][])\l  (r0 I:?[int, short, byte, char])\l  (r7 I:?[long, double])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: INVOKE  (r6 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x004e: INVOKE  (r8 I:double) = (r5 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0052: INVOKE  \l  (r1 I:org.osmdroid.util.GeoPoint)\l  (r6 I:double)\l  (r8 I:double)\l org.osmdroid.util.GeoPoint.setCoords(double, double):void type: VIRTUAL \l0x0055: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.views.overlay.LinearRing.computeDistances((r10 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

