digraph "CFG fororg.osmdroid.views.overlay.LinearRing.getCenter(Lorg\/osmdroid\/util\/GeoPoint;)Lorg\/osmdroid\/util\/GeoPoint;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r28 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: NEW_INSTANCE  (r1 I:org.osmdroid.util.GeoPoint) =  org.osmdroid.util.GeoPoint \l0x0009: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x000b: INVOKE  \l  (r1 I:org.osmdroid.util.GeoPoint)\l  (r2 I:double)\l  (r2 I:double)\l org.osmdroid.util.GeoPoint.\<init\>(double, double):void type: DIRECT \l0x000e: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0010: NEW_INSTANCE  (r2 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0012: INVOKE  (r2 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0015: NEW_INSTANCE  (r3 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0017: INVOKE  (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x001a: INVOKE  (r4 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x001e: IGET  (r5 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mOriginalPoints java.util.ArrayList \l0x0020: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.ArrayList) java.util.ArrayList.iterator():java.util.Iterator type: VIRTUAL \l0x0024: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) \l0x0026: MOVE  (r8 I:?[long, double]) = (r6 I:?[long, double]) \l0x0027: MOVE  (r21 I:?[long, double]) = (r8 I:?[long, double]) \l0x0029: MOVE  (r23 I:?[long, double]) = (r21 I:?[long, double]) \l0x002b: MOVE  (r25 I:?[long, double]) = (r23 I:?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: INVOKE  (r10 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x008c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: INVOKE  (r10 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0037: CHECK_CAST  (r10 I:org.osmdroid.util.GeoPoint) = (org.osmdroid.util.GeoPoint) (r10 I:?[OBJECT, ARRAY]) \l0x0039: INVOKE  (r13 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x003d: INVOKE  (r15 I:double) = (r10 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0041: CONST  (r17 I:?[long, double]) = \l  (4877398396442247168(0x43b0000000000000, double:1.15292150460684698E18) ?[long, double])\l \l0x0043: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0045: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0046: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x0048: INVOKE  \l  (r12 I:org.osmdroid.util.TileSystem)\l  (r13 I:double)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:org.osmdroid.util.PointL)\l  (r20 I:boolean)\l org.osmdroid.util.TileSystem.getMercatorFromGeo(double, double, double, org.osmdroid.util.PointL, boolean):org.osmdroid.util.PointL type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0059 \l}"];
Node_9 [shape=record,label="{9\:\ 0x004d|0x004d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004e: IGET  (r8 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0050: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0052: MOVE  (r21 I:?[long, double]) = (r8 I:?[long, double]) \l0x0054: MOVE  (r23 I:?[long, double]) = (r12 I:?[long, double]) \l0x0056: MOVE  (r25 I:?[long, double]) = (r23 I:?[long, double]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0059|0x0059: CONST  (r12 I:?[long, double]) = \l  (4877398396442247168(0x43b0000000000000, double:1.15292150460684698E18) ?[long, double])\l \l0x005b: INVOKE  \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r2 I:org.osmdroid.util.PointL)\l  (r3 I:org.osmdroid.util.PointL)\l  (r12 I:double)\l org.osmdroid.views.overlay.LinearRing.setCloserPoint(org.osmdroid.util.PointL, org.osmdroid.util.PointL, double):void type: DIRECT \l0x005e: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0060: CMP_L  (r10 I:int) = (r8 I:long), (r12 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0062|0x0062: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0066 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0064|0x0064: IGET  (r8 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l}"];
Node_13 [shape=record,label="{13\:\ 0x0066|0x0066: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0068: CMP_L  (r10 I:int) = (r21 I:long), (r12 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006a|0x006a: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:16:0x0070 \l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|0x006c: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x006e: MOVE  (r21 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|0x0070: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0072: CMP_L  (r10 I:int) = (r23 I:long), (r12 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|0x0074: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:19:0x007a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0076|0x0076: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0078: MOVE  (r23 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x007a|0x007a: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x007c: CMP_L  (r10 I:int) = (r25 I:long), (r12 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x007e|0x007e: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:22:0x0084 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0080|0x0080: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0082: MOVE  (r25 I:?[long, double]) = (r12 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0084|0x0084: IGET  (r12 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0086: IGET  (r14 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0088: INVOKE  (r2 I:org.osmdroid.util.PointL), (r12 I:long), (r14 I:long) org.osmdroid.util.PointL.set(long, long):void type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|0x008c: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x008d: ARITH  (r8 I:long) = (r8 I:long) + (r21 I:long) \l0x008f: CONST  (r1 I:?[long, double]) = (2 ?[long, double]) \l0x0091: ARITH  (r8 I:long) = (r8 I:long) \/ (r1 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0092|0x0092: CONST  (r12 I:?[long, double]) = \l  (1152921504606846976(0x1000000000000000, double:1.2882297539194267E\-231) ?[long, double])\l \l0x0094: CMP_L  (r3 I:int) = (r8 I:long), (r6 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0096|0x0096: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:27:0x009a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0098|0x0098: ARITH  (r8 I:long) = (r8 I:long) + (r12 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|0x009a: CMP_L  (r3 I:int) = (r8 I:long), (r12 I:long) \l}"];
Node_28 [shape=record,label="{28\:\ 0x009c|0x009c: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:30:0x00a0 \l}"];
Node_29 [shape=record,label="{29\:\ 0x009e|0x009e: ARITH  (r8 I:long) = (r8 I:long) \- (r12 I:long) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00a0|0x00a0: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a1: ARITH  (r23 I:long) = (r23 I:long) + (r25 I:long) \l0x00a3: ARITH  (r23 I:long) = (r23 I:long) \/ (r1 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00a5|0x00a5: CMP_L  (r1 I:int) = (r23 I:long), (r6 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a7|0x00a7: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:34:0x00ac \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a9|0x00a9: ARITH  (r23 I:long) = (r23 I:long) + (r12 I:long) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00ac|0x00ac: CMP_L  (r1 I:int) = (r23 I:long), (r12 I:long) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ae|0x00ae: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:37:0x00b3 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00b0|0x00b0: ARITH  (r23 I:long) = (r23 I:long) \- (r12 I:long) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00b3|0x00b3: CONST  (r1 I:?[long, double]) = \l  (4877398396442247168(0x43b0000000000000, double:1.15292150460684698E18) ?[long, double])\l \l0x00b5: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b6: CONST  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b7: MOVE  (r5 I:?[long, double]) = (r8 I:?[long, double]) \l0x00b8: MOVE  (r7 I:?[long, double]) = (r23 I:?[long, double]) \l0x00ba: MOVE  (r9 I:?[long, double]) = (r1 I:?[long, double]) \l0x00bb: INVOKE  (r1 I:org.osmdroid.util.GeoPoint) = \l  (r4 I:org.osmdroid.util.TileSystem)\l  (r5 I:long)\l  (r7 I:long)\l  (r9 I:double)\l  (r11 I:org.osmdroid.util.GeoPoint)\l  (r12 I:boolean)\l  (r13 I:boolean)\l org.osmdroid.util.TileSystem.getGeoFromMercator(long, long, double, org.osmdroid.util.GeoPoint, boolean, boolean):org.osmdroid.util.GeoPoint type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x00bf|0x00bf: RETURN  (r1 I:org.osmdroid.util.GeoPoint) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.util.GeoPoint org.osmdroid.views.overlay.LinearRing.getCenter((r27 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r28 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_22;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_5;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_24;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_27;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_31;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_34;
Node_37 -> Node_38;
}

