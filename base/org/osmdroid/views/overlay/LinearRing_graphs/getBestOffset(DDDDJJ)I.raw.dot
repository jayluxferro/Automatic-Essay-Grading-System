digraph "CFG fororg.osmdroid.views.overlay.LinearRing.getBestOffset(DDDDJJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: CAST  (r3 I:long) = (long) (r2 I:int) \l0x0004: ARITH  (r5 I:long) = (r3 I:long) * (r24 I:long) \l0x0006: CAST  (r5 I:double) = (double) (r5 I:long) \l0x0007: ARITH  (r7 I:double) = (r16 I:double) + (r5 I:double) \l0x0009: ARITH  (r3 I:long) = (r3 I:long) * (r26 I:long) \l0x000b: CAST  (r3 I:double) = (double) (r3 I:long) \l0x000c: ARITH  (r9 I:double) = (r18 I:double) + (r3 I:double) \l0x000e: MOVE  (r11 I:?[long, double]) = (r20 I:?[long, double]) \l0x0010: MOVE  (r13 I:?[long, double]) = (r22 I:?[long, double]) \l0x0012: INVOKE  (r3 I:double) = \l  (r7 I:double)\l  (r9 I:double)\l  (r11 I:double)\l  (r13 I:double)\l org.osmdroid.util.Distance.getSquaredDistanceToPoint(double, double, double, double):double type: STATIC \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: CMP_L  (r0 I:int) = (r0 I:double), (r3 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x001d \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: RETURN  (r2 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0022: MOVE  (r0 I:?[long, double]) = (r3 I:?[long, double]) \l}"];
MethodNode[shape=record,label="{private int org.osmdroid.views.overlay.LinearRing.getBestOffset((r15 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r16 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_1;
}

