digraph "CFG fororg.osmdroid.views.overlay.LinearRing.getCloseTo(Lorg\/osmdroid\/util\/GeoPoint;DLorg\/osmdroid\/views\/Projection;Z)Lorg\/osmdroid\/util\/GeoPoint;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r48 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r52 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  \l  (r6 I:org.osmdroid.views.overlay.LinearRing)\l  (r7 I:org.osmdroid.views.Projection)\l org.osmdroid.views.overlay.LinearRing.computeProjected(org.osmdroid.views.Projection):void type: DIRECT \l0x0007: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r49 I:?[OBJECT, ARRAY]) \l0x000a: INVOKE  (r9 I:android.graphics.Point) = \l  (r7 I:org.osmdroid.views.Projection)\l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r8 I:android.graphics.Point)\l org.osmdroid.views.Projection.toPixels(org.osmdroid.api.IGeoPoint, android.graphics.Point):android.graphics.Point type: VIRTUAL \l0x000e: NEW_INSTANCE  (r2 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0010: INVOKE  (r2 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0013: INVOKE  \l  (r6 I:org.osmdroid.views.overlay.LinearRing)\l  (r7 I:org.osmdroid.views.Projection)\l  (r2 I:org.osmdroid.util.PointL)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(org.osmdroid.views.Projection, org.osmdroid.util.PointL):void type: DIRECT \l0x0016: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0017: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r48 I:?[OBJECT, ARRAY]) \l0x001a: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r52 I:?[OBJECT, ARRAY]) \l0x001c: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r53 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: INVOKE  \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r1 I:org.osmdroid.views.Projection)\l  (r2 I:org.osmdroid.util.PointL)\l  (r3 I:boolean)\l  (r4 I:boolean)\l  (r5 I:org.osmdroid.util.SegmentClipper)\l org.osmdroid.views.overlay.LinearRing.clipAndStore(org.osmdroid.views.Projection, org.osmdroid.util.PointL, boolean, boolean, org.osmdroid.util.SegmentClipper):void type: DIRECT \l0x0021: INVOKE  (r0 I:double) = (r52 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getZoomLevel():double type: VIRTUAL \l0x0025: INVOKE  (r0 I:double) = (r0 I:double) org.osmdroid.util.TileSystem.MapSize(double):double type: STATIC \l0x0029: INVOKE  (r2 I:android.graphics.Rect) = (r52 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getIntrinsicScreenRect():android.graphics.Rect type: VIRTUAL \l0x002d: INVOKE  (r3 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.width():int type: VIRTUAL \l0x0031: INVOKE  (r2 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.height():int type: VIRTUAL \l0x0035: IGET  (r4 I:int) = (r9 I:android.graphics.Point) android.graphics.Point.x int \l0x0037: CAST  (r4 I:double) = (double) (r4 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0038|0x0038: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0039: ARITH  (r10 I:double) = (r4 I:double) \- (r0 I:double) \l0x003b: CONST  (r12 I:?[long, double]) = (0 ?[long, double]) \l0x003d: CMP_L  (r14 I:int) = (r10 I:double), (r12 I:double) \l}"];
Node_2 [shape=record,label="{2\:\ 0x003f|0x003f: IF  (r14 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:4:0x0043 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0041|0x0041: MOVE  (r4 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0043|0x0043: IGET  (r9 I:int) = (r9 I:android.graphics.Point) android.graphics.Point.y int \l0x0045: CAST  (r9 I:double) = (double) (r9 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0046|0x0046: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: ARITH  (r14 I:double) = (r9 I:double) \- (r0 I:double) \l0x0049: CMP_L  (r11 I:int) = (r14 I:double), (r12 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x004b|0x004b: IF  (r11 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x004f \l}"];
Node_7 [shape=record,label="{7\:\ 0x004d|0x004d: MOVE  (r9 I:?[long, double]) = (r14 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: ARITH  (r11 I:double) = (r50 I:double) * (r50 I:double) \l0x0051: NEW_INSTANCE  (r13 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0053: INVOKE  (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0056: NEW_INSTANCE  (r14 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0058: INVOKE  (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x005b: IGET  (r15 I:org.osmdroid.util.ListPointL) = (r6 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mPointsForMilestones org.osmdroid.util.ListPointL \l0x005d: INVOKE  (r15 I:java.util.Iterator) = (r15 I:org.osmdroid.util.ListPointL) org.osmdroid.util.ListPointL.iterator():java.util.Iterator type: VIRTUAL \l0x0061: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0063: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0065: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0067: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0069|0x0069: INVOKE  (r20 I:boolean) = (r15 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x006d|0x006d: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x016e \l}"];
Node_11 [shape=record,label="{11\:\ 0x006f|0x006f: INVOKE  (r20 I:java.lang.Object) = (r15 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0073: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0075: CHECK_CAST  (r8 I:org.osmdroid.util.PointL) = (org.osmdroid.util.PointL) (r8 I:?[OBJECT, ARRAY]) \l0x0077: INVOKE  \l  (r14 I:org.osmdroid.util.PointL)\l  (r8 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x007a|0x007a: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x008e \l}"];
Node_13 [shape=record,label="{13\:\ 0x007c|0x007c: MOVE  (r44 I:?[long, double]) = (r0 I:?[long, double]) \l0x007e: MOVE  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0080: MOVE  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0082: MOVE  (r38 I:?[long, double]) = (r4 I:?[long, double]) \l0x0084: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0085: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0086: MOVE  (r40 I:?[long, double]) = (r9 I:?[long, double]) \l0x0088: MOVE  (r46 I:?[long, double]) = (r11 I:?[long, double]) \l0x008a: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x008e|0x008e: MOVE  (r36 I:?[long, double]) = (r4 I:?[long, double]) \l0x0090: MOVE  (r38 I:?[long, double]) = (r36 I:?[long, double]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0092|0x0092: CAST  (r4 I:double) = (double) (r3 I:int) \l0x0093: CMP_G  (r4 I:int) = (r36 I:double), (r4 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0095|0x0095: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:26:0x014c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0097|0x0097: MOVE  (r4 I:?[long, double]) = (r9 I:?[long, double]) \l0x0098: MOVE  (r40 I:?[long, double]) = (r4 I:?[long, double]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x009a|0x009a: CAST  (r8 I:double) = (double) (r2 I:int) \l0x009b: CMP_G  (r8 I:int) = (r4 I:double), (r8 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x009d|0x009d: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:25:0x0135 \l}"];
Node_20 [shape=record,label="{20\:\ 0x009f|0x009f: IGET  (r8 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x00a1: CAST  (r8 I:double) = (double) (r8 I:long) \l0x00a2: MOVE  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a4: MOVE  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a6: IGET  (r2 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x00a8: CAST  (r2 I:double) = (double) (r2 I:long) \l0x00a9: MOVE  (r44 I:?[long, double]) = (r0 I:?[long, double]) \l0x00ab: IGET  (r0 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x00ad: CAST  (r0 I:double) = (double) (r0 I:long) \l0x00ae: IGET  (r6 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x00b0: CAST  (r6 I:double) = (double) (r6 I:long) \l0x00b1: MOVE  (r22 I:?[long, double]) = (r36 I:?[long, double]) \l0x00b3: MOVE  (r24 I:?[long, double]) = (r4 I:?[long, double]) \l0x00b5: MOVE  (r26 I:?[long, double]) = (r8 I:?[long, double]) \l0x00b7: MOVE  (r28 I:?[long, double]) = (r2 I:?[long, double]) \l0x00b9: MOVE  (r30 I:?[long, double]) = (r0 I:?[long, double]) \l0x00bb: MOVE  (r32 I:?[long, double]) = (r6 I:?[long, double]) \l0x00bd: INVOKE  (r0 I:double) = \l  (r22 I:double)\l  (r24 I:double)\l  (r26 I:double)\l  (r28 I:double)\l  (r30 I:double)\l  (r32 I:double)\l org.osmdroid.util.Distance.getProjectionFactorToSegment(double, double, double, double, double, double):double type: STATIC \l0x00c1: IGET  (r2 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x00c3: CAST  (r2 I:double) = (double) (r2 I:long) \l0x00c4: IGET  (r6 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x00c6: CAST  (r6 I:double) = (double) (r6 I:long) \l0x00c7: IGET  (r8 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x00c9: CAST  (r8 I:double) = (double) (r8 I:long) \l0x00ca: MOVE  (r46 I:?[long, double]) = (r11 I:?[long, double]) \l0x00cc: IGET  (r10 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x00ce: CAST  (r10 I:double) = (double) (r10 I:long) \l0x00cf: MOVE  (r26 I:?[long, double]) = (r2 I:?[long, double]) \l0x00d1: MOVE  (r28 I:?[long, double]) = (r6 I:?[long, double]) \l0x00d3: MOVE  (r30 I:?[long, double]) = (r8 I:?[long, double]) \l0x00d5: MOVE  (r32 I:?[long, double]) = (r10 I:?[long, double]) \l0x00d7: MOVE  (r34 I:?[long, double]) = (r0 I:?[long, double]) \l0x00d9: INVOKE  (r2 I:double) = \l  (r22 I:double)\l  (r24 I:double)\l  (r26 I:double)\l  (r28 I:double)\l  (r30 I:double)\l  (r32 I:double)\l  (r34 I:double)\l org.osmdroid.util.Distance.getSquaredDistanceToProjection(double, double, double, double, double, double, double):double type: STATIC \l0x00dd: CMP_L  (r2 I:int) = (r46 I:double), (r2 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00df|0x00df: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:24:0x0122 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00e1|0x00e1: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r48 I:?[OBJECT, ARRAY]) \l0x00e3: IGET  (r3 I:long[]) = (r2 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x00e5: ARITH  (r4 I:int) = (r19 I:int) + (\-1 int) \l0x00e7: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l0x00e9: AGET  (r5 I:?[long, double]) = (r3 I:?[long, double][]), (r4 I:?[int, short, byte, char]) \l0x00eb: IGET  (r3 I:long[]) = (r2 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x00ed: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x00ef: AGET  (r7 I:?[long, double]) = (r3 I:?[long, double][]), (r4 I:?[int, short, byte, char]) \l0x00f1: IGET  (r3 I:long[]) = (r2 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x00f3: ARITH  (r19 I:int) = (r19 I:int) * (2 int) \l0x00f5: AGET  (r9 I:?[long, double]) = (r3 I:?[long, double][]), (r19 I:?[int, short, byte, char]) \l0x00f7: IGET  (r3 I:long[]) = (r2 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x00f9: ARITH  (r19 I:int) = (r19 I:int) + (1 int) \l0x00fb: AGET  (r11 I:?[long, double]) = (r3 I:?[long, double][]), (r19 I:?[int, short, byte, char]) \l0x00fd: CAST  (r3 I:double) = (double) (r5 I:long) \l0x00fe: ARITH  (r9 I:long) = (r9 I:long) \- (r5 I:long) \l0x00ff: CAST  (r5 I:double) = (double) (r9 I:long) \l0x0100: ARITH  (r5 I:double) = (r5 I:double) * (r0 I:double) \l0x0102: ARITH  (r3 I:double) = (r3 I:double) + (r5 I:double) \l0x0103: CAST  (r14 I:long) = (long) (r3 I:double) \l0x0104: CAST  (r3 I:double) = (double) (r7 I:long) \l0x0105: ARITH  (r11 I:long) = (r11 I:long) \- (r7 I:long) \l0x0106: CAST  (r5 I:double) = (double) (r11 I:long) \l0x0107: ARITH  (r5 I:double) = (r5 I:double) * (r0 I:double) \l0x0109: ARITH  (r3 I:double) = (r3 I:double) + (r5 I:double) \l0x010a: CAST  (r0 I:long) = (long) (r3 I:double) \l0x010b: INVOKE  (r13 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x010f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r52 I:?[OBJECT, ARRAY]) \l0x0111: IGET  (r3 I:double) = (r3 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.mProjectedMapSize double \l0x0113: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0115: CONST  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0117: CONST  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0119: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x011b: MOVE  (r18 I:?[long, double]) = (r3 I:?[long, double]) \l0x011d: INVOKE  (r0 I:org.osmdroid.util.GeoPoint) = \l  (r13 I:org.osmdroid.util.TileSystem)\l  (r14 I:long)\l  (r16 I:long)\l  (r18 I:double)\l  (r20 I:org.osmdroid.util.GeoPoint)\l  (r21 I:boolean)\l  (r22 I:boolean)\l org.osmdroid.util.TileSystem.getGeoFromMercator(long, long, double, org.osmdroid.util.GeoPoint, boolean, boolean):org.osmdroid.util.GeoPoint type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0121|0x0121: RETURN  (r0 I:org.osmdroid.util.GeoPoint) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0122|0x0122: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r48 I:?[OBJECT, ARRAY]) \l0x0124: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r52 I:?[OBJECT, ARRAY]) \l0x0126: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0127: ARITH  (r4 I:double) = (r4 I:double) + (r44 I:double) \l0x0129: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x012a: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x012b: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x012d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x012f: MOVE  (r0 I:?[long, double]) = (r44 I:?[long, double]) \l0x0131: MOVE  (r11 I:?[long, double]) = (r46 I:?[long, double]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0135|0x0135: MOVE  (r44 I:?[long, double]) = (r0 I:?[long, double]) \l0x0137: MOVE  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0139: MOVE  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x013b: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x013c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x013d: MOVE  (r46 I:?[long, double]) = (r11 I:?[long, double]) \l0x013f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0140: ARITH  (r36 I:double) = (r36 I:double) + (r44 I:double) \l0x0142: MOVE  (r9 I:?[long, double]) = (r40 I:?[long, double]) \l0x0144: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0146: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0148: MOVE  (r0 I:?[long, double]) = (r44 I:?[long, double]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x014c|0x014c: MOVE  (r44 I:?[long, double]) = (r0 I:?[long, double]) \l0x014e: MOVE  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0150: MOVE  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0152: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0153: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0154: MOVE  (r40 I:?[long, double]) = (r9 I:?[long, double]) \l0x0156: MOVE  (r46 I:?[long, double]) = (r11 I:?[long, double]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0158|0x0158: INVOKE  \l  (r13 I:org.osmdroid.util.PointL)\l  (r14 I:org.osmdroid.util.PointL)\l org.osmdroid.util.PointL.set(org.osmdroid.util.PointL):void type: VIRTUAL \l0x015b: ARITH  (r19 I:int) = (r19 I:int) + (1 int) \l0x015d: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x015e: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x015f: MOVE  (r4 I:?[long, double]) = (r38 I:?[long, double]) \l0x0161: MOVE  (r9 I:?[long, double]) = (r40 I:?[long, double]) \l0x0163: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r42 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0165: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r43 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0167: MOVE  (r0 I:?[long, double]) = (r44 I:?[long, double]) \l0x0169: MOVE  (r11 I:?[long, double]) = (r46 I:?[long, double]) \l0x016b: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x016e|0x016e: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x016f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0170|0x0170: RETURN  (r0 I:org.osmdroid.util.GeoPoint) \l}"];
MethodNode[shape=record,label="{org.osmdroid.util.GeoPoint org.osmdroid.views.overlay.LinearRing.getCloseTo((r48 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r49 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r50 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r52 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r53 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_28;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_27;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_24 -> Node_18;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_9;
Node_28 -> Node_29;
}

