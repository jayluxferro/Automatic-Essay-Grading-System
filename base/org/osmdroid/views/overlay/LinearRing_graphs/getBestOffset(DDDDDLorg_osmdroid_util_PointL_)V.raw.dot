digraph "CFG fororg.osmdroid.views.overlay.LinearRing.getBestOffset(DDDDDLorg\/osmdroid\/util\/PointL;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x0004: INVOKE  (r11 I:long) = (r30 I:double) java.lang.Math.round(double):long type: STATIC \l0x0008: IGET  (r0 I:boolean) = (r13 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.isVerticalRepeating boolean \l0x000a: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: MOVE  (r13 I:?[long, double]) = (r11 I:?[long, double]) \l0x000e: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: CONST  (r9 I:?[long, double]) = (0 ?[long, double]) \l0x0013: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0015: MOVE  (r1 I:?[long, double]) = (r22 I:?[long, double]) \l0x0017: MOVE  (r3 I:?[long, double]) = (r24 I:?[long, double]) \l0x0019: MOVE  (r5 I:?[long, double]) = (r26 I:?[long, double]) \l0x001b: MOVE  (r7 I:?[long, double]) = (r28 I:?[long, double]) \l0x001d: MOVE  (r16 I:?[long, double]) = (r11 I:?[long, double]) \l0x001f: INVOKE  (r18 I:int) = \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:long)\l  (r11 I:long)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(double, double, double, double, long, long):int type: DIRECT \l0x0023: NEG  (r7 I:long) = (r11 I:long) \l0x0024: MOVE  (r16 I:?[long, double]) = (r7 I:?[long, double]) \l0x0026: MOVE  (r7 I:?[long, double]) = (r28 I:?[long, double]) \l0x0028: MOVE  (r13 I:?[long, double]) = (r11 I:?[long, double]) \l0x0029: MOVE  (r11 I:?[long, double]) = (r16 I:?[long, double]) \l0x002b: INVOKE  (r0 I:int) = \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:long)\l  (r11 I:long)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(double, double, double, double, long, long):int type: DIRECT \l0x002f: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0030: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0035 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: NEG  (r0 I:int) = (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0037: ARITH  (r11 I:long) = (r13 I:long) * (r0 I:long) \l0x0039: MOVE  (r9 I:?[long, double]) = (r13 I:?[long, double]) \l0x003a: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x003c: IPUT  (r11 I:long), (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x003e: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0040: IGET  (r0 I:boolean) = (r14 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.isHorizontalRepeating boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0048 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: MOVE  (r18 I:?[long, double]) = (r9 I:?[long, double]) \l0x0046: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0048|0x0048: CONST  (r11 I:?[long, double]) = (0 ?[long, double]) \l0x004a: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x004c: MOVE  (r1 I:?[long, double]) = (r22 I:?[long, double]) \l0x004e: MOVE  (r3 I:?[long, double]) = (r24 I:?[long, double]) \l0x0050: MOVE  (r5 I:?[long, double]) = (r26 I:?[long, double]) \l0x0052: MOVE  (r7 I:?[long, double]) = (r28 I:?[long, double]) \l0x0054: MOVE  (r19 I:?[long, double]) = (r9 I:?[long, double]) \l0x0056: INVOKE  (r15 I:int) = \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:long)\l  (r11 I:long)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(double, double, double, double, long, long):int type: DIRECT \l0x005a: MOVE  (r11 I:?[long, double]) = (r19 I:?[long, double]) \l0x005c: NEG  (r9 I:long) = (r11 I:long) \l0x005d: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) \l0x005f: MOVE  (r18 I:?[long, double]) = (r11 I:?[long, double]) \l0x0061: MOVE  (r11 I:?[long, double]) = (r16 I:?[long, double]) \l0x0063: INVOKE  (r0 I:int) = \l  (r0 I:org.osmdroid.views.overlay.LinearRing)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:long)\l  (r11 I:long)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(double, double, double, double, long, long):int type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x0067|0x0067: IF  (r15 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:13:0x006a \l}"];
Node_13 [shape=record,label="{13\:\ 0x006a|0x006a: NEG  (r15 I:int) = (r0 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: CAST  (r0 I:long) = (long) (r15 I:int) \l0x006c: ARITH  (r11 I:long) = (r18 I:long) * (r0 I:long) \l0x006e: IPUT  (r11 I:long), (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l}"];
Node_15 [shape=record,label="{15\:\ 0x0070|0x0070: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.views.overlay.LinearRing.getBestOffset((r21 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r22 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
}

