digraph "CFG fororg.osmdroid.views.overlay.LinearRing.buildLinePortion(Lorg\/osmdroid\/views\/Projection;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) = (r8 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mOriginalPoints java.util.ArrayList \l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: INVOKE  \l  (r8 I:org.osmdroid.views.overlay.LinearRing)\l  (r9 I:org.osmdroid.views.Projection)\l org.osmdroid.views.overlay.LinearRing.computeProjected(org.osmdroid.views.Projection):void type: DIRECT \l0x000d: INVOKE  (r8 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.computeDistances():void type: DIRECT \l0x0010: NEW_INSTANCE  (r4 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0012: INVOKE  (r4 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0015: INVOKE  \l  (r8 I:org.osmdroid.views.overlay.LinearRing)\l  (r9 I:org.osmdroid.views.Projection)\l  (r4 I:org.osmdroid.util.PointL)\l org.osmdroid.views.overlay.LinearRing.getBestOffset(org.osmdroid.views.Projection, org.osmdroid.util.PointL):void type: DIRECT \l0x0018: IGET  (r0 I:org.osmdroid.util.SegmentClipper) = (r8 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mSegmentClipper org.osmdroid.util.SegmentClipper \l0x001a: INVOKE  (r0 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.init():void type: VIRTUAL \l0x001d: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001e: IGET  (r7 I:org.osmdroid.util.SegmentClipper) = (r8 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mSegmentClipper org.osmdroid.util.SegmentClipper \l0x0020: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l0x0021: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0022: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  \l  (r2 I:org.osmdroid.views.overlay.LinearRing)\l  (r3 I:org.osmdroid.views.Projection)\l  (r4 I:org.osmdroid.util.PointL)\l  (r5 I:boolean)\l  (r6 I:boolean)\l  (r7 I:org.osmdroid.util.SegmentClipper)\l org.osmdroid.views.overlay.LinearRing.clipAndStore(org.osmdroid.views.Projection, org.osmdroid.util.PointL, boolean, boolean, org.osmdroid.util.SegmentClipper):void type: DIRECT \l0x0026: IGET  (r9 I:org.osmdroid.util.SegmentClipper) = (r8 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mSegmentClipper org.osmdroid.util.SegmentClipper \l0x0028: INVOKE  (r9 I:org.osmdroid.util.SegmentClipper) org.osmdroid.util.SegmentClipper.end():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002b|0x002b: RETURN   \l}"];
MethodNode[shape=record,label="{void org.osmdroid.views.overlay.LinearRing.buildLinePortion((r8 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r9 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

