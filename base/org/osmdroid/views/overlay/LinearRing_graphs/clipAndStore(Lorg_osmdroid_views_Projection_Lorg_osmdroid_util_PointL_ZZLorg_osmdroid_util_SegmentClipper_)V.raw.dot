digraph "CFG fororg.osmdroid.views.overlay.LinearRing.clipAndStore(Lorg\/osmdroid\/views\/Projection;Lorg\/osmdroid\/util\/PointL;ZZLorg\/osmdroid\/util\/SegmentClipper;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r4 I:org.osmdroid.util.ListPointL) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mPointsForMilestones org.osmdroid.util.ListPointL \l0x0008: INVOKE  (r4 I:org.osmdroid.util.ListPointL) org.osmdroid.util.ListPointL.clear():void type: VIRTUAL \l0x000b: INVOKE  (r11 I:double) = (r17 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getProjectedPowerDifference():double type: VIRTUAL \l0x000f: NEW_INSTANCE  (r4 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0011: INVOKE  (r4 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0014: NEW_INSTANCE  (r13 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0016: INVOKE  (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x0019: NEW_INSTANCE  (r14 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x001b: INVOKE  (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.\<init\>():void type: DIRECT \l0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001f: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0020|0x0020: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x0022: ARRAY_LENGTH  (r5 I:int) = (r5 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0023|0x0023: IF  (r15 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x0059 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x0027: AGET  (r6 I:?[long, double]) = (r5 I:?[long, double][]), (r15 I:?[int, short, byte, char]) \l0x0029: IGET  (r5 I:long[]) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mProjectedPoints long[] \l0x002b: ARITH  (r8 I:int) = (r15 I:int) + (1 int) \l0x002d: AGET  (r8 I:?[long, double]) = (r5 I:?[long, double][]), (r8 I:?[int, short, byte, char]) \l0x002f: INVOKE  (r4 I:org.osmdroid.util.PointL), (r6 I:long), (r8 I:long) org.osmdroid.util.PointL.set(long, long):void type: VIRTUAL \l0x0032: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0033: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0035: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0036: MOVE  (r7 I:?[long, double]) = (r11 I:?[long, double]) \l0x0037: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0038: INVOKE  \l  (r5 I:org.osmdroid.views.Projection)\l  (r6 I:org.osmdroid.util.PointL)\l  (r7 I:double)\l  (r9 I:boolean)\l  (r10 I:org.osmdroid.util.PointL)\l org.osmdroid.views.Projection.getLongPixelsFromProjected(org.osmdroid.util.PointL, double, boolean, org.osmdroid.util.PointL):org.osmdroid.util.PointL type: VIRTUAL \l0x003b: IGET  (r5 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x003d: IGET  (r7 I:long) = (r1 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x003f: ARITH  (r5 I:long) = (r5 I:long) + (r7 I:long) \l0x0040: IGET  (r7 I:long) = (r13 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0042: IGET  (r9 I:long) = (r1 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0044: ARITH  (r7 I:long) = (r7 I:long) + (r9 I:long) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0045|0x0045: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x004c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0047|0x0047: IGET  (r9 I:org.osmdroid.util.ListPointL) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mPointsForMilestones org.osmdroid.util.ListPointL \l0x0049: INVOKE  \l  (r9 I:org.osmdroid.util.ListPointL)\l  (r5 I:long)\l  (r7 I:long)\l org.osmdroid.util.ListPointL.add(long, long):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x004c|0x004c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0051 \l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|0x004e: INVOKE  \l  (r3 I:org.osmdroid.util.SegmentClipper)\l  (r5 I:long)\l  (r7 I:long)\l org.osmdroid.util.SegmentClipper.add(long, long):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0051|0x0051: IF  (r15 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0056 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0053|0x0053: INVOKE  (r14 I:org.osmdroid.util.PointL), (r5 I:long), (r7 I:long) org.osmdroid.util.PointL.set(long, long):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: ARITH  (r15 I:int) = (r15 I:int) + (2 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0059|0x0059: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006f \l}"];
Node_12 [shape=record,label="{12\:\ 0x005b|0x005b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0064 \l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|0x005d: IGET  (r4 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x005f: IGET  (r6 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0061: INVOKE  \l  (r3 I:org.osmdroid.util.SegmentClipper)\l  (r4 I:long)\l  (r6 I:long)\l org.osmdroid.util.SegmentClipper.add(long, long):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: IF  (r20 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0066|0x0066: IGET  (r1 I:org.osmdroid.util.ListPointL) = (r0 I:org.osmdroid.views.overlay.LinearRing) org.osmdroid.views.overlay.LinearRing.mPointsForMilestones org.osmdroid.util.ListPointL \l0x0068: IGET  (r2 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x006a: IGET  (r4 I:long) = (r14 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x006c: INVOKE  \l  (r1 I:org.osmdroid.util.ListPointL)\l  (r2 I:long)\l  (r4 I:long)\l org.osmdroid.util.ListPointL.add(long, long):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x006f|0x006f: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.osmdroid.views.overlay.LinearRing.clipAndStore((r16 'this' I:org.osmdroid.views.overlay.LinearRing A[IMMUTABLE_TYPE, THIS]), (r17 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:org.osmdroid.util.PointL A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:org.osmdroid.util.SegmentClipper A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
}

