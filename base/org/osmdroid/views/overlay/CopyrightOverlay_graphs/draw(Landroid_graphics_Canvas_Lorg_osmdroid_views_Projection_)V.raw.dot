digraph "CFG fororg.osmdroid.views.overlay.CopyrightOverlay.draw(Landroid\/graphics\/Canvas;Lorg\/osmdroid\/views\/Projection;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.String) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.mCopyrightNotice java.lang.String \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0051 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.String) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.mCopyrightNotice java.lang.String \l0x0006: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:int) = (r6 I:android.graphics.Canvas) android.graphics.Canvas.getWidth():int type: VIRTUAL \l0x0011: INVOKE  (r1 I:int) = (r6 I:android.graphics.Canvas) android.graphics.Canvas.getHeight():int type: VIRTUAL \l0x0015: IGET  (r2 I:boolean) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.alignRight boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|0x0019: IGET  (r2 I:int) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.xOffset int \l0x001b: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x001c: CAST  (r0 I:float) = (float) (r0 I:int) \l0x001d: IGET  (r2 I:android.graphics.Paint) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.paint android.graphics.Paint \l0x001f: SGET  (r3 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.RIGHT android.graphics.Paint$Align \l0x0021: INVOKE  \l  (r2 I:android.graphics.Paint)\l  (r3 I:android.graphics.Paint$Align)\l android.graphics.Paint.setTextAlign(android.graphics.Paint$Align):void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IGET  (r0 I:int) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.xOffset int \l0x0027: CAST  (r0 I:float) = (float) (r0 I:int) \l0x0028: IGET  (r2 I:android.graphics.Paint) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.paint android.graphics.Paint \l0x002a: SGET  (r3 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.LEFT android.graphics.Paint$Align \l0x002c: INVOKE  \l  (r2 I:android.graphics.Paint)\l  (r3 I:android.graphics.Paint$Align)\l android.graphics.Paint.setTextAlign(android.graphics.Paint$Align):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IGET  (r2 I:boolean) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.alignBottom boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|0x0033: IGET  (r2 I:int) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.yOffset int \l0x0035: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0036: CAST  (r1 I:float) = (float) (r1 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IGET  (r1 I:android.graphics.Paint) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.paint android.graphics.Paint \l0x003a: INVOKE  (r1 I:float) = (r1 I:android.graphics.Paint) android.graphics.Paint.getTextSize():float type: VIRTUAL \l0x003e: IGET  (r2 I:int) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.yOffset int \l0x0040: CAST  (r2 I:float) = (float) (r2 I:int) \l0x0041: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: INVOKE  \l  (r7 I:org.osmdroid.views.Projection)\l  (r6 I:android.graphics.Canvas)\l  (r2 I:boolean)\l  (r2 I:boolean)\l org.osmdroid.views.Projection.save(android.graphics.Canvas, boolean, boolean):void type: VIRTUAL \l0x0046: IGET  (r3 I:java.lang.String) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.mCopyrightNotice java.lang.String \l0x0048: IGET  (r4 I:android.graphics.Paint) = (r5 I:org.osmdroid.views.overlay.CopyrightOverlay) org.osmdroid.views.overlay.CopyrightOverlay.paint android.graphics.Paint \l0x004a: INVOKE  \l  (r6 I:android.graphics.Canvas)\l  (r3 I:java.lang.String)\l  (r0 I:float)\l  (r1 I:float)\l  (r4 I:android.graphics.Paint)\l android.graphics.Canvas.drawText(java.lang.String, float, float, android.graphics.Paint):void type: VIRTUAL \l0x004d: INVOKE  \l  (r7 I:org.osmdroid.views.Projection)\l  (r6 I:android.graphics.Canvas)\l  (r2 I:boolean)\l org.osmdroid.views.Projection.restore(android.graphics.Canvas, boolean):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.overlay.CopyrightOverlay.draw((r5 'this' I:org.osmdroid.views.overlay.CopyrightOverlay A[IMMUTABLE_TYPE, THIS]), (r6 I:android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

