digraph "CFG fororg.osmdroid.views.overlay.Polygon.pointsAsCircle(Lorg\/osmdroid\/util\/GeoPoint;D)Ljava\/util\/ArrayList;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (60 ?[int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (360(0x168, float:5.04E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:4:0x0017 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: CAST  (r2 I:double) = (double) (r1 I:int) \l0x000d: INVOKE  (r2 I:org.osmdroid.util.GeoPoint) = \l  (r4 I:org.osmdroid.util.GeoPoint)\l  (r5 I:double)\l  (r2 I:double)\l org.osmdroid.util.GeoPoint.destinationPoint(double, double):org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0011: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object) java.util.ArrayList.add(java.lang.Object):boolean type: VIRTUAL \l0x0014: ARITH  (r1 I:int) = (r1 I:int) + (6 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: RETURN  (r0 I:java.util.ArrayList\<org.osmdroid.util.GeoPoint\>) \l}"];
MethodNode[shape=record,label="{public static java.util.ArrayList\<org.osmdroid.util.GeoPoint\> org.osmdroid.views.overlay.Polygon.pointsAsCircle((r4 I:org.osmdroid.util.GeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/util\/GeoPoint;, D), Ljava\/util\/ArrayList\<, Lorg\/osmdroid\/util\/GeoPoint;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
}

