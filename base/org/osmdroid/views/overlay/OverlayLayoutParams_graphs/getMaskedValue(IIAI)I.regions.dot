digraph "CFG fororg.osmdroid.views.overlay.OverlayLayoutParams.getMaskedValue(II[I)I" {
subgraph cluster_Region_221748923 {
label = "R(3:0|(2:2|(2:(1:4)|(1:5)))|6)";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = r6.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1434709783 {
label = "LOOP:0: (2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:5:0x000b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0002\-\>B:5:0x000b\l|if (r1 \< r0) goto L_0x0004\l}"];
subgraph cluster_Region_1853186812 {
label = "R(2:2|(2:(1:4)|(1:5)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r2 = r6[r1]\l}"];
subgraph cluster_Region_270800345 {
label = "R(2:(1:4)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1465285862 {
label = "IF [B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if ((r4 & r2) == r2) goto L_0x000a\l}"];
subgraph cluster_Region_821754431 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1342371557 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|LOOP_END\lLOOP:0: B:1:0x0002\-\>B:5:0x000b\l|r1++\l}"];
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|return r5\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ 0x000e|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static int org.osmdroid.views.overlay.OverlayLayoutParams.getMaskedValue((r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_1;
Node_7 -> Node_6;
Node_8 -> Node_4;
}

