digraph "CFG fororg.osmdroid.views.overlay.milestones.MilestoneLister.getOrientation(JJJJ)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if ((r1 \> r5 ? 1 : (r1 == r5 ? 0 : \-1)) != 0) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|int r1 = (r3 \> r7 ? 1 : (r3 == r7 ? 0 : \-1))\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r1 != 0) goto L_0x000b\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|return 0.0d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r1 \<= 0) goto L_0x0013\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|RETURN\l|return \-90.0d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\l|return 90.0d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|double r3 = ((double) (r7 \- r3)) \/ ((double) (r5 \- r1))\lr7 = 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|if ((r5 \> r1 ? 1 : (r5 == r1 ? 0 : \-1)) \>= 0) goto L_0x0027\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|r1 = true\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|r1 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v3 boolean), (r1v4 boolean) binds: [B:11:0x0027, B:10:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|double r2 = java.lang.Math.atan(r3) * 57.29577951308232d\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|if (r1 == false) goto L_0x0037\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|r7 = 180\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|PHI: r7 \l  PHI: (r7v5 int) = (r7v4 int), (r7v6 int) binds: [B:13:0x0033, B:14:0x0035] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|RETURN\l|return r2 + ((double) r7)\l}"];
MethodNode[shape=record,label="{public static double org.osmdroid.views.overlay.milestones.MilestoneLister.getOrientation((r1v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

