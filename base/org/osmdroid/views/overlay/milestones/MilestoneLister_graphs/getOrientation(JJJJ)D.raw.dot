digraph "CFG fororg.osmdroid.views.overlay.milestones.MilestoneLister.getOrientation(JJJJ)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CMP_L  (r0 I:int) = (r1 I:long), (r5 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CMP_L  (r1 I:int) = (r3 I:long), (r7 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN  (r1 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: CONST  (r1 I:?[long, double]) = \l  (\-4587338432941916160(0xc056800000000000, double:\-90.0) ?[long, double])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r1 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: CONST  (r1 I:?[long, double]) = \l  (4636033603912859648(0x4056800000000000, double:90.0) ?[long, double])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: RETURN  (r1 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: ARITH  (r7 I:long) = (r7 I:long) \- (r3 I:long) \l0x001b: CAST  (r3 I:double) = (double) (r7 I:long) \l0x001c: ARITH  (r7 I:long) = (r5 I:long) \- (r1 I:long) \l0x001e: CAST  (r7 I:double) = (double) (r7 I:long) \l0x001f: ARITH  (r3 I:double) = (r3 I:double) \/ (r7 I:double) \l0x0020: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CMP_L  (r1 I:int) = (r5 I:long), (r1 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0027 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: CONST  (r5 I:?[long, double]) = \l  (4633260481411531256(0x404ca5dc1a63c1f8, double:57.29577951308232) ?[long, double])\l \l0x002d: INVOKE  (r2 I:double) = (r3 I:double) java.lang.Math.atan(double):double type: STATIC \l0x0031: ARITH  (r2 I:double) = (r2 I:double) * (r5 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0037 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|0x0035: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (180(0xb4, float:2.52E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: CAST  (r4 I:double) = (double) (r7 I:int) \l0x0038: ARITH  (r2 I:double) = (r2 I:double) + (r4 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: RETURN  (r2 I:double) \l}"];
MethodNode[shape=record,label="{public static double org.osmdroid.views.overlay.milestones.MilestoneLister.getOrientation((r1 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

