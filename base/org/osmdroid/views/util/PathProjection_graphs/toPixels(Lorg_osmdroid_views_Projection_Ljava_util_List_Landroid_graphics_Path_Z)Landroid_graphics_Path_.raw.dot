digraph "CFG fororg.osmdroid.views.util.PathProjection.toPixels(Lorg\/osmdroid\/views\/Projection;Ljava\/util\/List;Landroid\/graphics\/Path;Z)Landroid\/graphics\/Path;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r1 I:int) = (r23 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0006: CONST  (r2 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r1 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:20:0x0163 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: IF  (r24 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000e \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: NEW_INSTANCE  (r1 I:android.graphics.Path) =  android.graphics.Path \l0x0010: INVOKE  (r1 I:android.graphics.Path) android.graphics.Path.\<init\>():void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r2 I:int) = (r23 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0017: INVOKE  (r1 I:android.graphics.Path), (r2 I:int) android.graphics.Path.incReserve(int):void type: VIRTUAL \l0x001a: INVOKE  (r2 I:org.osmdroid.util.TileSystem) =  org.osmdroid.views.MapView.getTileSystem():org.osmdroid.util.TileSystem type: STATIC \l0x001e: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001f: INVOKE  (r13 I:java.util.Iterator) = (r23 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0023: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: INVOKE  (r3 I:boolean) = (r13 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0162 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002a|0x002a: INVOKE  (r3 I:java.lang.Object) = (r13 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002e: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x002f: CHECK_CAST  (r15 I:org.osmdroid.util.GeoPoint) = (org.osmdroid.util.GeoPoint) (r15 I:?[OBJECT, ARRAY]) \l0x0031: NEW_INSTANCE  (r12 I:android.graphics.Point) =  android.graphics.Point \l0x0033: INVOKE  (r12 I:android.graphics.Point) android.graphics.Point.\<init\>():void type: DIRECT \l0x0036: INVOKE  (r3 I:double) = (r22 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getZoomLevel():double type: VIRTUAL \l0x003a: INVOKE  (r16 I:double) = (r3 I:double) org.osmdroid.util.TileSystem.MapSize(double):double type: STATIC \l0x003e: INVOKE  (r4 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x0042: INVOKE  (r6 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x0046: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0047: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0048: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0049: MOVE  (r8 I:?[long, double]) = (r16 I:?[long, double]) \l0x004b: INVOKE  (r3 I:org.osmdroid.util.PointL) = \l  (r3 I:org.osmdroid.util.TileSystem)\l  (r4 I:double)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:org.osmdroid.util.PointL)\l  (r11 I:boolean)\l org.osmdroid.util.TileSystem.getMercatorFromGeo(double, double, double, org.osmdroid.util.PointL, boolean):org.osmdroid.util.PointL type: VIRTUAL \l0x004f: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0051: INVOKE  (r4 I:int) = (r0 I:org.osmdroid.views.Projection), (r4 I:long) org.osmdroid.views.Projection.getTileFromMercator(long):int type: VIRTUAL \l0x0055: IPUT  (r4 I:int), (r12 I:android.graphics.Point) android.graphics.Point.x int \l0x0057: IGET  (r3 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0059: INVOKE  (r3 I:int) = (r0 I:org.osmdroid.views.Projection), (r3 I:long) org.osmdroid.views.Projection.getTileFromMercator(long):int type: VIRTUAL \l0x005d: IPUT  (r3 I:int), (r12 I:android.graphics.Point) android.graphics.Point.y int \l0x005f: NEW_INSTANCE  (r3 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0061: IGET  (r4 I:int) = (r12 I:android.graphics.Point) android.graphics.Point.x int \l0x0063: INVOKE  (r4 I:long) = (r0 I:org.osmdroid.views.Projection), (r4 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x0067: IGET  (r6 I:int) = (r12 I:android.graphics.Point) android.graphics.Point.y int \l0x0069: INVOKE  (r6 I:long) = (r0 I:org.osmdroid.views.Projection), (r6 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x006d: INVOKE  (r3 I:org.osmdroid.util.PointL), (r4 I:long), (r6 I:long) org.osmdroid.util.PointL.\<init\>(long, long):void type: DIRECT \l0x0070: NEW_INSTANCE  (r11 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x0072: IGET  (r4 I:int) = (r12 I:android.graphics.Point) android.graphics.Point.x int \l0x0074: INVOKE  (r5 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x0078: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0079: INVOKE  (r4 I:long) = (r0 I:org.osmdroid.views.Projection), (r4 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x007d: IGET  (r6 I:int) = (r12 I:android.graphics.Point) android.graphics.Point.y int \l0x007f: INVOKE  (r7 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x0083: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x0084: INVOKE  (r6 I:long) = (r0 I:org.osmdroid.views.Projection), (r6 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x0088: INVOKE  (r11 I:org.osmdroid.util.PointL), (r4 I:long), (r6 I:long) org.osmdroid.util.PointL.\<init\>(long, long):void type: DIRECT \l0x008b: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x008d: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x008f: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0091: CONST  (r19 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0093: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0094: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0096: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0098: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x009a: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r12 I:?[OBJECT, ARRAY]) \l0x009b: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009d: INVOKE  (r18 I:org.osmdroid.util.GeoPoint) = \l  (r3 I:org.osmdroid.util.TileSystem)\l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:double)\l  (r10 I:org.osmdroid.util.GeoPoint)\l  (r11 I:boolean)\l  (r12 I:boolean)\l org.osmdroid.util.TileSystem.getGeoFromMercator(long, long, double, org.osmdroid.util.GeoPoint, boolean, boolean):org.osmdroid.util.GeoPoint type: VIRTUAL \l0x00a1: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x00a3: IGET  (r4 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x00a5: IGET  (r6 I:long) = (r3 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x00a7: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a8: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a9: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x00aa: INVOKE  (r3 I:org.osmdroid.util.GeoPoint) = \l  (r3 I:org.osmdroid.util.TileSystem)\l  (r4 I:long)\l  (r6 I:long)\l  (r8 I:double)\l  (r10 I:org.osmdroid.util.GeoPoint)\l  (r11 I:boolean)\l  (r12 I:boolean)\l org.osmdroid.util.TileSystem.getGeoFromMercator(long, long, double, org.osmdroid.util.GeoPoint, boolean, boolean):org.osmdroid.util.GeoPoint type: VIRTUAL \l0x00ae: NEW_INSTANCE  (r16 I:org.osmdroid.util.BoundingBox) =  org.osmdroid.util.BoundingBox \l0x00b0: INVOKE  (r5 I:double) = (r18 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x00b4: INVOKE  (r7 I:double) = (r18 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00b8: INVOKE  (r9 I:double) = (r3 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x00bc: INVOKE  (r11 I:double) = (r3 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00c0: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00c2: INVOKE  \l  (r4 I:org.osmdroid.util.BoundingBox)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:double)\l  (r11 I:double)\l org.osmdroid.util.BoundingBox.\<init\>(double, double, double, double):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x00c5|0x00c5: IF  (r25 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x00e1 \l}"];
Node_10 [shape=record,label="{10\:\ 0x00c7|0x00c7: INVOKE  (r4 I:double) = (r22 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getZoomLevel():double type: VIRTUAL \l0x00cb: CONST  (r6 I:?[long, double]) = \l  (4619567317775286272(0x401c000000000000, double:7.0) ?[long, double])\l \l0x00cd: CMP_G  (r4 I:int) = (r4 I:double), (r6 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x00cf|0x00cf: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x00e1 \l}"];
Node_12 [shape=record,label="{12\:\ 0x00d1|0x00d1: INVOKE  (r5 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x00d5: INVOKE  (r7 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00d9: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00da: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00dc: INVOKE  (r4 I:android.graphics.PointF) = \l  (r4 I:org.osmdroid.util.BoundingBox)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:android.graphics.PointF)\l org.osmdroid.util.BoundingBox.getRelativePositionOfGeoPointInBoundingBoxWithExactGudermannInterpolation(double, double, android.graphics.PointF):android.graphics.PointF type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x00e1|0x00e1: INVOKE  (r5 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLatitude():double type: VIRTUAL \l0x00e5: INVOKE  (r7 I:double) = (r15 I:org.osmdroid.util.GeoPoint) org.osmdroid.util.GeoPoint.getLongitude():double type: VIRTUAL \l0x00e9: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00ea: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00ec: INVOKE  (r4 I:android.graphics.PointF) = \l  (r4 I:org.osmdroid.util.BoundingBox)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:android.graphics.PointF)\l org.osmdroid.util.BoundingBox.getRelativePositionOfGeoPointInBoundingBoxWithLinearInterpolation(double, double, android.graphics.PointF):android.graphics.PointF type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x00f0|0x00f0: INVOKE  (r5 I:android.graphics.Rect) = (r22 I:org.osmdroid.views.Projection) org.osmdroid.views.Projection.getScreenRect():android.graphics.Rect type: VIRTUAL \l0x00f4: NEW_INSTANCE  (r6 I:android.graphics.Point) =  android.graphics.Point \l0x00f6: INVOKE  (r7 I:int) = (r5 I:android.graphics.Rect) android.graphics.Rect.centerX():int type: VIRTUAL \l0x00fa: CAST  (r7 I:long) = (long) (r7 I:int) \l0x00fb: INVOKE  (r7 I:int) = (r0 I:org.osmdroid.views.Projection), (r7 I:long) org.osmdroid.views.Projection.getTileFromMercator(long):int type: VIRTUAL \l0x00ff: INVOKE  (r5 I:int) = (r5 I:android.graphics.Rect) android.graphics.Rect.centerY():int type: VIRTUAL \l0x0103: CAST  (r8 I:long) = (long) (r5 I:int) \l0x0104: INVOKE  (r5 I:int) = (r0 I:org.osmdroid.views.Projection), (r8 I:long) org.osmdroid.views.Projection.getTileFromMercator(long):int type: VIRTUAL \l0x0108: INVOKE  (r6 I:android.graphics.Point), (r7 I:int), (r5 I:int) android.graphics.Point.\<init\>(int, int):void type: DIRECT \l0x010b: NEW_INSTANCE  (r5 I:org.osmdroid.util.PointL) =  org.osmdroid.util.PointL \l0x010d: IGET  (r7 I:int) = (r6 I:android.graphics.Point) android.graphics.Point.x int \l0x010f: INVOKE  (r7 I:long) = (r0 I:org.osmdroid.views.Projection), (r7 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x0113: IGET  (r9 I:int) = (r6 I:android.graphics.Point) android.graphics.Point.y int \l0x0115: INVOKE  (r9 I:long) = (r0 I:org.osmdroid.views.Projection), (r9 I:int) org.osmdroid.views.Projection.getMercatorFromTile(int):long type: VIRTUAL \l0x0119: INVOKE  (r5 I:org.osmdroid.util.PointL), (r7 I:long), (r9 I:long) org.osmdroid.util.PointL.\<init\>(long, long):void type: DIRECT \l0x011c: IGET  (r7 I:int) = (r6 I:android.graphics.Point) android.graphics.Point.x int \l0x011e: IGET  (r8 I:int) = (r13 I:android.graphics.Point) android.graphics.Point.x int \l0x0120: ARITH  (r7 I:int) = (r7 I:int) \- (r8 I:int) \l0x0121: IGET  (r6 I:int) = (r6 I:android.graphics.Point) android.graphics.Point.y int \l0x0123: IGET  (r8 I:int) = (r13 I:android.graphics.Point) android.graphics.Point.y int \l0x0125: ARITH  (r6 I:int) = (r6 I:int) \- (r8 I:int) \l0x0126: IGET  (r8 I:long) = (r5 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.x long \l0x0128: INVOKE  (r10 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x012c: ARITH  (r10 I:int) = (r10 I:int) * (r7 I:int) \l0x012e: CAST  (r10 I:long) = (long) (r10 I:int) \l0x012f: ARITH  (r8 I:long) = (r8 I:long) \- (r10 I:long) \l0x0130: IGET  (r10 I:long) = (r5 I:org.osmdroid.util.PointL) org.osmdroid.util.PointL.y long \l0x0132: INVOKE  (r5 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x0136: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l0x0138: CAST  (r5 I:long) = (long) (r5 I:int) \l0x0139: ARITH  (r10 I:long) = (r10 I:long) \- (r5 I:long) \l0x013a: IGET  (r5 I:float) = (r4 I:android.graphics.PointF) android.graphics.PointF.x float \l0x013c: INVOKE  (r6 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x0140: CAST  (r6 I:float) = (float) (r6 I:int) \l0x0141: ARITH  (r5 I:float) = (r5 I:float) * (r6 I:float) \l0x0143: CAST  (r5 I:long) = (long) (r5 I:float) \l0x0144: ARITH  (r8 I:long) = (r8 I:long) + (r5 I:long) \l0x0145: IGET  (r4 I:float) = (r4 I:android.graphics.PointF) android.graphics.PointF.y float \l0x0147: INVOKE  (r5 I:int) =  org.osmdroid.util.TileSystem.getTileSize():int type: STATIC \l0x014b: CAST  (r5 I:float) = (float) (r5 I:int) \l0x014c: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x014e: CAST  (r4 I:long) = (long) (r4 I:float) \l0x014f: ARITH  (r10 I:long) = (r10 I:long) + (r4 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0150|0x0150: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0158 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0152|0x0152: CAST  (r4 I:float) = (float) (r8 I:long) \l0x0153: CAST  (r5 I:float) = (float) (r10 I:long) \l0x0154: INVOKE  (r1 I:android.graphics.Path), (r4 I:float), (r5 I:float) android.graphics.Path.moveTo(float, float):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0158|0x0158: CAST  (r4 I:float) = (float) (r8 I:long) \l0x0159: CAST  (r5 I:float) = (float) (r10 I:long) \l0x015a: INVOKE  (r1 I:android.graphics.Path), (r4 I:float), (r5 I:float) android.graphics.Path.lineTo(float, float):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x015d|0x015d: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x015e: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0162|0x0162: RETURN  (r1 I:android.graphics.Path) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0163|0x0163: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0165: CONST_STR  (r1 I:java.lang.String) =  \"List of GeoPoints needs to be at least 2.\" \l0x0167: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x016a|0x016a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Path org.osmdroid.views.util.PathProjection.toPixels((r22 I:org.osmdroid.views.Projection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:java.util.List\<? extends org.osmdroid.util.GeoPoint\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:android.graphics.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.IllegalArgumentException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/views\/Projection;, Ljava\/util\/List\<, +, Lorg\/osmdroid\/util\/GeoPoint;, \>;, Landroid\/graphics\/Path;, Z), Landroid\/graphics\/Path;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_6;
Node_20 -> Node_21;
}

