digraph "CFG fororg.osmdroid.views.drawing.MapSnapshot.save(Landroid\/graphics\/Bitmap;Ljava\/io\/File;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r1 I:java.io.FileOutputStream) =  java.io.FileOutputStream A[Catch:\{ Exception \-\> 0x0023 \}, TRY_ENTER]\l0x0003: INVOKE  (r3 I:java.lang.String) = (r3 I:java.io.File) java.io.File.getAbsolutePath():java.lang.String type: VIRTUAL A[Catch:\{ Exception \-\> 0x0023 \}]\l0x0007: INVOKE  (r1 I:java.io.FileOutputStream), (r3 I:java.lang.String) java.io.FileOutputStream.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ Exception \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|SYNTHETIC\lSplitter:B:3:0x000a\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000a\l|0x000a: SGET  (r3 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat A[Catch:\{ Exception \-\> 0x001e, all \-\> 0x001b \}, TRY_ENTER]\l0x000c: CONST  (r0 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x001e, all \-\> 0x001b \}]\l0x000e: INVOKE  \l  (r2 I:android.graphics.Bitmap)\l  (r3 I:android.graphics.Bitmap$CompressFormat)\l  (r0 I:int)\l  (r1 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL A[Catch:\{ Exception \-\> 0x001e, all \-\> 0x001b \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|SYNTHETIC\lSplitter:B:6:0x0012\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0012\l|0x0012: INVOKE  (r1 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0016 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|ExcHandler: IOException null\lSplitter:B:6:0x0012\l|0x0016: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: INVOKE  (r3 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|ExcHandler: all null\lSplitter:B:3:0x000a\l|0x001b: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|ExcHandler: Exception null\lSplitter:B:3:0x000a\l|0x001e: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|ExcHandler: all null\lSplitter:B:19:0x0024\l|0x0021: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|ExcHandler: Exception null\lSplitter:B:1:0x0001\l|0x0023: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|SYNTHETIC\lSplitter:B:19:0x0024\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0024\l|0x0024: INVOKE  (r2 I:java.lang.Exception) java.lang.Exception.printStackTrace():void type: VIRTUAL A[Catch:\{ all \-\> 0x0021 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0031 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|SYNTHETIC\lSplitter:B:22:0x0029\l}"];
Node_23 [shape=record,label="{23\:\ ?|Splitter:B:22:0x0029\l|0x0029: INVOKE  (r0 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x002d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|ExcHandler: IOException null\lSplitter:B:22:0x0029\l|0x002d: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_26 [shape=record,label="{26\:\ 0x002e|0x002e: INVOKE  (r2 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x0031|0x0031: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x0032|0x0032: RETURN  (r2 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0033|0x0033: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x003d \l}"];
Node_30 [shape=record,label="{30\:\ 0x0035|SYNTHETIC\lSplitter:B:30:0x0035\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x0035\l|0x0035: INVOKE  (r0 I:java.io.FileOutputStream) java.io.FileOutputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0039 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0039|ExcHandler: IOException null\lSplitter:B:30:0x0035\l|0x0039: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_34 [shape=record,label="{34\:\ 0x003a|0x003a: INVOKE  (r3 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x003d|0x003d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static boolean org.osmdroid.views.drawing.MapSnapshot.save((r2 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_3 -> Node_14;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_4 -> Node_14;
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_7 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_29;
Node_14 -> Node_15;
Node_15 -> Node_19;
Node_16 -> Node_29;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_20 -> Node_16;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_23 -> Node_25;
Node_23 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_35;
Node_30 -> Node_31;
Node_30 -> Node_33;
Node_31 -> Node_33;
Node_31 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35;
}

