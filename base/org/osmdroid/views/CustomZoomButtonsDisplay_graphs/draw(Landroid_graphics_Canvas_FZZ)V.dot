digraph "CFG fororg.osmdroid.views.CustomZoomButtonsDisplay.draw(Landroid\/graphics\/Canvas;FZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if ((r6 \> 0.0f ? 1 : (r6 == 0.0f ? 0 : \-1)) != 0) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if ((r6 \> 1.0f ? 1 : (r6 == 1.0f ? 0 : \-1)) != 0) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|r6 = null\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r4.mAlphaPaint != null) goto L_0x0019\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|r4.mAlphaPaint = new android.graphics.Paint()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|r4.mAlphaPaint.setAlpha((int) (r6 * 255.0f))\landroid.graphics.Paint r6 = r4.mAlphaPaint\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|PHI: r6 \l  PHI: (r6v1 android.graphics.Paint) = (r6v4 android.graphics.Paint), (r6v5 android.graphics.Paint) binds: [B:9:0x0019, B:5:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|r5.drawBitmap(getBitmap(true, r7), getTopLeft(true, true), getTopLeft(true, false), r6)\lr5.drawBitmap(getBitmap(false, r8), getTopLeft(false, true), getTopLeft(false, false), r6)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.osmdroid.views.CustomZoomButtonsDisplay.draw((r4v0 'this' org.osmdroid.views.CustomZoomButtonsDisplay A[IMMUTABLE_TYPE, THIS]), (r5v0 android.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
}

