digraph "CFG fororg.osmdroid.LocationListenerProxy.startListening(Landroid\/location\/LocationListener;JF)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r9.mListener = r10\ljava.util.Iterator r10 = r9.mLocationManager.getProviders(true).iterator()\lr1 = false\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|LOOP_START\lPHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:0:0x0000, B:9:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:9:0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|if (r10.hasNext() == false) goto L_0x0035\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|java.lang.String r4 = r10.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|if (\"gps\".equals(r4) != false) goto L_0x002b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023}"];
Node_6 [shape=record,label="{6\:\ 0x0029|if (\"network\".equals(r4) == false) goto L_0x000e\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|r9.mLocationManager.requestLocationUpdates(r4, r11, r13, r9)\lr1 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|RETURN\l|return r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|LOOP_END\lSYNTHETIC\lPHI: r1 \l  PHI: (r1v2 boolean) = (r1v3 boolean), (r1v1 boolean) binds: [B:12:0x000e, B:11:0x000e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000e\-\>B:9:0x000e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.LocationListenerProxy.startListening((r9v0 'this' org.osmdroid.LocationListenerProxy A[IMMUTABLE_TYPE, THIS]), (r10v0 android.location.LocationListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_12;
Node_9 -> Node_1;
Node_10 -> Node_8;
Node_11 -> Node_9;
Node_12 -> Node_9;
}

