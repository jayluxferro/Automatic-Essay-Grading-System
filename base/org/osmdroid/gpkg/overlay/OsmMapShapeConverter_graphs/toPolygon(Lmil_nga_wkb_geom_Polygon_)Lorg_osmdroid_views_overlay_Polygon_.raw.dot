digraph "CFG fororg.osmdroid.gpkg.overlay.OsmMapShapeConverter.toPolygon(Lmil\/nga\/wkb\/geom\/Polygon;)Lorg\/osmdroid\/views\/overlay\/Polygon;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.osmdroid.views.overlay.Polygon) =  org.osmdroid.views.overlay.Polygon \l0x0002: INVOKE  (r0 I:org.osmdroid.views.overlay.Polygon) org.osmdroid.views.overlay.Polygon.\<init\>():void type: DIRECT \l0x0005: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList \l0x0007: INVOKE  (r1 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000a: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x000c: INVOKE  (r2 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000f: INVOKE  (r13 I:java.util.List) = (r13 I:mil.nga.wkb.geom.Polygon) mil.nga.wkb.geom.Polygon.getRings():java.util.List type: VIRTUAL \l0x0013: INVOKE  (r3 I:boolean) = (r13 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0096 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001a: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: INVOKE  (r4 I:java.lang.Object) = (r13 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001f: CHECK_CAST  (r4 I:mil.nga.wkb.geom.LineString) = (mil.nga.wkb.geom.LineString) (r4 I:?[OBJECT, ARRAY]) \l0x0021: INVOKE  (r4 I:java.util.List) = (r4 I:mil.nga.wkb.geom.LineString) mil.nga.wkb.geom.LineString.getPoints():java.util.List type: VIRTUAL \l0x0025: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003d \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r5 I:mil.nga.wkb.geom.Point) = (mil.nga.wkb.geom.Point) (r5 I:?[OBJECT, ARRAY]) \l0x0035: INVOKE  (r5 I:org.osmdroid.util.GeoPoint) = \l  (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter)\l  (r5 I:mil.nga.wkb.geom.Point)\l org.osmdroid.gpkg.overlay.OsmMapShapeConverter.toLatLng(mil.nga.wkb.geom.Point):org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0039: INVOKE  (r1 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x003d|0x003d: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|0x003e: INVOKE  (r5 I:int) = (r13 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:19:0x0096 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|0x0044: INVOKE  (r5 I:java.lang.Object) = (r13 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0048: CHECK_CAST  (r5 I:mil.nga.wkb.geom.LineString) = (mil.nga.wkb.geom.LineString) (r5 I:?[OBJECT, ARRAY]) \l0x004a: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList \l0x004c: INVOKE  (r6 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x004f: INVOKE  (r5 I:java.util.List) = (r5 I:mil.nga.wkb.geom.LineString) mil.nga.wkb.geom.LineString.getPoints():java.util.List type: VIRTUAL \l0x0053: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0057|0x0057: INVOKE  (r7 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x005b|0x005b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0090 \l}"];
Node_12 [shape=record,label="{12\:\ 0x005d|0x005d: INVOKE  (r7 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0061: CHECK_CAST  (r7 I:mil.nga.wkb.geom.Point) = (mil.nga.wkb.geom.Point) (r7 I:?[OBJECT, ARRAY]) \l0x0063: INVOKE  (r8 I:org.osmdroid.util.GeoPoint) = \l  (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter)\l  (r7 I:mil.nga.wkb.geom.Point)\l org.osmdroid.gpkg.overlay.OsmMapShapeConverter.toLatLng(mil.nga.wkb.geom.Point):org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0067: INVOKE  (r6 I:java.util.List), (r8 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x006a: INVOKE  (r8 I:boolean) = (r7 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.hasZ():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|0x006e: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0057 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0070|0x0070: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x007b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0072|0x0072: INVOKE  (r3 I:java.lang.Double) = (r7 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getZ():java.lang.Double type: VIRTUAL \l0x0076: INVOKE  (r7 I:double) = (r3 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|0x007b: INVOKE  (r8 I:double) = (r3 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x007f: INVOKE  (r3 I:java.lang.Double) = (r7 I:mil.nga.wkb.geom.Point) mil.nga.wkb.geom.Point.getZ():java.lang.Double type: VIRTUAL \l0x0083: INVOKE  (r10 I:double) = (r3 I:java.lang.Double) java.lang.Double.doubleValue():double type: VIRTUAL \l0x0087: INVOKE  (r7 I:double) = (r8 I:double), (r10 I:double) java.lang.Math.max(double, double):double type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x008b|0x008b: INVOKE  (r3 I:java.lang.Double) = (r7 I:double) java.lang.Double.valueOf(double):java.lang.Double type: STATIC \l}"];
Node_18 [shape=record,label="{18\:\ 0x0090|0x0090: INVOKE  (r2 I:java.util.List), (r6 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0093: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0096|0x0096: INVOKE  \l  (r0 I:org.osmdroid.views.overlay.Polygon)\l  (r1 I:java.util.List)\l org.osmdroid.views.overlay.Polygon.setPoints(java.util.List):void type: VIRTUAL \l0x0099: INVOKE  \l  (r0 I:org.osmdroid.views.overlay.Polygon)\l  (r2 I:java.util.List)\l org.osmdroid.views.overlay.Polygon.setHoles(java.util.List):void type: VIRTUAL \l0x009c: IGET  (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) = (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter) org.osmdroid.gpkg.overlay.OsmMapShapeConverter.polygonOptions org.osmdroid.gpkg.overlay.features.PolygonOptions \l}"];
Node_20 [shape=record,label="{20\:\ 0x009e|0x009e: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00c4 \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a0|0x00a0: IGET  (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) = (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter) org.osmdroid.gpkg.overlay.OsmMapShapeConverter.polygonOptions org.osmdroid.gpkg.overlay.features.PolygonOptions \l0x00a2: INVOKE  (r13 I:int) = (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) org.osmdroid.gpkg.overlay.features.PolygonOptions.getFillColor():int type: VIRTUAL \l0x00a6: INVOKE  (r0 I:org.osmdroid.views.overlay.Polygon), (r13 I:int) org.osmdroid.views.overlay.Polygon.setFillColor(int):void type: VIRTUAL \l0x00a9: IGET  (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) = (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter) org.osmdroid.gpkg.overlay.OsmMapShapeConverter.polygonOptions org.osmdroid.gpkg.overlay.features.PolygonOptions \l0x00ab: INVOKE  (r13 I:int) = (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) org.osmdroid.gpkg.overlay.features.PolygonOptions.getStrokeColor():int type: VIRTUAL \l0x00af: INVOKE  (r0 I:org.osmdroid.views.overlay.Polygon), (r13 I:int) org.osmdroid.views.overlay.Polygon.setStrokeColor(int):void type: VIRTUAL \l0x00b2: IGET  (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) = (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter) org.osmdroid.gpkg.overlay.OsmMapShapeConverter.polygonOptions org.osmdroid.gpkg.overlay.features.PolygonOptions \l0x00b4: INVOKE  (r13 I:float) = (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) org.osmdroid.gpkg.overlay.features.PolygonOptions.getStrokeWidth():float type: VIRTUAL \l0x00b8: INVOKE  (r0 I:org.osmdroid.views.overlay.Polygon), (r13 I:float) org.osmdroid.views.overlay.Polygon.setStrokeWidth(float):void type: VIRTUAL \l0x00bb: IGET  (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) = (r12 I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter) org.osmdroid.gpkg.overlay.OsmMapShapeConverter.polygonOptions org.osmdroid.gpkg.overlay.features.PolygonOptions \l0x00bd: INVOKE  (r13 I:java.lang.String) = (r13 I:org.osmdroid.gpkg.overlay.features.PolygonOptions) org.osmdroid.gpkg.overlay.features.PolygonOptions.getTitle():java.lang.String type: VIRTUAL \l0x00c1: INVOKE  \l  (r0 I:org.osmdroid.views.overlay.Polygon)\l  (r13 I:java.lang.String)\l org.osmdroid.views.overlay.Polygon.setTitle(java.lang.String):void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00c4|0x00c4: RETURN  (r0 I:org.osmdroid.views.overlay.Polygon) \l}"];
MethodNode[shape=record,label="{public org.osmdroid.views.overlay.Polygon org.osmdroid.gpkg.overlay.OsmMapShapeConverter.toPolygon((r12 'this' I:org.osmdroid.gpkg.overlay.OsmMapShapeConverter A[IMMUTABLE_TYPE, THIS]), (r13 I:mil.nga.wkb.geom.Polygon A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_10;
Node_13 -> Node_14[style=dashed];
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_18 -> Node_7;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
}

