digraph "CFG fororg.osmdroid.gpkg.overlay.OsmMapShapeConverter.addPolylinesToMap(Lorg\/osmdroid\/views\/MapView;Ljava\/util\/List;)Lorg\/osmdroid\/gpkg\/overlay\/features\/MultiPolyline;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.osmdroid.gpkg.overlay.features.MultiPolyline r0 = new org.osmdroid.gpkg.overlay.features.MultiPolyline()\ljava.util.Iterator r5 = r5.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|LOOP_START\lLOOP:0: B:1:0x0009\-\>B:6:0x0025\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|if (r5.hasNext() == false) goto L_0x0030\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|org.osmdroid.views.overlay.Polyline r1 = r5.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|if (r1.getInfoWindow() != null) goto L_0x0025\l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|r1.setInfoWindow(new org.osmdroid.views.overlay.infowindow.BasicInfoWindow(org.osmdroid.gpkg.C1449R.layout.bonuspack_bubble, r4))\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|LOOP_END\lLOOP:0: B:1:0x0009\-\>B:6:0x0025\l|r4.getOverlayManager().add(r1)\lr0.add(r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static org.osmdroid.gpkg.overlay.features.MultiPolyline org.osmdroid.gpkg.overlay.OsmMapShapeConverter.addPolylinesToMap((r4v0 org.osmdroid.views.MapView A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 java.util.List\<org.osmdroid.views.overlay.Polyline\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/views\/MapView;, Ljava\/util\/List\<, Lorg\/osmdroid\/views\/overlay\/Polyline;, \>;), Lorg\/osmdroid\/gpkg\/overlay\/features\/MultiPolyline;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_9;
Node_6 -> Node_1;
Node_8 -> Node_7;
Node_9 -> Node_6;
Node_10 -> Node_6;
}

