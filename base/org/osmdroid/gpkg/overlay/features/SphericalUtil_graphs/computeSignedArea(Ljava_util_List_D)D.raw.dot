digraph "CFG fororg.osmdroid.gpkg.overlay.features.SphericalUtil.computeSignedArea(Ljava\/util\/List;D)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r20 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0006: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r0 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r1 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000c: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r0 I:org.osmdroid.api.IGeoPoint) = (org.osmdroid.api.IGeoPoint) (r0 I:?[OBJECT, ARRAY]) \l0x0014: INVOKE  (r4 I:double) = (r0 I:org.osmdroid.api.IGeoPoint) org.osmdroid.api.IGeoPoint.getLatitude():double type: INTERFACE \l0x0018: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x001c: CONST  (r6 I:?[long, double]) = \l  (4609753056924675352(0x3ff921fb54442d18, double:1.5707963267948966) ?[long, double])\l \l0x0021: ARITH  (r4 I:double) = (r6 I:double) \- (r4 I:double) \l0x0023: CONST  (r8 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0025: ARITH  (r4 I:double) = (r4 I:double) \/ (r8 I:double) \l0x0026: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.tan(double):double type: STATIC \l0x002a: INVOKE  (r10 I:double) = (r0 I:org.osmdroid.api.IGeoPoint) org.osmdroid.api.IGeoPoint.getLongitude():double type: INTERFACE \l0x002e: INVOKE  (r10 I:double) = (r10 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x0032: INVOKE  (r0 I:java.util.Iterator) = (r20 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0036: MOVE  (r14 I:?[long, double]) = (r4 I:?[long, double]) \l0x0037: MOVE  (r16 I:?[long, double]) = (r10 I:?[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0039|0x0039: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|0x003d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0068 \l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|0x003f: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0043: CHECK_CAST  (r3 I:org.osmdroid.api.IGeoPoint) = (org.osmdroid.api.IGeoPoint) (r3 I:?[OBJECT, ARRAY]) \l0x0045: INVOKE  (r4 I:double) = (r3 I:org.osmdroid.api.IGeoPoint) org.osmdroid.api.IGeoPoint.getLatitude():double type: INTERFACE \l0x0049: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x004d: ARITH  (r4 I:double) = (r6 I:double) \- (r4 I:double) \l0x004f: ARITH  (r4 I:double) = (r4 I:double) \/ (r8 I:double) \l0x0050: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.tan(double):double type: STATIC \l0x0054: INVOKE  (r10 I:double) = (r3 I:org.osmdroid.api.IGeoPoint) org.osmdroid.api.IGeoPoint.getLongitude():double type: INTERFACE \l0x0058: INVOKE  (r18 I:double) = (r10 I:double) java.lang.Math.toRadians(double):double type: STATIC \l0x005c: MOVE  (r10 I:?[long, double]) = (r4 I:?[long, double]) \l0x005d: MOVE  (r12 I:?[long, double]) = (r18 I:?[long, double]) \l0x005f: INVOKE  (r10 I:double) = \l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:double)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.polarTriangleArea(double, double, double, double):double type: STATIC \l0x0063: ARITH  (r1 I:double) = (r1 I:double) + (r10 I:double) \l0x0064: MOVE  (r14 I:?[long, double]) = (r4 I:?[long, double]) \l0x0065: MOVE  (r16 I:?[long, double]) = (r18 I:?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0068|0x0068: ARITH  (r3 I:double) = (r21 I:double) * (r21 I:double) \l0x006a: ARITH  (r1 I:double) = (r1 I:double) * (r3 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x006c|0x006c: RETURN  (r1 I:double) \l}"];
MethodNode[shape=record,label="{static double org.osmdroid.gpkg.overlay.features.SphericalUtil.computeSignedArea((r20 I:java.util.List\<org.osmdroid.api.IGeoPoint\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/osmdroid\/api\/IGeoPoint;, \>;D)D]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
}

