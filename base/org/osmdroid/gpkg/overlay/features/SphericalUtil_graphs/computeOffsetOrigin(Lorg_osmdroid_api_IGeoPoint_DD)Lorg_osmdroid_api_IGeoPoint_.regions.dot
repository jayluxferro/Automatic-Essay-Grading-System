digraph "CFG fororg.osmdroid.gpkg.overlay.features.SphericalUtil.computeOffsetOrigin(Lorg\/osmdroid\/api\/IGeoPoint;DD)Lorg\/osmdroid\/api\/IGeoPoint;" {
subgraph cluster_Region_908979845 {
label = "R(2:0|(2:(1:2)|(3:3|(1:7)|(2:(1:14)|(1:13)))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double double r0 = java.lang.Math.toRadians(r25)\ldouble double r2 = r23 \/ EARTH_RADIUS\ldouble double r4 = java.lang.Math.cos(r2)\ldouble double r6 = java.lang.Math.sin(r2) * java.lang.Math.cos(r0)\ldouble double r2 = java.lang.Math.sin(r2) * java.lang.Math.sin(r0)\ldouble double r0 = java.lang.Math.sin(java.lang.Math.toRadians(r22.getLatitude()))\ldouble double r8 = r4 * r4\ldouble double r10 = r6 * r6\ldouble double r12 = ((r10 * r8) + (r8 * r8)) \- ((r8 * r0) * r0)\l}"];
subgraph cluster_Region_1691053138 {
label = "R(2:(1:2)|(3:3|(1:7)|(2:(1:14)|(1:13))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_133356724 {
label = "IF [B:1:0x0042] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0042|if (r12 \< 0.0d) goto L_0x0044\l}"];
subgraph cluster_Region_1155376743 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0044|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1076681393 {
label = "R(3:3|(1:7)|(2:(1:14)|(1:13)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0045|double double r15 = r6 * r0\ldouble double r8 = r8 + r10\ldouble double r10 = (r15 + java.lang.Math.sqrt(r12)) \/ r8\ldouble double r0 = (r0 \- (r6 * r10)) \/ r4\ldouble double r10 = java.lang.Math.atan2(r0, r10)\l}"];
subgraph cluster_IfRegion_2016277284 {
label = "IF [B:4:0x0065, B:6:0x0069] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0065|ADDED_TO_REGION\l|if (r10 \< \-1.5707963267948966d) goto L_0x006b\l}"];
Node_6 [shape=record,label="{6\:\ 0x0069|ADDED_TO_REGION\l|if (r10 \> 1.5707963267948966d) goto L_0x006b\l}"];
subgraph cluster_Region_1584550665 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x006b|double r10 = java.lang.Math.atan2(r0, (r15 \- java.lang.Math.sqrt(r12)) \/ r8)\l}"];
}
}
subgraph cluster_Region_1889934064 {
label = "R(2:(1:14)|(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1421980980 {
label = "IF [B:9:0x0078, B:11:0x007c] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0078|if (r10 \< \-1.5707963267948966d) goto L_0x00a7\l}"];
Node_11 [shape=record,label="{11\:\ 0x007c|ADDED_TO_REGION\l|if (r10 \> 1.5707963267948966d) goto L_0x00a7\l}"];
subgraph cluster_Region_1994579720 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x00a7|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1871214860 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x00a6|RETURN\l|return new org.osmdroid.util.GeoPoint(java.lang.Math.toDegrees(r10), java.lang.Math.toDegrees(java.lang.Math.toRadians(r22.getLongitude()) \- java.lang.Math.atan2(r2, (r4 * java.lang.Math.cos(r10)) \- (r6 * java.lang.Math.sin(r10)))))\l}"];
}
}
}
}
}
Node_5 [shape=record,color=red,label="{5\:\ 0x0067}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0076|PHI: r10 \l  PHI: (r10v3 double) = (r10v5 double), (r10v2 double) binds: [B:7:0x006b, B:6:0x0069] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x007a}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x007f}"];
MethodNode[shape=record,label="{public static org.osmdroid.api.IGeoPoint org.osmdroid.gpkg.overlay.features.SphericalUtil.computeOffsetOrigin((r22v0 org.osmdroid.api.IGeoPoint A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

