digraph "CFG fororg.osmdroid.gpkg.overlay.features.OsmdroidShapeMarkers.addMarkerAsPolyline(Lorg\/osmdroid\/views\/overlay\/Marker;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.util.GeoPoint) = (r9 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: INVOKE  (r2 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000c: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:29:0x00cd \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: NEW_ARRAY  (r1 I:double[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  (r4 I:java.lang.Object) = (r10 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001a: CHECK_CAST  (r4 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r4 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r4 I:org.osmdroid.util.GeoPoint) = (r4 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0020: INVOKE  (r4 I:double) = \l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r4 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x0024: APUT  \l  (r1 I:?[long, double][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[long, double])\l \l0x0026: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0027: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: INVOKE  (r5 I:int) = (r10 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: IF  (r2 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:9:0x004a \l}"];
Node_5 [shape=record,label="{5\:\ 0x002e|0x002e: INVOKE  (r5 I:java.lang.Object) = (r10 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r5 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r5 I:?[OBJECT, ARRAY]) \l0x0034: INVOKE  (r5 I:org.osmdroid.util.GeoPoint) = (r5 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0038: INVOKE  (r5 I:double) = \l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r5 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x003c: APUT  \l  (r1 I:?[long, double][])\l  (r2 I:?[int, short, byte, char])\l  (r5 I:?[long, double])\l \l0x003e: AGET  (r5 I:?[long, double]) = (r1 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0040: AGET  (r7 I:?[long, double]) = (r1 I:?[long, double][]), (r4 I:?[int, short, byte, char]) \l0x0042: CMP_G  (r5 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0044|0x0044: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0047 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|0x0046: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004a|0x004a: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0054 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004d|0x004d: ARITH  (r2 I:int) = (r4 I:int) + (\-1 int) \l0x004f: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|0x0054: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: ARRAY_LENGTH  (r5 I:int) = (r1 I:?[]) \l0x0056: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|0x0057: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:16:0x005f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: ARITH  (r0 I:int) = (r4 I:int) + (1 int) \l0x005b: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|0x005f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0078 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|0x0061: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0078 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0063|0x0063: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0067: AGET  (r2 I:?[long, double]) = (r1 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x0069: INVOKE  (r5 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x006d: AGET  (r5 I:?[long, double]) = (r1 I:?[long, double][]), (r5 I:?[int, short, byte, char]) \l0x006f: CMP_L  (r1 I:int) = (r2 I:double), (r5 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0071|0x0071: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:28:0x00cc \l}"];
Node_20 [shape=record,label="{20\:\ 0x0073|0x0073: INVOKE  (r1 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0078|0x0078: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00a3 \l}"];
Node_22 [shape=record,label="{22\:\ 0x007a|0x007a: INVOKE  (r0 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x007e: AGET  (r0 I:?[long, double]) = (r1 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x0080: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0084: INVOKE  (r2 I:java.lang.Object) = (r10 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0088: CHECK_CAST  (r2 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r2 I:?[OBJECT, ARRAY]) \l0x008a: INVOKE  (r2 I:org.osmdroid.util.GeoPoint) = (r2 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x008e: INVOKE  (r3 I:java.lang.Object) = (r10 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0092: CHECK_CAST  (r3 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r3 I:?[OBJECT, ARRAY]) \l0x0094: INVOKE  (r3 I:org.osmdroid.util.GeoPoint) = (r3 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0098: INVOKE  (r2 I:double) = \l  (r2 I:org.osmdroid.api.IGeoPoint)\l  (r3 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x009c: CMP_L  (r0 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x009e|0x009e: IF  (r0 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:28:0x00cc \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a0|0x00a0: ARITH  (r1 I:int) = (r4 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a3|0x00a3: INVOKE  (r2 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x00a7: AGET  (r2 I:?[long, double]) = (r1 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x00a9: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x00ad: INVOKE  (r0 I:java.lang.Object) = (r10 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00b1: CHECK_CAST  (r0 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r0 I:?[OBJECT, ARRAY]) \l0x00b3: INVOKE  (r0 I:org.osmdroid.util.GeoPoint) = (r0 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x00b7: INVOKE  (r1 I:java.lang.Object) = (r10 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x00bb: CHECK_CAST  (r1 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r1 I:?[OBJECT, ARRAY]) \l0x00bd: INVOKE  (r1 I:org.osmdroid.util.GeoPoint) = (r1 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x00c1: INVOKE  (r0 I:double) = \l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r1 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x00c5: CMP_G  (r0 I:int) = (r2 I:double), (r0 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00c7|0x00c7: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:28:0x00cc \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c9|0x00c9: ARITH  (r1 I:int) = (r4 I:int) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00cc|0x00cc: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x00cd|0x00cd: INVOKE  (r10 I:java.util.List), (r1 I:int), (r9 I:java.lang.Object) java.util.List.add(int, java.lang.Object):void type: INTERFACE \l}"];
Node_30 [shape=record,label="{30\:\ 0x00d0|0x00d0: RETURN   \l}"];
MethodNode[shape=record,label="{public static void org.osmdroid.gpkg.overlay.features.OsmdroidShapeMarkers.addMarkerAsPolyline((r9 I:org.osmdroid.views.overlay.Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.List\<org.osmdroid.views.overlay.Marker\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/views\/overlay\/Marker;, Ljava\/util\/List\<, Lorg\/osmdroid\/views\/overlay\/Marker;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_29;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
}

