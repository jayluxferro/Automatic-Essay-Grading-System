digraph "CFG fororg.osmdroid.gpkg.overlay.features.OsmdroidShapeMarkers.addMarkerAsPolygon(Lorg\/osmdroid\/views\/overlay\/Marker;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.osmdroid.util.GeoPoint) = (r10 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0004: INVOKE  (r1 I:int) = (r11 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0008: INVOKE  (r2 I:int) = (r11 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000c: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r2 I:?[int, byte, short, char]) \<= (r3 I:?[int, byte, short, char])  \-\> B:19:0x0063 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r11 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: NEW_ARRAY  (r1 I:double[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: INVOKE  (r3 I:java.lang.Object) = (r11 I:java.util.List), (r2 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001a: CHECK_CAST  (r3 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r3 I:?[OBJECT, ARRAY]) \l0x001c: INVOKE  (r3 I:org.osmdroid.util.GeoPoint) = (r3 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0020: INVOKE  (r3 I:double) = \l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r3 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x0024: APUT  \l  (r1 I:?[long, double][])\l  (r2 I:?[int, short, byte, char])\l  (r3 I:?[long, double])\l \l0x0026: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0027: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0028: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0029|0x0029: INVOKE  (r6 I:int) = (r11 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|0x002d: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: INVOKE  (r6 I:java.lang.Object) = (r11 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r6 I:org.osmdroid.views.overlay.Marker) = (org.osmdroid.views.overlay.Marker) (r6 I:?[OBJECT, ARRAY]) \l0x0035: INVOKE  (r6 I:org.osmdroid.util.GeoPoint) = (r6 I:org.osmdroid.views.overlay.Marker) org.osmdroid.views.overlay.Marker.getPosition():org.osmdroid.util.GeoPoint type: VIRTUAL \l0x0039: INVOKE  (r6 I:double) = \l  (r0 I:org.osmdroid.api.IGeoPoint)\l  (r6 I:org.osmdroid.api.IGeoPoint)\l org.osmdroid.gpkg.overlay.features.SphericalUtil.computeDistanceBetween(org.osmdroid.api.IGeoPoint, org.osmdroid.api.IGeoPoint):double type: STATIC \l0x003d: APUT  \l  (r1 I:?[long, double][])\l  (r4 I:?[int, short, byte, char])\l  (r6 I:?[long, double])\l \l0x003f: AGET  (r6 I:?[long, double]) = (r1 I:?[long, double][]), (r4 I:?[int, short, byte, char]) \l0x0041: AGET  (r8 I:?[long, double]) = (r1 I:?[long, double][]), (r5 I:?[int, short, byte, char]) \l0x0043: CMP_G  (r6 I:int) = (r6 I:double), (r8 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|0x0045: IF  (r6 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x0048 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|0x0047: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0048|0x0048: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0050 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|0x004d: ARITH  (r0 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: ARRAY_LENGTH  (r0 I:int) = (r1 I:?[]) \l0x0051: ARITH  (r0 I:int) = (r0 I:int) \- (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0052|0x0052: ARRAY_LENGTH  (r4 I:int) = (r1 I:?[]) \l0x0053: ARITH  (r4 I:int) = (r4 I:int) \- (r3 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: IF  (r5 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:15:0x0058 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: ARITH  (r2 I:int) = (r5 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0058|0x0058: AGET  (r3 I:?[long, double]) = (r1 I:?[long, double][]), (r0 I:?[int, short, byte, char]) \l0x005a: AGET  (r0 I:?[long, double]) = (r1 I:?[long, double][]), (r2 I:?[int, short, byte, char]) \l0x005c: CMP_L  (r0 I:int) = (r3 I:double), (r0 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x005e|0x005e: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x0062 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0060|0x0060: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0062|0x0062: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0063|0x0063: INVOKE  \l  (r11 I:java.util.List)\l  (r1 I:int)\l  (r10 I:java.lang.Object)\l java.util.List.add(int, java.lang.Object):void type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: RETURN   \l}"];
MethodNode[shape=record,label="{public static void org.osmdroid.gpkg.overlay.features.OsmdroidShapeMarkers.addMarkerAsPolygon((r10 I:org.osmdroid.views.overlay.Marker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.util.List\<org.osmdroid.views.overlay.Marker\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/osmdroid\/views\/overlay\/Marker;, Ljava\/util\/List\<, Lorg\/osmdroid\/views\/overlay\/Marker;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_3;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

