digraph "CFG fororg.osmdroid.gpkg.overlay.features.MultiPolygonMarkers.isValid()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.gpkg.overlay.features.PolygonMarkers\>) = \l  (r3 I:org.osmdroid.gpkg.overlay.features.MultiPolygonMarkers)\l org.osmdroid.gpkg.overlay.features.MultiPolygonMarkers.polygonMarkers java.util.List \l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l0x0006: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0011: CHECK_CAST  (r1 I:org.osmdroid.gpkg.overlay.features.PolygonMarkers) = (org.osmdroid.gpkg.overlay.features.PolygonMarkers) (r1 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  (r1 I:boolean) = (r1 I:org.osmdroid.gpkg.overlay.features.PolygonMarkers) org.osmdroid.gpkg.overlay.features.PolygonMarkers.isValid():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0007 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.gpkg.overlay.features.MultiPolygonMarkers.isValid((r3 'this' I:org.osmdroid.gpkg.overlay.features.MultiPolygonMarkers A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
}

