digraph "CFG fororg.osmdroid.gpkg.overlay.features.PolygonMarkers.isValid()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r3.markers.isEmpty() != false) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r3.markers.size() \< 3) goto L_0x0012\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|r0 = false\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|r0 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v8 boolean), (r0v11 boolean) binds: [B:5:0x0014, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L_0x002f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|java.util.Iterator r1 = r3.holes.iterator()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|LOOP_START\lPHI: r0 \l  PHI: (r0v4 boolean) = (r0v2 boolean), (r0v7 boolean) binds: [B:7:0x0017, B:11:0x002d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x001d\-\>B:11:0x002d\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|if (r1.hasNext() == false) goto L_0x002f\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|boolean r0 = r1.next().isValid()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|LOOP_END\lLOOP:0: B:8:0x001d\-\>B:11:0x002d\l|if (r0 != false) goto L_0x001d\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|RETURN\lPHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v4 boolean), (r0v7 boolean) binds: [B:6:0x0015, B:13:0x002f, B:14:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.gpkg.overlay.features.PolygonMarkers.isValid((r3v0 'this' org.osmdroid.gpkg.overlay.features.PolygonMarkers A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_12;
Node_14 -> Node_12;
}

