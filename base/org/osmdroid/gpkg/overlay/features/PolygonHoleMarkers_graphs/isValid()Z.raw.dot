digraph "CFG fororg.osmdroid.gpkg.overlay.features.PolygonHoleMarkers.isValid()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.osmdroid.views.overlay.Marker\>) = \l  (r2 I:org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers)\l org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers.markers java.util.List \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.util.List\<org.osmdroid.views.overlay.Marker\>) = \l  (r2 I:org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers)\l org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers.markers java.util.List \l0x000a: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000e: CONST  (r1 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers.isValid((r2 'this' I:org.osmdroid.gpkg.overlay.features.PolygonHoleMarkers A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

