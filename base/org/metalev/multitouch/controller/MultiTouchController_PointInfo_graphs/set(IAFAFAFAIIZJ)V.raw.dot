digraph "CFG fororg.metalev.multitouch.controller.MultiTouchController.PointInfo.set(I[F[F[F[IIZJ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IPUT  \l  (r9 I:long)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.eventTime long \l0x0002: IPUT  \l  (r7 I:int)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.action int \l0x0004: IPUT  \l  (r2 I:int)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.numPoints int \l0x0006: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r9 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r10 I:float[]) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.xs float[] \l0x000c: AGET  (r0 I:?[int, float]) = (r3 I:?[int, float][]), (r9 I:?[int, short, byte, char]) \l0x000e: APUT  \l  (r10 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0010: IGET  (r10 I:float[]) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.ys float[] \l0x0012: AGET  (r0 I:?[int, float]) = (r4 I:?[int, float][]), (r9 I:?[int, short, byte, char]) \l0x0014: APUT  \l  (r10 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0016: IGET  (r10 I:float[]) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.pressures float[] \l0x0018: AGET  (r0 I:?[int, float]) = (r5 I:?[int, float][]), (r9 I:?[int, short, byte, char]) \l0x001a: APUT  \l  (r10 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x001c: IGET  (r10 I:int[]) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.pointerIds int[] \l0x001e: AGET  (r0 I:?[int, float]) = (r6 I:?[int, float][]), (r9 I:?[int, short, byte, char]) \l0x0020: APUT  \l  (r10 I:?[int, float][])\l  (r9 I:?[int, short, byte, char])\l  (r0 I:?[int, float])\l \l0x0022: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IPUT  \l  (r8 I:boolean)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.isDown boolean \l0x0027: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0028: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|0x0029: IF  (r2 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:6:0x002d \l}"];
Node_5 [shape=record,label="{5\:\ 0x002b|0x002b: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IPUT  \l  (r2 I:boolean)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.isMultiTouch boolean \l0x0030: IGET  (r2 I:boolean) = \l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.isMultiTouch boolean \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0068 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: AGET  (r2 I:?[int, float]) = (r3 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x0036: AGET  (r6 I:?[int, float]) = (r3 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x0038: ARITH  (r2 I:float) = (r2 I:float) + (r6 I:float) \l0x0039: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x003b: ARITH  (r2 I:float) = (r2 I:float) * (r6 I:float) \l0x003d: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.xMid float \l0x003f: AGET  (r2 I:?[int, float]) = (r4 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x0041: AGET  (r9 I:?[int, float]) = (r4 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x0043: ARITH  (r2 I:float) = (r2 I:float) + (r9 I:float) \l0x0044: ARITH  (r2 I:float) = (r2 I:float) * (r6 I:float) \l0x0046: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.yMid float \l0x0048: AGET  (r2 I:?[int, float]) = (r5 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x004a: AGET  (r5 I:?[int, float]) = (r5 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x004c: ARITH  (r2 I:float) = (r2 I:float) + (r5 I:float) \l0x004d: ARITH  (r2 I:float) = (r2 I:float) * (r6 I:float) \l0x004f: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.pressureMid float \l0x0051: AGET  (r2 I:?[int, float]) = (r3 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x0053: AGET  (r3 I:?[int, float]) = (r3 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x0055: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0056: INVOKE  (r2 I:float) = (r2 I:float) java.lang.Math.abs(float):float type: STATIC \l0x005a: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dx float \l0x005c: AGET  (r2 I:?[int, float]) = (r4 I:?[int, float][]), (r8 I:?[int, short, byte, char]) \l0x005e: AGET  (r3 I:?[int, float]) = (r4 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x0060: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0061: INVOKE  (r2 I:float) = (r2 I:float) java.lang.Math.abs(float):float type: STATIC \l0x0065: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dy float \l}"];
Node_10 [shape=record,label="{10\:\ 0x0068|0x0068: AGET  (r2 I:?[int, float]) = (r3 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x006a: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.xMid float \l0x006c: AGET  (r2 I:?[int, float]) = (r4 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x006e: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.yMid float \l0x0070: AGET  (r2 I:?[int, float]) = (r5 I:?[int, float][]), (r7 I:?[int, short, byte, char]) \l0x0072: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.pressureMid float \l0x0074: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dy float \l0x0077: IPUT  \l  (r2 I:float)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dx float \l}"];
Node_11 [shape=record,label="{11\:\ 0x0079|0x0079: IPUT  \l  (r7 I:boolean)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.angleIsCalculated boolean \l0x007b: IPUT  \l  (r7 I:boolean)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameterIsCalculated boolean \l0x007d: IPUT  \l  (r7 I:boolean)\l  (r1 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameterSqIsCalculated boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x007f|0x007f: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.metalev.multitouch.controller.MultiTouchController.PointInfo.set((r1 'this' I:org.metalev.multitouch.controller.MultiTouchController$PointInfo A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

