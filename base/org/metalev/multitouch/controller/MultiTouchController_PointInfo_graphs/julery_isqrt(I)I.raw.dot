digraph "CFG fororg.metalev.multitouch.controller.MultiTouchController.PointInfo.julery_isqrt(I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (32768(0x8000, float:4.5918E\-41) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r2 I:?[int, float, short, byte, char]) = (15 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: ARITH  (r3 I:int) = (r0 I:int) \<\< (1 int) \l0x0008: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x0009: ARITH  (r4 I:int) = (r2 I:int) + (\-1 int) \l0x000b: ARITH  (r2 I:int) = (r3 I:int) \<\< (r2 I:int) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: IF  (r6 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:4:0x0011 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0010: ARITH  (r6 I:int) = (r6 I:int) \- (r2 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: ARITH  (r1 I:int) = (r1 I:int) \>\> (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN  (r0 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
MethodNode[shape=record,label="{private int org.metalev.multitouch.controller.MultiTouchController.PointInfo.julery_isqrt((r5 'this' I:org.metalev.multitouch.controller.MultiTouchController$PointInfo A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_1;
}

