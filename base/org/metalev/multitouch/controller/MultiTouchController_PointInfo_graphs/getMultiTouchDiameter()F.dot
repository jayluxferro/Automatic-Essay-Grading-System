digraph "CFG fororg.metalev.multitouch.controller.MultiTouchController.PointInfo.getMultiTouchDiameter()F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.diameterIsCalculated != false) goto L_0x0040\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|r1 = 0.0f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r3.isMultiTouch != false) goto L_0x000c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|r3.diameter = 0.0f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|float r0 = getMultiTouchDiameterSq()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if ((r0 \> 0.0f ? 1 : (r0 == 0.0f ? 0 : \-1)) != 0) goto L_0x0015\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|float r1 = ((float) julery_isqrt((int) (r0 * 256.0f))) \/ 16.0f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|PHI: r1 \l  PHI: (r1v1 float) = (r1v0 float), (r1v6 float) binds: [B:6:0x0012, B:7:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|r3.diameter = r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|if ((r3.diameter \> r3.f290dx ? 1 : (r3.diameter == r3.f290dx ? 0 : \-1)) \>= 0) goto L_0x0031\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|r3.diameter = r3.f290dx\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031}"];
Node_12 [shape=record,label="{12\:\ 0x0037|if ((r3.diameter \> r3.f291dy ? 1 : (r3.diameter == r3.f291dy ? 0 : \-1)) \>= 0) goto L_0x003d\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|r3.diameter = r3.f291dy\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|r3.diameterIsCalculated = true\l}"];
Node_15 [shape=record,label="{15\:\ 0x0040}"];
Node_16 [shape=record,label="{16\:\ 0x0042|RETURN\l|return r3.diameter\l}"];
MethodNode[shape=record,label="{public float org.metalev.multitouch.controller.MultiTouchController.PointInfo.getMultiTouchDiameter((r3v0 'this' org.metalev.multitouch.controller.MultiTouchController$PointInfo A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

