digraph "CFG fororg.metalev.multitouch.controller.MultiTouchController.PointInfo.getMultiTouchDiameter()F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameterIsCalculated boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0040 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:boolean) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.isMultiTouch boolean \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IPUT  \l  (r1 I:float)\l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.getMultiTouchDiameterSq():float type: VIRTUAL \l0x0010: CMP_L  (r2 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1132462080(0x43800000, float:256.0) ?[int, float, short, byte, char])\l \l0x0017: ARITH  (r0 I:float) = (r0 I:float) * (r1 I:float) \l0x0019: CAST  (r0 I:int) = (int) (r0 I:float) \l0x001a: INVOKE  (r0 I:int) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l  (r0 I:int)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.julery_isqrt(int):int type: DIRECT \l0x001e: CAST  (r0 I:float) = (float) (r0 I:int) \l0x001f: CONST  (r1 I:?[int, float, short, byte, char]) = \l  (1098907648(0x41800000, float:16.0) ?[int, float, short, byte, char])\l \l0x0021: ARITH  (r1 I:float) = (r0 I:float) \/ (r1 I:float) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IPUT  \l  (r1 I:float)\l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l0x0025: IGET  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l0x0027: IGET  (r1 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dx float \l0x0029: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IGET  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dx float \l0x002f: IPUT  \l  (r0 I:float)\l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: IGET  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l0x0033: IGET  (r1 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dy float \l0x0035: CMP_G  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x003d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IGET  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.dy float \l0x003b: IPUT  \l  (r0 I:float)\l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x003e: IPUT  \l  (r0 I:boolean)\l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameterIsCalculated boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0040|0x0040: IGET  (r0 I:float) = \l  (r3 I:org.metalev.multitouch.controller.MultiTouchController$PointInfo)\l org.metalev.multitouch.controller.MultiTouchController.PointInfo.diameter float \l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|0x0042: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{public float org.metalev.multitouch.controller.MultiTouchController.PointInfo.getMultiTouchDiameter((r3 'this' I:org.metalev.multitouch.controller.MultiTouchController$PointInfo A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

