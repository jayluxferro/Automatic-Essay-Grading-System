digraph "CFG fororg.metalev.multitouch.controller.MultiTouchController.performDragOrPinch()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r10.selectedObject != null) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|r1 = 1.0f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|if (org.metalev.multitouch.controller.MultiTouchController.PositionAndScale.access$000(r10.mCurrXform) != false) goto L_0x0010\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0019|if ((org.metalev.multitouch.controller.MultiTouchController.PositionAndScale.access$400(r10.mCurrXform) \> 0.0f ? 1 : (org.metalev.multitouch.controller.MultiTouchController.PositionAndScale.access$400(r10.mCurrXform) == 0.0f ? 0 : \-1)) != 0) goto L_0x001c\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|float r1 = org.metalev.multitouch.controller.MultiTouchController.PositionAndScale.access$400(r10.mCurrXform)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|PHI: r1 \l  PHI: (r1v1 float) = (r1v0 float), (r1v0 float), (r1v7 float) binds: [B:4:0x000d, B:6:0x0019, B:7:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|extractCurrPtInfo()\lorg.metalev.multitouch.controller.MultiTouchController$PositionAndScale r3 = r10.mCurrXform\lr3.set(r10.mCurrPtX \- (r10.startPosX * r1), r10.mCurrPtY \- (r10.startPosY * r1), r10.startScaleOverPinchDiam * r10.mCurrPtDiam, r10.startScaleXOverPinchWidth * r10.mCurrPtWidth, r10.startScaleYOverPinchHeight * r10.mCurrPtHeight, r10.startAngleMinusPinchAngle + r10.mCurrPtAng)\lr10.objectCanvas.setPositionAndScale(r10.selectedObject, r10.mCurrXform, r10.mCurrPt)\l}"];
Node_9 [shape=record,label="{9\:\ 0x005d|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void org.metalev.multitouch.controller.MultiTouchController.performDragOrPinch((r10v0 'this' org.metalev.multitouch.controller.MultiTouchController A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
}

