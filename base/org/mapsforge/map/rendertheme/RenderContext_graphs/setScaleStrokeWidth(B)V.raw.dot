digraph "CFG fororg.mapsforge.map.rendertheme.RenderContext.setScaleStrokeWidth(B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: ARITH  (r6 I:int) = (r6 I:int) + (\-12 int) \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r6 I:int) = (r6 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0007: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.RenderTheme) = (r5 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.renderTheme org.mapsforge.map.rendertheme.rule.RenderTheme \l0x0009: CAST  (r1 I:double) = (double) (r6 I:int) \l0x000a: CONST  (r3 I:?[long, double]) = \l  (4609434218613702656(0x3ff8000000000000, double:1.5) ?[long, double])\l \l0x000c: INVOKE  (r1 I:double) = (r3 I:double), (r1 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0010: CAST  (r6 I:float) = (float) (r1 I:double) \l0x0011: IGET  (r1 I:org.mapsforge.map.layer.renderer.RendererJob) = (r5 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0013: IGET  (r1 I:org.mapsforge.core.model.Tile) = (r1 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile \l0x0015: IGET  (r1 I:byte) = (r1 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0017: INVOKE  \l  (r0 I:org.mapsforge.map.rendertheme.rule.RenderTheme)\l  (r6 I:float)\l  (r1 I:byte)\l org.mapsforge.map.rendertheme.rule.RenderTheme.scaleStrokeWidth(float, byte):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.RenderContext.setScaleStrokeWidth((r5 'this' I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, THIS]), (r6 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

