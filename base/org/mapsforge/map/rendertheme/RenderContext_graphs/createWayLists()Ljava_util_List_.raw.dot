digraph "CFG fororg.mapsforge.map.rendertheme.RenderContext.createWayLists()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: CONST  (r1 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0007: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.RenderTheme) = (r7 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.renderTheme org.mapsforge.map.rendertheme.rule.RenderTheme \l0x0009: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.rendertheme.rule.RenderTheme) org.mapsforge.map.rendertheme.rule.RenderTheme.getLevels():int type: VIRTUAL \l0x000d: CONST  (r2 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:6:0x002d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList \l0x0013: INVOKE  (r3 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0016: ARITH  (r4 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:5:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x001a|0x001a: NEW_INSTANCE  (r5 I:java.util.ArrayList) =  java.util.ArrayList \l0x001c: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  (r5 I:java.util.ArrayList), (r6 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x0020: INVOKE  (r3 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0023: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: INVOKE  (r0 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0029: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x002b: CAST  (r2 I:byte) = (byte) (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: RETURN  \l  (r0 I:java.util.List\<java.util.List\<java.util.List\<org.mapsforge.map.layer.renderer.ShapePaintContainer\>\>\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.List\<java.util.List\<java.util.List\<org.mapsforge.map.layer.renderer.ShapePaintContainer\>\>\> org.mapsforge.map.rendertheme.RenderContext.createWayLists((r7 'this' I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Ljava\/util\/List\<, Ljava\/util\/List\<, Ljava\/util\/List\<, Lorg\/mapsforge\/map\/layer\/renderer\/ShapePaintContainer;, \>;\>;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_1;
}

