digraph "CFG fororg.mapsforge.map.rendertheme.rule.NegativeRule.matchesNode(Ljava\/util\/List;B)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte) = (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule) org.mapsforge.map.rendertheme.rule.NegativeRule.zoomMin byte \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:byte) = (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule) org.mapsforge.map.rendertheme.rule.NegativeRule.zoomMax byte \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r3 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) = (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule) org.mapsforge.map.rendertheme.rule.NegativeRule.elementMatcher org.mapsforge.map.rendertheme.rule.ElementMatcher \l0x000a: SGET  (r0 I:org.mapsforge.map.rendertheme.rule.Element) =  org.mapsforge.map.rendertheme.rule.Element.NODE org.mapsforge.map.rendertheme.rule.Element \l0x000c: INVOKE  (r3 I:boolean) = \l  (r3 I:org.mapsforge.map.rendertheme.rule.ElementMatcher)\l  (r0 I:org.mapsforge.map.rendertheme.rule.Element)\l org.mapsforge.map.rendertheme.rule.ElementMatcher.matches(org.mapsforge.map.rendertheme.rule.Element):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IGET  (r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule) org.mapsforge.map.rendertheme.rule.NegativeRule.attributeMatcher org.mapsforge.map.rendertheme.rule.AttributeMatcher \l0x0014: INVOKE  (r2 I:boolean) = \l  (r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r2 I:java.util.List)\l org.mapsforge.map.rendertheme.rule.AttributeMatcher.matches(java.util.List):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean org.mapsforge.map.rendertheme.rule.NegativeRule.matchesNode((r1 'this' I:org.mapsforge.map.rendertheme.rule.NegativeRule A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.List\<org.mapsforge.core.model.Tag\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;B)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
}

