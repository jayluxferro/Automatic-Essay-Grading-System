digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleBuilder.build()Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r3.valueList.remove(STRING_NEGATION) == false) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a}"];
Node_3 [shape=record,label="{3\:\ 0x0018|RETURN\l|return new org.mapsforge.map.rendertheme.rule.NegativeRule(r3, new org.mapsforge.map.rendertheme.rule.NegativeMatcher(r3.keyList, r3.valueList))\l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|org.mapsforge.map.rendertheme.rule.AttributeMatcher r0 = getKeyMatcher(r3.keyList)\lorg.mapsforge.map.rendertheme.rule.AttributeMatcher r1 = getValueMatcher(r3.valueList)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|RETURN\l|return new org.mapsforge.map.rendertheme.rule.PositiveRule(r3, org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(r0, r3.ruleStack), org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(r1, r3.ruleStack))\l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.rendertheme.rule.Rule org.mapsforge.map.rendertheme.rule.RuleBuilder.build((r3v0 'this' org.mapsforge.map.rendertheme.rule.RuleBuilder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

