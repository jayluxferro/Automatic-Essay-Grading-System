digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleBuilder.build()Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.valueList java.util.List \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"~\" \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.remove(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0019 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:org.mapsforge.map.rendertheme.rule.NegativeMatcher) =  org.mapsforge.map.rendertheme.rule.NegativeMatcher \l0x000c: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.keyList java.util.List \l0x000e: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.valueList java.util.List \l0x0010: INVOKE  \l  (r0 I:org.mapsforge.map.rendertheme.rule.NegativeMatcher)\l  (r1 I:java.util.List)\l  (r2 I:java.util.List)\l org.mapsforge.map.rendertheme.rule.NegativeMatcher.\<init\>(java.util.List, java.util.List):void type: DIRECT \l0x0013: NEW_INSTANCE  (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule) =  org.mapsforge.map.rendertheme.rule.NegativeRule \l0x0015: INVOKE  \l  (r1 I:org.mapsforge.map.rendertheme.rule.NegativeRule)\l  (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder)\l  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l org.mapsforge.map.rendertheme.rule.NegativeRule.\<init\>(org.mapsforge.map.rendertheme.rule.RuleBuilder, org.mapsforge.map.rendertheme.rule.AttributeMatcher):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: RETURN  (r1 I:org.mapsforge.map.rendertheme.rule.Rule) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:java.util.List\<java.lang.String\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.keyList java.util.List \l0x001b: INVOKE  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = (r0 I:java.util.List) org.mapsforge.map.rendertheme.rule.RuleBuilder.getKeyMatcher(java.util.List):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l0x001f: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.valueList java.util.List \l0x0021: INVOKE  (r1 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = (r1 I:java.util.List) org.mapsforge.map.rendertheme.rule.RuleBuilder.getValueMatcher(java.util.List):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l0x0025: IGET  (r2 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.ruleStack java.util.Stack \l0x0027: INVOKE  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = \l  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r2 I:java.util.Stack)\l org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(org.mapsforge.map.rendertheme.rule.AttributeMatcher, java.util.Stack):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l0x002b: IGET  (r2 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder) org.mapsforge.map.rendertheme.rule.RuleBuilder.ruleStack java.util.Stack \l0x002d: INVOKE  (r1 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = \l  (r1 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r2 I:java.util.Stack)\l org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(org.mapsforge.map.rendertheme.rule.AttributeMatcher, java.util.Stack):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l0x0031: NEW_INSTANCE  (r2 I:org.mapsforge.map.rendertheme.rule.PositiveRule) =  org.mapsforge.map.rendertheme.rule.PositiveRule \l0x0033: INVOKE  \l  (r2 I:org.mapsforge.map.rendertheme.rule.PositiveRule)\l  (r3 I:org.mapsforge.map.rendertheme.rule.RuleBuilder)\l  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r1 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l org.mapsforge.map.rendertheme.rule.PositiveRule.\<init\>(org.mapsforge.map.rendertheme.rule.RuleBuilder, org.mapsforge.map.rendertheme.rule.AttributeMatcher, org.mapsforge.map.rendertheme.rule.AttributeMatcher):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|0x0036: RETURN  (r2 I:org.mapsforge.map.rendertheme.rule.Rule) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.rendertheme.rule.Rule org.mapsforge.map.rendertheme.rule.RuleBuilder.build((r3 'this' I:org.mapsforge.map.rendertheme.rule.RuleBuilder A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

