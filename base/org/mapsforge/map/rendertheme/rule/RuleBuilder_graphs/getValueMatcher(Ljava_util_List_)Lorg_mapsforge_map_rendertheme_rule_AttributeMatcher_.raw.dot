digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleBuilder.getValueMatcher(Ljava\/util\/List;)Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"*\" \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0007: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: SGET  (r2 I:org.mapsforge.map.rendertheme.rule.AnyMatcher) =  org.mapsforge.map.rendertheme.rule.AnyMatcher.INSTANCE org.mapsforge.map.rendertheme.rule.AnyMatcher \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: SGET  (r0 I:java.util.Map\<java.util.List\<java.lang.String\>, org.mapsforge.map.rendertheme.rule.AttributeMatcher\>) =  org.mapsforge.map.rendertheme.rule.Rule.MATCHERS_CACHE_VALUE java.util.Map \l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = (org.mapsforge.map.rendertheme.rule.AttributeMatcher) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0024 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:org.mapsforge.map.rendertheme.rule.ValueMatcher) =  org.mapsforge.map.rendertheme.rule.ValueMatcher \l0x001c: INVOKE  \l  (r0 I:org.mapsforge.map.rendertheme.rule.ValueMatcher)\l  (r2 I:java.util.List)\l org.mapsforge.map.rendertheme.rule.ValueMatcher.\<init\>(java.util.List):void type: DIRECT \l0x001f: SGET  (r1 I:java.util.Map\<java.util.List\<java.lang.String\>, org.mapsforge.map.rendertheme.rule.AttributeMatcher\>) =  org.mapsforge.map.rendertheme.rule.Rule.MATCHERS_CACHE_VALUE java.util.Map \l0x0021: INVOKE  \l  (r1 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: RETURN  (r0 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
MethodNode[shape=record,label="{private static org.mapsforge.map.rendertheme.rule.AttributeMatcher org.mapsforge.map.rendertheme.rule.RuleBuilder.getValueMatcher((r2 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;), Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
}

