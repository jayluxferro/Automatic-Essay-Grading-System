digraph "CFG fororg.mapsforge.map.rendertheme.rule.Rule.matchWay(Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;Lorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;Ljava\/util\/List;Lorg\/mapsforge\/map\/rendertheme\/RenderContext;)V" {
subgraph cluster_Region_594011142 {
label = "R(2:0|(1:(4:2|(1:4)|5|(1:7))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r16\l}"];
subgraph cluster_Region_1044654591 {
label = "R(1:(4:2|(1:4)|5|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_928753440 {
label = "IF [B:1:0x0010] THEN: R(4:2|(1:4)|5|(1:7)) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0010|if (matchesWay(r18.getTags(), r19.zoomLevel, r20) == true) goto L_0x0012\l}"];
subgraph cluster_Region_1242232388 {
label = "R(4:2|(1:4)|5|(1:7))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0012|int int r1 = r0.renderInstructions.size()\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1668124012 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001a|LOOP_START\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:2:0x0012, B:4:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x001a\-\>B:4:0x001c\l|if (r3 \< r1) goto L_0x001c\l}"];
subgraph cluster_Region_494311214 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001c|LOOP_END\lLOOP:0: B:3:0x001a\-\>B:4:0x001c\l|r0.renderInstructions.get(r3).renderWay(r17, r22, r18)\lr21.add(r0.renderInstructions.get(r3))\lr3++\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x003b|org.mapsforge.map.rendertheme.RenderCallback r11 = r17\lorg.mapsforge.map.layer.renderer.PolylineContainer r12 = r18\ljava.util.List\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\> r14 = r21\lorg.mapsforge.map.rendertheme.RenderContext r13 = r22\lint int r1 = r0.subRules.size()\lint r15 = 0\l}"];
subgraph cluster_LoopRegion_400523031 {
label = "LOOP:1: (1:7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x004a|LOOP_START\lPHI: r15 \l  PHI: (r15v1 int) = (r15v0 int), (r15v2 int) binds: [B:5:0x003b, B:7:0x004c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:6:0x004a\-\>B:7:0x004c\l|if (r15 \< r1) goto L_0x004c\l}"];
subgraph cluster_Region_175768446 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x004c|LOOP_END\lLOOP:1: B:6:0x004a\-\>B:7:0x004c\l|r0.subRules.get(r15).matchWay(r17, r18, r19, r20, r21, r22)\lr15++\l}"];
}
}
}
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ 0x003b|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0066|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.rendertheme.rule.Rule.matchWay((r16v0 'this' org.mapsforge.map.rendertheme.rule.Rule A[IMMUTABLE_TYPE, THIS]), (r17v0 org.mapsforge.map.rendertheme.RenderCallback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 org.mapsforge.map.layer.renderer.PolylineContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 org.mapsforge.map.rendertheme.rule.Closed A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 java.util.List\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;, Lorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;, Lorg\/mapsforge\/core\/model\/Tile;, Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;, Ljava\/util\/List\<, Lorg\/mapsforge\/map\/rendertheme\/renderinstruction\/RenderInstruction;, \>;, Lorg\/mapsforge\/map\/rendertheme\/RenderContext;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_6;
Node_8 -> Node_5;
Node_9 -> Node_11;
}

