digraph "CFG fororg.mapsforge.map.rendertheme.rule.Rule.matchWay(Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;Lorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;Ljava\/util\/List;Lorg\/mapsforge\/map\/rendertheme\/RenderContext;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: INVOKE  (r1 I:java.util.List) = (r18 I:org.mapsforge.map.layer.renderer.PolylineContainer) org.mapsforge.map.layer.renderer.PolylineContainer.getTags():java.util.List type: VIRTUAL \l0x0006: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0008: IGET  (r2 I:byte) = (r9 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x000a: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:boolean) = \l  (r0 I:org.mapsforge.map.rendertheme.rule.Rule)\l  (r1 I:java.util.List)\l  (r2 I:byte)\l  (r10 I:org.mapsforge.map.rendertheme.rule.Closed)\l org.mapsforge.map.rendertheme.rule.Rule.matchesWay(java.util.List, byte, org.mapsforge.map.rendertheme.rule.Closed):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0066 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r1 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r0 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x0014: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0018: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r3 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:5:0x003b \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IGET  (r4 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r0 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x001e: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0022: CHECK_CAST  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction) = (org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction) (r4 I:?[OBJECT, ARRAY]) \l0x0024: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0026: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0028: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x002a: INVOKE  \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction)\l  (r11 I:org.mapsforge.map.rendertheme.RenderCallback)\l  (r13 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r12 I:org.mapsforge.map.layer.renderer.PolylineContainer)\l org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction.renderWay(org.mapsforge.map.rendertheme.RenderCallback, org.mapsforge.map.rendertheme.RenderContext, org.mapsforge.map.layer.renderer.PolylineContainer):void type: VIRTUAL \l0x002d: IGET  (r4 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r0 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x002f: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0033: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0035: INVOKE  (r14 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0038: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|0x003b: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x003d: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x003f: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0041: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0043: IGET  (r1 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r0 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.subRules java.util.ArrayList \l0x0045: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0049: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x004a|0x004a: IF  (r15 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:8:0x0066 \l}"];
Node_7 [shape=record,label="{7\:\ 0x004c|0x004c: IGET  (r2 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r0 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.subRules java.util.ArrayList \l0x004e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.ArrayList), (r15 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0052: CHECK_CAST  (r2 I:org.mapsforge.map.rendertheme.rule.Rule) = (org.mapsforge.map.rendertheme.rule.Rule) (r2 I:?[OBJECT, ARRAY]) \l0x0054: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0056: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0058: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x005a: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x005c: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x005e: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x0060: INVOKE  \l  (r2 I:org.mapsforge.map.rendertheme.rule.Rule)\l  (r3 I:org.mapsforge.map.rendertheme.RenderCallback)\l  (r4 I:org.mapsforge.map.layer.renderer.PolylineContainer)\l  (r5 I:org.mapsforge.core.model.Tile)\l  (r6 I:org.mapsforge.map.rendertheme.rule.Closed)\l  (r7 I:java.util.List)\l  (r8 I:org.mapsforge.map.rendertheme.RenderContext)\l org.mapsforge.map.rendertheme.rule.Rule.matchWay(org.mapsforge.map.rendertheme.RenderCallback, org.mapsforge.map.layer.renderer.PolylineContainer, org.mapsforge.core.model.Tile, org.mapsforge.map.rendertheme.rule.Closed, java.util.List, org.mapsforge.map.rendertheme.RenderContext):void type: VIRTUAL \l0x0063: ARITH  (r15 I:int) = (r15 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0066|0x0066: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.rendertheme.rule.Rule.matchWay((r16 'this' I:org.mapsforge.map.rendertheme.rule.Rule A[IMMUTABLE_TYPE, THIS]), (r17 I:org.mapsforge.map.rendertheme.RenderCallback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:org.mapsforge.map.layer.renderer.PolylineContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:org.mapsforge.map.rendertheme.rule.Closed A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:java.util.List\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;, Lorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;, Lorg\/mapsforge\/core\/model\/Tile;, Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;, Ljava\/util\/List\<, Lorg\/mapsforge\/map\/rendertheme\/renderinstruction\/RenderInstruction;, \>;, Lorg\/mapsforge\/map\/rendertheme\/RenderContext;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
}

