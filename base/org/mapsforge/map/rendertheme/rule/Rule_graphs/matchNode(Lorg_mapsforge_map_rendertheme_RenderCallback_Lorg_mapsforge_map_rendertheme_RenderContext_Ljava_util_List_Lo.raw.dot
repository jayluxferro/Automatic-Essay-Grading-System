digraph "CFG fororg.mapsforge.map.rendertheme.rule.Rule.matchNode(Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;Lorg\/mapsforge\/map\/rendertheme\/RenderContext;Ljava\/util\/List;Lorg\/mapsforge\/map\/datastore\/PointOfInterest;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r8 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.tags java.util.List \l0x0002: IGET  (r1 I:org.mapsforge.map.layer.renderer.RendererJob) = (r6 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0004: IGET  (r1 I:org.mapsforge.core.model.Tile) = (r1 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile \l0x0006: IGET  (r1 I:byte) = (r1 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0008: INVOKE  (r0 I:boolean) = \l  (r4 I:org.mapsforge.map.rendertheme.rule.Rule)\l  (r0 I:java.util.List)\l  (r1 I:byte)\l org.mapsforge.map.rendertheme.rule.Rule.matchesNode(java.util.List, byte):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IGET  (r0 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r4 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x0010: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l0x0014: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:5:0x002f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: IGET  (r3 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r4 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x001a: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x001e: CHECK_CAST  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction) = (org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction) (r3 I:?[OBJECT, ARRAY]) \l0x0020: INVOKE  \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction)\l  (r5 I:org.mapsforge.map.rendertheme.RenderCallback)\l  (r6 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r8 I:org.mapsforge.map.datastore.PointOfInterest)\l org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction.renderNode(org.mapsforge.map.rendertheme.RenderCallback, org.mapsforge.map.rendertheme.RenderContext, org.mapsforge.map.datastore.PointOfInterest):void type: VIRTUAL \l0x0023: IGET  (r3 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\>) = (r4 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.renderInstructions java.util.ArrayList \l0x0025: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.ArrayList), (r2 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x0029: INVOKE  (r7 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x002c: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002f|0x002f: IGET  (r0 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r4 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.subRules java.util.ArrayList \l0x0031: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) java.util.ArrayList.size():int type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0035|0x0035: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:8:0x0045 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|0x0037: IGET  (r2 I:java.util.ArrayList\<org.mapsforge.map.rendertheme.rule.Rule\>) = (r4 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.subRules java.util.ArrayList \l0x0039: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.get(int):java.lang.Object type: VIRTUAL \l0x003d: CHECK_CAST  (r2 I:org.mapsforge.map.rendertheme.rule.Rule) = (org.mapsforge.map.rendertheme.rule.Rule) (r2 I:?[OBJECT, ARRAY]) \l0x003f: INVOKE  \l  (r2 I:org.mapsforge.map.rendertheme.rule.Rule)\l  (r5 I:org.mapsforge.map.rendertheme.RenderCallback)\l  (r6 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r7 I:java.util.List)\l  (r8 I:org.mapsforge.map.datastore.PointOfInterest)\l org.mapsforge.map.rendertheme.rule.Rule.matchNode(org.mapsforge.map.rendertheme.RenderCallback, org.mapsforge.map.rendertheme.RenderContext, java.util.List, org.mapsforge.map.datastore.PointOfInterest):void type: VIRTUAL \l0x0042: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.rendertheme.rule.Rule.matchNode((r4 'this' I:org.mapsforge.map.rendertheme.rule.Rule A[IMMUTABLE_TYPE, THIS]), (r5 I:org.mapsforge.map.rendertheme.RenderCallback A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.mapsforge.map.datastore.PointOfInterest A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/RenderCallback;, Lorg\/mapsforge\/map\/rendertheme\/RenderContext;, Ljava\/util\/List\<, Lorg\/mapsforge\/map\/rendertheme\/renderinstruction\/RenderInstruction;, \>;, Lorg\/mapsforge\/map\/datastore\/PointOfInterest;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_6;
}

