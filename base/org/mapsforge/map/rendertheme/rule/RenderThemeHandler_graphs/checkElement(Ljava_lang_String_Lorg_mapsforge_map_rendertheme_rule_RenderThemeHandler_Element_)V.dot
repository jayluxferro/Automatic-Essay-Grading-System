digraph "CFG fororg.mapsforge.map.rendertheme.rule.RenderThemeHandler.checkElement(Ljava\/lang\/String;Lorg\/mapsforge\/map\/rendertheme\/rule\/RenderThemeHandler$Element;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|switch(r4) \{\l    case org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RENDER_THEME :org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element: goto L_0x006e;\l    case org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RULE :org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element: goto L_0x0045;\l    case org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RENDERING_INSTRUCTION :org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element: goto L_0x0023;\l    case org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RENDERING_STYLE :org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element: goto L_0x0022;\l    default: goto L_0x000b;\l\}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"unknown enum value: \")\lr0.append(r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|throw new org.xmlpull.p030v1.XmlPullParserException(r0.toString())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023}"];
Node_6 [shape=record,label="{6\:\ 0x002b|if (r2.elementStack.peek() != org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RULE) goto L_0x002e\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(UNEXPECTED_ELEMENT)\lr0.append(r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|throw new org.xmlpull.p030v1.XmlPullParserException(r0.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element r4 = r2.elementStack.peek()\l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|if (r4 == org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RENDER_THEME) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0051}"];
Node_13 [shape=record,label="{13\:\ 0x0053|if (r4 != org.mapsforge.map.rendertheme.rule.RenderThemeHandler.Element.RULE) goto L_0x0056\l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(UNEXPECTED_ELEMENT)\lr0.append(r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|throw new org.xmlpull.p030v1.XmlPullParserException(r0.toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x006e}"];
Node_17 [shape=record,label="{17\:\ 0x0074|if (r2.elementStack.empty() == false) goto L_0x0077\l}"];
Node_18 [shape=record,label="{18\:\ 0x0076|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ 0x0077|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(UNEXPECTED_ELEMENT)\lr0.append(r3)\l}"];
Node_20 [shape=record,label="{20\:\ 0x008d|throw new org.xmlpull.p030v1.XmlPullParserException(r0.toString())\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.rule.RenderThemeHandler.checkElement((r2v0 'this' org.mapsforge.map.rendertheme.rule.RenderThemeHandler A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_5;
Node_1 -> Node_10;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_22[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_19 -> Node_20;
}

