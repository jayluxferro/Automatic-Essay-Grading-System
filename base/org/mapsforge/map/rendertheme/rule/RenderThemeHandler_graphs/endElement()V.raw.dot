digraph "CFG fororg.mapsforge.map.rendertheme.rule.RenderThemeHandler.endElement()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.xmlpull.v1.XmlPullParser) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.pullParser org.xmlpull.v1.XmlPullParser \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getName():java.lang.String type: INTERFACE \l0x0006: IPUT  \l  (r0 I:java.lang.String)\l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.qName java.lang.String \l0x0008: IGET  (r0 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.RenderThemeHandler$Element\>) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.elementStack java.util.Stack \l0x000a: INVOKE  (r0 I:java.util.Stack) java.util.Stack.pop():java.lang.Object type: VIRTUAL \l0x000d: CONST_STR  (r0 I:java.lang.String) =  \"rule\" \l0x000f: IGET  (r1 I:java.lang.String) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.qName java.lang.String \l0x0011: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0017|0x0017: IGET  (r0 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\>) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.ruleStack java.util.Stack \l0x0019: INVOKE  (r0 I:java.util.Stack) java.util.Stack.pop():java.lang.Object type: VIRTUAL \l0x001c: IGET  (r0 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\>) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.ruleStack java.util.Stack \l0x001e: INVOKE  (r0 I:boolean) = (r0 I:java.util.Stack) java.util.Stack.empty():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|0x0022: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0034 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.Rule) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.currentRule org.mapsforge.map.rendertheme.rule.Rule \l0x0026: INVOKE  (r0 I:boolean) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l  (r0 I:org.mapsforge.map.rendertheme.rule.Rule)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.isVisible(org.mapsforge.map.rendertheme.rule.Rule):boolean type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x002a|0x002a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0060 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.RenderTheme) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.renderTheme org.mapsforge.map.rendertheme.rule.RenderTheme \l0x002e: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.Rule) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.currentRule org.mapsforge.map.rendertheme.rule.Rule \l0x0030: INVOKE  \l  (r0 I:org.mapsforge.map.rendertheme.rule.RenderTheme)\l  (r1 I:org.mapsforge.map.rendertheme.rule.Rule)\l org.mapsforge.map.rendertheme.rule.RenderTheme.addRule(org.mapsforge.map.rendertheme.rule.Rule):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IGET  (r0 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\>) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.ruleStack java.util.Stack \l0x0036: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Stack) java.util.Stack.peek():java.lang.Object type: VIRTUAL \l0x003a: CHECK_CAST  (r0 I:org.mapsforge.map.rendertheme.rule.Rule) = (org.mapsforge.map.rendertheme.rule.Rule) (r0 I:?[OBJECT, ARRAY]) \l0x003c: IPUT  \l  (r0 I:org.mapsforge.map.rendertheme.rule.Rule)\l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.currentRule org.mapsforge.map.rendertheme.rule.Rule \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|0x003f: CONST_STR  (r0 I:java.lang.String) =  \"stylemenu\" \l0x0041: IGET  (r1 I:java.lang.String) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.qName java.lang.String \l0x0043: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0047|0x0047: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0060 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: IGET  (r0 I:org.mapsforge.map.rendertheme.XmlRenderTheme) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.xmlRenderTheme org.mapsforge.map.rendertheme.XmlRenderTheme \l0x004b: INVOKE  (r0 I:org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback) = (r0 I:org.mapsforge.map.rendertheme.XmlRenderTheme) org.mapsforge.map.rendertheme.XmlRenderTheme.getMenuCallback():org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x004f|0x004f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|0x0051: IGET  (r0 I:org.mapsforge.map.rendertheme.XmlRenderTheme) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.xmlRenderTheme org.mapsforge.map.rendertheme.XmlRenderTheme \l0x0053: INVOKE  (r0 I:org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback) = (r0 I:org.mapsforge.map.rendertheme.XmlRenderTheme) org.mapsforge.map.rendertheme.XmlRenderTheme.getMenuCallback():org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback type: INTERFACE \l0x0057: IGET  (r1 I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleMenu) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.renderThemeStyleMenu org.mapsforge.map.rendertheme.XmlRenderThemeStyleMenu \l0x0059: INVOKE  (r0 I:java.util.Set) = \l  (r0 I:org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback)\l  (r1 I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleMenu)\l org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback.getCategories(org.mapsforge.map.rendertheme.XmlRenderThemeStyleMenu):java.util.Set type: INTERFACE \l0x005d: IPUT  \l  (r0 I:java.util.Set\<java.lang.String\>)\l  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.categories java.util.Set \l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|0x005f: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|0x0060: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.rule.RenderThemeHandler.endElement((r2 'this' I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_14;
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

