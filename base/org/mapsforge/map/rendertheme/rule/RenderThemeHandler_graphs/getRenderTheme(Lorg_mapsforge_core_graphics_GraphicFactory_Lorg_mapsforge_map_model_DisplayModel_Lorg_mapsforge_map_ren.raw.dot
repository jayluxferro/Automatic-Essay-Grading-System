digraph "CFG fororg.mapsforge.map.rendertheme.rule.RenderThemeHandler.getRenderTheme(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Lorg\/mapsforge\/map\/model\/DisplayModel;Lorg\/mapsforge\/map\/rendertheme\/XmlRenderTheme;)Lorg\/mapsforge\/map\/rendertheme\/rule\/RenderTheme;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:org.xmlpull.v1.XmlPullParserFactory) =  org.mapsforge.map.rendertheme.rule.RenderThemeHandler.getXmlPullParserFactory():org.xmlpull.v1.XmlPullParserFactory type: STATIC \l0x0004: INVOKE  (r0 I:org.xmlpull.v1.XmlPullParser) = (r0 I:org.xmlpull.v1.XmlPullParserFactory) org.xmlpull.v1.XmlPullParserFactory.newPullParser():org.xmlpull.v1.XmlPullParser type: VIRTUAL \l0x0008: NEW_INSTANCE  (r7 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler) =  org.mapsforge.map.rendertheme.rule.RenderThemeHandler \l0x000a: INVOKE  (r4 I:java.lang.String) = (r11 I:org.mapsforge.map.rendertheme.XmlRenderTheme) org.mapsforge.map.rendertheme.XmlRenderTheme.getRelativePathPrefix():java.lang.String type: INTERFACE \l0x000e: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x000f: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0010: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x0011: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l0x0012: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r1 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l  (r2 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r3 I:org.mapsforge.map.model.DisplayModel)\l  (r4 I:java.lang.String)\l  (r5 I:org.mapsforge.map.rendertheme.XmlRenderTheme)\l  (r6 I:org.xmlpull.v1.XmlPullParser)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.\<init\>(org.mapsforge.core.graphics.GraphicFactory, org.mapsforge.map.model.DisplayModel, java.lang.String, org.mapsforge.map.rendertheme.XmlRenderTheme, org.xmlpull.v1.XmlPullParser):void type: DIRECT \l0x0016: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|SYNTHETIC\lSplitter:B:1:0x0017\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0017\l|0x0017: INVOKE  (r10 I:java.io.InputStream) = (r11 I:org.mapsforge.map.rendertheme.XmlRenderTheme) org.mapsforge.map.rendertheme.XmlRenderTheme.getRenderThemeAsStream():java.io.InputStream type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x001a: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|SYNTHETIC\lSplitter:B:3:0x001b\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x001b\l|0x001b: INVOKE  \l  (r0 I:org.xmlpull.v1.XmlPullParser)\l  (r10 I:java.io.InputStream)\l  (r9 I:java.lang.String)\l org.xmlpull.v1.XmlPullParser.setInput(java.io.InputStream, java.lang.String):void type: INTERFACE A[Catch:\{ all \-\> 0x0027 \}, TRY_ENTER]\l0x001e: INVOKE  \l  (r7 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.processRenderTheme():void type: VIRTUAL A[Catch:\{ all \-\> 0x0027 \}]\l0x0021: IGET  (r9 I:org.mapsforge.map.rendertheme.rule.RenderTheme) = \l  (r7 I:org.mapsforge.map.rendertheme.rule.RenderThemeHandler)\l org.mapsforge.map.rendertheme.rule.RenderThemeHandler.renderTheme org.mapsforge.map.rendertheme.rule.RenderTheme A[Catch:\{ all \-\> 0x0027 \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r10 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: RETURN  (r9 I:org.mapsforge.map.rendertheme.rule.RenderTheme) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|ExcHandler: all null\lSplitter:B:3:0x001b\l|0x0027: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0017\l|0x0029: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l0x002b: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x002c: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: INVOKE  (r10 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static org.mapsforge.map.rendertheme.rule.RenderTheme org.mapsforge.map.rendertheme.rule.RenderThemeHandler.getRenderTheme((r9 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:org.mapsforge.map.rendertheme.XmlRenderTheme A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

