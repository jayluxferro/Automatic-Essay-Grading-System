digraph "CFG fororg.mapsforge.map.rendertheme.rule.KeyMatcher.isCoveredBy(Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r7 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: IGET  (r1 I:java.util.List\<java.lang.String\>) = (r6 I:org.mapsforge.map.rendertheme.rule.KeyMatcher) org.mapsforge.map.rendertheme.rule.KeyMatcher.keys java.util.List \l0x0008: INVOKE  (r1 I:int) = (r1 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000c: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) java.util.ArrayList.\<init\>(int):void type: DIRECT \l0x000f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: IGET  (r2 I:java.util.List\<java.lang.String\>) = (r6 I:org.mapsforge.map.rendertheme.rule.KeyMatcher) org.mapsforge.map.rendertheme.rule.KeyMatcher.keys java.util.List \l0x0012: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r1 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x002c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: NEW_INSTANCE  (r3 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x001a: IGET  (r4 I:java.util.List\<java.lang.String\>) = (r6 I:org.mapsforge.map.rendertheme.rule.KeyMatcher) org.mapsforge.map.rendertheme.rule.KeyMatcher.keys java.util.List \l0x001c: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0020: CHECK_CAST  (r4 I:java.lang.String) = (java.lang.String) (r4 I:?[OBJECT, ARRAY]) \l0x0022: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: INVOKE  \l  (r3 I:org.mapsforge.core.model.Tag)\l  (r4 I:java.lang.String)\l  (r5 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0026: INVOKE  (r0 I:java.util.List), (r3 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x0029: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: INVOKE  (r7 I:boolean) = \l  (r7 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r0 I:java.util.List)\l org.mapsforge.map.rendertheme.rule.AttributeMatcher.matches(java.util.List):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: RETURN  (r7 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.rendertheme.rule.KeyMatcher.isCoveredBy((r6 'this' I:org.mapsforge.map.rendertheme.rule.KeyMatcher A[IMMUTABLE_TYPE, THIS]), (r7 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
}

