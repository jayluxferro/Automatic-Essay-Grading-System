digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleOptimizer.optimizeValueMatcher(Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;Ljava\/util\/Stack;)Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r4 I:java.util.Stack) java.util.Stack.size():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Stack), (r1 I:int) java.util.Stack.get(int):java.lang.Object type: VIRTUAL \l0x000b: INSTANCE_OF  (r2 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.PositiveRule \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Stack), (r1 I:int) java.util.Stack.get(int):java.lang.Object type: VIRTUAL \l0x0013: CHECK_CAST  (r2 I:org.mapsforge.map.rendertheme.rule.PositiveRule) = (org.mapsforge.map.rendertheme.rule.PositiveRule) (r2 I:?[OBJECT, ARRAY]) \l0x0015: IGET  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = (r2 I:org.mapsforge.map.rendertheme.rule.PositiveRule) org.mapsforge.map.rendertheme.rule.PositiveRule.valueMatcher org.mapsforge.map.rendertheme.rule.AttributeMatcher \l0x0017: INVOKE  (r2 I:boolean) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l org.mapsforge.map.rendertheme.rule.AttributeMatcher.isCoveredBy(org.mapsforge.map.rendertheme.rule.AttributeMatcher):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: SGET  (r3 I:org.mapsforge.map.rendertheme.rule.AnyMatcher) =  org.mapsforge.map.rendertheme.rule.AnyMatcher.INSTANCE org.mapsforge.map.rendertheme.rule.AnyMatcher \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: RETURN  (r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: RETURN  (r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
MethodNode[shape=record,label="{private static org.mapsforge.map.rendertheme.rule.AttributeMatcher org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimizeValueMatcher((r3 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;, Ljava\/util\/Stack\<, Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;, \>;), Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_1;
}

