digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;Ljava\/util\/Stack;)Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.AnyMatcher \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.NegativeMatcher \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.KeyMatcher \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: INVOKE  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r3 I:java.util.Stack)\l org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimizeKeyMatcher(org.mapsforge.map.rendertheme.rule.AttributeMatcher, java.util.Stack):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: RETURN  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: INSTANCE_OF  (r0 I:boolean) = (r2 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.ValueMatcher \l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: INVOKE  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) = \l  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher)\l  (r3 I:java.util.Stack)\l org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimizeValueMatcher(org.mapsforge.map.rendertheme.rule.AttributeMatcher, java.util.Stack):org.mapsforge.map.rendertheme.rule.AttributeMatcher type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: RETURN  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001f: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0022: CONST_STR  (r1 I:java.lang.String) =  \"unknown AttributeMatcher: \" \l0x0024: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0027: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x002a: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x002e: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: RETURN  (r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher) \l}"];
MethodNode[shape=record,label="{static org.mapsforge.map.rendertheme.rule.AttributeMatcher org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize((r2 I:org.mapsforge.map.rendertheme.rule.AttributeMatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;, Ljava\/util\/Stack\<, Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;, \>;), Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
}

