digraph "CFG fororg.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize(Lorg\/mapsforge\/map\/rendertheme\/rule\/ElementMatcher;Ljava\/util\/Stack;)Lorg\/mapsforge\/map\/rendertheme\/rule\/ElementMatcher;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:?[OBJECT, ARRAY]) org.mapsforge.map.rendertheme.rule.AnyMatcher \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0005 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: RETURN  (r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: INVOKE  (r1 I:int) = (r5 I:java.util.Stack) java.util.Stack.size():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:13:0x002f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r2 I:java.lang.Object) = (r5 I:java.util.Stack), (r0 I:int) java.util.Stack.get(int):java.lang.Object type: VIRTUAL \l0x0010: CHECK_CAST  (r2 I:org.mapsforge.map.rendertheme.rule.Rule) = (org.mapsforge.map.rendertheme.rule.Rule) (r2 I:?[OBJECT, ARRAY]) \l0x0012: IGET  (r3 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) = (r2 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.elementMatcher org.mapsforge.map.rendertheme.rule.ElementMatcher \l0x0014: INVOKE  (r3 I:boolean) = \l  (r3 I:org.mapsforge.map.rendertheme.rule.ElementMatcher)\l  (r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher)\l org.mapsforge.map.rendertheme.rule.ElementMatcher.isCoveredBy(org.mapsforge.map.rendertheme.rule.ElementMatcher):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: SGET  (r4 I:org.mapsforge.map.rendertheme.rule.AnyMatcher) =  org.mapsforge.map.rendertheme.rule.AnyMatcher.INSTANCE org.mapsforge.map.rendertheme.rule.AnyMatcher \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: RETURN  (r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IGET  (r2 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) = (r2 I:org.mapsforge.map.rendertheme.rule.Rule) org.mapsforge.map.rendertheme.rule.Rule.elementMatcher org.mapsforge.map.rendertheme.rule.ElementMatcher \l0x001f: INVOKE  (r2 I:boolean) = \l  (r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher)\l  (r2 I:org.mapsforge.map.rendertheme.rule.ElementMatcher)\l org.mapsforge.map.rendertheme.rule.ElementMatcher.isCoveredBy(org.mapsforge.map.rendertheme.rule.ElementMatcher):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|0x0025: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.rendertheme.rule.RuleOptimizer.LOGGER java.util.logging.Logger \l0x0027: CONST_STR  (r3 I:java.lang.String) =  \"unreachable rule (e)\" \l0x0029: INVOKE  (r2 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: RETURN  (r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher) \l}"];
MethodNode[shape=record,label="{static org.mapsforge.map.rendertheme.rule.ElementMatcher org.mapsforge.map.rendertheme.rule.RuleOptimizer.optimize((r4 I:org.mapsforge.map.rendertheme.rule.ElementMatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Stack\<org.mapsforge.map.rendertheme.rule.Rule\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/rule\/ElementMatcher;, Ljava\/util\/Stack\<, Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;, \>;), Lorg\/mapsforge\/map\/rendertheme\/rule\/ElementMatcher;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_4;
}

