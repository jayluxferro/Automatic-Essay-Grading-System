digraph "CFG fororg.mapsforge.map.rendertheme.rule.RenderTheme.\<init\>(Lorg\/mapsforge\/map\/rendertheme\/rule\/RenderThemeBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1.hillShadings = new java.util.ArrayList\<\>()\lr1.strokeScales = new java.util.HashMap()\lr1.textScales = new java.util.HashMap()\lr1.baseStrokeWidth = r2.baseStrokeWidth\lr1.baseTextSize = r2.baseTextSize\lr1.hasBackgroundOutside = r2.hasBackgroundOutside\lr1.mapBackground = r2.mapBackground\lr1.mapBackgroundOutside = r2.mapBackgroundOutside\lr1.rulesList = new java.util.ArrayList\<\>()\lr1.poiMatchingCache = new org.mapsforge.core.util.LRUCache\<\>(1024)\lr1.wayMatchingCache = new org.mapsforge.core.util.LRUCache\<\>(1024)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0043|RETURN\l|return\l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.rendertheme.rule.RenderTheme.\<init\>((r1v0 'this' org.mapsforge.map.rendertheme.rule.RenderTheme A[IMMUTABLE_TYPE, THIS]), (r2v0 org.mapsforge.map.rendertheme.rule.RenderThemeBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

