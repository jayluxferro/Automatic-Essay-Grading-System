digraph "CFG fororg.mapsforge.map.rendertheme.rule.Rule.RuleVisitor.apply(Lorg\/mapsforge\/map\/rendertheme\/rule\/Rule;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.Iterator r2 = r2.subRules.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|LOOP_START\lLOOP:0: B:1:0x0006\-\>B:3:0x000c\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|if (r2.hasNext() == false) goto L_0x0016\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|LOOP_END\lLOOP:0: B:1:0x0006\-\>B:3:0x000c\l|apply(r2.next())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.rule.Rule.RuleVisitor.apply((r1v0 'this' org.mapsforge.map.rendertheme.rule.Rule$RuleVisitor A[IMMUTABLE_TYPE, THIS]), (r2v0 org.mapsforge.map.rendertheme.rule.Rule A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_4;
}

