digraph "CFG fororg.mapsforge.map.rendertheme.rule.PositiveRule.matchesWay(Ljava\/util\/List;BLorg\/mapsforge\/map\/rendertheme\/rule\/Closed;)Z" {
subgraph cluster_Region_977379942 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return r1.zoomMin \<= r3 && r1.zoomMax \>= r3 && r1.elementMatcher.matches(org.mapsforge.map.rendertheme.rule.Element.WAY) && r1.closedMatcher.matches(r4) && r1.keyMatcher.matches(r2) && r1.valueMatcher.matches(r2)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0006|REMOVE\lADDED_TO_REGION\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0010|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0018|REMOVE\lADDED_TO_REGION\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0020|REMOVE\lADDED_TO_REGION\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0022}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0028|REMOVE\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002a|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002c|SYNTHETIC\lORIG_RETURN\l}"];
MethodNode[shape=record,label="{boolean org.mapsforge.map.rendertheme.rule.PositiveRule.matchesWay((r1v0 'this' org.mapsforge.map.rendertheme.rule.PositiveRule A[IMMUTABLE_TYPE, THIS]), (r2v0 java.util.List\<org.mapsforge.core.model.Tag\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.mapsforge.map.rendertheme.rule.Closed A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;B, Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
}

