digraph "CFG fororg.mapsforge.map.rendertheme.rule.ValueMatcher.isCoveredBy(Lorg\/mapsforge\/map\/rendertheme\/rule\/AttributeMatcher;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r7 != r6) goto L_0x0004\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|RETURN\l|return true\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|java.util.ArrayList r0 = new java.util.ArrayList(r6.values.size())\lr1 = 0\lint r2 = r6.values.size()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|LOOP_START\lPHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:2:0x0004, B:4:0x0018] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:3:0x0016\-\>B:4:0x0018\l|if (r1 \>= r2) goto L_0x002c\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|LOOP_END\lLOOP:0: B:3:0x0016\-\>B:4:0x0018\l|r0.add(new org.mapsforge.core.model.Tag((java.lang.String) null, r6.values.get(r1)))\lint r1 = r1 + 1\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c}"];
Node_6 [shape=record,label="{6\:\ 0x0030|RETURN\l|return r7.matches(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.rendertheme.rule.ValueMatcher.isCoveredBy((r6v0 'this' org.mapsforge.map.rendertheme.rule.ValueMatcher A[IMMUTABLE_TYPE, THIS]), (r7v0 org.mapsforge.map.rendertheme.rule.AttributeMatcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_5;
}

