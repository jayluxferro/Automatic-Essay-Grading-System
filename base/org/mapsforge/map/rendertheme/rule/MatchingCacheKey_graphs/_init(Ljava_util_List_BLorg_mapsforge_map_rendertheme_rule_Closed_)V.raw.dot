digraph "CFG fororg.mapsforge.map.rendertheme.rule.MatchingCacheKey.\<init\>(Ljava\/util\/List;BLorg\/mapsforge\/map\/rendertheme\/rule\/Closed;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: IPUT  \l  (r2 I:java.util.List\<org.mapsforge.core.model.Tag\>)\l  (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey)\l org.mapsforge.map.rendertheme.rule.MatchingCacheKey.tags java.util.List \l0x0005: IPUT  \l  (r3 I:byte)\l  (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey)\l org.mapsforge.map.rendertheme.rule.MatchingCacheKey.zoomLevel byte \l0x0007: IPUT  \l  (r4 I:org.mapsforge.map.rendertheme.rule.Closed)\l  (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey)\l org.mapsforge.map.rendertheme.rule.MatchingCacheKey.closed org.mapsforge.map.rendertheme.rule.Closed \l0x0009: NEW_INSTANCE  (r3 I:java.util.HashSet) =  java.util.HashSet \l0x000b: INVOKE  (r3 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x000e: IPUT  \l  (r3 I:java.util.Set\<org.mapsforge.core.model.Tag\>)\l  (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey)\l org.mapsforge.map.rendertheme.rule.MatchingCacheKey.tagsWithoutName java.util.Set \l0x0010: IGET  (r3 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey) org.mapsforge.map.rendertheme.rule.MatchingCacheKey.tags java.util.List \l}"];
Node_1 [shape=record,label="{1\:\ 0x0012|0x0012: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0034 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r3 I:org.mapsforge.core.model.Tag) = (org.mapsforge.core.model.Tag) (r3 I:?[OBJECT, ARRAY]) \l0x0024: CONST_STR  (r4 I:java.lang.String) =  \"name\" \l0x0026: IGET  (r0 I:java.lang.String) = (r3 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.key java.lang.String \l0x0028: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x002c|0x002c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IGET  (r4 I:java.util.Set\<org.mapsforge.core.model.Tag\>) = (r1 I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey) org.mapsforge.map.rendertheme.rule.MatchingCacheKey.tagsWithoutName java.util.Set \l0x0030: INVOKE  (r4 I:java.util.Set), (r3 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|0x0034: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.rendertheme.rule.MatchingCacheKey.\<init\>((r1 'this' I:org.mapsforge.map.rendertheme.rule.MatchingCacheKey A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.List\<org.mapsforge.core.model.Tag\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.mapsforge.map.rendertheme.rule.Closed A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;B, Lorg\/mapsforge\/map\/rendertheme\/rule\/Closed;, )V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_3;
}

