digraph "CFG fororg.mapsforge.map.rendertheme.rule.MatchingCacheKey.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r4 != r5) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r5 instanceof org.mapsforge.map.rendertheme.rule.MatchingCacheKey) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|org.mapsforge.map.rendertheme.rule.MatchingCacheKey r5 = (org.mapsforge.map.rendertheme.rule.MatchingCacheKey) r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r4.closed == r5.closed) goto L_0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013}"];
Node_10 [shape=record,label="{10\:\ 0x0015|if (r4.tagsWithoutName != null) goto L_0x001c\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017}"];
Node_12 [shape=record,label="{12\:\ 0x0019|if (r5.tagsWithoutName == null) goto L_0x001c\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c}"];
Node_15 [shape=record,label="{15\:\ 0x0024|if (r4.tagsWithoutName.equals(r5.tagsWithoutName) != false) goto L_0x0027\l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0027}"];
Node_18 [shape=record,label="{18\:\ 0x002b|if (r4.zoomLevel == r5.zoomLevel) goto L_0x002e\l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|RETURN\l|return false\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.rendertheme.rule.MatchingCacheKey.equals((r4v0 'this' org.mapsforge.map.rendertheme.rule.MatchingCacheKey A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
}

