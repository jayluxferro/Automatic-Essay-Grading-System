digraph "CFG fororg.mapsforge.map.rendertheme.rule.NegativeMatcher.matches(Ljava\/util\/List;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r6 I:org.mapsforge.map.rendertheme.rule.NegativeMatcher)\l  (r7 I:java.util.List)\l org.mapsforge.map.rendertheme.rule.NegativeMatcher.keyListDoesNotContainKeys(java.util.List):boolean type: DIRECT \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0008 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r7 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000c: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:9:0x0024 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r4 I:java.util.List\<java.lang.String\>) = (r6 I:org.mapsforge.map.rendertheme.rule.NegativeMatcher) org.mapsforge.map.rendertheme.rule.NegativeMatcher.valueList java.util.List \l0x0012: INVOKE  (r5 I:java.lang.Object) = (r7 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0016: CHECK_CAST  (r5 I:org.mapsforge.core.model.Tag) = (org.mapsforge.core.model.Tag) (r5 I:?[OBJECT, ARRAY]) \l0x0018: IGET  (r5 I:java.lang.String) = (r5 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.value java.lang.String \l0x001a: INVOKE  (r4 I:boolean) = (r4 I:java.util.List), (r5 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.rendertheme.rule.NegativeMatcher.matches((r6 'this' I:org.mapsforge.map.rendertheme.rule.NegativeMatcher A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.List\<org.mapsforge.core.model.Tag\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;)Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_4;
}

