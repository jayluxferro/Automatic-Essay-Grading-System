digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Symbol.extractValues(Ljava\/lang\/String;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|LOOP_START\lPHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:29:0x0097] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0001\-\>B:29:0x0097\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r0 \>= r6.getAttributeCount()) goto L_0x00a0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.lang.String r1 = r6.getAttributeName(r0)\ljava.lang.String r2 = r6.getAttributeValue(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (\"src\".equals(r1) == false) goto L_0x001b\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|r4.src = r2\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (\"cat\".equals(r1) == false) goto L_0x0027\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|r4.category = r2\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027}"];
Node_10 [shape=record,label="{10\:\ 0x002d|if (\"display\".equals(r1) == false) goto L_0x0036\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|r4.display = org.mapsforge.core.graphics.Display.fromString(r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0036}"];
Node_13 [shape=record,label="{13\:\ 0x003c|if (\"id\".equals(r1) == false) goto L_0x0041\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|r4.f282id = r2\l}"];
Node_15 [shape=record,label="{15\:\ 0x0041}"];
Node_16 [shape=record,label="{16\:\ 0x0047|if (\"priority\".equals(r1) == false) goto L_0x0050\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|r4.priority = java.lang.Integer.parseInt(r2)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0050}"];
Node_19 [shape=record,label="{19\:\ 0x0056|if (\"symbol\-height\".equals(r1) == false) goto L_0x0068\l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|r4.height = ((float) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(r1, r2)) * r4.displayModel.getScaleFactor()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0068}"];
Node_22 [shape=record,label="{22\:\ 0x006e|if (\"symbol\-percent\".equals(r1) == false) goto L_0x0077\l}"];
Node_23 [shape=record,label="{23\:\ 0x0070|r4.percent = org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(r1, r2)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0077}"];
Node_25 [shape=record,label="{25\:\ 0x007d|if (\"symbol\-scaling\".equals(r1) == false) goto L_0x0080\l}"];
Node_26 [shape=record,label="{26\:\ 0x0080}"];
Node_27 [shape=record,label="{27\:\ 0x0086|if (\"symbol\-width\".equals(r1) == false) goto L_0x009b\l}"];
Node_28 [shape=record,label="{28\:\ 0x0088|r4.width = ((float) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(r1, r2)) * r4.displayModel.getScaleFactor()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0097|LOOP_END\lLOOP:0: B:1:0x0001\-\>B:29:0x0097\l|int r0 = r0 + 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x009b}"];
Node_31 [shape=record,label="{31\:\ 0x009f|throw org.mapsforge.map.rendertheme.XmlUtils.createXmlPullParserException(r5, r1, r2, r0)\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a0|RETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ 0x00a0|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x009b|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0097|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0097|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0097|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0097|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0097|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0097|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0097|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0097|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0097|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.renderinstruction.Symbol.extractValues((r4v0 'this' org.mapsforge.map.rendertheme.renderinstruction.Symbol A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_33;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_36;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_37;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_38;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_39;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_40;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_41;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_42;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_43[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_35;
Node_29 -> Node_1;
Node_30 -> Node_31;
Node_33 -> Node_32;
Node_34 -> Node_30;
Node_35 -> Node_29;
Node_36 -> Node_29;
Node_37 -> Node_29;
Node_38 -> Node_29;
Node_39 -> Node_29;
Node_40 -> Node_29;
Node_41 -> Node_29;
Node_42 -> Node_29;
Node_43 -> Node_29;
}

