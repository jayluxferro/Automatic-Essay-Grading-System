digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Symbol.extractValues(Ljava\/lang\/String;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r6 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getAttributeCount():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:33:0x00a0 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r6 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeName(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r2 I:java.lang.String) = (r6 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeValue(int):java.lang.String type: INTERFACE \l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"src\" \l0x0011: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IPUT  \l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.src java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST_STR  (r3 I:java.lang.String) =  \"cat\" \l0x001d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IPUT  \l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.category java.lang.String \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"display\" \l0x0029: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0036 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: INVOKE  (r1 I:org.mapsforge.core.graphics.Display) = (r2 I:java.lang.String) org.mapsforge.core.graphics.Display.fromString(java.lang.String):org.mapsforge.core.graphics.Display type: STATIC \l0x0033: IPUT  \l  (r1 I:org.mapsforge.core.graphics.Display)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.display org.mapsforge.core.graphics.Display \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: CONST_STR  (r3 I:java.lang.String) =  \"id\" \l0x0038: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0041 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: IPUT  \l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.id java.lang.String \l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: CONST_STR  (r3 I:java.lang.String) =  \"priority\" \l0x0043: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0050 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: INVOKE  (r1 I:int) = (r2 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l0x004d: IPUT  \l  (r1 I:int)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.priority int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|0x0050: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-height\" \l0x0052: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0056|0x0056: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0068 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0058|0x0058: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x005c: CAST  (r1 I:float) = (float) (r1 I:int) \l0x005d: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.displayModel org.mapsforge.map.model.DisplayModel \l0x005f: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x0063: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0065: IPUT  \l  (r1 I:float)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.height float \l}"];
Node_21 [shape=record,label="{21\:\ 0x0068|0x0068: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-percent\" \l0x006a: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0077 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0070|0x0070: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x0074: IPUT  \l  (r1 I:int)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.percent int \l}"];
Node_24 [shape=record,label="{24\:\ 0x0077|0x0077: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-scaling\" \l0x0079: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x007d|0x007d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0080 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0080|0x0080: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-width\" \l0x0082: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0086|0x0086: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x009b \l}"];
Node_29 [shape=record,label="{29\:\ 0x0088|0x0088: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x008c: CAST  (r1 I:float) = (float) (r1 I:int) \l0x008d: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.displayModel org.mapsforge.map.model.DisplayModel \l0x008f: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x0093: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0095: IPUT  \l  (r1 I:float)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Symbol)\l org.mapsforge.map.rendertheme.renderinstruction.Symbol.width float \l}"];
Node_30 [shape=record,label="{30\:\ 0x0097|0x0097: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x009b|0x009b: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParserException) = \l  (r5 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r0 I:int)\l org.mapsforge.map.rendertheme.XmlUtils.createXmlPullParserException(java.lang.String, java.lang.String, java.lang.String, int):org.xmlpull.v1.XmlPullParserException type: STATIC \l}"];
Node_32 [shape=record,label="{32\:\ 0x009f|0x009f: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a0|0x00a0: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.renderinstruction.Symbol.extractValues((r4 'this' I:org.mapsforge.map.rendertheme.renderinstruction.Symbol A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_33;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_30;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_30;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_30;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_30;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_30;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_30[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_1;
Node_31 -> Node_32;
}

