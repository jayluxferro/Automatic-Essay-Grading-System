digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.TextKey.getInstance(Ljava\/lang\/String;)Lorg\/mapsforge\/map\/rendertheme\/renderinstruction\/TextKey;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.Map\<java.lang.String, org.mapsforge.map.rendertheme.renderinstruction.TextKey\>) =  org.mapsforge.map.rendertheme.renderinstruction.TextKey.TEXT_KEYS java.util.Map \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0006: CHECK_CAST  (r0 I:org.mapsforge.map.rendertheme.renderinstruction.TextKey) = (org.mapsforge.map.rendertheme.renderinstruction.TextKey) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:org.mapsforge.map.rendertheme.renderinstruction.TextKey) =  org.mapsforge.map.rendertheme.renderinstruction.TextKey \l0x000c: INVOKE  \l  (r0 I:org.mapsforge.map.rendertheme.renderinstruction.TextKey)\l  (r2 I:java.lang.String)\l org.mapsforge.map.rendertheme.renderinstruction.TextKey.\<init\>(java.lang.String):void type: DIRECT \l0x000f: SGET  (r1 I:java.util.Map\<java.lang.String, org.mapsforge.map.rendertheme.renderinstruction.TextKey\>) =  org.mapsforge.map.rendertheme.renderinstruction.TextKey.TEXT_KEYS java.util.Map \l0x0011: INVOKE  \l  (r1 I:java.util.Map)\l  (r2 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  \l  (r0 I:org.mapsforge.map.rendertheme.renderinstruction.TextKey)\l \l}"];
MethodNode[shape=record,label="{static org.mapsforge.map.rendertheme.renderinstruction.TextKey org.mapsforge.map.rendertheme.renderinstruction.TextKey.getInstance((r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

