digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Circle.scaleStrokeWidth(FB)V" {
subgraph cluster_Region_1800843515 {
label = "R(1:(1:(2:2|(1:(1:4)))))";
node [shape=record,color=blue];
subgraph cluster_Region_476361139 {
label = "R(1:(2:2|(1:(1:4))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_693345500 {
label = "IF [B:1:0x0002] THEN: R(2:2|(1:(1:4))) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r3.scaleRadius == true) goto L_0x0004\l}"];
subgraph cluster_Region_1675756541 {
label = "R(2:2|(1:(1:4)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0004|r3.renderRadiusScaled.put(java.lang.Byte.valueOf(r5), java.lang.Float.valueOf(r3.radius * r4))\l}"];
subgraph cluster_Region_1030600210 {
label = "R(1:(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_71135525 {
label = "IF [B:3:0x0017] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0017|if (r3.stroke != null) goto L_0x0019\l}"];
subgraph cluster_Region_79376408 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0019|org.mapsforge.core.graphics.Paint org.mapsforge.core.graphics.Paint r0 = r3.graphicFactory.createPaint(r3.stroke)\lr0.setStrokeWidth(r3.strokeWidth * r4)\lr3.strokes.put(java.lang.Byte.valueOf(r5), r0)\l}"];
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.renderinstruction.Circle.scaleStrokeWidth((r3v0 'this' org.mapsforge.map.rendertheme.renderinstruction.Circle A[IMMUTABLE_TYPE, THIS]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_6[style=dashed];
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
}

