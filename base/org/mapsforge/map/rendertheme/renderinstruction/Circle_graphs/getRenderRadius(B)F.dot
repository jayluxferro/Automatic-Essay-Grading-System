digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Circle.getRenderRadius(B)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Float r2 = r1.renderRadiusScaled.get(java.lang.Byte.valueOf(r2))\l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|if (r2 != null) goto L_0x0014\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|java.lang.Float r2 = java.lang.Float.valueOf(r1.renderRadius)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|PHI: r2 \l  PHI: (r2v4 java.lang.Float) = (r2v3 java.lang.Float), (r2v7 java.lang.Float) binds: [B:1:0x000c, B:2:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|return r2.floatValue()\l}"];
MethodNode[shape=record,label="{private float org.mapsforge.map.rendertheme.renderinstruction.Circle.getRenderRadius((r1v0 'this' org.mapsforge.map.rendertheme.renderinstruction.Circle A[IMMUTABLE_TYPE, THIS]), (r2v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

