digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Circle.scaleStrokeWidth(FB)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.scaleRadius boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0031 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r0 I:java.util.Map\<java.lang.Byte, java.lang.Float\>) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.renderRadiusScaled java.util.Map \l0x0006: INVOKE  (r1 I:java.lang.Byte) = (r5 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x000a: IGET  (r2 I:float) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.radius float \l0x000c: ARITH  (r2 I:float) = (r2 I:float) * (r4 I:float) \l0x000e: INVOKE  (r2 I:java.lang.Float) = (r2 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0012: INVOKE  \l  (r0 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l0x0015: IGET  (r0 I:org.mapsforge.core.graphics.Paint) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.stroke org.mapsforge.core.graphics.Paint \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0031 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r0 I:org.mapsforge.core.graphics.GraphicFactory) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.graphicFactory org.mapsforge.core.graphics.GraphicFactory \l0x001b: IGET  (r1 I:org.mapsforge.core.graphics.Paint) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.stroke org.mapsforge.core.graphics.Paint \l0x001d: INVOKE  (r0 I:org.mapsforge.core.graphics.Paint) = \l  (r0 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r1 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.core.graphics.GraphicFactory.createPaint(org.mapsforge.core.graphics.Paint):org.mapsforge.core.graphics.Paint type: INTERFACE \l0x0021: IGET  (r1 I:float) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.strokeWidth float \l0x0023: ARITH  (r1 I:float) = (r1 I:float) * (r4 I:float) \l0x0025: INVOKE  (r0 I:org.mapsforge.core.graphics.Paint), (r1 I:float) org.mapsforge.core.graphics.Paint.setStrokeWidth(float):void type: INTERFACE \l0x0028: IGET  (r4 I:java.util.Map\<java.lang.Byte, org.mapsforge.core.graphics.Paint\>) = \l  (r3 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.strokes java.util.Map \l0x002a: INVOKE  (r5 I:java.lang.Byte) = (r5 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x002e: INVOKE  \l  (r4 I:java.util.Map)\l  (r5 I:java.lang.Object)\l  (r0 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|0x0031: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.renderinstruction.Circle.scaleStrokeWidth((r3 'this' I:org.mapsforge.map.rendertheme.renderinstruction.Circle A[IMMUTABLE_TYPE, THIS]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
}

