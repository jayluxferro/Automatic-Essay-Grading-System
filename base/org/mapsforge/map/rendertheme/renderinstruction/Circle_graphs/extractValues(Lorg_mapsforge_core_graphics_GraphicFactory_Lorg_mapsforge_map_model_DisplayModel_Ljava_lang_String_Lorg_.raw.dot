digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Circle.extractValues(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Lorg\/mapsforge\/map\/model\/DisplayModel;Ljava\/lang\/String;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r8 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getAttributeCount():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:27:0x0090 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r8 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeName(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r2 I:java.lang.String) = (r8 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeValue(int):java.lang.String type: INTERFACE \l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"radius\" \l0x0011: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0080 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: CONST_STR  (r3 I:java.lang.String) =  \"r\" \l0x0019: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: CONST_STR  (r3 I:java.lang.String) =  \"cat\" \l0x0022: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002b \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IPUT  \l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.category java.lang.String \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: CONST_STR  (r3 I:java.lang.String) =  \"fill\" \l0x002d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0041 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: IGET  (r1 I:org.mapsforge.core.graphics.Paint) = \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.fill org.mapsforge.core.graphics.Paint \l0x0035: INVOKE  (r3 I:org.mapsforge.map.rendertheme.ThemeCallback) = (r6 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getThemeCallback():org.mapsforge.map.rendertheme.ThemeCallback type: VIRTUAL \l0x0039: INVOKE  (r2 I:int) = \l  (r5 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r2 I:java.lang.String)\l  (r3 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l0x003d: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint), (r2 I:int) org.mapsforge.core.graphics.Paint.setColor(int):void type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|0x0041: CONST_STR  (r3 I:java.lang.String) =  \"scale\-radius\" \l0x0043: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0047|0x0047: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0050 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|0x0049: INVOKE  (r1 I:boolean) = (r2 I:java.lang.String) java.lang.Boolean.parseBoolean(java.lang.String):boolean type: STATIC \l0x004d: IPUT  \l  (r1 I:boolean)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.scaleRadius boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x0050|0x0050: CONST_STR  (r3 I:java.lang.String) =  \"stroke\" \l0x0052: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0066 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0058|0x0058: IGET  (r1 I:org.mapsforge.core.graphics.Paint) = \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.stroke org.mapsforge.core.graphics.Paint \l0x005a: INVOKE  (r3 I:org.mapsforge.map.rendertheme.ThemeCallback) = (r6 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getThemeCallback():org.mapsforge.map.rendertheme.ThemeCallback type: VIRTUAL \l0x005e: INVOKE  (r2 I:int) = \l  (r5 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r2 I:java.lang.String)\l  (r3 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l0x0062: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint), (r2 I:int) org.mapsforge.core.graphics.Paint.setColor(int):void type: INTERFACE \l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|0x0066: CONST_STR  (r3 I:java.lang.String) =  \"stroke\-width\" \l0x0068: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x006c|0x006c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x007b \l}"];
Node_22 [shape=record,label="{22\:\ 0x006e|0x006e: INVOKE  (r1 I:float) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeFloat(java.lang.String, java.lang.String):float type: STATIC \l0x0072: INVOKE  (r2 I:float) = (r6 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x0076: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0078: IPUT  \l  (r1 I:float)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.strokeWidth float \l}"];
Node_23 [shape=record,label="{23\:\ 0x007b|0x007b: INVOKE  (r5 I:org.xmlpull.v1.XmlPullParserException) = \l  (r7 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r0 I:int)\l org.mapsforge.map.rendertheme.XmlUtils.createXmlPullParserException(java.lang.String, java.lang.String, java.lang.String, int):org.xmlpull.v1.XmlPullParserException type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x007f|0x007f: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0080|0x0080: INVOKE  (r1 I:float) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeFloat(java.lang.String, java.lang.String):float type: STATIC \l0x0084: INVOKE  (r2 I:float) = (r6 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x0088: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x008a: IPUT  \l  (r1 I:float)\l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.radius float \l}"];
Node_26 [shape=record,label="{26\:\ 0x008c|0x008c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0090|0x0090: CONST_STR  (r5 I:java.lang.String) =  \"radius\" \l0x0092: IGET  (r6 I:float) = \l  (r4 I:org.mapsforge.map.rendertheme.renderinstruction.Circle)\l org.mapsforge.map.rendertheme.renderinstruction.Circle.radius float \l0x0094: INVOKE  (r6 I:java.lang.Float) = (r6 I:float) java.lang.Float.valueOf(float):java.lang.Float type: STATIC \l0x0098: INVOKE  \l  (r7 I:java.lang.String)\l  (r5 I:java.lang.String)\l  (r6 I:java.lang.Object)\l org.mapsforge.map.rendertheme.XmlUtils.checkMandatoryAttribute(java.lang.String, java.lang.String, java.lang.Object):void type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x009b|0x009b: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.renderinstruction.Circle.extractValues((r4 'this' I:org.mapsforge.map.rendertheme.renderinstruction.Circle A[IMMUTABLE_TYPE, THIS]), (r5 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_27;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_25;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_25[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_26;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_26;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_1;
Node_27 -> Node_28;
}

