digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Caption.computeVerticalOffset(B)F" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|float r4 = r3.dyScaled.get(java.lang.Byte.valueOf(r4)).floatValue()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0016|if (org.mapsforge.core.graphics.Position.ABOVE == r3.position) goto L_0x0044\l}"];
Node_2 [shape=record,label="{2\:\ 0x0018}"];
Node_3 [shape=record,label="{3\:\ 0x001c|if (org.mapsforge.core.graphics.Position.ABOVE_LEFT == r3.position) goto L_0x0044\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e}"];
Node_5 [shape=record,label="{5\:\ 0x0022|if (org.mapsforge.core.graphics.Position.ABOVE_RIGHT != r3.position) goto L_0x0025\l}"];
Node_6 [shape=record,label="{6\:\ 0x0025}"];
Node_7 [shape=record,label="{7\:\ 0x0029|if (org.mapsforge.core.graphics.Position.BELOW == r3.position) goto L_0x0037\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b}"];
Node_9 [shape=record,label="{9\:\ 0x002f|if (org.mapsforge.core.graphics.Position.BELOW_LEFT == r3.position) goto L_0x0037\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031}"];
Node_11 [shape=record,label="{11\:\ 0x0035|if (org.mapsforge.core.graphics.Position.BELOW_RIGHT != r3.position) goto L_?\l}"];
Node_12 [shape=record,label="{12\:\ 0x0037}"];
Node_13 [shape=record,label="{13\:\ 0x0044}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r4 \- ((((float) r3.bitmap.getHeight()) \/ 2.0f) + r3.gap)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return r4 + ((((float) r3.bitmap.getHeight()) \/ 2.0f) + r3.gap)\l}"];
MethodNode[shape=record,label="{private float org.mapsforge.map.rendertheme.renderinstruction.Caption.computeVerticalOffset((r3v0 'this' org.mapsforge.map.rendertheme.renderinstruction.Caption A[IMMUTABLE_TYPE, THIS]), (r4v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_13[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_16;
Node_13 -> Node_14;
}

