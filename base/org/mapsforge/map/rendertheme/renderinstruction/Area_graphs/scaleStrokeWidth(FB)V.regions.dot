digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Area.scaleStrokeWidth(FB)V" {
subgraph cluster_Region_238108509 {
label = "R(1:(1:(2:(1:4)|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1894511580 {
label = "R(1:(2:(1:4)|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1439605141 {
label = "IF [B:1:0x0002] THEN: R(2:(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r2.stroke != null) goto L_0x0004\l}"];
subgraph cluster_Region_1146061014 {
label = "R(2:(1:4)|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1375102114 {
label = "IF [B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r2.scale == org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction.Scale.NONE) goto L_0x000a\l}"];
subgraph cluster_Region_1446666774 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|r3 = 1.0f\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000c|PHI: r3 \l  PHI: (r3v1 float) = (r3v0 float), (r3v3 float) binds: [B:3:0x0008, B:4:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|org.mapsforge.core.graphics.Paint org.mapsforge.core.graphics.Paint r0 = r2.graphicFactory.createPaint(r2.stroke)\lr0.setStrokeWidth(r2.strokeWidth * r3)\lr2.strokes.put(java.lang.Byte.valueOf(r4), r0)\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_6 [shape=record,color=red,label="{6\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.renderinstruction.Area.scaleStrokeWidth((r2v0 'this' org.mapsforge.map.rendertheme.renderinstruction.Area A[IMMUTABLE_TYPE, THIS]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_2 -> Node_3;
}

