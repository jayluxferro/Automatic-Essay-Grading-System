digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Area.extractValues(Ljava\/lang\/String;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: INVOKE  (r1 I:int) = (r7 I:org.xmlpull.v1.XmlPullParser) org.xmlpull.v1.XmlPullParser.getAttributeCount():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:36:0x00d3 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = (r7 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeName(int):java.lang.String type: INTERFACE \l0x000b: INVOKE  (r2 I:java.lang.String) = (r7 I:org.xmlpull.v1.XmlPullParser), (r0 I:int) org.xmlpull.v1.XmlPullParser.getAttributeValue(int):java.lang.String type: INTERFACE \l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"src\" \l0x0011: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IPUT  \l  (r2 I:java.lang.String)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.src java.lang.String \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST_STR  (r3 I:java.lang.String) =  \"cat\" \l0x001d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: IPUT  \l  (r2 I:java.lang.String)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.category java.lang.String \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST_STR  (r3 I:java.lang.String) =  \"fill\" \l0x0029: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0042 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|0x002f: IGET  (r1 I:org.mapsforge.core.graphics.Paint) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.fill org.mapsforge.core.graphics.Paint \l0x0031: IGET  (r3 I:org.mapsforge.core.graphics.GraphicFactory) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.graphicFactory org.mapsforge.core.graphics.GraphicFactory \l0x0033: IGET  (r4 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.displayModel org.mapsforge.map.model.DisplayModel \l0x0035: INVOKE  (r4 I:org.mapsforge.map.rendertheme.ThemeCallback) = (r4 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getThemeCallback():org.mapsforge.map.rendertheme.ThemeCallback type: VIRTUAL \l0x0039: INVOKE  (r2 I:int) = \l  (r3 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l0x003d: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint), (r2 I:int) org.mapsforge.core.graphics.Paint.setColor(int):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: CONST_STR  (r3 I:java.lang.String) =  \"scale\" \l0x0044: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0052 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: INVOKE  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction$Scale) = \l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l  (r2 I:java.lang.String)\l org.mapsforge.map.rendertheme.renderinstruction.Area.scaleFromValue(java.lang.String):org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction$Scale type: VIRTUAL \l0x004e: IPUT  \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction$Scale)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.scale org.mapsforge.map.rendertheme.renderinstruction.RenderInstruction$Scale \l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|0x0052: CONST_STR  (r3 I:java.lang.String) =  \"stroke\" \l0x0054: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x006c \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: IGET  (r1 I:org.mapsforge.core.graphics.Paint) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.stroke org.mapsforge.core.graphics.Paint \l0x005c: IGET  (r3 I:org.mapsforge.core.graphics.GraphicFactory) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.graphicFactory org.mapsforge.core.graphics.GraphicFactory \l0x005e: IGET  (r4 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.displayModel org.mapsforge.map.model.DisplayModel \l0x0060: INVOKE  (r4 I:org.mapsforge.map.rendertheme.ThemeCallback) = (r4 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getThemeCallback():org.mapsforge.map.rendertheme.ThemeCallback type: VIRTUAL \l0x0064: INVOKE  (r2 I:int) = \l  (r3 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r2 I:java.lang.String)\l  (r4 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l0x0068: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint), (r2 I:int) org.mapsforge.core.graphics.Paint.setColor(int):void type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|0x006c: CONST_STR  (r3 I:java.lang.String) =  \"stroke\-width\" \l0x006e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0072|0x0072: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0083 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: INVOKE  (r1 I:float) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeFloat(java.lang.String, java.lang.String):float type: STATIC \l0x0078: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.displayModel org.mapsforge.map.model.DisplayModel \l0x007a: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x007e: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0080: IPUT  \l  (r1 I:float)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.strokeWidth float \l}"];
Node_21 [shape=record,label="{21\:\ 0x0083|0x0083: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-height\" \l0x0085: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x0089|0x0089: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x009b \l}"];
Node_23 [shape=record,label="{23\:\ 0x008b|0x008b: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x008f: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0090: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.displayModel org.mapsforge.map.model.DisplayModel \l0x0092: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x0096: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0098: IPUT  \l  (r1 I:float)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.height float \l}"];
Node_24 [shape=record,label="{24\:\ 0x009b|0x009b: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-percent\" \l0x009d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a1|0x00a1: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00aa \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a3|0x00a3: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x00a7: IPUT  \l  (r1 I:int)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.percent int \l}"];
Node_27 [shape=record,label="{27\:\ 0x00aa|0x00aa: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-scaling\" \l0x00ac: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00b0|0x00b0: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00b3 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b3|0x00b3: CONST_STR  (r3 I:java.lang.String) =  \"symbol\-width\" \l0x00b5: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b9|0x00b9: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00ce \l}"];
Node_32 [shape=record,label="{32\:\ 0x00bb|0x00bb: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.parseNonNegativeInteger(java.lang.String, java.lang.String):int type: STATIC \l0x00bf: CAST  (r1 I:float) = (float) (r1 I:int) \l0x00c0: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area) org.mapsforge.map.rendertheme.renderinstruction.Area.displayModel org.mapsforge.map.model.DisplayModel \l0x00c2: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x00c6: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x00c8: IPUT  \l  (r1 I:float)\l  (r5 I:org.mapsforge.map.rendertheme.renderinstruction.Area)\l org.mapsforge.map.rendertheme.renderinstruction.Area.width float \l}"];
Node_33 [shape=record,label="{33\:\ 0x00ca|0x00ca: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00ce|0x00ce: INVOKE  (r6 I:org.xmlpull.v1.XmlPullParserException) = \l  (r6 I:java.lang.String)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l  (r0 I:int)\l org.mapsforge.map.rendertheme.XmlUtils.createXmlPullParserException(java.lang.String, java.lang.String, java.lang.String, int):org.xmlpull.v1.XmlPullParserException type: STATIC \l}"];
Node_35 [shape=record,label="{35\:\ 0x00d2|0x00d2: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00d3|0x00d3: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.rendertheme.renderinstruction.Area.extractValues((r5 'this' I:org.mapsforge.map.rendertheme.renderinstruction.Area A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.xmlpull.v1.XmlPullParser A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException, org.xmlpull.v1.XmlPullParserException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_36;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_33;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_33;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_33;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_33;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_33;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_33;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_33[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_1;
Node_34 -> Node_35;
}

