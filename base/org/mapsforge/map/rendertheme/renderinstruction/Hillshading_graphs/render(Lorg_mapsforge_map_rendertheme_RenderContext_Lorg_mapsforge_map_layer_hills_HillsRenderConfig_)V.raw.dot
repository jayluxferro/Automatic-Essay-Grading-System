digraph "CFG fororg.mapsforge.map.rendertheme.renderinstruction.Hillshading.render(Lorg\/mapsforge\/map\/rendertheme\/RenderContext;Lorg\/mapsforge\/map\/layer\/hills\/HillsRenderConfig;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r63 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r64 I:?[OBJECT, ARRAY]) \l0x0004: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r65 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IGET  (r0 I:boolean) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.always boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r0 I:byte) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.layer byte \l0x000d: INVOKE  \l  (r2 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r0 I:byte)\l org.mapsforge.map.rendertheme.RenderContext.setDrawingLayers(byte):void type: VIRTUAL \l0x0010: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.renderer.HillshadingContainer) =  org.mapsforge.map.layer.renderer.HillshadingContainer \l0x0012: IGET  (r4 I:float) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.magnitude float \l0x0014: INVOKE  \l  (r0 I:org.mapsforge.map.layer.renderer.HillshadingContainer)\l  (r3 I:org.mapsforge.core.graphics.HillshadingBitmap)\l  (r4 I:float)\l  (r3 I:org.mapsforge.core.model.Rectangle)\l  (r3 I:org.mapsforge.core.model.Rectangle)\l org.mapsforge.map.layer.renderer.HillshadingContainer.\<init\>(org.mapsforge.core.graphics.HillshadingBitmap, float, org.mapsforge.core.model.Rectangle, org.mapsforge.core.model.Rectangle):void type: DIRECT \l0x0017: IGET  (r4 I:int) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.level int \l0x0019: NEW_INSTANCE  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer) =  org.mapsforge.map.layer.renderer.ShapePaintContainer \l0x001b: INVOKE  \l  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l  (r0 I:org.mapsforge.map.layer.renderer.ShapeContainer)\l  (r3 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.map.layer.renderer.ShapePaintContainer.\<init\>(org.mapsforge.map.layer.renderer.ShapeContainer, org.mapsforge.core.graphics.Paint):void type: DIRECT \l0x001e: INVOKE  \l  (r2 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r4 I:int)\l  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l org.mapsforge.map.rendertheme.RenderContext.addToCurrentDrawingLayer(int, org.mapsforge.map.layer.renderer.ShapePaintContainer):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0023: IGET  (r4 I:float) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.magnitude float \l0x0025: INVOKE  (r5 I:float) = (r65 I:org.mapsforge.map.layer.hills.HillsRenderConfig) org.mapsforge.map.layer.hills.HillsRenderConfig.getMaginuteScaleFactor():float type: VIRTUAL \l0x0029: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x002b: INVOKE  (r0 I:float) = (r0 I:float), (r4 I:float) java.lang.Math.max(float, float):float type: STATIC \l0x002f: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (1132396544(0x437f0000, float:255.0) ?[int, float, short, byte, char])\l \l0x0031: INVOKE  (r0 I:float) = (r0 I:float), (r4 I:float) java.lang.Math.min(float, float):float type: STATIC \l0x0035: ARITH  (r12 I:float) = (r0 I:float) \/ (r4 I:float) \l0x0037: IGET  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = (r2 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0039: IGET  (r13 I:org.mapsforge.core.model.Tile) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile \l0x003b: IGET  (r0 I:byte) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x003d: IGET  (r4 I:byte) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.maxZoom byte \l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|0x003f: IF  (r0 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:69:0x020c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0041|0x0041: IGET  (r4 I:byte) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.minZoom byte \l}"];
Node_9 [shape=record,label="{9\:\ 0x0043|0x0043: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:11:0x0047 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|0x0047: INVOKE  (r14 I:org.mapsforge.core.model.Point) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.getOrigin():org.mapsforge.core.model.Point type: VIRTUAL \l0x004b: IGET  (r4 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x004d: CAST  (r4 I:long) = (long) (r4 I:double) \l0x004e: CAST  (r4 I:double) = (double) (r4 I:long) \l0x004f: IGET  (r6 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0051: INVOKE  (r15 I:double) = (r4 I:double), (r6 I:long) org.mapsforge.core.util.MercatorProjection.pixelYToLatitude(double, long):double type: STATIC \l0x0055: IGET  (r4 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0057: CAST  (r4 I:long) = (long) (r4 I:double) \l0x0058: CAST  (r4 I:double) = (double) (r4 I:long) \l0x0059: IGET  (r6 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x005b: INVOKE  (r17 I:double) = (r4 I:double), (r6 I:long) org.mapsforge.core.util.MercatorProjection.pixelXToLongitude(double, long):double type: STATIC \l0x005f: IGET  (r4 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0061: CAST  (r4 I:long) = (long) (r4 I:double) \l0x0062: IGET  (r0 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0064: CAST  (r6 I:long) = (long) (r0 I:int) \l0x0065: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0066: CAST  (r4 I:double) = (double) (r4 I:long) \l0x0067: IGET  (r6 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0069: INVOKE  (r19 I:double) = (r4 I:double), (r6 I:long) org.mapsforge.core.util.MercatorProjection.pixelYToLatitude(double, long):double type: STATIC \l0x006d: IGET  (r4 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x006f: CAST  (r4 I:long) = (long) (r4 I:double) \l0x0070: IGET  (r0 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0072: CAST  (r6 I:long) = (long) (r0 I:int) \l0x0073: ARITH  (r4 I:long) = (r4 I:long) + (r6 I:long) \l0x0074: CAST  (r4 I:double) = (double) (r4 I:long) \l0x0075: IGET  (r6 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0077: INVOKE  (r4 I:double) = (r4 I:double), (r6 I:long) org.mapsforge.core.util.MercatorProjection.pixelXToLongitude(double, long):double type: STATIC \l0x007b: ARITH  (r6 I:double) = (r15 I:double) \- (r19 I:double) \l0x007d: ARITH  (r8 I:double) = (r4 I:double) \- (r17 I:double) \l0x007f: IGET  (r0 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0081: MOVE  (r21 I:?[long, double]) = (r4 I:?[long, double]) \l0x0083: CAST  (r3 I:double) = (double) (r0 I:int) \l0x0084: ARITH  (r23 I:double) = (r3 I:double) \/ (r6 I:double) \l0x0086: IGET  (r0 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0088: CAST  (r3 I:double) = (double) (r0 I:int) \l0x0089: ARITH  (r25 I:double) = (r3 I:double) \/ (r8 I:double) \l0x008b: CMP_G  (r0 I:int) = (r21 I:double), (r17 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x008d|0x008d: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:14:0x0096 \l}"];
Node_13 [shape=record,label="{13\:\ 0x008f|0x008f: IGET  (r3 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0091: CAST  (r3 I:double) = (double) (r3 I:long) \l0x0092: ARITH  (r4 I:double) = (r21 I:double) + (r3 I:double) \l0x0094: MOVE  (r21 I:?[long, double]) = (r4 I:?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0096|0x0096: INVOKE  (r3 I:double) = (r17 I:double) java.lang.Math.floor(double):double type: STATIC \l0x009a: CAST  (r0 I:int) = (int) (r3 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x009b|0x009b: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009c: CAST  (r9 I:double) = (double) (r3 I:int) \l0x009d: CMP_G  (r0 I:int) = (r9 I:double), (r21 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x009f|0x009f: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:68:0x020b \l}"];
Node_17 [shape=record,label="{17\:\ 0x00a1|0x00a1: INVOKE  (r4 I:double) = (r19 I:double) java.lang.Math.floor(double):double type: STATIC \l0x00a5: CAST  (r0 I:int) = (int) (r4 I:double) \l0x00a6: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x00a7|0x00a7: CAST  (r7 I:double) = (double) (r5 I:int) \l0x00a8: CMP_G  (r0 I:int) = (r7 I:double), (r15 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x00aa|0x00aa: IF  (r0 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:67:0x0202 \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ac|0x00ac: ARITH  (r6 I:int) = (r3 I:int) + (1 int) \l0x00ae: ARITH  (r4 I:int) = (r5 I:int) + (1 int) \l0x00b0: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b1: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r65 I:?[OBJECT, ARRAY]) \l0x00b3: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b4: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b5: MOVE  (r27 I:?[long, double]) = (r7 I:?[long, double]) \l0x00b7: MOVE  (r7 I:?[long, double]) = (r23 I:?[long, double]) \l0x00b9: MOVE  (r29 I:?[long, double]) = (r9 I:?[long, double]) \l0x00bb: MOVE  (r9 I:?[long, double]) = (r25 I:?[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00bd|SYNTHETIC\lSplitter:B:21:0x00bd\l}"];
Node_22 [shape=record,label="{22\:\ ?|Splitter:B:21:0x00bd\l|0x00bd: INVOKE  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) = \l  (r4 I:org.mapsforge.map.layer.hills.HillsRenderConfig)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:double)\l  (r9 I:double)\l org.mapsforge.map.layer.hills.HillsRenderConfig.getShadingTile(int, int, double, double):org.mapsforge.core.graphics.HillshadingBitmap type: VIRTUAL A[Catch:\{ Exception \-\> 0x00c2 \}, TRY_ENTER]\l0x00c0: NOP   A[TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x00c2|ExcHandler: Exception null\lSplitter:B:21:0x00bd\l|0x00c2: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c3|0x00c3: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00c4: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.rendertheme.renderinstruction.Hillshading.LOGGER java.util.logging.Logger \l0x00c6: SGET  (r5 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x00c8: INVOKE  (r6 I:java.lang.String) = (r4 I:java.lang.Exception) java.lang.Exception.getMessage():java.lang.String type: VIRTUAL \l0x00cc: INVOKE  \l  (r0 I:java.util.logging.Logger)\l  (r5 I:java.util.logging.Level)\l  (r6 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l0x00cf: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00d0|0x00d0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00e0 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00d2|0x00d2: IGET  (r4 I:boolean) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.always boolean \l}"];
Node_28 [shape=record,label="{28\:\ 0x00d4|0x00d4: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00e0 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00d6|0x00d6: MOVE  (r37 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00d8: MOVE  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00da: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00db: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r64 I:?[OBJECT, ARRAY]) \l0x00dd: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00e0|0x00e0: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00f4 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00e2|0x00e2: INVOKE  (r5 I:int) = (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getPadding():int type: INTERFACE \l0x00e6: INVOKE  (r6 I:int) = (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x00ea: ARITH  (r7 I:int) = (r5 I:int) * (2 int) \l0x00ec: ARITH  (r6 I:int) = (r6 I:int) \- (r7 I:int) \l0x00ed: INVOKE  (r8 I:int) = (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x00f1: ARITH  (r7 I:int) = (r8 I:int) \- (r7 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00f4|0x00f4: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00f5: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00f6: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00f7|0x00f7: CAST  (r8 I:double) = (double) (r5 I:int) \l0x00f8: MOVE  (r31 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00fa: CAST  (r4 I:double) = (double) (r6 I:int) \l0x00fb: ARITH  (r32 I:double) = (r8 I:double) + (r4 I:double) \l0x00fd: MOVE  (r34 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00ff: CAST  (r0 I:double) = (double) (r7 I:int) \l0x0100: ARITH  (r35 I:double) = (r8 I:double) + (r0 I:double) \l0x0102: IGET  (r10 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0104: MOVE  (r38 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0106: MOVE  (r37 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0108: CAST  (r2 I:double) = (double) (r10 I:int) \l0x0109: IGET  (r10 I:int) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x010b: MOVE  (r39 I:?[long, double]) = (r2 I:?[long, double]) \l0x010d: CAST  (r2 I:double) = (double) (r10 I:int) \l0x010e: MOVE  (r41 I:?[long, double]) = (r2 I:?[long, double]) \l0x0110: CAST  (r2 I:double) = (double) (r11 I:int) \l0x0111: CONST  (r43 I:?[long, double]) = (0 ?[long, double]) \l0x0113: CMP_L  (r10 I:int) = (r2 I:double), (r15 I:double) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0115|0x0115: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:37:0x0127 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0117|0x0117: ARITH  (r2 I:double) = (r2 I:double) \- (r15 I:double) \l0x0118: MOVE  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011a: MOVE  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x011c: CONST  (r10 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x011d: CAST  (r11 I:double) = (double) (r10 I:int) \l0x011e: ARITH  (r2 I:double) = (r2 I:double) \/ (r11 I:double) \l0x011f: ARITH  (r2 I:double) = (r2 I:double) * (r0 I:double) \l0x0121: ARITH  (r2 I:double) = (r2 I:double) + (r8 I:double) \l0x0122: MOVE  (r50 I:?[long, double]) = (r2 I:?[long, double]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0124|0x0124: MOVE  (r2 I:?[long, double]) = (r43 I:?[long, double]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0127|0x0127: MOVE  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0129: MOVE  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x012b: CMP_L  (r10 I:int) = (r15 I:double), (r2 I:double) \l}"];
Node_38 [shape=record,label="{38\:\ 0x012d|0x012d: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:40:0x013e \l}"];
Node_39 [shape=record,label="{39\:\ 0x012f|0x012f: ARITH  (r10 I:double) = (r43 I:double) \/ (r0 I:double) \l0x0131: ARITH  (r2 I:double) = (r2 I:double) + (r10 I:double) \l0x0132: IGET  (r10 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0134: INVOKE  (r2 I:double) = (r2 I:double), (r10 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0138: IGET  (r10 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x013a: ARITH  (r2 I:double) = (r2 I:double) \- (r10 I:double) \l0x013b: MOVE  (r50 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x013e|0x013e: MOVE  (r50 I:?[long, double]) = (r8 I:?[long, double]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0141|0x0141: CMP_G  (r10 I:int) = (r27 I:double), (r19 I:double) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0143|0x0143: IF  (r10 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:45:0x0159 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0145|0x0145: ARITH  (r7 I:int) = (r31 I:int) + (r7 I:int) \l0x0147: CAST  (r10 I:double) = (double) (r7 I:int) \l0x0148: ARITH  (r27 I:double) = (r19 I:double) \- (r27 I:double) \l0x014a: MOVE  (r61 I:?[long, double]) = (r2 I:?[long, double]) \l0x014c: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x014d: CAST  (r2 I:double) = (double) (r7 I:int) \l0x014e: ARITH  (r27 I:double) = (r27 I:double) \/ (r2 I:double) \l0x0150: ARITH  (r27 I:double) = (r27 I:double) * (r0 I:double) \l0x0152: ARITH  (r35 I:double) = (r10 I:double) \- (r27 I:double) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0154|0x0154: MOVE  (r54 I:?[long, double]) = (r35 I:?[long, double]) \l0x0156: MOVE  (r59 I:?[long, double]) = (r41 I:?[long, double]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0159|0x0159: MOVE  (r61 I:?[long, double]) = (r2 I:?[long, double]) \l0x015b: CMP_G  (r2 I:int) = (r19 I:double), (r27 I:double) \l}"];
Node_46 [shape=record,label="{46\:\ 0x015d|0x015d: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:44:0x0154 \l}"];
Node_47 [shape=record,label="{47\:\ 0x015f|0x015f: ARITH  (r2 I:double) = (r43 I:double) \/ (r0 I:double) \l0x0161: ARITH  (r2 I:double) = (r27 I:double) + (r2 I:double) \l0x0163: IGET  (r10 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x0165: INVOKE  (r2 I:double) = (r2 I:double), (r10 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0169: IGET  (r10 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x016b: ARITH  (r2 I:double) = (r2 I:double) \- (r10 I:double) \l0x016c: MOVE  (r59 I:?[long, double]) = (r2 I:?[long, double]) \l0x016e: MOVE  (r54 I:?[long, double]) = (r35 I:?[long, double]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0170|0x0170: CMP_G  (r2 I:int) = (r29 I:double), (r17 I:double) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0172|0x0172: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:52:0x0183 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0174|0x0174: ARITH  (r2 I:double) = (r17 I:double) \- (r29 I:double) \l0x0176: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0177: CAST  (r10 I:double) = (double) (r7 I:int) \l0x0178: ARITH  (r2 I:double) = (r2 I:double) \/ (r10 I:double) \l0x0179: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x017b: ARITH  (r8 I:double) = (r8 I:double) + (r2 I:double) \l}"];
Node_51 [shape=record,label="{51\:\ 0x017c|0x017c: MOVE  (r48 I:?[long, double]) = (r8 I:?[long, double]) \l0x017e: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r38 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0180: MOVE  (r7 I:?[long, double]) = (r43 I:?[long, double]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0183|0x0183: CMP_G  (r2 I:int) = (r17 I:double), (r29 I:double) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0185|0x0185: IF  (r2 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:51:0x017c \l}"];
Node_54 [shape=record,label="{54\:\ 0x0187|0x0187: ARITH  (r2 I:double) = (r43 I:double) \/ (r4 I:double) \l0x0189: ARITH  (r2 I:double) = (r29 I:double) + (r2 I:double) \l0x018b: IGET  (r10 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x018d: INVOKE  (r2 I:double) = (r2 I:double), (r10 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x0191: IGET  (r10 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0193: ARITH  (r2 I:double) = (r2 I:double) \- (r10 I:double) \l0x0194: MOVE  (r48 I:?[long, double]) = (r8 I:?[long, double]) \l0x0196: MOVE  (r7 I:?[long, double]) = (r2 I:?[long, double]) \l0x0197: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r38 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_55 [shape=record,label="{55\:\ 0x0199|0x0199: CAST  (r2 I:double) = (double) (r3 I:int) \l0x019a: CMP_L  (r9 I:int) = (r2 I:double), (r21 I:double) \l}"];
Node_56 [shape=record,label="{56\:\ 0x019c|0x019c: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:59:0x01af \l}"];
Node_57 [shape=record,label="{57\:\ 0x019e|0x019e: ARITH  (r0 I:int) = (r31 I:int) + (r6 I:int) \l0x01a0: CAST  (r0 I:double) = (double) (r0 I:int) \l0x01a1: ARITH  (r2 I:double) = (r2 I:double) \- (r21 I:double) \l0x01a3: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x01a4: CAST  (r9 I:double) = (double) (r6 I:int) \l0x01a5: ARITH  (r2 I:double) = (r2 I:double) \/ (r9 I:double) \l0x01a6: ARITH  (r4 I:double) = (r4 I:double) * (r2 I:double) \l0x01a8: ARITH  (r32 I:double) = (r0 I:double) \- (r4 I:double) \l}"];
Node_58 [shape=record,label="{58\:\ 0x01aa|0x01aa: MOVE  (r52 I:?[long, double]) = (r32 I:?[long, double]) \l0x01ac: MOVE  (r57 I:?[long, double]) = (r39 I:?[long, double]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x01af|0x01af: CMP_L  (r4 I:int) = (r21 I:double), (r2 I:double) \l}"];
Node_60 [shape=record,label="{60\:\ 0x01b1|0x01b1: IF  (r4 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:58:0x01aa \l}"];
Node_61 [shape=record,label="{61\:\ 0x01b3|0x01b3: ARITH  (r43 I:double) = (r43 I:double) \/ (r0 I:double) \l0x01b5: ARITH  (r2 I:double) = (r2 I:double) + (r43 I:double) \l0x01b7: IGET  (r0 I:long) = (r13 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.mapSize long \l0x01b9: INVOKE  (r0 I:double) = (r2 I:double), (r0 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x01bd: IGET  (r2 I:double) = (r14 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x01bf: ARITH  (r2 I:double) = (r0 I:double) \- (r2 I:double) \l0x01c1: MOVE  (r57 I:?[long, double]) = (r2 I:?[long, double]) \l0x01c3: MOVE  (r52 I:?[long, double]) = (r32 I:?[long, double]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x01c5|0x01c5: IF  (r34 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x01c9 \l}"];
Node_63 [shape=record,label="{63\:\ 0x01c7|0x01c7: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_64 [shape=record,label="{64\:\ 0x01c9|0x01c9: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle \l0x01cb: MOVE  (r47 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x01cd: INVOKE  \l  (r47 I:org.mapsforge.core.model.Rectangle)\l  (r48 I:double)\l  (r50 I:double)\l  (r52 I:double)\l  (r54 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT \l}"];
Node_65 [shape=record,label="{65\:\ 0x01d0|0x01d0: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle \l0x01d2: MOVE  (r52 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x01d4: MOVE  (r53 I:?[long, double]) = (r7 I:?[long, double]) \l0x01d6: MOVE  (r55 I:?[long, double]) = (r61 I:?[long, double]) \l0x01d8: INVOKE  \l  (r52 I:org.mapsforge.core.model.Rectangle)\l  (r53 I:double)\l  (r55 I:double)\l  (r57 I:double)\l  (r59 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT \l0x01db: NEW_INSTANCE  (r2 I:org.mapsforge.map.layer.renderer.HillshadingContainer) =  org.mapsforge.map.layer.renderer.HillshadingContainer \l0x01dd: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r34 I:?[OBJECT, ARRAY]) \l0x01df: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r45 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01e1: INVOKE  \l  (r2 I:org.mapsforge.map.layer.renderer.HillshadingContainer)\l  (r4 I:org.mapsforge.core.graphics.HillshadingBitmap)\l  (r3 I:float)\l  (r0 I:org.mapsforge.core.model.Rectangle)\l  (r1 I:org.mapsforge.core.model.Rectangle)\l org.mapsforge.map.layer.renderer.HillshadingContainer.\<init\>(org.mapsforge.core.graphics.HillshadingBitmap, float, org.mapsforge.core.model.Rectangle, org.mapsforge.core.model.Rectangle):void type: DIRECT \l0x01e4: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r63 I:?[OBJECT, ARRAY]) \l0x01e6: IGET  (r0 I:byte) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.layer byte \l0x01e8: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r64 I:?[OBJECT, ARRAY]) \l0x01ea: INVOKE  \l  (r4 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r0 I:byte)\l org.mapsforge.map.rendertheme.RenderContext.setDrawingLayers(byte):void type: VIRTUAL \l0x01ed: IGET  (r0 I:int) = \l  (r1 I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading)\l org.mapsforge.map.rendertheme.renderinstruction.Hillshading.level int \l0x01ef: NEW_INSTANCE  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer) =  org.mapsforge.map.layer.renderer.ShapePaintContainer \l0x01f1: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01f2: INVOKE  \l  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l  (r2 I:org.mapsforge.map.layer.renderer.ShapeContainer)\l  (r6 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.map.layer.renderer.ShapePaintContainer.\<init\>(org.mapsforge.map.layer.renderer.ShapeContainer, org.mapsforge.core.graphics.Paint):void type: DIRECT \l0x01f5: INVOKE  \l  (r4 I:org.mapsforge.map.rendertheme.RenderContext)\l  (r0 I:int)\l  (r5 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l org.mapsforge.map.rendertheme.RenderContext.addToCurrentDrawingLayer(int, org.mapsforge.map.layer.renderer.ShapePaintContainer):void type: VIRTUAL \l}"];
Node_66 [shape=record,label="{66\:\ 0x01f8|0x01f8: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01f9: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x01fa: MOVE  (r9 I:?[long, double]) = (r29 I:?[long, double]) \l0x01fc: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r37 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01fe: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r46 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_67 [shape=record,label="{67\:\ 0x0202|0x0202: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0203: MOVE  (r37 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0205: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0206: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0207: ARITH  (r0 I:int) = (r37 I:int) + (1 int) \l}"];
Node_68 [shape=record,label="{68\:\ 0x020b|0x020b: RETURN   \l}"];
Node_69 [shape=record,label="{69\:\ 0x020c|0x020c: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.renderinstruction.Hillshading.render((r63 'this' I:org.mapsforge.map.rendertheme.renderinstruction.Hillshading A[IMMUTABLE_TYPE, THIS]), (r64 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r65 I:org.mapsforge.map.layer.hills.HillsRenderConfig A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_69;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_69[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_68;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_67;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_24;
Node_22 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_66;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_41;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_41;
Node_40 -> Node_36;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_45;
Node_43 -> Node_44;
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_44;
Node_46 -> Node_47[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_52;
Node_50 -> Node_51;
Node_51 -> Node_55;
Node_52 -> Node_53;
Node_53 -> Node_51;
Node_53 -> Node_54[style=dashed];
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_58 -> Node_62;
Node_59 -> Node_60;
Node_60 -> Node_58;
Node_60 -> Node_61[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_65;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_18;
Node_67 -> Node_15;
}

