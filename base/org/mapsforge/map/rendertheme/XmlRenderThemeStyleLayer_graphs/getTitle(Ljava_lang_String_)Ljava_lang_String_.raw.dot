digraph "CFG fororg.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer.getTitle(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<java.lang.String, java.lang.String\>) = \l  (r1 I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer)\l org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer.titles java.util.Map \l0x0002: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0006: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0015 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r2 I:java.util.Map\<java.lang.String, java.lang.String\>) = \l  (r1 I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer)\l org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer.titles java.util.Map \l0x000c: IGET  (r0 I:java.lang.String) = \l  (r1 I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer)\l org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer.defaultLanguage java.lang.String \l0x000e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r2 I:java.lang.String) = (java.lang.String) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: RETURN  (r2 I:java.lang.String) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer.getTitle((r1 'this' I:org.mapsforge.map.rendertheme.XmlRenderThemeStyleLayer A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
}

