digraph "CFG fororg.mapsforge.map.rendertheme.StreamRenderTheme.\<init\>(Ljava\/lang\/String;Ljava\/io\/InputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  \l  (r1 I:org.mapsforge.map.rendertheme.StreamRenderTheme)\l  (r2 I:java.lang.String)\l  (r3 I:java.io.InputStream)\l  (r0 I:org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback)\l org.mapsforge.map.rendertheme.StreamRenderTheme.\<init\>(java.lang.String, java.io.InputStream, org.mapsforge.map.rendertheme.XmlRenderThemeMenuCallback):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.rendertheme.StreamRenderTheme.\<init\>((r1 'this' I:org.mapsforge.map.rendertheme.StreamRenderTheme A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

