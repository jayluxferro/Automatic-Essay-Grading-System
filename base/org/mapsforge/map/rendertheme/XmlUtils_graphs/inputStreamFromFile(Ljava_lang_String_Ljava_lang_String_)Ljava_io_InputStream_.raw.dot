digraph "CFG fororg.mapsforge.map.rendertheme.XmlUtils.inputStreamFromFile(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.io.File) = (r4 I:java.lang.String), (r5 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.getFile(java.lang.String, java.lang.String):java.io.File type: STATIC \l0x0004: INVOKE  (r1 I:boolean) = (r0 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002a \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: INVOKE  (r1 I:int) = (r5 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0012: INVOKE  (r1 I:char) = (r5 I:java.lang.String), (r1 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0016: SGET  (r3 I:char) =  java.io.File.separatorChar char \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001b: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x001f: INVOKE  (r0 I:java.io.File) = (r4 I:java.lang.String), (r5 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.getFile(java.lang.String, java.lang.String):java.io.File type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r4 I:boolean) = (r0 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|0x002a: INVOKE  (r4 I:boolean) = (r0 I:java.io.File) java.io.File.isFile():boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0036 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r4 I:boolean) = (r0 I:java.io.File) java.io.File.canRead():boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0037 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|0x0037: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: NEW_INSTANCE  (r4 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x003b: INVOKE  (r4 I:java.io.FileInputStream), (r0 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: RETURN  (r4 I:java.io.InputStream) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: RETURN  (r2 I:java.io.InputStream) \l}"];
MethodNode[shape=record,label="{private static java.io.InputStream org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromFile((r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_15;
Node_8 -> Node_14[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
}

