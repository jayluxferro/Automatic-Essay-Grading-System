digraph "CFG fororg.mapsforge.map.rendertheme.XmlUtils.createInputStream(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"assets:\" \l0x0002: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"assets:\" \l0x000a: INVOKE  (r0 I:int) = (r0 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x000e: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0012: INVOKE  (r2 I:java.io.InputStream) = \l  (r2 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromAssets(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: CONST_STR  (r0 I:java.lang.String) =  \"file:\" \l0x0019: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x002e \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: CONST_STR  (r2 I:java.lang.String) =  \"file:\" \l0x0021: INVOKE  (r2 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0025: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l0x0029: INVOKE  (r2 I:java.io.InputStream) = (r3 I:java.lang.String), (r4 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromFile(java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: CONST_STR  (r0 I:java.lang.String) =  \"jar:\" \l0x0030: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0052 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: CONST_STR  (r0 I:java.lang.String) =  \"jar:\/org\/mapsforge\/android\/maps\/rendertheme\" \l0x0038: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String), (r0 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003f \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: INVOKE  (r0 I:java.io.InputStream) = (r3 I:java.lang.String), (r4 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromFile(java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_12 [shape=record,label="{12\:\ 0x0043|0x0043: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|0x0045: INVOKE  (r2 I:java.io.InputStream) = \l  (r2 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromAssets(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x007b \l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|0x004d: INVOKE  (r2 I:java.io.InputStream) = (r3 I:java.lang.String), (r4 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromJar(java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: CONST_STR  (r2 I:java.lang.String) =  \"jar:\" \l0x0054: INVOKE  (r2 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0065 \l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|0x005a: CONST_STR  (r2 I:java.lang.String) =  \"jar:\" \l0x005c: INVOKE  (r2 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0060: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0065|0x0065: CONST_STR  (r2 I:java.lang.String) =  \"jar:\/org\/mapsforge\/android\/maps\/rendertheme\" \l0x0067: INVOKE  (r2 I:boolean) = (r4 I:java.lang.String), (r2 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x006b|0x006b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0077 \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: CONST_STR  (r2 I:java.lang.String) =  \"jar:\/org\/mapsforge\/android\/maps\/rendertheme\" \l0x006f: INVOKE  (r2 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0073: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int) java.lang.String.substring(int):java.lang.String type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0077|0x0077: INVOKE  (r2 I:java.io.InputStream) = (r3 I:java.lang.String), (r4 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromJar(java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_24 [shape=record,label="{24\:\ 0x007b|0x007b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_25 [shape=record,label="{25\:\ 0x007d|0x007d: CONST_STR  (r2 I:java.lang.String) =  \"\/assets\/\" \l0x007f: INVOKE  (r2 I:java.io.InputStream) = (r2 I:java.lang.String), (r4 I:java.lang.String) org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromJar(java.lang.String, java.lang.String):java.io.InputStream type: STATIC \l}"];
Node_26 [shape=record,label="{26\:\ 0x0083|0x0083: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0085|0x0085: SGET  (r3 I:java.util.logging.Logger) =  org.mapsforge.map.rendertheme.XmlUtils.LOGGER java.util.logging.Logger \l0x0087: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0089: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x008c: CONST_STR  (r1 I:java.lang.String) =  \"internal resource: \" \l0x008e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0091: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0094: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0098: INVOKE  (r3 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.info(java.lang.String):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x009b|0x009b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x009e \l}"];
Node_29 [shape=record,label="{29\:\ 0x009d|0x009d: RETURN  (r2 I:java.io.InputStream) \l}"];
Node_30 [shape=record,label="{30\:\ 0x009e|0x009e: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.rendertheme.XmlUtils.LOGGER java.util.logging.Logger \l0x00a0: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00a2: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a5: CONST_STR  (r0 I:java.lang.String) =  \"invalid resource: \" \l0x00a7: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00aa: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ad: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b1: INVOKE  (r2 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.severe(java.lang.String):void type: VIRTUAL \l0x00b4: NEW_INSTANCE  (r2 I:java.io.FileNotFoundException) =  java.io.FileNotFoundException \l0x00b6: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00b8: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00bb: CONST_STR  (r0 I:java.lang.String) =  \"invalid resource: \" \l0x00bd: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c0: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00c3: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00c7: INVOKE  \l  (r2 I:java.io.FileNotFoundException)\l  (r3 I:java.lang.String)\l java.io.FileNotFoundException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_31 [shape=record,label="{31\:\ 0x00ca|0x00ca: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static java.io.InputStream org.mapsforge.map.rendertheme.XmlUtils.createInputStream((r2 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_24;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_24;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_17[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_24;
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_30 -> Node_31;
}

