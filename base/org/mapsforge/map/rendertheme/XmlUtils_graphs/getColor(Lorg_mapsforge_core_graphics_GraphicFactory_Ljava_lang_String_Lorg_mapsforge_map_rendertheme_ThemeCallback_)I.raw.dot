digraph "CFG fororg.mapsforge.map.rendertheme.XmlUtils.getColor(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Ljava\/lang\/String;Lorg\/mapsforge\/map\/rendertheme\/ThemeCallback;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:boolean) = (r4 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004d \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: INVOKE  (r0 I:char) = (r4 I:java.lang.String), (r0 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (35 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x004d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0013: CONST  (r1 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0014: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x0019: INVOKE  (r3 I:int) = \l  (r3 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r4 I:java.lang.String)\l  (r0 I:int)\l  (r2 I:int)\l  (r5 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, int, int, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: RETURN  (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r0 I:int) = (r4 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0022: CONST  (r1 I:?[int, float, short, byte, char]) = (9 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0036 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: CONST  (r0 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0027: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.String), (r2 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x002b: CONST  (r2 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l0x002d: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r2 I:int) java.lang.Integer.parseInt(java.lang.String, int):int type: STATIC \l0x0031: INVOKE  (r3 I:int) = \l  (r3 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r4 I:java.lang.String)\l  (r1 I:int)\l  (r0 I:int)\l  (r5 I:org.mapsforge.map.rendertheme.ThemeCallback)\l org.mapsforge.map.rendertheme.XmlUtils.getColor(org.mapsforge.core.graphics.GraphicFactory, java.lang.String, int, int, org.mapsforge.map.rendertheme.ThemeCallback):int type: STATIC \l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|0x0035: RETURN  (r3 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003a: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003d: CONST_STR  (r0 I:java.lang.String) =  \"unsupported color format: \" \l0x003f: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0042: INVOKE  (r5 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0045: INVOKE  (r4 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0049: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x004c|0x004c: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004f: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0051: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0054: CONST_STR  (r0 I:java.lang.String) =  \"unsupported color format: \" \l0x0056: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0059: INVOKE  (r5 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x005c: INVOKE  (r4 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0060: INVOKE  \l  (r3 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0063|0x0063: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int org.mapsforge.map.rendertheme.XmlUtils.getColor((r3 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.mapsforge.map.rendertheme.ThemeCallback A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

