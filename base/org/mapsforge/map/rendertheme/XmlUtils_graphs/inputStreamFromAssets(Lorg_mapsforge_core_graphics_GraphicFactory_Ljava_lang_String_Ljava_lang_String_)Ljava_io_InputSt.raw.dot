digraph "CFG fororg.mapsforge.map.rendertheme.XmlUtils.inputStreamFromAssets(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:java.io.InputStream) = \l  (r1 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l org.mapsforge.core.graphics.GraphicFactory.platformSpecificSources(java.lang.String, java.lang.String):java.io.InputStream type: INTERFACE A[Catch:\{ IOException \-\> 0x0006 \}, TRY_ENTER]\l0x0004: NOP   A[TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:1:0x0001\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: RETURN  (r1 I:java.io.InputStream) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: RETURN  (r0 I:java.io.InputStream) \l}"];
MethodNode[shape=record,label="{private static java.io.InputStream org.mapsforge.map.rendertheme.XmlUtils.inputStreamFromAssets((r1 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_6;
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
}

