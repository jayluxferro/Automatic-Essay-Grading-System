digraph "CFG fororg.mapsforge.map.reader.ReadBuffer.readFromFile(I)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r4.bufferData == null) goto L_0x000a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r4.bufferData.length \>= r5) goto L_0x0031\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (r5 \<= org.mapsforge.core.util.Parameters.MAXIMUM_BUFFER_SIZE) goto L_0x0025\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|java.util.logging.Logger r0 = LOGGER\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"invalid read length: \")\lr2.append(r5)\lr0.warning(r2.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|r4.bufferData = new byte[r5]\lr4.bufferWrapper = java.nio.ByteBuffer.wrap(r4.bufferData, 0, r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|r4.bufferPosition = 0\lr4.bufferWrapper.clear()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|if (r4.inputChannel.read(r4.bufferWrapper) != r5) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|SYNTHETIC\lRETURN\lORIG_RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.ReadBuffer.readFromFile((r4v0 'this' org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, THIS]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
}

