digraph "CFG fororg.mapsforge.map.reader.ReadBuffer.readTags([Lorg\/mapsforge\/core\/model\/Tag;B)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList \l0x0002: INVOKE  (r0 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:java.util.List\<java.lang.Integer\>) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.tagIds java.util.List \l0x0007: INVOKE  (r1 I:java.util.List) java.util.List.clear():void type: INTERFACE \l0x000a: ARRAY_LENGTH  (r1 I:int) = (r7 I:?[]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: INVOKE  (r2 I:int) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r2 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:6:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IGET  (r3 I:java.util.List\<java.lang.Integer\>) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.tagIds java.util.List \l0x0018: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC \l0x001c: INVOKE  (r3 I:java.util.List), (r2 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l0x001f: ARITH  (r8 I:int) = (r8 I:int) + (\-1 int) \l0x0021: CAST  (r8 I:byte) = (byte) (r8 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: SGET  (r7 I:java.util.logging.Logger) =  org.mapsforge.map.reader.ReadBuffer.LOGGER java.util.logging.Logger \l0x0025: NEW_INSTANCE  (r8 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: INVOKE  (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002a: CONST_STR  (r0 I:java.lang.String) =  \"invalid tag ID: \" \l0x002c: INVOKE  (r8 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r8 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r7 I:java.util.logging.Logger), (r8 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x0039: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: RETURN  (r7 I:java.util.List\<org.mapsforge.core.model.Tag\>) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: IGET  (r8 I:java.util.List\<java.lang.Integer\>) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.tagIds java.util.List \l0x003d: INVOKE  (r8 I:java.util.Iterator) = (r8 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: INVOKE  (r1 I:boolean) = (r8 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00eb \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: INVOKE  (r1 I:java.lang.Object) = (r8 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x004b: CHECK_CAST  (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:?[OBJECT, ARRAY]) \l0x004d: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL \l0x0051: AGET  (r1 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0053: IGET  (r2 I:java.lang.String) = (r1 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.value java.lang.String \l0x0055: INVOKE  (r2 I:int) = (r2 I:java.lang.String) java.lang.String.length():int type: VIRTUAL \l0x0059: CONST  (r3 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|0x005a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00e6 \l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|0x005c: IGET  (r2 I:java.lang.String) = (r1 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.value java.lang.String \l0x005e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005f: INVOKE  (r2 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x0063: CONST  (r3 I:?[int, float, short, byte, char]) = (37 ?[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0065|0x0065: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x00e6 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0067|0x0067: IGET  (r2 I:java.lang.String) = (r1 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.value java.lang.String \l0x0069: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x006a: INVOKE  (r4 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x006e: CONST  (r5 I:?[int, float, short, byte, char]) = (98 ?[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0070|0x0070: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x007b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0072|0x0072: INVOKE  (r2 I:byte) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x0076: INVOKE  (r2 I:java.lang.String) = (r2 I:int) java.lang.String.valueOf(int):java.lang.String type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x007b|0x007b: INVOKE  (r4 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x007f: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (105(0x69, float:1.47E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_20 [shape=record,label="{20\:\ 0x0081|0x0081: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00b0 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0083|0x0083: IGET  (r2 I:java.lang.String) = (r1 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.key java.lang.String \l0x0085: CONST_STR  (r3 I:java.lang.String) =  \":colour\" \l0x0087: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String), (r3 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x008b|0x008b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x00a7 \l}"];
Node_23 [shape=record,label="{23\:\ 0x008d|0x008d: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x008f: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0092: CONST_STR  (r3 I:java.lang.String) =  \"#\" \l0x0094: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0097: INVOKE  (r3 I:int) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readInt():int type: VIRTUAL \l0x009b: INVOKE  (r3 I:java.lang.String) = (r3 I:int) java.lang.Integer.toHexString(int):java.lang.String type: STATIC \l0x009f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a2: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a7|0x00a7: INVOKE  (r2 I:int) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readInt():int type: VIRTUAL \l0x00ab: INVOKE  (r2 I:java.lang.String) = (r2 I:int) java.lang.String.valueOf(int):java.lang.String type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x00b0|0x00b0: INVOKE  (r4 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x00b4: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (102(0x66, float:1.43E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b6|0x00b6: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00c1 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00b8|0x00b8: INVOKE  (r2 I:float) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readFloat():float type: VIRTUAL \l0x00bc: INVOKE  (r2 I:java.lang.String) = (r2 I:float) java.lang.String.valueOf(float):java.lang.String type: STATIC \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c1|0x00c1: INVOKE  (r4 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x00c5: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (104(0x68, float:1.46E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c7|0x00c7: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00d2 \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c9|0x00c9: INVOKE  (r2 I:int) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readShort():int type: VIRTUAL \l0x00cd: INVOKE  (r2 I:java.lang.String) = (r2 I:int) java.lang.String.valueOf(int):java.lang.String type: STATIC \l}"];
Node_31 [shape=record,label="{31\:\ 0x00d2|0x00d2: INVOKE  (r3 I:char) = (r2 I:java.lang.String), (r3 I:int) java.lang.String.charAt(int):char type: VIRTUAL \l0x00d6: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (115(0x73, float:1.61E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x00d8|0x00d8: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00de \l}"];
Node_33 [shape=record,label="{33\:\ 0x00da|0x00da: INVOKE  (r2 I:java.lang.String) = (r6 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x00de|0x00de: NEW_INSTANCE  (r3 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00e0: IGET  (r1 I:java.lang.String) = (r1 I:org.mapsforge.core.model.Tag) org.mapsforge.core.model.Tag.key java.lang.String \l0x00e2: INVOKE  \l  (r3 I:org.mapsforge.core.model.Tag)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x00e5: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e6|0x00e6: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_36 [shape=record,label="{36\:\ 0x00eb|0x00eb: RETURN  (r0 I:java.util.List\<org.mapsforge.core.model.Tag\>) \l}"];
MethodNode[shape=record,label="{java.util.List\<org.mapsforge.core.model.Tag\> org.mapsforge.map.reader.ReadBuffer.readTags((r6 'this' I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, THIS]), (r7 I:org.mapsforge.core.model.Tag[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([, Lorg\/mapsforge\/core\/model\/Tag;, B), Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_6;
Node_4 -> Node_7[style=dashed];
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_36;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_35;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_35;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_34;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_34;
Node_24 -> Node_34;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_10;
}

