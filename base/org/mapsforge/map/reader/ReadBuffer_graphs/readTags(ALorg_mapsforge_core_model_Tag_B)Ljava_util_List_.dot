digraph "CFG fororg.mapsforge.map.reader.ReadBuffer.readTags([Lorg\/mapsforge\/core\/model\/Tag;B)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.ArrayList r0 = new java.util.ArrayList()\lr6.tagIds.clear()\lint r1 = r7.length\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lPHI: r8 \l  PHI: (r8v1 byte) = (r8v0 byte), (r8v7 byte) binds: [B:0:0x0000, B:5:0x0016] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x000b\-\>B:5:0x0016\l|if (r8 == 0) goto L_0x003b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|int r2 = readUnsignedInt()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if (r2 \< 0) goto L_0x0023\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r2 \< r1) goto L_0x0016\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|LOOP_END\lLOOP:0: B:1:0x000b\-\>B:5:0x0016\l|r6.tagIds.add(java.lang.Integer.valueOf(r2))\lbyte r8 = (byte) (r8 + \-1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|java.util.logging.Logger r7 = LOGGER\ljava.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(\"invalid tag ID: \")\lr8.append(r2)\lr7.warning(r8.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x003a|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|java.util.Iterator r8 = r6.tagIds.iterator()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|LOOP_START\lLOOP:1: B:9:0x0041\-\>B:34:0x00e6\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|if (r8.hasNext() == false) goto L_0x00eb\l}"];
Node_11 [shape=record,label="{11\:\ 0x0047|r1 = r7[r8.next().intValue()]\l}"];
Node_12 [shape=record,label="{12\:\ 0x005a|if (r1.value.length() != 2) goto L_0x00e6\l}"];
Node_13 [shape=record,label="{13\:\ 0x005c}"];
Node_14 [shape=record,label="{14\:\ 0x0065|if (r1.value.charAt(0) != '%') goto L_0x00e6\l}"];
Node_15 [shape=record,label="{15\:\ 0x0067|java.lang.String r2 = r1.value\l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|if (r2.charAt(1) != 'b') goto L_0x007b\l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|java.lang.String r2 = java.lang.String.valueOf(readByte())\l}"];
Node_18 [shape=record,label="{18\:\ 0x007b}"];
Node_19 [shape=record,label="{19\:\ 0x0081|if (r2.charAt(1) != 'i') goto L_0x00b0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0083}"];
Node_21 [shape=record,label="{21\:\ 0x008b|if (r1.key.contains(\":colour\") == false) goto L_0x00a7\l}"];
Node_22 [shape=record,label="{22\:\ 0x008d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"#\")\lr2.append(java.lang.Integer.toHexString(readInt()))\ljava.lang.String r2 = r2.toString()\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a7|java.lang.String r2 = java.lang.String.valueOf(readInt())\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b0}"];
Node_25 [shape=record,label="{25\:\ 0x00b6|if (r2.charAt(1) != 'f') goto L_0x00c1\l}"];
Node_26 [shape=record,label="{26\:\ 0x00b8|java.lang.String r2 = java.lang.String.valueOf(readFloat())\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c1}"];
Node_28 [shape=record,label="{28\:\ 0x00c7|if (r2.charAt(1) != 'h') goto L_0x00d2\l}"];
Node_29 [shape=record,label="{29\:\ 0x00c9|java.lang.String r2 = java.lang.String.valueOf(readShort())\l}"];
Node_30 [shape=record,label="{30\:\ 0x00d2}"];
Node_31 [shape=record,label="{31\:\ 0x00d8|if (r2.charAt(1) != 's') goto L_0x00de\l}"];
Node_32 [shape=record,label="{32\:\ 0x00da|java.lang.String r2 = readUTF8EncodedString()\l}"];
Node_33 [shape=record,label="{33\:\ 0x00de|PHI: r2 \l  PHI: (r2v5 java.lang.String) = (r2v4 java.lang.String), (r2v6 java.lang.String), (r2v8 java.lang.String), (r2v10 java.lang.String), (r2v14 java.lang.String), (r2v16 java.lang.String), (r2v18 java.lang.String) binds: [B:31:0x00d8, B:32:0x00da, B:29:0x00c9, B:26:0x00b8, B:23:0x00a7, B:22:0x008d, B:17:0x0072] A[DONT_GENERATE, DONT_INLINE]\l|r1 = new org.mapsforge.core.model.Tag(r1.key, r2)\l}"];
Node_34 [shape=record,label="{34\:\ 0x00e6|LOOP_END\lPHI: r1 \l  PHI: (r1v7 org.mapsforge.core.model.Tag) = (r1v6 org.mapsforge.core.model.Tag), (r1v6 org.mapsforge.core.model.Tag), (r1v9 org.mapsforge.core.model.Tag) binds: [B:41:0x00e6, B:42:0x00e6, B:40:0x00e6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:9:0x0041\-\>B:34:0x00e6\l|r0.add(r1)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00eb|RETURN\l|return r0\l}"];
Node_36 [shape=record,label="{36\:\ 0x0023|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x003b|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x00eb|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x00e6|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x00e6|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x00e6|SYNTHETIC\l}"];
MethodNode[shape=record,label="{java.util.List\<org.mapsforge.core.model.Tag\> org.mapsforge.map.reader.ReadBuffer.readTags((r6v0 'this' org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, THIS]), (r7v0 org.mapsforge.core.model.Tag[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[([, Lorg\/mapsforge\/core\/model\/Tag;, B), Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/Tag;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_38;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_36;
Node_4 -> Node_5;
Node_4 -> Node_37[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_39;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_41;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_42;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_33;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_33;
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_33;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_40;
Node_34 -> Node_9;
Node_36 -> Node_6;
Node_37 -> Node_6;
Node_38 -> Node_8;
Node_39 -> Node_35;
Node_40 -> Node_34;
Node_41 -> Node_34;
Node_42 -> Node_34;
}

