digraph "CFG fororg.mapsforge.map.reader.ReadBuffer.readFromFile(JI)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte[]) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:byte[]) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] \l0x0007: ARRAY_LENGTH  (r0 I:int) = (r0 I:?[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:9:0x0031 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: SGET  (r0 I:int) =  org.mapsforge.core.util.Parameters.MAXIMUM_BUFFER_SIZE int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r6 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:8:0x0025 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: SGET  (r4 I:java.util.logging.Logger) =  org.mapsforge.map.reader.ReadBuffer.LOGGER java.util.logging.Logger \l0x0010: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0012: INVOKE  (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0015: CONST_STR  (r0 I:java.lang.String) =  \"invalid read length: \" \l0x0017: INVOKE  (r5 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0021: INVOKE  (r4 I:java.util.logging.Logger), (r5 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: NEW_ARRAY  (r0 I:byte[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0027: IPUT  (r0 I:byte[]), (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] \l0x0029: IGET  (r0 I:byte[]) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] \l0x002b: INVOKE  (r0 I:java.nio.ByteBuffer) = (r0 I:byte[]), (r1 I:int), (r6 I:int) java.nio.ByteBuffer.wrap(byte[], int, int):java.nio.ByteBuffer type: STATIC \l0x002f: IPUT  \l  (r0 I:java.nio.ByteBuffer)\l  (r3 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.ReadBuffer.bufferWrapper java.nio.ByteBuffer \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IPUT  (r1 I:int), (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferPosition int \l0x0033: IGET  (r0 I:java.nio.ByteBuffer) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferWrapper java.nio.ByteBuffer \l0x0035: INVOKE  (r0 I:java.nio.ByteBuffer) java.nio.ByteBuffer.clear():java.nio.Buffer type: VIRTUAL \l0x0038: IGET  (r0 I:java.nio.channels.FileChannel) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.inputChannel java.nio.channels.FileChannel \l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|0x003a: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|SYNTHETIC\lSplitter:B:11:0x003b\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x003b\l|0x003b: IGET  (r2 I:java.nio.channels.FileChannel) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.inputChannel java.nio.channels.FileChannel A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x003d: INVOKE  (r2 I:java.nio.channels.FileChannel), (r4 I:long) java.nio.channels.FileChannel.position(long):java.nio.channels.FileChannel type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x0040: IGET  (r4 I:java.nio.channels.FileChannel) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.inputChannel java.nio.channels.FileChannel A[Catch:\{ all \-\> 0x004d \}]\l0x0042: IGET  (r5 I:java.nio.ByteBuffer) = (r3 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferWrapper java.nio.ByteBuffer A[Catch:\{ all \-\> 0x004d \}]\l0x0044: INVOKE  (r4 I:int) = \l  (r4 I:java.nio.channels.FileChannel)\l  (r5 I:java.nio.ByteBuffer)\l java.nio.channels.FileChannel.read(java.nio.ByteBuffer):int type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x004b A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004a|0x004a: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|0x004c: RETURN  (r1 I:boolean) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|ExcHandler: all null\lSplitter:B:11:0x003b\l|0x004d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|0x004f: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.ReadBuffer.readFromFile((r3 'this' I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

