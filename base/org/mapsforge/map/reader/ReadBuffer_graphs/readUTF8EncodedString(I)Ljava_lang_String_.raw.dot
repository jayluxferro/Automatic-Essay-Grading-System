digraph "CFG fororg.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString(I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r0 I:int) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferPosition int \l0x0004: ARITH  (r0 I:int) = (r0 I:int) + (r5 I:int) \l0x0005: IGET  (r1 I:byte[]) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] \l0x0007: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IGET  (r0 I:int) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferPosition int \l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (r5 I:int) \l0x000d: IPUT  (r0 I:int), (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferPosition int \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|SYNTHETIC\lSplitter:B:4:0x000f\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x000f\l|0x000f: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}, TRY_ENTER]\l0x0011: IGET  (r1 I:byte[]) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferData byte[] A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}]\l0x0013: IGET  (r2 I:int) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.bufferPosition int A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}]\l0x0015: ARITH  (r2 I:int) = (r2 I:int) \- (r5 I:int) A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}]\l0x0016: CONST_STR  (r3 I:java.lang.String) =  \"UTF\-8\" A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}]\l0x0018: INVOKE  \l  (r0 I:java.lang.String)\l  (r1 I:byte[])\l  (r2 I:int)\l  (r5 I:int)\l  (r3 I:java.lang.String)\l java.lang.String.\<init\>(byte[], int, int, java.lang.String):void type: DIRECT A[Catch:\{ UnsupportedEncodingException \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: RETURN  (r0 I:java.lang.String) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|ExcHandler: UnsupportedEncodingException null\lSplitter:B:4:0x000f\l|0x001c: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x001f: INVOKE  \l  (r0 I:java.lang.IllegalStateException)\l  (r5 I:java.lang.Throwable)\l java.lang.IllegalStateException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.ReadBuffer.LOGGER java.util.logging.Logger \l0x0025: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002a: CONST_STR  (r2 I:java.lang.String) =  \"invalid string length: \" \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0036: INVOKE  (r0 I:java.util.logging.Logger), (r5 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x0039: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: RETURN  (r5 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString((r4 'this' I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_10;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

