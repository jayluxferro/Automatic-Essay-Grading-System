digraph "CFG fororg.mapsforge.map.reader.QueryParameters.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 != r8) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r8 instanceof org.mapsforge.map.reader.QueryParameters) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|org.mapsforge.map.reader.QueryParameters r8 = (org.mapsforge.map.reader.QueryParameters) r8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if ((r7.fromBaseTileX \> r8.fromBaseTileX ? 1 : (r7.fromBaseTileX == r8.fromBaseTileX ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if ((r7.fromBlockX \> r8.fromBlockX ? 1 : (r7.fromBlockX == r8.fromBlockX ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if ((r7.fromBaseTileY \> r8.fromBaseTileY ? 1 : (r7.fromBaseTileY == r8.fromBaseTileY ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024}"];
Node_13 [shape=record,label="{13\:\ 0x002a|if ((r7.fromBlockY \> r8.fromBlockY ? 1 : (r7.fromBlockY == r8.fromBlockY ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c}"];
Node_15 [shape=record,label="{15\:\ 0x0030|if (r7.queryTileBitmask != r8.queryTileBitmask) goto L_0x005f\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032}"];
Node_17 [shape=record,label="{17\:\ 0x0036|if (r7.queryZoomLevel != r8.queryZoomLevel) goto L_0x005f\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038}"];
Node_19 [shape=record,label="{19\:\ 0x003e|if ((r7.toBaseTileX \> r8.toBaseTileX ? 1 : (r7.toBaseTileX == r8.toBaseTileX ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_20 [shape=record,label="{20\:\ 0x0040}"];
Node_21 [shape=record,label="{21\:\ 0x0046|if ((r7.toBaseTileY \> r8.toBaseTileY ? 1 : (r7.toBaseTileY == r8.toBaseTileY ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_22 [shape=record,label="{22\:\ 0x0048}"];
Node_23 [shape=record,label="{23\:\ 0x004e|if ((r7.toBlockX \> r8.toBlockX ? 1 : (r7.toBlockX == r8.toBlockX ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_24 [shape=record,label="{24\:\ 0x0050}"];
Node_25 [shape=record,label="{25\:\ 0x0056|if ((r7.toBlockY \> r8.toBlockY ? 1 : (r7.toBlockY == r8.toBlockY ? 0 : \-1)) != 0) goto L_0x005f\l}"];
Node_26 [shape=record,label="{26\:\ 0x0058}"];
Node_27 [shape=record,label="{27\:\ 0x005c|if (r7.useTileBitmask != r8.useTileBitmask) goto L_0x005f\l}"];
Node_28 [shape=record,label="{28\:\ 0x005f|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.QueryParameters.equals((r7v0 'this' org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, THIS]), (r8v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_28;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_28;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_28;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_28;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_28;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_28;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_29[style=dashed];
}

