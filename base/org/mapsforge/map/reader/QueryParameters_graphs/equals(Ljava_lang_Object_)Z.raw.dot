digraph "CFG fororg.mapsforge.map.reader.QueryParameters.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r8 I:?[OBJECT, ARRAY]) org.mapsforge.map.reader.QueryParameters \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r8 I:org.mapsforge.map.reader.QueryParameters) = (org.mapsforge.map.reader.QueryParameters) (r8 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBaseTileX long \l0x000e: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBaseTileX long \l0x0010: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockX long \l0x0016: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockX long \l0x0018: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBaseTileY long \l0x001e: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBaseTileY long \l0x0020: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockY long \l0x0026: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockY long \l0x0028: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IGET  (r1 I:int) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryTileBitmask int \l0x002e: IGET  (r3 I:int) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryTileBitmask int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|0x0032: IGET  (r1 I:int) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int \l0x0034: IGET  (r3 I:int) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|0x0038: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBaseTileX long \l0x003a: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBaseTileX long \l0x003c: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|0x003e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBaseTileY long \l0x0042: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBaseTileY long \l0x0044: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|0x0046: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockX long \l0x004a: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockX long \l0x004c: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|0x004e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|0x0050: IGET  (r3 I:long) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockY long \l0x0052: IGET  (r5 I:long) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockY long \l0x0054: CMP_L  (r1 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0056|0x0056: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_26 [shape=record,label="{26\:\ 0x0058|0x0058: IGET  (r1 I:boolean) = (r7 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l0x005a: IGET  (r8 I:boolean) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x005c|0x005c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x005f \l}"];
Node_29 [shape=record,label="{29\:\ 0x005f|0x005f: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x0060|0x0060: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.QueryParameters.equals((r7 'this' I:org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_29;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_29;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_29;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_29;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_29;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_29;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_30;
}

