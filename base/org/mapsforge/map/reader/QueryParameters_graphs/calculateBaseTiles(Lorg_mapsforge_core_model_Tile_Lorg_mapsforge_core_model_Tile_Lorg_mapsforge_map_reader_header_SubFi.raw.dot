digraph "CFG fororg.mapsforge.map.reader.QueryParameters.calculateBaseTiles(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/reader\/header\/SubFileParameter;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0002: IGET  (r1 I:byte) = (r9 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:3:0x002e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r9 I:byte) = (r9 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l0x000a: IGET  (r0 I:byte) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x000c: ARITH  (r9 I:int) = (r9 I:int) \- (r0 I:int) \l0x000d: IGET  (r0 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x000f: ARITH  (r0 I:int) = (r0 I:int) \<\< (r9 I:int) \l0x0010: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0011: IPUT  \l  (r0 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileX long \l0x0013: IGET  (r7 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0015: ARITH  (r7 I:int) = (r7 I:int) \<\< (r9 I:int) \l0x0016: CAST  (r0 I:long) = (long) (r7 I:int) \l0x0017: IPUT  \l  (r0 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileY long \l0x0019: IGET  (r7 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x001b: ARITH  (r7 I:int) = (r7 I:int) \<\< (r9 I:int) \l0x001c: ARITH  (r0 I:int) = (r3 I:int) \<\< (r9 I:int) \l0x001e: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int) \l0x001f: ARITH  (r7 I:int) = (r7 I:int) \- (r3 I:int) \l0x0020: CAST  (r4 I:long) = (long) (r7 I:int) \l0x0021: IPUT  \l  (r4 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileX long \l0x0023: IGET  (r7 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0025: ARITH  (r7 I:int) = (r7 I:int) \<\< (r9 I:int) \l0x0026: ARITH  (r7 I:int) = (r7 I:int) + (r0 I:int) \l0x0027: ARITH  (r7 I:int) = (r7 I:int) \- (r3 I:int) \l0x0028: CAST  (r7 I:long) = (long) (r7 I:int) \l0x0029: IPUT  \l  (r7 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileY long \l0x002b: IPUT  \l  (r2 I:boolean)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x002e|0x002e: IGET  (r0 I:byte) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0030: IGET  (r1 I:byte) = (r9 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:6:0x005a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IGET  (r0 I:byte) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0036: IGET  (r9 I:byte) = (r9 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l0x0038: ARITH  (r0 I:int) = (r0 I:int) \- (r9 I:int) \l0x0039: IGET  (r9 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x003b: ARITH  (r9 I:int) = (r9 I:int) \>\>\> (r0 I:int) \l0x003c: CAST  (r1 I:long) = (long) (r9 I:int) \l0x003d: IPUT  \l  (r1 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileX long \l0x003f: IGET  (r9 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0041: ARITH  (r9 I:int) = (r9 I:int) \>\>\> (r0 I:int) \l0x0042: CAST  (r1 I:long) = (long) (r9 I:int) \l0x0043: IPUT  \l  (r1 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileY long \l0x0045: IGET  (r9 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0047: ARITH  (r9 I:int) = (r9 I:int) \>\>\> (r0 I:int) \l0x0048: CAST  (r1 I:long) = (long) (r9 I:int) \l0x0049: IPUT  \l  (r1 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileX long \l0x004b: IGET  (r9 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x004d: ARITH  (r9 I:int) = (r9 I:int) \>\>\> (r0 I:int) \l0x004e: CAST  (r1 I:long) = (long) (r9 I:int) \l0x004f: IPUT  \l  (r1 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileY long \l0x0051: IPUT  \l  (r3 I:boolean)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l0x0053: INVOKE  (r7 I:int) = \l  (r7 I:org.mapsforge.core.model.Tile)\l  (r8 I:org.mapsforge.core.model.Tile)\l  (r0 I:int)\l org.mapsforge.map.reader.QueryCalculations.calculateTileBitmask(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile, int):int type: STATIC \l0x0057: IPUT  (r7 I:int), (r6 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryTileBitmask int \l}"];
Node_6 [shape=record,label="{6\:\ 0x005a|0x005a: IGET  (r9 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x005c: CAST  (r0 I:long) = (long) (r9 I:int) \l0x005d: IPUT  \l  (r0 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileX long \l0x005f: IGET  (r7 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0061: CAST  (r0 I:long) = (long) (r7 I:int) \l0x0062: IPUT  \l  (r0 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.fromBaseTileY long \l0x0064: IGET  (r7 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0066: CAST  (r0 I:long) = (long) (r7 I:int) \l0x0067: IPUT  \l  (r0 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileX long \l0x0069: IGET  (r7 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x006b: CAST  (r7 I:long) = (long) (r7 I:int) \l0x006c: IPUT  \l  (r7 I:long)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.toBaseTileY long \l0x006e: IPUT  \l  (r2 I:boolean)\l  (r6 I:org.mapsforge.map.reader.QueryParameters)\l org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0070|0x0070: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.reader.QueryParameters.calculateBaseTiles((r6 'this' I:org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, THIS]), (r7 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
}

