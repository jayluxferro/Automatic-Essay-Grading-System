digraph "CFG fororg.mapsforge.map.reader.IndexCache.getIndexEntry(Lorg\/mapsforge\/map\/reader\/header\/SubFileParameter;J)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:long) = (r10 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.numberOfBlocks long \l0x0002: CMP_L  (r0 I:int) = (r11 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:20:0x006e \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CONST  (r0 I:?[long, double]) = (128(0x80, double:6.32E\-322) ?[long, double]) \l0x0008: ARITH  (r2 I:long) = (r11 I:long) \/ (r0 I:long) \l0x000a: NEW_INSTANCE  (r4 I:org.mapsforge.map.reader.IndexCacheEntryKey) =  org.mapsforge.map.reader.IndexCacheEntryKey \l0x000c: INVOKE  \l  (r4 I:org.mapsforge.map.reader.IndexCacheEntryKey)\l  (r10 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r2 I:long)\l org.mapsforge.map.reader.IndexCacheEntryKey.\<init\>(org.mapsforge.map.reader.header.SubFileParameter, long):void type: DIRECT \l0x000f: IGET  (r5 I:java.util.Map\<org.mapsforge.map.reader.IndexCacheEntryKey, byte[]\>) = (r9 I:org.mapsforge.map.reader.IndexCache) org.mapsforge.map.reader.IndexCache.map java.util.Map \l0x0011: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r5 I:byte[]) = (byte[]) (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0062 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IGET  (r5 I:long) = (r10 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.indexStartAddress long \l0x001b: CONST  (r7 I:?[long, double]) = (640(0x280, double:3.16E\-321) ?[long, double]) \l0x001d: ARITH  (r2 I:long) = (r2 I:long) * (r7 I:long) \l0x001f: ARITH  (r5 I:long) = (r5 I:long) + (r2 I:long) \l0x0020: IGET  (r2 I:long) = (r10 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.indexEndAddress long \l0x0022: ARITH  (r2 I:long) = (r2 I:long) \- (r5 I:long) \l0x0023: CAST  (r10 I:int) = (int) (r2 I:long) \l0x0024: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (640(0x280, float:8.97E\-43) ?[int, float, short, byte, char])\l \l0x0026: INVOKE  (r10 I:int) = (r2 I:int), (r10 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x002a: NEW_ARRAY  (r2 I:byte[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x002c: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002d: INVOKE  (r3 I:java.nio.ByteBuffer) = (r2 I:byte[]), (r3 I:int), (r10 I:int) java.nio.ByteBuffer.wrap(byte[], int, int):java.nio.ByteBuffer type: STATIC \l0x0031: IGET  (r7 I:java.nio.channels.FileChannel) = (r9 I:org.mapsforge.map.reader.IndexCache) org.mapsforge.map.reader.IndexCache.fileChannel java.nio.channels.FileChannel \l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: MONITOR_ENTER  (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|SYNTHETIC\lSplitter:B:6:0x0034\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0034\l|0x0034: IGET  (r8 I:java.nio.channels.FileChannel) = (r9 I:org.mapsforge.map.reader.IndexCache) org.mapsforge.map.reader.IndexCache.fileChannel java.nio.channels.FileChannel A[Catch:\{ all \-\> 0x005f \}, TRY_ENTER]\l0x0036: INVOKE  (r8 I:java.nio.channels.FileChannel), (r5 I:long) java.nio.channels.FileChannel.position(long):java.nio.channels.FileChannel type: VIRTUAL A[Catch:\{ all \-\> 0x005f \}]\l0x0039: IGET  (r5 I:java.nio.channels.FileChannel) = (r9 I:org.mapsforge.map.reader.IndexCache) org.mapsforge.map.reader.IndexCache.fileChannel java.nio.channels.FileChannel A[Catch:\{ all \-\> 0x005f \}]\l0x003b: INVOKE  (r3 I:int) = \l  (r5 I:java.nio.channels.FileChannel)\l  (r3 I:java.nio.ByteBuffer)\l java.nio.channels.FileChannel.read(java.nio.ByteBuffer):int type: VIRTUAL A[Catch:\{ all \-\> 0x005f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|0x003f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0048 A[Catch:\{ all \-\> 0x005f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005f \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: IGET  (r10 I:java.util.Map\<org.mapsforge.map.reader.IndexCacheEntryKey, byte[]\>) = (r9 I:org.mapsforge.map.reader.IndexCache) org.mapsforge.map.reader.IndexCache.map java.util.Map \l0x0044: INVOKE  \l  (r10 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|SYNTHETIC\lSplitter:B:11:0x0048\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x0048\l|0x0048: NEW_INSTANCE  (r11 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x005f \}, TRY_ENTER]\l0x004a: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x005f \}]\l0x004c: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x005f \}]\l0x004f: CONST_STR  (r0 I:java.lang.String) =  \"could not read index block with size: \" A[Catch:\{ all \-\> 0x005f \}]\l0x0051: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x005f \}]\l0x0054: INVOKE  (r12 I:java.lang.StringBuilder), (r10 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x005f \}]\l0x0057: INVOKE  (r10 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x005f \}]\l0x005b: INVOKE  (r11 I:java.io.IOException), (r10 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005f \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x005e|0x005e: THROW  (r11 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005f \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|ExcHandler: all null\lSplitter:B:6:0x0034\l|0x005f: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x005f \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0060|0x0060: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005f \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|0x0061: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0062|0x0062: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0063|0x0063: ARITH  (r11 I:long) = (r11 I:long) % (r0 I:long) \l0x0064: CONST  (r0 I:?[long, double]) = (5 ?[long, double]) \l0x0066: ARITH  (r11 I:long) = (r11 I:long) * (r0 I:long) \l0x0068: CAST  (r10 I:int) = (int) (r11 I:long) \l0x0069: INVOKE  (r10 I:long) = (r2 I:byte[]), (r10 I:int) org.mapsforge.map.reader.Deserializer.getFiveBytesLong(byte[], int):long type: STATIC \l}"];
Node_19 [shape=record,label="{19\:\ 0x006d|0x006d: RETURN  (r10 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006e|0x006e: NEW_INSTANCE  (r10 I:java.io.IOException) =  java.io.IOException \l0x0070: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0072: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0075: CONST_STR  (r1 I:java.lang.String) =  \"invalid block number: \" \l0x0077: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007a: INVOKE  (r0 I:java.lang.StringBuilder), (r11 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x007d: INVOKE  (r11 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0081: INVOKE  (r10 I:java.io.IOException), (r11 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_21 [shape=record,label="{21\:\ 0x0084|0x0084: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{long org.mapsforge.map.reader.IndexCache.getIndexEntry((r9 'this' I:org.mapsforge.map.reader.IndexCache A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_18;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
}

