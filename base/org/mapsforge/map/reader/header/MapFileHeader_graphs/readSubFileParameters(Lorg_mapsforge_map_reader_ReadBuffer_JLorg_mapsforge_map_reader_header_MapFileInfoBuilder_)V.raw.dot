digraph "CFG fororg.mapsforge.map.reader.header.MapFileHeader.readSubFileParameters(Lorg\/mapsforge\/map\/reader\/ReadBuffer;JLorg\/mapsforge\/map\/reader\/header\/MapFileInfoBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:byte) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:53:0x0149 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: IPUT  \l  (r0 I:byte)\l  (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder)\l org.mapsforge.map.reader.header.MapFileInfoBuilder.numberOfSubFiles byte \l0x0009: NEW_ARRAY  (r2 I:org.mapsforge.map.reader.header.SubFileParameter[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.map.reader.header.SubFileParameter[] \l0x000b: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x000d: IPUT  \l  (r3 I:byte)\l  (r10 I:org.mapsforge.map.reader.header.MapFileHeader)\l org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMinimum byte \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (\-128(0xffffffffffffff80, float:NaN) ?[int, float, short, byte, char])\l \l0x0011: IPUT  \l  (r3 I:byte)\l  (r10 I:org.mapsforge.map.reader.header.MapFileHeader)\l org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMaximum byte \l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0014: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:45:0x012c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: NEW_INSTANCE  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder) =  org.mapsforge.map.reader.header.SubFileParameterBuilder \l0x0019: INVOKE  \l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.\<init\>():void type: DIRECT \l0x001c: INVOKE  (r6 I:byte) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:43:0x0115 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CONST  (r7 I:?[int, float, short, byte, char]) = (20 ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r6 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:43:0x0115 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IPUT  \l  (r6 I:byte)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.baseZoomLevel byte \l0x0028: INVOKE  (r6 I:byte) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r6 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:41:0x00fe \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: CONST  (r7 I:?[int, float, short, byte, char]) = (22 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: IF  (r6 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:41:0x00fe \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: IPUT  \l  (r6 I:byte)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.zoomLevelMin byte \l0x0034: INVOKE  (r8 I:byte) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:39:0x00e7 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|0x003a: IF  (r8 I:?[int, byte, short, char]) \> (r7 I:?[int, byte, short, char])  \-\> B:39:0x00e7 \l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: IPUT  \l  (r8 I:byte)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.zoomLevelMax byte \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: IF  (r6 I:?[int, byte, short, char]) \> (r8 I:?[int, byte, short, char])  \-\> B:37:0x00c8 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|0x0040: INVOKE  (r6 I:long) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readLong():long type: VIRTUAL \l0x0044: CONST  (r8 I:?[long, double]) = (70 ?[long, double]) \l0x0046: CMP_L  (r8 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:35:0x00b1 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: CMP_L  (r8 I:int) = (r6 I:long), (r12 I:long) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|0x004c: IF  (r8 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:35:0x00b1 \l}"];
Node_21 [shape=record,label="{21\:\ 0x004e|0x004e: IPUT  \l  (r6 I:long)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.startAddress long \l0x0050: IGET  (r8 I:org.mapsforge.map.reader.header.OptionalFields) = (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder) org.mapsforge.map.reader.header.MapFileInfoBuilder.optionalFields org.mapsforge.map.reader.header.OptionalFields \l0x0052: IGET  (r8 I:boolean) = (r8 I:org.mapsforge.map.reader.header.OptionalFields) org.mapsforge.map.reader.header.OptionalFields.isDebugFile boolean \l}"];
Node_22 [shape=record,label="{22\:\ 0x0054|0x0054: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0059 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0056|0x0056: CONST  (r8 I:?[long, double]) = (16 ?[long, double]) \l0x0058: ARITH  (r6 I:long) = (r6 I:long) + (r8 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0059|0x0059: IPUT  \l  (r6 I:long)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.indexStartAddress long \l0x005b: INVOKE  (r6 I:long) = (r11 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readLong():long type: VIRTUAL \l0x005f: CONST  (r8 I:?[long, double]) = (1 ?[long, double]) \l0x0061: CMP_L  (r8 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0063|0x0063: IF  (r8 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:33:0x009a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0065|0x0065: IPUT  \l  (r6 I:long)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.subFileSize long \l0x0067: IGET  (r6 I:org.mapsforge.core.model.BoundingBox) = (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder) org.mapsforge.map.reader.header.MapFileInfoBuilder.boundingBox org.mapsforge.core.model.BoundingBox \l0x0069: IPUT  \l  (r6 I:org.mapsforge.core.model.BoundingBox)\l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.boundingBox org.mapsforge.core.model.BoundingBox \l0x006b: INVOKE  (r5 I:org.mapsforge.map.reader.header.SubFileParameter) = \l  (r5 I:org.mapsforge.map.reader.header.SubFileParameterBuilder)\l org.mapsforge.map.reader.header.SubFileParameterBuilder.build():org.mapsforge.map.reader.header.SubFileParameter type: VIRTUAL \l0x006f: APUT  \l  (r2 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0071: IGET  (r5 I:byte) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMinimum byte \l0x0073: AGET  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0075: IGET  (r6 I:byte) = (r6 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMin byte \l}"];
Node_27 [shape=record,label="{27\:\ 0x0077|0x0077: IF  (r5 I:?[int, byte, short, char]) \<= (r6 I:?[int, byte, short, char])  \-\> B:29:0x0083 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0079|0x0079: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x007b: IGET  (r5 I:byte) = (r5 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMin byte \l0x007d: IPUT  \l  (r5 I:byte)\l  (r10 I:org.mapsforge.map.reader.header.MapFileHeader)\l org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMinimum byte \l0x007f: IGET  (r5 I:byte) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMinimum byte \l0x0081: IPUT  \l  (r5 I:byte)\l  (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder)\l org.mapsforge.map.reader.header.MapFileInfoBuilder.zoomLevelMin byte \l}"];
Node_29 [shape=record,label="{29\:\ 0x0083|0x0083: IGET  (r5 I:byte) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMaximum byte \l0x0085: AGET  (r6 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0087: IGET  (r6 I:byte) = (r6 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMax byte \l}"];
Node_30 [shape=record,label="{30\:\ 0x0089|0x0089: IF  (r5 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:32:0x0095 \l}"];
Node_31 [shape=record,label="{31\:\ 0x008b|0x008b: AGET  (r5 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x008d: IGET  (r5 I:byte) = (r5 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMax byte \l0x008f: IPUT  \l  (r5 I:byte)\l  (r10 I:org.mapsforge.map.reader.header.MapFileHeader)\l org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMaximum byte \l0x0091: IGET  (r5 I:byte) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMaximum byte \l0x0093: IPUT  \l  (r5 I:byte)\l  (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder)\l org.mapsforge.map.reader.header.MapFileInfoBuilder.zoomLevelMax byte \l}"];
Node_32 [shape=record,label="{32\:\ 0x0095|0x0095: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0097: CAST  (r4 I:byte) = (byte) (r4 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x009a|0x009a: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x009c: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x009e: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00a1: CONST_STR  (r13 I:java.lang.String) =  \"invalid sub\-file size: \" \l0x00a3: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00a6: INVOKE  (r12 I:java.lang.StringBuilder), (r6 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x00a9: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00ad: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_34 [shape=record,label="{34\:\ 0x00b0|0x00b0: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00b1|0x00b1: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x00b3: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00b5: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00b8: CONST_STR  (r13 I:java.lang.String) =  \"invalid start address: \" \l0x00ba: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00bd: INVOKE  (r12 I:java.lang.StringBuilder), (r6 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x00c0: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00c4: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_36 [shape=record,label="{36\:\ 0x00c7|0x00c7: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c8|0x00c8: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x00ca: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00cc: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00cf: CONST_STR  (r13 I:java.lang.String) =  \"invalid zoom level range: \" \l0x00d1: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00d4: INVOKE  (r12 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00d7: CONST  (r13 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x00d9: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x00dc: INVOKE  (r12 I:java.lang.StringBuilder), (r8 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00df: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00e3: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_38 [shape=record,label="{38\:\ 0x00e6|0x00e6: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00e7|0x00e7: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x00e9: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00eb: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00ee: CONST_STR  (r13 I:java.lang.String) =  \"invalid maximum zoom level: \" \l0x00f0: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00f3: INVOKE  (r12 I:java.lang.StringBuilder), (r8 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00f6: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00fa: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_40 [shape=record,label="{40\:\ 0x00fd|0x00fd: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00fe|0x00fe: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x0100: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0102: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0105: CONST_STR  (r13 I:java.lang.String) =  \"invalid minimum zoom level: \" \l0x0107: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x010a: INVOKE  (r12 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x010d: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0111: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_42 [shape=record,label="{42\:\ 0x0114|0x0114: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0115|0x0115: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x0117: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0119: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x011c: CONST_STR  (r13 I:java.lang.String) =  \"invalid base zoom level: \" \l0x011e: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0121: INVOKE  (r12 I:java.lang.StringBuilder), (r6 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0124: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0128: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_44 [shape=record,label="{44\:\ 0x012b|0x012b: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_45 [shape=record,label="{45\:\ 0x012c|0x012c: IGET  (r11 I:byte) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.zoomLevelMaximum byte \l0x012e: ARITH  (r11 I:int) = (r11 I:int) + (r1 I:int) \l0x012f: NEW_ARRAY  (r11 I:org.mapsforge.map.reader.header.SubFileParameter[]) = (r11 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.map.reader.header.SubFileParameter[] \l0x0131: IPUT  \l  (r11 I:org.mapsforge.map.reader.header.SubFileParameter[])\l  (r10 I:org.mapsforge.map.reader.header.MapFileHeader)\l org.mapsforge.map.reader.header.MapFileHeader.subFileParameters org.mapsforge.map.reader.header.SubFileParameter[] \l}"];
Node_46 [shape=record,label="{46\:\ 0x0133|0x0133: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:52:0x0148 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0135|0x0135: AGET  (r11 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0137: IGET  (r12 I:byte) = (r11 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMin byte \l}"];
Node_48 [shape=record,label="{48\:\ 0x0139|0x0139: IGET  (r13 I:byte) = (r11 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMax byte \l}"];
Node_49 [shape=record,label="{49\:\ 0x013b|0x013b: IF  (r12 I:?[int, byte, short, char]) \> (r13 I:?[int, byte, short, char])  \-\> B:51:0x0145 \l}"];
Node_50 [shape=record,label="{50\:\ 0x013d|0x013d: IGET  (r13 I:org.mapsforge.map.reader.header.SubFileParameter[]) = (r10 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.subFileParameters org.mapsforge.map.reader.header.SubFileParameter[] \l0x013f: APUT  \l  (r13 I:?[OBJECT, ARRAY][])\l  (r12 I:?[int, short, byte, char])\l  (r11 I:?[OBJECT, ARRAY])\l \l0x0141: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l0x0143: CAST  (r12 I:byte) = (byte) (r12 I:int) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0145|0x0145: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0148|0x0148: RETURN   \l}"];
Node_53 [shape=record,label="{53\:\ 0x0149|0x0149: NEW_INSTANCE  (r11 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x014b: NEW_INSTANCE  (r12 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x014d: INVOKE  (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0150: CONST_STR  (r13 I:java.lang.String) =  \"invalid number of sub\-files: \" \l0x0152: INVOKE  (r12 I:java.lang.StringBuilder), (r13 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0155: INVOKE  (r12 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0158: INVOKE  (r12 I:java.lang.String) = (r12 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x015c: INVOKE  \l  (r11 I:org.mapsforge.map.reader.header.MapFileException)\l  (r12 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_54 [shape=record,label="{54\:\ 0x015f|0x015f: THROW  (r11 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.reader.header.MapFileHeader.readSubFileParameters((r10 'this' I:org.mapsforge.map.reader.header.MapFileHeader A[IMMUTABLE_TYPE, THIS]), (r11 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:org.mapsforge.map.reader.header.MapFileInfoBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_53;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_45;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_43;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_43;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_41;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_41;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_39;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_39;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_37;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_35;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_35;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_3;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_52;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_48;
Node_51 -> Node_46;
Node_53 -> Node_54;
}

