digraph "CFG fororg.mapsforge.map.reader.header.SubFileParameter.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r7 != r8) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r8 instanceof org.mapsforge.map.reader.header.SubFileParameter) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|org.mapsforge.map.reader.header.SubFileParameter r8 = (org.mapsforge.map.reader.header.SubFileParameter) r8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if ((r7.startAddress \> r8.startAddress ? 1 : (r7.startAddress == r8.startAddress ? 0 : \-1)) == 0) goto L_0x0015\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015}"];
Node_10 [shape=record,label="{10\:\ 0x001b|if ((r7.subFileSize \> r8.subFileSize ? 1 : (r7.subFileSize == r8.subFileSize ? 0 : \-1)) == 0) goto L_0x001e\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|RETURN\l|return false\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e}"];
Node_13 [shape=record,label="{13\:\ 0x0022|if (r7.baseZoomLevel == r8.baseZoomLevel) goto L_0x0025\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.header.SubFileParameter.equals((r7v0 'this' org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, THIS]), (r8v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
}

