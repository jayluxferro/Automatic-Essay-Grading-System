digraph "CFG fororg.mapsforge.map.reader.header.OptionalFields.readMapStartZoomLevel(Lorg\/mapsforge\/map\/reader\/ReadBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r3 I:org.mapsforge.map.reader.header.OptionalFields) org.mapsforge.map.reader.header.OptionalFields.hasStartZoomLevel boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r4 I:byte) = (r4 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (22 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: INVOKE  (r4 I:java.lang.Byte) = (r4 I:byte) java.lang.Byte.valueOf(byte):java.lang.Byte type: STATIC \l0x0012: IPUT  \l  (r4 I:java.lang.Byte)\l  (r3 I:org.mapsforge.map.reader.header.OptionalFields)\l org.mapsforge.map.reader.header.OptionalFields.startZoomLevel java.lang.Byte \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x0017: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001c: CONST_STR  (r2 I:java.lang.String) =  \"invalid map start zoom level: \" \l0x001e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0024: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0028: INVOKE  \l  (r0 I:org.mapsforge.map.reader.header.MapFileException)\l  (r4 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.reader.header.OptionalFields.readMapStartZoomLevel((r3 'this' I:org.mapsforge.map.reader.header.OptionalFields A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
}

