digraph "CFG fororg.mapsforge.map.reader.header.RequiredFields.readFileSize(Lorg\/mapsforge\/map\/reader\/ReadBuffer;JLorg\/mapsforge\/map\/reader\/header\/MapFileInfoBuilder;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|long r0 = r2.readLong()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r0 \> r3 ? 1 : (r0 == r3 ? 0 : \-1)) != 0) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r5.fileSize = r3\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"invalid file size: \")\lr3.append(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|throw new org.mapsforge.map.reader.header.MapFileException(r3.toString())\l}"];
MethodNode[shape=record,label="{static void org.mapsforge.map.reader.header.RequiredFields.readFileSize((r2v0 org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 org.mapsforge.map.reader.header.MapFileInfoBuilder A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

