digraph "CFG fororg.mapsforge.map.reader.MapFile.decodeWayNodesDoubleDelta([Lorg\/mapsforge\/core\/model\/LatLong;DDLorg\/mapsforge\/map\/reader\/ReadBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r19\ldouble r1 = r20 + org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r24.readSignedInt())\ldouble r3 = r22 + org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r24.readSignedInt())\lr0[0] = new org.mapsforge.core.model.LatLong(r1, r3)\lr5 = 1\lr6 = 0.0d\lr8 = r3\lr3 = r1\lr1 = 0.0d\l}"];
Node_1 [shape=record,label="{1\:\ 0x0024|LOOP_START\lPHI: r1 r3 r5 r6 r8 \l  PHI: (r1v4 double) = (r1v3 double), (r1v5 double) binds: [B:0:0x0000, B:13:0x0061] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 double) = (r3v3 double), (r3v5 double) binds: [B:0:0x0000, B:13:0x0061] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:0:0x0000, B:13:0x0061] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 double) = (r6v1 double), (r6v3 double) binds: [B:0:0x0000, B:13:0x0061] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 double) = (r8v0 double), (r8v3 double) binds: [B:0:0x0000, B:13:0x0061] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0024\-\>B:13:0x0061\l}"];
Node_2 [shape=record,label="{2\:\ 0x0025|if (r5 \>= r0.length) goto L_0x006b\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|double r10 = org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r24.readSignedInt())\ldouble r6 = r6 + r10\ldouble r1 = r1 + org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r24.readSignedInt())\ldouble r3 = r3 + r6\ldouble r8 = r8 + r1\l}"];
Node_4 [shape=record,label="{4\:\ 0x004c|if ((r8 \> \-180.0d ? 1 : (r8 == \-180.0d ? 0 : \-1)) \>= 0) goto L_0x0056\l}"];
Node_5 [shape=record,label="{5\:\ 0x004e}"];
Node_6 [shape=record,label="{6\:\ 0x0052|if (((\-180.0d \- r8) \> 0.001d ? 1 : ((\-180.0d \- r8) == 0.001d ? 0 : \-1)) \>= 0) goto L_0x0056\l}"];
Node_7 [shape=record,label="{7\:\ 0x0054|r8 = \-180.0d\l}"];
Node_8 [shape=record,label="{8\:\ 0x0056}"];
Node_9 [shape=record,label="{9\:\ 0x0058|if ((r8 \> 180.0d ? 1 : (r8 == 180.0d ? 0 : \-1)) \<= 0) goto L_0x0061\l}"];
Node_10 [shape=record,label="{10\:\ 0x005a}"];
Node_11 [shape=record,label="{11\:\ 0x005e|if (((r8 \- 180.0d) \> 0.001d ? 1 : ((r8 \- 180.0d) == 0.001d ? 0 : \-1)) \>= 0) goto L_0x0061\l}"];
Node_12 [shape=record,label="{12\:\ 0x0060|r8 = 180.0d\l}"];
Node_13 [shape=record,label="{13\:\ 0x0061|LOOP_END\lPHI: r8 \l  PHI: (r8v3 double) = (r8v2 double), (r8v2 double), (r8v4 double), (r8v5 double) binds: [B:18:0x0061, B:19:0x0061, B:16:0x0061, B:17:0x0061] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0024\-\>B:13:0x0061\l|r0[r5] = new org.mapsforge.core.model.LatLong(r3, r8)\lint r5 = r5 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x006b|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0061|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0061|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.reader.MapFile.decodeWayNodesDoubleDelta((r18v0 'this' org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r19v0 org.mapsforge.core.model.LatLong[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_17;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_16;
Node_13 -> Node_1;
Node_15 -> Node_14;
Node_16 -> Node_13;
Node_17 -> Node_13;
Node_18 -> Node_13;
Node_19 -> Node_13;
}

