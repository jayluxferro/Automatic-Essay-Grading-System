digraph "CFG fororg.mapsforge.map.reader.MapFile.decodeWayNodesSingleDelta([Lorg\/mapsforge\/core\/model\/LatLong;DDLorg\/mapsforge\/map\/reader\/ReadBuffer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r15 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x0004: INVOKE  (r0 I:double) = (r0 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0008: ARITH  (r11 I:double) = (r11 I:double) + (r0 I:double) \l0x0009: INVOKE  (r0 I:int) = (r15 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x000d: INVOKE  (r0 I:double) = (r0 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0011: ARITH  (r13 I:double) = (r13 I:double) + (r0 I:double) \l0x0012: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.LatLong) =  org.mapsforge.core.model.LatLong \l0x0014: INVOKE  \l  (r0 I:org.mapsforge.core.model.LatLong)\l  (r11 I:double)\l  (r13 I:double)\l org.mapsforge.core.model.LatLong.\<init\>(double, double):void type: DIRECT \l0x0017: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0018: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r0 I:?[OBJECT, ARRAY])\l \l0x001a: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001b|0x001b: ARRAY_LENGTH  (r1 I:int) = (r10 I:?[]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: IF  (r0 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:14:0x0060 \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: INVOKE  (r1 I:int) = (r15 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x0022: INVOKE  (r1 I:double) = (r1 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0026: ARITH  (r11 I:double) = (r11 I:double) + (r1 I:double) \l0x0027: INVOKE  (r1 I:int) = (r15 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x002b: INVOKE  (r1 I:double) = (r1 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x002f: ARITH  (r13 I:double) = (r13 I:double) + (r1 I:double) \l0x0030: CONST  (r1 I:?[long, double]) = \l  (4562254508917369340(0x3f50624dd2f1a9fc, double:0.001) ?[long, double])\l \l0x0035: CONST  (r3 I:?[long, double]) = \l  (4640537203540230144(0x4066800000000000, double:180.0) ?[long, double])\l \l0x003a: CONST  (r5 I:?[long, double]) = \l  (\-4582834833314545664(0xc066800000000000, double:\-180.0) ?[long, double])\l \l0x003f: CMP_G  (r7 I:int) = (r13 I:double), (r5 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0041|0x0041: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x004b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: ARITH  (r7 I:double) = (r5 I:double) \- (r13 I:double) \l0x0045: CMP_G  (r7 I:int) = (r7 I:double), (r1 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0047|0x0047: IF  (r7 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:8:0x004b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0049|0x0049: MOVE  (r13 I:?[long, double]) = (r5 I:?[long, double]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004b|0x004b: CMP_L  (r5 I:int) = (r13 I:double), (r3 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x004d|0x004d: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:13:0x0056 \l}"];
Node_10 [shape=record,label="{10\:\ 0x004f|0x004f: ARITH  (r5 I:double) = (r13 I:double) \- (r3 I:double) \l0x0051: CMP_G  (r1 I:int) = (r5 I:double), (r1 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|0x0053: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:13:0x0056 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: MOVE  (r13 I:?[long, double]) = (r3 I:?[long, double]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0056|0x0056: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.LatLong) =  org.mapsforge.core.model.LatLong \l0x0058: INVOKE  \l  (r1 I:org.mapsforge.core.model.LatLong)\l  (r11 I:double)\l  (r13 I:double)\l org.mapsforge.core.model.LatLong.\<init\>(double, double):void type: DIRECT \l0x005b: APUT  \l  (r10 I:?[OBJECT, ARRAY][])\l  (r0 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x005d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|0x0060: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.reader.MapFile.decodeWayNodesSingleDelta((r9 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.core.model.LatLong[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

