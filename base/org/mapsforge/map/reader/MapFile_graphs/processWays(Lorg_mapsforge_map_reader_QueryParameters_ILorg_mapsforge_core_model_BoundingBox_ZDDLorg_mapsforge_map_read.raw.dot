digraph "CFG fororg.mapsforge.map.reader.MapFile.processWays(Lorg\/mapsforge\/map\/reader\/QueryParameters;ILorg\/mapsforge\/core\/model\/BoundingBox;ZDDLorg\/mapsforge\/map\/reader\/MapFile$Selector;Lorg\/mapsforge\/map\/reader\/ReadBuffer;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r10 I:java.util.ArrayList) =  java.util.ArrayList \l0x0008: INVOKE  (r10 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x000b: IGET  (r0 I:org.mapsforge.map.reader.header.MapFileHeader) = (r7 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader \l0x000d: INVOKE  (r0 I:org.mapsforge.map.reader.header.MapFileInfo) = (r0 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.getMapFileInfo():org.mapsforge.map.reader.header.MapFileInfo type: VIRTUAL \l0x0011: IGET  (r11 I:org.mapsforge.core.model.Tag[]) = (r0 I:org.mapsforge.map.reader.header.MapFileInfo) org.mapsforge.map.reader.header.MapFileInfo.wayTags org.mapsforge.core.model.Tag[] \l0x0013: SGET  (r0 I:int) =  org.mapsforge.map.reader.MapFile.wayFilterDistance int \l0x0015: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r30 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r12 I:org.mapsforge.core.model.BoundingBox) = (r1 I:org.mapsforge.core.model.BoundingBox), (r0 I:int) org.mapsforge.core.model.BoundingBox.extendMeters(int):org.mapsforge.core.model.BoundingBox type: VIRTUAL \l0x001b: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: IF  (r13 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:83:0x01a7 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: IGET  (r0 I:org.mapsforge.map.reader.header.MapFileHeader) = (r7 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader \l0x0021: INVOKE  (r0 I:org.mapsforge.map.reader.header.MapFileInfo) = (r0 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.getMapFileInfo():org.mapsforge.map.reader.header.MapFileInfo type: VIRTUAL \l0x0025: IGET  (r0 I:boolean) = (r0 I:org.mapsforge.map.reader.header.MapFileInfo) org.mapsforge.map.reader.header.MapFileInfo.debugFile boolean \l0x0027: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|0x0028: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004f \l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|0x002a: CONST  (r0 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x002c: INVOKE  (r0 I:java.lang.String) = (r9 I:org.mapsforge.map.reader.ReadBuffer), (r0 I:int) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString(int):java.lang.String type: VIRTUAL \l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"\-\-\-WayStart\" \l0x0032: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x004f \l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|0x0038: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x003a: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003c: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x003f: CONST_STR  (r3 I:java.lang.String) =  \"invalid way signature: \" \l0x0041: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0044: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0047: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004b: INVOKE  (r1 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|0x004e: RETURN  (r14 I:java.util.List\<org.mapsforge.map.datastore.Way\>) \l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: INVOKE  (r0 I:int) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0053|0x0053: IF  (r0 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:12:0x006c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0055|0x0055: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0057: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0059: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005c: CONST_STR  (r3 I:java.lang.String) =  \"invalid way data size: \" \l0x005e: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0061: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0064: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0068: INVOKE  (r1 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x006b|0x006b: RETURN  (r14 I:java.util.List\<org.mapsforge.map.datastore.Way\>) \l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|0x006c: IGET  (r1 I:boolean) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.useTileBitmask boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|0x006e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0082 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0070|0x0070: INVOKE  (r1 I:int) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readShort():int type: VIRTUAL \l0x0074: IGET  (r2 I:int) = (r8 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryTileBitmask int \l0x0076: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r1 I:?[int, boolean, short, byte, char]) & (r2 I:?[int, boolean, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0077|0x0077: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0086 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0079|0x0079: ARITH  (r0 I:int) = (r0 I:int) + (\-2 int) \l0x007b: INVOKE  (r9 I:org.mapsforge.map.reader.ReadBuffer), (r0 I:int) org.mapsforge.map.reader.ReadBuffer.skipBytes(int):void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x007e|0x007e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r36 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0082|0x0082: CONST  (r0 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0083: INVOKE  (r9 I:org.mapsforge.map.reader.ReadBuffer), (r0 I:int) org.mapsforge.map.reader.ReadBuffer.skipBytes(int):void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x0086|0x0086: INVOKE  (r0 I:byte) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x008a: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x008c: ARITH  (r1 I:int) = (r1 I:int) \>\>\> (4 int) \l0x008e: CAST  (r15 I:byte) = (byte) (r1 I:int) \l0x008f: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0091: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x0092: INVOKE  (r6 I:java.util.List) = \l  (r9 I:org.mapsforge.map.reader.ReadBuffer)\l  (r11 I:org.mapsforge.core.model.Tag[])\l  (r0 I:byte)\l org.mapsforge.map.reader.ReadBuffer.readTags(org.mapsforge.core.model.Tag[], byte):java.util.List type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0096|0x0096: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0099 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0098|0x0098: RETURN  (r14 I:java.util.List\<org.mapsforge.map.datastore.Way\>) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|0x0099: INVOKE  (r0 I:byte) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x009d: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l0x009f: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x00a0: CONST  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a2|0x00a2: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00a7 \l}"];
Node_24 [shape=record,label="{24\:\ 0x00a4|0x00a4: CONST  (r17 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a7|0x00a7: CONST  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a9|0x00a9: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ab|0x00ab: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00b0 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00ad|0x00ad: CONST  (r18 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|0x00b0: CONST  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|0x00b2: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b4|0x00b4: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00b9 \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b6|0x00b6: CONST  (r19 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b9|0x00b9: CONST  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x00bb|0x00bb: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (16 ?[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00bd|0x00bd: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00c1 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00bf|0x00bf: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c1|0x00c1: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c2|0x00c2: ARITH  (r2 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (8 ?[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00c4|0x00c4: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00c8 \l}"];
Node_40 [shape=record,label="{40\:\ 0x00c6|0x00c6: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c8|0x00c8: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_42 [shape=record,label="{42\:\ 0x00c9|0x00c9: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (4 ?[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x00cb|0x00cb: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x00d0 \l}"];
Node_44 [shape=record,label="{44\:\ 0x00cd|0x00cd: CONST  (r20 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00d0|0x00d0: CONST  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_46 [shape=record,label="{46\:\ 0x00d2|0x00d2: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00e6 \l}"];
Node_47 [shape=record,label="{47\:\ 0x00d4|0x00d4: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00d6: CONST_STR  (r3 I:java.lang.String) =  \"name\" \l0x00d8: INVOKE  (r4 I:java.lang.String) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l0x00dc: INVOKE  (r4 I:java.lang.String) = \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r4 I:java.lang.String)\l org.mapsforge.map.reader.MapFile.extractLocalized(java.lang.String):java.lang.String type: VIRTUAL \l0x00e0: INVOKE  \l  (r0 I:org.mapsforge.core.model.Tag)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x00e3: INVOKE  (r6 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_48 [shape=record,label="{48\:\ 0x00e6|0x00e6: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x00f6 \l}"];
Node_49 [shape=record,label="{49\:\ 0x00e8|0x00e8: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00ea: CONST_STR  (r3 I:java.lang.String) =  \"addr:housenumber\" \l0x00ec: INVOKE  (r4 I:java.lang.String) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l0x00f0: INVOKE  \l  (r0 I:org.mapsforge.core.model.Tag)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x00f3: INVOKE  (r6 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_50 [shape=record,label="{50\:\ 0x00f6|0x00f6: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0106 \l}"];
Node_51 [shape=record,label="{51\:\ 0x00f8|0x00f8: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00fa: CONST_STR  (r3 I:java.lang.String) =  \"ref\" \l0x00fc: INVOKE  (r4 I:java.lang.String) = (r37 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l0x0100: INVOKE  \l  (r0 I:org.mapsforge.core.model.Tag)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0103: INVOKE  (r6 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_52 [shape=record,label="{52\:\ 0x0106|0x0106: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x010f \l}"];
Node_53 [shape=record,label="{53\:\ 0x0108|0x0108: INVOKE  (r0 I:int[]) = \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r9 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.readOptionalLabelPosition(org.mapsforge.map.reader.ReadBuffer):int[] type: DIRECT \l0x010c: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x010f|0x010f: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0111|0x0111: INVOKE  (r3 I:int) = \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r2 I:boolean)\l  (r9 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.readOptionalWayDataBlocksByte(boolean, org.mapsforge.map.reader.ReadBuffer):int type: DIRECT \l}"];
Node_56 [shape=record,label="{56\:\ 0x0115|0x0115: IF  (r3 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:59:0x012e \l}"];
Node_57 [shape=record,label="{57\:\ 0x0117|0x0117: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0119: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x011b: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x011e: CONST_STR  (r2 I:java.lang.String) =  \"invalid number of way data blocks: \" \l0x0120: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0123: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0126: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x012a: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_58 [shape=record,label="{58\:\ 0x012d|0x012d: RETURN  (r14 I:java.util.List\<org.mapsforge.map.datastore.Way\>) \l}"];
Node_59 [shape=record,label="{59\:\ 0x012e|0x012e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_60 [shape=record,label="{60\:\ 0x012f|0x012f: IF  (r4 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:17:0x007e \l}"];
Node_61 [shape=record,label="{61\:\ 0x0131|0x0131: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0133: MOVE  (r1 I:?[long, double]) = (r32 I:?[long, double]) \l0x0135: MOVE  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0137: MOVE  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0139: MOVE  (r3 I:?[long, double]) = (r34 I:?[long, double]) \l0x013b: CONST  (r24 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x013d: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x013f: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY]) \l0x0140: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r37 I:?[OBJECT, ARRAY]) \l0x0142: INVOKE  (r0 I:org.mapsforge.core.model.LatLong[][]) = \l  (r0 I:org.mapsforge.map.reader.MapFile)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:boolean)\l  (r6 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.processWayDataBlock(double, double, boolean, org.mapsforge.map.reader.ReadBuffer):org.mapsforge.core.model.LatLong[][] type: DIRECT \l}"];
Node_62 [shape=record,label="{62\:\ 0x0146|0x0146: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0195 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0148|0x0148: IF  (r31 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0155 \l}"];
Node_64 [shape=record,label="{64\:\ 0x014a|0x014a: SGET  (r2 I:boolean) =  org.mapsforge.map.reader.MapFile.wayFilterEnabled boolean \l}"];
Node_65 [shape=record,label="{65\:\ 0x014c|0x014c: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0155 \l}"];
Node_66 [shape=record,label="{66\:\ 0x014e|0x014e: INVOKE  (r2 I:boolean) = \l  (r12 I:org.mapsforge.core.model.BoundingBox)\l  (r0 I:org.mapsforge.core.model.LatLong[][])\l org.mapsforge.core.model.BoundingBox.intersectsArea(org.mapsforge.core.model.LatLong[][]):boolean type: VIRTUAL \l}"];
Node_67 [shape=record,label="{67\:\ 0x0152|0x0152: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0155 \l}"];
Node_69 [shape=record,label="{69\:\ 0x0155|0x0155: SGET  (r2 I:org.mapsforge.map.reader.MapFile$Selector) =  org.mapsforge.map.reader.MapFile.Selector.ALL org.mapsforge.map.reader.MapFile$Selector \l0x0157: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r36 I:?[OBJECT, ARRAY]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0159|0x0159: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0167 \l}"];
Node_71 [shape=record,label="{71\:\ 0x015b|0x015b: IF  (r17 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0167 \l}"];
Node_72 [shape=record,label="{72\:\ 0x015d|0x015d: IF  (r18 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0167 \l}"];
Node_73 [shape=record,label="{73\:\ 0x015f|0x015f: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0167 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0161|0x0161: INVOKE  (r2 I:boolean) = \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r14 I:java.util.List)\l org.mapsforge.map.reader.MapFile.wayAsLabelTagFilter(java.util.List):boolean type: VIRTUAL \l}"];
Node_75 [shape=record,label="{75\:\ 0x0165|0x0165: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x0197 \l}"];
Node_76 [shape=record,label="{76\:\ 0x0167|0x0167: IF  (r21 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x018b \l}"];
Node_77 [shape=record,label="{77\:\ 0x0169|0x0169: NEW_INSTANCE  (r2 I:org.mapsforge.core.model.LatLong) =  org.mapsforge.core.model.LatLong \l0x016b: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY][])\l  (r16 I:?[int, short, byte, char])\l \l0x016d: AGET  (r4 I:?[OBJECT, ARRAY]) = \l  (r4 I:?[OBJECT, ARRAY][])\l  (r16 I:?[int, short, byte, char])\l \l0x016f: IGET  (r4 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0171: AGET  (r6 I:?[int, float]) = (r21 I:?[int, float][]), (r24 I:?[int, short, byte, char]) \l0x0173: INVOKE  (r25 I:double) = (r6 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0177: ARITH  (r4 I:double) = (r4 I:double) + (r25 I:double) \l0x0179: AGET  (r6 I:?[OBJECT, ARRAY]) = \l  (r0 I:?[OBJECT, ARRAY][])\l  (r16 I:?[int, short, byte, char])\l \l0x017b: AGET  (r6 I:?[OBJECT, ARRAY]) = \l  (r6 I:?[OBJECT, ARRAY][])\l  (r16 I:?[int, short, byte, char])\l \l0x017d: IGET  (r6 I:double) = (r6 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x017f: AGET  (r25 I:?[int, float]) = (r21 I:?[int, float][]), (r16 I:?[int, short, byte, char]) \l0x0181: INVOKE  (r25 I:double) = (r25 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0185: ARITH  (r6 I:double) = (r6 I:double) + (r25 I:double) \l0x0187: INVOKE  \l  (r2 I:org.mapsforge.core.model.LatLong)\l  (r4 I:double)\l  (r6 I:double)\l org.mapsforge.core.model.LatLong.\<init\>(double, double):void type: DIRECT \l}"];
Node_78 [shape=record,label="{78\:\ 0x018b|0x018b: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_79 [shape=record,label="{79\:\ 0x018c|0x018c: NEW_INSTANCE  (r4 I:org.mapsforge.map.datastore.Way) =  org.mapsforge.map.datastore.Way \l0x018e: INVOKE  \l  (r4 I:org.mapsforge.map.datastore.Way)\l  (r15 I:byte)\l  (r14 I:java.util.List)\l  (r0 I:org.mapsforge.core.model.LatLong[][])\l  (r2 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.datastore.Way.\<init\>(byte, java.util.List, org.mapsforge.core.model.LatLong[][], org.mapsforge.core.model.LatLong):void type: DIRECT \l0x0191: INVOKE  (r10 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_80 [shape=record,label="{80\:\ 0x0195|0x0195: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r36 I:?[OBJECT, ARRAY]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0197|0x0197: ARITH  (r4 I:int) = (r23 I:int) + (1 int) \l0x0199: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x019a: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x019c: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x019d: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x019f: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_82 [shape=record,label="{82\:\ 0x01a1|0x01a1: ARITH  (r13 I:int) = (r13 I:int) + (\-1 int) \l0x01a3: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_83 [shape=record,label="{83\:\ 0x01a7|0x01a7: RETURN  (r10 I:java.util.List\<org.mapsforge.map.datastore.Way\>) \l}"];
MethodNode[shape=record,label="{private java.util.List\<org.mapsforge.map.datastore.Way\> org.mapsforge.map.reader.MapFile.processWays((r27 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r28 I:org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:org.mapsforge.map.reader.MapFile$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/reader\/QueryParameters;, I, Lorg\/mapsforge\/core\/model\/BoundingBox;, ZDD, Lorg\/mapsforge\/map\/reader\/MapFile$Selector;, Lorg\/mapsforge\/map\/reader\/ReadBuffer;, ), Ljava\/util\/List\<, Lorg\/mapsforge\/map\/datastore\/Way;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_83;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_82;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_59 -> Node_60;
Node_60 -> Node_17;
Node_60 -> Node_61[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_80;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_69;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_69;
Node_66 -> Node_67;
Node_67 -> Node_69;
Node_67 -> Node_80[style=dashed];
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_76;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_76;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_76;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_76;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_81;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_78;
Node_77 -> Node_79;
Node_78 -> Node_79;
Node_79 -> Node_81;
Node_80 -> Node_81;
Node_81 -> Node_60;
Node_82 -> Node_1;
}

