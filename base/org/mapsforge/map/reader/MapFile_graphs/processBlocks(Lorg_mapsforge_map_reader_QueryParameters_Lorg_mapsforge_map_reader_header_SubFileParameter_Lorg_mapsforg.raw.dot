digraph "CFG fororg.mapsforge.map.reader.MapFile.processBlocks(Lorg\/mapsforge\/map\/reader\/QueryParameters;Lorg\/mapsforge\/map\/reader\/header\/SubFileParameter;Lorg\/mapsforge\/core\/model\/BoundingBox;Lorg\/mapsforge\/map\/reader\/MapFile$Selector;)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r14 I:org.mapsforge.map.datastore.MapReadResult) =  org.mapsforge.map.datastore.MapReadResult \l0x0008: INVOKE  (r14 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.\<init\>():void type: DIRECT \l0x000b: IGET  (r0 I:long) = (r12 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockY long \l0x000d: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x000e: MOVE  (r16 I:?[long, double]) = (r0 I:?[long, double]) \l0x0010: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IGET  (r1 I:long) = (r12 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockY long \l0x0013: CMP_L  (r1 I:int) = (r16 I:long), (r1 I:long) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:54:0x018f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IGET  (r1 I:long) = (r12 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.fromBlockX long \l0x0019: MOVE  (r18 I:?[long, double]) = (r1 I:?[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IGET  (r1 I:long) = (r12 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.toBlockX long \l0x001d: CONST  (r20 I:?[long, double]) = (1 ?[long, double]) \l0x001f: CMP_L  (r1 I:int) = (r18 I:long), (r1 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:53:0x018a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: IGET  (r1 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.blocksWidth long \l0x0025: ARITH  (r1 I:long) = (r1 I:long) * (r16 I:long) \l0x0027: ARITH  (r1 I:long) = (r1 I:long) + (r18 I:long) \l0x0029: IGET  (r3 I:org.mapsforge.map.reader.IndexCache) = (r11 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.databaseIndexCache org.mapsforge.map.reader.IndexCache \l0x002b: INVOKE  (r3 I:long) = \l  (r3 I:org.mapsforge.map.reader.IndexCache)\l  (r13 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r1 I:long)\l org.mapsforge.map.reader.IndexCache.getIndexEntry(org.mapsforge.map.reader.header.SubFileParameter, long):long type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0041 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: CONST  (r5 I:?[long, double]) = \l  (549755813888(0x8000000000, double:2.716154612436E\-312) ?[long, double])\l \l0x0036: ARITH  (r5 I:long) = (r5 I:long) & (r3 I:long) \l0x0037: CONST  (r7 I:?[long, double]) = (0 ?[long, double]) \l0x0039: CMP_L  (r5 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003f \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r5 I:?[int, boolean, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|0x0041: MOVE  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: CONST  (r5 I:?[long, double]) = \l  (549755813887(0x7fffffffff, double:2.71615461243E\-312) ?[long, double])\l \l0x0048: ARITH  (r3 I:long) = (r3 I:long) & (r5 I:long) \l0x0049: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x004a: CMP_L  (r7 I:int) = (r3 I:long), (r20 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:51:0x015b \l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: IGET  (r7 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.subFileSize long \l0x0050: CMP_L  (r7 I:int) = (r3 I:long), (r7 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0052|0x0052: IF  (r7 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x0056 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0057: ARITH  (r1 I:long) = (r1 I:long) + (r20 I:long) \l0x0059: IGET  (r7 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.numberOfBlocks long \l0x005b: CMP_L  (r7 I:int) = (r1 I:long), (r7 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0062 \l}"];
Node_20 [shape=record,label="{20\:\ 0x005f|0x005f: IGET  (r1 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.subFileSize long \l}"];
Node_21 [shape=record,label="{21\:\ 0x0062|0x0062: IGET  (r7 I:org.mapsforge.map.reader.IndexCache) = (r11 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.databaseIndexCache org.mapsforge.map.reader.IndexCache \l0x0064: INVOKE  (r1 I:long) = \l  (r7 I:org.mapsforge.map.reader.IndexCache)\l  (r13 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r1 I:long)\l org.mapsforge.map.reader.IndexCache.getIndexEntry(org.mapsforge.map.reader.header.SubFileParameter, long):long type: VIRTUAL \l0x0068: ARITH  (r1 I:long) = (r1 I:long) & (r5 I:long) \l0x0069: IGET  (r5 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.subFileSize long \l0x006b: CMP_L  (r5 I:int) = (r1 I:long), (r5 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x006d|0x006d: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:25:0x009e \l}"];
Node_23 [shape=record,label="{23\:\ 0x006f|0x006f: SGET  (r3 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0071: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0073: INVOKE  (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0076: CONST_STR  (r5 I:java.lang.String) =  \"invalid next block pointer: \" \l0x0078: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007b: INVOKE  (r4 I:java.lang.StringBuilder), (r1 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x007e: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0082: INVOKE  (r3 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x0085: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0087: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0089: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x008c: CONST_STR  (r3 I:java.lang.String) =  \"sub\-file size: \" \l0x008e: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0091: IGET  (r3 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.subFileSize long \l0x0093: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0096: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x009a: INVOKE  (r1 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x009d|0x009d: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_25 [shape=record,label="{25\:\ 0x009e|0x009e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009f: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x00a0: CAST  (r1 I:int) = (int) (r1 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a1|0x00a1: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:29:0x00ba \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a3|0x00a3: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x00a5: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00a7: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00aa: CONST_STR  (r4 I:java.lang.String) =  \"current block size must not be negative: \" \l0x00ac: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00af: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00b2: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00b6: INVOKE  (r2 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x00b9|0x00b9: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_29 [shape=record,label="{29\:\ 0x00ba|0x00ba: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x00be \l}"];
Node_31 [shape=record,label="{31\:\ 0x00be|0x00be: SGET  (r2 I:int) =  org.mapsforge.core.util.Parameters.MAXIMUM_BUFFER_SIZE int \l}"];
Node_32 [shape=record,label="{32\:\ 0x00c0|0x00c0: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:34:0x00da \l}"];
Node_33 [shape=record,label="{33\:\ 0x00c2|0x00c2: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x00c4: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00c6: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00c9: CONST_STR  (r3 I:java.lang.String) =  \"current block size too large: \" \l0x00cb: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ce: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00d1: INVOKE  (r1 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00d5: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_34 [shape=record,label="{34\:\ 0x00da|0x00da: CAST  (r5 I:long) = (long) (r1 I:int) \l0x00db: ARITH  (r5 I:long) = (r5 I:long) + (r3 I:long) \l0x00dc: IGET  (r7 I:long) = (r11 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.fileSize long \l0x00de: CMP_L  (r2 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00e0|0x00e0: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:38:0x00f9 \l}"];
Node_36 [shape=record,label="{36\:\ 0x00e2|0x00e2: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x00e4: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00e6: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x00e9: CONST_STR  (r4 I:java.lang.String) =  \"current block largher than file size: \" \l0x00eb: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x00ee: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00f1: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00f5: INVOKE  (r2 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x00f8|0x00f8: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00f9|0x00f9: NEW_INSTANCE  (r10 I:org.mapsforge.map.reader.ReadBuffer) =  org.mapsforge.map.reader.ReadBuffer \l0x00fb: IGET  (r2 I:java.nio.channels.FileChannel) = (r11 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.inputChannel java.nio.channels.FileChannel \l0x00fd: INVOKE  \l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l  (r2 I:java.nio.channels.FileChannel)\l org.mapsforge.map.reader.ReadBuffer.\<init\>(java.nio.channels.FileChannel):void type: DIRECT \l0x0100: IGET  (r5 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.startAddress long \l0x0102: ARITH  (r5 I:long) = (r5 I:long) + (r3 I:long) \l0x0103: INVOKE  (r2 I:boolean) = \l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l  (r5 I:long)\l  (r1 I:int)\l org.mapsforge.map.reader.ReadBuffer.readFromFile(long, int):boolean type: VIRTUAL \l}"];
Node_39 [shape=record,label="{39\:\ 0x0107|0x0107: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0120 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0109|0x0109: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x010b: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x010d: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0110: CONST_STR  (r4 I:java.lang.String) =  \"reading current block has failed: \" \l0x0112: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0115: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0118: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x011c: INVOKE  (r2 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ 0x011f|0x011f: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0120|0x0120: IGET  (r0 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.boundaryTileTop long \l0x0122: ARITH  (r0 I:long) = (r0 I:long) + (r16 I:long) \l0x0124: IGET  (r2 I:byte) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l0x0126: INVOKE  (r5 I:double) = (r0 I:long), (r2 I:byte) org.mapsforge.core.util.MercatorProjection.tileYToLatitude(long, byte):double type: STATIC \l0x012a: IGET  (r0 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.boundaryTileLeft long \l0x012c: ARITH  (r0 I:long) = (r0 I:long) + (r18 I:long) \l0x012e: IGET  (r2 I:byte) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l0x0130: INVOKE  (r7 I:double) = (r0 I:long), (r2 I:byte) org.mapsforge.core.util.MercatorProjection.tileXToLongitude(long, byte):double type: STATIC \l0x0134: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0136: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0138: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x013a: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r26 I:?[OBJECT, ARRAY]) \l0x013c: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x013e|SYNTHETIC\lSplitter:B:43:0x013e\l}"];
Node_44 [shape=record,label="{44\:\ ?|Splitter:B:43:0x013e\l|0x013e: INVOKE  (r0 I:org.mapsforge.map.datastore.PoiWayBundle) = \l  (r1 I:org.mapsforge.map.reader.MapFile)\l  (r2 I:org.mapsforge.map.reader.QueryParameters)\l  (r3 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r4 I:org.mapsforge.core.model.BoundingBox)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:org.mapsforge.map.reader.MapFile$Selector)\l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.processBlock(org.mapsforge.map.reader.QueryParameters, org.mapsforge.map.reader.header.SubFileParameter, org.mapsforge.core.model.BoundingBox, double, double, org.mapsforge.map.reader.MapFile$Selector, org.mapsforge.map.reader.ReadBuffer):org.mapsforge.map.datastore.PoiWayBundle type: DIRECT A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x0148 \}, TRY_ENTER]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0142|0x0142: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0154 A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x0148 \}]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0144|0x0144: INVOKE  \l  (r14 I:org.mapsforge.map.datastore.MapReadResult)\l  (r0 I:org.mapsforge.map.datastore.PoiWayBundle)\l org.mapsforge.map.datastore.MapReadResult.add(org.mapsforge.map.datastore.PoiWayBundle):void type: VIRTUAL A[Catch:\{ ArrayIndexOutOfBoundsException \-\> 0x0148 \}, TRY_LEAVE]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0148|ExcHandler: ArrayIndexOutOfBoundsException null\lSplitter:B:43:0x013e\l|0x0148: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_49 [shape=record,label="{49\:\ 0x0149|0x0149: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x014b: SGET  (r2 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x014d: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.ArrayIndexOutOfBoundsException) java.lang.ArrayIndexOutOfBoundsException.getMessage():java.lang.String type: VIRTUAL \l0x0151: INVOKE  \l  (r1 I:java.util.logging.Logger)\l  (r2 I:java.util.logging.Level)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_50 [shape=record,label="{50\:\ 0x0154|0x0154: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0155: ARITH  (r18 I:long) = (r18 I:long) + (r20 I:long) \l0x0157: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_51 [shape=record,label="{51\:\ 0x015b|0x015b: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x015d: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x015f: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0162: CONST_STR  (r5 I:java.lang.String) =  \"invalid current block pointer: \" \l0x0164: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0167: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x016a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x016e: INVOKE  (r1 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x0171: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0173: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0175: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0178: CONST_STR  (r3 I:java.lang.String) =  \"subFileSize: \" \l0x017a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x017d: IGET  (r3 I:long) = (r13 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.subFileSize long \l0x017f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0182: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0186: INVOKE  (r1 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_52 [shape=record,label="{52\:\ 0x0189|0x0189: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_53 [shape=record,label="{53\:\ 0x018a|0x018a: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x018b: ARITH  (r16 I:long) = (r16 I:long) + (r20 I:long) \l}"];
Node_54 [shape=record,label="{54\:\ 0x018f|0x018f: RETURN  (r14 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.reader.MapFile.processBlocks((r23 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r24 I:org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:org.mapsforge.map.reader.MapFile$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_54;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_53;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_51;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_51[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_29 -> Node_31;
Node_29 -> Node_50[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_50;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_43 -> Node_48;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_46 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_4;
Node_51 -> Node_52;
Node_53 -> Node_1;
}

