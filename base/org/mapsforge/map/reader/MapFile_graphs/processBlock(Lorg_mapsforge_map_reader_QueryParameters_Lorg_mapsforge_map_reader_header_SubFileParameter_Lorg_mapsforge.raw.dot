digraph "CFG fororg.mapsforge.map.reader.MapFile.processBlock(Lorg\/mapsforge\/map\/reader\/QueryParameters;Lorg\/mapsforge\/map\/reader\/header\/SubFileParameter;Lorg\/mapsforge\/core\/model\/BoundingBox;DDLorg\/mapsforge\/map\/reader\/MapFile$Selector;Lorg\/mapsforge\/map\/reader\/ReadBuffer;)Lorg\/mapsforge\/map\/datastore\/PoiWayBundle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r1 I:boolean) = \l  (r11 I:org.mapsforge.map.reader.MapFile)\l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.processBlockSignature(org.mapsforge.map.reader.ReadBuffer):boolean type: DIRECT \l0x000c: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r1 I:int[][]) = \l  (r11 I:org.mapsforge.map.reader.MapFile)\l  (r0 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.readZoomTable(org.mapsforge.map.reader.header.SubFileParameter, org.mapsforge.map.reader.ReadBuffer):int[][] type: DIRECT \l0x0014: IGET  (r2 I:int) = (r9 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int \l0x0016: IGET  (r3 I:byte) = (r0 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMin byte \l0x0018: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0019: AGET  (r3 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x001b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: AGET  (r5 I:?[int, float]) = (r3 I:?[int, float][]), (r4 I:?[int, short, byte, char]) \l0x001e: AGET  (r1 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x0020: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0021: AGET  (r13 I:?[int, float]) = (r1 I:?[int, float][]), (r2 I:?[int, short, byte, char]) \l0x0023: INVOKE  (r1 I:int) = (r25 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:7:0x0040 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x002b: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002d: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0030: CONST_STR  (r3 I:java.lang.String) =  \"invalid first way offset: \" \l0x0032: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0035: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0038: INVOKE  (r1 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003c: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|0x003f: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|0x0040: INVOKE  (r3 I:int) = (r25 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.getBufferPosition():int type: VIRTUAL \l0x0044: ARITH  (r14 I:int) = (r1 I:int) + (r3 I:int) \l0x0046: INVOKE  (r1 I:int) = (r25 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.getBufferSize():int type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x004a|0x004a: IF  (r14 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:11:0x0063 \l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|0x004c: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x004e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0053: CONST_STR  (r2 I:java.lang.String) =  \"invalid first way offset: \" \l0x0055: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0058: INVOKE  (r1 I:java.lang.StringBuilder), (r14 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x005b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x005f: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0062|0x0062: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0063|0x0063: IGET  (r1 I:int) = (r9 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int \l0x0065: IGET  (r0 I:byte) = (r0 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.baseZoomLevel byte \l}"];
Node_12 [shape=record,label="{12\:\ 0x0067|0x0067: IF  (r1 I:?[int, byte, short, char]) \<= (r0 I:?[int, byte, short, char])  \-\> B:14:0x006b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0069|0x0069: CONST  (r15 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: CONST  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|0x006c: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x006e: MOVE  (r1 I:?[long, double]) = (r20 I:?[long, double]) \l0x0070: MOVE  (r3 I:?[long, double]) = (r22 I:?[long, double]) \l0x0072: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0074: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0075: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0077: INVOKE  (r7 I:java.util.List) = \l  (r0 I:org.mapsforge.map.reader.MapFile)\l  (r1 I:double)\l  (r3 I:double)\l  (r5 I:int)\l  (r6 I:org.mapsforge.core.model.BoundingBox)\l  (r7 I:boolean)\l  (r8 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.processPOIs(double, double, int, org.mapsforge.core.model.BoundingBox, boolean, org.mapsforge.map.reader.ReadBuffer):java.util.List type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|0x007b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x007e \l}"];
Node_17 [shape=record,label="{17\:\ 0x007d|0x007d: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_18 [shape=record,label="{18\:\ 0x007e|0x007e: SGET  (r0 I:org.mapsforge.map.reader.MapFile$Selector) =  org.mapsforge.map.reader.MapFile.Selector.POIS org.mapsforge.map.reader.MapFile$Selector \l0x0080: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0082|0x0082: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x008a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0084|0x0084: INVOKE  (r0 I:java.util.List) =  java.util.Collections.emptyList():java.util.List type: STATIC \l0x0088: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x008a|0x008a: INVOKE  (r0 I:int) = (r25 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.getBufferPosition():int type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x008e|0x008e: IF  (r0 I:?[int, byte, short, char]) \<= (r14 I:?[int, byte, short, char])  \-\> B:25:0x00ab \l}"];
Node_23 [shape=record,label="{23\:\ 0x0090|0x0090: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0092: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0094: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0097: CONST_STR  (r2 I:java.lang.String) =  \"invalid buffer position: \" \l0x0099: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x009c: INVOKE  (r2 I:int) = (r25 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.getBufferPosition():int type: VIRTUAL \l0x00a0: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x00a3: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x00a7: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00aa|0x00aa: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00ab|0x00ab: INVOKE  (r10 I:org.mapsforge.map.reader.ReadBuffer), (r14 I:int) org.mapsforge.map.reader.ReadBuffer.setBufferPosition(int):void type: VIRTUAL \l0x00ae: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00b0: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x00b2: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b3: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00b5: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00b6: MOVE  (r5 I:?[long, double]) = (r20 I:?[long, double]) \l0x00b8: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x00b9: MOVE  (r7 I:?[long, double]) = (r22 I:?[long, double]) \l0x00bb: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00bd: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x00bf: INVOKE  (r0 I:java.util.List) = \l  (r0 I:org.mapsforge.map.reader.MapFile)\l  (r1 I:org.mapsforge.map.reader.QueryParameters)\l  (r2 I:int)\l  (r3 I:org.mapsforge.core.model.BoundingBox)\l  (r4 I:boolean)\l  (r5 I:double)\l  (r7 I:double)\l  (r9 I:org.mapsforge.map.reader.MapFile$Selector)\l  (r10 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.processWays(org.mapsforge.map.reader.QueryParameters, int, org.mapsforge.core.model.BoundingBox, boolean, double, double, org.mapsforge.map.reader.MapFile$Selector, org.mapsforge.map.reader.ReadBuffer):java.util.List type: DIRECT \l}"];
Node_26 [shape=record,label="{26\:\ 0x00c3|0x00c3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00c6 \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c5|0x00c5: RETURN  (r12 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c6|0x00c6: NEW_INSTANCE  (r1 I:org.mapsforge.map.datastore.PoiWayBundle) =  org.mapsforge.map.datastore.PoiWayBundle \l0x00c8: INVOKE  \l  (r1 I:org.mapsforge.map.datastore.PoiWayBundle)\l  (r13 I:java.util.List)\l  (r0 I:java.util.List)\l org.mapsforge.map.datastore.PoiWayBundle.\<init\>(java.util.List, java.util.List):void type: DIRECT \l}"];
Node_29 [shape=record,label="{29\:\ 0x00cb|0x00cb: RETURN  (r1 I:org.mapsforge.map.datastore.PoiWayBundle) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.datastore.PoiWayBundle org.mapsforge.map.reader.MapFile.processBlock((r16 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r17 I:org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:org.mapsforge.map.reader.MapFile$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_28;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_29;
}

