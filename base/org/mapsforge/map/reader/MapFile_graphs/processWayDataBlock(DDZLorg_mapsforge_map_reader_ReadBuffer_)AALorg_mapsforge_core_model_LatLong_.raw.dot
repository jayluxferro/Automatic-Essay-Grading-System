digraph "CFG fororg.mapsforge.map.reader.MapFile.processWayDataBlock(DDZLorg\/mapsforge\/map\/reader\/ReadBuffer;)[[Lorg\/mapsforge\/core\/model\/LatLong;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r20 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l0x0004: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:19:0x0054 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (32767(0x7fff, float:4.5916E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: NEW_ARRAY  (r3 I:org.mapsforge.core.model.LatLong[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.core.model.LatLong[][] \l0x000f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:18:0x0053 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r5 I:int) = (r20 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l0x0016: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r5 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:16:0x003a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IF  (r5 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:11:0x001c \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: NEW_ARRAY  (r5 I:org.mapsforge.core.model.LatLong[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.core.model.LatLong[] \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IF  (r19 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x0021: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0022: MOVE  (r9 I:?[long, double]) = (r15 I:?[long, double]) \l0x0023: MOVE  (r11 I:?[long, double]) = (r17 I:?[long, double]) \l0x0025: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r8 I:org.mapsforge.core.model.LatLong[])\l  (r9 I:double)\l  (r11 I:double)\l  (r13 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.decodeWayNodesDoubleDelta(org.mapsforge.core.model.LatLong[], double, double, org.mapsforge.map.reader.ReadBuffer):void type: DIRECT \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x002c: MOVE  (r8 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x002d: MOVE  (r9 I:?[long, double]) = (r15 I:?[long, double]) \l0x002e: MOVE  (r11 I:?[long, double]) = (r17 I:?[long, double]) \l0x0030: MOVE  (r13 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0032: INVOKE  \l  (r7 I:org.mapsforge.map.reader.MapFile)\l  (r8 I:org.mapsforge.core.model.LatLong[])\l  (r9 I:double)\l  (r11 I:double)\l  (r13 I:org.mapsforge.map.reader.ReadBuffer)\l org.mapsforge.map.reader.MapFile.decodeWayNodesSingleDelta(org.mapsforge.core.model.LatLong[], double, double, org.mapsforge.map.reader.ReadBuffer):void type: DIRECT \l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|0x0035: APUT  \l  (r3 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r5 I:?[OBJECT, ARRAY])\l \l0x0037: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x003c: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003e: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0041: CONST_STR  (r3 I:java.lang.String) =  \"invalid number of way nodes: \" \l0x0043: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0046: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0049: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x004d: INVOKE  (r0 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x0050: CHECK_CAST  (r1 I:org.mapsforge.core.model.LatLong[][]) = (org.mapsforge.core.model.LatLong[][]) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0052|0x0052: RETURN  (r1 I:org.mapsforge.core.model.LatLong[][]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|0x0053: RETURN  (r3 I:org.mapsforge.core.model.LatLong[][]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0054|0x0054: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0056: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x005b: CONST_STR  (r4 I:java.lang.String) =  \"invalid number of way coordinate blocks: \" \l0x005d: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0060: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0063: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0067: INVOKE  (r2 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l0x006a: CHECK_CAST  (r1 I:org.mapsforge.core.model.LatLong[][]) = (org.mapsforge.core.model.LatLong[][]) (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x006c|0x006c: RETURN  (r1 I:org.mapsforge.core.model.LatLong[][]) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.core.model.LatLong[][] org.mapsforge.map.reader.MapFile.processWayDataBlock((r14 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r15 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_19;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_19[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_16;
Node_9 -> Node_11;
Node_9 -> Node_16[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_6;
Node_16 -> Node_17;
Node_19 -> Node_20;
}

