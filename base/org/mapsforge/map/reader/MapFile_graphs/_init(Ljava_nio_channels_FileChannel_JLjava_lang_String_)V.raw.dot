digraph "CFG fororg.mapsforge.map.reader.MapFile.\<init\>(Ljava\/nio\/channels\/FileChannel;JLjava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r2 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:java.lang.String)\l org.mapsforge.map.datastore.MapDataStore.\<init\>(java.lang.String):void type: DIRECT \l0x0003: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: IPUT  (r6 I:byte), (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.zoomLevelMin byte \l0x0006: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l0x0008: IPUT  (r6 I:byte), (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.zoomLevelMax byte \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0047 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000c|SYNTHETIC\lSplitter:B:2:0x000c\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x000c\l|0x000c: IPUT  \l  (r3 I:java.nio.channels.FileChannel)\l  (r2 I:org.mapsforge.map.reader.MapFile)\l org.mapsforge.map.reader.MapFile.inputChannel java.nio.channels.FileChannel A[Catch:\{ Exception \-\> 0x0039 \}, TRY_ENTER]\l0x000e: IGET  (r3 I:java.nio.channels.FileChannel) = (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.inputChannel java.nio.channels.FileChannel A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0010: INVOKE  (r0 I:long) = (r3 I:java.nio.channels.FileChannel) java.nio.channels.FileChannel.size():long type: VIRTUAL A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0014: IPUT  (r0 I:long), (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.fileSize long A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0016: NEW_INSTANCE  (r3 I:org.mapsforge.map.reader.ReadBuffer) =  org.mapsforge.map.reader.ReadBuffer A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0018: IGET  (r6 I:java.nio.channels.FileChannel) = (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.inputChannel java.nio.channels.FileChannel A[Catch:\{ Exception \-\> 0x0039 \}]\l0x001a: INVOKE  \l  (r3 I:org.mapsforge.map.reader.ReadBuffer)\l  (r6 I:java.nio.channels.FileChannel)\l org.mapsforge.map.reader.ReadBuffer.\<init\>(java.nio.channels.FileChannel):void type: DIRECT A[Catch:\{ Exception \-\> 0x0039 \}]\l0x001d: NEW_INSTANCE  (r6 I:org.mapsforge.map.reader.header.MapFileHeader) =  org.mapsforge.map.reader.header.MapFileHeader A[Catch:\{ Exception \-\> 0x0039 \}]\l0x001f: INVOKE  (r6 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.\<init\>():void type: DIRECT A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0022: IPUT  \l  (r6 I:org.mapsforge.map.reader.header.MapFileHeader)\l  (r2 I:org.mapsforge.map.reader.MapFile)\l org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0024: IGET  (r6 I:org.mapsforge.map.reader.header.MapFileHeader) = (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0026: IGET  (r0 I:long) = (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.fileSize long A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0028: INVOKE  \l  (r6 I:org.mapsforge.map.reader.header.MapFileHeader)\l  (r3 I:org.mapsforge.map.reader.ReadBuffer)\l  (r0 I:long)\l org.mapsforge.map.reader.header.MapFileHeader.readHeader(org.mapsforge.map.reader.ReadBuffer, long):void type: VIRTUAL A[Catch:\{ Exception \-\> 0x0039 \}]\l0x002b: NEW_INSTANCE  (r3 I:org.mapsforge.map.reader.IndexCache) =  org.mapsforge.map.reader.IndexCache A[Catch:\{ Exception \-\> 0x0039 \}]\l0x002d: IGET  (r6 I:java.nio.channels.FileChannel) = (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.inputChannel java.nio.channels.FileChannel A[Catch:\{ Exception \-\> 0x0039 \}]\l0x002f: CONST  (r0 I:?[int, float, short, byte, char]) = (64 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0031: INVOKE  \l  (r3 I:org.mapsforge.map.reader.IndexCache)\l  (r6 I:java.nio.channels.FileChannel)\l  (r0 I:int)\l org.mapsforge.map.reader.IndexCache.\<init\>(java.nio.channels.FileChannel, int):void type: DIRECT A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0034: IPUT  \l  (r3 I:org.mapsforge.map.reader.IndexCache)\l  (r2 I:org.mapsforge.map.reader.MapFile)\l org.mapsforge.map.reader.MapFile.databaseIndexCache org.mapsforge.map.reader.IndexCache A[Catch:\{ Exception \-\> 0x0039 \}]\l0x0036: IPUT  (r4 I:long), (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.timestamp long A[Catch:\{ Exception \-\> 0x0039 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0038|0x0038: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x0039|ExcHandler: Exception null\lSplitter:B:2:0x000c\l|0x0039: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: INVOKE  (r2 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.closeFileChannel():void type: DIRECT \l0x003d: NEW_INSTANCE  (r4 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x003f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Exception) java.lang.Exception.getMessage():java.lang.String type: VIRTUAL \l0x0043: INVOKE  \l  (r4 I:org.mapsforge.map.reader.header.MapFileException)\l  (r3 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0046|0x0046: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: NEW_INSTANCE  (r3 I:org.mapsforge.map.reader.header.MapFileException) =  org.mapsforge.map.reader.header.MapFileException \l0x0049: CONST_STR  (r4 I:java.lang.String) =  \"mapFileChannel must not be null\" \l0x004b: INVOKE  \l  (r3 I:org.mapsforge.map.reader.header.MapFileException)\l  (r4 I:java.lang.String)\l org.mapsforge.map.reader.header.MapFileException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x004e|0x004e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.reader.MapFile.\<init\>((r2 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r3 I:java.nio.channels.FileChannel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

