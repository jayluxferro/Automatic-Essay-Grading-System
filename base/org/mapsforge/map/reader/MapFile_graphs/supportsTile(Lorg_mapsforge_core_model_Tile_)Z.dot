digraph "CFG fororg.mapsforge.map.reader.MapFile.supportsTile(Lorg\/mapsforge\/core\/model\/Tile;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|if (r3.getBoundingBox().intersects(getMapFileInfo().boundingBox) == false) goto L_0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0010}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (r3.zoomLevel \< r2.zoomLevelMin) goto L_0x001e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (r3.zoomLevel \> r2.zoomLevelMax) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|SYNTHETIC\lRETURN\l|return true\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.reader.MapFile.supportsTile((r2v0 'this' org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r3v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
}

