digraph "CFG fororg.mapsforge.map.reader.MapFile.readZoomTable(Lorg\/mapsforge\/map\/reader\/header\/SubFileParameter;Lorg\/mapsforge\/map\/reader\/ReadBuffer;)[[I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte) = (r8 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMax byte \l0x0002: IGET  (r8 I:byte) = (r8 I:org.mapsforge.map.reader.header.SubFileParameter) org.mapsforge.map.reader.header.SubFileParameter.zoomLevelMin byte \l0x0004: ARITH  (r0 I:int) = (r0 I:int) \- (r8 I:int) \l0x0005: CONST  (r8 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (r8 I:int) \l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0008: FILLED_NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]), (r1 I:int A[IMMUTABLE_TYPE]) elemType: int \l0x000c: CONST_CLASS  (r2 I:java.lang.Class\<int\>) =  int.class \l0x000e: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.lang.Class), (r1 I:int[]) java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object type: STATIC \l0x0012: CHECK_CAST  (r1 I:int[][]) = (int[][]) (r1 I:?[OBJECT, ARRAY]) \l0x0014: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0018|0x0018: IF  (r3 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:3:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x001a|0x001a: INVOKE  (r6 I:int) = (r9 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l0x001e: ARITH  (r4 I:int) = (r4 I:int) + (r6 I:int) \l0x001f: INVOKE  (r6 I:int) = (r9 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUnsignedInt():int type: VIRTUAL \l0x0023: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x0024: AGET  (r6 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0026: APUT  \l  (r6 I:?[int, float][])\l  (r2 I:?[int, short, byte, char])\l  (r4 I:?[int, float])\l \l0x0028: AGET  (r6 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x002a: APUT  \l  (r6 I:?[int, float][])\l  (r8 I:?[int, short, byte, char])\l  (r5 I:?[int, float])\l \l0x002c: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002f|0x002f: RETURN  (r1 I:int[][]) \l}"];
MethodNode[shape=record,label="{private int[][] org.mapsforge.map.reader.MapFile.readZoomTable((r7 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r8 I:org.mapsforge.map.reader.header.SubFileParameter A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
}

