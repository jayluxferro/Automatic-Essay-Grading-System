digraph "CFG fororg.mapsforge.map.reader.MapFile.processPOIs(DDILorg\/mapsforge\/core\/model\/BoundingBox;ZLorg\/mapsforge\/map\/reader\/ReadBuffer;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0004: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList \l0x0006: INVOKE  (r2 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT \l0x0009: IGET  (r3 I:org.mapsforge.map.reader.header.MapFileHeader) = (r0 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader \l0x000b: INVOKE  (r3 I:org.mapsforge.map.reader.header.MapFileInfo) = (r3 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.getMapFileInfo():org.mapsforge.map.reader.header.MapFileInfo type: VIRTUAL \l0x000f: IGET  (r3 I:org.mapsforge.core.model.Tag[]) = (r3 I:org.mapsforge.map.reader.header.MapFileInfo) org.mapsforge.map.reader.header.MapFileInfo.poiTags org.mapsforge.core.model.Tag[] \l0x0011: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0013|0x0013: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00e1 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0015|0x0015: IGET  (r5 I:org.mapsforge.map.reader.header.MapFileHeader) = (r0 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader \l0x0017: INVOKE  (r5 I:org.mapsforge.map.reader.header.MapFileInfo) = (r5 I:org.mapsforge.map.reader.header.MapFileHeader) org.mapsforge.map.reader.header.MapFileHeader.getMapFileInfo():org.mapsforge.map.reader.header.MapFileInfo type: VIRTUAL \l0x001b: IGET  (r5 I:boolean) = (r5 I:org.mapsforge.map.reader.header.MapFileInfo) org.mapsforge.map.reader.header.MapFileInfo.debugFile boolean \l0x001d: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0045 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: CONST  (r5 I:?[int, float, short, byte, char]) = (32 ?[int, float, short, byte, char]) \l0x0022: INVOKE  (r5 I:java.lang.String) = (r1 I:org.mapsforge.map.reader.ReadBuffer), (r5 I:int) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString(int):java.lang.String type: VIRTUAL \l0x0026: CONST_STR  (r7 I:java.lang.String) =  \"***POIStart\" \l0x0028: INVOKE  (r7 I:boolean) = (r5 I:java.lang.String), (r7 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|0x002c: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0045 \l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|0x002e: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0030: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0032: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0035: CONST_STR  (r3 I:java.lang.String) =  \"invalid POI signature: \" \l0x0037: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0041: INVOKE  (r1 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: RETURN  \l  (r6 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>)\l \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: INVOKE  (r5 I:int) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x0049: INVOKE  (r7 I:double) = (r5 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x004d: ARITH  (r7 I:double) = (r17 I:double) + (r7 I:double) \l0x004f: INVOKE  (r5 I:int) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x0053: INVOKE  (r9 I:double) = (r5 I:int) org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(int):double type: STATIC \l0x0057: ARITH  (r9 I:double) = (r19 I:double) + (r9 I:double) \l0x0059: INVOKE  (r5 I:byte) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x005d: ARITH  (r11 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (240(0xf0, float:3.36E\-43) ?[int, float, short, byte, char]) \l0x005f: ARITH  (r11 I:int) = (r11 I:int) \>\>\> (4 int) \l0x0061: CAST  (r11 I:byte) = (byte) (r11 I:int) \l0x0062: ARITH  (r5 I:?[int, boolean, short, byte, char]) = (r5 I:?[int, boolean, short, byte, char]) & (15 ?[int, float, short, byte, char]) \l0x0064: CAST  (r5 I:byte) = (byte) (r5 I:int) \l0x0065: INVOKE  (r5 I:java.util.List) = \l  (r1 I:org.mapsforge.map.reader.ReadBuffer)\l  (r3 I:org.mapsforge.core.model.Tag[])\l  (r5 I:byte)\l org.mapsforge.map.reader.ReadBuffer.readTags(org.mapsforge.core.model.Tag[], byte):java.util.List type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0069|0x0069: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x006c \l}"];
Node_10 [shape=record,label="{10\:\ 0x006b|0x006b: RETURN  \l  (r6 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x006c|0x006c: INVOKE  (r6 I:byte) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readByte():byte type: VIRTUAL \l0x0070: ARITH  (r1 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (128(0x80, float:1.794E\-43) ?[int, float, short, byte, char]) \l0x0072: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0073: CONST  (r13 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0074|0x0074: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0078 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0076|0x0076: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0078|0x0078: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_15 [shape=record,label="{15\:\ 0x0079|0x0079: ARITH  (r14 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (64 ?[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|0x007b: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x007f \l}"];
Node_17 [shape=record,label="{17\:\ 0x007d|0x007d: CONST  (r14 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x007f|0x007f: CONST  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0080|0x0080: ARITH  (r6 I:?[int, boolean, short, byte, char]) = (r6 I:?[int, boolean, short, byte, char]) & (32 ?[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0082|0x0082: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0085 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0084|0x0084: CONST  (r12 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|0x0085: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x009b \l}"];
Node_23 [shape=record,label="{23\:\ 0x0087|0x0087: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x0089: CONST_STR  (r6 I:java.lang.String) =  \"name\" \l0x008b: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x008c: INVOKE  (r3 I:java.lang.String) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l0x0090: INVOKE  (r3 I:java.lang.String) = \l  (r0 I:org.mapsforge.map.reader.MapFile)\l  (r3 I:java.lang.String)\l org.mapsforge.map.reader.MapFile.extractLocalized(java.lang.String):java.lang.String type: VIRTUAL \l0x0094: INVOKE  \l  (r1 I:org.mapsforge.core.model.Tag)\l  (r6 I:java.lang.String)\l  (r3 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x0097: INVOKE  (r5 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x009b|0x009b: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x009c|0x009c: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00ac \l}"];
Node_26 [shape=record,label="{26\:\ 0x009e|0x009e: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00a0: CONST_STR  (r3 I:java.lang.String) =  \"addr:housenumber\" \l0x00a2: INVOKE  (r6 I:java.lang.String) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readUTF8EncodedString():java.lang.String type: VIRTUAL \l0x00a6: INVOKE  \l  (r1 I:org.mapsforge.core.model.Tag)\l  (r3 I:java.lang.String)\l  (r6 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x00a9: INVOKE  (r5 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ac|0x00ac: IF  (r12 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00c0 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00ae|0x00ae: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Tag) =  org.mapsforge.core.model.Tag \l0x00b0: CONST_STR  (r3 I:java.lang.String) =  \"ele\" \l0x00b2: INVOKE  (r6 I:int) = (r24 I:org.mapsforge.map.reader.ReadBuffer) org.mapsforge.map.reader.ReadBuffer.readSignedInt():int type: VIRTUAL \l0x00b6: INVOKE  (r6 I:java.lang.String) = (r6 I:int) java.lang.Integer.toString(int):java.lang.String type: STATIC \l0x00ba: INVOKE  \l  (r1 I:org.mapsforge.core.model.Tag)\l  (r3 I:java.lang.String)\l  (r6 I:java.lang.String)\l org.mapsforge.core.model.Tag.\<init\>(java.lang.String, java.lang.String):void type: DIRECT \l0x00bd: INVOKE  (r5 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c0|0x00c0: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.LatLong) =  org.mapsforge.core.model.LatLong \l0x00c2: INVOKE  \l  (r1 I:org.mapsforge.core.model.LatLong)\l  (r7 I:double)\l  (r9 I:double)\l org.mapsforge.core.model.LatLong.\<init\>(double, double):void type: DIRECT \l}"];
Node_30 [shape=record,label="{30\:\ 0x00c5|0x00c5: IF  (r23 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x00d0 \l}"];
Node_31 [shape=record,label="{31\:\ 0x00c7|0x00c7: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x00c9: INVOKE  (r7 I:boolean) = \l  (r6 I:org.mapsforge.core.model.BoundingBox)\l  (r1 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.core.model.BoundingBox.contains(org.mapsforge.core.model.LatLong):boolean type: VIRTUAL \l}"];
Node_32 [shape=record,label="{32\:\ 0x00cd|0x00cd: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00da \l}"];
Node_34 [shape=record,label="{34\:\ 0x00d0|0x00d0: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00d2|0x00d2: NEW_INSTANCE  (r7 I:org.mapsforge.map.datastore.PointOfInterest) =  org.mapsforge.map.datastore.PointOfInterest \l0x00d4: INVOKE  \l  (r7 I:org.mapsforge.map.datastore.PointOfInterest)\l  (r11 I:byte)\l  (r5 I:java.util.List)\l  (r1 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.datastore.PointOfInterest.\<init\>(byte, java.util.List, org.mapsforge.core.model.LatLong):void type: DIRECT \l0x00d7: INVOKE  (r2 I:java.util.List), (r7 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_36 [shape=record,label="{36\:\ 0x00da|0x00da: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x00dc: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x00dd: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00e1|0x00e1: RETURN  \l  (r2 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>)\l \l}"];
MethodNode[shape=record,label="{private java.util.List\<org.mapsforge.map.datastore.PointOfInterest\> org.mapsforge.map.reader.MapFile.processPOIs((r16 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r17 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(DDI, Lorg\/mapsforge\/core\/model\/BoundingBox;, Z, Lorg\/mapsforge\/map\/reader\/ReadBuffer;, ), Ljava\/util\/List\<, Lorg\/mapsforge\/map\/datastore\/PointOfInterest;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_37;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_36;
Node_32 -> Node_35[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_1;
}

