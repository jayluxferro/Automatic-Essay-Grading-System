digraph "CFG fororg.mapsforge.map.reader.MapFile.processWayDataBlock(DDZLorg\/mapsforge\/map\/reader\/ReadBuffer;)[[Lorg\/mapsforge\/core\/model\/LatLong;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r20.readUnsignedInt()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r0 \< 1) goto L_0x0054\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r0 \<= 32767) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|org.mapsforge.core.model.LatLong[][] r3 = new org.mapsforge.core.model.LatLong[r0][]\lr4 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|LOOP_START\lPHI: r4 \l  PHI: (r4v2 int) = (r4v1 int), (r4v3 int) binds: [B:4:0x000d, B:13:0x0035] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0010\-\>B:13:0x0035\l|if (r4 \>= r0) goto L_0x0053\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|int r5 = r20.readUnsignedInt()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if (r5 \< 2) goto L_0x003a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|if (r5 \<= 32767) goto L_0x001c\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|org.mapsforge.core.model.LatLong[] r5 = new org.mapsforge.core.model.LatLong[r5]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|if (r19 == false) goto L_0x002b\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|decodeWayNodesDoubleDelta(r5, r15, r17, r20)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|decodeWayNodesSingleDelta(r5, r15, r17, r20)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|LOOP_END\lLOOP:0: B:5:0x0010\-\>B:13:0x0035\l|r3[r4] = r5\lint r4 = r4 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|java.util.logging.Logger r0 = LOGGER\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"invalid number of way nodes: \")\lr2.append(r5)\lr0.warning(r2.toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|RETURN\l|return r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x0054|java.util.logging.Logger r2 = LOGGER\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"invalid number of way coordinate blocks: \")\lr3.append(r0)\lr2.warning(r3.toString())\l}"];
Node_18 [shape=record,label="{18\:\ 0x006c|RETURN\l|return null\l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x003a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0035|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private org.mapsforge.core.model.LatLong[][] org.mapsforge.map.reader.MapFile.processWayDataBlock((r14v0 'this' org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r15v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_17[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_20;
Node_8 -> Node_9;
Node_8 -> Node_21[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_23;
Node_12 -> Node_22;
Node_13 -> Node_5;
Node_14 -> Node_15;
Node_17 -> Node_18;
Node_19 -> Node_16;
Node_20 -> Node_14;
Node_21 -> Node_14;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

