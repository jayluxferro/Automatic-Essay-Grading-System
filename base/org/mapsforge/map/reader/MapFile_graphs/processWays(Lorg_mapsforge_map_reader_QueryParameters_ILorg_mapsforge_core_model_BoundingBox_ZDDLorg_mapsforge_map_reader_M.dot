digraph "CFG fororg.mapsforge.map.reader.MapFile.processWays(Lorg\/mapsforge\/map\/reader\/QueryParameters;ILorg\/mapsforge\/core\/model\/BoundingBox;ZDDLorg\/mapsforge\/map\/reader\/MapFile$Selector;Lorg\/mapsforge\/map\/reader\/ReadBuffer;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r7 = r27\lr8 = r28\lr9 = r37\ljava.util.ArrayList r10 = new java.util.ArrayList()\lorg.mapsforge.core.model.Tag[] r11 = r7.mapFileHeader.getMapFileInfo().wayTags\lr1 = r30\lorg.mapsforge.core.model.BoundingBox r12 = r1.extendMeters(wayFilterDistance)\lr13 = r29\l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|LOOP_START\lPHI: r7 r13 \l  PHI: (r7v1 org.mapsforge.map.reader.MapFile) = (r7v0 org.mapsforge.map.reader.MapFile), (r7v4 org.mapsforge.map.reader.MapFile) binds: [B:0:0x0000, B:81:0x01a1] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 int) = (r13v0 int), (r13v2 int) binds: [B:0:0x0000, B:81:0x01a1] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x001d\-\>B:81:0x01a1\l|if (r13 == 0) goto L_0x01a7\l}"];
Node_2 [shape=record,label="{2\:\ 0x001f}"];
Node_3 [shape=record,label="{3\:\ 0x0028|if (r7.mapFileHeader.getMapFileInfo().debugFile == false) goto L_0x004f\l}"];
Node_4 [shape=record,label="{4\:\ 0x002a|java.lang.String r0 = r9.readUTF8EncodedString(32)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|if (r0.startsWith(\"\-\-\-WayStart\") != false) goto L_0x004f\l}"];
Node_6 [shape=record,label="{6\:\ 0x0038|java.util.logging.Logger r1 = LOGGER\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"invalid way signature: \")\lr2.append(r0)\lr1.warning(r2.toString())\l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|RETURN\l|return null\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|int r0 = r37.readUnsignedInt()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0053|if (r0 \>= 0) goto L_0x006c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0055|java.util.logging.Logger r1 = LOGGER\ljava.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"invalid way data size: \")\lr2.append(r0)\lr1.warning(r2.toString())\l}"];
Node_11 [shape=record,label="{11\:\ 0x006b|RETURN\l|return null\l}"];
Node_12 [shape=record,label="{12\:\ 0x006c}"];
Node_13 [shape=record,label="{13\:\ 0x006e|if (r8.useTileBitmask == false) goto L_0x0082\l}"];
Node_14 [shape=record,label="{14\:\ 0x0070}"];
Node_15 [shape=record,label="{15\:\ 0x0077|if ((r37.readShort() & r8.queryTileBitmask) != 0) goto L_0x0086\l}"];
Node_16 [shape=record,label="{16\:\ 0x0079|r9.skipBytes(r0 + \-2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x007e|r3 = r36\l}"];
Node_18 [shape=record,label="{18\:\ 0x0082|r9.skipBytes(2)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0086|byte r0 = r37.readByte()\lbyte r15 = (byte) ((r0 & 240) \>\>\> 4)\ljava.util.List r6 = r9.readTags(r11, (byte) (r0 & 15))\l}"];
Node_20 [shape=record,label="{20\:\ 0x0096|if (r6 != null) goto L_0x0099\l}"];
Node_21 [shape=record,label="{21\:\ 0x0098|RETURN\l|return null\l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|byte r0 = r37.readByte()\l}"];
Node_23 [shape=record,label="{23\:\ 0x00a2|if ((r0 & kotlin.jvm.internal.ByteCompanionObject.MIN_VALUE) == 0) goto L_0x00a7\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a4|r17 = true\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a7|r17 = false\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a9|PHI: r17 \l  PHI: (r17v0 boolean) = (r17v1 boolean), (r17v2 boolean) binds: [B:25:0x00a7, B:24:0x00a4] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x00ab|if ((r0 & 64) == 0) goto L_0x00b0\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ad|r18 = true\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|r18 = false\l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|PHI: r18 \l  PHI: (r18v0 boolean) = (r18v1 boolean), (r18v2 boolean) binds: [B:29:0x00b0, B:28:0x00ad] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b4|if ((r0 & 32) == 0) goto L_0x00b9\l}"];
Node_32 [shape=record,label="{32\:\ 0x00b6|r19 = true\l}"];
Node_33 [shape=record,label="{33\:\ 0x00b9|r19 = false\l}"];
Node_34 [shape=record,label="{34\:\ 0x00bb|PHI: r19 \l  PHI: (r19v0 boolean) = (r19v1 boolean), (r19v2 boolean) binds: [B:33:0x00b9, B:32:0x00b6] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x00bd|if ((r0 & 16) == 0) goto L_0x00c1\l}"];
Node_36 [shape=record,label="{36\:\ 0x00bf|r1 = true\l}"];
Node_37 [shape=record,label="{37\:\ 0x00c1|r1 = false\l}"];
Node_38 [shape=record,label="{38\:\ 0x00c2|PHI: r1 \l  PHI: (r1v9 boolean) = (r1v13 boolean), (r1v14 boolean) binds: [B:37:0x00c1, B:36:0x00bf] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x00c4|if ((r0 & 8) == 0) goto L_0x00c8\l}"];
Node_40 [shape=record,label="{40\:\ 0x00c6|r2 = true\l}"];
Node_41 [shape=record,label="{41\:\ 0x00c8|r2 = false\l}"];
Node_42 [shape=record,label="{42\:\ 0x00c9|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v11 boolean), (r2v12 boolean) binds: [B:41:0x00c8, B:40:0x00c6] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_43 [shape=record,label="{43\:\ 0x00cb|if ((r0 & 4) == 0) goto L_0x00d0\l}"];
Node_44 [shape=record,label="{44\:\ 0x00cd|r20 = true\l}"];
Node_45 [shape=record,label="{45\:\ 0x00d0|r20 = false\l}"];
Node_46 [shape=record,label="{46\:\ 0x00d2|PHI: r20 \l  PHI: (r20v0 boolean) = (r20v1 boolean), (r20v2 boolean) binds: [B:45:0x00d0, B:44:0x00cd] A[DONT_GENERATE, DONT_INLINE]\l|if (r17 == false) goto L_0x00e6\l}"];
Node_47 [shape=record,label="{47\:\ 0x00d4|r6.add(new org.mapsforge.core.model.Tag(\"name\", r7.extractLocalized(r37.readUTF8EncodedString())))\l}"];
Node_48 [shape=record,label="{48\:\ 0x00e6|if (r18 == false) goto L_0x00f6\l}"];
Node_49 [shape=record,label="{49\:\ 0x00e8|r6.add(new org.mapsforge.core.model.Tag(TAG_KEY_HOUSE_NUMBER, r37.readUTF8EncodedString()))\l}"];
Node_50 [shape=record,label="{50\:\ 0x00f6|if (r19 == false) goto L_0x0106\l}"];
Node_51 [shape=record,label="{51\:\ 0x00f8|r6.add(new org.mapsforge.core.model.Tag(TAG_KEY_REF, r37.readUTF8EncodedString()))\l}"];
Node_52 [shape=record,label="{52\:\ 0x0106|if (r1 == false) goto L_0x010f\l}"];
Node_53 [shape=record,label="{53\:\ 0x0108|r21 = r7.readOptionalLabelPosition(r9)\l}"];
Node_54 [shape=record,label="{54\:\ 0x010f|r21 = null\l}"];
Node_55 [shape=record,label="{55\:\ 0x0111|PHI: r21 \l  PHI: (r21v0 int[]) = (r21v1 int[]), (r21v2 int[]) binds: [B:54:0x010f, B:53:0x0108] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r7.readOptionalWayDataBlocksByte(r2, r9)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0115|if (r3 \>= 1) goto L_0x012e\l}"];
Node_57 [shape=record,label="{57\:\ 0x0117|java.util.logging.Logger r0 = LOGGER\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"invalid number of way data blocks: \")\lr1.append(r3)\lr0.warning(r1.toString())\l}"];
Node_58 [shape=record,label="{58\:\ 0x012d|RETURN\l|return null\l}"];
Node_59 [shape=record,label="{59\:\ 0x012e|r4 = 0\l}"];
Node_60 [shape=record,label="{60\:\ 0x012f|LOOP_START\lPHI: r3 r4 r6 r7 \l  PHI: (r3v2 int) = (r3v1 int), (r3v4 int) binds: [B:59:0x012e, B:80:0x0197] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:59:0x012e, B:80:0x0197] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 java.util.List\<org.mapsforge.core.model.Tag\>) = (r6v0 java.util.List\<org.mapsforge.core.model.Tag\>), (r6v3 java.util.List\<org.mapsforge.core.model.Tag\>) binds: [B:59:0x012e, B:80:0x0197] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v2 org.mapsforge.map.reader.MapFile) = (r7v1 org.mapsforge.map.reader.MapFile), (r7v3 org.mapsforge.map.reader.MapFile) binds: [B:59:0x012e, B:80:0x0197] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:60:0x012f\-\>B:80:0x0197\l|if (r4 \>= r3) goto L_0x007e\l}"];
Node_61 [shape=record,label="{61\:\ 0x0131|r22 = r3\lr23 = r4\lr14 = r6\lorg.mapsforge.core.model.LatLong[][] r0 = processWayDataBlock(r32, r34, r20, r37)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0146|if (r0 == null) goto L_0x0195\l}"];
Node_63 [shape=record,label="{63\:\ 0x0148|if (r31 == false) goto L_0x0155\l}"];
Node_64 [shape=record,label="{64\:\ 0x014a}"];
Node_65 [shape=record,label="{65\:\ 0x014c|if (wayFilterEnabled == false) goto L_0x0155\l}"];
Node_66 [shape=record,label="{66\:\ 0x014e}"];
Node_67 [shape=record,label="{67\:\ 0x0152|if (r12.intersectsArea(r0) != false) goto L_0x0155\l}"];
Node_68 [shape=record,label="{68\:\ 0x0155}"];
Node_69 [shape=record,label="{69\:\ 0x0159|if (org.mapsforge.map.reader.MapFile.Selector.ALL == r36) goto L_0x0167\l}"];
Node_70 [shape=record,label="{70\:\ 0x015b|if (r17 != false) goto L_0x0167\l}"];
Node_71 [shape=record,label="{71\:\ 0x015d|if (r18 != false) goto L_0x0167\l}"];
Node_72 [shape=record,label="{72\:\ 0x015f|if (r19 != false) goto L_0x0167\l}"];
Node_73 [shape=record,label="{73\:\ 0x0161}"];
Node_74 [shape=record,label="{74\:\ 0x0165|if (r7.wayAsLabelTagFilter(r14) == false) goto L_0x0197\l}"];
Node_75 [shape=record,label="{75\:\ 0x0167|if (r21 == null) goto L_0x018b\l}"];
Node_76 [shape=record,label="{76\:\ 0x0169|org.mapsforge.core.model.LatLong r2 = new org.mapsforge.core.model.LatLong(r0[0][0].latitude + org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r21[1]), r0[0][0].longitude + org.mapsforge.core.util.LatLongUtils.microdegreesToDegrees(r21[0]))\l}"];
Node_77 [shape=record,label="{77\:\ 0x018b|r2 = null\l}"];
Node_78 [shape=record,label="{78\:\ 0x018c|PHI: r2 \l  PHI: (r2v5 org.mapsforge.core.model.LatLong) = (r2v6 org.mapsforge.core.model.LatLong), (r2v7 org.mapsforge.core.model.LatLong) binds: [B:77:0x018b, B:76:0x0169] A[DONT_GENERATE, DONT_INLINE]\l|r10.add(new org.mapsforge.map.datastore.Way(r15, r14, r0, r2))\l}"];
Node_79 [shape=record,label="{79\:\ 0x0195|r3 = r36\l}"];
Node_80 [shape=record,label="{80\:\ 0x0197|LOOP_END\lLOOP:1: B:60:0x012f\-\>B:80:0x0197\l|int r4 = r23 + 1\lr6 = r14\lr3 = r22\lr7 = r27\l}"];
Node_81 [shape=record,label="{81\:\ 0x01a1|LOOP_END\lLOOP:0: B:1:0x001d\-\>B:81:0x01a1\l|int r13 = r13 + \-1\lr7 = r27\l}"];
Node_82 [shape=record,label="{82\:\ 0x01a7|RETURN\l|return r10\l}"];
Node_83 [shape=record,label="{83\:\ 0x0117|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x0098|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x01a7|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0038|SYNTHETIC\l}"];
Node_87 [shape=record,label="{87\:\ 0x0055|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x007e|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x0197|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0197|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0197|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private java.util.List\<org.mapsforge.map.datastore.Way\> org.mapsforge.map.reader.MapFile.processWays((r27v0 'this' org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r28v0 org.mapsforge.map.reader.QueryParameters A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30v0 org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36v0 org.mapsforge.map.reader.MapFile$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37v0 org.mapsforge.map.reader.ReadBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/reader\/QueryParameters;, I, Lorg\/mapsforge\/core\/model\/BoundingBox;, ZDD, Lorg\/mapsforge\/map\/reader\/MapFile$Selector;, Lorg\/mapsforge\/map\/reader\/ReadBuffer;, ), Ljava\/util\/List\<, Lorg\/mapsforge\/map\/datastore\/Way;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_85;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_8;
Node_5 -> Node_86[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_12;
Node_9 -> Node_87[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_81;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_84[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_59;
Node_56 -> Node_83[style=dashed];
Node_57 -> Node_58;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_88;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_79;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_68;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_68;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_67 -> Node_79[style=dashed];
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_75;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_75;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_75;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_75;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_90;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_76 -> Node_78;
Node_77 -> Node_78;
Node_78 -> Node_91;
Node_79 -> Node_89;
Node_80 -> Node_60;
Node_81 -> Node_1;
Node_83 -> Node_57;
Node_84 -> Node_21;
Node_85 -> Node_82;
Node_86 -> Node_6;
Node_87 -> Node_10;
Node_88 -> Node_17;
Node_89 -> Node_80;
Node_90 -> Node_80;
Node_91 -> Node_80;
}

