digraph "CFG fororg.mapsforge.map.reader.MapFile.readMapData(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/reader\/MapFile$Selector;)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0002: IGET  (r1 I:int) = (r6 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0008: IGET  (r1 I:int) = (r6 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"upperLeft tile must be above and left of lowerRight tile\" \l0x0010: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|SYNTHETIC\lSplitter:B:6:0x0014\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0014\l|0x0014: NEW_INSTANCE  (r1 I:org.mapsforge.map.reader.QueryParameters) =  org.mapsforge.map.reader.QueryParameters A[Catch:\{ IOException \-\> 0x0055 \}, TRY_ENTER]\l0x0016: INVOKE  (r1 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0019: IGET  (r2 I:org.mapsforge.map.reader.header.MapFileHeader) = (r4 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader A[Catch:\{ IOException \-\> 0x0055 \}]\l0x001b: IGET  (r3 I:byte) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte A[Catch:\{ IOException \-\> 0x0055 \}]\l0x001d: INVOKE  (r2 I:byte) = \l  (r2 I:org.mapsforge.map.reader.header.MapFileHeader)\l  (r3 I:byte)\l org.mapsforge.map.reader.header.MapFileHeader.getQueryZoomLevel(byte):byte type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0021: IPUT  (r2 I:int), (r1 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0023: IGET  (r2 I:org.mapsforge.map.reader.header.MapFileHeader) = (r4 I:org.mapsforge.map.reader.MapFile) org.mapsforge.map.reader.MapFile.mapFileHeader org.mapsforge.map.reader.header.MapFileHeader A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0025: IGET  (r3 I:int) = (r1 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0027: INVOKE  (r2 I:org.mapsforge.map.reader.header.SubFileParameter) = \l  (r2 I:org.mapsforge.map.reader.header.MapFileHeader)\l  (r3 I:int)\l org.mapsforge.map.reader.header.MapFileHeader.getSubFileParameter(int):org.mapsforge.map.reader.header.SubFileParameter type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0046 A[Catch:\{ IOException \-\> 0x0055 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|0x002d: SGET  (r5 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger A[Catch:\{ IOException \-\> 0x0055 \}]\l0x002f: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0031: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0034: CONST_STR  (r7 I:java.lang.String) =  \"no sub\-file for zoom level: \" A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0036: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0039: IGET  (r7 I:int) = (r1 I:org.mapsforge.map.reader.QueryParameters) org.mapsforge.map.reader.QueryParameters.queryZoomLevel int A[Catch:\{ IOException \-\> 0x0055 \}]\l0x003b: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x003e: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0042: INVOKE  (r5 I:java.util.logging.Logger), (r6 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0045|0x0045: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) A[Catch:\{ IOException \-\> 0x0055 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|0x0046: INVOKE  \l  (r1 I:org.mapsforge.map.reader.QueryParameters)\l  (r5 I:org.mapsforge.core.model.Tile)\l  (r6 I:org.mapsforge.core.model.Tile)\l  (r2 I:org.mapsforge.map.reader.header.SubFileParameter)\l org.mapsforge.map.reader.QueryParameters.calculateBaseTiles(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile, org.mapsforge.map.reader.header.SubFileParameter):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0049: INVOKE  \l  (r1 I:org.mapsforge.map.reader.QueryParameters)\l  (r2 I:org.mapsforge.map.reader.header.SubFileParameter)\l org.mapsforge.map.reader.QueryParameters.calculateBlocks(org.mapsforge.map.reader.header.SubFileParameter):void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0055 \}]\l0x004c: INVOKE  (r5 I:org.mapsforge.core.model.BoundingBox) = \l  (r5 I:org.mapsforge.core.model.Tile)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.core.model.Tile.getBoundingBox(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile):org.mapsforge.core.model.BoundingBox type: STATIC A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0050: INVOKE  (r5 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r4 I:org.mapsforge.map.reader.MapFile)\l  (r1 I:org.mapsforge.map.reader.QueryParameters)\l  (r2 I:org.mapsforge.map.reader.header.SubFileParameter)\l  (r5 I:org.mapsforge.core.model.BoundingBox)\l  (r7 I:org.mapsforge.map.reader.MapFile$Selector)\l org.mapsforge.map.reader.MapFile.processBlocks(org.mapsforge.map.reader.QueryParameters, org.mapsforge.map.reader.header.SubFileParameter, org.mapsforge.core.model.BoundingBox, org.mapsforge.map.reader.MapFile$Selector):org.mapsforge.map.datastore.MapReadResult type: DIRECT A[Catch:\{ IOException \-\> 0x0055 \}]\l0x0053: NOP   A[TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0054|0x0054: RETURN  (r5 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|ExcHandler: IOException null\lSplitter:B:6:0x0014\l|0x0055: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x0056|0x0056: SGET  (r6 I:java.util.logging.Logger) =  org.mapsforge.map.reader.MapFile.LOGGER java.util.logging.Logger \l0x0058: SGET  (r7 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x005a: INVOKE  (r1 I:java.lang.String) = (r5 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL \l0x005e: INVOKE  \l  (r6 I:java.util.logging.Logger)\l  (r7 I:java.util.logging.Level)\l  (r1 I:java.lang.String)\l  (r5 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0061|0x0061: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.reader.MapFile.readMapData((r4 'this' I:org.mapsforge.map.reader.MapFile A[IMMUTABLE_TYPE, THIS]), (r5 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.mapsforge.map.reader.MapFile$Selector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

