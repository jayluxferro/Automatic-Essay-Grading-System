digraph "CFG fororg.mapsforge.map.reader.QueryCalculations.getSecondLevelTileBitmaskUpperLeft(JJ)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (2 ?[long, double]) \l0x0002: ARITH  (r7 I:long) = (r7 I:long) % (r0 I:long) \l0x0003: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) \l0x0005: CMP_L  (r4 I:int) = (r7 I:long), (r2 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: ARITH  (r5 I:long) = (r9 I:long) % (r0 I:long) \l0x000b: CMP_L  (r5 I:int) = (r5 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (32768(0x8000, float:4.5918E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: RETURN  (r7 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: CONST  (r5 I:?[long, double]) = (1 ?[long, double]) \l0x0015: CMP_L  (r7 I:int) = (r7 I:long), (r5 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: ARITH  (r7 I:long) = (r9 I:long) % (r0 I:long) \l0x001b: CMP_L  (r7 I:int) = (r7 I:long), (r2 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (16384(0x4000, float:2.2959E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: RETURN  (r7 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: ARITH  (r9 I:long) = (r9 I:long) % (r0 I:long) \l0x0025: CMP_L  (r7 I:int) = (r9 I:long), (r5 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (2048(0x800, float:2.87E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: RETURN  (r7 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|0x002e: RETURN  (r7 I:int) \l}"];
MethodNode[shape=record,label="{private static int org.mapsforge.map.reader.QueryCalculations.getSecondLevelTileBitmaskUpperLeft((r7 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_17 -> Node_18;
}

