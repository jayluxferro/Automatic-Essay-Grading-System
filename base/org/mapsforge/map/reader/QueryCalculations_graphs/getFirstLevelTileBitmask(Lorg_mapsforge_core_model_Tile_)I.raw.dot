digraph "CFG fororg.mapsforge.map.reader.QueryCalculations.getFirstLevelTileBitmask(Lorg\/mapsforge\/core\/model\/Tile;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0002: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0008: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (52224(0xcc00, float:7.3181E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: RETURN  (r2 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0012: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l0x0014: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r0 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0019: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (13056(0x3300, float:1.8295E\-41) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: RETURN  (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IGET  (r0 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0022: ARITH  (r0 I:int) = (r0 I:int) % (2 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|0x0026: IGET  (r2 I:int) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0028: ARITH  (r2 I:int) = (r2 I:int) % (2 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (204(0xcc, float:2.86E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: RETURN  (r2 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: CONST  (r2 I:?[int, float, short, byte, char]) = (51 ?[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|0x0031: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private static int org.mapsforge.map.reader.QueryCalculations.getFirstLevelTileBitmask((r2 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

