digraph "CFG fororg.mapsforge.map.reader.QueryCalculations.calculateTileBitmask(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;I)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = r6.tileX\lr1 = 0\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|LOOP_START\lPHI: r0 r1 \l  PHI: (r0v1 int) = (r0v0 int), (r0v2 int) binds: [B:0:0x0000, B:7:0x001e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:0:0x0000, B:7:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0003\-\>B:7:0x001e\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|if (r0 \> r7.tileX) goto L_0x0021\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|int r2 = r6.tileY\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|LOOP_START\lPHI: r1 r2 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:3:0x0007, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:3:0x0007, B:6:0x000d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:4:0x0009\-\>B:6:0x000d\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (r2 \> r7.tileY) goto L_0x001e\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|LOOP_END\lLOOP:1: B:4:0x0009\-\>B:6:0x000d\l|r1 = r1 \| calculateTileBitmask(new org.mapsforge.core.model.Tile(r0, r2, r6.zoomLevel, r6.tileSize), r8)\lint r2 = r2 + 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|LOOP_END\lLOOP:0: B:1:0x0003\-\>B:7:0x001e\l|int r0 = r0 + 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|RETURN\l|return r1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static int org.mapsforge.map.reader.QueryCalculations.calculateTileBitmask((r6v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_4;
Node_7 -> Node_1;
Node_9 -> Node_8;
Node_10 -> Node_7;
}

