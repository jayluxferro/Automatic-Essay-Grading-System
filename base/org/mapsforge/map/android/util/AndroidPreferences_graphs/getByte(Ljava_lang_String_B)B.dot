digraph "CFG fororg.mapsforge.map.android.util.AndroidPreferences.getByte(Ljava\/lang\/String;B)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r2)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|int r3 = r2.sharedPreferences.getInt(r3, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007}"];
Node_4 [shape=record,label="{4\:\ 0x0009|if (r3 \< \-128) goto L_0x0012\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b}"];
Node_6 [shape=record,label="{6\:\ 0x000d|if (r3 \> 127) goto L_0x0012\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|byte r3 = (byte) r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|monitor\-exit(r2)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|RETURN\l|return r3\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|SYNTHETIC\lSplitter:B:10:0x0012\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0012\l|java.lang.StringBuilder r0 = new java.lang.StringBuilder()     \/\/ Catch:\{  \}\lr0.append(\"byte value out of range: \")\lr0.append(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|throw new java.lang.IllegalStateException(r0.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|REMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public synchronized byte org.mapsforge.map.android.util.AndroidPreferences.getByte((r2v0 'this' org.mapsforge.map.android.util.AndroidPreferences A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

