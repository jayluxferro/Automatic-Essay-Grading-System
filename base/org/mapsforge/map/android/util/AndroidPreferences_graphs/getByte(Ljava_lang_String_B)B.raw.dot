digraph "CFG fororg.mapsforge.map.android.util.AndroidPreferences.getByte(Ljava\/lang\/String;B)B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:android.content.SharedPreferences) = (r2 I:org.mapsforge.map.android.util.AndroidPreferences) org.mapsforge.map.android.util.AndroidPreferences.sharedPreferences android.content.SharedPreferences A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0003: INVOKE  (r3 I:int) = \l  (r0 I:android.content.SharedPreferences)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l android.content.SharedPreferences.getInt(java.lang.String, int):int type: INTERFACE A[Catch:\{ all \-\> 0x0029 \}]\l0x0006: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (\-128(0xffffffffffffff80, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r3 I:?[int, byte, short, char]) \< (r4 I:?[int, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r4 I:?[int, float, short, byte, char]) = \l  (127(0x7f, float:1.78E\-43) ?[int, float, short, byte, char])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r3 I:?[int, byte, short, char]) \> (r4 I:?[int, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: CAST  (r3 I:byte) = (byte) (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: RETURN  (r3 I:byte) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|SYNTHETIC\lSplitter:B:10:0x0012\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0012\l|0x0012: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException A[Catch:\{ all \-\> 0x0029 \}, TRY_ENTER]\l0x0014: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0029 \}]\l0x0016: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0029 \}]\l0x0019: CONST_STR  (r1 I:java.lang.String) =  \"byte value out of range: \" A[Catch:\{ all \-\> 0x0029 \}]\l0x001b: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x001e: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0021: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0029 \}]\l0x0025: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r3 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0029 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0029 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0029: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized byte org.mapsforge.map.android.util.AndroidPreferences.getByte((r2 'this' I:org.mapsforge.map.android.util.AndroidPreferences A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

