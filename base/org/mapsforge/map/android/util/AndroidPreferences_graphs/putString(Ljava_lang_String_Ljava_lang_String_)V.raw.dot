digraph "CFG fororg.mapsforge.map.android.util.AndroidPreferences.putString(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:org.mapsforge.map.android.util.AndroidPreferences) org.mapsforge.map.android.util.AndroidPreferences.createEditor():void type: DIRECT A[Catch:\{ all \-\> 0x000b \}, TRY_ENTER]\l0x0004: IGET  (r0 I:android.content.SharedPreferences$Editor) = (r1 I:org.mapsforge.map.android.util.AndroidPreferences) org.mapsforge.map.android.util.AndroidPreferences.editor android.content.SharedPreferences$Editor A[Catch:\{ all \-\> 0x000b \}]\l0x0006: INVOKE  \l  (r0 I:android.content.SharedPreferences$Editor)\l  (r2 I:java.lang.String)\l  (r3 I:java.lang.String)\l android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String):android.content.SharedPreferences$Editor type: INTERFACE A[Catch:\{ all \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000b: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.android.util.AndroidPreferences.putString((r1 'this' I:org.mapsforge.map.android.util.AndroidPreferences A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

