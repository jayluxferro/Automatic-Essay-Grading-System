digraph "CFG fororg.mapsforge.map.android.util.AndroidUtil.createExternalStorageTileCache(Ljava\/io\/File;Ljava\/lang\/String;IIZ)Lorg\/mapsforge\/map\/layer\/cache\/TileCache;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.android.util.AndroidUtil.LOGGER java.util.logging.Logger \l0x0002: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0004: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0007: CONST_STR  (r2 I:java.lang.String) =  \"TILECACHE INMEMORY SIZE: \" \l0x0009: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000c: INVOKE  (r2 I:java.lang.String) = (r5 I:int) java.lang.Integer.toString(int):java.lang.String type: STATIC \l0x0010: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0013: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0017: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.info(java.lang.String):void type: VIRTUAL \l0x001a: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.cache.InMemoryTileCache) =  org.mapsforge.map.layer.cache.InMemoryTileCache \l0x001c: INVOKE  \l  (r0 I:org.mapsforge.map.layer.cache.InMemoryTileCache)\l  (r5 I:int)\l org.mapsforge.map.layer.cache.InMemoryTileCache.\<init\>(int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0087 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|0x0021: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0023: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0026: INVOKE  (r3 I:java.lang.String) = (r3 I:java.io.File) java.io.File.getAbsolutePath():java.lang.String type: VIRTUAL \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: SGET  (r3 I:java.lang.String) =  java.io.File.separator java.lang.String \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0035: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0039: NEW_INSTANCE  (r4 I:java.io.File) =  java.io.File \l0x003b: INVOKE  (r4 I:java.io.File), (r3 I:java.lang.String) java.io.File.\<init\>(java.lang.String):void type: DIRECT \l0x003e: INVOKE  (r1 I:boolean) = (r4 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0042|0x0042: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x004a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0044|0x0044: INVOKE  (r1 I:boolean) = (r4 I:java.io.File) java.io.File.mkdirs():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0048|0x0048: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0087 \l}"];
Node_6 [shape=record,label="{6\:\ 0x004a|0x004a: INVOKE  (r3 I:int) = (r3 I:java.lang.String), (r5 I:int), (r6 I:int) org.mapsforge.map.android.util.AndroidUtil.estimateSizeOfFileSystemCache(java.lang.String, int, int):int type: STATIC \l0x004e: INVOKE  (r5 I:boolean) = (r4 I:java.io.File) java.io.File.canWrite():boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0052|0x0052: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0087 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0054|0x0054: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0087 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0056|SYNTHETIC\lSplitter:B:9:0x0056\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0056\l|0x0056: SGET  (r5 I:java.util.logging.Logger) =  org.mapsforge.map.android.util.AndroidUtil.LOGGER java.util.logging.Logger A[Catch:\{ IllegalArgumentException \-\> 0x007d \}, TRY_ENTER]\l0x0058: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x005a: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x005d: CONST_STR  (r1 I:java.lang.String) =  \"TILECACHE FILE SIZE: \" A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x005f: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0062: INVOKE  (r1 I:java.lang.String) = (r3 I:int) java.lang.Integer.toString(int):java.lang.String type: STATIC A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0066: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0069: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x006d: INVOKE  (r5 I:java.util.logging.Logger), (r6 I:java.lang.String) java.util.logging.Logger.info(java.lang.String):void type: VIRTUAL A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0070: NEW_INSTANCE  (r5 I:org.mapsforge.map.layer.cache.FileSystemTileCache) =  org.mapsforge.map.layer.cache.FileSystemTileCache A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0072: SGET  (r6 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.INSTANCE org.mapsforge.map.android.graphics.AndroidGraphicFactory A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0074: INVOKE  \l  (r5 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l  (r3 I:int)\l  (r4 I:java.io.File)\l  (r6 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r7 I:boolean)\l org.mapsforge.map.layer.cache.FileSystemTileCache.\<init\>(int, java.io.File, org.mapsforge.core.graphics.GraphicFactory, boolean):void type: DIRECT A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0077: NEW_INSTANCE  (r3 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) =  org.mapsforge.map.layer.cache.TwoLevelTileCache A[Catch:\{ IllegalArgumentException \-\> 0x007d \}]\l0x0079: INVOKE  \l  (r3 I:org.mapsforge.map.layer.cache.TwoLevelTileCache)\l  (r0 I:org.mapsforge.map.layer.cache.TileCache)\l  (r5 I:org.mapsforge.map.layer.cache.TileCache)\l org.mapsforge.map.layer.cache.TwoLevelTileCache.\<init\>(org.mapsforge.map.layer.cache.TileCache, org.mapsforge.map.layer.cache.TileCache):void type: DIRECT A[Catch:\{ IllegalArgumentException \-\> 0x007d \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x007c|0x007c: RETURN  (r3 I:org.mapsforge.map.layer.cache.TileCache) \l}"];
Node_12 [shape=record,label="{12\:\ 0x007d|ExcHandler: IllegalArgumentException null\lSplitter:B:9:0x0056\l|0x007d: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_13 [shape=record,label="{13\:\ 0x007e|0x007e: SGET  (r4 I:java.util.logging.Logger) =  org.mapsforge.map.android.util.AndroidUtil.LOGGER java.util.logging.Logger \l0x0080: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.IllegalArgumentException) java.lang.IllegalArgumentException.getMessage():java.lang.String type: VIRTUAL \l0x0084: INVOKE  (r4 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0087|0x0087: RETURN  (r0 I:org.mapsforge.map.layer.cache.TileCache) \l}"];
MethodNode[shape=record,label="{public static org.mapsforge.map.layer.cache.TileCache org.mapsforge.map.android.util.AndroidUtil.createExternalStorageTileCache((r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
}

