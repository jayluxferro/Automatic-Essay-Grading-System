digraph "CFG fororg.mapsforge.map.android.layers.MyLocationOverlay.setPosition(DDF)V" {
subgraph cluster_Region_1995418750 {
label = "R(1:0)";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_1574172094 {
label = "Synchronized:R(2:0|(3:2|(1:4)|5))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_Region_948634733 {
label = "R(3:2|(1:4)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ ?|org.mapsforge.core.model.LatLong org.mapsforge.core.model.LatLong r0 = new org.mapsforge.core.model.LatLong(r2, r4)     \/\/ Catch:\{  \}\lr1.marker.setLatLong(r0)\l}"];
subgraph cluster_IfRegion_917146874 {
label = "IF [B:3:0x000d] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r1.circle != null) goto L_0x000f\l}"];
subgraph cluster_Region_1119918716 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|r1.circle.setLatLong(r0)\lr1.circle.setRadius(r6)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0019|requestRedraw()\l}"];
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001c|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x001c: MONITOR_EXIT  \l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e|REMOVE\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001f|REMOVE\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0020|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.layers.MyLocationOverlay.setPosition((r1v0 'this' org.mapsforge.map.android.layers.MyLocationOverlay A[IMMUTABLE_TYPE, THIS]), (r2v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

