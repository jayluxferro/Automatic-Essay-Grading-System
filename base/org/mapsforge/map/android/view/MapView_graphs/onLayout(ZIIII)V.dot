digraph "CFG fororg.mapsforge.map.android.view.MapView.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if (r7.mapZoomControls.getVisibility() == 8) goto L_0x0045\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|int r8 = r7.mapZoomControls.getZoomControlsGravity()\lint r1 = r7.mapZoomControls.getMeasuredWidth()\lint r2 = r7.mapZoomControls.getMeasuredHeight()\lr3 = r8 & 7\l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|if (r3 == 1) goto L_0x0027\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021}"];
Node_5 [shape=record,label="{5\:\ 0x0022|if (r3 == 3) goto L_0x002c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|int r9 = r11 \- r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|int r9 = r9 + (((r11 \- r9) \- r1) \/ 2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|PHI: r9 \l  PHI: (r9v4 int) = (r9v5 int), (r9v0 int), (r9v6 int) binds: [B:7:0x0027, B:5:0x0022, B:6:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|r8 = r8 & 112\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|if (r8 == 16) goto L_0x0039\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032}"];
Node_11 [shape=record,label="{11\:\ 0x0034|if (r8 == 48) goto L_0x003e\l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|int r10 = r12 \- r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|int r10 = r10 + (((r12 \- r10) \- r2) \/ 2)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|PHI: r10 \l  PHI: (r10v2 int) = (r10v3 int), (r10v0 int), (r10v4 int) binds: [B:13:0x0039, B:11:0x0034, B:12:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|r7.mapZoomControls.layout(r9, r10, r1 + r9, r2 + r10)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|int r8 = getChildCount()\lr9 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|LOOP_START\lPHI: r9 \l  PHI: (r9v2 int) = (r9v1 int), (r9v3 int) binds: [B:15:0x0045, B:36:0x00cc] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:16:0x004a\-\>B:36:0x00cc\l|if (r9 \>= r8) goto L_0x00d0\l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|android.view.View r10 = getChildAt(r9)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|if (r10.equals(r7.mapZoomControls) == false) goto L_0x005a\l}"];
Node_19 [shape=record,label="{19\:\ 0x005a}"];
Node_20 [shape=record,label="{20\:\ 0x005e|if (r10.getVisibility() == 8) goto L_0x00cc\l}"];
Node_21 [shape=record,label="{21\:\ 0x0060}"];
Node_22 [shape=record,label="{22\:\ 0x0068|if (checkLayoutParams(r10.getLayoutParams()) == false) goto L_0x00cc\l}"];
Node_23 [shape=record,label="{23\:\ 0x006a|org.mapsforge.map.android.view.MapView$LayoutParams r11 = (org.mapsforge.map.android.view.MapView.LayoutParams) r10.getLayoutParams()\lint r12 = r10.getMeasuredWidth()\lint r1 = r10.getMeasuredHeight()\lorg.mapsforge.core.model.Point r2 = r7.mapViewProjection.toPixels(r11.latLong)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0080|if (r2 == null) goto L_0x00cc\l}"];
Node_25 [shape=record,label="{25\:\ 0x0082|int r3 = getPaddingLeft() + ((int) java.lang.Math.round(r2.f266x))\lint r4 = getPaddingTop() + ((int) java.lang.Math.round(r2.f267y))\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a4|switch(r11.alignment) \{\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.TOP_LEFT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00c7;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.TOP_CENTER :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00c4;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.TOP_RIGHT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00c2;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.CENTER_LEFT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00be;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.CENTER :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00b7;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.CENTER_RIGHT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00b2;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.BOTTOM_LEFT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00b0;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.BOTTOM_CENTER :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00ab;\l    case org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.BOTTOM_RIGHT :org.mapsforge.map.android.view.MapView$LayoutParams$Alignment: goto L_0x00a8;\l    default: goto L_0x00a7;\l\}\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a8|int r3 = r3 \- r12\lint r4 = r4 \- r1\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ab|int r3 = r3 \- (r12 \/ 2)\lint r4 = r4 \- r1\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b0|int r4 = r4 \- r1\l}"];
Node_30 [shape=record,label="{30\:\ 0x00b2|int r3 = r3 \- r12\lint r4 = r4 \- (r1 \/ 2)\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b7|int r3 = r3 \- (r12 \/ 2)\lint r4 = r4 \- (r1 \/ 2)\l}"];
Node_32 [shape=record,label="{32\:\ 0x00be|int r4 = r4 \- (r1 \/ 2)\l}"];
Node_33 [shape=record,label="{33\:\ 0x00c2|int r3 = r3 \- r12\l}"];
Node_34 [shape=record,label="{34\:\ 0x00c4|int r3 = r3 \- (r12 \/ 2)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00c7|PHI: r3 r4 \l  PHI: (r3v3 int) = (r3v2 int), (r3v4 int), (r3v5 int), (r3v2 int), (r3v6 int), (r3v7 int), (r3v2 int), (r3v8 int), (r3v9 int) binds: [B:26:0x00a4, B:34:0x00c4, B:33:0x00c2, B:32:0x00be, B:31:0x00b7, B:30:0x00b2, B:29:0x00b0, B:28:0x00ab, B:27:0x00a8] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v5 int) = (r4v4 int), (r4v4 int), (r4v4 int), (r4v6 int), (r4v7 int), (r4v8 int), (r4v9 int), (r4v10 int), (r4v11 int) binds: [B:26:0x00a4, B:34:0x00c4, B:33:0x00c2, B:32:0x00be, B:31:0x00b7, B:30:0x00b2, B:29:0x00b0, B:28:0x00ab, B:27:0x00a8] A[DONT_GENERATE, DONT_INLINE]\l|r10.layout(r3, r4, r12 + r3, r1 + r4)\l}"];
Node_36 [shape=record,label="{36\:\ 0x00cc|LOOP_END\lLOOP:0: B:16:0x004a\-\>B:36:0x00cc\l|int r9 = r9 + 1\l}"];
Node_37 [shape=record,label="{37\:\ 0x00d0|RETURN\l|return\l}"];
Node_38 [shape=record,label="{38\:\ 0x00d0|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x00cc|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x00cc|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x00cc|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x00cc|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x00cc|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.android.view.MapView.onLayout((r7v0 'this' org.mapsforge.map.android.view.MapView A[IMMUTABLE_TYPE, THIS]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_38;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_43[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_40;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_41;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_42;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_28;
Node_26 -> Node_29;
Node_26 -> Node_30;
Node_26 -> Node_31;
Node_26 -> Node_32;
Node_26 -> Node_33;
Node_26 -> Node_34;
Node_26 -> Node_35;
Node_27 -> Node_35;
Node_28 -> Node_35;
Node_29 -> Node_35;
Node_30 -> Node_35;
Node_31 -> Node_35;
Node_32 -> Node_35;
Node_33 -> Node_35;
Node_34 -> Node_35;
Node_35 -> Node_39;
Node_36 -> Node_16;
Node_38 -> Node_37;
Node_39 -> Node_36;
Node_40 -> Node_36;
Node_41 -> Node_36;
Node_42 -> Node_36;
Node_43 -> Node_36;
}

