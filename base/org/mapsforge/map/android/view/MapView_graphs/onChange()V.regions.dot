digraph "CFG fororg.mapsforge.map.android.view.MapView.onChange()V" {
subgraph cluster_Region_1828243341 {
label = "R(2:0|(1:(2:(2:4|8)|(1:5))))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int int r0 = getChildCount()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_710205938 {
label = "LOOP:0: (1:(2:(2:4|8)|(1:5)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|LOOP_START\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v3 int) binds: [B:0:0x0000, B:5:0x001e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:1:0x0005\-\>B:5:0x001e\l|if (r1 \< r0) goto L_0x0007\l}"];
subgraph cluster_Region_735550686 {
label = "R(1:(2:(2:4|8)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1717375473 {
label = "R(2:(2:4|8)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1455149388 {
label = "IF [B:3:0x0011] THEN: R(2:4|8) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0011|if (getChildAt(r1).equals(r4.mapZoomControls) == false) goto L_0x0013\l}"];
subgraph cluster_Region_1238933870 {
label = "R(2:4|8)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|r4.layoutHandler.post(new org.mapsforge.map.android.view.MapView.C14331())\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1734870069 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001e|LOOP_END\lLOOP:0: B:1:0x0005\-\>B:5:0x001e\l|r1++\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0007}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0021|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.view.MapView.onChange((r4v0 'this' org.mapsforge.map.android.view.MapView A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7[style=dashed];
Node_3 -> Node_5[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_8;
Node_5 -> Node_1;
Node_2 -> Node_3;
Node_6 -> Node_4;
Node_7 -> Node_9;
}

