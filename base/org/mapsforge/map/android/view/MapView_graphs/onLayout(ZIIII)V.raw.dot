digraph "CFG fororg.mapsforge.map.android.view.MapView.onLayout(ZIIII)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r8 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x0002: INVOKE  (r8 I:int) = (r8 I:org.mapsforge.map.android.input.MapZoomControls) org.mapsforge.map.android.input.MapZoomControls.getVisibility():int type: VIRTUAL \l0x0006: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0045 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: IGET  (r8 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x000c: INVOKE  (r8 I:int) = (r8 I:org.mapsforge.map.android.input.MapZoomControls) org.mapsforge.map.android.input.MapZoomControls.getZoomControlsGravity():int type: VIRTUAL \l0x0010: IGET  (r1 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x0012: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.android.input.MapZoomControls) org.mapsforge.map.android.input.MapZoomControls.getMeasuredWidth():int type: VIRTUAL \l0x0016: IGET  (r2 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x0018: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.map.android.input.MapZoomControls) org.mapsforge.map.android.input.MapZoomControls.getMeasuredHeight():int type: VIRTUAL \l0x001c: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (7 ?[int, float, short, byte, char]) \l0x001e: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0027 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: CONST  (r4 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: ARITH  (r9 I:int) = (r11 I:int) \- (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: ARITH  (r11 I:int) = (r11 I:int) \- (r9 I:int) \l0x0028: ARITH  (r11 I:int) = (r11 I:int) \- (r1 I:int) \l0x0029: ARITH  (r11 I:int) = (r11 I:int) \/ (2 int) \l0x002b: ARITH  (r9 I:int) = (r9 I:int) + (r11 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: ARITH  (r8 I:?[int, boolean, short, byte, char]) = (r8 I:?[int, boolean, short, byte, char]) & (112(0x70, float:1.57E\-43) ?[int, float, short, byte, char]) \l0x002e: CONST  (r11 I:?[int, float, short, byte, char]) = (16 ?[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|0x0030: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: CONST  (r11 I:?[int, float, short, byte, char]) = (48 ?[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x003e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: ARITH  (r10 I:int) = (r12 I:int) \- (r2 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: ARITH  (r12 I:int) = (r12 I:int) \- (r10 I:int) \l0x003a: ARITH  (r12 I:int) = (r12 I:int) \- (r2 I:int) \l0x003b: ARITH  (r12 I:int) = (r12 I:int) \/ (2 int) \l0x003d: ARITH  (r10 I:int) = (r10 I:int) + (r12 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|0x003e: IGET  (r8 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x0040: ARITH  (r1 I:int) = (r1 I:int) + (r9 I:int) \l0x0041: ARITH  (r2 I:int) = (r2 I:int) + (r10 I:int) \l0x0042: INVOKE  \l  (r8 I:org.mapsforge.map.android.input.MapZoomControls)\l  (r9 I:int)\l  (r10 I:int)\l  (r1 I:int)\l  (r2 I:int)\l org.mapsforge.map.android.input.MapZoomControls.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x0045|0x0045: INVOKE  (r8 I:int) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getChildCount():int type: VIRTUAL \l0x0049: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x004a|0x004a: IF  (r9 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:39:0x00d0 \l}"];
Node_17 [shape=record,label="{17\:\ 0x004c|0x004c: INVOKE  (r10 I:android.view.View) = (r7 I:org.mapsforge.map.android.view.MapView), (r9 I:int) org.mapsforge.map.android.view.MapView.getChildAt(int):android.view.View type: VIRTUAL \l0x0050: IGET  (r11 I:org.mapsforge.map.android.input.MapZoomControls) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapZoomControls org.mapsforge.map.android.input.MapZoomControls \l0x0052: INVOKE  (r11 I:boolean) = (r10 I:java.lang.Object), (r11 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x005a \l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|0x005a: INVOKE  (r11 I:int) = (r10 I:android.view.View) android.view.View.getVisibility():int type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x005e|0x005e: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00cc \l}"];
Node_22 [shape=record,label="{22\:\ 0x0060|0x0060: INVOKE  (r11 I:android.view.ViewGroup$LayoutParams) = (r10 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x0064: INVOKE  (r11 I:boolean) = \l  (r7 I:org.mapsforge.map.android.view.MapView)\l  (r11 I:android.view.ViewGroup$LayoutParams)\l org.mapsforge.map.android.view.MapView.checkLayoutParams(android.view.ViewGroup$LayoutParams):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0068|0x0068: IF  (r11 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00cc \l}"];
Node_24 [shape=record,label="{24\:\ 0x006a|0x006a: INVOKE  (r11 I:android.view.ViewGroup$LayoutParams) = (r10 I:android.view.View) android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams type: VIRTUAL \l0x006e: CHECK_CAST  (r11 I:org.mapsforge.map.android.view.MapView$LayoutParams) = (org.mapsforge.map.android.view.MapView$LayoutParams) (r11 I:?[OBJECT, ARRAY]) \l0x0070: INVOKE  (r12 I:int) = (r10 I:android.view.View) android.view.View.getMeasuredWidth():int type: VIRTUAL \l0x0074: INVOKE  (r1 I:int) = (r10 I:android.view.View) android.view.View.getMeasuredHeight():int type: VIRTUAL \l0x0078: IGET  (r2 I:org.mapsforge.map.util.MapViewProjection) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.mapViewProjection org.mapsforge.map.util.MapViewProjection \l0x007a: IGET  (r3 I:org.mapsforge.core.model.LatLong) = (r11 I:org.mapsforge.map.android.view.MapView$LayoutParams) org.mapsforge.map.android.view.MapView.LayoutParams.latLong org.mapsforge.core.model.LatLong \l0x007c: INVOKE  (r2 I:org.mapsforge.core.model.Point) = \l  (r2 I:org.mapsforge.map.util.MapViewProjection)\l  (r3 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.util.MapViewProjection.toPixels(org.mapsforge.core.model.LatLong):org.mapsforge.core.model.Point type: VIRTUAL \l}"];
Node_25 [shape=record,label="{25\:\ 0x0080|0x0080: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00cc \l}"];
Node_26 [shape=record,label="{26\:\ 0x0082|0x0082: INVOKE  (r3 I:int) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getPaddingLeft():int type: VIRTUAL \l0x0086: IGET  (r4 I:double) = (r2 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0088: INVOKE  (r4 I:long) = (r4 I:double) java.lang.Math.round(double):long type: STATIC \l0x008c: CAST  (r4 I:int) = (int) (r4 I:long) \l0x008d: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x008e: INVOKE  (r4 I:int) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getPaddingTop():int type: VIRTUAL \l0x0092: IGET  (r5 I:double) = (r2 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0094: INVOKE  (r5 I:long) = (r5 I:double) java.lang.Math.round(double):long type: STATIC \l0x0098: CAST  (r2 I:int) = (int) (r5 I:long) \l0x0099: ARITH  (r4 I:int) = (r4 I:int) + (r2 I:int) \l0x009a: SGET  (r2 I:int[]) =  org.mapsforge.map.android.view.MapView.2.$SwitchMap$org$mapsforge$map$android$view$MapView$LayoutParams$Alignment int[] \l0x009c: IGET  (r11 I:org.mapsforge.map.android.view.MapView$LayoutParams$Alignment) = (r11 I:org.mapsforge.map.android.view.MapView$LayoutParams) org.mapsforge.map.android.view.MapView.LayoutParams.alignment org.mapsforge.map.android.view.MapView$LayoutParams$Alignment \l0x009e: INVOKE  (r11 I:int) = \l  (r11 I:org.mapsforge.map.android.view.MapView$LayoutParams$Alignment)\l org.mapsforge.map.android.view.MapView.LayoutParams.Alignment.ordinal():int type: VIRTUAL \l0x00a2: AGET  (r11 I:?[int, float]) = (r2 I:?[int, float][]), (r11 I:?[int, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00a4|0x00a4: SWITCH  \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3, 4, 5, 6, 7, 8, 9] t:[0x00c7, 0x00c4, 0x00c2, 0x00be, 0x00b7, 0x00b2, 0x00b0, 0x00ab, 0x00a8] \l}"];
Node_29 [shape=record,label="{29\:\ 0x00a8|0x00a8: ARITH  (r3 I:int) = (r3 I:int) \- (r12 I:int) \l0x00a9: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ab|0x00ab: ARITH  (r11 I:int) = (r12 I:int) \/ (2 int) \l0x00ad: ARITH  (r3 I:int) = (r3 I:int) \- (r11 I:int) \l0x00ae: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b0|0x00b0: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b2|0x00b2: ARITH  (r3 I:int) = (r3 I:int) \- (r12 I:int) \l0x00b3: ARITH  (r11 I:int) = (r1 I:int) \/ (2 int) \l0x00b5: ARITH  (r4 I:int) = (r4 I:int) \- (r11 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b7|0x00b7: ARITH  (r11 I:int) = (r12 I:int) \/ (2 int) \l0x00b9: ARITH  (r3 I:int) = (r3 I:int) \- (r11 I:int) \l0x00ba: ARITH  (r11 I:int) = (r1 I:int) \/ (2 int) \l0x00bc: ARITH  (r4 I:int) = (r4 I:int) \- (r11 I:int) \l}"];
Node_34 [shape=record,label="{34\:\ 0x00be|0x00be: ARITH  (r11 I:int) = (r1 I:int) \/ (2 int) \l0x00c0: ARITH  (r4 I:int) = (r4 I:int) \- (r11 I:int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00c2|0x00c2: ARITH  (r3 I:int) = (r3 I:int) \- (r12 I:int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x00c4|0x00c4: ARITH  (r11 I:int) = (r12 I:int) \/ (2 int) \l0x00c6: ARITH  (r3 I:int) = (r3 I:int) \- (r11 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c7|0x00c7: ARITH  (r12 I:int) = (r12 I:int) + (r3 I:int) \l0x00c8: ARITH  (r1 I:int) = (r1 I:int) + (r4 I:int) \l0x00c9: INVOKE  \l  (r10 I:android.view.View)\l  (r3 I:int)\l  (r4 I:int)\l  (r12 I:int)\l  (r1 I:int)\l android.view.View.layout(int, int, int, int):void type: VIRTUAL \l}"];
Node_38 [shape=record,label="{38\:\ 0x00cc|0x00cc: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00d0|0x00d0: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.android.view.MapView.onLayout((r7 'this' I:org.mapsforge.map.android.view.MapView A[IMMUTABLE_TYPE, THIS]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_39;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_38[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_38;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_38;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_38;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30;
Node_27 -> Node_31;
Node_27 -> Node_32;
Node_27 -> Node_33;
Node_27 -> Node_34;
Node_27 -> Node_35;
Node_27 -> Node_36;
Node_27 -> Node_37;
Node_29 -> Node_37;
Node_30 -> Node_37;
Node_31 -> Node_37;
Node_32 -> Node_37;
Node_33 -> Node_37;
Node_34 -> Node_37;
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_16;
}

