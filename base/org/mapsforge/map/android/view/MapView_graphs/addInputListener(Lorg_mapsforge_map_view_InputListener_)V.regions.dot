digraph "CFG fororg.mapsforge.map.android.view.MapView.addInputListener(Lorg\/mapsforge\/map\/view\/InputListener;)V" {
subgraph cluster_Region_1271577734 {
label = "R(1:(1:8)(1:(1:3)(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1327501092 {
label = "IF [B:0:0x0000] THEN: R(1:8) ELSE: R(1:(1:3)(2:5|6))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 == null) goto L_0x0027\l}"];
subgraph cluster_Region_2117104678 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002e|throw new java.lang.IllegalArgumentException(\"listener must not be null\")\l}"];
}
subgraph cluster_Region_494587923 {
label = "R(1:(1:3)(2:5|6)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_55206326 {
label = "IF [B:2:0x0008] THEN: R(1:3) ELSE: R(2:5|6) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0008|if (r3.inputListeners.contains(r4) == false) goto L_0x000a\l}"];
subgraph cluster_Region_1289488340 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|r3.inputListeners.add(r4)\l}"];
}
subgraph cluster_Region_833674029 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0026|throw new java.lang.IllegalArgumentException(\"listener is already registered: \" + r4)\l}"];
}
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000f}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0027}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.view.MapView.addInputListener((r3v0 'this' org.mapsforge.map.android.view.MapView A[IMMUTABLE_TYPE, THIS]), (r4v0 org.mapsforge.map.view.InputListener A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_7;
Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_1 -> Node_2;
Node_7 -> Node_8;
}

