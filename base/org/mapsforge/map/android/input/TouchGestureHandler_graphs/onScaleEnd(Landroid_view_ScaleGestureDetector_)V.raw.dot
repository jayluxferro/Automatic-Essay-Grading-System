digraph "CFG fororg.mapsforge.map.android.input.TouchGestureHandler.onScaleEnd(Landroid\/view\/ScaleGestureDetector;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r1 I:float) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.scaleFactorCumulative float \l0x0004: CAST  (r1 I:double) = (double) (r1 I:float) \l0x0005: INVOKE  (r1 I:double) = (r1 I:double) java.lang.Math.log(double):double type: STATIC \l0x0009: CONST  (r3 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x000b: INVOKE  (r5 I:double) = (r3 I:double) java.lang.Math.log(double):double type: STATIC \l0x000f: ARITH  (r1 I:double) = (r1 I:double) \/ (r5 I:double) \l0x0010: INVOKE  (r5 I:double) = (r1 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0014: CONST  (r7 I:?[long, double]) = (0 ?[long, double]) \l0x0016: CONST  (r9 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0018: CMP_L  (r5 I:int) = (r5 I:double), (r9 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0030 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|0x001c: CMP_G  (r5 I:int) = (r1 I:double), (r7 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r5 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:5:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: INVOKE  (r1 I:double) = (r1 I:double) java.lang.Math.floor(double):double type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: INVOKE  (r1 I:double) = (r1 I:double) java.lang.Math.ceil(double):double type: STATIC \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r1 I:long) = (r1 I:double) java.lang.Math.round(double):long type: STATIC \l0x002d: CAST  (r1 I:int) = (int) (r1 I:long) \l0x002e: CAST  (r1 I:byte) = (byte) (r1 I:int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: INVOKE  (r1 I:long) = (r1 I:double) java.lang.Math.round(double):long type: STATIC \l0x0034: CAST  (r1 I:int) = (int) (r1 I:long) \l0x0035: CAST  (r1 I:byte) = (byte) (r1 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0037: IGET  (r1 I:org.mapsforge.map.android.view.MapView) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0039: INVOKE  (r1 I:org.mapsforge.map.model.Model) = (r1 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getModel():org.mapsforge.map.model.Model type: VIRTUAL \l0x003d: IGET  (r9 I:org.mapsforge.map.model.IMapViewPosition) = (r1 I:org.mapsforge.map.model.Model) org.mapsforge.map.model.Model.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l}"];
Node_9 [shape=record,label="{9\:\ 0x003f|0x003f: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00c7 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.pivot org.mapsforge.core.model.LatLong \l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00c7 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: IGET  (r1 I:org.mapsforge.map.android.view.MapView) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0047: INVOKE  (r1 I:org.mapsforge.map.model.Model) = (r1 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getModel():org.mapsforge.map.model.Model type: VIRTUAL \l0x004b: IGET  (r1 I:org.mapsforge.map.model.MapViewDimension) = (r1 I:org.mapsforge.map.model.Model) org.mapsforge.map.model.Model.mapViewDimension org.mapsforge.map.model.MapViewDimension \l0x004d: INVOKE  (r1 I:org.mapsforge.core.model.Dimension) = (r1 I:org.mapsforge.map.model.MapViewDimension) org.mapsforge.map.model.MapViewDimension.getDimension():org.mapsforge.core.model.Dimension type: VIRTUAL \l0x0051: INVOKE  (r1 I:org.mapsforge.core.model.Point) = (r1 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.getCenter():org.mapsforge.core.model.Point type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|0x0055: IF  (r14 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:21:0x008a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0057|0x0057: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0058: MOVE  (r5 I:?[long, double]) = (r7 I:?[long, double]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0059|0x0059: IF  (r2 I:?[int, byte, short, char]) \> (r14 I:?[int, byte, short, char])  \-\> B:20:0x0087 \l}"];
Node_16 [shape=record,label="{16\:\ 0x005b|0x005b: INVOKE  (r10 I:byte) = (r9 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getZoomLevel():byte type: INTERFACE \l0x005f: ARITH  (r10 I:int) = (r10 I:int) + (r2 I:int) \l0x0060: INVOKE  (r11 I:byte) = (r9 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getZoomLevelMax():byte type: INTERFACE \l}"];
Node_17 [shape=record,label="{17\:\ 0x0064|0x0064: IF  (r10 I:?[int, byte, short, char]) \<= (r11 I:?[int, byte, short, char])  \-\> B:19:0x0067 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0067|0x0067: IGET  (r10 I:double) = (r1 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0069: IGET  (r12 I:float) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.focusX float \l0x006b: CAST  (r12 I:double) = (double) (r12 I:float) \l0x006c: ARITH  (r10 I:double) = (r10 I:double) \- (r12 I:double) \l0x006d: CAST  (r12 I:double) = (double) (r2 I:int) \l0x006e: INVOKE  (r15 I:double) = (r3 I:double), (r12 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0072: ARITH  (r10 I:double) = (r10 I:double) \/ (r15 I:double) \l0x0073: ARITH  (r7 I:double) = (r7 I:double) + (r10 I:double) \l0x0074: IGET  (r10 I:double) = (r1 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0076: IGET  (r15 I:float) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.focusY float \l0x0078: MOVE  (r17 I:?[long, double]) = (r7 I:?[long, double]) \l0x007a: CAST  (r7 I:double) = (double) (r15 I:float) \l0x007b: ARITH  (r10 I:double) = (r10 I:double) \- (r7 I:double) \l0x007c: INVOKE  (r7 I:double) = (r3 I:double), (r12 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x0080: ARITH  (r10 I:double) = (r10 I:double) \/ (r7 I:double) \l0x0081: ARITH  (r5 I:double) = (r5 I:double) + (r10 I:double) \l0x0082: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0084: MOVE  (r7 I:?[long, double]) = (r17 I:?[long, double]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0087|0x0087: MOVE  (r12 I:?[long, double]) = (r5 I:?[long, double]) \l0x0088: MOVE  (r10 I:?[long, double]) = (r7 I:?[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x008a|0x008a: CONST  (r2 I:?[int, float, short, byte, char]) = (\-1 ?[int, float, short, byte, char]) \l0x008b: MOVE  (r5 I:?[long, double]) = (r7 I:?[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x008c|0x008c: IF  (r2 I:?[int, byte, short, char]) \< (r14 I:?[int, byte, short, char])  \-\> B:27:0x00bc \l}"];
Node_23 [shape=record,label="{23\:\ 0x008e|0x008e: INVOKE  (r10 I:byte) = (r9 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getZoomLevel():byte type: INTERFACE \l0x0092: ARITH  (r10 I:int) = (r10 I:int) + (r2 I:int) \l0x0093: INVOKE  (r11 I:byte) = (r9 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getZoomLevelMin():byte type: INTERFACE \l}"];
Node_24 [shape=record,label="{24\:\ 0x0097|0x0097: IF  (r10 I:?[int, byte, short, char]) \>= (r11 I:?[int, byte, short, char])  \-\> B:26:0x009a \l}"];
Node_26 [shape=record,label="{26\:\ 0x009a|0x009a: IGET  (r10 I:double) = (r1 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x009c: IGET  (r12 I:float) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.focusX float \l0x009e: CAST  (r12 I:double) = (double) (r12 I:float) \l0x009f: ARITH  (r10 I:double) = (r10 I:double) \- (r12 I:double) \l0x00a0: ARITH  (r12 I:int) = (r2 I:int) + (1 int) \l0x00a2: CAST  (r12 I:double) = (double) (r12 I:int) \l0x00a3: INVOKE  (r15 I:double) = (r3 I:double), (r12 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x00a7: ARITH  (r10 I:double) = (r10 I:double) \/ (r15 I:double) \l0x00a8: ARITH  (r5 I:double) = (r5 I:double) \- (r10 I:double) \l0x00a9: IGET  (r10 I:double) = (r1 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x00ab: IGET  (r15 I:float) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.focusY float \l0x00ad: MOVE  (r19 I:?[long, double]) = (r5 I:?[long, double]) \l0x00af: CAST  (r5 I:double) = (double) (r15 I:float) \l0x00b0: ARITH  (r10 I:double) = (r10 I:double) \- (r5 I:double) \l0x00b1: INVOKE  (r5 I:double) = (r3 I:double), (r12 I:double) java.lang.Math.pow(double, double):double type: STATIC \l0x00b5: ARITH  (r10 I:double) = (r10 I:double) \/ (r5 I:double) \l0x00b6: ARITH  (r7 I:double) = (r7 I:double) \- (r10 I:double) \l0x00b7: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x00b9: MOVE  (r5 I:?[long, double]) = (r19 I:?[long, double]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00bc|0x00bc: MOVE  (r10 I:?[long, double]) = (r5 I:?[long, double]) \l0x00bd: MOVE  (r12 I:?[long, double]) = (r7 I:?[long, double]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x00be|0x00be: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r0 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.pivot org.mapsforge.core.model.LatLong \l0x00c0: INVOKE  \l  (r9 I:org.mapsforge.map.model.IMapViewPosition)\l  (r1 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.model.IMapViewPosition.setPivot(org.mapsforge.core.model.LatLong):void type: INTERFACE \l0x00c3: INVOKE  \l  (r9 I:org.mapsforge.map.model.IMapViewPosition)\l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:byte)\l org.mapsforge.map.model.IMapViewPosition.moveCenterAndZoom(double, double, byte):void type: INTERFACE \l}"];
Node_29 [shape=record,label="{29\:\ 0x00c7|0x00c7: INVOKE  \l  (r9 I:org.mapsforge.map.model.IMapViewPosition)\l  (r14 I:byte)\l org.mapsforge.map.model.IMapViewPosition.zoom(byte):void type: INTERFACE \l}"];
Node_30 [shape=record,label="{30\:\ 0x00ca|0x00ca: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00cb: IPUT  \l  (r1 I:boolean)\l  (r0 I:org.mapsforge.map.android.input.TouchGestureHandler)\l org.mapsforge.map.android.input.TouchGestureHandler.isInDoubleTap boolean \l}"];
Node_31 [shape=record,label="{31\:\ 0x00cd|0x00cd: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.input.TouchGestureHandler.onScaleEnd((r21 'this' I:org.mapsforge.map.android.input.TouchGestureHandler A[IMMUTABLE_TYPE, THIS]), (r22 I:android.view.ScaleGestureDetector A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_29;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_29;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_15;
Node_20 -> Node_28;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_22;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
}

