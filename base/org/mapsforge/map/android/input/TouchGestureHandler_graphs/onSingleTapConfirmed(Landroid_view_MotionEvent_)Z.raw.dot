digraph "CFG fororg.mapsforge.map.android.input.TouchGestureHandler.onSingleTapConfirmed(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Point) =  org.mapsforge.core.model.Point \l0x0002: INVOKE  (r1 I:float) = (r7 I:android.view.MotionEvent) android.view.MotionEvent.getX():float type: VIRTUAL \l0x0006: CAST  (r1 I:double) = (double) (r1 I:float) \l0x0007: INVOKE  (r7 I:float) = (r7 I:android.view.MotionEvent) android.view.MotionEvent.getY():float type: VIRTUAL \l0x000b: CAST  (r3 I:double) = (double) (r7 I:float) \l0x000c: INVOKE  \l  (r0 I:org.mapsforge.core.model.Point)\l  (r1 I:double)\l  (r3 I:double)\l org.mapsforge.core.model.Point.\<init\>(double, double):void type: DIRECT \l0x000f: IGET  (r7 I:org.mapsforge.map.android.view.MapView) = (r6 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0011: INVOKE  (r7 I:org.mapsforge.map.util.MapViewProjection) = (r7 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getMapViewProjection():org.mapsforge.map.util.MapViewProjection type: VIRTUAL \l0x0015: IGET  (r1 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0017: IGET  (r3 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0019: INVOKE  (r7 I:org.mapsforge.core.model.LatLong) = \l  (r7 I:org.mapsforge.map.util.MapViewProjection)\l  (r1 I:double)\l  (r3 I:double)\l org.mapsforge.map.util.MapViewProjection.fromPixels(double, double):org.mapsforge.core.model.LatLong type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x001d|0x001d: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0057 \l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|0x001f: IGET  (r1 I:org.mapsforge.map.android.view.MapView) = (r6 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0021: INVOKE  (r1 I:org.mapsforge.map.layer.LayerManager) = (r1 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getLayerManager():org.mapsforge.map.layer.LayerManager type: VIRTUAL \l0x0025: INVOKE  (r1 I:org.mapsforge.map.layer.Layers) = (r1 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.getLayers():org.mapsforge.map.layer.Layers type: VIRTUAL \l0x0029: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.size():int type: VIRTUAL \l0x002d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x002e: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x002f|0x002f: IF  (r1 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0057 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: IGET  (r3 I:org.mapsforge.map.android.view.MapView) = (r6 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0033: INVOKE  (r3 I:org.mapsforge.map.layer.LayerManager) = (r3 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getLayerManager():org.mapsforge.map.layer.LayerManager type: VIRTUAL \l0x0037: INVOKE  (r3 I:org.mapsforge.map.layer.Layers) = (r3 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.getLayers():org.mapsforge.map.layer.Layers type: VIRTUAL \l0x003b: INVOKE  (r3 I:org.mapsforge.map.layer.Layer) = (r3 I:org.mapsforge.map.layer.Layers), (r1 I:int) org.mapsforge.map.layer.Layers.get(int):org.mapsforge.map.layer.Layer type: VIRTUAL \l0x003f: IGET  (r4 I:org.mapsforge.map.android.view.MapView) = (r6 I:org.mapsforge.map.android.input.TouchGestureHandler) org.mapsforge.map.android.input.TouchGestureHandler.mapView org.mapsforge.map.android.view.MapView \l0x0041: INVOKE  (r4 I:org.mapsforge.map.util.MapViewProjection) = (r4 I:org.mapsforge.map.android.view.MapView) org.mapsforge.map.android.view.MapView.getMapViewProjection():org.mapsforge.map.util.MapViewProjection type: VIRTUAL \l0x0045: INVOKE  (r5 I:org.mapsforge.core.model.LatLong) = (r3 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layer.getPosition():org.mapsforge.core.model.LatLong type: VIRTUAL \l0x0049: INVOKE  (r4 I:org.mapsforge.core.model.Point) = \l  (r4 I:org.mapsforge.map.util.MapViewProjection)\l  (r5 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.util.MapViewProjection.toPixels(org.mapsforge.core.model.LatLong):org.mapsforge.core.model.Point type: VIRTUAL \l0x004d: INVOKE  (r3 I:boolean) = \l  (r3 I:org.mapsforge.map.layer.Layer)\l  (r7 I:org.mapsforge.core.model.LatLong)\l  (r4 I:org.mapsforge.core.model.Point)\l  (r0 I:org.mapsforge.core.model.Point)\l org.mapsforge.map.layer.Layer.onTap(org.mapsforge.core.model.LatLong, org.mapsforge.core.model.Point, org.mapsforge.core.model.Point):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0051|0x0051: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0054 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0053|0x0053: RETURN  (r2 I:boolean) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0054|0x0054: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0057|0x0057: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: RETURN  (r7 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.android.input.TouchGestureHandler.onSingleTapConfirmed((r6 'this' I:org.mapsforge.map.android.input.TouchGestureHandler A[IMMUTABLE_TYPE, THIS]), (r7 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_3;
Node_8 -> Node_9;
}

