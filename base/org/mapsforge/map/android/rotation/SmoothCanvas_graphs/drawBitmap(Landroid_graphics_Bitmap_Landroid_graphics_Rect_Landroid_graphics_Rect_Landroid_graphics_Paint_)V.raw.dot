digraph "CFG fororg.mapsforge.map.android.rotation.SmoothCanvas.drawBitmap(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Rect;Landroid\/graphics\/Rect;Landroid\/graphics\/Paint;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0005 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r5 I:android.graphics.Paint) = (r1 I:org.mapsforge.map.android.rotation.SmoothCanvas) org.mapsforge.map.android.rotation.SmoothCanvas.smooth android.graphics.Paint \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0006: INVOKE  (r5 I:android.graphics.Paint), (r0 I:boolean) android.graphics.Paint.setFilterBitmap(boolean):void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IGET  (r0 I:android.graphics.Canvas) = (r1 I:org.mapsforge.map.android.rotation.SmoothCanvas) org.mapsforge.map.android.rotation.SmoothCanvas.delegate android.graphics.Canvas \l0x000b: INVOKE  \l  (r0 I:android.graphics.Canvas)\l  (r2 I:android.graphics.Bitmap)\l  (r3 I:android.graphics.Rect)\l  (r4 I:android.graphics.Rect)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.rotation.SmoothCanvas.drawBitmap((r1 'this' I:org.mapsforge.map.android.rotation.SmoothCanvas A[IMMUTABLE_TYPE, THIS]), (r2 I:android.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Rect A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.Paint A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_2;
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

