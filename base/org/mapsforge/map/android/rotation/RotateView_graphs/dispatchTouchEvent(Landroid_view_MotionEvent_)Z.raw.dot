digraph "CFG fororg.mapsforge.map.android.rotation.RotateView.dispatchTouchEvent(Landroid\/view\/MotionEvent;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:float) = (r4 I:org.mapsforge.map.android.rotation.RotateView) org.mapsforge.map.android.rotation.RotateView.heading float \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: INVOKE  (r5 I:boolean) = \l  (r4 I:android.view.ViewGroup)\l  (r5 I:android.view.MotionEvent)\l android.view.ViewGroup.dispatchTouchEvent(android.view.MotionEvent):boolean type: SUPER \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: RETURN  (r5 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IGET  (r0 I:float) = (r4 I:org.mapsforge.map.android.rotation.RotateView) org.mapsforge.map.android.rotation.RotateView.heading float \l0x000e: INVOKE  (r1 I:int) = (r4 I:org.mapsforge.map.android.rotation.RotateView) org.mapsforge.map.android.rotation.RotateView.getWidth():int type: VIRTUAL \l0x0012: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0013: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (1056964608(0x3f000000, float:0.5) ?[int, float, short, byte, char])\l \l0x0015: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0017: INVOKE  (r3 I:int) = (r4 I:org.mapsforge.map.android.rotation.RotateView) org.mapsforge.map.android.rotation.RotateView.getHeight():int type: VIRTUAL \l0x001b: CAST  (r3 I:float) = (float) (r3 I:int) \l0x001c: ARITH  (r3 I:float) = (r3 I:float) * (r2 I:float) \l0x001e: INVOKE  (r0 I:android.view.MotionEvent) = \l  (r4 I:org.mapsforge.map.android.rotation.RotateView)\l  (r5 I:android.view.MotionEvent)\l  (r0 I:float)\l  (r1 I:float)\l  (r3 I:float)\l org.mapsforge.map.android.rotation.RotateView.rotateEvent(android.view.MotionEvent, float, float, float):android.view.MotionEvent type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|SYNTHETIC\lSplitter:B:5:0x0022\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0022\l|0x0022: INVOKE  (r1 I:boolean) = \l  (r4 I:android.view.ViewGroup)\l  (r0 I:android.view.MotionEvent)\l android.view.ViewGroup.dispatchTouchEvent(android.view.MotionEvent):boolean type: SUPER A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0025: NOP   A[TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: RETURN  (r1 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|ExcHandler: all null\lSplitter:B:5:0x0022\l|0x002c: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: INVOKE  (r0 I:android.view.MotionEvent) android.view.MotionEvent.recycle():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.android.rotation.RotateView.dispatchTouchEvent((r4 'this' I:org.mapsforge.map.android.rotation.RotateView A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.MotionEvent A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
}

