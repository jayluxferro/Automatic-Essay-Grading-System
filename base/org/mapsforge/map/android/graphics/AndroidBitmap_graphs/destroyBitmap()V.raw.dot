digraph "CFG fororg.mapsforge.map.android.graphics.AndroidBitmap.destroyBitmap()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.Bitmap) = (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap) org.mapsforge.map.android.graphics.AndroidBitmap.bitmap android.graphics.Bitmap \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: SGET  (r0 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|SYNTHETIC\lSplitter:B:6:0x000d\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x000d\l|0x000d: SGET  (r1 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set A[Catch:\{ all \-\> 0x001b \}, TRY_ENTER]\l0x000f: NEW_INSTANCE  (r2 I:java.lang.ref.SoftReference) =  java.lang.ref.SoftReference A[Catch:\{ all \-\> 0x001b \}]\l0x0011: IGET  (r3 I:android.graphics.Bitmap) = (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap) org.mapsforge.map.android.graphics.AndroidBitmap.bitmap android.graphics.Bitmap A[Catch:\{ all \-\> 0x001b \}]\l0x0013: INVOKE  (r2 I:java.lang.ref.SoftReference), (r3 I:java.lang.Object) java.lang.ref.SoftReference.\<init\>(java.lang.Object):void type: DIRECT A[Catch:\{ all \-\> 0x001b \}]\l0x0016: INVOKE  (r1 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: GOTO  \-\> 0x0023 A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|ExcHandler: all null\lSplitter:B:6:0x000d\l|0x001b: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001b \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001b \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: IGET  (r0 I:android.graphics.Bitmap) = (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap) org.mapsforge.map.android.graphics.AndroidBitmap.bitmap android.graphics.Bitmap \l0x0020: INVOKE  (r0 I:android.graphics.Bitmap) android.graphics.Bitmap.recycle():void type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: IPUT  \l  (r0 I:android.graphics.Bitmap)\l  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap)\l org.mapsforge.map.android.graphics.AndroidBitmap.bitmap android.graphics.Bitmap \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.android.graphics.AndroidBitmap.destroyBitmap((r4 'this' I:org.mapsforge.map.android.graphics.AndroidBitmap A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.annotation.TargetApi, \{value=11\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

