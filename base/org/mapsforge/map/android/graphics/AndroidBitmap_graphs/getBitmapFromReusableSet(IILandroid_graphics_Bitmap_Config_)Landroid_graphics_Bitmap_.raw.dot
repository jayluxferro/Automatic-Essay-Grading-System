digraph "CFG fororg.mapsforge.map.android.graphics.AndroidBitmap.getBitmapFromReusableSet(IILandroid\/graphics\/Bitmap$Config;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r7 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set \l0x0002: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0044 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: SGET  (r7 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set \l0x0007: INVOKE  (r7 I:boolean) = (r7 I:java.util.Set) java.util.Set.isEmpty():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0044 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: SGET  (r7 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: MONITOR_ENTER  (r7 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|SYNTHETIC\lSplitter:B:6:0x0010\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0010\l|0x0010: SGET  (r1 I:java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>) =  org.mapsforge.map.android.graphics.AndroidBitmap.REUSABLE_BITMAPS java.util.Set A[Catch:\{ all \-\> 0x0041 \}, TRY_ENTER]\l0x0012: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x003f A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l0x0020: CHECK_CAST  (r2 I:java.lang.ref.SoftReference) = (java.lang.ref.SoftReference) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l0x0022: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.ref.SoftReference) java.lang.ref.SoftReference.get():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0041 \}]\l0x0026: CHECK_CAST  (r2 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: INVOKE  (r3 I:boolean) = (r2 I:android.graphics.Bitmap) android.graphics.Bitmap.isMutable():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x003b A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: INVOKE  (r3 I:boolean) = \l  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap)\l  (r2 I:android.graphics.Bitmap)\l  (r5 I:int)\l  (r6 I:int)\l org.mapsforge.map.android.graphics.AndroidBitmap.canUseBitmap(android.graphics.Bitmap, int, int):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: INVOKE  (r1 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l0x0039: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l0x003a: GOTO  \-\> 0x003f A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: INVOKE  (r1 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l0x003e: GOTO  \-\> 0x0016 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: GOTO  \-\> 0x0044 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|ExcHandler: all null\lSplitter:B:6:0x0010\l|0x0041: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0042|0x0042: MONITOR_EXIT  (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0043|0x0043: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|0x0044: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{protected final android.graphics.Bitmap org.mapsforge.map.android.graphics.AndroidBitmap.getBitmapFromReusableSet((r4 'this' I:org.mapsforge.map.android.graphics.AndroidBitmap A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.graphics.Bitmap$Config A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_23;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_20;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_8;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_8;
Node_18 -> Node_19;
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

