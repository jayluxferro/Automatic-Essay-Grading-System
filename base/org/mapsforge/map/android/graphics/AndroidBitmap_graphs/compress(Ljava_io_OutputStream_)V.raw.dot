digraph "CFG fororg.mapsforge.map.android.graphics.AndroidBitmap.compress(Ljava\/io\/OutputStream;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.Bitmap) = (r3 I:org.mapsforge.map.android.graphics.AndroidBitmap) org.mapsforge.map.android.graphics.AndroidBitmap.bitmap android.graphics.Bitmap \l0x0002: SGET  (r1 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: INVOKE  (r4 I:boolean) = \l  (r0 I:android.graphics.Bitmap)\l  (r1 I:android.graphics.Bitmap$CompressFormat)\l  (r2 I:int)\l  (r4 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: RETURN   \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: NEW_INSTANCE  (r4 I:java.io.IOException) =  java.io.IOException \l0x000e: CONST_STR  (r0 I:java.lang.String) =  \"Failed to write bitmap to output stream\" \l0x0010: INVOKE  (r4 I:java.io.IOException), (r0 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.graphics.AndroidBitmap.compress((r3 'this' I:org.mapsforge.map.android.graphics.AndroidBitmap A[IMMUTABLE_TYPE, THIS]), (r4 I:java.io.OutputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
}

