digraph "CFG fororg.mapsforge.map.android.graphics.AndroidSvgBitmapStore.SvgStorer.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = \l  (r5 I:org.mapsforge.map.android.graphics.AndroidSvgBitmapStore$SvgStorer)\l org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.SvgStorer.hash int \l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:int) org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.access$000(int):java.lang.String type: STATIC \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: SGET  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.INSTANCE org.mapsforge.map.android.graphics.AndroidGraphicFactory A[Catch:\{ IllegalStateException \-\> 0x0056, FileNotFoundException \-\> 0x003d \}, TRY_ENTER]\l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ IllegalStateException \-\> 0x0056, FileNotFoundException \-\> 0x003d \}]\l0x000a: INVOKE  (r2 I:java.io.FileOutputStream) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory)\l  (r0 I:java.lang.String)\l  (r3 I:int)\l org.mapsforge.map.android.graphics.AndroidGraphicFactory.openFileOutput(java.lang.String, int):java.io.FileOutputStream type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0056, FileNotFoundException \-\> 0x003d \}]\l0x000d: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|SYNTHETIC\lSplitter:B:3:0x000e\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x000e\l|0x000e: IGET  (r1 I:android.graphics.Bitmap) = \l  (r5 I:org.mapsforge.map.android.graphics.AndroidSvgBitmapStore$SvgStorer)\l org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.SvgStorer.bitmap android.graphics.Bitmap A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}, TRY_ENTER]\l0x0010: SGET  (r4 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x0012: INVOKE  (r1 I:boolean) = \l  (r1 I:android.graphics.Bitmap)\l  (r4 I:android.graphics.Bitmap$CompressFormat)\l  (r3 I:int)\l  (r2 I:java.io.OutputStream)\l android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0030 A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: INVOKE  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.access$100():java.util.logging.Logger type: STATIC A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x001c: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x001e: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"SVG Failed to write svg bitmap \" A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x0023: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x0026: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x0029: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}]\l0x002d: INVOKE  (r1 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ IllegalStateException \-\> 0x0039, FileNotFoundException \-\> 0x0037, all \-\> 0x0034 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|0x0030: INVOKE  (r2 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_8 [shape=record,label="{8\:\ 0x0034|ExcHandler: all null\lSplitter:B:3:0x000e\l|0x0034: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lExcHandler: FileNotFoundException null\lSplitter:B:3:0x000e\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lExcHandler: IllegalStateException null\lSplitter:B:3:0x000e\l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|ExcHandler: all null\lSplitter:B:16:0x003d\l|0x003b: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|SYNTHETIC\lSplitter:B:16:0x003d\l}"];
Node_17 [shape=record,label="{17\:\ ?|Splitter:B:16:0x003d\l|0x003d: INVOKE  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.access$100():java.util.logging.Logger type: STATIC A[Catch:\{ all \-\> 0x003b \}, ExcHandler: FileNotFoundException null, TRY_ENTER]\l0x0041: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x003b \}]\l0x0043: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x003b \}]\l0x0046: CONST_STR  (r4 I:java.lang.String) =  \"SVG Failed to create file for svg bitmap \" A[Catch:\{ all \-\> 0x003b \}]\l0x0048: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x004b: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x004e: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x0052: INVOKE  (r2 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x0055: GOTO  \-\> 0x006e A[Catch:\{ all \-\> 0x003b \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: INVOKE  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.access$100():java.util.logging.Logger type: STATIC A[Catch:\{ all \-\> 0x003b \}]\l0x005a: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x003b \}]\l0x005c: INVOKE  (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x003b \}]\l0x005f: CONST_STR  (r4 I:java.lang.String) =  \"SVG Failed to stream bitmap to file \" A[Catch:\{ all \-\> 0x003b \}]\l0x0061: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x0064: INVOKE  (r3 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x0067: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}]\l0x006b: INVOKE  (r2 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x003b \}, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lExcHandler: IllegalStateException null\lSplitter:B:1:0x0007\l}"];
Node_20 [shape=record,label="{20\:\ 0x006e|0x006e: INVOKE  (r1 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_21 [shape=record,label="{21\:\ 0x0071|0x0071: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ 0x0072|0x0072: INVOKE  (r1 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|0x0075: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.graphics.AndroidSvgBitmapStore.SvgStorer.run((r5 'this' I:org.mapsforge.map.android.graphics.AndroidSvgBitmapStore$SvgStorer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_19;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13;
Node_3 -> Node_11;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_21;
Node_8 -> Node_9;
Node_9 -> Node_22;
Node_10 -> Node_16;
Node_11 -> Node_10;
Node_12 -> Node_18;
Node_13 -> Node_12;
Node_14 -> Node_22;
Node_16 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_20;
Node_18 -> Node_20;
Node_19 -> Node_18;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

