digraph "CFG fororg.mapsforge.map.android.graphics.AndroidSvgBitmap.getResourceBitmap(Ljava\/io\/InputStream;FFIII)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: INVOKE  (r4 I:com.caverock.androidsvg.SVG) = (r4 I:java.io.InputStream) com.caverock.androidsvg.SVG.getFromInputStream(java.io.InputStream):com.caverock.androidsvg.SVG type: STATIC A[Catch:\{ Exception \-\> 0x007d \}, TRY_ENTER]\l0x0004: INVOKE  (r4 I:android.graphics.Picture) = (r4 I:com.caverock.androidsvg.SVG) com.caverock.androidsvg.SVG.renderToPicture():android.graphics.Picture type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x0008: CAST  (r0 I:double) = (double) (r5 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0009: INVOKE  (r5 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getHeight():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x000d: INVOKE  (r2 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getWidth():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x0011: ARITH  (r5 I:int) = (r5 I:int) * (r2 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0013: CAST  (r5 I:float) = (float) (r5 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0014: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0015: CAST  (r5 I:double) = (double) (r5 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0016: INVOKE  (r5 I:double) = (r5 I:double) java.lang.Math.sqrt(double):double type: STATIC A[Catch:\{ Exception \-\> 0x007d \}]\l0x001a: ARITH  (r0 I:double) = (r0 I:double) \/ (r5 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x001b: INVOKE  (r5 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getWidth():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x001f: CAST  (r5 I:double) = (double) (r5 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0020: ARITH  (r5 I:double) = (r5 I:double) * (r0 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0022: CAST  (r5 I:float) = (float) (r5 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0023: INVOKE  (r6 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getHeight():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x0027: CAST  (r2 I:double) = (double) (r6 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0028: ARITH  (r2 I:double) = (r2 I:double) * (r0 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x002a: CAST  (r6 I:float) = (float) (r2 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x002b: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l A[Catch:\{ Exception \-\> 0x007d \}]\l0x002d: INVOKE  (r1 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getWidth():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x0031: CAST  (r1 I:float) = (float) (r1 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0032: ARITH  (r1 I:float) = (r1 I:float) * (r0 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0034: INVOKE  (r0 I:int) = (r4 I:android.graphics.Picture) android.graphics.Picture.getHeight():int type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}]\l0x0038: CAST  (r0 I:float) = (float) (r0 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0039: ARITH  (r1 I:float) = (r1 I:float) \/ (r0 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_2 [shape=record,label="{2\:\ 0x003a|0x003a: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0041 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|0x003c: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0041 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x003e|0x003e: CAST  (r5 I:float) = (float) (r7 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x003f: CAST  (r6 I:float) = (float) (r8 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0040: GOTO  \-\> 0x0050 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0041|0x0041: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0049 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0043|0x0043: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0049 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: CAST  (r6 I:float) = (float) (r8 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0046: ARITH  (r5 I:float) = (r6 I:float) * (r1 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0048: GOTO  \-\> 0x0050 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0049|0x0049: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0050 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0050 A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|0x004d: CAST  (r5 I:float) = (float) (r7 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x004e: ARITH  (r6 I:float) = (r5 I:float) \/ (r1 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0050|0x0050: CONST  (r7 I:?[int, float, short, byte, char]) = (100 ?[int, float, short, byte, char]) A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0052|0x0052: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x005c A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|0x0054: CAST  (r7 I:float) = (float) (r9 I:int) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0055: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (1120403456(0x42c80000, float:100.0) ?[int, float, short, byte, char])\l A[Catch:\{ Exception \-\> 0x007d \}]\l0x0057: ARITH  (r7 I:float) = (r7 I:float) \/ (r8 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0058: ARITH  (r5 I:float) = (r5 I:float) * (r7 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x005a: ARITH  (r6 I:float) = (r6 I:float) * (r7 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|0x005c: CAST  (r7 I:double) = (double) (r5 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x005d: INVOKE  (r7 I:double) = (r7 I:double) java.lang.Math.ceil(double):double type: STATIC A[Catch:\{ Exception \-\> 0x007d \}]\l0x0061: CAST  (r7 I:int) = (int) (r7 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0062: CAST  (r8 I:double) = (double) (r6 I:float) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0063: INVOKE  (r8 I:double) = (r8 I:double) java.lang.Math.ceil(double):double type: STATIC A[Catch:\{ Exception \-\> 0x007d \}]\l0x0067: CAST  (r8 I:int) = (int) (r8 I:double) A[Catch:\{ Exception \-\> 0x007d \}]\l0x0068: SGET  (r9 I:android.graphics.Bitmap$Config) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.TRANSPARENT_BITMAP android.graphics.Bitmap$Config A[Catch:\{ Exception \-\> 0x007d \}]\l0x006a: INVOKE  (r7 I:android.graphics.Bitmap) = \l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC A[Catch:\{ Exception \-\> 0x007d \}]\l0x006e: NEW_INSTANCE  (r8 I:android.graphics.Canvas) =  android.graphics.Canvas A[Catch:\{ Exception \-\> 0x007d \}]\l0x0070: INVOKE  \l  (r8 I:android.graphics.Canvas)\l  (r7 I:android.graphics.Bitmap)\l android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void type: DIRECT A[Catch:\{ Exception \-\> 0x007d \}]\l0x0073: NEW_INSTANCE  (r9 I:android.graphics.RectF) =  android.graphics.RectF A[Catch:\{ Exception \-\> 0x007d \}]\l0x0075: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ Exception \-\> 0x007d \}]\l0x0076: INVOKE  \l  (r9 I:android.graphics.RectF)\l  (r0 I:float)\l  (r0 I:float)\l  (r5 I:float)\l  (r6 I:float)\l android.graphics.RectF.\<init\>(float, float, float, float):void type: DIRECT A[Catch:\{ Exception \-\> 0x007d \}]\l0x0079: INVOKE  \l  (r8 I:android.graphics.Canvas)\l  (r4 I:android.graphics.Picture)\l  (r9 I:android.graphics.RectF)\l android.graphics.Canvas.drawPicture(android.graphics.Picture, android.graphics.RectF):void type: VIRTUAL A[Catch:\{ Exception \-\> 0x007d \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x007c|0x007c: RETURN  (r7 I:android.graphics.Bitmap) \l}"];
Node_16 [shape=record,label="{16\:\ 0x007d|ExcHandler: Exception null\lSplitter:B:0:0x0000\l|0x007d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x007e|0x007e: NEW_INSTANCE  (r5 I:java.io.IOException) =  java.io.IOException \l0x0080: INVOKE  (r5 I:java.io.IOException), (r4 I:java.lang.Throwable) java.io.IOException.\<init\>(java.lang.Throwable):void type: DIRECT \l}"];
Node_18 [shape=record,label="{18\:\ 0x0083|0x0083: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Bitmap org.mapsforge.map.android.graphics.AndroidSvgBitmap.getResourceBitmap((r4 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_16;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_11;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

