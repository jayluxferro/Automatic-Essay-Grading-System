digraph "CFG fororg.mapsforge.map.android.graphics.AndroidTileBitmap.\<init\>(IZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r2.expiration = 0\lr2.timestamp = java.lang.System.currentTimeMillis()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|if (android.os.Build.VERSION.SDK_INT \< 11) goto L_0x0019\l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|r2.bitmap = getTileBitmapFromReusableSet(r3, r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r2.bitmap != null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|if (r4 == false) goto L_0x0022\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|android.graphics.Bitmap$Config r4 = org.mapsforge.map.android.graphics.AndroidGraphicFactory.TRANSPARENT_BITMAP\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|android.graphics.Bitmap$Config r4 = org.mapsforge.map.android.graphics.AndroidGraphicFactory.NON_TRANSPARENT_BITMAP\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|PHI: r4 \l  PHI: (r4v1 android.graphics.Bitmap$Config) = (r4v2 android.graphics.Bitmap$Config), (r4v3 android.graphics.Bitmap$Config) binds: [B:7:0x0022, B:6:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|r2.bitmap = org.mapsforge.map.android.graphics.AndroidBitmap.createAndroidBitmap(r3, r3, r4)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.android.graphics.AndroidTileBitmap.\<init\>((r2v0 'this' org.mapsforge.map.android.graphics.AndroidTileBitmap A[IMMUTABLE_TYPE, THIS]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[BUILD, android.annotation.TargetApi, \{value=11\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

