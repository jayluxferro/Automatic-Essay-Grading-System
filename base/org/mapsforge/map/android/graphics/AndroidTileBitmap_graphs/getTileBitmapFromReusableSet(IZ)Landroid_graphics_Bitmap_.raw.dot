digraph "CFG fororg.mapsforge.map.android.graphics.AndroidTileBitmap.getTileBitmapFromReusableSet(IZ)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r4 I:int) = (r4 I:int), (r5 I:boolean) org.mapsforge.map.android.graphics.AndroidTileBitmap.composeHash(int, boolean):int type: STATIC \l0x0004: SGET  (r0 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|SYNTHETIC\lSplitter:B:2:0x0007\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0007\l|0x0007: SGET  (r1 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map A[Catch:\{ all \-\> 0x0047 \}, TRY_ENTER]\l0x0009: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x0047 \}]\l0x000d: INVOKE  (r4 I:java.lang.Object) = (r1 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l0x0011: CHECK_CAST  (r4 I:java.util.Set) = (java.util.Set) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l0x0013: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0018 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: RETURN  (r1 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: INVOKE  (r2 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0045 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l0x0026: CHECK_CAST  (r2 I:java.lang.ref.SoftReference) = (java.lang.ref.SoftReference) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l0x0028: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.ref.SoftReference) java.lang.ref.SoftReference.get():java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l0x002c: CHECK_CAST  (r2 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: INVOKE  (r3 I:boolean) = (r2 I:android.graphics.Bitmap) android.graphics.Bitmap.isMutable():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0041 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x003c A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0047 \}]\l0x0039: INVOKE  (r2 I:android.graphics.Bitmap), (r5 I:int) android.graphics.Bitmap.eraseColor(int):void type: VIRTUAL A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003c|0x003c: INVOKE  (r4 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l0x003f: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l0x0040: GOTO  \-\> 0x0045 A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|0x0041: INVOKE  (r4 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0047 \}]\l0x0044: GOTO  \-\> 0x001c A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|0x0045: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|0x0046: RETURN  (r1 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|ExcHandler: all null\lSplitter:B:2:0x0007\l|0x0047: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0047 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0047 \}, TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0049|0x0049: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static android.graphics.Bitmap org.mapsforge.map.android.graphics.AndroidTileBitmap.getTileBitmapFromReusableSet((r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_17 -> Node_8;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

