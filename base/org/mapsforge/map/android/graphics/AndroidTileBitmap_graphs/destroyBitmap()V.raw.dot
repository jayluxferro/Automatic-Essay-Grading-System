digraph "CFG fororg.mapsforge.map.android.graphics.AndroidTileBitmap.destroyBitmap()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:android.graphics.Bitmap) = (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) org.mapsforge.map.android.graphics.AndroidTileBitmap.bitmap android.graphics.Bitmap \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0058 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0006: CONST  (r1 I:?[int, float, short, byte, char]) = (11 ?[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:16:0x0050 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) org.mapsforge.map.android.graphics.AndroidTileBitmap.getHeight():int type: VIRTUAL \l0x000e: SGET  (r1 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lSplitter:B:6:0x0011\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0011\l|0x0011: IGET  (r2 I:android.graphics.Bitmap) = (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) org.mapsforge.map.android.graphics.AndroidTileBitmap.bitmap android.graphics.Bitmap A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x0013: INVOKE  (r2 I:boolean) = (r2 I:android.graphics.Bitmap) android.graphics.Bitmap.hasAlpha():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x004d \}]\l0x0017: INVOKE  (r0 I:int) = (r0 I:int), (r2 I:boolean) org.mapsforge.map.android.graphics.AndroidTileBitmap.composeHash(int, boolean):int type: STATIC A[Catch:\{ all \-\> 0x004d \}]\l0x001b: SGET  (r2 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map A[Catch:\{ all \-\> 0x004d \}]\l0x001d: INVOKE  (r3 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x004d \}]\l0x0021: INVOKE  (r2 I:boolean) = (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0035 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: SGET  (r2 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map A[Catch:\{ all \-\> 0x004d \}]\l0x0029: INVOKE  (r3 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x004d \}]\l0x002d: NEW_INSTANCE  (r4 I:java.util.HashSet) =  java.util.HashSet A[Catch:\{ all \-\> 0x004d \}]\l0x002f: INVOKE  (r4 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l0x0032: INVOKE  \l  (r2 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: SGET  (r2 I:java.util.Map\<java.lang.Integer, java.util.Set\<java.lang.ref.SoftReference\<android.graphics.Bitmap\>\>\>) =  org.mapsforge.map.android.graphics.AndroidTileBitmap.reusableTileBitmaps java.util.Map A[Catch:\{ all \-\> 0x004d \}]\l0x0037: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x004d \}]\l0x003b: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.Map), (r0 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l0x003f: CHECK_CAST  (r0 I:java.util.Set) = (java.util.Set) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}]\l0x0041: NEW_INSTANCE  (r2 I:java.lang.ref.SoftReference) =  java.lang.ref.SoftReference A[Catch:\{ all \-\> 0x004d \}]\l0x0043: IGET  (r3 I:android.graphics.Bitmap) = (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) org.mapsforge.map.android.graphics.AndroidTileBitmap.bitmap android.graphics.Bitmap A[Catch:\{ all \-\> 0x004d \}]\l0x0045: INVOKE  (r2 I:java.lang.ref.SoftReference), (r3 I:java.lang.Object) java.lang.ref.SoftReference.\<init\>(java.lang.Object):void type: DIRECT A[Catch:\{ all \-\> 0x004d \}]\l0x0048: INVOKE  (r0 I:java.util.Set), (r2 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x004b|0x004b: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x004c|0x004c: GOTO  \-\> 0x0055 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|ExcHandler: all null\lSplitter:B:6:0x0011\l|0x004d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004e|0x004e: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: IGET  (r0 I:android.graphics.Bitmap) = (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap) org.mapsforge.map.android.graphics.AndroidTileBitmap.bitmap android.graphics.Bitmap \l0x0052: INVOKE  (r0 I:android.graphics.Bitmap) android.graphics.Bitmap.recycle():void type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0056: IPUT  \l  (r0 I:android.graphics.Bitmap)\l  (r5 I:org.mapsforge.map.android.graphics.AndroidTileBitmap)\l org.mapsforge.map.android.graphics.AndroidTileBitmap.bitmap android.graphics.Bitmap \l}"];
Node_18 [shape=record,label="{18\:\ 0x0058|0x0058: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.android.graphics.AndroidTileBitmap.destroyBitmap((r5 'this' I:org.mapsforge.map.android.graphics.AndroidTileBitmap A[IMMUTABLE_TYPE, THIS]))  | Annotation[BUILD, android.annotation.TargetApi, \{value=11\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

