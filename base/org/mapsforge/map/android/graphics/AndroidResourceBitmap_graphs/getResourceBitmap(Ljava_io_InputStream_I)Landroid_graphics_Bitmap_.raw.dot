digraph "CFG fororg.mapsforge.map.android.graphics.AndroidResourceBitmap.getResourceBitmap(Ljava\/io\/InputStream;I)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:java.util.Map\<java.lang.Integer, android.util.Pair\<android.graphics.Bitmap, java.lang.Integer\>\>) =  org.mapsforge.map.android.graphics.AndroidResourceBitmap.RESOURCE_BITMAPS java.util.Map \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: SGET  (r1 I:java.util.Map\<java.lang.Integer, android.util.Pair\<android.graphics.Bitmap, java.lang.Integer\>\>) =  org.mapsforge.map.android.graphics.AndroidResourceBitmap.RESOURCE_BITMAPS java.util.Map A[Catch:\{ all \-\> 0x005e \}, TRY_ENTER]\l0x0005: INVOKE  (r2 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x0009: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x005e \}]\l0x000d: CHECK_CAST  (r1 I:android.util.Pair) = (android.util.Pair) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}]\l0x000f: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0035 A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: NEW_INSTANCE  (r5 I:android.util.Pair) =  android.util.Pair A[Catch:\{ all \-\> 0x005e \}]\l0x0014: IGET  (r3 I:java.lang.Object) = (r1 I:android.util.Pair) android.util.Pair.first java.lang.Object A[Catch:\{ all \-\> 0x005e \}]\l0x0016: IGET  (r4 I:java.lang.Object) = (r1 I:android.util.Pair) android.util.Pair.second java.lang.Object A[Catch:\{ all \-\> 0x005e \}]\l0x0018: CHECK_CAST  (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}]\l0x001a: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) java.lang.Integer.intValue():int type: VIRTUAL A[Catch:\{ all \-\> 0x005e \}]\l0x001e: ARITH  (r4 I:int) = (r4 I:int) + (r2 I:int) A[Catch:\{ all \-\> 0x005e \}]\l0x001f: INVOKE  (r2 I:java.lang.Integer) = (r4 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x0023: INVOKE  \l  (r5 I:android.util.Pair)\l  (r3 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l android.util.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT A[Catch:\{ all \-\> 0x005e \}]\l0x0026: SGET  (r2 I:java.util.Map\<java.lang.Integer, android.util.Pair\<android.graphics.Bitmap, java.lang.Integer\>\>) =  org.mapsforge.map.android.graphics.AndroidResourceBitmap.RESOURCE_BITMAPS java.util.Map A[Catch:\{ all \-\> 0x005e \}]\l0x0028: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x002c: INVOKE  \l  (r2 I:java.util.Map)\l  (r6 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x005e \}]\l0x002f: IGET  (r5 I:java.lang.Object) = (r1 I:android.util.Pair) android.util.Pair.first java.lang.Object A[Catch:\{ all \-\> 0x005e \}]\l0x0031: CHECK_CAST  (r5 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0033: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: RETURN  (r5 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x005e \}]\l0x0036: SGET  (r3 I:android.graphics.Bitmap$Config) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.TRANSPARENT_BITMAP android.graphics.Bitmap$Config A[Catch:\{ all \-\> 0x005e \}]\l0x0038: INVOKE  (r3 I:android.graphics.BitmapFactory$Options) = (r3 I:android.graphics.Bitmap$Config) org.mapsforge.map.android.graphics.AndroidResourceBitmap.createBitmapFactoryOptions(android.graphics.Bitmap$Config):android.graphics.BitmapFactory$Options type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x003c: INVOKE  (r5 I:android.graphics.Bitmap) = \l  (r5 I:java.io.InputStream)\l  (r1 I:android.graphics.Rect)\l  (r3 I:android.graphics.BitmapFactory$Options)\l android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|0x0040: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0056 A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: NEW_INSTANCE  (r1 I:android.util.Pair) =  android.util.Pair A[Catch:\{ all \-\> 0x005e \}]\l0x0044: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x0048: INVOKE  \l  (r1 I:android.util.Pair)\l  (r5 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l android.util.Pair.\<init\>(java.lang.Object, java.lang.Object):void type: DIRECT A[Catch:\{ all \-\> 0x005e \}]\l0x004b: SGET  (r2 I:java.util.Map\<java.lang.Integer, android.util.Pair\<android.graphics.Bitmap, java.lang.Integer\>\>) =  org.mapsforge.map.android.graphics.AndroidResourceBitmap.RESOURCE_BITMAPS java.util.Map A[Catch:\{ all \-\> 0x005e \}]\l0x004d: INVOKE  (r6 I:java.lang.Integer) = (r6 I:int) java.lang.Integer.valueOf(int):java.lang.Integer type: STATIC A[Catch:\{ all \-\> 0x005e \}]\l0x0051: INVOKE  \l  (r2 I:java.util.Map)\l  (r6 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|0x0054: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: RETURN  (r5 I:android.graphics.Bitmap) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0056|0x0056: NEW_INSTANCE  (r5 I:java.io.IOException) =  java.io.IOException A[Catch:\{ all \-\> 0x005e \}]\l0x0058: CONST_STR  (r6 I:java.lang.String) =  \"BitmapFactory failed to decodeStream\" A[Catch:\{ all \-\> 0x005e \}]\l0x005a: INVOKE  (r5 I:java.io.IOException), (r6 I:java.lang.String) java.io.IOException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x005d|0x005d: THROW  (r5 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x005e|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x005e: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x005e \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x005f|0x005f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x005e \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0060|0x0060: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static android.graphics.Bitmap org.mapsforge.map.android.graphics.AndroidResourceBitmap.getResourceBitmap((r5 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

