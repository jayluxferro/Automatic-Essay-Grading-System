digraph "CFG fororg.mapsforge.map.android.graphics.AndroidCanvas.drawText(Ljava\/lang\/String;IILorg\/mapsforge\/core\/graphics\/Paint;)V" {
subgraph cluster_Region_1989522932 {
label = "R(1:(1:(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_181276853 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_948629157 {
label = "IF [B:0:0x0000, B:2:0x000a, B:4:0x0011] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r2 != null) goto L_0x0002\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|ADDED_TO_REGION\l|if (r2.trim().isEmpty() != true) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|ADDED_TO_REGION\l|if (r5.isTransparent() != true) goto L_0x0014\l}"];
subgraph cluster_Region_1041457461 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0014|r1.canvas.drawText(r2, (float) r3, (float) r4, org.mapsforge.map.android.graphics.AndroidGraphicFactory.getPaint(r5))\l}"];
}
}
}
}
Node_1 [shape=record,color=red,label="{1\:\ 0x0002}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000d}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0013}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.graphics.AndroidCanvas.drawText((r1v0 'this' org.mapsforge.map.android.graphics.AndroidCanvas A[IMMUTABLE_TYPE, THIS]), (r2v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 org.mapsforge.core.graphics.Paint A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_8[style=dashed];
Node_2 -> Node_3;
Node_2 -> Node_9[style=dashed];
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

