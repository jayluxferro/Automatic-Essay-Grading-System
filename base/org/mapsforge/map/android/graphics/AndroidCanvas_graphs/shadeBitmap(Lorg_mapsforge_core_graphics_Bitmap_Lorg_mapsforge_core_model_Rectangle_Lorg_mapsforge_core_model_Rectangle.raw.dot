digraph "CFG fororg.mapsforge.map.android.graphics.AndroidCanvas.shadeBitmap(Lorg\/mapsforge\/core\/graphics\/Bitmap;Lorg\/mapsforge\/core\/model\/Rectangle;Lorg\/mapsforge\/core\/model\/Rectangle;F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r32 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r34 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r35 I:?[OBJECT, ARRAY]) \l0x0006: IGET  (r3 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0008: INVOKE  (r3 I:android.graphics.Canvas) android.graphics.Canvas.save():int type: VIRTUAL \l0x000b: IGET  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x000d: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0017 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|0x0010: NEW_INSTANCE  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) =  org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x0012: INVOKE  \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r4 I:org.mapsforge.map.android.graphics.AndroidCanvas$1)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.\<init\>(org.mapsforge.map.android.graphics.AndroidCanvas$1):void type: DIRECT \l0x0015: IPUT  \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas)\l org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IGET  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x0019: IGET  (r5 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x001b: CONST  (r6 I:?[int, float, short, byte, char]) = \l  (1132396544(0x437f0000, float:255.0) ?[int, float, short, byte, char])\l \l0x001d: ARITH  (r6 I:float) = (r6 I:float) * (r36 I:float) \l0x001f: CAST  (r6 I:int) = (int) (r6 I:float) \l0x0020: INVOKE  (r5 I:android.graphics.Paint) = \l  (r5 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r6 I:int)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useAlphaPaint(int):android.graphics.Paint type: VIRTUAL \l0x0024: CONST  (r6 I:?[int, float, short, byte, char]) = (26 ?[int, float, short, byte, char]) \l0x0026: CONST  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r33 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0088 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|0x0029: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x005e \l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|0x002b: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int \l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: IF  (r1 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:9:0x004b \l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0031: INVOKE  (r1 I:android.graphics.Canvas) android.graphics.Canvas.save():int type: VIRTUAL \l0x0034: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0036: IGET  (r3 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x0038: CAST  (r3 I:float) = (float) (r3 I:double) \l0x0039: IGET  (r8 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x003b: CAST  (r4 I:float) = (float) (r8 I:double) \l0x003c: IGET  (r8 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x003e: CAST  (r6 I:float) = (float) (r8 I:double) \l0x003f: IGET  (r8 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x0041: CAST  (r2 I:float) = (float) (r8 I:double) \l0x0042: INVOKE  \l  (r1 I:android.graphics.Canvas)\l  (r3 I:float)\l  (r4 I:float)\l  (r6 I:float)\l  (r2 I:float)\l android.graphics.Canvas.clipRect(float, float, float, float):boolean type: VIRTUAL \l0x0045: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0047: INVOKE  (r1 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x004b|0x004b: IGET  (r8 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x004d: IGET  (r3 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x004f: CAST  (r9 I:float) = (float) (r3 I:double) \l0x0050: IGET  (r3 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x0052: CAST  (r10 I:float) = (float) (r3 I:double) \l0x0053: IGET  (r3 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x0055: CAST  (r11 I:float) = (float) (r3 I:double) \l0x0056: IGET  (r1 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x0058: CAST  (r12 I:float) = (float) (r1 I:double) \l0x0059: SGET  (r13 I:android.graphics.Region$Op) =  android.graphics.Region.Op.REPLACE android.graphics.Region$Op \l0x005b: INVOKE  \l  (r8 I:android.graphics.Canvas)\l  (r9 I:float)\l  (r10 I:float)\l  (r11 I:float)\l  (r12 I:float)\l  (r13 I:android.graphics.Region$Op)\l android.graphics.Canvas.clipRect(float, float, float, float, android.graphics.Region$Op):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x005e|0x005e: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0060: IGET  (r2 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x0062: INVOKE  (r2 I:android.graphics.Bitmap) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useNeutralShadingPixel():android.graphics.Bitmap type: VIRTUAL \l0x0066: IGET  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x0068: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0069: INVOKE  (r3 I:android.graphics.Rect) = \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r7 I:int)\l  (r7 I:int)\l  (r4 I:int)\l  (r4 I:int)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useAsr(int, int, int, int):android.graphics.Rect type: VIRTUAL \l0x006d: IGET  (r4 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.hillshadingTemps org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps \l0x006f: IGET  (r6 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0071: INVOKE  (r6 I:int) = (r6 I:android.graphics.Canvas) android.graphics.Canvas.getWidth():int type: VIRTUAL \l0x0075: IGET  (r8 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0077: INVOKE  (r8 I:int) = (r8 I:android.graphics.Canvas) android.graphics.Canvas.getHeight():int type: VIRTUAL \l0x007b: INVOKE  (r4 I:android.graphics.Rect) = \l  (r4 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r7 I:int)\l  (r7 I:int)\l  (r6 I:int)\l  (r8 I:int)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useAdr(int, int, int, int):android.graphics.Rect type: VIRTUAL \l0x007f: INVOKE  \l  (r1 I:android.graphics.Canvas)\l  (r2 I:android.graphics.Bitmap)\l  (r3 I:android.graphics.Rect)\l  (r4 I:android.graphics.Rect)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void type: VIRTUAL \l0x0082: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0084: INVOKE  (r1 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0087|0x0087: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ 0x0088|0x0088: INVOKE  (r9 I:android.graphics.Bitmap) = (r33 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.map.android.graphics.AndroidGraphicFactory.getBitmap(org.mapsforge.core.graphics.Bitmap):android.graphics.Bitmap type: STATIC \l0x008c: INVOKE  (r10 I:double) = (r35 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.getWidth():double type: VIRTUAL \l0x0090: INVOKE  (r12 I:double) = (r34 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.getWidth():double type: VIRTUAL \l0x0094: ARITH  (r10 I:double) = (r10 I:double) \/ (r12 I:double) \l0x0095: INVOKE  (r12 I:double) = (r35 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.getHeight():double type: VIRTUAL \l0x0099: INVOKE  (r14 I:double) = (r34 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.getHeight():double type: VIRTUAL \l0x009d: ARITH  (r12 I:double) = (r12 I:double) \/ (r14 I:double) \l0x009e: CONST  (r14 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x00a0: CMP_G  (r16 I:int) = (r10 I:double), (r14 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x00a2|0x00a2: IF  (r16 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x0105 \l}"];
Node_14 [shape=record,label="{14\:\ 0x00a4|0x00a4: CMP_G  (r16 I:int) = (r12 I:double), (r14 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x00a6|0x00a6: IF  (r16 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:21:0x0105 \l}"];
Node_16 [shape=record,label="{16\:\ 0x00a8|0x00a8: SGET  (r4 I:int) =  android.os.Build.VERSION.SDK_INT int \l}"];
Node_17 [shape=record,label="{17\:\ 0x00aa|0x00aa: IF  (r4 I:?[int, byte, short, char]) \< (r6 I:?[int, byte, short, char])  \-\> B:19:0x00c8 \l}"];
Node_18 [shape=record,label="{18\:\ 0x00ac|0x00ac: IGET  (r4 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x00ae: INVOKE  (r4 I:android.graphics.Canvas) android.graphics.Canvas.save():int type: VIRTUAL \l0x00b1: IGET  (r4 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x00b3: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x00b5: CAST  (r6 I:float) = (float) (r6 I:double) \l0x00b6: IGET  (r7 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x00b8: CAST  (r7 I:float) = (float) (r7 I:double) \l0x00b9: IGET  (r14 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x00bb: CAST  (r8 I:float) = (float) (r14 I:double) \l0x00bc: IGET  (r14 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x00be: CAST  (r14 I:float) = (float) (r14 I:double) \l0x00bf: INVOKE  \l  (r4 I:android.graphics.Canvas)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:float)\l  (r14 I:float)\l android.graphics.Canvas.clipRect(float, float, float, float):boolean type: VIRTUAL \l0x00c2: IGET  (r4 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x00c4: INVOKE  (r4 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_19 [shape=record,label="{19\:\ 0x00c8|0x00c8: IGET  (r14 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x00ca: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x00cc: CAST  (r15 I:float) = (float) (r6 I:double) \l0x00cd: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x00cf: CAST  (r4 I:float) = (float) (r6 I:double) \l0x00d0: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x00d2: CAST  (r6 I:float) = (float) (r6 I:double) \l0x00d3: IGET  (r7 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x00d5: CAST  (r7 I:float) = (float) (r7 I:double) \l0x00d6: SGET  (r19 I:android.graphics.Region$Op) =  android.graphics.Region.Op.REPLACE android.graphics.Region$Op \l0x00d8: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00da: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00dc: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00de: INVOKE  \l  (r14 I:android.graphics.Canvas)\l  (r15 I:float)\l  (r16 I:float)\l  (r17 I:float)\l  (r18 I:float)\l  (r19 I:android.graphics.Region$Op)\l android.graphics.Canvas.clipRect(float, float, float, float, android.graphics.Region$Op):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x00e1|0x00e1: INVOKE  (r3 I:android.graphics.Matrix) = \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useMatrix():android.graphics.Matrix type: VIRTUAL \l0x00e5: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x00e7: CAST  (r4 I:float) = (float) (r6 I:double) \l0x00e8: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x00ea: CAST  (r2 I:float) = (float) (r6 I:double) \l0x00eb: INVOKE  (r3 I:android.graphics.Matrix), (r4 I:float), (r2 I:float) android.graphics.Matrix.preTranslate(float, float):boolean type: VIRTUAL \l0x00ee: CAST  (r2 I:float) = (float) (r10 I:double) \l0x00ef: CAST  (r4 I:float) = (float) (r12 I:double) \l0x00f0: INVOKE  (r3 I:android.graphics.Matrix), (r2 I:float), (r4 I:float) android.graphics.Matrix.preScale(float, float):boolean type: VIRTUAL \l0x00f3: IGET  (r6 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x00f5: NEG  (r6 I:double) = (r6 I:double) \l0x00f6: CAST  (r2 I:float) = (float) (r6 I:double) \l0x00f7: IGET  (r6 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x00f9: NEG  (r6 I:double) = (r6 I:double) \l0x00fa: CAST  (r1 I:float) = (float) (r6 I:double) \l0x00fb: INVOKE  (r3 I:android.graphics.Matrix), (r2 I:float), (r1 I:float) android.graphics.Matrix.preTranslate(float, float):boolean type: VIRTUAL \l0x00fe: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0100: INVOKE  \l  (r1 I:android.graphics.Canvas)\l  (r9 I:android.graphics.Bitmap)\l  (r3 I:android.graphics.Matrix)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_21 [shape=record,label="{21\:\ 0x0105|0x0105: IGET  (r7 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x0107: MOVE  (r20 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) \l0x0109: IGET  (r4 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x010b: INVOKE  (r4 I:double) = (r4 I:double) java.lang.Math.floor(double):double type: STATIC \l0x010f: ARITH  (r7 I:double) = (r7 I:double) \- (r4 I:double) \l0x0110: ARITH  (r7 I:double) = (r7 I:double) + (r14 I:double) \l0x0111: IGET  (r4 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x0113: INVOKE  (r4 I:double) = (r4 I:double), (r7 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0117: ARITH  (r6 I:double) = (r10 I:double) * (r4 I:double) \l0x0119: IGET  (r14 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x011b: INVOKE  (r14 I:double) = (r14 I:double) java.lang.Math.floor(double):double type: STATIC \l0x011f: CONST  (r16 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0121: ARITH  (r14 I:double) = (r14 I:double) + (r16 I:double) \l0x0123: MOVE  (r21 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0125: IGET  (r8 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x0127: ARITH  (r14 I:double) = (r14 I:double) \- (r8 I:double) \l0x0128: INVOKE  (r8 I:int) = (r33 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE \l0x012c: CAST  (r8 I:double) = (double) (r8 I:int) \l0x012d: MOVE  (r22 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x012f: IGET  (r2 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x0131: ARITH  (r8 I:double) = (r8 I:double) \- (r2 I:double) \l0x0132: INVOKE  (r2 I:double) = (r8 I:double), (r14 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0136: ARITH  (r8 I:double) = (r10 I:double) * (r2 I:double) \l0x0138: ARITH  (r8 I:double) = (r8 I:double) + (r6 I:double) \l0x0139: IGET  (r14 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x013b: MOVE  (r23 I:?[long, double]) = (r6 I:?[long, double]) \l0x013d: IGET  (r6 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x013f: ARITH  (r14 I:double) = (r14 I:double) \- (r6 I:double) \l0x0140: ARITH  (r14 I:double) = (r14 I:double) * (r10 I:double) \l0x0142: ARITH  (r8 I:double) = (r8 I:double) + (r14 I:double) \l0x0143: INVOKE  (r6 I:double) = (r8 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x0147: CAST  (r6 I:int) = (int) (r6 I:double) \l0x0148: IGET  (r7 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x014a: IGET  (r9 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x014c: INVOKE  (r9 I:double) = (r9 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0150: ARITH  (r7 I:double) = (r7 I:double) \- (r9 I:double) \l0x0151: CONST  (r9 I:?[long, double]) = \l  (4607182418800017408(0x3ff0000000000000, double:1.0) ?[long, double])\l \l0x0153: ARITH  (r7 I:double) = (r7 I:double) + (r9 I:double) \l0x0154: IGET  (r9 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x0156: INVOKE  (r7 I:double) = (r9 I:double), (r7 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x015a: ARITH  (r9 I:double) = (r12 I:double) * (r7 I:double) \l0x015c: IGET  (r14 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x015e: INVOKE  (r14 I:double) = (r14 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0162: ARITH  (r14 I:double) = (r14 I:double) + (r16 I:double) \l0x0164: MOVE  (r25 I:?[long, double]) = (r2 I:?[long, double]) \l0x0166: IGET  (r2 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x0168: ARITH  (r14 I:double) = (r14 I:double) \- (r2 I:double) \l0x0169: INVOKE  (r2 I:int) = (r33 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getHeight():int type: INTERFACE \l0x016d: CAST  (r2 I:double) = (double) (r2 I:int) \l0x016e: MOVE  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0170: MOVE  (r28 I:?[long, double]) = (r7 I:?[long, double]) \l0x0172: IGET  (r6 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x0174: ARITH  (r2 I:double) = (r2 I:double) \- (r6 I:double) \l0x0175: INVOKE  (r2 I:double) = (r2 I:double), (r14 I:double) java.lang.Math.min(double, double):double type: STATIC \l0x0179: ARITH  (r6 I:double) = (r12 I:double) * (r2 I:double) \l0x017b: ARITH  (r6 I:double) = (r6 I:double) + (r9 I:double) \l0x017c: IGET  (r14 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x017e: MOVE  (r30 I:?[long, double]) = (r9 I:?[long, double]) \l0x0180: IGET  (r8 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x0182: ARITH  (r14 I:double) = (r14 I:double) \- (r8 I:double) \l0x0183: ARITH  (r14 I:double) = (r14 I:double) * (r12 I:double) \l0x0185: ARITH  (r6 I:double) = (r6 I:double) + (r14 I:double) \l0x0186: INVOKE  (r6 I:double) = (r6 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x018a: CAST  (r6 I:int) = (int) (r6 I:double) \l0x018b: IGET  (r7 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x018d: ARITH  (r7 I:double) = (r7 I:double) \- (r4 I:double) \l0x018e: INVOKE  (r4 I:long) = (r7 I:double) java.lang.Math.round(double):long type: STATIC \l0x0192: CAST  (r4 I:int) = (int) (r4 I:long) \l0x0193: IGET  (r7 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x0195: ARITH  (r7 I:double) = (r7 I:double) \- (r28 I:double) \l0x0197: INVOKE  (r7 I:long) = (r7 I:double) java.lang.Math.round(double):long type: STATIC \l0x019b: CAST  (r5 I:int) = (int) (r7 I:long) \l0x019c: IGET  (r7 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x019e: ARITH  (r7 I:double) = (r7 I:double) + (r25 I:double) \l0x01a0: INVOKE  (r7 I:long) = (r7 I:double) java.lang.Math.round(double):long type: STATIC \l0x01a4: CAST  (r7 I:int) = (int) (r7 I:long) \l0x01a5: IGET  (r8 I:double) = (r1 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x01a7: ARITH  (r8 I:double) = (r8 I:double) + (r2 I:double) \l0x01a8: INVOKE  (r1 I:long) = (r8 I:double) java.lang.Math.round(double):long type: STATIC \l0x01ac: CAST  (r1 I:int) = (int) (r1 I:long) \l0x01ad: INVOKE  (r2 I:android.graphics.Canvas) = \l  (r22 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useCanvas():android.graphics.Canvas type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x01b1|0x01b1: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x01ce \l}"];
Node_23 [shape=record,label="{23\:\ 0x01b3|0x01b3: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x01ce \l}"];
Node_24 [shape=record,label="{24\:\ 0x01b5|0x01b5: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x01b7: INVOKE  (r3 I:android.graphics.Bitmap$Config) = (r21 I:android.graphics.Bitmap) android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config type: VIRTUAL \l0x01bb: INVOKE  (r9 I:android.graphics.Bitmap) = \l  (r7 I:int)\l  (r1 I:int)\l  (r3 I:android.graphics.Bitmap$Config)\l android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: STATIC \l0x01bf: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r9 I:android.graphics.Bitmap)\l android.graphics.Canvas.setBitmap(android.graphics.Bitmap):void type: VIRTUAL \l0x01c2: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1065353216(0x3f800000, float:1.0) ?[int, float, short, byte, char])\l \l0x01c4: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c5: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x01c7: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01c8: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r10 I:android.graphics.Bitmap)\l  (r3 I:float)\l  (r8 I:float)\l  (r11 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint):void type: VIRTUAL \l0x01cb: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x01ce|0x01ce: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r21 I:?[OBJECT, ARRAY]) \l0x01d0: MOVE  (r9 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x01d1|0x01d1: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r22 I:?[OBJECT, ARRAY]) \l0x01d3: INVOKE  (r1 I:android.graphics.Rect) = \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r4 I:int)\l  (r5 I:int)\l  (r7 I:int)\l  (r1 I:int)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useAsr(int, int, int, int):android.graphics.Rect type: VIRTUAL \l0x01d7: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01d9: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x01da: INVOKE  (r5 I:android.graphics.Rect) = \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r5 I:int)\l  (r5 I:int)\l  (r4 I:int)\l  (r6 I:int)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useAdr(int, int, int, int):android.graphics.Rect type: VIRTUAL \l0x01de: INVOKE  (r7 I:android.graphics.Bitmap$Config) = (r10 I:android.graphics.Bitmap) android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config type: VIRTUAL \l0x01e2: INVOKE  (r3 I:android.graphics.Bitmap) = \l  (r3 I:org.mapsforge.map.android.graphics.AndroidCanvas$HilshadingTemps)\l  (r4 I:int)\l  (r6 I:int)\l  (r7 I:android.graphics.Bitmap$Config)\l org.mapsforge.map.android.graphics.AndroidCanvas.HilshadingTemps.useScaleBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap type: VIRTUAL \l0x01e6: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r3 I:android.graphics.Bitmap)\l android.graphics.Canvas.setBitmap(android.graphics.Bitmap):void type: VIRTUAL \l0x01e9: IGET  (r4 I:android.graphics.Paint) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.bitmapPaint android.graphics.Paint \l0x01eb: INVOKE  \l  (r2 I:android.graphics.Canvas)\l  (r9 I:android.graphics.Bitmap)\l  (r1 I:android.graphics.Rect)\l  (r5 I:android.graphics.Rect)\l  (r4 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void type: VIRTUAL \l0x01ee: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x01f0: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r35 I:?[OBJECT, ARRAY]) \l0x01f2: IGET  (r4 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x01f4: CAST  (r4 I:float) = (float) (r4 I:double) \l0x01f5: IGET  (r5 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x01f7: CAST  (r5 I:float) = (float) (r5 I:double) \l0x01f8: IGET  (r6 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.right double \l0x01fa: CAST  (r6 I:float) = (float) (r6 I:double) \l0x01fb: IGET  (r7 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.bottom double \l0x01fd: CAST  (r7 I:float) = (float) (r7 I:double) \l0x01fe: INVOKE  \l  (r1 I:android.graphics.Canvas)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:float)\l android.graphics.Canvas.clipRect(float, float, float, float):boolean type: VIRTUAL \l0x0201: IGET  (r4 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.left double \l0x0203: ARITH  (r4 I:double) = (r4 I:double) \- (r23 I:double) \l0x0205: INVOKE  (r4 I:long) = (r4 I:double) java.lang.Math.round(double):long type: STATIC \l0x0209: CAST  (r1 I:int) = (int) (r4 I:long) \l0x020a: IGET  (r4 I:double) = (r2 I:org.mapsforge.core.model.Rectangle) org.mapsforge.core.model.Rectangle.top double \l0x020c: ARITH  (r4 I:double) = (r4 I:double) \- (r30 I:double) \l0x020e: INVOKE  (r4 I:long) = (r4 I:double) java.lang.Math.round(double):long type: STATIC \l0x0212: CAST  (r2 I:int) = (int) (r4 I:long) \l0x0213: IGET  (r4 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x0215: CAST  (r1 I:float) = (float) (r1 I:int) \l0x0216: CAST  (r2 I:float) = (float) (r2 I:int) \l0x0217: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0219: INVOKE  \l  (r4 I:android.graphics.Canvas)\l  (r3 I:android.graphics.Bitmap)\l  (r1 I:float)\l  (r2 I:float)\l  (r5 I:android.graphics.Paint)\l android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint):void type: VIRTUAL \l}"];
Node_27 [shape=record,label="{27\:\ 0x021c|0x021c: IGET  (r1 I:android.graphics.Canvas) = (r0 I:org.mapsforge.map.android.graphics.AndroidCanvas) org.mapsforge.map.android.graphics.AndroidCanvas.canvas android.graphics.Canvas \l0x021e: INVOKE  (r1 I:android.graphics.Canvas) android.graphics.Canvas.restore():void type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x0221|0x0221: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.android.graphics.AndroidCanvas.shadeBitmap((r32 'this' I:org.mapsforge.map.android.graphics.AndroidCanvas A[IMMUTABLE_TYPE, THIS]), (r33 I:org.mapsforge.core.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:org.mapsforge.core.model.Rectangle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r35 I:org.mapsforge.core.model.Rectangle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r36 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_21;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
}

