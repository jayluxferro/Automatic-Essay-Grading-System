digraph "CFG fororg.mapsforge.map.android.graphics.AndroidGraphicFactory.deleteFile(Ljava\/lang\/String;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.io.File) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory)\l org.mapsforge.map.android.graphics.AndroidGraphicFactory.svgCacheDir java.io.File \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0010 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.io.File) =  java.io.File \l0x0006: IGET  (r1 I:java.io.File) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory)\l org.mapsforge.map.android.graphics.AndroidGraphicFactory.svgCacheDir java.io.File \l0x0008: INVOKE  \l  (r0 I:java.io.File)\l  (r1 I:java.io.File)\l  (r3 I:java.lang.String)\l java.io.File.\<init\>(java.io.File, java.lang.String):void type: DIRECT \l0x000b: INVOKE  (r3 I:boolean) = (r0 I:java.io.File) java.io.File.delete():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: RETURN  (r3 I:boolean) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IGET  (r0 I:android.app.Application) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory)\l org.mapsforge.map.android.graphics.AndroidGraphicFactory.application android.app.Application \l0x0012: INVOKE  (r3 I:boolean) = (r0 I:android.app.Application), (r3 I:java.lang.String) android.app.Application.deleteFile(java.lang.String):boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.android.graphics.AndroidGraphicFactory.deleteFile((r2 'this' I:org.mapsforge.map.android.graphics.AndroidGraphicFactory A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

