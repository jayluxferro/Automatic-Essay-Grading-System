digraph "CFG fororg.mapsforge.map.android.graphics.AndroidGraphicFactory.platformSpecificSources(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: INVOKE  (r1 I:boolean) = (r3 I:java.lang.CharSequence) android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000d \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST_STR  (r3 I:java.lang.String) =  \"\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0010: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0013: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|SYNTHETIC\lSplitter:B:4:0x0017\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0017\l|0x0017: IGET  (r4 I:android.app.Application) = \l  (r2 I:org.mapsforge.map.android.graphics.AndroidGraphicFactory)\l org.mapsforge.map.android.graphics.AndroidGraphicFactory.application android.app.Application A[Catch:\{ IOException \-\> 0x0022 \}, TRY_ENTER]\l0x0019: INVOKE  (r4 I:android.content.res.AssetManager) = (r4 I:android.app.Application) android.app.Application.getAssets():android.content.res.AssetManager type: VIRTUAL A[Catch:\{ IOException \-\> 0x0022 \}]\l0x001d: INVOKE  (r4 I:java.io.InputStream) = \l  (r4 I:android.content.res.AssetManager)\l  (r3 I:java.lang.String)\l android.content.res.AssetManager.open(java.lang.String):java.io.InputStream type: VIRTUAL A[Catch:\{ IOException \-\> 0x0022 \}]\l0x0020: NOP   A[TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: RETURN  (r4 I:java.io.InputStream) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: NEW_INSTANCE  (r4 I:java.io.FileNotFoundException) =  java.io.FileNotFoundException \l0x0024: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0026: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"invalid resource: \" \l0x002b: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002e: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0031: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0035: INVOKE  \l  (r4 I:java.io.FileNotFoundException)\l  (r3 I:java.lang.String)\l java.io.FileNotFoundException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lExcHandler: IOException null\lSplitter:B:4:0x0017\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.io.InputStream org.mapsforge.map.android.graphics.AndroidGraphicFactory.platformSpecificSources((r2 'this' I:org.mapsforge.map.android.graphics.AndroidGraphicFactory A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_7 -> Node_9;
Node_8 -> Node_7;
}

