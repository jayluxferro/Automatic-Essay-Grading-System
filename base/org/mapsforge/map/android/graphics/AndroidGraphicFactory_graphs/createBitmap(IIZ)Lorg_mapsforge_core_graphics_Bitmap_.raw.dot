digraph "CFG fororg.mapsforge.map.android.graphics.AndroidGraphicFactory.createBitmap(IIZ)Lorg\/mapsforge\/core\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000a \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: NEW_INSTANCE  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap) =  org.mapsforge.map.android.graphics.AndroidBitmap \l0x0004: SGET  (r0 I:android.graphics.Bitmap$Config) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.TRANSPARENT_BITMAP android.graphics.Bitmap$Config \l0x0006: INVOKE  \l  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap)\l  (r2 I:int)\l  (r3 I:int)\l  (r0 I:android.graphics.Bitmap$Config)\l org.mapsforge.map.android.graphics.AndroidBitmap.\<init\>(int, int, android.graphics.Bitmap$Config):void type: DIRECT \l}"];
Node_2 [shape=record,label="{2\:\ 0x0009|0x0009: RETURN  (r4 I:org.mapsforge.core.graphics.Bitmap) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: NEW_INSTANCE  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap) =  org.mapsforge.map.android.graphics.AndroidBitmap \l0x000c: SGET  (r0 I:android.graphics.Bitmap$Config) =  org.mapsforge.map.android.graphics.AndroidGraphicFactory.NON_TRANSPARENT_BITMAP android.graphics.Bitmap$Config \l0x000e: INVOKE  \l  (r4 I:org.mapsforge.map.android.graphics.AndroidBitmap)\l  (r2 I:int)\l  (r3 I:int)\l  (r0 I:android.graphics.Bitmap$Config)\l org.mapsforge.map.android.graphics.AndroidBitmap.\<init\>(int, int, android.graphics.Bitmap$Config):void type: DIRECT \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: RETURN  (r4 I:org.mapsforge.core.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.graphics.Bitmap org.mapsforge.map.android.graphics.AndroidGraphicFactory.createBitmap((r1 'this' I:org.mapsforge.map.android.graphics.AndroidGraphicFactory A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_3 -> Node_4;
}

