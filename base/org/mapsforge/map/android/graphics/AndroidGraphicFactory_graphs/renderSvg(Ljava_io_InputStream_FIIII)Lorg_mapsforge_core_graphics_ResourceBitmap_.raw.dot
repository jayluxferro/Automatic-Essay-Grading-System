digraph "CFG fororg.mapsforge.map.android.graphics.AndroidGraphicFactory.renderSvg(Ljava\/io\/InputStream;FIIII)Lorg\/mapsforge\/core\/graphics\/ResourceBitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r7 I:org.mapsforge.map.android.graphics.AndroidSvgBitmap) =  org.mapsforge.map.android.graphics.AndroidSvgBitmap \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: INVOKE  \l  (r0 I:org.mapsforge.map.android.graphics.AndroidSvgBitmap)\l  (r1 I:java.io.InputStream)\l  (r2 I:int)\l  (r3 I:float)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l org.mapsforge.map.android.graphics.AndroidSvgBitmap.\<init\>(java.io.InputStream, int, float, int, int, int):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: RETURN  (r7 I:org.mapsforge.core.graphics.ResourceBitmap) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.graphics.ResourceBitmap org.mapsforge.map.android.graphics.AndroidGraphicFactory.renderSvg((r8 'this' I:org.mapsforge.map.android.graphics.AndroidGraphicFactory A[IMMUTABLE_TYPE, THIS]), (r9 I:java.io.InputStream A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

