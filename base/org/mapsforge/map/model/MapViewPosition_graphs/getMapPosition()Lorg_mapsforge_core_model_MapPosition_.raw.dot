digraph "CFG fororg.mapsforge.map.model.MapViewPosition.getMapPosition()Lorg\/mapsforge\/core\/model\/MapPosition;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.MapPosition) =  org.mapsforge.core.model.MapPosition A[Catch:\{ all \-\> 0x000e \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:org.mapsforge.core.model.LatLong) = (r3 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.getCenter():org.mapsforge.core.model.LatLong type: VIRTUAL A[Catch:\{ all \-\> 0x000e \}]\l0x0007: IGET  (r2 I:byte) = (r3 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.zoomLevel byte A[Catch:\{ all \-\> 0x000e \}]\l0x0009: INVOKE  \l  (r0 I:org.mapsforge.core.model.MapPosition)\l  (r1 I:org.mapsforge.core.model.LatLong)\l  (r2 I:byte)\l org.mapsforge.core.model.MapPosition.\<init\>(org.mapsforge.core.model.LatLong, byte):void type: DIRECT A[Catch:\{ all \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: RETURN  (r0 I:org.mapsforge.core.model.MapPosition) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x000e: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized org.mapsforge.core.model.MapPosition org.mapsforge.map.model.MapViewPosition.getMapPosition((r3 'this' I:org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

