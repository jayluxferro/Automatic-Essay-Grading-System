digraph "CFG fororg.mapsforge.map.model.MapViewPosition.setZoomLevelMin(B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r4 \< 0) goto L_0x0028\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r3)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r4 \> r3.zoomLevelMax) goto L_0x000e\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|r3.zoomLevelMin = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|monitor\-exit(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|notifyObservers()\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|SYNTHETIC\lSplitter:B:9:0x000e\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000e\l|java.lang.StringBuilder r1 = new java.lang.StringBuilder()     \/\/ Catch:\{  \}\lr1.append(\"zoomLevelMin must be \<= zoomLevelMax: \")\lr1.append(r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|REMOVE\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|REMOVE\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|REMOVE\l|throw r4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"zoomLevelMin must not be negative: \")\lr1.append(r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.MapViewPosition.setZoomLevelMin((r3v0 'this' org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS]), (r4v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

