digraph "CFG fororg.mapsforge.map.model.MapViewPosition.setZoomLevel(BZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r3 \< 0) goto L_0x000e\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r2)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|setZoomLevelInternal(r3, r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|monitor\-exit(r2)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|notifyObservers()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|LOOP_START\lREMOVE\lLOOP:0: B:7:0x000b\-\>B:13:0x000b\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|SYNTHETIC\lREMOVE\lSplitter:B:8:0x000c\l}"];
Node_9 [shape=record,label="{9\:\ ?|REMOVE\lSplitter:B:8:0x000c\l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|REMOVE\l|throw r3\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"zoomLevel must not be negative: \")\lr0.append(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|throw new java.lang.IllegalArgumentException(r0.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:7:0x000b\-\>B:13:0x000b\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.MapViewPosition.setZoomLevel((r2v0 'this' org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS]), (r3v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_14;
Node_9 -> Node_15;
Node_11 -> Node_12;
Node_13 -> Node_7;
Node_14 -> Node_10;
Node_15 -> Node_13;
}

