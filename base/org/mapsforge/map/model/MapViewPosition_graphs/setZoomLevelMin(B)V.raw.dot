digraph "CFG fororg.mapsforge.map.model.MapViewPosition.setZoomLevelMin(B)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:15:0x0028 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r0 I:byte) = (r3 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.zoomLevelMax byte A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r4 I:?[int, byte, short, char]) \> (r0 I:?[int, byte, short, char])  \-\> B:9:0x000e A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IPUT  (r4 I:byte), (r3 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.zoomLevelMin byte A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: INVOKE  (r3 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.notifyObservers():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|SYNTHETIC\lSplitter:B:9:0x000e\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000e\l|0x000e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x0025 \}, TRY_ENTER]\l0x0010: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0025 \}]\l0x0012: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0025 \}]\l0x0015: CONST_STR  (r2 I:java.lang.String) =  \"zoomLevelMin must be \<= zoomLevelMax: \" A[Catch:\{ all \-\> 0x0025 \}]\l0x0017: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l0x001d: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0025 \}]\l0x0021: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: THROW  (r0 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0025: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0025 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0025 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|0x0028: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x002f: CONST_STR  (r2 I:java.lang.String) =  \"zoomLevelMin must not be negative: \" \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0034: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x0037: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x003b: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.MapViewPosition.setZoomLevelMin((r3 'this' I:org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS]), (r4 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_15;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

