digraph "CFG fororg.mapsforge.map.model.MapViewPosition.setZoomLevel(BZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r3 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:11:0x000e \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: INVOKE  \l  (r2 I:org.mapsforge.map.model.MapViewPosition)\l  (r3 I:int)\l  (r4 I:boolean)\l org.mapsforge.map.model.MapViewPosition.setZoomLevelInternal(int, boolean):void type: DIRECT A[Catch:\{ all \-\> 0x000b \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000b \}, TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r2 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.notifyObservers():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x000b: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  \l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|SYNTHETIC\lSplitter:B:8:0x000c\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000c\l|0x000c: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000b \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|0x000d: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0010: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0012: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0015: CONST_STR  (r1 I:java.lang.String) =  \"zoomLevel must not be negative: \" \l0x0017: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001a: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0021: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.MapViewPosition.setZoomLevel((r2 'this' I:org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS]), (r3 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_11;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_7;
Node_9 -> Node_10;
Node_9 -> Node_7;
Node_11 -> Node_12;
}

