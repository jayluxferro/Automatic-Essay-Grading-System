digraph "CFG fororg.mapsforge.map.model.MapViewPosition.moveCenterAndZoom(DDBZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:byte) = (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.zoomLevel byte A[Catch:\{ all \-\> 0x0046 \}, TRY_ENTER]\l0x0003: IGET  (r1 I:org.mapsforge.map.model.DisplayModel) = (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0046 \}]\l0x0005: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x0046 \}]\l0x0009: INVOKE  (r0 I:long) = (r0 I:byte), (r1 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x000d: IGET  (r2 I:double) = (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.longitude double A[Catch:\{ all \-\> 0x0046 \}]\l0x000f: INVOKE  (r2 I:double) = (r2 I:double), (r0 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0013: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0046 \}]\l0x0014: ARITH  (r2 I:double) = (r2 I:double) \- (r7 I:double) A[Catch:\{ all \-\> 0x0046 \}]\l0x0015: IGET  (r7 I:double) = (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.latitude double A[Catch:\{ all \-\> 0x0046 \}]\l0x0017: INVOKE  (r7 I:double) = (r7 I:double), (r0 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x001b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0046 \}]\l0x001c: ARITH  (r7 I:double) = (r7 I:double) \- (r9 I:double) A[Catch:\{ all \-\> 0x0046 \}]\l0x001d: CONST  (r9 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0046 \}]\l0x001f: INVOKE  (r2 I:double) = (r9 I:double), (r2 I:double) java.lang.Math.max(double, double):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0023: CAST  (r4 I:double) = (double) (r0 I:long) A[Catch:\{ all \-\> 0x0046 \}]\l0x0024: INVOKE  (r2 I:double) = (r2 I:double), (r4 I:double) java.lang.Math.min(double, double):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0028: INVOKE  (r7 I:double) = (r9 I:double), (r7 I:double) java.lang.Math.max(double, double):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x002c: INVOKE  (r7 I:double) = (r7 I:double), (r4 I:double) java.lang.Math.min(double, double):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0030: INVOKE  (r7 I:double) = (r7 I:double), (r0 I:long) org.mapsforge.core.util.MercatorProjection.pixelYToLatitude(double, long):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0034: INVOKE  (r9 I:double) = (r2 I:double), (r0 I:long) org.mapsforge.core.util.MercatorProjection.pixelXToLongitude(double, long):double type: STATIC A[Catch:\{ all \-\> 0x0046 \}]\l0x0038: INVOKE  \l  (r6 I:org.mapsforge.map.model.MapViewPosition)\l  (r7 I:double)\l  (r9 I:double)\l org.mapsforge.map.model.MapViewPosition.setCenterInternal(double, double):void type: DIRECT A[Catch:\{ all \-\> 0x0046 \}]\l0x003b: IGET  (r7 I:byte) = (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.zoomLevel byte A[Catch:\{ all \-\> 0x0046 \}]\l0x003d: ARITH  (r7 I:int) = (r7 I:int) + (r11 I:int) A[Catch:\{ all \-\> 0x0046 \}]\l0x003e: INVOKE  \l  (r6 I:org.mapsforge.map.model.MapViewPosition)\l  (r7 I:int)\l  (r12 I:boolean)\l org.mapsforge.map.model.MapViewPosition.setZoomLevelInternal(int, boolean):void type: DIRECT A[Catch:\{ all \-\> 0x0046 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0041|0x0041: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0046 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0042|0x0042: INVOKE  (r6 I:org.mapsforge.map.model.MapViewPosition) org.mapsforge.map.model.MapViewPosition.notifyObservers():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0045|0x0045: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0046|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0046: MOVE_EXCEPTION  (r7 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|SYNTHETIC\lSplitter:B:7:0x0047\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0047\l|0x0047: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0046 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: THROW  (r7 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.MapViewPosition.moveCenterAndZoom((r6 'this' I:org.mapsforge.map.model.MapViewPosition A[IMMUTABLE_TYPE, THIS]), (r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_6;
Node_8 -> Node_9;
Node_8 -> Node_6;
}

