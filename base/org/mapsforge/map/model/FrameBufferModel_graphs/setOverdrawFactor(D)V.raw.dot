digraph "CFG fororg.mapsforge.map.model.FrameBufferModel.setOverdrawFactor(D)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_G  (r0 I:int) = (r4 I:double), (r0 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|SYNTHETIC\lSplitter:B:3:0x0007\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0007\l|0x0007: IPUT  \l  (r4 I:double)\l  (r3 I:org.mapsforge.map.model.FrameBufferModel)\l org.mapsforge.map.model.FrameBufferModel.overdrawFactor double A[Catch:\{ all \-\> 0x000e \}, TRY_ENTER]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000e \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  (r3 I:org.mapsforge.map.model.FrameBufferModel) org.mapsforge.map.model.FrameBufferModel.notifyObservers():void type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|ExcHandler: all null\lSplitter:B:3:0x0007\l|0x000e: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|SYNTHETIC\lSplitter:B:9:0x000f\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x000f\l|0x000f: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x000e \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0010|0x0010: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0013: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0015: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"overdrawFactor must be \> 0: \" \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:double) java.lang.StringBuilder.append(double):java.lang.StringBuilder type: VIRTUAL \l0x0020: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0024: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r4 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.FrameBufferModel.setOverdrawFactor((r3 'this' I:org.mapsforge.map.model.FrameBufferModel A[IMMUTABLE_TYPE, THIS]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_10 -> Node_8;
Node_12 -> Node_13;
}

