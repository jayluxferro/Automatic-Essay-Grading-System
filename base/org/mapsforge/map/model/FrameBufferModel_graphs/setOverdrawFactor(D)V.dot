digraph "CFG fororg.mapsforge.map.model.FrameBufferModel.setOverdrawFactor(D)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|if ((r4 \> 0.0d ? 1 : (r4 == 0.0d ? 0 : \-1)) \<= 0) goto L_0x0011\l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|monitor\-enter(r3)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ ?|r3.overdrawFactor = r4\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|monitor\-exit(r3)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|notifyObservers()\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|LOOP_START\lREMOVE\lLOOP:0: B:8:0x000e\-\>B:14:0x000e\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|SYNTHETIC\lREMOVE\lSplitter:B:9:0x000f\l}"];
Node_10 [shape=record,label="{10\:\ ?|REMOVE\lSplitter:B:9:0x000f\l}"];
Node_11 [shape=record,label="{11\:\ 0x0010|REMOVE\l|throw r4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"overdrawFactor must be \> 0: \")\lr1.append(r4)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:0: B:8:0x000e\-\>B:14:0x000e\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.model.FrameBufferModel.setOverdrawFactor((r3v0 'this' org.mapsforge.map.model.FrameBufferModel A[IMMUTABLE_TYPE, THIS]), (r4v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_15;
Node_10 -> Node_16;
Node_12 -> Node_13;
Node_14 -> Node_8;
Node_15 -> Node_11;
Node_16 -> Node_14;
}

