digraph "CFG fororg.mapsforge.map.view.FrameBuffer.setDimension(Lorg\/mapsforge\/core\/model\/Dimension;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:org.mapsforge.core.model.Dimension) = (r4 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.dimension org.mapsforge.core.model.Dimension A[Catch:\{ all \-\> 0x0037 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f A[Catch:\{ all \-\> 0x0037 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:org.mapsforge.core.model.Dimension) = (r4 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.dimension org.mapsforge.core.model.Dimension A[Catch:\{ all \-\> 0x0037 \}]\l0x0007: INVOKE  (r0 I:boolean) = \l  (r0 I:org.mapsforge.core.model.Dimension)\l  (r5 I:java.lang.Object)\l org.mapsforge.core.model.Dimension.equals(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0037 \}]\l0x000a: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|SYNTHETIC\lSplitter:B:8:0x000f\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000f\l|0x000f: IPUT  \l  (r5 I:org.mapsforge.core.model.Dimension)\l  (r4 I:org.mapsforge.map.view.FrameBuffer)\l org.mapsforge.map.view.FrameBuffer.dimension org.mapsforge.core.model.Dimension A[Catch:\{ all \-\> 0x0037 \}, TRY_ENTER]\l0x0011: INVOKE  (r4 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.destroyBitmaps():void type: DIRECT A[Catch:\{ all \-\> 0x0037 \}]\l0x0014: IGET  (r0 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.width int A[Catch:\{ all \-\> 0x0037 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0035 A[Catch:\{ all \-\> 0x0037 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: IGET  (r0 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.height int A[Catch:\{ all \-\> 0x0037 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:14:0x0035 A[Catch:\{ all \-\> 0x0037 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: IGET  (r0 I:org.mapsforge.core.graphics.GraphicFactory) = (r4 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.graphicFactory org.mapsforge.core.graphics.GraphicFactory A[Catch:\{ all \-\> 0x0037 \}]\l0x001e: IGET  (r1 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.width int A[Catch:\{ all \-\> 0x0037 \}]\l0x0020: IGET  (r2 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.height int A[Catch:\{ all \-\> 0x0037 \}]\l0x0022: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0037 \}]\l0x0023: INVOKE  (r0 I:org.mapsforge.core.graphics.Bitmap) = \l  (r0 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:boolean)\l org.mapsforge.core.graphics.GraphicFactory.createBitmap(int, int, boolean):org.mapsforge.core.graphics.Bitmap type: INTERFACE A[Catch:\{ all \-\> 0x0037 \}]\l0x0027: IPUT  \l  (r0 I:org.mapsforge.core.graphics.Bitmap)\l  (r4 I:org.mapsforge.map.view.FrameBuffer)\l org.mapsforge.map.view.FrameBuffer.odBitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x0037 \}]\l0x0029: IGET  (r0 I:org.mapsforge.core.graphics.GraphicFactory) = (r4 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.graphicFactory org.mapsforge.core.graphics.GraphicFactory A[Catch:\{ all \-\> 0x0037 \}]\l0x002b: IGET  (r1 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.width int A[Catch:\{ all \-\> 0x0037 \}]\l0x002d: IGET  (r5 I:int) = (r5 I:org.mapsforge.core.model.Dimension) org.mapsforge.core.model.Dimension.height int A[Catch:\{ all \-\> 0x0037 \}]\l0x002f: INVOKE  (r5 I:org.mapsforge.core.graphics.Bitmap) = \l  (r0 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r1 I:int)\l  (r5 I:int)\l  (r3 I:boolean)\l org.mapsforge.core.graphics.GraphicFactory.createBitmap(int, int, boolean):org.mapsforge.core.graphics.Bitmap type: INTERFACE A[Catch:\{ all \-\> 0x0037 \}]\l0x0033: IPUT  \l  (r5 I:org.mapsforge.core.graphics.Bitmap)\l  (r4 I:org.mapsforge.map.view.FrameBuffer)\l org.mapsforge.map.view.FrameBuffer.lmBitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x0037 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|0x0035: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|0x0036: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0037: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|0x0039: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.view.FrameBuffer.setDimension((r4 'this' I:org.mapsforge.map.view.FrameBuffer A[IMMUTABLE_TYPE, THIS]), (r5 I:org.mapsforge.core.model.Dimension A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_16;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_16;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

