digraph "CFG fororg.mapsforge.map.view.FrameBuffer.adjustMatrix(FFFLorg\/mapsforge\/core\/model\/Dimension;FF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:org.mapsforge.core.model.Dimension) = (r1 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.dimension org.mapsforge.core.model.Dimension A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|SYNTHETIC\lSplitter:B:6:0x0007\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x0007\l|0x0007: IGET  (r0 I:org.mapsforge.core.graphics.Matrix) = (r1 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.matrix org.mapsforge.core.graphics.Matrix A[Catch:\{ all \-\> 0x0022 \}, TRY_ENTER]\l0x0009: INVOKE  (r0 I:org.mapsforge.core.graphics.Matrix) org.mapsforge.core.graphics.Matrix.reset():void type: INTERFACE A[Catch:\{ all \-\> 0x0022 \}]\l0x000c: INVOKE  \l  (r1 I:org.mapsforge.map.view.FrameBuffer)\l  (r5 I:org.mapsforge.core.model.Dimension)\l org.mapsforge.map.view.FrameBuffer.centerFrameBufferToMapView(org.mapsforge.core.model.Dimension):void type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}]\l0x000f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0022 \}]\l0x0010: CMP_L  (r0 I:int) = (r6 I:float), (r5 I:float) A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001d A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: CMP_L  (r5 I:int) = (r7 I:float), (r5 I:float) A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001d A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: IGET  (r5 I:org.mapsforge.core.graphics.Matrix) = (r1 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.matrix org.mapsforge.core.graphics.Matrix A[Catch:\{ all \-\> 0x0022 \}]\l0x001a: INVOKE  \l  (r5 I:org.mapsforge.core.graphics.Matrix)\l  (r2 I:float)\l  (r3 I:float)\l org.mapsforge.core.graphics.Matrix.translate(float, float):void type: INTERFACE A[Catch:\{ all \-\> 0x0022 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|0x001d: INVOKE  \l  (r1 I:org.mapsforge.map.view.FrameBuffer)\l  (r4 I:float)\l  (r6 I:float)\l  (r7 I:float)\l org.mapsforge.map.view.FrameBuffer.scale(float, float, float):void type: VIRTUAL A[Catch:\{ all \-\> 0x0022 \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0022: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|0x0024: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.view.FrameBuffer.adjustMatrix((r1 'this' I:org.mapsforge.map.view.FrameBuffer A[IMMUTABLE_TYPE, THIS]), (r2 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.mapsforge.core.model.Dimension A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

