digraph "CFG fororg.mapsforge.map.view.FpsCounter.draw(Lorg\/mapsforge\/core\/graphics\/GraphicContext;)V" {
subgraph cluster_Region_1299580540 {
label = "R(1:(1:(3:3|(1:5)|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_780750175 {
label = "R(1:(3:3|(1:5)|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_133334641 {
label = "IF [B:1:0x0002] THEN: R(3:3|(1:5)|6) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r8.visible != false) goto L_0x0005\l}"];
subgraph cluster_Region_887765890 {
label = "R(3:3|(1:5)|6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|long long r0 = java.lang.System.nanoTime()\llong long r2 = r0 \- r8.lastTime\l}"];
subgraph cluster_IfRegion_594460400 {
label = "IF [B:4:0x0011] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r2 \> ONE_SECOND) goto L_0x0013\l}"];
subgraph cluster_Region_261356318 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|r8.fps = java.lang.String.valueOf(java.lang.Math.round(((float) (((long) r8.frameCounter) * ONE_SECOND)) \/ ((float) r2)))\lr8.lastTime = r0\lr8.frameCounter = 0\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x002c|int int r0 = (int) (r8.displayModel.getScaleFactor() * 20.0f)\lint int r1 = (int) (r8.displayModel.getScaleFactor() * 40.0f)\lr9.drawText(r8.fps, r0, r1, r8.paintBack)\lr9.drawText(r8.fps, r0, r1, r8.paintFront)\lr8.frameCounter++\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0056}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.view.FpsCounter.draw((r8v0 'this' org.mapsforge.map.view.FpsCounter A[IMMUTABLE_TYPE, THIS]), (r9v0 org.mapsforge.core.graphics.GraphicContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_1;
}

