digraph "CFG fororg.mapsforge.map.view.FrameBufferHA2.swapBitmaps()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.view.FrameBufferBitmap$Lock) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.allowSwap org.mapsforge.map.view.FrameBufferBitmap$Lock \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:org.mapsforge.map.view.FrameBufferBitmap$Lock) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.allowSwap org.mapsforge.map.view.FrameBufferBitmap$Lock A[Catch:\{ all \-\> 0x0020 \}, TRY_ENTER]\l0x0005: INVOKE  (r1 I:boolean) = (r1 I:org.mapsforge.map.view.FrameBufferBitmap$Lock) org.mapsforge.map.view.FrameBufferBitmap.Lock.isEnabled():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001e A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IGET  (r1 I:org.mapsforge.map.view.FrameBufferBitmap) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.odBitmap org.mapsforge.map.view.FrameBufferBitmap A[Catch:\{ all \-\> 0x0020 \}]\l0x000d: IGET  (r2 I:org.mapsforge.map.view.FrameBufferBitmap) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.lmBitmap org.mapsforge.map.view.FrameBufferBitmap A[Catch:\{ all \-\> 0x0020 \}]\l0x000f: INVOKE  \l  (r1 I:org.mapsforge.map.view.FrameBufferBitmap)\l  (r2 I:org.mapsforge.map.view.FrameBufferBitmap)\l org.mapsforge.map.view.FrameBufferBitmap.swap(org.mapsforge.map.view.FrameBufferBitmap, org.mapsforge.map.view.FrameBufferBitmap):void type: STATIC A[Catch:\{ all \-\> 0x0020 \}]\l0x0012: IGET  (r1 I:org.mapsforge.map.model.FrameBufferModel) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.frameBufferModel org.mapsforge.map.model.FrameBufferModel A[Catch:\{ all \-\> 0x0020 \}]\l0x0014: IGET  (r2 I:org.mapsforge.core.model.MapPosition) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.lmMapPosition org.mapsforge.core.model.MapPosition A[Catch:\{ all \-\> 0x0020 \}]\l0x0016: INVOKE  \l  (r1 I:org.mapsforge.map.model.FrameBufferModel)\l  (r2 I:org.mapsforge.core.model.MapPosition)\l org.mapsforge.map.model.FrameBufferModel.setMapPosition(org.mapsforge.core.model.MapPosition):void type: VIRTUAL A[Catch:\{ all \-\> 0x0020 \}]\l0x0019: IGET  (r1 I:org.mapsforge.map.view.FrameBufferBitmap$Lock) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.allowSwap org.mapsforge.map.view.FrameBufferBitmap$Lock A[Catch:\{ all \-\> 0x0020 \}]\l0x001b: INVOKE  (r1 I:org.mapsforge.map.view.FrameBufferBitmap$Lock) org.mapsforge.map.view.FrameBufferBitmap.Lock.disable():void type: VIRTUAL A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: RETURN   A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x0020: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0020 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0020 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.view.FrameBufferHA2.swapBitmaps((r3 'this' I:org.mapsforge.map.view.FrameBufferHA2 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

