digraph "CFG fororg.mapsforge.map.view.FrameBufferHA2.adjustMatrix(FFFLorg\/mapsforge\/core\/model\/Dimension;FF)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.core.graphics.Matrix r0 = r2.matrix\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r2.dimension != null) goto L_0x0009\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|monitor\-exit(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|RETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|r2.matrix.reset()\lcenterFrameBufferToMapView(r6)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|if ((r7 \> 0.0f ? 1 : (r7 == 0.0f ? 0 : \-1)) != 0) goto L_0x001f\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016}"];
Node_10 [shape=record,label="{10\:\ 0x0018|if ((r8 \> 0.0f ? 1 : (r8 == 0.0f ? 0 : \-1)) != 0) goto L_0x001f\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|r2.matrix.translate(r3, r4)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|scale(r5, r7, r8)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|monitor\-exit(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|REMOVE\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|REMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.view.FrameBufferHA2.adjustMatrix((r2v0 'this' org.mapsforge.map.view.FrameBufferHA2 A[IMMUTABLE_TYPE, THIS]), (r3v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 org.mapsforge.core.model.Dimension A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

