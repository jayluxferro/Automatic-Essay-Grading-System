digraph "CFG fororg.mapsforge.map.view.FrameBufferHA2.draw(Lorg\/mapsforge\/core\/graphics\/GraphicContext;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.model.DisplayModel) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.displayModel org.mapsforge.map.model.DisplayModel \l0x0002: INVOKE  (r0 I:int) = (r0 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getBackgroundColor():int type: VIRTUAL \l0x0006: INVOKE  \l  (r4 I:org.mapsforge.core.graphics.GraphicContext)\l  (r0 I:int)\l org.mapsforge.core.graphics.GraphicContext.fillColor(int):void type: INTERFACE \l0x0009: INVOKE  (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.swapBitmaps():void type: DIRECT \l0x000c: IGET  (r0 I:org.mapsforge.core.graphics.Matrix) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.matrix org.mapsforge.core.graphics.Matrix \l}"];
Node_1 [shape=record,label="{1\:\ 0x000e|0x000e: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|SYNTHETIC\lSplitter:B:2:0x000f\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x000f\l|0x000f: IGET  (r1 I:org.mapsforge.map.view.FrameBufferBitmap) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.odBitmap org.mapsforge.map.view.FrameBufferBitmap A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER]\l0x0011: INVOKE  (r1 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.view.FrameBufferBitmap) org.mapsforge.map.view.FrameBufferBitmap.lock():org.mapsforge.core.graphics.Bitmap type: VIRTUAL A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|0x0017: IGET  (r2 I:org.mapsforge.core.graphics.Matrix) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.matrix org.mapsforge.core.graphics.Matrix A[Catch:\{ all \-\> 0x0023 \}]\l0x0019: INVOKE  \l  (r4 I:org.mapsforge.core.graphics.GraphicContext)\l  (r1 I:org.mapsforge.core.graphics.Bitmap)\l  (r2 I:org.mapsforge.core.graphics.Matrix)\l org.mapsforge.core.graphics.GraphicContext.drawBitmap(org.mapsforge.core.graphics.Bitmap, org.mapsforge.core.graphics.Matrix):void type: INTERFACE A[Catch:\{ all \-\> 0x0023 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IGET  (r4 I:org.mapsforge.map.view.FrameBufferBitmap) = (r3 I:org.mapsforge.map.view.FrameBufferHA2) org.mapsforge.map.view.FrameBufferHA2.odBitmap org.mapsforge.map.view.FrameBufferBitmap \l0x001f: INVOKE  (r4 I:org.mapsforge.map.view.FrameBufferBitmap) org.mapsforge.map.view.FrameBufferBitmap.release():void type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|ExcHandler: all null\lSplitter:B:2:0x000f\l|0x0023: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|SYNTHETIC\lSplitter:B:10:0x0024\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0024\l|0x0024: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0023 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.view.FrameBufferHA2.draw((r3 'this' I:org.mapsforge.map.view.FrameBufferHA2 A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.core.graphics.GraphicContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_9;
}

