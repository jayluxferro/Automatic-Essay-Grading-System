digraph "CFG fororg.mapsforge.map.view.FrameBufferHA.lockLmBitmap()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.lang.Object r0 = r3.lmBitmapLock\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?}"];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r3.lmBitmap == null) goto L_0x0018\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007}"];
Node_6 [shape=record,label="{6\:\ 0x0009|if (r3.allowBitmapSwap == false) goto L_0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|SYNTHETIC\lSplitter:B:7:0x000b\l}"];
Node_8 [shape=record,label="{8\:\ ?|Catch:\{ InterruptedException \-\> 0x0011 \}\lSplitter:B:7:0x000b\l|r3.lmBitmapLock.wait()     \/\/ Catch:\{ InterruptedException \-\> 0x0011 \}\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|SYNTHETIC\lSplitter:B:9:0x0011\l}"];
Node_10 [shape=record,label="{10\:\ ?|Splitter:B:9:0x0011\l|LOGGER.warning(\"FrameBufferHA interrupted\")\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|r3.allowBitmapSwap = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|monitor\-exit(r0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|REMOVE\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|REMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x001f|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.view.FrameBufferHA.lockLmBitmap((r3v0 'this' org.mapsforge.map.view.FrameBufferHA A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

