digraph "CFG fororg.mapsforge.map.view.FrameBufferHA.lockLmBitmap()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.Object) = (r3 I:org.mapsforge.map.view.FrameBufferHA) org.mapsforge.map.view.FrameBufferHA.lmBitmapLock java.lang.Object \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\lSplitter:B:2:0x0003\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0003\l|0x0003: IGET  (r1 I:org.mapsforge.core.graphics.Bitmap) = (r3 I:org.mapsforge.map.view.FrameBufferHA) org.mapsforge.map.view.FrameBufferHA.lmBitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IGET  (r1 I:boolean) = (r3 I:org.mapsforge.map.view.FrameBufferHA) org.mapsforge.map.view.FrameBufferHA.allowBitmapSwap boolean A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|SYNTHETIC\lSplitter:B:7:0x000b\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000b\l|0x000b: IGET  (r1 I:java.lang.Object) = (r3 I:org.mapsforge.map.view.FrameBufferHA) org.mapsforge.map.view.FrameBufferHA.lmBitmapLock java.lang.Object A[Catch:\{ InterruptedException \-\> 0x0011 \}, TRY_ENTER]\l0x000d: INVOKE  (r1 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0011 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0011|SYNTHETIC\lSplitter:B:10:0x0011\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0011\l|0x0011: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.view.FrameBufferHA.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x001d \}, ExcHandler: InterruptedException null, TRY_ENTER]\l0x0013: CONST_STR  (r2 I:java.lang.String) =  \"FrameBufferHA interrupted\" A[Catch:\{ all \-\> 0x001d \}]\l0x0015: INVOKE  (r1 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x001d \}]\l0x0019: IPUT  (r1 I:boolean), (r3 I:org.mapsforge.map.view.FrameBufferHA) org.mapsforge.map.view.FrameBufferHA.allowBitmapSwap boolean A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: RETURN   A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|ExcHandler: all null\lSplitter:B:2:0x0003\l|0x001d: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|0x001e: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|0x001f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.view.FrameBufferHA.lockLmBitmap((r3 'this' I:org.mapsforge.map.view.FrameBufferHA A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_12;
Node_10 -> Node_11;
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

