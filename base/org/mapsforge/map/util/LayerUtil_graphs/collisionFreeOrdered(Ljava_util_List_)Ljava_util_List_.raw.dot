digraph "CFG fororg.mapsforge.map.util.LayerUtil.collisionFreeOrdered(Ljava\/util\/List;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.util.Comparator) =  java.util.Collections.reverseOrder():java.util.Comparator type: STATIC \l0x0004: INVOKE  (r5 I:java.util.List), (r0 I:java.util.Comparator) java.util.Collections.sort(java.util.List, java.util.Comparator):void type: STATIC \l0x0007: NEW_INSTANCE  (r0 I:java.util.LinkedList) =  java.util.LinkedList \l0x0009: INVOKE  (r0 I:java.util.LinkedList) java.util.LinkedList.\<init\>():void type: DIRECT \l0x000c: INVOKE  (r5 I:java.util.Iterator) = (r5 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0010|0x0010: INVOKE  (r1 I:boolean) = (r5 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|0x0014: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.Object) = (r5 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x001a: CHECK_CAST  (r1 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r1 I:?[OBJECT, ARRAY]) \l0x001c: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x001d: INVOKE  (r3 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002b: CHECK_CAST  (r4 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r4 I:?[OBJECT, ARRAY]) \l0x002d: INVOKE  (r4 I:boolean) = \l  (r4 I:org.mapsforge.core.mapelements.MapElementContainer)\l  (r1 I:org.mapsforge.core.mapelements.MapElementContainer)\l org.mapsforge.core.mapelements.MapElementContainer.clashesWith(org.mapsforge.core.mapelements.MapElementContainer):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0010 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: INVOKE  (r0 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: RETURN  \l  (r0 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>)\l \l}"];
MethodNode[shape=record,label="{public static java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\> org.mapsforge.map.util.LayerUtil.collisionFreeOrdered((r5 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;, \>;), Ljava\/util\/List\<, Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_1;
}

