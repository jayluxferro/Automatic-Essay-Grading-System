digraph "CFG fororg.mapsforge.map.util.MapViewProjection.toPixels(Lorg\/mapsforge\/core\/model\/LatLong;)Lorg\/mapsforge\/core\/model\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x006f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IGET  (r1 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x0005: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getWidth():int type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:12:0x006f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IGET  (r1 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x000d: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getHeight():int type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r1 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IGET  (r1 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x0016: INVOKE  (r1 I:org.mapsforge.map.model.Model) = (r1 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getModel():org.mapsforge.map.model.Model type: INTERFACE \l0x001a: IGET  (r1 I:org.mapsforge.map.model.IMapViewPosition) = (r1 I:org.mapsforge.map.model.Model) org.mapsforge.map.model.Model.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l0x001c: INVOKE  (r1 I:org.mapsforge.core.model.MapPosition) = (r1 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getMapPosition():org.mapsforge.core.model.MapPosition type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: RETURN  (r0 I:org.mapsforge.core.model.Point) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IGET  (r0 I:org.mapsforge.core.model.LatLong) = (r1 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.latLong org.mapsforge.core.model.LatLong \l0x0025: IGET  (r1 I:byte) = (r1 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l0x0027: IGET  (r2 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x0029: INVOKE  (r2 I:org.mapsforge.map.model.Model) = (r2 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getModel():org.mapsforge.map.model.Model type: INTERFACE \l0x002d: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r2 I:org.mapsforge.map.model.Model) org.mapsforge.map.model.Model.displayModel org.mapsforge.map.model.DisplayModel \l0x002f: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x0033: INVOKE  (r1 I:long) = (r1 I:byte), (r2 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC \l0x0037: IGET  (r3 I:double) = (r0 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x0039: INVOKE  (r3 I:double) = (r3 I:double), (r1 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x003d: IGET  (r5 I:double) = (r0 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x003f: INVOKE  (r5 I:double) = (r5 I:double), (r1 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0043: IGET  (r0 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x0045: INVOKE  (r0 I:int) = (r0 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getWidth():int type: INTERFACE \l0x0049: ARITH  (r0 I:int) = (r0 I:int) \>\> (1 int) \l0x004b: CAST  (r7 I:double) = (double) (r0 I:int) \l0x004c: ARITH  (r3 I:double) = (r3 I:double) \- (r7 I:double) \l0x004d: IGET  (r0 I:org.mapsforge.map.view.MapView) = (r9 I:org.mapsforge.map.util.MapViewProjection) org.mapsforge.map.util.MapViewProjection.mapView org.mapsforge.map.view.MapView \l0x004f: INVOKE  (r0 I:int) = (r0 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getHeight():int type: INTERFACE \l0x0053: ARITH  (r0 I:int) = (r0 I:int) \>\> (1 int) \l0x0055: CAST  (r7 I:double) = (double) (r0 I:int) \l0x0056: ARITH  (r5 I:double) = (r5 I:double) \- (r7 I:double) \l0x0057: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Point) =  org.mapsforge.core.model.Point \l0x0059: IGET  (r7 I:double) = (r10 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x005b: INVOKE  (r7 I:double) = (r7 I:double), (r1 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x005f: ARITH  (r7 I:double) = (r7 I:double) \- (r3 I:double) \l0x0060: CAST  (r3 I:int) = (int) (r7 I:double) \l0x0061: CAST  (r3 I:double) = (double) (r3 I:int) \l0x0062: IGET  (r7 I:double) = (r10 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0064: INVOKE  (r1 I:double) = (r7 I:double), (r1 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0068: ARITH  (r1 I:double) = (r1 I:double) \- (r5 I:double) \l0x0069: CAST  (r10 I:int) = (int) (r1 I:double) \l0x006a: CAST  (r1 I:double) = (double) (r10 I:int) \l0x006b: INVOKE  \l  (r0 I:org.mapsforge.core.model.Point)\l  (r3 I:double)\l  (r1 I:double)\l org.mapsforge.core.model.Point.\<init\>(double, double):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x006e|0x006e: RETURN  (r0 I:org.mapsforge.core.model.Point) \l}"];
Node_12 [shape=record,label="{12\:\ 0x006f|0x006f: RETURN  (r0 I:org.mapsforge.core.model.Point) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.Point org.mapsforge.map.util.MapViewProjection.toPixels((r9 'this' I:org.mapsforge.map.util.MapViewProjection A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.core.model.LatLong A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_12[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_10 -> Node_11;
}

