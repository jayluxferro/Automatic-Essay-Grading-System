digraph "CFG fororg.mapsforge.map.util.PausableThread.ThreadPriority.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"ABOVE_NORMAL\" \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: CONST  (r3 I:?[int, float, short, byte, char]) = (7 ?[int, float, short, byte, char]) \l0x0006: INVOKE  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority)\l  (r1 I:java.lang.String)\l  (r2 I:int)\l  (r3 I:int)\l org.mapsforge.map.util.PausableThread.ThreadPriority.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0009: SPUT  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.ABOVE_NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x000b: NEW_INSTANCE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread$ThreadPriority \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"BELOW_NORMAL\" \l0x000f: CONST  (r3 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x0010: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority)\l  (r1 I:java.lang.String)\l  (r4 I:int)\l  (r3 I:int)\l org.mapsforge.map.util.PausableThread.ThreadPriority.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0014: SPUT  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.BELOW_NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0016: NEW_INSTANCE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"HIGHEST\" \l0x001a: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x001b: CONST  (r6 I:?[int, float, short, byte, char]) = (10 ?[int, float, short, byte, char]) \l0x001d: INVOKE  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority)\l  (r1 I:java.lang.String)\l  (r5 I:int)\l  (r6 I:int)\l org.mapsforge.map.util.PausableThread.ThreadPriority.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0020: SPUT  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.HIGHEST org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0022: NEW_INSTANCE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"LOWEST\" \l0x0026: INVOKE  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority)\l  (r1 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:int)\l org.mapsforge.map.util.PausableThread.ThreadPriority.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0029: SPUT  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.LOWEST org.mapsforge.map.util.PausableThread$ThreadPriority \l0x002b: NEW_INSTANCE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread$ThreadPriority \l0x002d: CONST_STR  (r1 I:java.lang.String) =  \"NORMAL\" \l0x002f: CONST  (r6 I:?[int, float, short, byte, char]) = (5 ?[int, float, short, byte, char]) \l0x0030: CONST  (r7 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x0031: INVOKE  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority)\l  (r1 I:java.lang.String)\l  (r7 I:int)\l  (r6 I:int)\l org.mapsforge.map.util.PausableThread.ThreadPriority.\<init\>(java.lang.String, int, int):void type: DIRECT \l0x0034: SPUT  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0036: NEW_ARRAY  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority[]) = (r6 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.map.util.PausableThread$ThreadPriority[] \l0x0038: SGET  (r1 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread.ThreadPriority.ABOVE_NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x003a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x003c: SGET  (r1 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread.ThreadPriority.BELOW_NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x003e: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r4 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0040: SGET  (r1 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread.ThreadPriority.HIGHEST org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0042: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r5 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0044: SGET  (r1 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread.ThreadPriority.LOWEST org.mapsforge.map.util.PausableThread$ThreadPriority \l0x0046: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r3 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x0048: SGET  (r1 I:org.mapsforge.map.util.PausableThread$ThreadPriority) =  org.mapsforge.map.util.PausableThread.ThreadPriority.NORMAL org.mapsforge.map.util.PausableThread$ThreadPriority \l0x004a: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r7 I:?[int, short, byte, char])\l  (r1 I:?[OBJECT, ARRAY])\l \l0x004c: SPUT  \l  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority[])\l org.mapsforge.map.util.PausableThread.ThreadPriority.$VALUES org.mapsforge.map.util.PausableThread$ThreadPriority[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x004e|0x004e: RETURN   \l}"];
MethodNode[shape=record,label="{static void org.mapsforge.map.util.PausableThread.ThreadPriority.\<clinit\>() }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

