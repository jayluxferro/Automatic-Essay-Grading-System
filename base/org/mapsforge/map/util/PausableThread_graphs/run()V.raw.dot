digraph "CFG fororg.mapsforge.map.util.PausableThread.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Class) = (r1 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0004: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Class) java.lang.Class.getSimpleName():java.lang.String type: VIRTUAL \l0x0008: INVOKE  \l  (r1 I:org.mapsforge.map.util.PausableThread)\l  (r0 I:java.lang.String)\l org.mapsforge.map.util.PausableThread.setName(java.lang.String):void type: VIRTUAL \l0x000b: INVOKE  (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.getThreadPriority():org.mapsforge.map.util.PausableThread$ThreadPriority type: VIRTUAL \l0x000f: IGET  (r0 I:int) = (r0 I:org.mapsforge.map.util.PausableThread$ThreadPriority) org.mapsforge.map.util.PausableThread.ThreadPriority.priority int \l0x0011: INVOKE  (r1 I:org.mapsforge.map.util.PausableThread), (r0 I:int) org.mapsforge.map.util.PausableThread.setPriority(int):void type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.shouldStop boolean \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_3 [shape=record,label="{3\:\ 0x0018|0x0018: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.isInterrupted():boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.waitForWork boolean \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x006d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.hasWork():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x006d \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|0x0028: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|SYNTHETIC\lSplitter:B:10:0x0029\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0029\l|0x0029: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.shouldStop boolean A[Catch:\{ all \-\> 0x006a \}, TRY_ENTER]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.isInterrupted():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|0x0031: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|0x0033: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.shouldPause boolean A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|0x0035: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003d A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.hasWork():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x006a \}]\l0x003a: NOP   A[TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004c \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|SYNTHETIC\lSplitter:B:19:0x003d\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x003d\l|0x003d: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.shouldPause boolean A[Catch:\{ InterruptedException \-\> 0x0048 \}, TRY_ENTER]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|0x003f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0044 A[Catch:\{ InterruptedException \-\> 0x0048 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0041|0x0041: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ InterruptedException \-\> 0x0048 \}]\l0x0042: IPUT  \l  (r0 I:boolean)\l  (r1 I:org.mapsforge.map.util.PausableThread)\l org.mapsforge.map.util.PausableThread.pausing boolean A[Catch:\{ InterruptedException \-\> 0x0048 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|0x0044: INVOKE  (r1 I:java.lang.Object) java.lang.Object.wait():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0048 \}, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|SYNTHETIC\lSplitter:B:25:0x0048\l}"];
Node_26 [shape=record,label="{26\:\ ?|Splitter:B:25:0x0048\l|0x0048: INVOKE  (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.interrupt():void type: VIRTUAL A[Catch:\{ all \-\> 0x006a \}, ExcHandler: InterruptedException null, TRY_ENTER]\l0x004b: GOTO  \-\> 0x0029 A[Catch:\{ all \-\> 0x006a \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x004c|0x004c: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x004d|0x004d: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.shouldStop boolean \l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|0x004f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0057 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|0x0051: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.isInterrupted():boolean type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x0055|0x0055: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0062 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0057|0x0057: IGET  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.waitForWork boolean \l}"];
Node_33 [shape=record,label="{33\:\ 0x0059|0x0059: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x006d \l}"];
Node_34 [shape=record,label="{34\:\ 0x005b|0x005b: INVOKE  (r0 I:boolean) = (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.hasWork():boolean type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x005f|0x005f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0062 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0062|SYNTHETIC\lSplitter:B:37:0x0062\l}"];
Node_38 [shape=record,label="{38\:\ ?|Splitter:B:37:0x0062\l|0x0062: INVOKE  (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.doWork():void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0066 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0066|0x0066: INVOKE  (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.interrupt():void type: VIRTUAL \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lExcHandler: InterruptedException null\lSplitter:B:37:0x0062\l}"];
Node_42 [shape=record,label="{42\:\ 0x006a|ExcHandler: all null\lSplitter:B:10:0x0029\l|0x006a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_43 [shape=record,label="{43\:\ 0x006b|SYNTHETIC\lSplitter:B:43:0x006b\l}"];
Node_44 [shape=record,label="{44\:\ ?|Splitter:B:43:0x006b\l|0x006b: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x006a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x006c|0x006c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ 0x006d|0x006d: INVOKE  (r1 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.afterRun():void type: VIRTUAL \l}"];
Node_47 [shape=record,label="{47\:\ 0x0070|0x0070: RETURN   \l}"];
MethodNode[shape=record,label="{public final void org.mapsforge.map.util.PausableThread.run((r1 'this' I:org.mapsforge.map.util.PausableThread A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_46;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_46;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_42;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_27;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_27;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_10;
Node_25 -> Node_26;
Node_25 -> Node_42;
Node_26 -> Node_10;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_46;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_46[style=dashed];
Node_37 -> Node_38;
Node_37 -> Node_41;
Node_38 -> Node_41;
Node_38 -> Node_1;
Node_40 -> Node_1;
Node_41 -> Node_40;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_43 -> Node_42;
Node_44 -> Node_45;
Node_44 -> Node_42;
Node_46 -> Node_47;
}

