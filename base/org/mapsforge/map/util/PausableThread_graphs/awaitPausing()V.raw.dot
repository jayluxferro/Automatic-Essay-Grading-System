digraph "CFG fororg.mapsforge.map.util.PausableThread.awaitPausing()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r0 I:boolean) = (r2 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.isInterrupted():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r2 I:org.mapsforge.map.util.PausableThread) org.mapsforge.map.util.PausableThread.isPausing():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l0x000a: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r0 I:?[long, double]) = (100 ?[long, double]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|SYNTHETIC\lSplitter:B:7:0x000f\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x000f\l|0x000f: INVOKE  (r2 I:java.lang.Object), (r0 I:long) java.lang.Object.wait(long):void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0013 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|SYNTHETIC\lSplitter:B:10:0x0013\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0013\l|0x0013: INVOKE  (r0 I:java.lang.Thread) =  java.lang.Thread.currentThread():java.lang.Thread type: STATIC A[Catch:\{ all \-\> 0x001d \}, ExcHandler: InterruptedException null, TRY_ENTER]\l0x0017: INVOKE  (r0 I:java.lang.Thread) java.lang.Thread.interrupt():void type: VIRTUAL A[Catch:\{ all \-\> 0x001d \}]\l0x001a: GOTO  \-\> 0x0001 A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: RETURN   A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x001d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|0x001e: MONITOR_EXIT  (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x001d \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void org.mapsforge.map.util.PausableThread.awaitPausing((r2 'this' I:org.mapsforge.map.util.PausableThread A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_10;
Node_8 -> Node_1;
Node_10 -> Node_11;
Node_10 -> Node_14;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

