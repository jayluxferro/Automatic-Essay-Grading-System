digraph "CFG fororg.mapsforge.map.datastore.MapDataStore.readPoiData(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x0002: IGET  (r1 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:4:0x000c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0008: IGET  (r1 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"upperLeft tile must be above and left of lowerRight tile\" \l0x0010: INVOKE  \l  (r0 I:java.lang.IllegalArgumentException)\l  (r1 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:org.mapsforge.map.datastore.MapReadResult) =  org.mapsforge.map.datastore.MapReadResult \l0x0015: INVOKE  (r0 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.\<init\>():void type: DIRECT \l0x0018: IGET  (r1 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IGET  (r2 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r1 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:13:0x003b \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IGET  (r2 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|0x0020: IGET  (r3 I:int) = (r8 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r2 I:?[int, byte, short, char]) \> (r3 I:?[int, byte, short, char])  \-\> B:12:0x0038 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|0x0024: NEW_INSTANCE  (r3 I:org.mapsforge.core.model.Tile) =  org.mapsforge.core.model.Tile \l0x0026: IGET  (r4 I:byte) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0028: IGET  (r5 I:int) = (r7 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x002a: INVOKE  \l  (r3 I:org.mapsforge.core.model.Tile)\l  (r1 I:int)\l  (r2 I:int)\l  (r4 I:byte)\l  (r5 I:int)\l org.mapsforge.core.model.Tile.\<init\>(int, int, byte, int):void type: DIRECT \l0x002d: INVOKE  (r3 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r6 I:org.mapsforge.map.datastore.MapDataStore)\l  (r3 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.readPoiData(org.mapsforge.core.model.Tile):org.mapsforge.map.datastore.MapReadResult type: VIRTUAL \l0x0031: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: INVOKE  \l  (r0 I:org.mapsforge.map.datastore.MapReadResult)\l  (r3 I:org.mapsforge.map.datastore.MapReadResult)\l  (r4 I:boolean)\l org.mapsforge.map.datastore.MapReadResult.add(org.mapsforge.map.datastore.MapReadResult, boolean):void type: VIRTUAL \l0x0035: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|0x003b: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.datastore.MapDataStore.readPoiData((r6 'this' I:org.mapsforge.map.datastore.MapDataStore A[IMMUTABLE_TYPE, THIS]), (r7 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_9;
Node_12 -> Node_6;
}

