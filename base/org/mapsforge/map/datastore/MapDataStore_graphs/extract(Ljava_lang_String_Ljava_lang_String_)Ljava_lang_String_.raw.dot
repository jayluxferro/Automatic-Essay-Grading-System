digraph "CFG fororg.mapsforge.map.datastore.MapDataStore.extract(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x007f \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: INVOKE  (r1 I:java.lang.String) = (r8 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x0007: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST_STR  (r1 I:java.lang.String) =  \"\" \l0x0011: INVOKE  (r8 I:java.lang.String[]) = (r8 I:java.lang.String), (r1 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x0015: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x007c \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r2 I:java.lang.String) = (r9 I:java.lang.String) java.lang.String.trim():java.lang.String type: VIRTUAL \l0x001c: INVOKE  (r2 I:boolean) = (r2 I:java.lang.String) java.lang.String.isEmpty():boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0024: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0025: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: ARRAY_LENGTH  (r4 I:int) = (r8 I:?[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: IF  (r0 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:31:0x0076 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: AGET  (r4 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r0 I:?[int, short, byte, char]) \l0x002b: CONST_STR  (r5 I:java.lang.String) =  \"\" \l0x002d: INVOKE  (r4 I:java.lang.String[]) = (r4 I:java.lang.String), (r5 I:java.lang.String) java.lang.String.split(java.lang.String):java.lang.String[] type: VIRTUAL \l0x0031: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x0032: CONST  (r6 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0036 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|0x0036: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0038: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r9 I:java.lang.String) java.lang.String.equalsIgnoreCase(java.lang.String):boolean type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0041 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: AGET  (r8 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0040|0x0040: RETURN  (r8 I:java.lang.String) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0041|0x0041: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0073 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|0x0043: AGET  (r5 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0045: CONST_STR  (r6 I:java.lang.String) =  \"\-\" \l0x0047: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r6 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|0x004b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0073 \l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|0x004d: CONST_STR  (r5 I:java.lang.String) =  \"\-\" \l0x004f: INVOKE  (r5 I:boolean) = (r9 I:java.lang.String), (r5 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0053|0x0053: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x005d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0055|0x0055: CONST_STR  (r5 I:java.lang.String) =  \"_\" \l0x0057: INVOKE  (r5 I:boolean) = (r9 I:java.lang.String), (r5 I:java.lang.CharSequence) java.lang.String.contains(java.lang.CharSequence):boolean type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x005b|0x005b: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0073 \l}"];
Node_27 [shape=record,label="{27\:\ 0x005d|0x005d: SGET  (r5 I:java.util.Locale) =  java.util.Locale.ENGLISH java.util.Locale \l0x005f: INVOKE  (r5 I:java.lang.String) = (r9 I:java.lang.String), (r5 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL \l0x0063: AGET  (r6 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0065: SGET  (r7 I:java.util.Locale) =  java.util.Locale.ENGLISH java.util.Locale \l0x0067: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String), (r7 I:java.util.Locale) java.lang.String.toLowerCase(java.util.Locale):java.lang.String type: VIRTUAL \l0x006b: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r6 I:java.lang.String) java.lang.String.startsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_28 [shape=record,label="{28\:\ 0x006f|0x006f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0073 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0071|0x0071: AGET  (r3 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0073|0x0073: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0076|0x0076: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0079 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0079|0x0079: AGET  (r3 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x007b|0x007b: RETURN  (r3 I:java.lang.String) \l}"];
Node_35 [shape=record,label="{35\:\ 0x007c|0x007c: AGET  (r8 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x007e|0x007e: RETURN  (r8 I:java.lang.String) \l}"];
Node_37 [shape=record,label="{37\:\ 0x007f|0x007f: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String org.mapsforge.map.datastore.MapDataStore.extract((r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_37;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_37[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_35;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_35[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_31;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_30[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_11;
Node_31 -> Node_33;
Node_31 -> Node_34[style=dashed];
Node_33 -> Node_34;
Node_35 -> Node_36;
}

