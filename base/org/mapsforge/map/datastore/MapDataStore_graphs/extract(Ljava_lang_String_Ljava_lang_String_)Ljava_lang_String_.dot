digraph "CFG fororg.mapsforge.map.datastore.MapDataStore.extract(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r8 == null) goto L_0x007f\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r8.trim().isEmpty() == false) goto L_0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|java.lang.String[] r8 = r8.split(\"r\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|if (r9 == null) goto L_0x007c\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018}"];
Node_7 [shape=record,label="{7\:\ 0x0020|if (r9.trim().isEmpty() == false) goto L_0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|r3 = null\lr0 = 1\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|LOOP_START\lPHI: r0 r3 \l  PHI: (r0v2 int) = (r0v1 int), (r0v3 int) binds: [B:8:0x0023, B:27:0x0073] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 java.lang.String) = (r3v0 java.lang.String), (r3v3 java.lang.String) binds: [B:8:0x0023, B:27:0x0073] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0026\-\>B:27:0x0073\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|if (r0 \>= r8.length) goto L_0x0076\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|java.lang.String[] r4 = r8[r0].split(\"b\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|if (r4.length == 2) goto L_0x0036\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036}"];
Node_14 [shape=record,label="{14\:\ 0x003c|if (r4[0].equalsIgnoreCase(r9) == false) goto L_0x0041\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e}"];
Node_16 [shape=record,label="{16\:\ 0x0040|RETURN\l|return r4[1]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0041|if (r3 != null) goto L_0x0073\l}"];
Node_18 [shape=record,label="{18\:\ 0x0043}"];
Node_19 [shape=record,label="{19\:\ 0x004b|if (r4[0].contains(\"\-\") != false) goto L_0x0073\l}"];
Node_20 [shape=record,label="{20\:\ 0x004d}"];
Node_21 [shape=record,label="{21\:\ 0x0053|if (r9.contains(\"\-\") != false) goto L_0x005d\l}"];
Node_22 [shape=record,label="{22\:\ 0x0055}"];
Node_23 [shape=record,label="{23\:\ 0x005b|if (r9.contains(\"_\") == false) goto L_0x0073\l}"];
Node_24 [shape=record,label="{24\:\ 0x005d}"];
Node_25 [shape=record,label="{25\:\ 0x006f|if (r9.toLowerCase(java.util.Locale.ENGLISH).startsWith(r4[0].toLowerCase(java.util.Locale.ENGLISH)) == false) goto L_0x0073\l}"];
Node_26 [shape=record,label="{26\:\ 0x0071|r3 = r4[1]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0073|LOOP_END\lPHI: r3 \l  PHI: (r3v3 java.lang.String) = (r3v1 java.lang.String), (r3v1 java.lang.String), (r3v1 java.lang.String), (r3v1 java.lang.String), (r3v4 java.lang.String), (r3v1 java.lang.String) binds: [B:40:0x0073, B:36:0x0073, B:37:0x0073, B:39:0x0073, B:35:0x0073, B:38:0x0073] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:9:0x0026\-\>B:27:0x0073\l|int r0 = r0 + 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0076|if (r3 == null) goto L_0x0079\l}"];
Node_29 [shape=record,label="{29\:\ 0x0079}"];
Node_30 [shape=record,label="{30\:\ 0x007c}"];
Node_31 [shape=record,label="{31\:\ 0x007e|RETURN\l|return r8[0]\l}"];
Node_32 [shape=record,label="{32\:\ 0x007f|RETURN\l|return null\l}"];
Node_33 [shape=record,label="{33\:\ 0x0076|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x003e|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0073|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0073|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0073|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0073|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0073|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0073|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r8[0]\l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public static java.lang.String org.mapsforge.map.datastore.MapDataStore.extract((r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_32;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_32[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_30;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_30[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_33;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_40[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_17;
Node_14 -> Node_34[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_36;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_37;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_38;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_39;
Node_26 -> Node_35;
Node_27 -> Node_9;
Node_28 -> Node_29;
Node_28 -> Node_42[style=dashed];
Node_29 -> Node_41;
Node_30 -> Node_31;
Node_33 -> Node_28;
Node_34 -> Node_15;
Node_35 -> Node_27;
Node_36 -> Node_27;
Node_37 -> Node_27;
Node_38 -> Node_27;
Node_39 -> Node_27;
Node_40 -> Node_27;
}

