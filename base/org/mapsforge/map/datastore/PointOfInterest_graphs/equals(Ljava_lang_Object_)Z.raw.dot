digraph "CFG fororg.mapsforge.map.datastore.PointOfInterest.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) org.mapsforge.map.datastore.PointOfInterest \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r5 I:org.mapsforge.map.datastore.PointOfInterest) = (org.mapsforge.map.datastore.PointOfInterest) (r5 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r1 I:byte) = (r4 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.layer byte \l0x000e: IGET  (r3 I:byte) = (r5 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.layer byte \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r1 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r4 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.tags java.util.List \l0x0015: IGET  (r3 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r5 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.tags java.util.List \l0x0017: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r4 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.position org.mapsforge.core.model.LatLong \l0x0020: IGET  (r5 I:org.mapsforge.core.model.LatLong) = (r5 I:org.mapsforge.map.datastore.PointOfInterest) org.mapsforge.map.datastore.PointOfInterest.position org.mapsforge.core.model.LatLong \l0x0022: INVOKE  (r5 I:boolean) = \l  (r1 I:org.mapsforge.core.model.LatLong)\l  (r5 I:java.lang.Object)\l org.mapsforge.core.model.LatLong.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0029 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|0x0029: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.datastore.PointOfInterest.equals((r4 'this' I:org.mapsforge.map.datastore.PointOfInterest A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
}

