digraph "CFG fororg.mapsforge.map.datastore.Way.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r7 I:?[OBJECT, ARRAY]) org.mapsforge.map.datastore.Way \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CHECK_CAST  (r7 I:org.mapsforge.map.datastore.Way) = (org.mapsforge.map.datastore.Way) (r7 I:?[OBJECT, ARRAY]) \l0x000c: IGET  (r1 I:byte) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.layer byte \l0x000e: IGET  (r3 I:byte) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.layer byte \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IGET  (r1 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.tags java.util.List \l0x0015: IGET  (r3 I:java.util.List\<org.mapsforge.core.model.Tag\>) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.tags java.util.List \l0x0017: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r3 I:java.lang.Object) java.util.List.equals(java.lang.Object):boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.labelPosition org.mapsforge.core.model.LatLong \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0027 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.labelPosition org.mapsforge.core.model.LatLong \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0027 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0026|0x0026: RETURN  (r2 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.labelPosition org.mapsforge.core.model.LatLong \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0036 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002b|0x002b: IGET  (r1 I:org.mapsforge.core.model.LatLong) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.labelPosition org.mapsforge.core.model.LatLong \l0x002d: IGET  (r3 I:org.mapsforge.core.model.LatLong) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.labelPosition org.mapsforge.core.model.LatLong \l0x002f: INVOKE  (r1 I:boolean) = \l  (r1 I:org.mapsforge.core.model.LatLong)\l  (r3 I:java.lang.Object)\l org.mapsforge.core.model.LatLong.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0036 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|0x0035: RETURN  (r2 I:boolean) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|0x0036: IGET  (r1 I:org.mapsforge.core.model.LatLong[][]) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x0038: ARRAY_LENGTH  (r1 I:int) = (r1 I:?[]) \l0x0039: IGET  (r3 I:org.mapsforge.core.model.LatLong[][]) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x003b: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003c|0x003c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003f \l}"];
Node_24 [shape=record,label="{24\:\ 0x003e|0x003e: RETURN  (r2 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x003f|0x003f: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0040|0x0040: IGET  (r3 I:org.mapsforge.core.model.LatLong[][]) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x0042: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0043|0x0043: IF  (r1 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:39:0x0073 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0045|0x0045: IGET  (r3 I:org.mapsforge.core.model.LatLong[][]) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x0047: AGET  (r3 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0049: ARRAY_LENGTH  (r3 I:int) = (r3 I:?[]) \l0x004a: IGET  (r4 I:org.mapsforge.core.model.LatLong[][]) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x004c: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x004e: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|0x004f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0052 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|0x0051: RETURN  (r2 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0052|0x0052: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0053|0x0053: IGET  (r4 I:org.mapsforge.core.model.LatLong[][]) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x0055: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0057: ARRAY_LENGTH  (r4 I:int) = (r4 I:?[]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0058|0x0058: IF  (r3 I:?[int, byte, short, char]) \>= (r4 I:?[int, byte, short, char])  \-\> B:38:0x0070 \l}"];
Node_34 [shape=record,label="{34\:\ 0x005a|0x005a: IGET  (r4 I:org.mapsforge.core.model.LatLong[][]) = (r6 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x005c: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x005e: AGET  (r4 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0060: IGET  (r5 I:org.mapsforge.core.model.LatLong[][]) = (r7 I:org.mapsforge.map.datastore.Way) org.mapsforge.map.datastore.Way.latLongs org.mapsforge.core.model.LatLong[][] \l0x0062: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x0064: AGET  (r5 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY][]), (r3 I:?[int, short, byte, char]) \l0x0066: INVOKE  (r4 I:boolean) = \l  (r4 I:org.mapsforge.core.model.LatLong)\l  (r5 I:java.lang.Object)\l org.mapsforge.core.model.LatLong.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_35 [shape=record,label="{35\:\ 0x006a|0x006a: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x006d \l}"];
Node_36 [shape=record,label="{36\:\ 0x006c|0x006c: RETURN  (r2 I:boolean) \l}"];
Node_37 [shape=record,label="{37\:\ 0x006d|0x006d: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0070|0x0070: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0073|0x0073: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.datastore.Way.equals((r6 'this' I:org.mapsforge.map.datastore.Way A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_39;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_38;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_37 -> Node_32;
Node_38 -> Node_26;
}

