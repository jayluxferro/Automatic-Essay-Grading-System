digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.getDataTimestamp(Lorg\/mapsforge\/core\/model\/Tile;)J" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  org.mapsforge.map.datastore.MultiMapDataStore.1.$SwitchMap$org$mapsforge$map$datastore$MultiMapDataStore$DataPolicy int[] \l0x0002: IGET  (r1 I:org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy) = (r5 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.dataPolicy org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy \l0x0004: INVOKE  (r1 I:int) = \l  (r1 I:org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy)\l org.mapsforge.map.datastore.MultiMapDataStore.DataPolicy.ordinal():int type: VIRTUAL \l0x0008: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l0x000a: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0039, 0x0017, 0x0017] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: NEW_INSTANCE  (r6 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0011: CONST_STR  (r0 I:java.lang.String) =  \"Invalid data policy for multi map database\" \l0x0013: INVOKE  \l  (r6 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|0x0017: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.MapDataStore\>) = (r5 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.mapDatabases java.util.List \l0x0019: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0027: CHECK_CAST  (r3 I:org.mapsforge.map.datastore.MapDataStore) = (org.mapsforge.map.datastore.MapDataStore) (r3 I:?[OBJECT, ARRAY]) \l0x0029: INVOKE  (r4 I:boolean) = \l  (r3 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.supportsTile(org.mapsforge.core.model.Tile):boolean type: VIRTUAL \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: INVOKE  (r3 I:long) = \l  (r3 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.getDataTimestamp(org.mapsforge.core.model.Tile):long type: VIRTUAL \l0x0033: INVOKE  (r1 I:long) = (r1 I:long), (r3 I:long) java.lang.Math.max(long, long):long type: STATIC \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: RETURN  (r1 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.MapDataStore\>) = (r5 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.mapDatabases java.util.List \l0x003b: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|0x0045: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0049: CHECK_CAST  (r3 I:org.mapsforge.map.datastore.MapDataStore) = (org.mapsforge.map.datastore.MapDataStore) (r3 I:?[OBJECT, ARRAY]) \l0x004b: INVOKE  (r4 I:boolean) = \l  (r3 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.supportsTile(org.mapsforge.core.model.Tile):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|0x004f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003f \l}"];
Node_16 [shape=record,label="{16\:\ 0x0051|0x0051: INVOKE  (r0 I:long) = \l  (r3 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.getDataTimestamp(org.mapsforge.core.model.Tile):long type: VIRTUAL \l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: RETURN  (r0 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0056|0x0056: RETURN  (r1 I:long) \l}"];
MethodNode[shape=record,label="{public long org.mapsforge.map.datastore.MultiMapDataStore.getDataTimestamp((r5 'this' I:org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS]), (r6 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_5;
Node_8 -> Node_9[style=dashed];
Node_9 -> Node_5;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_12;
Node_15 -> Node_16[style=dashed];
Node_16 -> Node_17;
}

