digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.addMapDataStore(Lorg\/mapsforge\/map\/datastore\/MapDataStore;ZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r1.mapDatabases.contains(r2) != false) goto L_0x0039\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|r1.mapDatabases.add(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r3 == false) goto L_0x0019\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|r1.startZoomLevel = r2.startZoomLevel().byteValue()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|if (r4 == false) goto L_0x0021\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|r1.startPosition = r2.startPosition()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021}"];
Node_8 [shape=record,label="{8\:\ 0x0023|if (r1.boundingBox != null) goto L_0x002c\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|r1.boundingBox = r2.boundingBox()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|r1.boundingBox = r1.boundingBox.extendBoundingBox(r2.boundingBox())\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039}"];
Node_12 [shape=record,label="{12\:\ 0x0040|throw new java.lang.IllegalArgumentException(\"Duplicate map database\")\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.datastore.MultiMapDataStore.addMapDataStore((r1v0 'this' org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS]), (r2v0 org.mapsforge.map.datastore.MapDataStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_14;
Node_10 -> Node_13;
Node_11 -> Node_12;
}

