digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.readLabels(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;Z)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.mapsforge.map.datastore.MapReadResult) =  org.mapsforge.map.datastore.MapReadResult \l0x0002: INVOKE  (r0 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:java.util.List\<org.mapsforge.map.datastore.MapDataStore\>) = (r5 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.mapDatabases java.util.List \l0x0007: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|0x000b: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002f \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0015: CHECK_CAST  (r2 I:org.mapsforge.map.datastore.MapDataStore) = (org.mapsforge.map.datastore.MapDataStore) (r2 I:?[OBJECT, ARRAY]) \l0x0017: INVOKE  (r3 I:boolean) = \l  (r2 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.supportsTile(org.mapsforge.core.model.Tile):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r2 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r2 I:org.mapsforge.map.datastore.MapDataStore)\l  (r6 I:org.mapsforge.core.model.Tile)\l  (r7 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.readLabels(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile):org.mapsforge.map.datastore.MapReadResult type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0024 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|0x0024: IGET  (r3 I:boolean) = (r0 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.isWater boolean \l0x0026: IGET  (r4 I:boolean) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.isWater boolean \l0x0028: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) & (r4 I:?[int, boolean, short, byte, char]) \l0x0029: IPUT  \l  (r3 I:boolean)\l  (r0 I:org.mapsforge.map.datastore.MapReadResult)\l org.mapsforge.map.datastore.MapReadResult.isWater boolean \l0x002b: INVOKE  \l  (r0 I:org.mapsforge.map.datastore.MapReadResult)\l  (r2 I:org.mapsforge.map.datastore.MapReadResult)\l  (r8 I:boolean)\l org.mapsforge.map.datastore.MapReadResult.add(org.mapsforge.map.datastore.MapReadResult, boolean):void type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: RETURN  (r0 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.datastore.MultiMapDataStore.readLabels((r5 'this' I:org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS]), (r6 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_4 -> Node_5[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_1[style=dashed];
Node_8 -> Node_1;
}

