digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.readMapData(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;Z)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.map.datastore.MapReadResult r0 = new org.mapsforge.map.datastore.MapReadResult()\ljava.util.Iterator r1 = r5.mapDatabases.iterator()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000b|LOOP_START\lLOOP:0: B:1:0x000b\-\>B:9:0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|if (r1.hasNext() == false) goto L_0x002f\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|org.mapsforge.map.datastore.MapDataStore r2 = r1.next()\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|if (r2.supportsTile(r6) == false) goto L_0x000b\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|org.mapsforge.map.datastore.MapReadResult r2 = r2.readMapData(r6, r7)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|if (r2 != null) goto L_0x0024\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|r0.isWater = r0.isWater & r2.isWater\lr0.add(r2, r8)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ 0x000b|LOOP_END\lSYNTHETIC\lLOOP:0: B:1:0x000b\-\>B:9:0x000b\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.datastore.MultiMapDataStore.readMapData((r5v0 'this' org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS]), (r6v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_12[style=dashed];
Node_7 -> Node_13;
Node_9 -> Node_1;
Node_10 -> Node_8;
Node_11 -> Node_9;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

