digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.startPosition()Lorg\/mapsforge\/core\/model\/LatLong;" {
subgraph cluster_Region_362009336 {
label = "R(1:(2:(1:3)|(1:(2:(1:7)|(1:8)))))";
node [shape=record,color=blue];
subgraph cluster_Region_96085722 {
label = "R(2:(1:3)|(1:(2:(1:7)|(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1719154203 {
label = "IF [B:1:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r1.startPosition != null) goto L_0x0004\l}"];
subgraph cluster_Region_637804230 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return r1.startPosition\l}"];
}
}
subgraph cluster_Region_764091628 {
label = "R(1:(2:(1:7)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_2043896689 {
label = "R(2:(1:7)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1589402302 {
label = "IF [B:5:0x0009] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|if (r1.boundingBox != null) goto L_0x000b\l}"];
subgraph cluster_Region_1489538433 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|return r1.boundingBox.getCenterPoint()\l}"];
}
}
subgraph cluster_Region_768706056 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return null\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0007}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000b}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.LatLong org.mapsforge.map.datastore.MultiMapDataStore.startPosition((r1v0 'this' org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

