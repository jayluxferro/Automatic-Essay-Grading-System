digraph "CFG fororg.mapsforge.map.datastore.MultiMapDataStore.readMapData(Lorg\/mapsforge\/core\/model\/Tile;)Lorg\/mapsforge\/map\/datastore\/MapReadResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:int[]) =  org.mapsforge.map.datastore.MultiMapDataStore.1.$SwitchMap$org$mapsforge$map$datastore$MultiMapDataStore$DataPolicy int[] \l0x0002: IGET  (r1 I:org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy) = (r3 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.dataPolicy org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy \l0x0004: INVOKE  (r1 I:int) = \l  (r1 I:org.mapsforge.map.datastore.MultiMapDataStore$DataPolicy)\l org.mapsforge.map.datastore.MultiMapDataStore.DataPolicy.ordinal():int type: VIRTUAL \l0x0008: AGET  (r0 I:?[int, float]) = (r0 I:?[int, float][]), (r1 I:?[int, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: SWITCH  \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l k:[1, 2, 3] t:[0x0021, 0x001b, 0x0015] \l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|0x000d: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"Invalid data policy for multi map database\" \l0x0011: INVOKE  \l  (r4 I:java.lang.IllegalStateException)\l  (r0 I:java.lang.String)\l java.lang.IllegalStateException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0016: INVOKE  (r4 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r3 I:org.mapsforge.map.datastore.MultiMapDataStore)\l  (r4 I:org.mapsforge.core.model.Tile)\l  (r0 I:boolean)\l org.mapsforge.map.datastore.MultiMapDataStore.readMapData(org.mapsforge.core.model.Tile, boolean):org.mapsforge.map.datastore.MapReadResult type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN  (r4 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001c: INVOKE  (r4 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r3 I:org.mapsforge.map.datastore.MultiMapDataStore)\l  (r4 I:org.mapsforge.core.model.Tile)\l  (r0 I:boolean)\l org.mapsforge.map.datastore.MultiMapDataStore.readMapData(org.mapsforge.core.model.Tile, boolean):org.mapsforge.map.datastore.MapReadResult type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: RETURN  (r4 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.MapDataStore\>) = (r3 I:org.mapsforge.map.datastore.MultiMapDataStore) org.mapsforge.map.datastore.MultiMapDataStore.mapDatabases java.util.List \l0x0023: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x003e \l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0031: CHECK_CAST  (r1 I:org.mapsforge.map.datastore.MapDataStore) = (org.mapsforge.map.datastore.MapDataStore) (r1 I:?[OBJECT, ARRAY]) \l0x0033: INVOKE  (r2 I:boolean) = \l  (r1 I:org.mapsforge.map.datastore.MapDataStore)\l  (r4 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.supportsTile(org.mapsforge.core.model.Tile):boolean type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0037|0x0037: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0027 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|0x0039: INVOKE  (r4 I:org.mapsforge.map.datastore.MapReadResult) = \l  (r1 I:org.mapsforge.map.datastore.MapDataStore)\l  (r4 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.datastore.MapDataStore.readMapData(org.mapsforge.core.model.Tile):org.mapsforge.map.datastore.MapReadResult type: VIRTUAL \l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|0x003d: RETURN  (r4 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|0x003e: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: RETURN  (r4 I:org.mapsforge.map.datastore.MapReadResult) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.datastore.MapReadResult org.mapsforge.map.datastore.MultiMapDataStore.readMapData((r3 'this' I:org.mapsforge.map.datastore.MultiMapDataStore A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_1 -> Node_6;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_9;
Node_12 -> Node_13[style=dashed];
Node_13 -> Node_14;
Node_15 -> Node_16;
}

