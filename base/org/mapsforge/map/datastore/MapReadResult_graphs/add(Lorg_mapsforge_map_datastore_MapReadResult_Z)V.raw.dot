digraph "CFG fororg.mapsforge.map.datastore.MapReadResult.add(Lorg\/mapsforge\/map\/datastore\/MapReadResult;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0042 \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IGET  (r4 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>) = (r3 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.pointOfInterests java.util.List \l0x0004: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0022 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0012: CHECK_CAST  (r0 I:org.mapsforge.map.datastore.PointOfInterest) = (org.mapsforge.map.datastore.PointOfInterest) (r0 I:?[OBJECT, ARRAY]) \l0x0014: IGET  (r1 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.pointOfInterests java.util.List \l0x0016: INVOKE  (r1 I:boolean) = (r1 I:java.util.List), (r0 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0008 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IGET  (r1 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.pointOfInterests java.util.List \l0x001e: INVOKE  (r1 I:java.util.List), (r0 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: IGET  (r3 I:java.util.List\<org.mapsforge.map.datastore.Way\>) = (r3 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.ways java.util.List \l0x0024: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0050 \l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x0032: CHECK_CAST  (r4 I:org.mapsforge.map.datastore.Way) = (org.mapsforge.map.datastore.Way) (r4 I:?[OBJECT, ARRAY]) \l0x0034: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.Way\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.ways java.util.List \l0x0036: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.contains(java.lang.Object):boolean type: INTERFACE \l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0028 \l}"];
Node_12 [shape=record,label="{12\:\ 0x003c|0x003c: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.Way\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.ways java.util.List \l0x003e: INVOKE  (r0 I:java.util.List), (r4 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: IGET  (r4 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.pointOfInterests java.util.List \l0x0044: IGET  (r0 I:java.util.List\<org.mapsforge.map.datastore.PointOfInterest\>) = (r3 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.pointOfInterests java.util.List \l0x0046: INVOKE  (r4 I:java.util.List), (r0 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l0x0049: IGET  (r4 I:java.util.List\<org.mapsforge.map.datastore.Way\>) = (r2 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.ways java.util.List \l0x004b: IGET  (r3 I:java.util.List\<org.mapsforge.map.datastore.Way\>) = (r3 I:org.mapsforge.map.datastore.MapReadResult) org.mapsforge.map.datastore.MapReadResult.ways java.util.List \l0x004d: INVOKE  (r4 I:java.util.List), (r3 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0050|0x0050: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.datastore.MapReadResult.add((r2 'this' I:org.mapsforge.map.datastore.MapReadResult A[IMMUTABLE_TYPE, THIS]), (r3 I:org.mapsforge.map.datastore.MapReadResult A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_13;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_6[style=dashed];
Node_6 -> Node_2;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_14;
}

