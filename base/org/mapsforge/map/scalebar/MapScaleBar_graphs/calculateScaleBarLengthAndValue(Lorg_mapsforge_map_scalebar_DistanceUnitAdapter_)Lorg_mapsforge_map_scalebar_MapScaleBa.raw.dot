digraph "CFG fororg.mapsforge.map.scalebar.MapScaleBar.calculateScaleBarLengthAndValue(Lorg\/mapsforge\/map\/scalebar\/DistanceUnitAdapter;)Lorg\/mapsforge\/map\/scalebar\/MapScaleBar$ScaleBarLengthAndValue;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.model.IMapViewPosition) = (r8 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l0x0002: INVOKE  (r0 I:org.mapsforge.core.model.MapPosition) = (r0 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getMapPosition():org.mapsforge.core.model.MapPosition type: INTERFACE \l0x0006: IPUT  \l  (r0 I:org.mapsforge.core.model.MapPosition)\l  (r8 I:org.mapsforge.map.scalebar.MapScaleBar)\l org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l0x0008: IGET  (r0 I:org.mapsforge.core.model.MapPosition) = (r8 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l0x000a: IGET  (r0 I:org.mapsforge.core.model.LatLong) = (r0 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.latLong org.mapsforge.core.model.LatLong \l0x000c: IGET  (r0 I:double) = (r0 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x000e: IGET  (r2 I:org.mapsforge.core.model.MapPosition) = (r8 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l0x0010: IGET  (r2 I:byte) = (r2 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l0x0012: IGET  (r3 I:org.mapsforge.map.model.DisplayModel) = (r8 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.displayModel org.mapsforge.map.model.DisplayModel \l0x0014: INVOKE  (r3 I:int) = (r3 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x0018: INVOKE  (r2 I:long) = (r2 I:byte), (r3 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC \l0x001c: INVOKE  (r0 I:double) = (r0 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.calculateGroundResolution(double, long):double type: STATIC \l0x0020: INVOKE  (r2 I:double) = (r9 I:org.mapsforge.map.scalebar.DistanceUnitAdapter) org.mapsforge.map.scalebar.DistanceUnitAdapter.getMeterRatio():double type: INTERFACE \l0x0024: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0025: INVOKE  (r9 I:int[]) = (r9 I:org.mapsforge.map.scalebar.DistanceUnitAdapter) org.mapsforge.map.scalebar.DistanceUnitAdapter.getScaleBarValues():int[] type: INTERFACE \l0x0029: ARRAY_LENGTH  (r2 I:int) = (r9 I:?[]) \l0x002a: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002b: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x002c: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x002d|0x002d: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:6:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x002f|0x002f: AGET  (r5 I:?[int, float]) = (r9 I:?[int, float][]), (r3 I:?[int, short, byte, char]) \l0x0031: CAST  (r6 I:double) = (double) (r5 I:int) \l0x0032: ARITH  (r6 I:double) = (r6 I:double) \/ (r0 I:double) \l0x0033: CAST  (r4 I:int) = (int) (r6 I:double) \l0x0034: IGET  (r6 I:org.mapsforge.core.graphics.Bitmap) = (r8 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.mapScaleBitmap org.mapsforge.core.graphics.Bitmap \l0x0036: INVOKE  (r6 I:int) = (r6 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE \l0x003a: ARITH  (r6 I:int) = (r6 I:int) + (\-10 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|0x003c: IF  (r4 I:?[int, byte, short, char]) \>= (r6 I:?[int, byte, short, char])  \-\> B:5:0x003f \l}"];
Node_5 [shape=record,label="{5\:\ 0x003f|0x003f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0042|0x0042: NEW_INSTANCE  (r9 I:org.mapsforge.map.scalebar.MapScaleBar$ScaleBarLengthAndValue) =  org.mapsforge.map.scalebar.MapScaleBar$ScaleBarLengthAndValue \l0x0044: INVOKE  \l  (r9 I:org.mapsforge.map.scalebar.MapScaleBar$ScaleBarLengthAndValue)\l  (r4 I:int)\l  (r5 I:int)\l org.mapsforge.map.scalebar.MapScaleBar.ScaleBarLengthAndValue.\<init\>(int, int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x0047|0x0047: RETURN  \l  (r9 I:org.mapsforge.map.scalebar.MapScaleBar$ScaleBarLengthAndValue)\l \l}"];
MethodNode[shape=record,label="{protected org.mapsforge.map.scalebar.MapScaleBar$ScaleBarLengthAndValue org.mapsforge.map.scalebar.MapScaleBar.calculateScaleBarLengthAndValue((r8 'this' I:org.mapsforge.map.scalebar.MapScaleBar A[IMMUTABLE_TYPE, THIS]), (r9 I:org.mapsforge.map.scalebar.DistanceUnitAdapter A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_1;
Node_6 -> Node_7;
}

