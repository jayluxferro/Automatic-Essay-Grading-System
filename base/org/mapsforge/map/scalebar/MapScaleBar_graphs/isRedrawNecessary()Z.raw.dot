digraph "CFG fororg.mapsforge.map.scalebar.MapScaleBar.isRedrawNecessary()Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r6 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.redrawNeeded boolean \l0x0002: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: IGET  (r0 I:org.mapsforge.core.model.MapPosition) = (r6 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:org.mapsforge.map.model.IMapViewPosition) = (r6 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l0x000c: INVOKE  (r0 I:org.mapsforge.core.model.MapPosition) = (r0 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getMapPosition():org.mapsforge.core.model.MapPosition type: INTERFACE \l0x0010: IGET  (r2 I:byte) = (r0 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l0x0012: IGET  (r3 I:org.mapsforge.core.model.MapPosition) = (r6 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l0x0014: IGET  (r3 I:byte) = (r3 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: RETURN  (r1 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r0 I:org.mapsforge.core.model.LatLong) = (r0 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.latLong org.mapsforge.core.model.LatLong \l0x001b: IGET  (r2 I:double) = (r0 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x001d: IGET  (r0 I:org.mapsforge.core.model.MapPosition) = (r6 I:org.mapsforge.map.scalebar.MapScaleBar) org.mapsforge.map.scalebar.MapScaleBar.prevMapPosition org.mapsforge.core.model.MapPosition \l0x001f: IGET  (r0 I:org.mapsforge.core.model.LatLong) = (r0 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.latLong org.mapsforge.core.model.LatLong \l0x0021: IGET  (r4 I:double) = (r0 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0023: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0024: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.abs(double):double type: STATIC \l0x0028: CONST  (r4 I:?[long, double]) = \l  (4596373779694328218(0x3fc999999999999a, double:0.2) ?[long, double])\l \l0x002d: CMP_L  (r0 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x0032 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{protected boolean org.mapsforge.map.scalebar.MapScaleBar.isRedrawNecessary((r6 'this' I:org.mapsforge.map.scalebar.MapScaleBar A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_13[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_12;
}

