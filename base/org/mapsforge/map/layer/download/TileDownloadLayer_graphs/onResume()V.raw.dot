digraph "CFG fororg.mapsforge.map.layer.download.TileDownloadLayer.onResume()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:boolean) = (r4 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.started boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0007 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r4 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.start():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IGET  (r0 I:org.mapsforge.map.layer.download.TileDownloadThread[]) = (r4 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileDownloadThreads org.mapsforge.map.layer.download.TileDownloadThread[] \l0x0009: ARRAY_LENGTH  (r1 I:int) = (r0 I:?[]) \l0x000a: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:?[int, byte, short, char]) \>= (r1 I:?[int, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: AGET  (r3 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r2 I:?[int, short, byte, char]) \l0x000f: INVOKE  (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.proceed():void type: VIRTUAL \l0x0012: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.download.TileDownloadLayer.onResume((r4 'this' I:org.mapsforge.map.layer.download.TileDownloadLayer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
}

