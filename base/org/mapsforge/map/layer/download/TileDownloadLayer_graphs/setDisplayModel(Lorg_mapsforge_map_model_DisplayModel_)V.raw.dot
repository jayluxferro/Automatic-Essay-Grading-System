digraph "CFG fororg.mapsforge.map.layer.download.TileDownloadLayer.setDisplayModel(Lorg\/mapsforge\/map\/model\/DisplayModel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  \l  (r9 I:org.mapsforge.map.layer.TileLayer)\l  (r10 I:org.mapsforge.map.model.DisplayModel)\l org.mapsforge.map.layer.TileLayer.setDisplayModel(org.mapsforge.map.model.DisplayModel):void type: SUPER A[Catch:\{ all \-\> 0x0044 \}, TRY_ENTER]\l0x0004: IGET  (r10 I:org.mapsforge.map.layer.download.tilesource.TileSource) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileSource org.mapsforge.map.layer.download.tilesource.TileSource A[Catch:\{ all \-\> 0x0044 \}]\l0x0006: INVOKE  (r10 I:int) = \l  (r10 I:org.mapsforge.map.layer.download.tilesource.TileSource)\l org.mapsforge.map.layer.download.tilesource.TileSource.getParallelRequestsLimit():int type: INTERFACE A[Catch:\{ all \-\> 0x0044 \}]\l0x000a: CONST  (r0 I:?[int, float, short, byte, char]) = (8 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0044 \}]\l0x000c: INVOKE  (r10 I:int) = (r10 I:int), (r0 I:int) java.lang.Math.min(int, int):int type: STATIC A[Catch:\{ all \-\> 0x0044 \}]\l0x0010: IGET  (r0 I:org.mapsforge.map.model.DisplayModel) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0044 \}]\l0x0012: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0031 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: NEW_ARRAY  (r0 I:org.mapsforge.map.layer.download.TileDownloadThread[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: org.mapsforge.map.layer.download.TileDownloadThread[] A[Catch:\{ all \-\> 0x0044 \}]\l0x0017: IPUT  \l  (r0 I:org.mapsforge.map.layer.download.TileDownloadThread[])\l  (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer)\l org.mapsforge.map.layer.download.TileDownloadLayer.tileDownloadThreads org.mapsforge.map.layer.download.TileDownloadThread[] A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r1 I:?[int, byte, short, char]) \>= (r10 I:?[int, byte, short, char])  \-\> B:13:0x0042 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IGET  (r0 I:org.mapsforge.map.layer.download.TileDownloadThread[]) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileDownloadThreads org.mapsforge.map.layer.download.TileDownloadThread[] A[Catch:\{ all \-\> 0x0044 \}]\l0x001d: NEW_INSTANCE  (r8 I:org.mapsforge.map.layer.download.TileDownloadThread) =  org.mapsforge.map.layer.download.TileDownloadThread A[Catch:\{ all \-\> 0x0044 \}]\l0x001f: IGET  (r3 I:org.mapsforge.map.layer.cache.TileCache) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x0044 \}]\l0x0021: IGET  (r4 I:org.mapsforge.map.layer.queue.JobQueue) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.jobQueue org.mapsforge.map.layer.queue.JobQueue A[Catch:\{ all \-\> 0x0044 \}]\l0x0023: IGET  (r6 I:org.mapsforge.core.graphics.GraphicFactory) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.graphicFactory org.mapsforge.core.graphics.GraphicFactory A[Catch:\{ all \-\> 0x0044 \}]\l0x0025: IGET  (r7 I:org.mapsforge.map.model.DisplayModel) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0044 \}]\l0x0027: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0028: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r9 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0044 \}]\l0x0029: INVOKE  \l  (r2 I:org.mapsforge.map.layer.download.TileDownloadThread)\l  (r3 I:org.mapsforge.map.layer.cache.TileCache)\l  (r4 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r5 I:org.mapsforge.map.layer.Layer)\l  (r6 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r7 I:org.mapsforge.map.model.DisplayModel)\l org.mapsforge.map.layer.download.TileDownloadThread.\<init\>(org.mapsforge.map.layer.cache.TileCache, org.mapsforge.map.layer.queue.JobQueue, org.mapsforge.map.layer.Layer, org.mapsforge.core.graphics.GraphicFactory, org.mapsforge.map.model.DisplayModel):void type: DIRECT A[Catch:\{ all \-\> 0x0044 \}]\l0x002c: APUT  \l  (r0 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l  (r8 I:?[OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0044 \}]\l0x002e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) A[Catch:\{ all \-\> 0x0044 \}]\l0x0030: GOTO  \-\> 0x0019 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|0x0031: IGET  (r10 I:org.mapsforge.map.layer.download.TileDownloadThread[]) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileDownloadThreads org.mapsforge.map.layer.download.TileDownloadThread[] A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|0x0033: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0042 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|0x0035: IGET  (r10 I:org.mapsforge.map.layer.download.TileDownloadThread[]) = (r9 I:org.mapsforge.map.layer.download.TileDownloadLayer) org.mapsforge.map.layer.download.TileDownloadLayer.tileDownloadThreads org.mapsforge.map.layer.download.TileDownloadThread[] A[Catch:\{ all \-\> 0x0044 \}]\l0x0037: ARRAY_LENGTH  (r0 I:int) = (r10 I:?[]) A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: IF  (r1 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:13:0x0042 A[Catch:\{ all \-\> 0x0044 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|0x003a: AGET  (r2 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r1 I:?[int, short, byte, char])\l A[Catch:\{ all \-\> 0x0044 \}]\l0x003c: INVOKE  (r2 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.finish():void type: VIRTUAL A[Catch:\{ all \-\> 0x0044 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|0x003f: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: MONITOR_EXIT  (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0043|0x0043: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0044: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: MONITOR_EXIT  (r9 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.download.TileDownloadLayer.setDisplayModel((r9 'this' I:org.mapsforge.map.layer.download.TileDownloadLayer A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

