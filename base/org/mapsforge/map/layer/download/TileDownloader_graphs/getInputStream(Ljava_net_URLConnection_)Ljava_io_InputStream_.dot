digraph "CFG fororg.mapsforge.map.layer.download.TileDownloader.getInputStream(Ljava\/net\/URLConnection;)Ljava\/io\/InputStream;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|if (p018io.fabric.sdk.android.services.network.HttpRequest.ENCODING_GZIP.equals(r2.getContentEncoding()) == false) goto L_0x0016\l}"];
Node_2 [shape=record,label="{2\:\ 0x000c}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return new java.util.zip.GZIPInputStream(r2.getInputStream())\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_5 [shape=record,label="{5\:\ 0x001a|RETURN\l|return r2.getInputStream()\l}"];
MethodNode[shape=record,label="{private static java.io.InputStream org.mapsforge.map.layer.download.TileDownloader.getInputStream((r2v0 java.net.URLConnection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

