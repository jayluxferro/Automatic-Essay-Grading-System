digraph "CFG fororg.mapsforge.map.layer.download.tilesource.OnlineTileSource.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1290188222 {
label = "R(1:(2:(1:9)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_988367329 {
label = "R(2:(1:9)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1482247853 {
label = "IF [B:1:0x0005, B:4:0x000a, B:7:0x0017] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0005|if (super.equals(r3) == true) goto L_0x0008\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|ADDED_TO_REGION\l|if ((r3 instanceof org.mapsforge.map.layer.download.tilesource.OnlineTileSource) == true) goto L_0x000d\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|ADDED_TO_REGION\l|if (r2.baseUrl.equals(((org.mapsforge.map.layer.download.tilesource.OnlineTileSource) r3).baseUrl) == true) goto L_0x001a\l}"];
subgraph cluster_Region_1189948959 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1063200825 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\l|return false\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0007|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000d}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.layer.download.tilesource.OnlineTileSource.equals((r2v0 'this' org.mapsforge.map.layer.download.tilesource.OnlineTileSource A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
}

