digraph "CFG fororg.mapsforge.map.layer.download.tilesource.AbstractTileSource.\<init\>([Ljava\/lang\/String;I)V" {
subgraph cluster_Region_2059175217 {
label = "R(2:0|(1:19)(1:(2:16|17)(3:7|(1:(1:11)(1:13))|14)))";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
subgraph cluster_IfRegion_973606029 {
label = "IF [B:1:0x001e, B:3:0x0021] THEN: R(1:19) ELSE: R(1:(2:16|17)(3:7|(1:(1:11)(1:13))|14))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x001e|if (r4 == null) goto L_0x005d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|ADDED_TO_REGION\l|if (r4.length == 0) goto L_0x005d\l}"];
subgraph cluster_Region_2117145876 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0064|throw new java.lang.IllegalArgumentException(\"no host names specified\")\l}"];
}
subgraph cluster_Region_371719213 {
label = "R(1:(2:16|17)(3:7|(1:(1:11)(1:13))|14)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_137127637 {
label = "IF [B:4:0x0023, B:6:0x0028] THEN: R(2:16|17) ELSE: R(3:7|(1:(1:11)(1:13))|14) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0023|if (r5 \< 0) goto L_0x0046\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|ADDED_TO_REGION\l|if (r5 \> 65535) goto L_0x0046\l}"];
subgraph cluster_Region_1916436281 {
label = "R(2:16|17)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0046}"];
Node_17 [shape=record,label="{17\:\ 0x005c|throw new java.lang.IllegalArgumentException(\"invalid port number: \" + r5)\l}"];
}
subgraph cluster_Region_489266207 {
label = "R(3:7|(1:(1:11)(1:13))|14)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002a|int int r0 = r4.length\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1411963611 {
label = "LOOP:0: (1:(1:11)(1:13))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x002c|LOOP_START\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:7:0x002a, B:11:0x0036] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x002c\-\>B:11:0x0036\l|if (r1 \< r0) goto L_0x002e\l}"];
subgraph cluster_Region_81087967 {
label = "R(1:(1:11)(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1566076535 {
label = "IF [B:10:0x0034] THEN: R(1:11) ELSE: R(1:13)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0034|if (r4[r1].isEmpty() == false) goto L_0x0036\l}"];
subgraph cluster_Region_668152132 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0036|LOOP_END\lLOOP:0: B:8:0x002c\-\>B:11:0x0036\l|r1++\l}"];
}
subgraph cluster_Region_758779900 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0040|throw new java.lang.IllegalArgumentException(\"empty host name in host name list\")\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x0041|r3.hostNames = r4\lr3.port = r5\l}"];
}
}
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0020}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0025}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x002e}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0039}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0045}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x005d}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0039|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0041|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.layer.download.tilesource.AbstractTileSource.\<init\>((r3v0 'this' org.mapsforge.map.layer.download.tilesource.AbstractTileSource A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.String[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_18;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_18;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_16 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_21[style=dashed];
Node_10 -> Node_11;
Node_10 -> Node_20[style=dashed];
Node_11 -> Node_8;
Node_14 -> Node_15;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_18 -> Node_19;
Node_20 -> Node_12;
Node_21 -> Node_14;
}

