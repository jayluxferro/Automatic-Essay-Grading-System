digraph "CFG fororg.mapsforge.map.layer.download.TileDownloadThread.downloadTile(Lorg\/mapsforge\/map\/layer\/download\/DownloadJob;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.download.TileDownloader) =  org.mapsforge.map.layer.download.TileDownloader \l0x0002: IGET  (r1 I:org.mapsforge.core.graphics.GraphicFactory) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.graphicFactory org.mapsforge.core.graphics.GraphicFactory \l0x0004: INVOKE  \l  (r0 I:org.mapsforge.map.layer.download.TileDownloader)\l  (r4 I:org.mapsforge.map.layer.download.DownloadJob)\l  (r1 I:org.mapsforge.core.graphics.GraphicFactory)\l org.mapsforge.map.layer.download.TileDownloader.\<init\>(org.mapsforge.map.layer.download.DownloadJob, org.mapsforge.core.graphics.GraphicFactory):void type: DIRECT \l0x0007: INVOKE  (r0 I:org.mapsforge.core.graphics.TileBitmap) = (r0 I:org.mapsforge.map.layer.download.TileDownloader) org.mapsforge.map.layer.download.TileDownloader.downloadImage():org.mapsforge.core.graphics.TileBitmap type: VIRTUAL \l0x000b: INVOKE  (r1 I:boolean) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.isInterrupted():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002c \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x002c \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IGET  (r1 I:org.mapsforge.map.model.DisplayModel) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.displayModel org.mapsforge.map.model.DisplayModel \l0x0015: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x0019: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.displayModel org.mapsforge.map.model.DisplayModel \l0x001b: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x001f: INVOKE  \l  (r0 I:org.mapsforge.core.graphics.TileBitmap)\l  (r1 I:int)\l  (r2 I:int)\l org.mapsforge.core.graphics.TileBitmap.scaleTo(int, int):void type: INTERFACE \l0x0022: IGET  (r1 I:org.mapsforge.map.layer.cache.TileCache) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.tileCache org.mapsforge.map.layer.cache.TileCache \l0x0024: INVOKE  \l  (r1 I:org.mapsforge.map.layer.cache.TileCache)\l  (r4 I:org.mapsforge.map.layer.queue.Job)\l  (r0 I:org.mapsforge.core.graphics.TileBitmap)\l org.mapsforge.map.layer.cache.TileCache.put(org.mapsforge.map.layer.queue.Job, org.mapsforge.core.graphics.TileBitmap):void type: INTERFACE \l0x0027: IGET  (r4 I:org.mapsforge.map.layer.Layer) = (r3 I:org.mapsforge.map.layer.download.TileDownloadThread) org.mapsforge.map.layer.download.TileDownloadThread.layer org.mapsforge.map.layer.Layer \l0x0029: INVOKE  (r4 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layer.requestRedraw():void type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x002c|0x002c: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.download.TileDownloadThread.downloadTile((r3 'this' I:org.mapsforge.map.layer.download.TileDownloadThread A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.map.layer.download.DownloadJob A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
}

