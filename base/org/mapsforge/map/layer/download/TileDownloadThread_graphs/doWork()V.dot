digraph "CFG fororg.mapsforge.map.layer.download.TileDownloadThread.doWork()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.map.layer.download.DownloadJob r0 = r5.jobQueue.get()\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|SYNTHETIC\lSplitter:B:1:0x0008\l}"];
Node_2 [shape=record,label="{2\:\ ?|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lSplitter:B:1:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l|if (r5.tileCache.containsKey(r0) != false) goto L_0x0013     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l|downloadTile(r0)     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|r5.jobQueue.remove(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler: all (r1v1 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:8:0x001c\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|ExcHandler: IOException (r1v0 'e' java.io.IOException A[CUSTOM_DECLARE])\lSplitter:B:1:0x0008\l|java.io.IOException r1 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|SYNTHETIC\lSplitter:B:8:0x001c\l}"];
Node_9 [shape=record,label="{9\:\ ?|Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\lSplitter:B:8:0x001c\l|LOGGER.log(java.util.logging.Level.SEVERE, r1.getMessage(), r1)     \/\/ Catch:\{ IOException \-\> 0x001b, all \-\> 0x0019 \}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|r5.jobQueue.remove(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|throw r1\l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.layer.download.TileDownloadThread.doWork((r5v0 'this' org.mapsforge.map.layer.download.TileDownloadThread A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_10;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_6;
Node_9 -> Node_5;
Node_11 -> Node_12;
}

