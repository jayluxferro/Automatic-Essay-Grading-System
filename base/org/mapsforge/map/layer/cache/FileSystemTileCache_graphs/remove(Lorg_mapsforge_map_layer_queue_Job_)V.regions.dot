digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.remove(Lorg\/mapsforge\/map\/layer\/queue\/Job;)V" {
subgraph cluster_Region_267824522 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_2032995950 {
label = "Try: R(1:1) finally: R(3:4|5|6)";
node [shape=record,color=blue];
subgraph cluster_Region_1143170617 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x001c \}\lSplitter:B:0:0x0000\l|r1.lock.writeLock().lock()     \/\/ Catch:\{ all \-\> 0x001c \}\lr1.lruCache.remove(r2.getKey())     \/\/ Catch:\{ all \-\> 0x001c \}\l}"];
}
subgraph cluster_Region_1392882938 {
label = "R(3:4|5|6) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001c|ExcHandler:  FINALLY\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|FINALLY_INSNS\l|r1.lock.writeLock().unlock()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|throw r2\l}"];
}
}
}
subgraph cluster_Region_1392882938 {
label = "R(3:4|5|6) | ExcHandler:  FINALLY\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001c|ExcHandler:  FINALLY\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|FINALLY_INSNS\l|r1.lock.writeLock().unlock()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|throw r2\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0012|DONT_GENERATE\l|java.util.concurrent.locks.ReentrantReadWriteLock r2 = r1.lock\ljava.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r2 = r2.writeLock()\lr2.unlock()\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001b}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.cache.FileSystemTileCache.remove((r1v0 'this' org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r2v0 org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_2 -> Node_3;
}

