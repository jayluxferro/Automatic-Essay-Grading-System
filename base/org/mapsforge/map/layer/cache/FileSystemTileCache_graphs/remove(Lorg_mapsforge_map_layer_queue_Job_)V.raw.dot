digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.remove(Lorg\/mapsforge\/map\/layer\/queue\/Job;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ all \-\> 0x001c \}, TRY_ENTER]\l0x0002: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}]\l0x0006: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}]\l0x0009: IGET  (r0 I:org.mapsforge.map.layer.cache.FileWorkingSetCache\<java.lang.String\>) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lruCache org.mapsforge.map.layer.cache.FileWorkingSetCache A[Catch:\{ all \-\> 0x001c \}]\l0x000b: INVOKE  (r2 I:java.lang.String) = (r2 I:org.mapsforge.map.layer.queue.Job) org.mapsforge.map.layer.queue.Job.getKey():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}]\l0x000f: INVOKE  \l  (r0 I:org.mapsforge.map.layer.cache.FileWorkingSetCache)\l  (r2 I:java.lang.Object)\l org.mapsforge.map.layer.cache.FileWorkingSetCache.remove(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|0x0012: IGET  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock \l0x0014: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL \l0x0018: INVOKE  \l  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: RETURN   \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|ExcHandler: all null\lSplitter:B:0:0x0000\l|0x001c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: IGET  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock \l0x001f: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL \l0x0023: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.cache.FileSystemTileCache.remove((r1 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_4;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
}

