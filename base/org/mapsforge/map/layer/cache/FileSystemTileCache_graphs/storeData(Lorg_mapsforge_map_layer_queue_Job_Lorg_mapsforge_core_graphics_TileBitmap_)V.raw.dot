digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.storeData(Lorg\/mapsforge\/map\/layer\/queue\/Job;Lorg\/mapsforge\/core\/graphics\/TileBitmap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r1 I:java.io.File) = \l  (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l  (r4 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.FileSystemTileCache.getOutputFile(org.mapsforge.map.layer.queue.Job):java.io.File type: DIRECT A[Catch:\{ Exception \-\> 0x0062 \}, TRY_ENTER]\l0x0004: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r0 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|SYNTHETIC\lSplitter:B:6:0x000b\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x000b\l|0x000b: NEW_INSTANCE  (r2 I:java.io.FileOutputStream) =  java.io.FileOutputStream A[Catch:\{ Exception \-\> 0x0062 \}, TRY_ENTER]\l0x000d: INVOKE  (r2 I:java.io.FileOutputStream), (r1 I:java.io.File) java.io.FileOutputStream.\<init\>(java.io.File):void type: DIRECT A[Catch:\{ Exception \-\> 0x0062 \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|SYNTHETIC\lSplitter:B:8:0x0010\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0010\l|0x0010: INVOKE  \l  (r5 I:org.mapsforge.core.graphics.TileBitmap)\l  (r2 I:java.io.OutputStream)\l org.mapsforge.core.graphics.TileBitmap.compress(java.io.OutputStream):void type: INTERFACE A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|SYNTHETIC\lSplitter:B:10:0x0013\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x0013\l|0x0013: IGET  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ all \-\> 0x004f \}, TRY_ENTER]\l0x0015: INVOKE  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x0019: INVOKE  \l  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x001c: IGET  (r5 I:org.mapsforge.map.layer.cache.FileWorkingSetCache\<java.lang.String\>) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lruCache org.mapsforge.map.layer.cache.FileWorkingSetCache A[Catch:\{ all \-\> 0x004f \}]\l0x001e: INVOKE  (r0 I:java.lang.String) = (r4 I:org.mapsforge.map.layer.queue.Job) org.mapsforge.map.layer.queue.Job.getKey():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x0022: INVOKE  (r5 I:java.lang.Object) = \l  (r5 I:org.mapsforge.map.layer.cache.FileWorkingSetCache)\l  (r0 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l org.mapsforge.map.layer.cache.FileWorkingSetCache.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0042 A[Catch:\{ all \-\> 0x004f \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|0x0028: SGET  (r5 I:java.util.logging.Logger) =  org.mapsforge.map.layer.cache.FileSystemTileCache.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x004f \}]\l0x002a: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x004f \}]\l0x002c: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x004f \}]\l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"overwriting cached entry: \" A[Catch:\{ all \-\> 0x004f \}]\l0x0031: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x0034: INVOKE  (r4 I:java.lang.String) = (r4 I:org.mapsforge.map.layer.queue.Job) org.mapsforge.map.layer.queue.Job.getKey():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x0038: INVOKE  (r0 I:java.lang.StringBuilder), (r4 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x003b: INVOKE  (r4 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}]\l0x003f: INVOKE  (r5 I:java.util.logging.Logger), (r4 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x004f \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|SYNTHETIC\lSplitter:B:14:0x0042\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0042\l|0x0042: IGET  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}, TRY_ENTER]\l0x0044: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}]\l0x0048: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x004b|0x004b: INVOKE  (r2 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|ExcHandler: all null\lSplitter:B:10:0x0013\l|0x004f: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x0050|SYNTHETIC\lSplitter:B:18:0x0050\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x0050\l|0x0050: IGET  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}, TRY_ENTER]\l0x0052: INVOKE  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}]\l0x0056: INVOKE  \l  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|0x0059: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ Exception \-\> 0x005d, all \-\> 0x005a \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005a|ExcHandler: all null\lSplitter:B:8:0x0010\l|0x005a: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|0x005b: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|ExcHandler: Exception null\lSplitter:B:8:0x0010\l|0x005d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0060|ExcHandler: all null\lSplitter:B:28:0x0063\l|0x0060: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_27 [shape=record,label="{27\:\ 0x0062|ExcHandler: Exception null\lSplitter:B:1:0x0001\l|0x0062: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_28 [shape=record,label="{28\:\ 0x0063|SYNTHETIC\lSplitter:B:28:0x0063\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0063\l|0x0063: SGET  (r5 I:java.util.logging.Logger) =  org.mapsforge.map.layer.cache.FileSystemTileCache.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l0x0065: SGET  (r1 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level A[Catch:\{ all \-\> 0x0060 \}]\l0x0067: CONST_STR  (r2 I:java.lang.String) =  \"Disabling filesystem cache\" A[Catch:\{ all \-\> 0x0060 \}]\l0x0069: INVOKE  \l  (r5 I:java.util.logging.Logger)\l  (r1 I:java.util.logging.Level)\l  (r2 I:java.lang.String)\l  (r4 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l0x006c: INVOKE  (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.destroy():void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x006f|SYNTHETIC\lSplitter:B:30:0x006f\l}"];
Node_31 [shape=record,label="{31\:\ ?|Splitter:B:30:0x006f\l|0x006f: IGET  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ all \-\> 0x008d \}, TRY_ENTER]\l0x0071: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x008d \}]\l0x0075: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x008d \}]\l0x0078: NEW_INSTANCE  (r4 I:org.mapsforge.map.layer.cache.FileWorkingSetCache) =  org.mapsforge.map.layer.cache.FileWorkingSetCache A[Catch:\{ all \-\> 0x008d \}]\l0x007a: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x008d \}]\l0x007b: INVOKE  \l  (r4 I:org.mapsforge.map.layer.cache.FileWorkingSetCache)\l  (r5 I:int)\l org.mapsforge.map.layer.cache.FileWorkingSetCache.\<init\>(int):void type: DIRECT A[Catch:\{ all \-\> 0x008d \}]\l0x007e: IPUT  \l  (r4 I:org.mapsforge.map.layer.cache.FileWorkingSetCache\<java.lang.String\>)\l  (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.lruCache org.mapsforge.map.layer.cache.FileWorkingSetCache A[Catch:\{ all \-\> 0x008d \}, TRY_LEAVE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0080|SYNTHETIC\lSplitter:B:32:0x0080\l}"];
Node_33 [shape=record,label="{33\:\ ?|Splitter:B:32:0x0080\l|0x0080: IGET  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l0x0082: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l0x0086: INVOKE  \l  (r4 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0089|0x0089: INVOKE  (r0 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_35 [shape=record,label="{35\:\ 0x008c|0x008c: RETURN   \l}"];
Node_36 [shape=record,label="{36\:\ 0x008d|ExcHandler: all null\lSplitter:B:30:0x006f\l|0x008d: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x008e|SYNTHETIC\lSplitter:B:37:0x008e\l}"];
Node_38 [shape=record,label="{38\:\ ?|Splitter:B:37:0x008e\l|0x008e: IGET  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock A[Catch:\{ all \-\> 0x0060 \}, TRY_ENTER]\l0x0090: INVOKE  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l0x0094: INVOKE  \l  (r5 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL A[Catch:\{ all \-\> 0x0060 \}]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0097|0x0097: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x0060 \}, TRY_LEAVE]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0098|0x0098: INVOKE  (r0 I:java.io.Closeable) org.mapsforge.core.util.IOUtils.closeQuietly(java.io.Closeable):void type: STATIC \l}"];
Node_41 [shape=record,label="{41\:\ 0x009b|0x009b: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.cache.FileSystemTileCache.storeData((r3 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.mapsforge.core.graphics.TileBitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_27;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_27;
Node_7 -> Node_8;
Node_7 -> Node_27;
Node_8 -> Node_9;
Node_8 -> Node_23;
Node_8 -> Node_21;
Node_9 -> Node_10;
Node_9 -> Node_23;
Node_9 -> Node_21;
Node_10 -> Node_11;
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_23;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_15 -> Node_23;
Node_15 -> Node_21;
Node_16 -> Node_35;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_23;
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_40;
Node_23 -> Node_24;
Node_24 -> Node_28;
Node_25 -> Node_40;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_25;
Node_29 -> Node_30;
Node_29 -> Node_25;
Node_30 -> Node_31;
Node_30 -> Node_36;
Node_31 -> Node_32;
Node_31 -> Node_36;
Node_32 -> Node_33;
Node_32 -> Node_25;
Node_33 -> Node_34;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_25;
Node_38 -> Node_39;
Node_40 -> Node_41;
}

