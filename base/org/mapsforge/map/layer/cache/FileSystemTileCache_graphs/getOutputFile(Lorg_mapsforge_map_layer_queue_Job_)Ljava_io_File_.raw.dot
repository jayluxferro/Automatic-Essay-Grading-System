digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.getOutputFile(Lorg\/mapsforge\/map\/layer\/queue\/Job;)Ljava\/io\/File;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:java.io.File) = (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.cacheDirectory java.io.File \l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x000a: SGET  (r1 I:java.lang.String) =  java.io.File.separator java.lang.String \l0x000c: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x000f: INVOKE  (r3 I:java.lang.String) = (r3 I:org.mapsforge.map.layer.queue.Job) org.mapsforge.map.layer.queue.Job.getKey():java.lang.String type: VIRTUAL \l0x0013: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0016: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x001a: SGET  (r0 I:char) =  java.io.File.separatorChar char \l0x001c: INVOKE  (r0 I:int) = (r3 I:java.lang.String), (r0 I:int) java.lang.String.lastIndexOf(int):int type: VIRTUAL \l0x0020: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.String), (r1 I:int), (r0 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x0025: NEW_INSTANCE  (r1 I:java.io.File) =  java.io.File \l0x0027: INVOKE  (r1 I:java.io.File), (r0 I:java.lang.String) java.io.File.\<init\>(java.lang.String):void type: DIRECT \l0x002a: INVOKE  (r0 I:boolean) = (r1 I:java.io.File) org.mapsforge.map.layer.cache.FileSystemTileCache.isValidCacheDirectory(java.io.File):boolean type: STATIC \l}"];
Node_1 [shape=record,label="{1\:\ 0x002e|0x002e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0047 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:java.io.File) =  java.io.File \l0x0032: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0034: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003a: CONST_STR  (r3 I:java.lang.String) =  \".tile\" \l0x003c: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003f: INVOKE  (r3 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0043: INVOKE  (r0 I:java.io.File), (r3 I:java.lang.String) java.io.File.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_3 [shape=record,label="{3\:\ 0x0046|0x0046: RETURN  (r0 I:java.io.File) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0047|0x0047: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_5 [shape=record,label="{5\:\ 0x0048|0x0048: RETURN  (r3 I:java.io.File) \l}"];
MethodNode[shape=record,label="{private java.io.File org.mapsforge.map.layer.cache.FileSystemTileCache.getOutputFile((r2 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r3 I:org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

