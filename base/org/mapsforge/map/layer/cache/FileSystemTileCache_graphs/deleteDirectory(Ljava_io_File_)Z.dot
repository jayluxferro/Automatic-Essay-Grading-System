digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.deleteDirectory(Ljava\/io\/File;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 != null) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r5.isDirectory() == false) goto L_0x0025\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|java.lang.String[] r1 = r5.list()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|if (r1 == null) goto L_0x0025\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|r2 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|LOOP_START\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:7:0x0010, B:13:0x0022] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x0011\-\>B:13:0x0022\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|if (r2 \>= r1.length) goto L_0x0025\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014}"];
Node_11 [shape=record,label="{11\:\ 0x001f|if (deleteDirectory(new java.io.File(r5, r1[r2])) != false) goto L_0x0022\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|LOOP_END\lLOOP:0: B:8:0x0011\-\>B:13:0x0022\l|int r2 = r2 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025}"];
Node_15 [shape=record,label="{15\:\ 0x0029|RETURN\l|return r5.delete()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0025|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean org.mapsforge.map.layer.cache.FileSystemTileCache.deleteDirectory((r5v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_17[style=dashed];
Node_13 -> Node_8;
Node_14 -> Node_15;
Node_16 -> Node_14;
Node_17 -> Node_12;
}

