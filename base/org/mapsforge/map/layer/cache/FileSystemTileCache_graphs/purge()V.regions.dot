digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.purge()V" {
subgraph cluster_Region_1776135362 {
label = "R(1:(2:1|2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1533523787 {
label = "Try: R(2:1|2) catches: R(3:4|5|6)";
node [shape=record,color=blue];
subgraph cluster_Region_465622757 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ all \-\> 0x001d \}\lSplitter:B:0:0x0000\l|r2.lock.writeLock().lock()     \/\/ Catch:\{ all \-\> 0x001d \}\lr2.lruCache.clear()     \/\/ Catch:\{ all \-\> 0x001d \}\l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|r2.lock.writeLock().unlock()\ldeleteDirectory(r2.cacheDirectory)\l}"];
}
subgraph cluster_Region_672933745 {
label = "R(3:4|5|6) | ExcHandler: all (r0v0 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|ExcHandler: all (r0v0 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|r2.lock.writeLock().unlock()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|throw r0\l}"];
}
}
}
subgraph cluster_Region_672933745 {
label = "R(3:4|5|6) | ExcHandler: all (r0v0 'th' java.lang.Throwable A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001d|ExcHandler: all (r0v0 'th' java.lang.Throwable A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|r2.lock.writeLock().unlock()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|throw r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001c}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.cache.FileSystemTileCache.purge((r2v0 'this' org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]))  | JADX INFO: finally extract failed\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_0 -> Node_1;
Node_0 -> Node_4;
}

