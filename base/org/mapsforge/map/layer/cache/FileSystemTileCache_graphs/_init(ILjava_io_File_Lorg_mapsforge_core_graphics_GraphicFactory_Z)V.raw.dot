digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.\<init\>(ILjava\/io\/File;Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:java.lang.Object) java.lang.Object.\<init\>():void type: DIRECT \l0x0003: NEW_INSTANCE  (r0 I:org.mapsforge.map.model.common.Observable) =  org.mapsforge.map.model.common.Observable \l0x0005: INVOKE  (r0 I:org.mapsforge.map.model.common.Observable) org.mapsforge.map.model.common.Observable.\<init\>():void type: DIRECT \l0x0008: IPUT  \l  (r0 I:org.mapsforge.map.model.common.Observable)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.observable org.mapsforge.map.model.common.Observable \l0x000a: IPUT  \l  (r5 I:boolean)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.persistent boolean \l0x000c: NEW_INSTANCE  (r5 I:org.mapsforge.map.layer.cache.FileWorkingSetCache) =  org.mapsforge.map.layer.cache.FileWorkingSetCache \l0x000e: INVOKE  \l  (r5 I:org.mapsforge.map.layer.cache.FileWorkingSetCache)\l  (r2 I:int)\l org.mapsforge.map.layer.cache.FileWorkingSetCache.\<init\>(int):void type: DIRECT \l0x0011: IPUT  \l  (r5 I:org.mapsforge.map.layer.cache.FileWorkingSetCache\<java.lang.String\>)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.lruCache org.mapsforge.map.layer.cache.FileWorkingSetCache \l0x0013: NEW_INSTANCE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) =  java.util.concurrent.locks.ReentrantReadWriteLock \l0x0015: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.\<init\>():void type: DIRECT \l0x0018: IPUT  \l  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.lock java.util.concurrent.locks.ReentrantReadWriteLock \l0x001a: INVOKE  (r2 I:boolean) = (r3 I:java.io.File) org.mapsforge.map.layer.cache.FileSystemTileCache.isValidCacheDirectory(java.io.File):boolean type: STATIC \l0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x001f|0x001f: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0035 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0021|0x0021: IPUT  \l  (r3 I:java.io.File)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.cacheDirectory java.io.File \l0x0023: IGET  (r2 I:boolean) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.persistent boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0037 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: NEW_INSTANCE  (r2 I:java.lang.Thread) =  java.lang.Thread \l0x0029: NEW_INSTANCE  (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader) =  org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader \l0x002b: INVOKE  \l  (r3 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l  (r5 I:org.mapsforge.map.layer.cache.FileSystemTileCache$1)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.\<init\>(org.mapsforge.map.layer.cache.FileSystemTileCache, org.mapsforge.map.layer.cache.FileSystemTileCache$1):void type: DIRECT \l0x002e: INVOKE  (r2 I:java.lang.Thread), (r3 I:java.lang.Runnable) java.lang.Thread.\<init\>(java.lang.Runnable):void type: DIRECT \l0x0031: INVOKE  (r2 I:java.lang.Thread) java.lang.Thread.start():void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|0x0035: IPUT  \l  (r5 I:java.io.File)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.cacheDirectory java.io.File \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: IPUT  \l  (r4 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l org.mapsforge.map.layer.cache.FileSystemTileCache.graphicFactory org.mapsforge.core.graphics.GraphicFactory \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.cache.FileSystemTileCache.\<init\>((r1 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

