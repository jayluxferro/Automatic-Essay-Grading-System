digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.put(Lorg\/mapsforge\/map\/layer\/queue\/Job;Lorg\/mapsforge\/core\/graphics\/TileBitmap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.getCapacity():int type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache)\l  (r2 I:org.mapsforge.map.layer.queue.Job)\l  (r3 I:org.mapsforge.core.graphics.TileBitmap)\l org.mapsforge.map.layer.cache.FileSystemTileCache.storeData(org.mapsforge.map.layer.queue.Job, org.mapsforge.core.graphics.TileBitmap):void type: DIRECT \l0x000e: IGET  (r2 I:org.mapsforge.map.model.common.Observable) = (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.observable org.mapsforge.map.model.common.Observable \l0x0010: INVOKE  (r2 I:org.mapsforge.map.model.common.Observable) org.mapsforge.map.model.common.Observable.notifyObservers():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: RETURN   \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0016: CONST_STR  (r3 I:java.lang.String) =  \"bitmap must not be null\" \l0x0018: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001e: CONST_STR  (r3 I:java.lang.String) =  \"key must not be null\" \l0x0020: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.cache.FileSystemTileCache.put((r1 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.mapsforge.core.graphics.TileBitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_9;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

