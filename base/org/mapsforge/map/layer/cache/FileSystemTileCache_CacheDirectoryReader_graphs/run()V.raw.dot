digraph "CFG fororg.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r18 I:?[OBJECT, ARRAY]) \l0x0002: IGET  (r0 I:org.mapsforge.map.layer.cache.FileSystemTileCache) = \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.this$0 org.mapsforge.map.layer.cache.FileSystemTileCache \l0x0004: INVOKE  (r0 I:java.io.File) = (r0 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.access$000(org.mapsforge.map.layer.cache.FileSystemTileCache):java.io.File type: STATIC \l0x0008: INVOKE  (r0 I:java.io.File[]) = (r0 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00d3 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: ARRAY_LENGTH  (r2 I:int) = (r0 I:?[]) \l0x000f: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0010: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r4 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:29:0x00d3 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: AGET  (r5 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x0015: INVOKE  (r6 I:java.io.File[]) = (r5 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00c7 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: ARRAY_LENGTH  (r7 I:int) = (r6 I:?[]) \l0x001c: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r8 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:28:0x00c7 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: AGET  (r9 I:?[OBJECT, ARRAY]) = (r6 I:?[OBJECT, ARRAY][]), (r8 I:?[int, short, byte, char]) \l0x0021: INVOKE  (r10 I:java.io.File[]) = (r9 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00bb \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: ARRAY_LENGTH  (r11 I:int) = (r10 I:?[]) \l0x0028: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: IF  (r12 I:?[int, byte, short, char]) \>= (r11 I:?[int, byte, short, char])  \-\> B:27:0x00bb \l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: AGET  (r13 I:?[OBJECT, ARRAY]) = \l  (r10 I:?[OBJECT, ARRAY][])\l  (r12 I:?[int, short, byte, char])\l \l0x002d: INVOKE  (r14 I:boolean) = (r13 I:java.io.File) org.mapsforge.map.layer.cache.FileSystemTileCache.access$100(java.io.File):boolean type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00af \l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|0x0033: INVOKE  (r14 I:java.lang.String) = (r13 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0037: CONST_STR  (r15 I:java.lang.String) =  \".tile\" \l0x0039: INVOKE  (r14 I:boolean) = (r14 I:java.lang.String), (r15 I:java.lang.String) java.lang.String.endsWith(java.lang.String):boolean type: VIRTUAL \l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|0x003d: IF  (r14 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x00af \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: INVOKE  (r14 I:java.lang.String) = (r13 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0043: CONST_STR  (r15 I:java.lang.String) =  \".tile\" \l0x0045: INVOKE  (r14 I:int) = (r14 I:java.lang.String), (r15 I:java.lang.String) java.lang.String.lastIndexOf(java.lang.String):int type: VIRTUAL \l0x0049: INVOKE  (r15 I:java.lang.String) = (r5 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x004d: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x004f: INVOKE  (r0 I:java.lang.String) = (r9 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0053: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0055: INVOKE  (r2 I:java.lang.String) = (r13 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0059: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String), (r3 I:int), (r14 I:int) java.lang.String.substring(int, int):java.lang.String type: VIRTUAL \l0x005d: INVOKE  (r0 I:java.lang.String) = \l  (r15 I:java.lang.String)\l  (r0 I:java.lang.String)\l  (r2 I:java.lang.String)\l org.mapsforge.map.layer.queue.Job.composeKey(java.lang.String, java.lang.String, java.lang.String):java.lang.String type: STATIC \l}"];
Node_17 [shape=record,label="{17\:\ 0x0061|SYNTHETIC\lSplitter:B:17:0x0061\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0061\l|0x0061: IGET  (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) = \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.this$0 org.mapsforge.map.layer.cache.FileSystemTileCache A[Catch:\{ all \-\> 0x00a0 \}, TRY_ENTER]\l0x0063: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.access$200(org.mapsforge.map.layer.cache.FileSystemTileCache):java.util.concurrent.locks.ReentrantReadWriteLock type: STATIC A[Catch:\{ all \-\> 0x00a0 \}]\l0x0067: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l0x006b: INVOKE  \l  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l0x006e: IGET  (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) = \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.this$0 org.mapsforge.map.layer.cache.FileSystemTileCache A[Catch:\{ all \-\> 0x00a0 \}]\l0x0070: INVOKE  (r2 I:org.mapsforge.map.layer.cache.FileWorkingSetCache) = (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.access$300(org.mapsforge.map.layer.cache.FileSystemTileCache):org.mapsforge.map.layer.cache.FileWorkingSetCache type: STATIC A[Catch:\{ all \-\> 0x00a0 \}]\l0x0074: INVOKE  (r2 I:java.lang.Object) = \l  (r2 I:org.mapsforge.map.layer.cache.FileWorkingSetCache)\l  (r0 I:java.lang.Object)\l  (r13 I:java.lang.Object)\l org.mapsforge.map.layer.cache.FileWorkingSetCache.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0078|0x0078: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0092 A[Catch:\{ all \-\> 0x00a0 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x007a|0x007a: INVOKE  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.layer.cache.FileSystemTileCache.access$400():java.util.logging.Logger type: STATIC A[Catch:\{ all \-\> 0x00a0 \}]\l0x007e: NEW_INSTANCE  (r13 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x00a0 \}]\l0x0080: INVOKE  (r13 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x00a0 \}]\l0x0083: CONST_STR  (r14 I:java.lang.String) =  \"overwriting cached entry: \" A[Catch:\{ all \-\> 0x00a0 \}]\l0x0085: INVOKE  (r13 I:java.lang.StringBuilder), (r14 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l0x0088: INVOKE  (r13 I:java.lang.StringBuilder), (r0 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l0x008b: INVOKE  (r0 I:java.lang.String) = (r13 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}]\l0x008f: INVOKE  (r2 I:java.util.logging.Logger), (r0 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x00a0 \}, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0092|0x0092: IGET  (r0 I:org.mapsforge.map.layer.cache.FileSystemTileCache) = \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.this$0 org.mapsforge.map.layer.cache.FileSystemTileCache \l0x0094: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r0 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.access$200(org.mapsforge.map.layer.cache.FileSystemTileCache):java.util.concurrent.locks.ReentrantReadWriteLock type: STATIC \l0x0098: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL \l0x009c: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a0|ExcHandler: all null\lSplitter:B:17:0x0061\l|0x00a0: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_23 [shape=record,label="{23\:\ 0x00a1|0x00a1: IGET  (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) = \l  (r1 I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader)\l org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.this$0 org.mapsforge.map.layer.cache.FileSystemTileCache \l0x00a3: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) = (r2 I:org.mapsforge.map.layer.cache.FileSystemTileCache) org.mapsforge.map.layer.cache.FileSystemTileCache.access$200(org.mapsforge.map.layer.cache.FileSystemTileCache):java.util.concurrent.locks.ReentrantReadWriteLock type: STATIC \l0x00a7: INVOKE  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock) java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock type: VIRTUAL \l0x00ab: INVOKE  \l  (r2 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)\l java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00ae|0x00ae: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00af|0x00af: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00b1: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x00b3|0x00b3: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l0x00b5: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00b7: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x00bb|0x00bb: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00bd: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00bf: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x00c1: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00c3: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00c7|0x00c7: MOVE  (r16 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x00c9: MOVE  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00cb: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x00cd: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r16 I:?[OBJECT, ARRAY]) \l0x00cf: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x00d3|0x00d3: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.cache.FileSystemTileCache.CacheDirectoryReader.run((r18 'this' I:org.mapsforge.map.layer.cache.FileSystemTileCache$CacheDirectoryReader A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_29;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_29;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_28;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_28;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_27;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_27;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_25;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_25;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_11;
Node_27 -> Node_7;
Node_28 -> Node_3;
}

