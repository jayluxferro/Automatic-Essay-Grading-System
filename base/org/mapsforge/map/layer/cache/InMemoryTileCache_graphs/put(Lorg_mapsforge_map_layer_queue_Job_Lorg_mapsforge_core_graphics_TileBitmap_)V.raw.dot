digraph "CFG fororg.mapsforge.map.layer.cache.InMemoryTileCache.put(Lorg\/mapsforge\/map\/layer\/queue\/Job;Lorg\/mapsforge\/core\/graphics\/TileBitmap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0042 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x003a \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|SYNTHETIC\lSplitter:B:3:0x0005\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0005\l|0x0005: IGET  (r0 I:org.mapsforge.map.layer.cache.BitmapLRUCache) = (r3 I:org.mapsforge.map.layer.cache.InMemoryTileCache) org.mapsforge.map.layer.cache.InMemoryTileCache.lruCache org.mapsforge.map.layer.cache.BitmapLRUCache A[Catch:\{ all \-\> 0x004a \}, TRY_ENTER]\l0x0007: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:org.mapsforge.map.layer.cache.BitmapLRUCache)\l  (r4 I:java.lang.Object)\l org.mapsforge.map.layer.cache.BitmapLRUCache.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x000b: CHECK_CAST  (r0 I:org.mapsforge.core.graphics.TileBitmap) = (org.mapsforge.core.graphics.TileBitmap) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: INVOKE  (r0 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.decrementRefCount():void type: INTERFACE A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IGET  (r0 I:org.mapsforge.map.layer.cache.BitmapLRUCache) = (r3 I:org.mapsforge.map.layer.cache.InMemoryTileCache) org.mapsforge.map.layer.cache.InMemoryTileCache.lruCache org.mapsforge.map.layer.cache.BitmapLRUCache A[Catch:\{ all \-\> 0x004a \}]\l0x0014: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:org.mapsforge.map.layer.cache.BitmapLRUCache)\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l org.mapsforge.map.layer.cache.BitmapLRUCache.put(java.lang.Object, java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0030 A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.layer.cache.InMemoryTileCache.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x004a \}]\l0x001c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x004a \}]\l0x001e: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x004a \}]\l0x0021: CONST_STR  (r2 I:java.lang.String) =  \"overwriting cached entry: \" A[Catch:\{ all \-\> 0x004a \}]\l0x0023: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x0026: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x0029: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l0x002d: INVOKE  (r0 I:java.util.logging.Logger), (r4 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: INVOKE  (r5 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.incrementRefCount():void type: INTERFACE A[Catch:\{ all \-\> 0x004a \}]\l0x0033: IGET  (r4 I:org.mapsforge.map.model.common.Observable) = (r3 I:org.mapsforge.map.layer.cache.InMemoryTileCache) org.mapsforge.map.layer.cache.InMemoryTileCache.observable org.mapsforge.map.model.common.Observable A[Catch:\{ all \-\> 0x004a \}]\l0x0035: INVOKE  (r4 I:org.mapsforge.map.model.common.Observable) org.mapsforge.map.model.common.Observable.notifyObservers():void type: VIRTUAL A[Catch:\{ all \-\> 0x004a \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|0x0039: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|SYNTHETIC\lSplitter:B:13:0x003a\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x003a\l|0x003a: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x004a \}, TRY_ENTER]\l0x003c: CONST_STR  (r5 I:java.lang.String) =  \"bitmap must not be null\" A[Catch:\{ all \-\> 0x004a \}]\l0x003e: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0041|0x0041: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0042|0x0042: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException A[Catch:\{ all \-\> 0x004a \}]\l0x0044: CONST_STR  (r5 I:java.lang.String) =  \"key must not be null\" A[Catch:\{ all \-\> 0x004a \}]\l0x0046: INVOKE  \l  (r4 I:java.lang.IllegalArgumentException)\l  (r5 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT A[Catch:\{ all \-\> 0x004a \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0049|0x0049: THROW  (r4 I:java.lang.Throwable) A[Catch:\{ all \-\> 0x004a \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|ExcHandler: all null\lSplitter:B:3:0x0005\l|0x004a: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_19 [shape=record,label="{19\:\ 0x004b|0x004b: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x004c|0x004c: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.cache.InMemoryTileCache.put((r3 'this' I:org.mapsforge.map.layer.cache.InMemoryTileCache A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.map.layer.queue.Job A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.mapsforge.core.graphics.TileBitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_16;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_13;
Node_3 -> Node_4;
Node_3 -> Node_18;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
}

