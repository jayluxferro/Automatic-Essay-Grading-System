digraph "CFG fororg.mapsforge.map.layer.cache.TwoLevelTileCache.setWorkingSet(Ljava\/util\/Set;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set \l0x0002: INVOKE  (r0 I:java.util.Set) java.util.Set.clear():void type: INTERFACE \l0x0005: IGET  (r0 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set \l0x0007: INVOKE  (r0 I:java.util.Set), (r5 I:java.util.Collection) java.util.Set.addAll(java.util.Collection):boolean type: INTERFACE \l0x000a: IGET  (r5 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.firstLevelTileCache org.mapsforge.map.layer.cache.TileCache \l0x000c: IGET  (r0 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set \l0x000e: INVOKE  \l  (r5 I:org.mapsforge.map.layer.cache.TileCache)\l  (r0 I:java.util.Set)\l org.mapsforge.map.layer.cache.TileCache.setWorkingSet(java.util.Set):void type: INTERFACE \l0x0011: IGET  (r5 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.secondLevelTileCache org.mapsforge.map.layer.cache.TileCache \l0x0013: IGET  (r0 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set \l0x0015: INVOKE  \l  (r5 I:org.mapsforge.map.layer.cache.TileCache)\l  (r0 I:java.util.Set)\l org.mapsforge.map.layer.cache.TileCache.setWorkingSet(java.util.Set):void type: INTERFACE \l0x0018: IGET  (r5 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set \l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|0x001a: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|SYNTHETIC\lSplitter:B:2:0x001b\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x001b\l|0x001b: IGET  (r0 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\>) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.workingSet java.util.Set A[Catch:\{ all \-\> 0x004d \}, TRY_ENTER]\l0x001d: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x004b A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|0x0027: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l0x002b: CHECK_CAST  (r1 I:org.mapsforge.map.layer.queue.Job) = (org.mapsforge.map.layer.queue.Job) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}]\l0x002d: IGET  (r2 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.firstLevelTileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x004d \}]\l0x002f: INVOKE  (r2 I:boolean) = \l  (r2 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IGET  (r2 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.secondLevelTileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x004d \}]\l0x0037: INVOKE  (r2 I:boolean) = \l  (r2 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|0x003b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: IGET  (r2 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.secondLevelTileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x004d \}]\l0x003f: INVOKE  (r2 I:org.mapsforge.core.graphics.TileBitmap) = \l  (r2 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.get(org.mapsforge.map.layer.queue.Job):org.mapsforge.core.graphics.TileBitmap type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0043|0x0043: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0021 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|0x0045: IGET  (r3 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.cache.TwoLevelTileCache) org.mapsforge.map.layer.cache.TwoLevelTileCache.firstLevelTileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x004d \}]\l0x0047: INVOKE  \l  (r3 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l  (r2 I:org.mapsforge.core.graphics.TileBitmap)\l org.mapsforge.map.layer.cache.TileCache.put(org.mapsforge.map.layer.queue.Job, org.mapsforge.core.graphics.TileBitmap):void type: INTERFACE A[Catch:\{ all \-\> 0x004d \}]\l0x004a: GOTO  \-\> 0x0021 A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|0x004c: RETURN   A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004d|ExcHandler: all null\lSplitter:B:2:0x001b\l|0x004d: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x004d \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x004e|0x004e: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x004d \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x004f|0x004f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.cache.TwoLevelTileCache.setWorkingSet((r4 'this' I:org.mapsforge.map.layer.cache.TwoLevelTileCache A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.Set\<org.mapsforge.map.layer.queue.Job\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Set\<, Lorg\/mapsforge\/map\/layer\/queue\/Job;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_4;
Node_7 -> Node_8[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_4;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_11 -> Node_12[style=dashed];
Node_12 -> Node_4;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

