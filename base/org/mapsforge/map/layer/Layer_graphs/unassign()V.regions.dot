digraph "CFG fororg.mapsforge.map.layer.Layer.unassign()V" {
subgraph cluster_Region_1881829172 {
label = "R(1:(1:(1:(1:4)(1:9))))";
node [shape=record,color=blue];
subgraph cluster_Region_265406758 {
label = "R(1:(1:(1:4)(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_986222354 {
label = "R(1:(1:4)(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_503313939 {
label = "IF [B:3:0x0003] THEN: R(1:4) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.assignedRedrawer != null) goto L_0x0005\l}"];
subgraph cluster_Region_1041197399 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|r2.assignedRedrawer = null\lonRemove()\l}"];
}
subgraph cluster_Region_1058414409 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0014|throw new java.lang.IllegalStateException(\"layer is not assigned\")\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,color=red,label="{2\:\ ?}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000b|DONT_GENERATE\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000d|SYNTHETIC\lSplitter:B:7:0x000d\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|Splitter:B:7:0x000d\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0015|REMOVE\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0016|REMOVE\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0017|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{final synchronized void org.mapsforge.map.layer.Layer.unassign((r2v0 'this' org.mapsforge.map.layer.Layer A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

