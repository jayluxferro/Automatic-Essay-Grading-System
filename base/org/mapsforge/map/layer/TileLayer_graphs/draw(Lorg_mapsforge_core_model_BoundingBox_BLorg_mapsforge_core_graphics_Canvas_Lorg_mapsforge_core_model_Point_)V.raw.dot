digraph "CFG fororg.mapsforge.map.layer.TileLayer.draw(Lorg\/mapsforge\/core\/model\/BoundingBox;BLorg\/mapsforge\/core\/graphics\/Canvas;Lorg\/mapsforge\/core\/model\/Point;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.displayModel org.mapsforge.map.model.DisplayModel \l0x0002: INVOKE  (r0 I:int) = (r0 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x0006: INVOKE  (r6 I:java.util.List) = \l  (r6 I:org.mapsforge.core.model.BoundingBox)\l  (r7 I:byte)\l  (r9 I:org.mapsforge.core.model.Point)\l  (r0 I:int)\l org.mapsforge.map.util.LayerUtil.getTilePositions(org.mapsforge.core.model.BoundingBox, byte, org.mapsforge.core.model.Point, int):java.util.List type: STATIC \l0x000a: INVOKE  (r8 I:org.mapsforge.core.graphics.Canvas) org.mapsforge.core.graphics.Canvas.resetClip():void type: INTERFACE \l0x000d: IGET  (r7 I:boolean) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.isTransparent boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|0x000f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001a \l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|0x0011: IGET  (r7 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.displayModel org.mapsforge.map.model.DisplayModel \l0x0013: INVOKE  (r7 I:int) = (r7 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getBackgroundColor():int type: VIRTUAL \l0x0017: INVOKE  (r8 I:org.mapsforge.core.graphics.Canvas), (r7 I:int) org.mapsforge.core.graphics.Canvas.fillColor(int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: NEW_INSTANCE  (r7 I:java.util.HashSet) =  java.util.HashSet \l0x001c: INVOKE  (r7 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x001f: INVOKE  (r9 I:java.util.Iterator) = (r6 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: INVOKE  (r0 I:boolean) = (r9 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|0x0027: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0039 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: INVOKE  (r0 I:java.lang.Object) = (r9 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE \l0x002d: CHECK_CAST  (r0 I:org.mapsforge.map.layer.TilePosition) = (org.mapsforge.map.layer.TilePosition) (r0 I:?[OBJECT, ARRAY]) \l0x002f: IGET  (r0 I:org.mapsforge.core.model.Tile) = (r0 I:org.mapsforge.map.layer.TilePosition) org.mapsforge.map.layer.TilePosition.tile org.mapsforge.core.model.Tile \l0x0031: INVOKE  (r0 I:org.mapsforge.map.layer.queue.Job) = \l  (r5 I:org.mapsforge.map.layer.TileLayer)\l  (r0 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.TileLayer.createJob(org.mapsforge.core.model.Tile):org.mapsforge.map.layer.queue.Job type: VIRTUAL \l0x0035: INVOKE  (r7 I:java.util.Set), (r0 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: IGET  (r9 I:org.mapsforge.map.layer.cache.TileCache) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.tileCache org.mapsforge.map.layer.cache.TileCache \l0x003b: INVOKE  \l  (r9 I:org.mapsforge.map.layer.cache.TileCache)\l  (r7 I:java.util.Set)\l org.mapsforge.map.layer.cache.TileCache.setWorkingSet(java.util.Set):void type: INTERFACE \l0x003e: INVOKE  (r7 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0042: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|0x0044: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:26:0x00a8 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: INVOKE  (r9 I:java.lang.Object) = (r6 I:java.util.List), (r7 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004a: CHECK_CAST  (r9 I:org.mapsforge.map.layer.TilePosition) = (org.mapsforge.map.layer.TilePosition) (r9 I:?[OBJECT, ARRAY]) \l0x004c: IGET  (r0 I:org.mapsforge.core.model.Point) = (r9 I:org.mapsforge.map.layer.TilePosition) org.mapsforge.map.layer.TilePosition.point org.mapsforge.core.model.Point \l0x004e: IGET  (r9 I:org.mapsforge.core.model.Tile) = (r9 I:org.mapsforge.map.layer.TilePosition) org.mapsforge.map.layer.TilePosition.tile org.mapsforge.core.model.Tile \l0x0050: INVOKE  (r1 I:org.mapsforge.map.layer.queue.Job) = \l  (r5 I:org.mapsforge.map.layer.TileLayer)\l  (r9 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.TileLayer.createJob(org.mapsforge.core.model.Tile):org.mapsforge.map.layer.queue.Job type: VIRTUAL \l0x0054: IGET  (r2 I:org.mapsforge.map.layer.cache.TileCache) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.tileCache org.mapsforge.map.layer.cache.TileCache \l0x0056: INVOKE  (r2 I:org.mapsforge.core.graphics.TileBitmap) = \l  (r2 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.getImmediately(org.mapsforge.map.layer.queue.Job):org.mapsforge.core.graphics.TileBitmap type: INTERFACE \l}"];
Node_10 [shape=record,label="{10\:\ 0x005a|0x005a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0071 \l}"];
Node_11 [shape=record,label="{11\:\ 0x005c|0x005c: IGET  (r2 I:boolean) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.hasJobQueue boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x005e|0x005e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0060|0x0060: IGET  (r2 I:org.mapsforge.map.layer.cache.TileCache) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.tileCache org.mapsforge.map.layer.cache.TileCache \l0x0062: INVOKE  (r2 I:boolean) = \l  (r2 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE \l}"];
Node_14 [shape=record,label="{14\:\ 0x0066|0x0066: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006d \l}"];
Node_15 [shape=record,label="{15\:\ 0x0068|0x0068: IGET  (r2 I:org.mapsforge.map.layer.queue.JobQueue\<T\>) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.jobQueue org.mapsforge.map.layer.queue.JobQueue \l0x006a: INVOKE  \l  (r2 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.add(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x006d|0x006d: INVOKE  \l  (r5 I:org.mapsforge.map.layer.TileLayer)\l  (r8 I:org.mapsforge.core.graphics.Canvas)\l  (r0 I:org.mapsforge.core.model.Point)\l  (r9 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.TileLayer.drawParentTileBitmap(org.mapsforge.core.graphics.Canvas, org.mapsforge.core.model.Point, org.mapsforge.core.model.Tile):void type: DIRECT \l}"];
Node_17 [shape=record,label="{17\:\ 0x0071|0x0071: INVOKE  (r9 I:boolean) = \l  (r5 I:org.mapsforge.map.layer.TileLayer)\l  (r9 I:org.mapsforge.core.model.Tile)\l  (r2 I:org.mapsforge.core.graphics.TileBitmap)\l org.mapsforge.map.layer.TileLayer.isTileStale(org.mapsforge.core.model.Tile, org.mapsforge.core.graphics.TileBitmap):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0075|0x0075: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0088 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0077|0x0077: IGET  (r9 I:boolean) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.hasJobQueue boolean \l}"];
Node_20 [shape=record,label="{20\:\ 0x0079|0x0079: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0088 \l}"];
Node_21 [shape=record,label="{21\:\ 0x007b|0x007b: IGET  (r9 I:org.mapsforge.map.layer.cache.TileCache) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.tileCache org.mapsforge.map.layer.cache.TileCache \l0x007d: INVOKE  (r9 I:boolean) = \l  (r9 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE \l}"];
Node_22 [shape=record,label="{22\:\ 0x0081|0x0081: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0088 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0083|0x0083: IGET  (r9 I:org.mapsforge.map.layer.queue.JobQueue\<T\>) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.jobQueue org.mapsforge.map.layer.queue.JobQueue \l0x0085: INVOKE  \l  (r9 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.add(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x0088|0x0088: INVOKE  \l  (r5 I:org.mapsforge.map.layer.TileLayer)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.TileLayer.retrieveLabelsOnly(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l0x008b: IGET  (r3 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x008d: INVOKE  (r3 I:long) = (r3 I:double) java.lang.Math.round(double):long type: STATIC \l0x0091: CAST  (r9 I:int) = (int) (r3 I:long) \l0x0092: IGET  (r0 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0094: INVOKE  (r0 I:long) = (r0 I:double) java.lang.Math.round(double):long type: STATIC \l0x0098: CAST  (r0 I:int) = (int) (r0 I:long) \l0x0099: IGET  (r1 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.displayModel org.mapsforge.map.model.DisplayModel \l0x009b: INVOKE  (r1 I:org.mapsforge.core.graphics.Filter) = (r1 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getFilter():org.mapsforge.core.graphics.Filter type: VIRTUAL \l0x009f: INVOKE  \l  (r8 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l  (r9 I:int)\l  (r0 I:int)\l  (r1 I:org.mapsforge.core.graphics.Filter)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int, org.mapsforge.core.graphics.Filter):void type: INTERFACE \l0x00a2: INVOKE  (r2 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.decrementRefCount():void type: INTERFACE \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a5|0x00a5: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a8|0x00a8: IGET  (r6 I:boolean) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.hasJobQueue boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x00aa|0x00aa: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00b1 \l}"];
Node_28 [shape=record,label="{28\:\ 0x00ac|0x00ac: IGET  (r6 I:org.mapsforge.map.layer.queue.JobQueue\<T\>) = (r5 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.jobQueue org.mapsforge.map.layer.queue.JobQueue \l0x00ae: INVOKE  (r6 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.notifyWorkers():void type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x00b1|0x00b1: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.TileLayer.draw((r5 'this' I:org.mapsforge.map.layer.TileLayer A[IMMUTABLE_TYPE, THIS]), (r6 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_26;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_8;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
}

