digraph "CFG fororg.mapsforge.map.layer.TileLayer.draw(Lorg\/mapsforge\/core\/model\/BoundingBox;BLorg\/mapsforge\/core\/graphics\/Canvas;Lorg\/mapsforge\/core\/model\/Point;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|java.util.List r6 = org.mapsforge.map.util.LayerUtil.getTilePositions(r6, r7, r9, r5.displayModel.getTileSize())\lr8.resetClip()\l}"];
Node_1 [shape=record,label="{1\:\ 0x000f|if (r5.isTransparent != false) goto L_0x001a\l}"];
Node_2 [shape=record,label="{2\:\ 0x0011|r8.fillColor(r5.displayModel.getBackgroundColor())\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|java.util.HashSet r7 = new java.util.HashSet()\ljava.util.Iterator r9 = r6.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|LOOP_START\lLOOP:0: B:4:0x0023\-\>B:6:0x0029\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|if (r9.hasNext() == false) goto L_0x0039\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|LOOP_END\lLOOP:0: B:4:0x0023\-\>B:6:0x0029\l|r7.add(createJob(r9.next().tile))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|r5.tileCache.setWorkingSet(r7)\lint r7 = r6.size() + \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0044|LOOP_START\lPHI: r7 \l  PHI: (r7v5 int) = (r7v4 int), (r7v6 int) binds: [B:7:0x0039, B:25:0x00a5] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:8:0x0044\-\>B:25:0x00a5\l|if (r7 \< 0) goto L_0x00a8\l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|org.mapsforge.map.layer.TilePosition r9 = r6.get(r7)\lorg.mapsforge.core.model.Point r0 = r9.point\lorg.mapsforge.core.model.Tile r9 = r9.tile\lorg.mapsforge.map.layer.queue.Job r1 = createJob(r9)\lorg.mapsforge.core.graphics.TileBitmap r2 = r5.tileCache.getImmediately(r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x005a|if (r2 != null) goto L_0x0071\l}"];
Node_11 [shape=record,label="{11\:\ 0x005c}"];
Node_12 [shape=record,label="{12\:\ 0x005e|if (r5.hasJobQueue == false) goto L_0x006d\l}"];
Node_13 [shape=record,label="{13\:\ 0x0060}"];
Node_14 [shape=record,label="{14\:\ 0x0066|if (r5.tileCache.containsKey(r1) != false) goto L_0x006d\l}"];
Node_15 [shape=record,label="{15\:\ 0x0068|r5.jobQueue.add(r1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x006d|drawParentTileBitmap(r8, r0, r9)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0071}"];
Node_18 [shape=record,label="{18\:\ 0x0075|if (isTileStale(r9, r2) == false) goto L_0x0088\l}"];
Node_19 [shape=record,label="{19\:\ 0x0077}"];
Node_20 [shape=record,label="{20\:\ 0x0079|if (r5.hasJobQueue == false) goto L_0x0088\l}"];
Node_21 [shape=record,label="{21\:\ 0x007b}"];
Node_22 [shape=record,label="{22\:\ 0x0081|if (r5.tileCache.containsKey(r1) != false) goto L_0x0088\l}"];
Node_23 [shape=record,label="{23\:\ 0x0083|r5.jobQueue.add(r1)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0088|retrieveLabelsOnly(r1)\lr8.drawBitmap(r2, (int) java.lang.Math.round(r0.f266x), (int) java.lang.Math.round(r0.f267y), r5.displayModel.getFilter())\lr2.decrementRefCount()\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a5|LOOP_END\lLOOP:1: B:8:0x0044\-\>B:25:0x00a5\l|int r7 = r7 + \-1\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a8}"];
Node_27 [shape=record,label="{27\:\ 0x00aa|if (r5.hasJobQueue == false) goto L_?\l}"];
Node_28 [shape=record,label="{28\:\ 0x00ac|r5.jobQueue.notifyWorkers()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0039|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x00a8|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x00a5|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a5|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.TileLayer.draw((r5v0 'this' org.mapsforge.map.layer.TileLayer A[IMMUTABLE_TYPE, THIS]), (r6v0 org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_29;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_30;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_32;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_31;
Node_25 -> Node_8;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_33;
Node_29 -> Node_7;
Node_30 -> Node_26;
Node_31 -> Node_25;
Node_32 -> Node_25;
}

