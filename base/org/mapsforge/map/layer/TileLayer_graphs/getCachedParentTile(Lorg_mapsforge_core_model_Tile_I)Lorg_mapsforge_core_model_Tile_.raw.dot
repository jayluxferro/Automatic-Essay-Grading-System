digraph "CFG fororg.mapsforge.map.layer.TileLayer.getCachedParentTile(Lorg\/mapsforge\/core\/model\/Tile;I)Lorg\/mapsforge\/core\/model\/Tile;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:org.mapsforge.core.model.Tile) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r3 I:org.mapsforge.core.model.Tile) = (r3 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.getParent():org.mapsforge.core.model.Tile type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: RETURN  (r0 I:org.mapsforge.core.model.Tile) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IGET  (r0 I:org.mapsforge.map.layer.cache.TileCache) = (r2 I:org.mapsforge.map.layer.TileLayer) org.mapsforge.map.layer.TileLayer.tileCache org.mapsforge.map.layer.cache.TileCache \l0x000d: INVOKE  (r1 I:org.mapsforge.map.layer.queue.Job) = \l  (r2 I:org.mapsforge.map.layer.TileLayer)\l  (r3 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.TileLayer.createJob(org.mapsforge.core.model.Tile):org.mapsforge.map.layer.queue.Job type: VIRTUAL \l0x0011: INVOKE  (r0 I:boolean) = \l  (r0 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0018 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: RETURN  (r3 I:org.mapsforge.core.model.Tile) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x001a: INVOKE  (r3 I:org.mapsforge.core.model.Tile) = \l  (r2 I:org.mapsforge.map.layer.TileLayer)\l  (r3 I:org.mapsforge.core.model.Tile)\l  (r4 I:int)\l org.mapsforge.map.layer.TileLayer.getCachedParentTile(org.mapsforge.core.model.Tile, int):org.mapsforge.core.model.Tile type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: RETURN  (r3 I:org.mapsforge.core.model.Tile) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.core.model.Tile org.mapsforge.map.layer.TileLayer.getCachedParentTile((r2 'this' I:org.mapsforge.map.layer.TileLayer A[IMMUTABLE_TYPE, THIS]), (r3 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
}

