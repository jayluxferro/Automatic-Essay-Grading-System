digraph "CFG fororg.mapsforge.map.layer.overlay.FixedPixelCircle.contains(Lorg\/mapsforge\/core\/model\/Point;Lorg\/mapsforge\/core\/model\/Point;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r3)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|float r1 = r3.displayModel.getScaleFactor() * 10.0f\lfloat r0 = getRadius()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r3.scaleRadius == false) goto L_0x001a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|float r2 = r3.displayModel.getScaleFactor()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|r2 = 1.0f\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|PHI: r2 \l  PHI: (r2v1 float) = (r2v2 float), (r2v4 float) binds: [B:6:0x001a, B:5:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|double r0 = (double) java.lang.Math.max(r1, r0 * r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027}"];
Node_9 [shape=record,label="{9\:\ 0x0029|if ((r4.distance(r5) \> r0 ? 1 : (r4.distance(r5) == r0 ? 0 : \-1)) \>= 0) goto L_0x002d\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|r4 = true\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|r4 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|PHI: r4 \l  PHI: (r4v4 boolean) = (r4v5 boolean), (r4v6 boolean) binds: [B:11:0x002d, B:10:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|RETURN\l|return r4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|REMOVE\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|REMOVE\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|REMOVE\l|throw r4\l}"];
MethodNode[shape=record,label="{public synchronized boolean org.mapsforge.map.layer.overlay.FixedPixelCircle.contains((r3v0 'this' org.mapsforge.map.layer.overlay.FixedPixelCircle A[IMMUTABLE_TYPE, THIS]), (r4v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

