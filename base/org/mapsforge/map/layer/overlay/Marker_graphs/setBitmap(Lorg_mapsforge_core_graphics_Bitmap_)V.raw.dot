digraph "CFG fororg.mapsforge.map.layer.overlay.Marker.setBitmap(Lorg\/mapsforge\/core\/graphics\/Bitmap;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001c \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001c \}]\l0x0007: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}]\l0x000a: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|SYNTHETIC\lSplitter:B:8:0x000f\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x000f\l|0x000f: IGET  (r0 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001c \}, TRY_ENTER]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0011|0x0011: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: IGET  (r0 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001c \}]\l0x0015: INVOKE  (r0 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.decrementRefCount():void type: INTERFACE A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: IPUT  \l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l  (r1 I:org.mapsforge.map.layer.overlay.Marker)\l org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|0x001a: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|0x001d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|0x001e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.overlay.Marker.setBitmap((r1 'this' I:org.mapsforge.map.layer.overlay.Marker A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.core.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

