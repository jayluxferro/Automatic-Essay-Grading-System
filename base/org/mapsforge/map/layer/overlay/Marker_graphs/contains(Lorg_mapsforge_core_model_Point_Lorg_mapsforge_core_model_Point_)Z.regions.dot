digraph "CFG fororg.mapsforge.map.layer.overlay.Marker.contains(Lorg\/mapsforge\/core\/model\/Point;Lorg\/mapsforge\/core\/model\/Point;)Z" {
subgraph cluster_Region_549203279 {
label = "R(3:0|4|5) | DECL_VAR: boolean null\l";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r1 = r16\lorg.mapsforge.core.model.Point r0 = r17\l}"];
subgraph cluster_SynchronizedRegion_1042929392 {
label = "Synchronized:R(2:1|(1:3))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0004}"];
subgraph cluster_Region_1680937070 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ ?|double double r4 = ((double) java.lang.Math.max(r1.displayModel.getScaleFactor() * 20.0f, (float) r1.bitmap.getWidth())) \/ 2.0d\ldouble double r10 = ((double) r1.horizontalOffset) + (r0.f266x \- r4)\ldouble double r2 = ((double) java.lang.Math.max(r1.displayModel.getScaleFactor() * 20.0f, (float) r1.bitmap.getHeight())) \/ 2.0d\lboolean r0 = new org.mapsforge.core.model.Rectangle(r10, (r0.f267y \- r2) + ((double) r1.verticalOffset), ((double) r1.horizontalOffset) + r0.f266x + r4, ((double) r1.verticalOffset) + r0.f267y + r2).contains(r18)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0064|RETURN\l|return r0\l}"];
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0005|SYNTHETIC\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0063|DONT_GENERATE\l|monitor\-exit(\l\/\/ error: 0x0063: MONITOR_EXIT  \l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0065|REMOVE\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0066|REMOVE\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0067|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public synchronized boolean org.mapsforge.map.layer.overlay.Marker.contains((r16v0 'this' org.mapsforge.map.layer.overlay.Marker A[IMMUTABLE_TYPE, THIS]), (r17v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_2 -> Node_3;
Node_2 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
}

