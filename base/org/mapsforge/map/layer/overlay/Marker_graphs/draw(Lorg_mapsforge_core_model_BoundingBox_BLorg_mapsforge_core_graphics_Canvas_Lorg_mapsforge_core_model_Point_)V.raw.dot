digraph "CFG fororg.mapsforge.map.layer.overlay.Marker.draw(Lorg\/mapsforge\/core\/model\/BoundingBox;BLorg\/mapsforge\/core\/graphics\/Canvas;Lorg\/mapsforge\/core\/model\/Point;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: MONITOR_ENTER  (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|SYNTHETIC\lSplitter:B:2:0x0005\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0005\l|0x0005: IGET  (r2 I:org.mapsforge.core.model.LatLong) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.latLong org.mapsforge.core.model.LatLong A[Catch:\{ all \-\> 0x009c \}, TRY_ENTER]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x009a A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IGET  (r2 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x009a A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IGET  (r2 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l0x000f: INVOKE  (r2 I:boolean) = (r2 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.isDestroyed():boolean type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0017 A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: GOTO  \-\> 0x009a A[Catch:\{ all \-\> 0x009c \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x009c \}]\l0x0019: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x009c \}]\l0x001d: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x009c \}]\l0x001f: INVOKE  (r2 I:long) = (r3 I:byte), (r2 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC A[Catch:\{ all \-\> 0x009c \}]\l0x0023: IGET  (r4 I:org.mapsforge.core.model.LatLong) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.latLong org.mapsforge.core.model.LatLong A[Catch:\{ all \-\> 0x009c \}]\l0x0025: IGET  (r4 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double A[Catch:\{ all \-\> 0x009c \}]\l0x0027: INVOKE  (r4 I:double) = (r4 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC A[Catch:\{ all \-\> 0x009c \}]\l0x002b: IGET  (r6 I:org.mapsforge.core.model.LatLong) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.latLong org.mapsforge.core.model.LatLong A[Catch:\{ all \-\> 0x009c \}]\l0x002d: IGET  (r6 I:double) = (r6 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double A[Catch:\{ all \-\> 0x009c \}]\l0x002f: INVOKE  (r2 I:double) = (r6 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC A[Catch:\{ all \-\> 0x009c \}]\l0x0033: IGET  (r6 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l0x0035: INVOKE  (r6 I:int) = (r6 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x0039: ARITH  (r6 I:int) = (r6 I:int) \/ (2 int) A[Catch:\{ all \-\> 0x009c \}]\l0x003b: IGET  (r7 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l0x003d: INVOKE  (r7 I:int) = (r7 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getHeight():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x0041: ARITH  (r7 I:int) = (r7 I:int) \/ (2 int) A[Catch:\{ all \-\> 0x009c \}]\l0x0043: IGET  (r8 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x009c \}]\l0x0045: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x009c \}]\l0x0046: ARITH  (r4 I:double) = (r4 I:double) \- (r8 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0047: CAST  (r8 I:double) = (double) (r6 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0048: ARITH  (r4 I:double) = (r4 I:double) \- (r8 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0049: IGET  (r6 I:int) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.horizontalOffset int A[Catch:\{ all \-\> 0x009c \}]\l0x004b: CAST  (r8 I:double) = (double) (r6 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x004c: ARITH  (r4 I:double) = (r4 I:double) + (r8 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x004d: CAST  (r4 I:int) = (int) (r4 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x004e: IGET  (r5 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x009c \}]\l0x0050: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x009c \}]\l0x0051: ARITH  (r2 I:double) = (r2 I:double) \- (r5 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0052: CAST  (r5 I:double) = (double) (r7 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0053: ARITH  (r2 I:double) = (r2 I:double) \- (r5 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0054: IGET  (r0 I:int) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.verticalOffset int A[Catch:\{ all \-\> 0x009c \}]\l0x0056: CAST  (r5 I:double) = (double) (r0 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0057: ARITH  (r2 I:double) = (r2 I:double) + (r5 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0058: CAST  (r0 I:int) = (int) (r2 I:double) A[Catch:\{ all \-\> 0x009c \}]\l0x0059: IGET  (r2 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l0x005b: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x005f: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0060: IGET  (r3 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}]\l0x0062: INVOKE  (r3 I:int) = (r3 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getHeight():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x0066: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0067: NEW_INSTANCE  (r14 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle A[Catch:\{ all \-\> 0x009c \}]\l0x0069: CAST  (r6 I:double) = (double) (r4 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x006a: CAST  (r8 I:double) = (double) (r0 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x006b: CAST  (r10 I:double) = (double) (r2 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x006c: CAST  (r12 I:double) = (double) (r3 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x006d: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x009c \}]\l0x006e: INVOKE  \l  (r5 I:org.mapsforge.core.model.Rectangle)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT A[Catch:\{ all \-\> 0x009c \}]\l0x0071: NEW_INSTANCE  (r2 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle A[Catch:\{ all \-\> 0x009c \}]\l0x0073: CONST  (r16 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x009c \}]\l0x0075: CONST  (r18 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x009c \}]\l0x0077: INVOKE  (r3 I:int) = (r27 I:org.mapsforge.core.graphics.Canvas) org.mapsforge.core.graphics.Canvas.getWidth():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x007b: CAST  (r5 I:double) = (double) (r3 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x007c: INVOKE  (r3 I:int) = (r27 I:org.mapsforge.core.graphics.Canvas) org.mapsforge.core.graphics.Canvas.getHeight():int type: INTERFACE A[Catch:\{ all \-\> 0x009c \}]\l0x0080: CAST  (r7 I:double) = (double) (r3 I:int) A[Catch:\{ all \-\> 0x009c \}]\l0x0081: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x009c \}]\l0x0082: MOVE  (r20 I:?[long, double]) = (r5 I:?[long, double]) A[Catch:\{ all \-\> 0x009c \}]\l0x0084: MOVE  (r22 I:?[long, double]) = (r7 I:?[long, double]) A[Catch:\{ all \-\> 0x009c \}]\l0x0086: INVOKE  \l  (r15 I:org.mapsforge.core.model.Rectangle)\l  (r16 I:double)\l  (r18 I:double)\l  (r20 I:double)\l  (r22 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT A[Catch:\{ all \-\> 0x009c \}]\l0x0089: INVOKE  (r2 I:boolean) = \l  (r2 I:org.mapsforge.core.model.Rectangle)\l  (r14 I:org.mapsforge.core.model.Rectangle)\l org.mapsforge.core.model.Rectangle.intersects(org.mapsforge.core.model.Rectangle):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x009c \}]\l0x008c: NOP   A[TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x008d|0x008d: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0091 \l}"];
Node_12 [shape=record,label="{12\:\ 0x008f|0x008f: MONITOR_EXIT  (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0090|0x0090: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ 0x0091|SYNTHETIC\lSplitter:B:14:0x0091\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0091\l|0x0091: IGET  (r2 I:org.mapsforge.core.graphics.Bitmap) = (r1 I:org.mapsforge.map.layer.overlay.Marker) org.mapsforge.map.layer.overlay.Marker.bitmap org.mapsforge.core.graphics.Bitmap A[Catch:\{ all \-\> 0x009c \}, TRY_ENTER]\l0x0093: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x009c \}]\l0x0095: INVOKE  \l  (r3 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l  (r4 I:int)\l  (r0 I:int)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int):void type: INTERFACE A[Catch:\{ all \-\> 0x009c \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0098|0x0098: MONITOR_EXIT  (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0099|0x0099: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ 0x009a|0x009a: MONITOR_EXIT  (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x009b|0x009b: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ 0x009c|ExcHandler: all null\lSplitter:B:2:0x0005\l|0x009c: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x009d|0x009d: MONITOR_EXIT  (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x009e|0x009e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.overlay.Marker.draw((r24 'this' I:org.mapsforge.map.layer.overlay.Marker A[IMMUTABLE_TYPE, THIS]), (r25 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_20;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_18;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
}

