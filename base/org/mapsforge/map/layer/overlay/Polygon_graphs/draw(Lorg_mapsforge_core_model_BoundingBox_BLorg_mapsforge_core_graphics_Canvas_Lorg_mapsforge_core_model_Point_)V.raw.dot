digraph "CFG fororg.mapsforge.map.layer.overlay.Polygon.draw(Lorg\/mapsforge\/core\/model\/BoundingBox;BLorg\/mapsforge\/core\/graphics\/Canvas;Lorg\/mapsforge\/core\/model\/Point;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.List\<org.mapsforge.core.model.LatLong\>) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.latLongs java.util.List A[Catch:\{ all \-\> 0x00a5 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x0007: CONST  (r1 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, byte, short, char]) \< (r1 I:?[int, byte, short, char])  \-\> B:34:0x00a3 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintStroke org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r0 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintFill org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: GOTO  \-\> 0x00a3 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IGET  (r0 I:org.mapsforge.core.model.BoundingBox) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.boundingBox org.mapsforge.core.model.BoundingBox A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|0x0016: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0022 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: IGET  (r0 I:org.mapsforge.core.model.BoundingBox) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.boundingBox org.mapsforge.core.model.BoundingBox A[Catch:\{ all \-\> 0x00a5 \}]\l0x001a: INVOKE  (r9 I:boolean) = \l  (r0 I:org.mapsforge.core.model.BoundingBox)\l  (r9 I:org.mapsforge.core.model.BoundingBox)\l org.mapsforge.core.model.BoundingBox.intersects(org.mapsforge.core.model.BoundingBox):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00a5 \}]\l0x001d: NOP   A[TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0022 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|0x0020: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\lSplitter:B:15:0x0022\l}"];
Node_16 [shape=record,label="{16\:\ ?|Splitter:B:15:0x0022\l|0x0022: IGET  (r9 I:java.util.List\<org.mapsforge.core.model.LatLong\>) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.latLongs java.util.List A[Catch:\{ all \-\> 0x00a5 \}, TRY_ENTER]\l0x0024: INVOKE  (r9 I:java.util.Iterator) = (r9 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x0028: IGET  (r0 I:org.mapsforge.core.graphics.GraphicFactory) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.graphicFactory org.mapsforge.core.graphics.GraphicFactory A[Catch:\{ all \-\> 0x00a5 \}]\l0x002a: INVOKE  (r0 I:org.mapsforge.core.graphics.Path) = (r0 I:org.mapsforge.core.graphics.GraphicFactory) org.mapsforge.core.graphics.GraphicFactory.createPath():org.mapsforge.core.graphics.Path type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x002e: INVOKE  (r1 I:java.lang.Object) = (r9 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x0032: CHECK_CAST  (r1 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0034: IGET  (r2 I:org.mapsforge.map.model.DisplayModel) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x00a5 \}]\l0x0036: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x00a5 \}]\l0x003a: INVOKE  (r2 I:long) = (r10 I:byte), (r2 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC A[Catch:\{ all \-\> 0x00a5 \}]\l0x003e: IGET  (r4 I:double) = (r1 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0040: INVOKE  (r4 I:double) = (r4 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC A[Catch:\{ all \-\> 0x00a5 \}]\l0x0044: IGET  (r6 I:double) = (r12 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0046: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00a5 \}]\l0x0047: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0048: CAST  (r10 I:float) = (float) (r4 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0049: IGET  (r4 I:double) = (r1 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double A[Catch:\{ all \-\> 0x00a5 \}]\l0x004b: INVOKE  (r4 I:double) = (r4 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC A[Catch:\{ all \-\> 0x00a5 \}]\l0x004f: IGET  (r6 I:double) = (r12 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0051: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00a5 \}]\l0x0052: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0053: CAST  (r1 I:float) = (float) (r4 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0054: INVOKE  \l  (r0 I:org.mapsforge.core.graphics.Path)\l  (r10 I:float)\l  (r1 I:float)\l org.mapsforge.core.graphics.Path.moveTo(float, float):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|0x0057: INVOKE  (r10 I:boolean) = (r9 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x005b|0x005b: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x007d A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x005d|0x005d: INVOKE  (r10 I:java.lang.Object) = (r9 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x0061: CHECK_CAST  (r10 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0063: IGET  (r4 I:double) = (r10 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0065: INVOKE  (r4 I:double) = (r4 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC A[Catch:\{ all \-\> 0x00a5 \}]\l0x0069: IGET  (r6 I:double) = (r12 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x00a5 \}]\l0x006b: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00a5 \}]\l0x006c: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x006d: CAST  (r1 I:float) = (float) (r4 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x006e: IGET  (r4 I:double) = (r10 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0070: INVOKE  (r4 I:double) = (r4 I:double), (r2 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC A[Catch:\{ all \-\> 0x00a5 \}]\l0x0074: IGET  (r6 I:double) = (r12 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x00a5 \}]\l0x0076: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x00a5 \}]\l0x0077: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0078: CAST  (r10 I:float) = (float) (r4 I:double) A[Catch:\{ all \-\> 0x00a5 \}]\l0x0079: INVOKE  \l  (r0 I:org.mapsforge.core.graphics.Path)\l  (r1 I:float)\l  (r10 I:float)\l org.mapsforge.core.graphics.Path.lineTo(float, float):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l0x007c: GOTO  \-\> 0x0057 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x007d|0x007d: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintStroke org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x007f|0x007f: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008f A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0081|0x0081: IGET  (r9 I:boolean) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.keepAligned boolean A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0083|0x0083: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008a A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0085|0x0085: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintStroke org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l0x0087: INVOKE  \l  (r9 I:org.mapsforge.core.graphics.Paint)\l  (r12 I:org.mapsforge.core.model.Point)\l org.mapsforge.core.graphics.Paint.setBitmapShaderShift(org.mapsforge.core.model.Point):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x008a|0x008a: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintStroke org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l0x008c: INVOKE  \l  (r11 I:org.mapsforge.core.graphics.Canvas)\l  (r0 I:org.mapsforge.core.graphics.Path)\l  (r9 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.core.graphics.Canvas.drawPath(org.mapsforge.core.graphics.Path, org.mapsforge.core.graphics.Paint):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x008f|0x008f: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintFill org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0091|0x0091: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00a1 A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0093|0x0093: IGET  (r9 I:boolean) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.keepAligned boolean A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0095|0x0095: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x009c A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0097|0x0097: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintFill org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l0x0099: INVOKE  \l  (r9 I:org.mapsforge.core.graphics.Paint)\l  (r12 I:org.mapsforge.core.model.Point)\l org.mapsforge.core.graphics.Paint.setBitmapShaderShift(org.mapsforge.core.model.Point):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}]\l}"];
Node_31 [shape=record,label="{31\:\ 0x009c|0x009c: IGET  (r9 I:org.mapsforge.core.graphics.Paint) = (r8 I:org.mapsforge.map.layer.overlay.Polygon) org.mapsforge.map.layer.overlay.Polygon.paintFill org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x00a5 \}]\l0x009e: INVOKE  \l  (r11 I:org.mapsforge.core.graphics.Canvas)\l  (r0 I:org.mapsforge.core.graphics.Path)\l  (r9 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.core.graphics.Canvas.drawPath(org.mapsforge.core.graphics.Path, org.mapsforge.core.graphics.Paint):void type: INTERFACE A[Catch:\{ all \-\> 0x00a5 \}, TRY_LEAVE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a1|0x00a1: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a2|0x00a2: RETURN   \l}"];
Node_34 [shape=record,label="{34\:\ 0x00a3|0x00a3: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x00a4|0x00a4: RETURN   \l}"];
Node_36 [shape=record,label="{36\:\ 0x00a5|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x00a5: MOVE_EXCEPTION  (r9 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x00a6|0x00a6: MONITOR_EXIT  (r8 I:?[OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00a7|0x00a7: THROW  (r9 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.overlay.Polygon.draw((r8 'this' I:org.mapsforge.map.layer.overlay.Polygon A[IMMUTABLE_TYPE, THIS]), (r9 I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_36;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_34;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_34;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_36;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_17;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_32;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
}

