digraph "CFG fororg.mapsforge.map.layer.overlay.Polyline.contains(Lorg\/mapsforge\/core\/model\/Point;Lorg\/mapsforge\/map\/util\/MapViewProjection;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r28 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r29 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: MONITOR_ENTER  (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0007|0x0007: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (1092616192(0x41200000, float:10.0) ?[int, float, short, byte, char])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|SYNTHETIC\lSplitter:B:3:0x0009\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0009\l|0x0009: IGET  (r4 I:org.mapsforge.map.model.DisplayModel) = (r1 I:org.mapsforge.map.layer.overlay.Polyline) org.mapsforge.map.layer.overlay.Polyline.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0073 \}, TRY_ENTER]\l0x000b: INVOKE  (r4 I:float) = (r4 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL A[Catch:\{ all \-\> 0x0073 \}]\l0x000f: ARITH  (r4 I:float) = (r4 I:float) * (r3 I:float) A[Catch:\{ all \-\> 0x0073 \}]\l0x0011: IGET  (r3 I:org.mapsforge.core.graphics.Paint) = (r1 I:org.mapsforge.map.layer.overlay.Polyline) org.mapsforge.map.layer.overlay.Polyline.paintStroke org.mapsforge.core.graphics.Paint A[Catch:\{ all \-\> 0x0073 \}]\l0x0013: INVOKE  (r3 I:float) = (r3 I:org.mapsforge.core.graphics.Paint) org.mapsforge.core.graphics.Paint.getStrokeWidth():float type: INTERFACE A[Catch:\{ all \-\> 0x0073 \}]\l0x0017: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (1073741824(0x40000000, float:2.0) ?[int, float, short, byte, char])\l A[Catch:\{ all \-\> 0x0073 \}]\l0x0019: ARITH  (r3 I:float) = (r3 I:float) \/ (r5 I:float) A[Catch:\{ all \-\> 0x0073 \}]\l0x001a: INVOKE  (r3 I:float) = (r4 I:float), (r3 I:float) java.lang.Math.max(float, float):float type: STATIC A[Catch:\{ all \-\> 0x0073 \}]\l0x001e: CAST  (r3 I:double) = (double) (r3 I:float) A[Catch:\{ all \-\> 0x0073 \}]\l0x001f: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0073 \}]\l0x0020: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0021: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0073 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|0x0022: IGET  (r8 I:java.util.List\<org.mapsforge.core.model.LatLong\>) = (r1 I:org.mapsforge.map.layer.overlay.Polyline) org.mapsforge.map.layer.overlay.Polyline.latLongs java.util.List A[Catch:\{ all \-\> 0x0073 \}]\l0x0024: INVOKE  (r8 I:int) = (r8 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0073 \}]\l0x0028: CONST  (r9 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0029: ARITH  (r8 I:int) = (r8 I:int) \- (r9 I:int) A[Catch:\{ all \-\> 0x0073 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|0x002a: IF  (r5 I:?[int, byte, short, char]) \>= (r8 I:?[int, byte, short, char])  \-\> B:16:0x0070 A[Catch:\{ all \-\> 0x0073 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|0x002c: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003a A[Catch:\{ all \-\> 0x0073 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|0x002e: IGET  (r7 I:java.util.List\<org.mapsforge.core.model.LatLong\>) = (r1 I:org.mapsforge.map.layer.overlay.Polyline) org.mapsforge.map.layer.overlay.Polyline.latLongs java.util.List A[Catch:\{ all \-\> 0x0073 \}]\l0x0030: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0073 \}]\l0x0034: CHECK_CAST  (r7 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0036: INVOKE  (r7 I:org.mapsforge.core.model.Point) = \l  (r2 I:org.mapsforge.map.util.MapViewProjection)\l  (r7 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.util.MapViewProjection.toPixels(org.mapsforge.core.model.LatLong):org.mapsforge.core.model.Point type: VIRTUAL A[Catch:\{ all \-\> 0x0073 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: IGET  (r8 I:java.util.List\<org.mapsforge.core.model.LatLong\>) = (r1 I:org.mapsforge.map.layer.overlay.Polyline) org.mapsforge.map.layer.overlay.Polyline.latLongs java.util.List A[Catch:\{ all \-\> 0x0073 \}]\l0x003c: ARITH  (r5 I:int) = (r5 I:int) + (1 int) A[Catch:\{ all \-\> 0x0073 \}]\l0x003e: INVOKE  (r8 I:java.lang.Object) = (r8 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0073 \}]\l0x0042: CHECK_CAST  (r8 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0044: INVOKE  (r8 I:org.mapsforge.core.model.Point) = \l  (r2 I:org.mapsforge.map.util.MapViewProjection)\l  (r8 I:org.mapsforge.core.model.LatLong)\l org.mapsforge.map.util.MapViewProjection.toPixels(org.mapsforge.core.model.LatLong):org.mapsforge.core.model.Point type: VIRTUAL A[Catch:\{ all \-\> 0x0073 \}]\l0x0048: IGET  (r10 I:double) = (r7 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x0073 \}]\l0x004a: IGET  (r12 I:double) = (r7 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x0073 \}]\l0x004c: IGET  (r14 I:double) = (r8 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x0073 \}]\l0x004e: IGET  (r6 I:double) = (r8 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x0073 \}]\l0x0050: MOVE  (r22 I:?[long, double]) = (r10 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0052: IGET  (r9 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double A[Catch:\{ all \-\> 0x0073 \}]\l0x0054: MOVE  (r24 I:?[OBJECT, ARRAY]) = (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0056: MOVE  (r25 I:?[long, double]) = (r9 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0058: IGET  (r8 I:double) = (r0 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double A[Catch:\{ all \-\> 0x0073 \}]\l0x005a: MOVE  (r18 I:?[long, double]) = (r25 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x005c: MOVE  (r10 I:?[long, double]) = (r22 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x005e: MOVE  (r16 I:?[long, double]) = (r6 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0060: MOVE  (r20 I:?[long, double]) = (r8 I:?[long, double]) A[Catch:\{ all \-\> 0x0073 \}]\l0x0062: INVOKE  (r6 I:double) = \l  (r10 I:double)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:double)\l  (r18 I:double)\l  (r20 I:double)\l org.mapsforge.core.util.LatLongUtils.distanceSegmentPoint(double, double, double, double, double, double):double type: STATIC A[Catch:\{ all \-\> 0x0073 \}]\l0x0065: NOP   A[TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0066|0x0066: CMP_G  (r6 I:int) = (r6 I:double), (r3 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0068|0x0068: IF  (r6 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:15:0x006d \l}"];
Node_12 [shape=record,label="{12\:\ 0x006a|0x006a: MONITOR_EXIT  (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x006b|0x006b: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x006c|0x006c: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x006d|0x006d: MOVE  (r7 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|0x0070: MONITOR_EXIT  (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0071|0x0071: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x0072|0x0072: RETURN  (r0 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0073|ExcHandler: all null\lSplitter:B:3:0x0009\l|0x0073: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: MONITOR_EXIT  (r27 I:?[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0075|0x0075: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized boolean org.mapsforge.map.layer.overlay.Polyline.contains((r27 'this' I:org.mapsforge.map.layer.overlay.Polyline A[IMMUTABLE_TYPE, THIS]), (r28 I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:org.mapsforge.map.util.MapViewProjection A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_5;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

