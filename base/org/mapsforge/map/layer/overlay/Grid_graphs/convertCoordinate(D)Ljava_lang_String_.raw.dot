digraph "CFG fororg.mapsforge.map.layer.overlay.Grid.convertCoordinate(D)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0005: CONST  (r1 I:?[long, double]) = (0 ?[long, double]) \l0x0007: CMP_G  (r1 I:int) = (r7 I:double), (r1 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|0x0009: IF  (r1 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:3:0x0011 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: CONST  (r1 I:?[int, float, short, byte, char]) = (45 ?[int, float, short, byte, char]) \l0x000d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0010: NEG  (r7 I:double) = (r7 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: NEW_INSTANCE  (r1 I:java.text.DecimalFormat) =  java.text.DecimalFormat \l0x0013: CONST_STR  (r2 I:java.lang.String) =  \"00\" \l0x0015: INVOKE  (r1 I:java.text.DecimalFormat), (r2 I:java.lang.String) java.text.DecimalFormat.\<init\>(java.lang.String):void type: DIRECT \l0x0018: INVOKE  (r2 I:double) = (r7 I:double) java.lang.Math.floor(double):double type: STATIC \l0x001c: CAST  (r2 I:int) = (int) (r2 I:double) \l0x001d: CAST  (r3 I:long) = (long) (r2 I:int) \l0x001e: INVOKE  (r3 I:java.lang.String) = (r1 I:java.text.DecimalFormat), (r3 I:long) java.text.DecimalFormat.format(long):java.lang.String type: VIRTUAL \l0x0022: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0025: CONST  (r3 I:?[int, float, short, byte, char]) = \l  (176(0xb0, float:2.47E\-43) ?[int, float, short, byte, char])\l \l0x0027: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x002a: CAST  (r2 I:double) = (double) (r2 I:int) \l0x002b: ARITH  (r7 I:double) = (r7 I:double) \- (r2 I:double) \l0x002c: CONST  (r2 I:?[long, double]) = \l  (4633641066610819072(0x404e000000000000, double:60.0) ?[long, double])\l \l0x002e: ARITH  (r7 I:double) = (r7 I:double) * (r2 I:double) \l0x0030: INVOKE  (r4 I:double) = (r7 I:double) java.lang.Math.floor(double):double type: STATIC \l0x0034: CAST  (r4 I:int) = (int) (r4 I:double) \l0x0035: CAST  (r5 I:long) = (long) (r4 I:int) \l0x0036: INVOKE  (r5 I:java.lang.String) = (r1 I:java.text.DecimalFormat), (r5 I:long) java.text.DecimalFormat.format(long):java.lang.String type: VIRTUAL \l0x003a: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x003d: CONST  (r5 I:?[int, float, short, byte, char]) = \l  (8242(0x2032, float:1.155E\-41) ?[int, float, short, byte, char])\l \l0x003f: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0042: CAST  (r4 I:double) = (double) (r4 I:int) \l0x0043: ARITH  (r7 I:double) = (r7 I:double) \- (r4 I:double) \l0x0044: ARITH  (r7 I:double) = (r7 I:double) * (r2 I:double) \l0x0046: INVOKE  (r7 I:java.lang.String) = (r1 I:java.text.DecimalFormat), (r7 I:double) java.text.DecimalFormat.format(double):java.lang.String type: VIRTUAL \l0x004a: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x004d: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (8243(0x2033, float:1.1551E\-41) ?[int, float, short, byte, char])\l \l0x004f: INVOKE  (r0 I:java.lang.StringBuilder), (r7 I:char) java.lang.StringBuilder.append(char):java.lang.StringBuilder type: VIRTUAL \l0x0052: INVOKE  (r7 I:java.lang.String) = (r0 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0056|0x0056: RETURN  (r7 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String org.mapsforge.map.layer.overlay.Grid.convertCoordinate((r7 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
}

