digraph "CFG fororg.mapsforge.map.layer.debug.TileGridLayer.createPaintBack(Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Lorg\/mapsforge\/map\/model\/DisplayModel;)Lorg\/mapsforge\/core\/graphics\/Paint;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint) = (r1 I:org.mapsforge.core.graphics.GraphicFactory) org.mapsforge.core.graphics.GraphicFactory.createPaint():org.mapsforge.core.graphics.Paint type: INTERFACE \l0x0004: SGET  (r0 I:org.mapsforge.core.graphics.Color) =  org.mapsforge.core.graphics.Color.WHITE org.mapsforge.core.graphics.Color \l0x0006: INVOKE  \l  (r1 I:org.mapsforge.core.graphics.Paint)\l  (r0 I:org.mapsforge.core.graphics.Color)\l org.mapsforge.core.graphics.Paint.setColor(org.mapsforge.core.graphics.Color):void type: INTERFACE \l0x0009: INVOKE  (r2 I:float) = (r2 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getScaleFactor():float type: VIRTUAL \l0x000d: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (1082130432(0x40800000, float:4.0) ?[int, float, short, byte, char])\l \l0x000f: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float) \l0x0011: INVOKE  (r1 I:org.mapsforge.core.graphics.Paint), (r2 I:float) org.mapsforge.core.graphics.Paint.setStrokeWidth(float):void type: INTERFACE \l0x0014: SGET  (r2 I:org.mapsforge.core.graphics.Style) =  org.mapsforge.core.graphics.Style.STROKE org.mapsforge.core.graphics.Style \l0x0016: INVOKE  \l  (r1 I:org.mapsforge.core.graphics.Paint)\l  (r2 I:org.mapsforge.core.graphics.Style)\l org.mapsforge.core.graphics.Paint.setStyle(org.mapsforge.core.graphics.Style):void type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN  (r1 I:org.mapsforge.core.graphics.Paint) \l}"];
MethodNode[shape=record,label="{private static org.mapsforge.core.graphics.Paint org.mapsforge.map.layer.debug.TileGridLayer.createPaintBack((r1 I:org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

