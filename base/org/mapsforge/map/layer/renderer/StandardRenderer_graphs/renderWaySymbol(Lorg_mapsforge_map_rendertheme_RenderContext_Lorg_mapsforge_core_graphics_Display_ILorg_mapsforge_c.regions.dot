digraph "CFG fororg.mapsforge.map.layer.renderer.StandardRenderer.renderWaySymbol(Lorg\/mapsforge\/map\/rendertheme\/RenderContext;Lorg\/mapsforge\/core\/graphics\/Display;ILorg\/mapsforge\/core\/graphics\/Bitmap;FZZFFZLorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;)V" {
subgraph cluster_Region_719392136 {
label = "R(1:(1:(1:2)))";
node [shape=record,color=blue];
subgraph cluster_Region_1096999865 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_648142304 {
label = "IF [B:1:0x0003] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r13.renderLabels == true) goto L_0x0005\l}"];
subgraph cluster_Region_1692943083 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|org.mapsforge.map.layer.renderer.WayDecorator.renderSymbol(r17, r15, r16, r18, r19, r20, r21, r22, r23, r24.getCoordinatesAbsolute(), r14.labels)\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.StandardRenderer.renderWaySymbol((r13v0 'this' org.mapsforge.map.layer.renderer.StandardRenderer A[IMMUTABLE_TYPE, THIS]), (r14v0 org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 org.mapsforge.core.graphics.Display A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 org.mapsforge.core.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 org.mapsforge.map.layer.renderer.PolylineContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_4[style=dashed];
Node_2 -> Node_3;
Node_0 -> Node_1;
}

