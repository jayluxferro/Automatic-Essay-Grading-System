digraph "CFG fororg.mapsforge.map.layer.renderer.StandardRenderer.renderWaySymbol(Lorg\/mapsforge\/map\/rendertheme\/RenderContext;Lorg\/mapsforge\/core\/graphics\/Display;ILorg\/mapsforge\/core\/graphics\/Bitmap;FZZFFZLorg\/mapsforge\/map\/layer\/renderer\/PolylineContainer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r13 I:?[OBJECT, ARRAY]) \l0x0001: IGET  (r1 I:boolean) = (r0 I:org.mapsforge.map.layer.renderer.StandardRenderer) org.mapsforge.map.layer.renderer.StandardRenderer.renderLabels boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  (r11 I:org.mapsforge.core.model.Point[][]) = (r24 I:org.mapsforge.map.layer.renderer.PolylineContainer) org.mapsforge.map.layer.renderer.PolylineContainer.getCoordinatesAbsolute():org.mapsforge.core.model.Point[][] type: VIRTUAL \l0x0009: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r14 I:?[OBJECT, ARRAY]) \l0x000a: IGET  (r12 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>) = (r1 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.labels java.util.List \l0x000c: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r17 I:?[OBJECT, ARRAY]) \l0x000e: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r15 I:?[OBJECT, ARRAY]) \l0x000f: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0011: MOVE  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0013: MOVE  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r19 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: MOVE  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0017: MOVE  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0019: MOVE  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001b: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r23 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x001d: INVOKE  \l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l  (r3 I:org.mapsforge.core.graphics.Display)\l  (r4 I:int)\l  (r5 I:float)\l  (r6 I:boolean)\l  (r7 I:boolean)\l  (r8 I:float)\l  (r9 I:float)\l  (r10 I:boolean)\l  (r11 I:org.mapsforge.core.model.Point[][])\l  (r12 I:java.util.List)\l org.mapsforge.map.layer.renderer.WayDecorator.renderSymbol(org.mapsforge.core.graphics.Bitmap, org.mapsforge.core.graphics.Display, int, float, boolean, boolean, float, float, boolean, org.mapsforge.core.model.Point[][], java.util.List):void type: STATIC \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.StandardRenderer.renderWaySymbol((r13 'this' I:org.mapsforge.map.layer.renderer.StandardRenderer A[IMMUTABLE_TYPE, THIS]), (r14 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:org.mapsforge.core.graphics.Display A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:org.mapsforge.core.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:org.mapsforge.map.layer.renderer.PolylineContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

