digraph "CFG fororg.mapsforge.map.layer.renderer.RendererJob.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|0x0001: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0004 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: INVOKE  (r1 I:boolean) = \l  (r4 I:org.mapsforge.map.layer.queue.Job)\l  (r5 I:java.lang.Object)\l org.mapsforge.map.layer.queue.Job.equals(java.lang.Object):boolean type: SUPER \l0x0008: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: RETURN  (r2 I:boolean) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INSTANCE_OF  (r1 I:boolean) = (r5 I:?[OBJECT, ARRAY]) org.mapsforge.map.layer.renderer.RendererJob \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0011 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: CHECK_CAST  (r5 I:org.mapsforge.map.layer.renderer.RendererJob) = (org.mapsforge.map.layer.renderer.RendererJob) (r5 I:?[OBJECT, ARRAY]) \l0x0013: IGET  (r1 I:org.mapsforge.map.datastore.MapDataStore) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.mapDataStore org.mapsforge.map.datastore.MapDataStore \l0x0015: IGET  (r3 I:org.mapsforge.map.datastore.MapDataStore) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.mapDataStore org.mapsforge.map.datastore.MapDataStore \l0x0017: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|0x001e: IGET  (r1 I:float) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.textScale float \l0x0020: INVOKE  (r1 I:int) = (r1 I:float) java.lang.Float.floatToIntBits(float):int type: STATIC \l0x0024: IGET  (r3 I:float) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.textScale float \l0x0026: INVOKE  (r3 I:int) = (r3 I:float) java.lang.Float.floatToIntBits(float):int type: STATIC \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002d \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l}"];
Node_16 [shape=record,label="{16\:\ 0x002f|0x002f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0036 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0036 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0035|0x0035: RETURN  (r2 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0036|0x0036: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0045 \l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|0x003a: IGET  (r1 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x003c: IGET  (r3 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x003e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r3 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0045 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|0x0044: RETURN  (r2 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0045|0x0045: IGET  (r1 I:boolean) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.labelsOnly boolean \l0x0047: IGET  (r3 I:boolean) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.labelsOnly boolean \l}"];
Node_26 [shape=record,label="{26\:\ 0x0049|0x0049: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x004c \l}"];
Node_27 [shape=record,label="{27\:\ 0x004b|0x004b: RETURN  (r2 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x004c|0x004c: IGET  (r1 I:org.mapsforge.map.model.DisplayModel) = (r4 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.displayModel org.mapsforge.map.model.DisplayModel \l0x004e: IGET  (r5 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.displayModel org.mapsforge.map.model.DisplayModel \l0x0050: INVOKE  (r5 I:boolean) = \l  (r1 I:org.mapsforge.map.model.DisplayModel)\l  (r5 I:java.lang.Object)\l org.mapsforge.map.model.DisplayModel.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_29 [shape=record,label="{29\:\ 0x0054|0x0054: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0057 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0056|0x0056: RETURN  (r2 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0057|0x0057: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.map.layer.renderer.RendererJob.equals((r4 'this' I:org.mapsforge.map.layer.renderer.RendererJob A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
}

