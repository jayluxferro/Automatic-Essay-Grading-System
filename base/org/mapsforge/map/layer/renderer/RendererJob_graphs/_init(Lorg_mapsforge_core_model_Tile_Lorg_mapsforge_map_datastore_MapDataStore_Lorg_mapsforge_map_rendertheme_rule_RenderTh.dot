digraph "CFG fororg.mapsforge.map.layer.renderer.RendererJob.\<init\>(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/datastore\/MapDataStore;Lorg\/mapsforge\/map\/rendertheme\/rule\/RenderThemeFuture;Lorg\/mapsforge\/map\/model\/DisplayModel;FZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|super(r1, r6)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|if (r2 == null) goto L_0x0038\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if ((r5 \> 0.0f ? 1 : (r5 == 0.0f ? 0 : \-1)) \<= 0) goto L_0x0021\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (java.lang.Float.isNaN(r5) != false) goto L_0x0021\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|r0.labelsOnly = r7\lr0.displayModel = r4\lr0.mapDataStore = r2\lr0.renderThemeFuture = r3\lr0.textScale = r5\lr0.hashCodeValue = calculateHashCode()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"invalid textScale: \")\lr2.append(r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038}"];
Node_11 [shape=record,label="{11\:\ 0x003f|throw new java.lang.IllegalArgumentException(\"mapFile must not be null\")\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.RendererJob.\<init\>((r0v0 'this' org.mapsforge.map.layer.renderer.RendererJob A[IMMUTABLE_TYPE, THIS]), (r1v0 org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 org.mapsforge.map.datastore.MapDataStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 org.mapsforge.map.rendertheme.rule.RenderThemeFuture A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

