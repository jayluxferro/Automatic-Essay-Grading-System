digraph "CFG fororg.mapsforge.map.layer.renderer.RendererJob.\<init\>(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/map\/datastore\/MapDataStore;Lorg\/mapsforge\/map\/rendertheme\/rule\/RenderThemeFuture;Lorg\/mapsforge\/map\/model\/DisplayModel;FZZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  \l  (r0 I:org.mapsforge.map.layer.queue.Job)\l  (r1 I:org.mapsforge.core.model.Tile)\l  (r6 I:boolean)\l org.mapsforge.map.layer.queue.Job.\<init\>(org.mapsforge.core.model.Tile, boolean):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: CMP_G  (r1 I:int) = (r5 I:float), (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r5 I:float) java.lang.Float.isNaN(float):boolean type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0021 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IPUT  \l  (r7 I:boolean)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.labelsOnly boolean \l0x0012: IPUT  \l  (r4 I:org.mapsforge.map.model.DisplayModel)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.displayModel org.mapsforge.map.model.DisplayModel \l0x0014: IPUT  \l  (r2 I:org.mapsforge.map.datastore.MapDataStore)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.mapDataStore org.mapsforge.map.datastore.MapDataStore \l0x0016: IPUT  \l  (r3 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x0018: IPUT  \l  (r5 I:float)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.textScale float \l0x001a: INVOKE  (r1 I:int) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.calculateHashCode():int type: DIRECT \l0x001e: IPUT  \l  (r1 I:int)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.RendererJob.hashCodeValue int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0023: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0025: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0028: CONST_STR  (r3 I:java.lang.String) =  \"invalid textScale: \" \l0x002a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:float) java.lang.StringBuilder.append(float):java.lang.StringBuilder type: VIRTUAL \l0x0030: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0034: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003a: CONST_STR  (r2 I:java.lang.String) =  \"mapFile must not be null\" \l0x003c: INVOKE  \l  (r1 I:java.lang.IllegalArgumentException)\l  (r2 I:java.lang.String)\l java.lang.IllegalArgumentException.\<init\>(java.lang.String):void type: DIRECT \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.RendererJob.\<init\>((r0 'this' I:org.mapsforge.map.layer.renderer.RendererJob A[IMMUTABLE_TYPE, THIS]), (r1 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:org.mapsforge.map.datastore.MapDataStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_10 -> Node_11;
}

