digraph "CFG fororg.mapsforge.map.layer.renderer.TileDependencies.removeTileData(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0013 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x000a: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r2 I:java.util.Map) = (java.util.Map) (r2 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.remove(java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.layer.renderer.TileDependencies.removeTileData((r1 'this' I:org.mapsforge.map.layer.renderer.TileDependencies A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
}

