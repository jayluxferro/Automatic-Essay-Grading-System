digraph "CFG fororg.mapsforge.map.layer.renderer.TileDependencies.getOverlappingElements(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;)Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x000e: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0025 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0018: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Map), (r2 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x001c: CHECK_CAST  (r2 I:java.util.Map) = (java.util.Map) (r2 I:?[OBJECT, ARRAY]) \l0x001e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0022: CHECK_CAST  (r2 I:java.util.Set) = (java.util.Set) (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: RETURN  \l  (r2 I:java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>)\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|0x0025: NEW_INSTANCE  (r2 I:java.util.HashSet) =  java.util.HashSet \l0x0027: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0028: INVOKE  (r2 I:java.util.HashSet), (r3 I:int) java.util.HashSet.\<init\>(int):void type: DIRECT \l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: RETURN  \l  (r2 I:java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>)\l \l}"];
MethodNode[shape=record,label="{java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\> org.mapsforge.map.layer.renderer.TileDependencies.getOverlappingElements((r1 'this' I:org.mapsforge.map.layer.renderer.TileDependencies A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/core\/model\/Tile;, Lorg\/mapsforge\/core\/model\/Tile;, ), Ljava\/util\/Set\<, Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
}

