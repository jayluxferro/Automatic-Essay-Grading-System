digraph "CFG fororg.mapsforge.map.layer.renderer.TileDependencies.addOverlappingElement(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r2 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0012 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r2 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x000a: NEW_INSTANCE  (r1 I:java.util.HashMap) =  java.util.HashMap \l0x000c: INVOKE  (r1 I:java.util.HashMap) java.util.HashMap.\<init\>():void type: DIRECT \l0x000f: INVOKE  \l  (r0 I:java.util.Map)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r2 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0014: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0018: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x001a: INVOKE  (r0 I:boolean) = (r0 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.containsKey(java.lang.Object):boolean type: INTERFACE \l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0030 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r2 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0022: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0026: CHECK_CAST  (r0 I:java.util.Map) = (java.util.Map) (r0 I:?[OBJECT, ARRAY]) \l0x0028: NEW_INSTANCE  (r1 I:java.util.HashSet) =  java.util.HashSet \l0x002a: INVOKE  (r1 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x002d: INVOKE  \l  (r0 I:java.util.Map)\l  (r4 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IGET  (r0 I:java.util.Map\<org.mapsforge.core.model.Tile, java.util.Map\<org.mapsforge.core.model.Tile, java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>\>\>) = (r2 I:org.mapsforge.map.layer.renderer.TileDependencies) org.mapsforge.map.layer.renderer.TileDependencies.overlapData java.util.Map \l0x0032: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Map), (r3 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x0036: CHECK_CAST  (r3 I:java.util.Map) = (java.util.Map) (r3 I:?[OBJECT, ARRAY]) \l0x0038: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.Map), (r4 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x003c: CHECK_CAST  (r3 I:java.util.Set) = (java.util.Set) (r3 I:?[OBJECT, ARRAY]) \l0x003e: INVOKE  (r3 I:java.util.Set), (r5 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_7 [shape=record,label="{7\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.layer.renderer.TileDependencies.addOverlappingElement((r2 'this' I:org.mapsforge.map.layer.renderer.TileDependencies A[IMMUTABLE_TYPE, THIS]), (r3 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:org.mapsforge.core.mapelements.MapElementContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

