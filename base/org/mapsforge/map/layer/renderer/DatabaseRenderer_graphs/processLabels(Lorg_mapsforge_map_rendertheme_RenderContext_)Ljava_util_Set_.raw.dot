digraph "CFG fororg.mapsforge.map.layer.renderer.DatabaseRenderer.processLabels(Lorg\/mapsforge\/map\/rendertheme\/RenderContext;)Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: NEW_INSTANCE  (r0 I:java.util.HashSet) =  java.util.HashSet \l0x0002: INVOKE  (r0 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT \l0x0005: IGET  (r1 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|0x0007: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|SYNTHETIC\lSplitter:B:2:0x0008\l}"];
Node_3 [shape=record,label="{3\:\ ?|Splitter:B:2:0x0008\l|0x0008: IGET  (r2 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}, TRY_ENTER]\l0x000a: IGET  (r2 I:org.mapsforge.core.model.Tile) = (r2 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x00f3 \}]\l0x000c: INVOKE  (r2 I:java.util.Set) = (r2 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.getNeighbours():java.util.Set type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x0010: INVOKE  (r3 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0014: NEW_INSTANCE  (r4 I:java.util.HashSet) =  java.util.HashSet A[Catch:\{ all \-\> 0x00f3 \}]\l0x0016: INVOKE  (r4 I:java.util.HashSet) java.util.HashSet.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x00f3 \}]\l0x0019: IGET  (r5 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x001b: IGET  (r6 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}]\l0x001d: IGET  (r6 I:org.mapsforge.core.model.Tile) = (r6 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x00f3 \}]\l0x001f: INVOKE  \l  (r5 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.TileDependencies.addTileInProgress(org.mapsforge.core.model.Tile):void type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: INVOKE  (r5 I:boolean) = (r3 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x007c A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: INVOKE  (r5 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x002c: CHECK_CAST  (r5 I:org.mapsforge.core.model.Tile) = (org.mapsforge.core.model.Tile) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x002e: IGET  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x0030: INVOKE  (r6 I:boolean) = \l  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r5 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.TileDependencies.isTileInProgress(org.mapsforge.core.model.Tile):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0034|0x0034: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x004b A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|0x0036: IGET  (r6 I:org.mapsforge.map.layer.cache.TileCache) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x00f3 \}]\l0x0038: IGET  (r7 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}]\l0x003a: INVOKE  (r7 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r7 I:org.mapsforge.map.layer.renderer.RendererJob)\l  (r5 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.RendererJob.otherTile(org.mapsforge.core.model.Tile):org.mapsforge.map.layer.renderer.RendererJob type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x003e: INVOKE  (r6 I:boolean) = \l  (r6 I:org.mapsforge.map.layer.cache.TileCache)\l  (r7 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0042|0x0042: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0045 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|0x0044: GOTO  \-\> 0x004b A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IGET  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x0047: INVOKE  \l  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r5 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.TileDependencies.removeTileData(org.mapsforge.core.model.Tile):void type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x004a: GOTO  \-\> 0x0022 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x004b|0x004b: IGET  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x004d: IGET  (r7 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}]\l0x004f: IGET  (r7 I:org.mapsforge.core.model.Tile) = (r7 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x00f3 \}]\l0x0051: INVOKE  (r6 I:java.util.Set) = \l  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r5 I:org.mapsforge.core.model.Tile)\l  (r7 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.TileDependencies.getOverlappingElements(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile):java.util.Set type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x0055: INVOKE  (r0 I:java.util.Set), (r6 I:java.util.Collection) java.util.Set.addAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0058: IGET  (r6 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.labels java.util.List A[Catch:\{ all \-\> 0x00f3 \}]\l0x005a: INVOKE  (r6 I:java.util.Iterator) = (r6 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x005e|0x005e: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0062|0x0062: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0078 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|0x0064: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0068: CHECK_CAST  (r7 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x006a: INVOKE  (r8 I:org.mapsforge.core.model.Rectangle) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.getBoundaryAbsolute():org.mapsforge.core.model.Rectangle type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x006e: INVOKE  (r8 I:boolean) = \l  (r7 I:org.mapsforge.core.mapelements.MapElementContainer)\l  (r8 I:org.mapsforge.core.model.Rectangle)\l org.mapsforge.core.mapelements.MapElementContainer.intersects(org.mapsforge.core.model.Rectangle):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0072|0x0072: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x005e A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0074|0x0074: INVOKE  (r4 I:java.util.Set), (r7 I:java.lang.Object) java.util.Set.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0077: GOTO  \-\> 0x005e A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0078|0x0078: INVOKE  (r3 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x007b: GOTO  \-\> 0x0022 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_19 [shape=record,label="{19\:\ 0x007c|0x007c: IGET  (r3 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.labels java.util.List A[Catch:\{ all \-\> 0x00f3 \}]\l0x007e: INVOKE  (r3 I:java.util.List), (r4 I:java.util.Collection) java.util.List.removeAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0081: IGET  (r3 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.labels java.util.List A[Catch:\{ all \-\> 0x00f3 \}]\l0x0083: INVOKE  (r3 I:java.util.List) = (r3 I:java.util.List) org.mapsforge.map.util.LayerUtil.collisionFreeOrdered(java.util.List):java.util.List type: STATIC A[Catch:\{ all \-\> 0x00f3 \}]\l0x0087: INVOKE  (r4 I:java.util.Iterator) = (r3 I:java.util.List) java.util.List.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_20 [shape=record,label="{20\:\ 0x008b|0x008b: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x008f|0x008f: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x00b1 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0091|0x0091: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x0095: CHECK_CAST  (r5 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x0097: INVOKE  (r6 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x009b|0x009b: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x009f|0x009f: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x008b A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a1|0x00a1: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x00a5: CHECK_CAST  (r7 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r7 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x00a7: INVOKE  (r7 I:boolean) = \l  (r7 I:org.mapsforge.core.mapelements.MapElementContainer)\l  (r5 I:org.mapsforge.core.mapelements.MapElementContainer)\l org.mapsforge.core.mapelements.MapElementContainer.clashesWith(org.mapsforge.core.mapelements.MapElementContainer):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x00ab|0x00ab: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x009b A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x00ad|0x00ad: INVOKE  (r4 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x00b0: GOTO  \-\> 0x008b A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x00b1|0x00b1: INVOKE  (r0 I:java.util.Set), (r3 I:java.util.Collection) java.util.Set.addAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x00b4: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x00b8|0x00b8: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x00bc|0x00bc: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x00f1 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_31 [shape=record,label="{31\:\ 0x00be|0x00be: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x00c2: CHECK_CAST  (r3 I:org.mapsforge.core.model.Tile) = (org.mapsforge.core.model.Tile) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x00c4: IGET  (r4 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x00c6: IGET  (r5 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}]\l0x00c8: IGET  (r5 I:org.mapsforge.core.model.Tile) = (r5 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x00f3 \}]\l0x00ca: INVOKE  \l  (r4 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r5 I:org.mapsforge.core.model.Tile)\l  (r3 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.TileDependencies.removeTileData(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile):void type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x00cd: INVOKE  (r4 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_32 [shape=record,label="{32\:\ 0x00d1|0x00d1: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_33 [shape=record,label="{33\:\ 0x00d5|0x00d5: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00b8 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_34 [shape=record,label="{34\:\ 0x00d7|0x00d7: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x00f3 \}]\l0x00db: CHECK_CAST  (r5 I:org.mapsforge.core.mapelements.MapElementContainer) = (org.mapsforge.core.mapelements.MapElementContainer) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l0x00dd: INVOKE  (r6 I:org.mapsforge.core.model.Rectangle) = (r3 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.getBoundaryAbsolute():org.mapsforge.core.model.Rectangle type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x00e1: INVOKE  (r6 I:boolean) = \l  (r5 I:org.mapsforge.core.mapelements.MapElementContainer)\l  (r6 I:org.mapsforge.core.model.Rectangle)\l org.mapsforge.core.mapelements.MapElementContainer.intersects(org.mapsforge.core.model.Rectangle):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_35 [shape=record,label="{35\:\ 0x00e5|0x00e5: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x00d1 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_36 [shape=record,label="{36\:\ 0x00e7|0x00e7: IGET  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies) = (r9 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) org.mapsforge.map.layer.renderer.DatabaseRenderer.tileDependencies org.mapsforge.map.layer.renderer.TileDependencies A[Catch:\{ all \-\> 0x00f3 \}]\l0x00e9: IGET  (r7 I:org.mapsforge.map.layer.renderer.RendererJob) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x00f3 \}]\l0x00eb: IGET  (r7 I:org.mapsforge.core.model.Tile) = (r7 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x00f3 \}]\l0x00ed: INVOKE  \l  (r6 I:org.mapsforge.map.layer.renderer.TileDependencies)\l  (r7 I:org.mapsforge.core.model.Tile)\l  (r3 I:org.mapsforge.core.model.Tile)\l  (r5 I:org.mapsforge.core.mapelements.MapElementContainer)\l org.mapsforge.map.layer.renderer.TileDependencies.addOverlappingElement(org.mapsforge.core.model.Tile, org.mapsforge.core.model.Tile, org.mapsforge.core.mapelements.MapElementContainer):void type: VIRTUAL A[Catch:\{ all \-\> 0x00f3 \}]\l0x00f0: GOTO  \-\> 0x00d1 A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_37 [shape=record,label="{37\:\ 0x00f1|0x00f1: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_38 [shape=record,label="{38\:\ 0x00f2|0x00f2: RETURN  \l  (r0 I:java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\>)\l A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_39 [shape=record,label="{39\:\ 0x00f3|ExcHandler: all null\lSplitter:B:2:0x0008\l|0x00f3: MOVE_EXCEPTION  (r10 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x00f3 \}]\l}"];
Node_40 [shape=record,label="{40\:\ 0x00f4|0x00f4: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x00f3 \}, TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x00f5|0x00f5: THROW  (r10 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private java.util.Set\<org.mapsforge.core.mapelements.MapElementContainer\> org.mapsforge.map.layer.renderer.DatabaseRenderer.processLabels((r9 'this' I:org.mapsforge.map.layer.renderer.DatabaseRenderer A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Lorg\/mapsforge\/map\/rendertheme\/RenderContext;, ), Ljava\/util\/Set\<, Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_39;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_4;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_13;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_13;
Node_18 -> Node_4;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_20;
Node_24 -> Node_25[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_23;
Node_26 -> Node_27[style=dashed];
Node_27 -> Node_20;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_29;
Node_33 -> Node_34[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_32;
Node_35 -> Node_36[style=dashed];
Node_36 -> Node_32;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_40 -> Node_41;
}

