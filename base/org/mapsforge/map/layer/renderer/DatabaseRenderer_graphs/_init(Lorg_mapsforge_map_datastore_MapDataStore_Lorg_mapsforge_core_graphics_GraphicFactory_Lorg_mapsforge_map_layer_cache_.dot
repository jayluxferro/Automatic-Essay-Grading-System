digraph "CFG fororg.mapsforge.map.layer.renderer.DatabaseRenderer.\<init\>(Lorg\/mapsforge\/map\/datastore\/MapDataStore;Lorg\/mapsforge\/core\/graphics\/GraphicFactory;Lorg\/mapsforge\/map\/layer\/cache\/TileCache;Lorg\/mapsforge\/map\/layer\/labels\/TileBasedLabelStore;ZZLorg\/mapsforge\/map\/layer\/hills\/HillsRenderConfig;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r5 != false) goto L_0x0007\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r6 == false) goto L_0x0005\l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|r6 = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|r6 = true\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|PHI: r6 \l  PHI: (r6v1 boolean) = (r6v2 boolean), (r6v3 boolean) binds: [B:3:0x0007, B:2:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|super(r1, r2, r6, r7)\lr0.tileCache = r3\lr0.labelStore = r4\lr0.renderLabels = r5\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r5 != false) goto L_0x0017\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|r0.tileDependencies = null\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|r0.tileDependencies = new org.mapsforge.map.layer.renderer.TileDependencies()\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.DatabaseRenderer.\<init\>((r0v0 'this' org.mapsforge.map.layer.renderer.DatabaseRenderer A[IMMUTABLE_TYPE, THIS]), (r1v0 org.mapsforge.map.datastore.MapDataStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 org.mapsforge.core.graphics.GraphicFactory A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 org.mapsforge.map.layer.cache.TileCache A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 org.mapsforge.map.layer.labels.TileBasedLabelStore A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 org.mapsforge.map.layer.hills.HillsRenderConfig A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1[style=dashed];
Node_0 -> Node_3;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_9;
Node_7 -> Node_8;
}

