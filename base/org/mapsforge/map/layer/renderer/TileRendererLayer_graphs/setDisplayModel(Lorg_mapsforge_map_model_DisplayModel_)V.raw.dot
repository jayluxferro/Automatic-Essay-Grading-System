digraph "CFG fororg.mapsforge.map.layer.renderer.TileRendererLayer.setDisplayModel(Lorg\/mapsforge\/map\/model\/DisplayModel;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  \l  (r3 I:org.mapsforge.map.layer.TileLayer)\l  (r4 I:org.mapsforge.map.model.DisplayModel)\l org.mapsforge.map.layer.TileLayer.setDisplayModel(org.mapsforge.map.model.DisplayModel):void type: SUPER A[Catch:\{ all \-\> 0x002b \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0020 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.compileRenderTheme():void type: VIRTUAL A[Catch:\{ all \-\> 0x002b \}]\l0x0009: IGET  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.mapWorkerPool org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001a A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: NEW_INSTANCE  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) =  org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l0x000f: IGET  (r0 I:org.mapsforge.map.layer.cache.TileCache) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.tileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ all \-\> 0x002b \}]\l0x0011: IGET  (r1 I:org.mapsforge.map.layer.queue.JobQueue) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.jobQueue org.mapsforge.map.layer.queue.JobQueue A[Catch:\{ all \-\> 0x002b \}]\l0x0013: IGET  (r2 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.databaseRenderer org.mapsforge.map.layer.renderer.DatabaseRenderer A[Catch:\{ all \-\> 0x002b \}]\l0x0015: INVOKE  \l  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool)\l  (r0 I:org.mapsforge.map.layer.cache.TileCache)\l  (r1 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r2 I:org.mapsforge.map.layer.renderer.DatabaseRenderer)\l  (r3 I:org.mapsforge.map.layer.Layer)\l org.mapsforge.map.layer.renderer.MapWorkerPool.\<init\>(org.mapsforge.map.layer.cache.TileCache, org.mapsforge.map.layer.queue.JobQueue, org.mapsforge.map.layer.renderer.DatabaseRenderer, org.mapsforge.map.layer.Layer):void type: DIRECT A[Catch:\{ all \-\> 0x002b \}]\l0x0018: IPUT  \l  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool)\l  (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer)\l org.mapsforge.map.layer.renderer.TileRendererLayer.mapWorkerPool org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: IGET  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.mapWorkerPool org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l0x001c: INVOKE  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.start():void type: VIRTUAL A[Catch:\{ all \-\> 0x002b \}]\l0x001f: GOTO  \-\> 0x0029 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IGET  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.mapWorkerPool org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0029 A[Catch:\{ all \-\> 0x002b \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IGET  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = (r3 I:org.mapsforge.map.layer.renderer.TileRendererLayer) org.mapsforge.map.layer.renderer.TileRendererLayer.mapWorkerPool org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x002b \}]\l0x0026: INVOKE  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.stop():void type: VIRTUAL A[Catch:\{ all \-\> 0x002b \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: RETURN   \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x002b: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.renderer.TileRendererLayer.setDisplayModel((r3 'this' I:org.mapsforge.map.layer.renderer.TileRendererLayer A[IMMUTABLE_TYPE, THIS]), (r4 I:org.mapsforge.map.model.DisplayModel A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

