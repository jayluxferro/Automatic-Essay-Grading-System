digraph "CFG fororg.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r1 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0112 \}, TRY_ENTER]\l0x0003: INVOKE  (r1 I:boolean) = (r1 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$000(org.mapsforge.map.layer.renderer.MapWorkerPool):boolean type: STATIC A[Catch:\{ all \-\> 0x0112 \}]\l0x0006: NOP   A[TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IGET  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x000b: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x000d: INVOKE  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) org.mapsforge.map.rendertheme.rule.RenderThemeFuture.decrementRefCount():void type: VIRTUAL \l0x0010: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool \l0x0012: INVOKE  (r0 I:org.mapsforge.map.layer.queue.JobQueue) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$800(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.queue.JobQueue type: STATIC \l0x0016: IGET  (r1 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0018: INVOKE  \l  (r0 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r1 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.remove(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|SYNTHETIC\lSplitter:B:6:0x001c\l}"];
Node_7 [shape=record,label="{7\:\ ?|Splitter:B:6:0x001c\l|0x001c: SGET  (r1 I:boolean) =  org.mapsforge.map.layer.renderer.MapWorkerPool.DEBUG_TIMING boolean A[Catch:\{ all \-\> 0x0112 \}, TRY_ENTER]\l0x001e: CONST  (r2 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ all \-\> 0x0112 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0049 A[Catch:\{ all \-\> 0x0112 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: INVOKE  (r4 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC A[Catch:\{ all \-\> 0x0112 \}]\l0x0026: INVOKE  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.access$200():java.util.logging.Logger type: STATIC A[Catch:\{ all \-\> 0x0112 \}]\l0x002a: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0112 \}]\l0x002c: INVOKE  (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0112 \}]\l0x002f: CONST_STR  (r7 I:java.lang.String) =  \"ConcurrentJobs \" A[Catch:\{ all \-\> 0x0112 \}]\l0x0031: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x0034: IGET  (r7 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0112 \}]\l0x0036: INVOKE  (r7 I:java.util.concurrent.atomic.AtomicInteger) = (r7 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$100(org.mapsforge.map.layer.renderer.MapWorkerPool):java.util.concurrent.atomic.AtomicInteger type: STATIC A[Catch:\{ all \-\> 0x0112 \}]\l0x003a: INVOKE  (r7 I:int) = (r7 I:java.util.concurrent.atomic.AtomicInteger) java.util.concurrent.atomic.AtomicInteger.incrementAndGet():int type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x003e: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:int) java.lang.StringBuilder.append(int):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x0041: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x0045: INVOKE  (r1 I:java.util.logging.Logger), (r6 I:java.lang.String) java.util.logging.Logger.info(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x0048: GOTO  \-\> 0x004a A[Catch:\{ all \-\> 0x0112 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|0x0049: MOVE  (r4 I:?[long, double]) = (r2 I:?[long, double]) A[Catch:\{ all \-\> 0x0112 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|0x004a: IGET  (r1 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0112 \}]\l0x004c: INVOKE  (r1 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) = (r1 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$300(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.renderer.DatabaseRenderer type: STATIC A[Catch:\{ all \-\> 0x0112 \}]\l0x0050: IGET  (r6 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x0112 \}]\l0x0052: INVOKE  (r1 I:org.mapsforge.core.graphics.TileBitmap) = \l  (r1 I:org.mapsforge.map.layer.renderer.DatabaseRenderer)\l  (r6 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.DatabaseRenderer.executeJob(org.mapsforge.map.layer.renderer.RendererJob):org.mapsforge.core.graphics.TileBitmap type: VIRTUAL A[Catch:\{ all \-\> 0x0112 \}]\l0x0055: NOP   A[TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0056|SYNTHETIC\lSplitter:B:12:0x0056\l}"];
Node_13 [shape=record,label="{13\:\ ?|Splitter:B:12:0x0056\l|0x0056: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}, TRY_ENTER]\l0x0058: INVOKE  (r0 I:boolean) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$000(org.mapsforge.map.layer.renderer.MapWorkerPool):boolean type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x005b: NOP   A[TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x005c|0x005c: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0076 \l}"];
Node_15 [shape=record,label="{15\:\ 0x005e|0x005e: IGET  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0060: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x0062: INVOKE  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) org.mapsforge.map.rendertheme.rule.RenderThemeFuture.decrementRefCount():void type: VIRTUAL \l0x0065: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool \l0x0067: INVOKE  (r0 I:org.mapsforge.map.layer.queue.JobQueue) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$800(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.queue.JobQueue type: STATIC \l0x006b: IGET  (r2 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x006d: INVOKE  \l  (r0 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r2 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.remove(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|0x0070: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0075 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|0x0072: INVOKE  (r1 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.decrementRefCount():void type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x0075|0x0075: RETURN   \l}"];
Node_19 [shape=record,label="{19\:\ 0x0076|SYNTHETIC\lSplitter:B:19:0x0076\l}"];
Node_20 [shape=record,label="{20\:\ ?|Splitter:B:19:0x0076\l|0x0076: IGET  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x0110 \}, TRY_ENTER]\l0x0078: IGET  (r0 I:boolean) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.labelsOnly boolean A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_21 [shape=record,label="{21\:\ 0x007a|0x007a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0096 A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x007c|0x007c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0096 A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x007e|0x007e: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x0080: INVOKE  (r0 I:org.mapsforge.map.layer.cache.TileCache) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$400(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.cache.TileCache type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x0084: IGET  (r6 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x0110 \}]\l0x0086: INVOKE  \l  (r0 I:org.mapsforge.map.layer.cache.TileCache)\l  (r6 I:org.mapsforge.map.layer.queue.Job)\l  (r1 I:org.mapsforge.core.graphics.TileBitmap)\l org.mapsforge.map.layer.cache.TileCache.put(org.mapsforge.map.layer.queue.Job, org.mapsforge.core.graphics.TileBitmap):void type: INTERFACE A[Catch:\{ all \-\> 0x0110 \}]\l0x0089: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x008b: INVOKE  (r0 I:org.mapsforge.map.layer.renderer.DatabaseRenderer) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$300(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.renderer.DatabaseRenderer type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x008f: IGET  (r6 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob A[Catch:\{ all \-\> 0x0110 \}]\l0x0091: IGET  (r6 I:org.mapsforge.core.model.Tile) = (r6 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.tile org.mapsforge.core.model.Tile A[Catch:\{ all \-\> 0x0110 \}]\l0x0093: INVOKE  \l  (r0 I:org.mapsforge.map.layer.renderer.DatabaseRenderer)\l  (r6 I:org.mapsforge.core.model.Tile)\l org.mapsforge.map.layer.renderer.DatabaseRenderer.removeTileInProgress(org.mapsforge.core.model.Tile):void type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0096|0x0096: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x0098: INVOKE  (r0 I:org.mapsforge.map.layer.Layer) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$500(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.Layer type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x009c: INVOKE  (r0 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layer.requestRedraw():void type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x009f: SGET  (r0 I:boolean) =  org.mapsforge.map.layer.renderer.MapWorkerPool.DEBUG_TIMING boolean A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a1|0x00a1: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00f8 A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a3|0x00a3: INVOKE  (r6 I:long) =  java.lang.System.currentTimeMillis():long type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00a7: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x00a9: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicLong) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$600(org.mapsforge.map.layer.renderer.MapWorkerPool):java.util.concurrent.atomic.AtomicLong type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00ad: INVOKE  (r8 I:long) = (r0 I:java.util.concurrent.atomic.AtomicLong) java.util.concurrent.atomic.AtomicLong.incrementAndGet():long type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00b1: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x00b3: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicLong) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$700(org.mapsforge.map.layer.renderer.MapWorkerPool):java.util.concurrent.atomic.AtomicLong type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00b7: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0110 \}]\l0x00b8: ARITH  (r6 I:long) = (r6 I:long) \- (r4 I:long) A[Catch:\{ all \-\> 0x0110 \}]\l0x00b9: INVOKE  (r4 I:long) = (r0 I:java.util.concurrent.atomic.AtomicLong), (r6 I:long) java.util.concurrent.atomic.AtomicLong.addAndGet(long):long type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00bd: CONST  (r6 I:?[long, double]) = (10 ?[long, double]) A[Catch:\{ all \-\> 0x0110 \}]\l0x00bf: ARITH  (r6 I:long) = (r8 I:long) % (r6 I:long) A[Catch:\{ all \-\> 0x0110 \}]\l0x00c1: CMP_L  (r0 I:int) = (r6 I:long), (r2 I:long) A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_27 [shape=record,label="{27\:\ 0x00c3|0x00c3: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x00ef A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_28 [shape=record,label="{28\:\ 0x00c5|0x00c5: INVOKE  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.access$200():java.util.logging.Logger type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00c9: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch:\{ all \-\> 0x0110 \}]\l0x00cb: INVOKE  (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x0110 \}]\l0x00ce: CONST_STR  (r3 I:java.lang.String) =  \"TIMING \" A[Catch:\{ all \-\> 0x0110 \}]\l0x00d0: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00d3: INVOKE  (r3 I:java.lang.String) = (r8 I:long) java.lang.Long.toString(long):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00d7: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00da: CONST_STR  (r3 I:java.lang.String) =  \" \" A[Catch:\{ all \-\> 0x0110 \}]\l0x00dc: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00df: ARITH  (r4 I:long) = (r4 I:long) \/ (r8 I:long) A[Catch:\{ all \-\> 0x0110 \}]\l0x00e0: CAST  (r3 I:double) = (double) (r4 I:long) A[Catch:\{ all \-\> 0x0110 \}]\l0x00e1: INVOKE  (r3 I:java.lang.String) = (r3 I:double) java.lang.Double.toString(double):java.lang.String type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00e5: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00e8: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l0x00ec: INVOKE  (r0 I:java.util.logging.Logger), (r2 I:java.lang.String) java.util.logging.Logger.info(java.lang.String):void type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}]\l}"];
Node_29 [shape=record,label="{29\:\ 0x00ef|0x00ef: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool A[Catch:\{ all \-\> 0x0110 \}]\l0x00f1: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicInteger) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$100(org.mapsforge.map.layer.renderer.MapWorkerPool):java.util.concurrent.atomic.AtomicInteger type: STATIC A[Catch:\{ all \-\> 0x0110 \}]\l0x00f5: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicInteger) java.util.concurrent.atomic.AtomicInteger.decrementAndGet():int type: VIRTUAL A[Catch:\{ all \-\> 0x0110 \}, TRY_LEAVE]\l}"];
Node_30 [shape=record,label="{30\:\ 0x00f8|0x00f8: IGET  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x00fa: IGET  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x00fc: INVOKE  (r0 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) org.mapsforge.map.rendertheme.rule.RenderThemeFuture.decrementRefCount():void type: VIRTUAL \l0x00ff: IGET  (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool \l0x0101: INVOKE  (r0 I:org.mapsforge.map.layer.queue.JobQueue) = (r0 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$800(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.queue.JobQueue type: STATIC \l0x0105: IGET  (r2 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0107: INVOKE  \l  (r0 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r2 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.remove(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_31 [shape=record,label="{31\:\ 0x010a|0x010a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x010f \l}"];
Node_32 [shape=record,label="{32\:\ 0x010c|0x010c: INVOKE  (r1 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.decrementRefCount():void type: INTERFACE \l}"];
Node_33 [shape=record,label="{33\:\ 0x010f|0x010f: RETURN   \l}"];
Node_34 [shape=record,label="{34\:\ 0x0110|ExcHandler: all null\lSplitter:B:12:0x0056\l|0x0110: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_36 [shape=record,label="{36\:\ 0x0112|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0112: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_37 [shape=record,label="{37\:\ 0x0113|0x0113: MOVE  (r11 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0114: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0115: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r11 I:?[OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0116|0x0116: IGET  (r2 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0118: IGET  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) = (r2 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.renderThemeFuture org.mapsforge.map.rendertheme.rule.RenderThemeFuture \l0x011a: INVOKE  (r2 I:org.mapsforge.map.rendertheme.rule.RenderThemeFuture) org.mapsforge.map.rendertheme.rule.RenderThemeFuture.decrementRefCount():void type: VIRTUAL \l0x011d: IGET  (r2 I:org.mapsforge.map.layer.renderer.MapWorkerPool) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.this$0 org.mapsforge.map.layer.renderer.MapWorkerPool \l0x011f: INVOKE  (r2 I:org.mapsforge.map.layer.queue.JobQueue) = (r2 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.access$800(org.mapsforge.map.layer.renderer.MapWorkerPool):org.mapsforge.map.layer.queue.JobQueue type: STATIC \l0x0123: IGET  (r3 I:org.mapsforge.map.layer.renderer.RendererJob) = \l  (r12 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.rendererJob org.mapsforge.map.layer.renderer.RendererJob \l0x0125: INVOKE  \l  (r2 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r3 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.remove(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL \l}"];
Node_39 [shape=record,label="{39\:\ 0x0128|0x0128: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x012d \l}"];
Node_40 [shape=record,label="{40\:\ 0x012a|0x012a: INVOKE  (r1 I:org.mapsforge.core.graphics.TileBitmap) org.mapsforge.core.graphics.TileBitmap.decrementRefCount():void type: INTERFACE \l}"];
Node_41 [shape=record,label="{41\:\ 0x012d|0x012d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.run((r12 'this' I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_36;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_36;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_34;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_34;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_34 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
}

