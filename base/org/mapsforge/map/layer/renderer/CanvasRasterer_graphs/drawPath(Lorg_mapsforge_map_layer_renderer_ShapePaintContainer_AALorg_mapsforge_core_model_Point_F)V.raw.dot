digraph "CFG fororg.mapsforge.map.layer.renderer.CanvasRasterer.drawPath(Lorg\/mapsforge\/map\/layer\/renderer\/ShapePaintContainer;[[Lorg\/mapsforge\/core\/model\/Point;F)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.core.graphics.Path) = (r10 I:org.mapsforge.map.layer.renderer.CanvasRasterer) org.mapsforge.map.layer.renderer.CanvasRasterer.path org.mapsforge.core.graphics.Path \l0x0002: INVOKE  (r0 I:org.mapsforge.core.graphics.Path) org.mapsforge.core.graphics.Path.clear():void type: INTERFACE \l0x0005: ARRAY_LENGTH  (r0 I:int) = (r12 I:?[]) \l0x0006: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r2 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:12:0x0040 \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: AGET  (r3 I:?[OBJECT, ARRAY]) = \l  (r12 I:?[OBJECT, ARRAY][])\l  (r2 I:?[int, short, byte, char])\l \l0x000c: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: CMP_L  (r4 I:int) = (r13 I:float), (r4 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0016 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: CAST  (r4 I:double) = (double) (r13 I:float) \l0x0012: INVOKE  (r3 I:org.mapsforge.core.model.Point[]) = (r3 I:org.mapsforge.core.model.Point[]), (r4 I:double) org.mapsforge.map.layer.renderer.RendererUtils.parallelPath(org.mapsforge.core.model.Point[], double):org.mapsforge.core.model.Point[] type: STATIC \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: ARRAY_LENGTH  (r4 I:int) = (r3 I:?[]) \l0x0017: CONST  (r5 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r4 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:11:0x003d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|0x001a: AGET  (r4 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r1 I:?[int, short, byte, char]) \l0x001c: IGET  (r5 I:org.mapsforge.core.graphics.Path) = (r10 I:org.mapsforge.map.layer.renderer.CanvasRasterer) org.mapsforge.map.layer.renderer.CanvasRasterer.path org.mapsforge.core.graphics.Path \l0x001e: IGET  (r6 I:double) = (r4 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0020: CAST  (r6 I:float) = (float) (r6 I:double) \l0x0021: IGET  (r7 I:double) = (r4 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0023: CAST  (r4 I:float) = (float) (r7 I:double) \l0x0024: INVOKE  \l  (r5 I:org.mapsforge.core.graphics.Path)\l  (r6 I:float)\l  (r4 I:float)\l org.mapsforge.core.graphics.Path.moveTo(float, float):void type: INTERFACE \l0x0027: CONST  (r4 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0028|0x0028: ARRAY_LENGTH  (r5 I:int) = (r3 I:?[]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|0x0029: IF  (r4 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:11:0x003d \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: AGET  (r5 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY][]), (r4 I:?[int, short, byte, char]) \l0x002d: IGET  (r6 I:org.mapsforge.core.graphics.Path) = (r10 I:org.mapsforge.map.layer.renderer.CanvasRasterer) org.mapsforge.map.layer.renderer.CanvasRasterer.path org.mapsforge.core.graphics.Path \l0x002f: IGET  (r7 I:double) = (r5 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x0031: CAST  (r7 I:int) = (int) (r7 I:double) \l0x0032: CAST  (r7 I:float) = (float) (r7 I:int) \l0x0033: IGET  (r8 I:double) = (r5 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0035: CAST  (r5 I:int) = (int) (r8 I:double) \l0x0036: CAST  (r5 I:float) = (float) (r5 I:int) \l0x0037: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Path)\l  (r7 I:float)\l  (r5 I:float)\l org.mapsforge.core.graphics.Path.lineTo(float, float):void type: INTERFACE \l0x003a: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|0x003d: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: IGET  (r12 I:org.mapsforge.core.graphics.Canvas) = (r10 I:org.mapsforge.map.layer.renderer.CanvasRasterer) org.mapsforge.map.layer.renderer.CanvasRasterer.canvas org.mapsforge.core.graphics.Canvas \l0x0042: IGET  (r13 I:org.mapsforge.core.graphics.Path) = (r10 I:org.mapsforge.map.layer.renderer.CanvasRasterer) org.mapsforge.map.layer.renderer.CanvasRasterer.path org.mapsforge.core.graphics.Path \l0x0044: IGET  (r11 I:org.mapsforge.core.graphics.Paint) = \l  (r11 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l org.mapsforge.map.layer.renderer.ShapePaintContainer.paint org.mapsforge.core.graphics.Paint \l0x0046: INVOKE  \l  (r12 I:org.mapsforge.core.graphics.Canvas)\l  (r13 I:org.mapsforge.core.graphics.Path)\l  (r11 I:org.mapsforge.core.graphics.Paint)\l org.mapsforge.core.graphics.Canvas.drawPath(org.mapsforge.core.graphics.Path, org.mapsforge.core.graphics.Paint):void type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0049|0x0049: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.renderer.CanvasRasterer.drawPath((r10 'this' I:org.mapsforge.map.layer.renderer.CanvasRasterer A[IMMUTABLE_TYPE, THIS]), (r11 I:org.mapsforge.map.layer.renderer.ShapePaintContainer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.mapsforge.core.model.Point[][] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_12;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_8;
Node_11 -> Node_1;
Node_12 -> Node_13;
}

