digraph "CFG fororg.mapsforge.map.layer.renderer.CanvasRasterer.drawWays(Lorg\/mapsforge\/map\/rendertheme\/RenderContext;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.List\<java.util.List\<java.util.List\<org.mapsforge.map.layer.renderer.ShapePaintContainer\>\>\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.ways java.util.List \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0003: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0007: CHECK_CAST  (r0 I:java.util.List) = (java.util.List) (r0 I:?[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x000d: IGET  (r2 I:java.util.List\<java.util.List\<java.util.List\<org.mapsforge.map.layer.renderer.ShapePaintContainer\>\>\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.ways java.util.List \l0x000f: INVOKE  (r2 I:int) = (r2 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0013: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r3 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0041 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: IGET  (r4 I:java.util.List\<java.util.List\<java.util.List\<org.mapsforge.map.layer.renderer.ShapePaintContainer\>\>\>) = (r10 I:org.mapsforge.map.rendertheme.RenderContext) org.mapsforge.map.rendertheme.RenderContext.ways java.util.List \l0x0018: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.List), (r3 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x001c: CHECK_CAST  (r4 I:java.util.List) = (java.util.List) (r4 I:?[OBJECT, ARRAY]) \l0x001e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001f|0x001f: IF  (r5 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:8:0x003e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|0x0021: INVOKE  (r6 I:java.lang.Object) = (r4 I:java.util.List), (r5 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0025: CHECK_CAST  (r6 I:java.util.List) = (java.util.List) (r6 I:?[OBJECT, ARRAY]) \l0x0027: INVOKE  (r7 I:int) = (r6 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x002b: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|0x002d: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:7:0x003b \l}"];
Node_6 [shape=record,label="{6\:\ 0x002f|0x002f: INVOKE  (r8 I:java.lang.Object) = (r6 I:java.util.List), (r7 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0033: CHECK_CAST  (r8 I:org.mapsforge.map.layer.renderer.ShapePaintContainer) = (org.mapsforge.map.layer.renderer.ShapePaintContainer) (r8 I:?[OBJECT, ARRAY]) \l0x0035: INVOKE  \l  (r9 I:org.mapsforge.map.layer.renderer.CanvasRasterer)\l  (r8 I:org.mapsforge.map.layer.renderer.ShapePaintContainer)\l org.mapsforge.map.layer.renderer.CanvasRasterer.drawShapePaintContainer(org.mapsforge.map.layer.renderer.ShapePaintContainer):void type: DIRECT \l0x0038: ARITH  (r7 I:int) = (r7 I:int) + (\-1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003b|0x003b: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0041|0x0041: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.layer.renderer.CanvasRasterer.drawWays((r9 'this' I:org.mapsforge.map.layer.renderer.CanvasRasterer A[IMMUTABLE_TYPE, THIS]), (r10 I:org.mapsforge.map.rendertheme.RenderContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_9;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_5;
Node_7 -> Node_3;
Node_8 -> Node_1;
}

