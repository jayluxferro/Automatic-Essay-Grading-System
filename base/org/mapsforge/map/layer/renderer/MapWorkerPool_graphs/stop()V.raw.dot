digraph "CFG fororg.mapsforge.map.layer.renderer.MapWorkerPool.stop()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:boolean) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.isRunning boolean A[Catch:\{ all \-\> 0x0076 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: RETURN   \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: CONST  (r0 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|SYNTHETIC\lSplitter:B:7:0x0008\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x0008\l|0x0008: IPUT  \l  (r0 I:boolean)\l  (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool)\l org.mapsforge.map.layer.renderer.MapWorkerPool.inShutdown boolean A[Catch:\{ all \-\> 0x0076 \}, TRY_ENTER]\l0x000a: IGET  (r0 I:org.mapsforge.map.layer.queue.JobQueue\<org.mapsforge.map.layer.renderer.RendererJob\>) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.jobQueue org.mapsforge.map.layer.queue.JobQueue A[Catch:\{ all \-\> 0x0076 \}]\l0x000c: INVOKE  (r0 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.interrupt():void type: VIRTUAL A[Catch:\{ all \-\> 0x0076 \}]\l0x000f: IGET  (r0 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.self java.util.concurrent.ExecutorService A[Catch:\{ all \-\> 0x0076 \}]\l0x0011: INVOKE  (r0 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.shutdown():void type: INTERFACE A[Catch:\{ all \-\> 0x0076 \}]\l0x0014: IGET  (r0 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.workers java.util.concurrent.ExecutorService A[Catch:\{ all \-\> 0x0076 \}]\l0x0016: INVOKE  (r0 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.shutdown():void type: INTERFACE A[Catch:\{ all \-\> 0x0076 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: CONST  (r0 I:?[long, double]) = (100 ?[long, double]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|SYNTHETIC\lSplitter:B:10:0x001b\l}"];
Node_11 [shape=record,label="{11\:\ ?|Splitter:B:10:0x001b\l|0x001b: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.self java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x003c \}, TRY_ENTER]\l0x001d: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x001f: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.concurrent.ExecutorService)\l  (r0 I:long)\l  (r3 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x003c \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0046 A[Catch:\{ InterruptedException \-\> 0x003c \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.self java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x0027: INVOKE  (r2 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.shutdownNow():java.util.List type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x002a: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.self java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x002c: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x002e: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.concurrent.ExecutorService)\l  (r0 I:long)\l  (r3 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x003c \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|0x0032: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0046 A[Catch:\{ InterruptedException \-\> 0x003c \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|0x0034: SGET  (r2 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x0036: CONST_STR  (r3 I:java.lang.String) =  \"Shutdown self executor failed\" A[Catch:\{ InterruptedException \-\> 0x003c \}]\l0x0038: INVOKE  (r2 I:java.util.logging.Logger), (r3 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x003c \}, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|ExcHandler: InterruptedException null\lSplitter:B:10:0x001b\l|0x003c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|SYNTHETIC\lSplitter:B:18:0x003d\l}"];
Node_19 [shape=record,label="{19\:\ ?|Splitter:B:18:0x003d\l|0x003d: SGET  (r3 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x0076 \}, TRY_ENTER]\l0x003f: SGET  (r4 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level A[Catch:\{ all \-\> 0x0076 \}]\l0x0041: CONST_STR  (r5 I:java.lang.String) =  \"Shutdown self executor interrupted\" A[Catch:\{ all \-\> 0x0076 \}]\l0x0043: INVOKE  \l  (r3 I:java.util.logging.Logger)\l  (r4 I:java.util.logging.Level)\l  (r5 I:java.lang.String)\l  (r2 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL A[Catch:\{ all \-\> 0x0076 \}, TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|SYNTHETIC\lSplitter:B:20:0x0046\l}"];
Node_21 [shape=record,label="{21\:\ ?|Splitter:B:20:0x0046\l|0x0046: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.workers java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x0067 \}, TRY_ENTER]\l0x0048: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x004a: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.concurrent.ExecutorService)\l  (r0 I:long)\l  (r3 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|0x004e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0071 A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|0x0050: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.workers java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0052: INVOKE  (r2 I:java.util.concurrent.ExecutorService) java.util.concurrent.ExecutorService.shutdownNow():java.util.List type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0055: IGET  (r2 I:java.util.concurrent.ExecutorService) = (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.workers java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0057: SGET  (r3 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0059: INVOKE  (r0 I:boolean) = \l  (r2 I:java.util.concurrent.ExecutorService)\l  (r0 I:long)\l  (r3 I:java.util.concurrent.TimeUnit)\l java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l}"];
Node_24 [shape=record,label="{24\:\ 0x005d|0x005d: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0071 A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l}"];
Node_25 [shape=record,label="{25\:\ 0x005f|0x005f: SGET  (r0 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0061: CONST_STR  (r1 I:java.lang.String) =  \"Shutdown workers executor failed\" A[Catch:\{ InterruptedException \-\> 0x0067 \}]\l0x0063: INVOKE  (r0 I:java.util.logging.Logger), (r1 I:java.lang.String) java.util.logging.Logger.warning(java.lang.String):void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x0067 \}, TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0067|ExcHandler: InterruptedException null\lSplitter:B:20:0x0046\l|0x0067: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_28 [shape=record,label="{28\:\ 0x0068|SYNTHETIC\lSplitter:B:28:0x0068\l}"];
Node_29 [shape=record,label="{29\:\ ?|Splitter:B:28:0x0068\l|0x0068: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x0076 \}, TRY_ENTER]\l0x006a: SGET  (r2 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level A[Catch:\{ all \-\> 0x0076 \}]\l0x006c: CONST_STR  (r3 I:java.lang.String) =  \"Shutdown workers executor interrupted\" A[Catch:\{ all \-\> 0x0076 \}]\l0x006e: INVOKE  \l  (r1 I:java.util.logging.Logger)\l  (r2 I:java.util.logging.Level)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL A[Catch:\{ all \-\> 0x0076 \}]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0071|0x0071: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0076 \}]\l0x0072: IPUT  \l  (r0 I:boolean)\l  (r6 I:org.mapsforge.map.layer.renderer.MapWorkerPool)\l org.mapsforge.map.layer.renderer.MapWorkerPool.isRunning boolean A[Catch:\{ all \-\> 0x0076 \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0074|0x0074: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0075|0x0075: RETURN   \l}"];
Node_33 [shape=record,label="{33\:\ 0x0076|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0076: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_34 [shape=record,label="{34\:\ 0x0077|0x0077: MONITOR_EXIT  (r6 I:?[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0078|0x0078: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.renderer.MapWorkerPool.stop((r6 'this' I:org.mapsforge.map.layer.renderer.MapWorkerPool A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_33;
Node_2 -> Node_3;
Node_2 -> Node_33;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_33;
Node_8 -> Node_9;
Node_8 -> Node_33;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_20;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_33;
Node_19 -> Node_20;
Node_19 -> Node_33;
Node_20 -> Node_21;
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_33;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_34 -> Node_35;
}

