digraph "CFG fororg.mapsforge.map.layer.renderer.MapWorkerPool.run()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_1 [shape=record,label="{1\:\ ?|Splitter:B:0:0x0000\l|0x0000: IGET  (r0 I:boolean) = (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.inShutdown boolean A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}, TRY_ENTER]\l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0044 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IGET  (r0 I:org.mapsforge.map.layer.queue.JobQueue\<org.mapsforge.map.layer.renderer.RendererJob\>) = (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.jobQueue org.mapsforge.map.layer.queue.JobQueue A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0006: SGET  (r1 I:int) =  org.mapsforge.core.util.Parameters.NUMBER_OF_THREADS int A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0008: INVOKE  (r0 I:org.mapsforge.map.layer.queue.Job) = (r0 I:org.mapsforge.map.layer.queue.JobQueue), (r1 I:int) org.mapsforge.map.layer.queue.JobQueue.get(int):org.mapsforge.map.layer.queue.Job type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x000c: CHECK_CAST  (r0 I:org.mapsforge.map.layer.renderer.RendererJob) = (org.mapsforge.map.layer.renderer.RendererJob) (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0011 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: GOTO  \-\> 0x0000 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r1 I:org.mapsforge.map.layer.cache.TileCache) = (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.tileCache org.mapsforge.map.layer.cache.TileCache A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0013: INVOKE  (r1 I:boolean) = \l  (r1 I:org.mapsforge.map.layer.cache.TileCache)\l  (r0 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.cache.TileCache.containsKey(org.mapsforge.map.layer.queue.Job):boolean type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0024 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IGET  (r1 I:boolean) = (r0 I:org.mapsforge.map.layer.renderer.RendererJob) org.mapsforge.map.layer.renderer.RendererJob.labelsOnly boolean A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: GOTO  \-\> 0x0024 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: IGET  (r1 I:org.mapsforge.map.layer.queue.JobQueue\<org.mapsforge.map.layer.renderer.RendererJob\>) = (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.jobQueue org.mapsforge.map.layer.queue.JobQueue A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0020: INVOKE  \l  (r1 I:org.mapsforge.map.layer.queue.JobQueue)\l  (r0 I:org.mapsforge.map.layer.queue.Job)\l org.mapsforge.map.layer.queue.JobQueue.remove(org.mapsforge.map.layer.queue.Job):void type: VIRTUAL A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0023: GOTO  \-\> 0x0000 A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IGET  (r1 I:java.util.concurrent.ExecutorService) = (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool) org.mapsforge.map.layer.renderer.MapWorkerPool.workers java.util.concurrent.ExecutorService A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0026: NEW_INSTANCE  (r2 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker) =  org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x0028: INVOKE  \l  (r2 I:org.mapsforge.map.layer.renderer.MapWorkerPool$MapWorker)\l  (r4 I:org.mapsforge.map.layer.renderer.MapWorkerPool)\l  (r0 I:org.mapsforge.map.layer.renderer.RendererJob)\l org.mapsforge.map.layer.renderer.MapWorkerPool.MapWorker.\<init\>(org.mapsforge.map.layer.renderer.MapWorkerPool, org.mapsforge.map.layer.renderer.RendererJob):void type: DIRECT A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}]\l0x002b: INVOKE  \l  (r1 I:java.util.concurrent.ExecutorService)\l  (r2 I:java.lang.Runnable)\l java.util.concurrent.ExecutorService.execute(java.lang.Runnable):void type: INTERFACE A[Catch:\{ InterruptedException \-\> 0x003a, RejectedExecutionException \-\> 0x002f \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|ExcHandler: RejectedExecutionException null\lSplitter:B:0:0x0000\l|0x002f: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger \l0x0032: SGET  (r2 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x0034: CONST_STR  (r3 I:java.lang.String) =  \"MapWorkerPool rejected\" \l0x0036: INVOKE  \l  (r1 I:java.util.logging.Logger)\l  (r2 I:java.util.logging.Level)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|ExcHandler: InterruptedException null\lSplitter:B:0:0x0000\l|0x003a: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: SGET  (r1 I:java.util.logging.Logger) =  org.mapsforge.map.layer.renderer.MapWorkerPool.LOGGER java.util.logging.Logger \l0x003d: SGET  (r2 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x003f: CONST_STR  (r3 I:java.lang.String) =  \"MapWorkerPool interrupted\" \l0x0041: INVOKE  \l  (r1 I:java.util.logging.Logger)\l  (r2 I:java.util.logging.Level)\l  (r3 I:java.lang.String)\l  (r0 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0044|0x0044: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.renderer.MapWorkerPool.run((r4 'this' I:org.mapsforge.map.layer.renderer.MapWorkerPool A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_16;
Node_0 -> Node_14;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_18;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_0;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_0;
Node_12 -> Node_0;
Node_14 -> Node_15;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

