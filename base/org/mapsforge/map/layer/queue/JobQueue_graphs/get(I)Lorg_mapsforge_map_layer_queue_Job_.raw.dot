digraph "CFG fororg.mapsforge.map.layer.queue.JobQueue.get(I)Lorg\/mapsforge\/map\/layer\/queue\/Job;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IGET  (r0 I:java.util.List\<org.mapsforge.map.layer.queue.QueueItem\<T\>\>) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.queueItems java.util.List A[Catch:\{ all \-\> 0x0041 \}, TRY_ENTER]\l0x0003: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) java.util.List.isEmpty():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l0x0007: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0033 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r0 I:java.util.List\<T\>) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.assignedJobs java.util.List A[Catch:\{ all \-\> 0x0041 \}]\l0x000c: INVOKE  (r0 I:int) = (r0 I:java.util.List) java.util.List.size():int type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IF  (r0 I:?[int, byte, short, char]) \< (r5 I:?[int, byte, short, char])  \-\> B:7:0x0013 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: GOTO  \-\> 0x0033 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: IGET  (r5 I:boolean) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.scheduleNeeded boolean A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0022 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: IPUT  \l  (r1 I:boolean)\l  (r4 I:org.mapsforge.map.layer.queue.JobQueue)\l org.mapsforge.map.layer.queue.JobQueue.scheduleNeeded boolean A[Catch:\{ all \-\> 0x0041 \}]\l0x0019: IGET  (r5 I:org.mapsforge.map.model.DisplayModel) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x0041 \}]\l0x001b: INVOKE  (r5 I:int) = (r5 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL A[Catch:\{ all \-\> 0x0041 \}]\l0x001f: INVOKE  (r4 I:org.mapsforge.map.layer.queue.JobQueue), (r5 I:int) org.mapsforge.map.layer.queue.JobQueue.schedule(int):void type: DIRECT A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IGET  (r5 I:java.util.List\<org.mapsforge.map.layer.queue.QueueItem\<T\>\>) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.queueItems java.util.List A[Catch:\{ all \-\> 0x0041 \}]\l0x0024: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.List), (r1 I:int) java.util.List.remove(int):java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}]\l0x0028: CHECK_CAST  (r5 I:org.mapsforge.map.layer.queue.QueueItem) = (org.mapsforge.map.layer.queue.QueueItem) (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0041 \}]\l0x002a: IGET  (r5 I:T) = (r5 I:org.mapsforge.map.layer.queue.QueueItem) org.mapsforge.map.layer.queue.QueueItem.object org.mapsforge.map.layer.queue.Job A[Catch:\{ all \-\> 0x0041 \}]\l0x002c: IGET  (r0 I:java.util.List\<T\>) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.assignedJobs java.util.List A[Catch:\{ all \-\> 0x0041 \}]\l0x002e: INVOKE  (r0 I:java.util.List), (r5 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0032|0x0032: RETURN  (r5 I:T) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: CONST  (r2 I:?[long, double]) = (200(0xc8, double:9.9E\-322) ?[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|SYNTHETIC\lSplitter:B:14:0x0035\l}"];
Node_15 [shape=record,label="{15\:\ ?|Splitter:B:14:0x0035\l|0x0035: INVOKE  (r4 I:java.lang.Object), (r2 I:long) java.lang.Object.wait(long):void type: VIRTUAL A[Catch:\{ all \-\> 0x0041 \}, TRY_ENTER]\l0x0038: IGET  (r0 I:boolean) = (r4 I:org.mapsforge.map.layer.queue.JobQueue) org.mapsforge.map.layer.queue.JobQueue.isInterrupted boolean A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:1:0x0001 A[Catch:\{ all \-\> 0x0041 \}]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IPUT  \l  (r1 I:boolean)\l  (r4 I:org.mapsforge.map.layer.queue.JobQueue)\l org.mapsforge.map.layer.queue.JobQueue.isInterrupted boolean A[Catch:\{ all \-\> 0x0041 \}, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: RETURN  (r5 I:T) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0041|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0041: MOVE_EXCEPTION  (r5 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0042|0x0042: MONITOR_EXIT  (r4 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0043|0x0043: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized T org.mapsforge.map.layer.queue.JobQueue.get((r4 'this' I:org.mapsforge.map.layer.queue.JobQueue A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I)TT;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_21;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_16 -> Node_17[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_23;
}

