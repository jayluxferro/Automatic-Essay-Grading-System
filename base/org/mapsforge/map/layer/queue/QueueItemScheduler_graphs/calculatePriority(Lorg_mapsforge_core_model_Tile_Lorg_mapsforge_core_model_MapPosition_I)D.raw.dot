digraph "CFG fororg.mapsforge.map.layer.queue.QueueItemScheduler.calculatePriority(Lorg\/mapsforge\/core\/model\/Tile;Lorg\/mapsforge\/core\/model\/MapPosition;I)D" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r11 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x0002: CAST  (r0 I:long) = (long) (r0 I:int) \l0x0003: IGET  (r2 I:byte) = (r11 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0005: INVOKE  (r0 I:double) = (r0 I:long), (r2 I:byte) org.mapsforge.core.util.MercatorProjection.tileYToLatitude(long, byte):double type: STATIC \l0x0009: IGET  (r2 I:int) = (r11 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x000b: CAST  (r2 I:long) = (long) (r2 I:int) \l0x000c: IGET  (r4 I:byte) = (r11 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x000e: INVOKE  (r2 I:double) = (r2 I:long), (r4 I:byte) org.mapsforge.core.util.MercatorProjection.tileXToLongitude(long, byte):double type: STATIC \l0x0012: ARITH  (r4 I:int) = (r13 I:int) \/ (2 int) \l0x0014: IGET  (r5 I:byte) = (r12 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l0x0016: INVOKE  (r5 I:long) = (r5 I:byte), (r13 I:int) org.mapsforge.core.util.MercatorProjection.getMapSize(byte, int):long type: STATIC \l0x001a: INVOKE  (r2 I:double) = (r2 I:double), (r5 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x001e: CAST  (r7 I:double) = (double) (r4 I:int) \l0x001f: ARITH  (r2 I:double) = (r2 I:double) + (r7 I:double) \l0x0020: INVOKE  (r0 I:double) = (r0 I:double), (r5 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0024: ARITH  (r0 I:double) = (r0 I:double) + (r7 I:double) \l0x0025: IGET  (r4 I:org.mapsforge.core.model.LatLong) = (r12 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.latLong org.mapsforge.core.model.LatLong \l0x0027: IGET  (r7 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x0029: INVOKE  (r7 I:double) = (r7 I:double), (r5 I:long) org.mapsforge.core.util.MercatorProjection.longitudeToPixelX(double, long):double type: STATIC \l0x002d: IGET  (r9 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x002f: INVOKE  (r4 I:double) = (r9 I:double), (r5 I:long) org.mapsforge.core.util.MercatorProjection.latitudeToPixelY(double, long):double type: STATIC \l0x0033: ARITH  (r2 I:double) = (r2 I:double) \- (r7 I:double) \l0x0034: ARITH  (r0 I:double) = (r0 I:double) \- (r4 I:double) \l0x0035: INVOKE  (r0 I:double) = (r2 I:double), (r0 I:double) java.lang.Math.hypot(double, double):double type: STATIC \l0x0039: IGET  (r11 I:byte) = (r11 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x003b: IGET  (r12 I:byte) = (r12 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte \l0x003d: ARITH  (r11 I:int) = (r11 I:int) \- (r12 I:int) \l0x003e: INVOKE  (r11 I:int) = (r11 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0042: CAST  (r12 I:double) = (double) (r13 I:int) \l0x0043: CONST  (r2 I:?[long, double]) = \l  (4621819117588971520(0x4024000000000000, double:10.0) ?[long, double])\l \l0x0045: ARITH  (r12 I:double) = (r12 I:double) * (r2 I:double) \l0x0047: CAST  (r2 I:double) = (double) (r11 I:int) \l0x0048: ARITH  (r12 I:double) = (r12 I:double) * (r2 I:double) \l0x004a: ARITH  (r0 I:double) = (r0 I:double) + (r12 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x004b|0x004b: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{private static double org.mapsforge.map.layer.queue.QueueItemScheduler.calculatePriority((r11 I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:org.mapsforge.core.model.MapPosition A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

