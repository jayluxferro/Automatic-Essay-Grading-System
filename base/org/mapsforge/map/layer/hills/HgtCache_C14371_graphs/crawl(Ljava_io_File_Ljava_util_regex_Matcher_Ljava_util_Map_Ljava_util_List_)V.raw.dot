digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.1.crawl(Ljava\/io\/File;Ljava\/util\/regex\/Matcher;Ljava\/util\/Map;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r26 I:?[OBJECT, ARRAY]) \l0x0006: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0008: INVOKE  (r4 I:boolean) = (r24 I:java.io.File) java.io.File.exists():boolean type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000c|0x000c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: INVOKE  (r4 I:boolean) = (r24 I:java.io.File) java.io.File.isFile():boolean type: VIRTUAL \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|0x0012: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x00c0 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: INVOKE  (r4 I:java.lang.String) = (r24 I:java.io.File) java.io.File.getName():java.lang.String type: VIRTUAL \l0x0018: INVOKE  (r4 I:java.util.regex.Matcher) = \l  (r1 I:java.util.regex.Matcher)\l  (r4 I:java.lang.CharSequence)\l java.util.regex.Matcher.reset(java.lang.CharSequence):java.util.regex.Matcher type: VIRTUAL \l0x001c: INVOKE  (r4 I:boolean) = (r4 I:java.util.regex.Matcher) java.util.regex.Matcher.matches():boolean type: VIRTUAL \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: CONST  (r4 I:?[int, float, short, byte, char]) = (2 ?[int, float, short, byte, char]) \l0x0023: INVOKE  (r4 I:java.lang.String) = (r1 I:java.util.regex.Matcher), (r4 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0027: INVOKE  (r4 I:int) = (r4 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l0x002b: CONST  (r5 I:?[int, float, short, byte, char]) = (4 ?[int, float, short, byte, char]) \l0x002c: INVOKE  (r5 I:java.lang.String) = (r1 I:java.util.regex.Matcher), (r5 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x0030: INVOKE  (r5 I:int) = (r5 I:java.lang.String) java.lang.Integer.parseInt(java.lang.String):int type: STATIC \l0x0034: CONST_STR  (r6 I:java.lang.String) =  \"n\" \l0x0036: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0037: INVOKE  (r8 I:java.lang.String) = (r1 I:java.util.regex.Matcher), (r7 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x003b: INVOKE  (r8 I:java.lang.String) = (r8 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x003f: INVOKE  (r6 I:boolean) = (r6 I:java.lang.String), (r8 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_7 [shape=record,label="{7\:\ 0x0043|0x0043: IF  (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0046 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0046|0x0046: NEG  (r4 I:int) = (r4 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|0x0047: CONST_STR  (r6 I:java.lang.String) =  \"e\" \l0x0049: CONST  (r8 I:?[int, float, short, byte, char]) = (3 ?[int, float, short, byte, char]) \l0x004a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.util.regex.Matcher), (r8 I:int) java.util.regex.Matcher.group(int):java.lang.String type: VIRTUAL \l0x004e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) java.lang.String.toLowerCase():java.lang.String type: VIRTUAL \l0x0052: INVOKE  (r1 I:boolean) = (r6 I:java.lang.String), (r1 I:java.lang.Object) java.lang.String.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_11 [shape=record,label="{11\:\ 0x0056|0x0056: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0059 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|0x0059: NEG  (r5 I:int) = (r5 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x005a|0x005a: INVOKE  (r8 I:long) = (r24 I:java.io.File) java.io.File.length():long type: VIRTUAL \l0x005e: CONST  (r10 I:?[long, double]) = (2 ?[long, double]) \l0x0060: ARITH  (r10 I:long) = (r8 I:long) \/ (r10 I:long) \l0x0062: CAST  (r12 I:double) = (double) (r10 I:long) \l0x0063: INVOKE  (r12 I:double) = (r12 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x0067: CAST  (r12 I:long) = (long) (r12 I:double) \l0x0068: ARITH  (r12 I:long) = (r12 I:long) * (r12 I:long) \l0x006a: CMP_L  (r1 I:int) = (r12 I:long), (r10 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|0x006c: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x008f \l}"];
Node_16 [shape=record,label="{16\:\ 0x006e|0x006e: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_17 [shape=record,label="{17\:\ 0x0070|0x0070: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0072: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x0075: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0077: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.Object) java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder type: VIRTUAL \l0x007a: CONST_STR  (r2 I:java.lang.String) =  \" length in shorts (\" \l0x007c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x007f: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:long) java.lang.StringBuilder.append(long):java.lang.StringBuilder type: VIRTUAL \l0x0082: CONST_STR  (r2 I:java.lang.String) =  \") is not a square number\" \l0x0084: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0087: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x008b: INVOKE  (r3 I:java.util.List), (r1 I:java.lang.Object) java.util.List.add(java.lang.Object):boolean type: INTERFACE \l}"];
Node_18 [shape=record,label="{18\:\ 0x008f|0x008f: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0091: NEW_INSTANCE  (r1 I:org.mapsforge.map.layer.hills.HgtCache$TileKey) =  org.mapsforge.map.layer.hills.HgtCache$TileKey \l0x0093: INVOKE  \l  (r1 I:org.mapsforge.map.layer.hills.HgtCache$TileKey)\l  (r4 I:int)\l  (r5 I:int)\l org.mapsforge.map.layer.hills.HgtCache.TileKey.\<init\>(int, int):void type: DIRECT \l0x0096: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Map), (r1 I:java.lang.Object) java.util.Map.get(java.lang.Object):java.lang.Object type: INTERFACE \l0x009a: CHECK_CAST  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) = (org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x009c|0x009c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00a4 \l}"];
Node_20 [shape=record,label="{20\:\ 0x009e|0x009e: IGET  (r10 I:long) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.size long \l0x00a0: CMP_L  (r3 I:int) = (r10 I:long), (r8 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x00a2|0x00a2: IF  (r3 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_22 [shape=record,label="{22\:\ 0x00a4|0x00a4: NEW_INSTANCE  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) =  org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo \l0x00a6: IGET  (r13 I:org.mapsforge.map.layer.hills.HgtCache) = (r0 I:org.mapsforge.map.layer.hills.HgtCache$1) org.mapsforge.map.layer.hills.HgtCache.1.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x00a8: ARITH  (r8 I:int) = (r4 I:int) + (\-1 int) \l0x00aa: CAST  (r8 I:double) = (double) (r8 I:int) \l0x00ab: CAST  (r10 I:double) = (double) (r5 I:int) \l0x00ac: CAST  (r14 I:double) = (double) (r4 I:int) \l0x00ad: ARITH  (r5 I:int) = (r5 I:int) + (r7 I:int) \l0x00ae: CAST  (r4 I:double) = (double) (r5 I:int) \l0x00af: MOVE  (r12 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l0x00b0: MOVE  (r19 I:?[long, double]) = (r14 I:?[long, double]) \l0x00b2: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00b4: MOVE  (r15 I:?[long, double]) = (r8 I:?[long, double]) \l0x00b5: MOVE  (r17 I:?[long, double]) = (r10 I:?[long, double]) \l0x00b7: MOVE  (r21 I:?[long, double]) = (r4 I:?[long, double]) \l0x00b9: INVOKE  \l  (r12 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l  (r13 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r14 I:java.io.File)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:double)\l  (r21 I:double)\l org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.\<init\>(org.mapsforge.map.layer.hills.HgtCache, java.io.File, double, double, double, double):void type: DIRECT \l0x00bc: INVOKE  \l  (r2 I:java.util.Map)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object type: INTERFACE \l}"];
Node_23 [shape=record,label="{23\:\ 0x00c0|0x00c0: MOVE  (r6 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00c2: INVOKE  (r4 I:boolean) = (r24 I:java.io.File) java.io.File.isDirectory():boolean type: VIRTUAL \l}"];
Node_24 [shape=record,label="{24\:\ 0x00c6|0x00c6: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_25 [shape=record,label="{25\:\ 0x00c8|0x00c8: INVOKE  (r4 I:java.io.File[]) = (r24 I:java.io.File) java.io.File.listFiles():java.io.File[] type: VIRTUAL \l}"];
Node_26 [shape=record,label="{26\:\ 0x00cc|0x00cc: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_27 [shape=record,label="{27\:\ 0x00ce|0x00ce: ARRAY_LENGTH  (r5 I:int) = (r4 I:?[]) \l0x00cf: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x00d0|0x00d0: IF  (r6 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:30:0x00da \l}"];
Node_29 [shape=record,label="{29\:\ 0x00d2|0x00d2: AGET  (r7 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY][]), (r6 I:?[int, short, byte, char]) \l0x00d4: INVOKE  \l  (r0 I:org.mapsforge.map.layer.hills.HgtCache$1)\l  (r7 I:java.io.File)\l  (r1 I:java.util.regex.Matcher)\l  (r2 I:java.util.Map)\l  (r3 I:java.util.List)\l org.mapsforge.map.layer.hills.HgtCache.1.crawl(java.io.File, java.util.regex.Matcher, java.util.Map, java.util.List):void type: VIRTUAL \l0x00d7: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x00da|0x00da: RETURN   \l}"];
MethodNode[shape=record,label="{void org.mapsforge.map.layer.hills.HgtCache.1.crawl((r23 'this' I:org.mapsforge.map.layer.hills.HgtCache$1 A[IMMUTABLE_TYPE, THIS]), (r24 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:java.util.regex.Matcher A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:java.util.Map\<org.mapsforge.map.layer.hills.HgtCache$TileKey, org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:java.util.List\<java.lang.String\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/io\/File;, Ljava\/util\/regex\/Matcher;, Ljava\/util\/Map\<, Lorg\/mapsforge\/map\/layer\/hills\/HgtCache$TileKey;, Lorg\/mapsforge\/map\/layer\/hills\/HgtCache$HgtFileInfo;, \>;, Ljava\/util\/List\<, Ljava\/lang\/String;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_30;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_30;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_30;
Node_17 -> Node_30;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_30;
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_28;
}

