digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.convert(Ljava\/nio\/MappedByteBuffer;III)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r19\lr1 = r20\lr2 = r21\lr3 = r22\lshort[] r5 = new short[r3]\lint r6 = r23 * 2\lint r7 = r2 + r6\lbyte[] r8 = new byte[(r7 * r7)]\lbyte[] r9 = r0.lookup\l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|if (r9 != null) goto L_0x001b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|fillLookup()\lbyte[] r9 = r0.lookup\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|PHI: r9 \l  PHI: (r9v1 byte[]) = (r9v0 byte[]), (r9v2 byte[]) binds: [B:1:0x0014, B:2:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|int r7 = (r7 * r23) + r23\lr10 = 0\lr11 = 0\lr12 = 0\l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|LOOP_START\lPHI: r10 r11 r12 \l  PHI: (r10v1 int) = (r10v0 int), (r10v3 int) binds: [B:3:0x001b, B:5:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 short) = (r11v0 short), (r11v8 short) binds: [B:3:0x001b, B:5:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v1 int) = (r12v0 int), (r12v18 int) binds: [B:3:0x001b, B:5:0x0025] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0023\-\>B:5:0x0025\l|if (r10 \>= r3) goto L_0x0031\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|LOOP_END\lLOOP:0: B:4:0x0023\-\>B:5:0x0025\l|short r11 = readNext(r1, r11)\lr5[r12] = r11\lint r10 = r10 + 1\lr12 = r12 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|r11 = r7\lr7 = 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|LOOP_START\lPHI: r7 r11 r12 \l  PHI: (r7v4 int) = (r7v3 int), (r7v5 int) binds: [B:6:0x0031, B:13:0x0082] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v3 int) = (r11v2 int), (r11v6 int) binds: [B:6:0x0031, B:13:0x0082] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v2 int) = (r12v1 int), (r12v5 int) binds: [B:6:0x0031, B:13:0x0082] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0033\-\>B:13:0x0082\l|if (r7 \> r2) goto L_0x0087\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|if (r12 \< r3) goto L_0x0038\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|r12 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|PHI: r12 \l  PHI: (r12v3 int) = (r12v2 int), (r12v17 int) binds: [B:8:0x0035, B:9:0x0037] A[DONT_GENERATE, DONT_INLINE]\l|short r13 = r5[r12]\lshort r14 = readNext(r1, r13)\lr5[r12] = r14\lr12 = r12 + 1\lr15 = r11\lr11 = 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|LOOP_START\lPHI: r11 r12 r13 r14 r15 \l  PHI: (r11v5 int) = (r11v4 int), (r11v7 int) binds: [B:10:0x0038, B:12:0x0047] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r12v5 int) = (r12v4 int), (r12v16 int) binds: [B:10:0x0038, B:12:0x0047] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 short) = (r13v0 short), (r13v8 short) binds: [B:10:0x0038, B:12:0x0047] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 short) = (r14v0 short), (r14v3 short) binds: [B:10:0x0038, B:12:0x0047] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v2 int) = (r15v1 int), (r15v3 int) binds: [B:10:0x0038, B:12:0x0047] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:11:0x0045\-\>B:12:0x0047\l|if (r11 \> r2) goto L_0x0082\l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|LOOP_END\lLOOP:2: B:11:0x0045\-\>B:12:0x0047\l|short r10 = r5[r12]\lshort r16 = readNext(r1, r10)\lint r17 = r12 + 1\lr5[r12] = r16\lr8[r15] = (byte) (java.lang.Math.min(255, java.lang.Math.max(0, (exaggerate(r9, \-((r16 \- r10) + (r14 \- r13))) + exaggerate(r9, \-((r10 \- r13) + (r16 \- r14)))) + 127)) & 255)\lint r11 = r11 + 1\lr15 = r15 + 1\lr14 = r16\lr12 = r17\lr13 = r10\l}"];
Node_13 [shape=record,label="{13\:\ 0x0082|LOOP_END\lLOOP:1: B:7:0x0033\-\>B:13:0x0082\l|int r11 = r15 + r6\lint r7 = r7 + 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0087|RETURN\l|return r8\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0087|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0082|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private byte[] org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.convert((r19v0 'this' org.mapsforge.map.layer.hills.SimpleShadingAlgorithm A[IMMUTABLE_TYPE, THIS]), (r20v0 java.nio.MappedByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_11;
Node_13 -> Node_7;
Node_15 -> Node_6;
Node_16 -> Node_14;
Node_17 -> Node_13;
}

