digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.readNext(Ljava\/nio\/ByteBuffer;S)S" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r1 I:short) = (r1 I:java.nio.ByteBuffer) java.nio.ByteBuffer.getShort():short type: VIRTUAL \l0x0004: CONST  (r0 I:?[int, float, short, byte, char]) = \l  (\-32768(0xffffffffffff8000, float:NaN) ?[int, float, short, byte, char])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|0x0008: RETURN  (r2 I:short) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: RETURN  (r1 I:short) \l}"];
MethodNode[shape=record,label="{private static short org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.readNext((r1 I:java.nio.ByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:short A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
}

