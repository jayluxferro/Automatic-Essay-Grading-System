digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.transformToByteBuffer(Lorg\/mapsforge\/map\/layer\/hills\/HgtCache$HgtFileInfo;I)Lorg\/mapsforge\/map\/layer\/hills\/ShadingAlgorithm$RawShadingResult;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = \l  (r11 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r12 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.getAxisLenght(org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo):int type: VIRTUAL \l0x0004: ARITH  (r1 I:int) = (r0 I:int) + (1 int) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: INVOKE  (r12 I:java.io.File) = (r12 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getFile():java.io.File type: VIRTUAL A[Catch:\{ IOException \-\> 0x004e, all \-\> 0x004a \}, TRY_ENTER]\l0x000b: NEW_INSTANCE  (r3 I:java.io.FileInputStream) =  java.io.FileInputStream A[Catch:\{ IOException \-\> 0x004e, all \-\> 0x004a \}]\l0x000d: INVOKE  (r3 I:java.io.FileInputStream), (r12 I:java.io.File) java.io.FileInputStream.\<init\>(java.io.File):void type: DIRECT A[Catch:\{ IOException \-\> 0x004e, all \-\> 0x004a \}, TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|SYNTHETIC\lSplitter:B:3:0x0010\l}"];
Node_4 [shape=record,label="{4\:\ ?|Splitter:B:3:0x0010\l|0x0010: INVOKE  (r10 I:java.nio.channels.FileChannel) = (r3 I:java.io.FileInputStream) java.io.FileInputStream.getChannel():java.nio.channels.FileChannel type: VIRTUAL A[Catch:\{ IOException \-\> 0x0047, all \-\> 0x0044 \}, TRY_ENTER]\l0x0013: NOP   A[TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|SYNTHETIC\lSplitter:B:5:0x0014\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0014\l|0x0014: SGET  (r5 I:java.nio.channels.FileChannel$MapMode) =  java.nio.channels.FileChannel.MapMode.READ_ONLY java.nio.channels.FileChannel$MapMode A[Catch:\{ IOException \-\> 0x0042 \}, TRY_ENTER]\l0x0016: CONST  (r6 I:?[long, double]) = (0 ?[long, double]) A[Catch:\{ IOException \-\> 0x0042 \}]\l0x0018: INVOKE  (r8 I:long) = (r12 I:java.io.File) java.io.File.length():long type: VIRTUAL A[Catch:\{ IOException \-\> 0x0042 \}]\l0x001c: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r10 I:?[OBJECT, ARRAY]) A[Catch:\{ IOException \-\> 0x0042 \}]\l0x001d: INVOKE  (r12 I:java.nio.MappedByteBuffer) = \l  (r4 I:java.nio.channels.FileChannel)\l  (r5 I:java.nio.channels.FileChannel$MapMode)\l  (r6 I:long)\l  (r8 I:long)\l java.nio.channels.FileChannel.map(java.nio.channels.FileChannel$MapMode, long, long):java.nio.MappedByteBuffer type: VIRTUAL A[Catch:\{ IOException \-\> 0x0042 \}]\l0x0021: SGET  (r4 I:java.nio.ByteOrder) =  java.nio.ByteOrder.BIG_ENDIAN java.nio.ByteOrder A[Catch:\{ IOException \-\> 0x0042 \}]\l0x0023: INVOKE  \l  (r12 I:java.nio.MappedByteBuffer)\l  (r4 I:java.nio.ByteOrder)\l java.nio.MappedByteBuffer.order(java.nio.ByteOrder):java.nio.ByteBuffer type: VIRTUAL A[Catch:\{ IOException \-\> 0x0042 \}]\l0x0026: INVOKE  (r12 I:byte[]) = \l  (r11 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r12 I:java.nio.MappedByteBuffer)\l  (r0 I:int)\l  (r1 I:int)\l  (r13 I:int)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.convert(java.nio.MappedByteBuffer, int, int, int):byte[] type: DIRECT A[Catch:\{ IOException \-\> 0x0042 \}]\l0x002a: NEW_INSTANCE  (r1 I:org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult) =  org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult A[Catch:\{ IOException \-\> 0x0042 \}]\l0x002c: INVOKE  \l  (r1 I:org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult)\l  (r12 I:byte[])\l  (r0 I:int)\l  (r0 I:int)\l  (r13 I:int)\l org.mapsforge.map.layer.hills.ShadingAlgorithm.RawShadingResult.\<init\>(byte[], int, int, int):void type: DIRECT A[Catch:\{ IOException \-\> 0x0042 \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0039 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|SYNTHETIC\lSplitter:B:8:0x0031\l}"];
Node_9 [shape=record,label="{9\:\ ?|Splitter:B:8:0x0031\l|0x0031: INVOKE  (r10 I:java.nio.channels.FileChannel) java.nio.channels.FileChannel.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0035 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|ExcHandler: IOException null\lSplitter:B:8:0x0031\l|0x0035: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x0036|0x0036: INVOKE  (r12 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_13 [shape=record,label="{13\:\ 0x0039|SYNTHETIC\lSplitter:B:13:0x0039\l}"];
Node_14 [shape=record,label="{14\:\ ?|Splitter:B:13:0x0039\l|0x0039: INVOKE  (r3 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x003d \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|ExcHandler: IOException null\lSplitter:B:13:0x0039\l|0x003d: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|0x003e: INVOKE  (r12 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0041|0x0041: RETURN  \l  (r1 I:org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult)\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|ExcHandler: IOException null\lSplitter:B:5:0x0014\l|0x0042: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|ExcHandler: all null\lSplitter:B:3:0x0010\l|0x0044: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_22 [shape=record,label="{22\:\ 0x0045|0x0045: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0047|ExcHandler: IOException null\lSplitter:B:3:0x0010\l|0x0047: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_24 [shape=record,label="{24\:\ 0x0048|0x0048: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x004a|ExcHandler: all null\lSplitter:B:1:0x0007\l|0x004a: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_26 [shape=record,label="{26\:\ 0x004b|0x004b: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x004c: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x004e|ExcHandler: IOException null\lSplitter:B:1:0x0007\l|0x004e: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_28 [shape=record,label="{28\:\ 0x004f|0x004f: MOVE  (r3 I:?[OBJECT, ARRAY]) = (r2 I:?[OBJECT, ARRAY]) \l0x0050: MOVE  (r10 I:?[OBJECT, ARRAY]) = (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0051|SYNTHETIC\lSplitter:B:29:0x0051\l}"];
Node_30 [shape=record,label="{30\:\ ?|Splitter:B:29:0x0051\l|0x0051: SGET  (r13 I:java.util.logging.Logger) =  org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.LOGGER java.util.logging.Logger A[Catch:\{ all \-\> 0x0071 \}, TRY_ENTER]\l0x0053: SGET  (r0 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level A[Catch:\{ all \-\> 0x0071 \}]\l0x0055: INVOKE  (r1 I:java.lang.String) = (r12 I:java.io.IOException) java.io.IOException.getMessage():java.lang.String type: VIRTUAL A[Catch:\{ all \-\> 0x0071 \}]\l0x0059: INVOKE  \l  (r13 I:java.util.logging.Logger)\l  (r0 I:java.util.logging.Level)\l  (r1 I:java.lang.String)\l  (r12 I:java.lang.Throwable)\l java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void type: VIRTUAL A[Catch:\{ all \-\> 0x0071 \}, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x005c|0x005c: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0066 \l}"];
Node_32 [shape=record,label="{32\:\ 0x005e|SYNTHETIC\lSplitter:B:32:0x005e\l}"];
Node_33 [shape=record,label="{33\:\ ?|Splitter:B:32:0x005e\l|0x005e: INVOKE  (r10 I:java.nio.channels.FileChannel) java.nio.channels.FileChannel.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0062 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0062|ExcHandler: IOException null\lSplitter:B:32:0x005e\l|0x0062: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_36 [shape=record,label="{36\:\ 0x0063|0x0063: INVOKE  (r12 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_37 [shape=record,label="{37\:\ 0x0066|0x0066: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0070 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0068|SYNTHETIC\lSplitter:B:38:0x0068\l}"];
Node_39 [shape=record,label="{39\:\ ?|Splitter:B:38:0x0068\l|0x0068: INVOKE  (r3 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x006c \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x006c|ExcHandler: IOException null\lSplitter:B:38:0x0068\l|0x006c: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_42 [shape=record,label="{42\:\ 0x006d|0x006d: INVOKE  (r12 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_43 [shape=record,label="{43\:\ 0x0070|0x0070: RETURN  \l  (r2 I:org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult)\l \l}"];
Node_44 [shape=record,label="{44\:\ 0x0071|ExcHandler: all null\lSplitter:B:29:0x0051\l|0x0071: MOVE_EXCEPTION  (r12 I:?[OBJECT]) =  \l}"];
Node_45 [shape=record,label="{45\:\ 0x0072|0x0072: IF  (r10 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x007c \l}"];
Node_46 [shape=record,label="{46\:\ 0x0074|SYNTHETIC\lSplitter:B:46:0x0074\l}"];
Node_47 [shape=record,label="{47\:\ ?|Splitter:B:46:0x0074\l|0x0074: INVOKE  (r10 I:java.nio.channels.FileChannel) java.nio.channels.FileChannel.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0078 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0078|ExcHandler: IOException null\lSplitter:B:46:0x0074\l|0x0078: MOVE_EXCEPTION  (r13 I:?[OBJECT]) =  \l}"];
Node_50 [shape=record,label="{50\:\ 0x0079|0x0079: INVOKE  (r13 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_51 [shape=record,label="{51\:\ 0x007c|0x007c: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0086 \l}"];
Node_52 [shape=record,label="{52\:\ 0x007e|SYNTHETIC\lSplitter:B:52:0x007e\l}"];
Node_53 [shape=record,label="{53\:\ ?|Splitter:B:52:0x007e\l|0x007e: INVOKE  (r3 I:java.io.FileInputStream) java.io.FileInputStream.close():void type: VIRTUAL A[Catch:\{ IOException \-\> 0x0082 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0082|ExcHandler: IOException null\lSplitter:B:52:0x007e\l|0x0082: MOVE_EXCEPTION  (r13 I:?[OBJECT]) =  \l}"];
Node_56 [shape=record,label="{56\:\ 0x0083|0x0083: INVOKE  (r13 I:java.io.IOException) java.io.IOException.printStackTrace():void type: VIRTUAL \l}"];
Node_57 [shape=record,label="{57\:\ 0x0086|0x0086: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.layer.hills.ShadingAlgorithm$RawShadingResult org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.transformToByteBuffer((r11 'this' I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm A[IMMUTABLE_TYPE, THIS]), (r12 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_27;
Node_1 -> Node_25;
Node_2 -> Node_3;
Node_2 -> Node_27;
Node_2 -> Node_25;
Node_3 -> Node_4;
Node_3 -> Node_23;
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_19;
Node_6 -> Node_7;
Node_6 -> Node_19;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_11;
Node_9 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_14 -> Node_16;
Node_14 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_45;
Node_23 -> Node_24;
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_45;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_44;
Node_30 -> Node_31;
Node_30 -> Node_44;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_32 -> Node_35;
Node_33 -> Node_35;
Node_33 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_43;
Node_38 -> Node_39;
Node_38 -> Node_41;
Node_39 -> Node_41;
Node_39 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_51;
Node_46 -> Node_47;
Node_46 -> Node_49;
Node_47 -> Node_49;
Node_47 -> Node_51;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_57;
Node_52 -> Node_53;
Node_52 -> Node_55;
Node_53 -> Node_55;
Node_53 -> Node_57;
Node_55 -> Node_56;
Node_56 -> Node_57;
}

