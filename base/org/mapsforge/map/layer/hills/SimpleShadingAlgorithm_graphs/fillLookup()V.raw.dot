digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.fillLookup()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: CONST  (r2 I:?[int, float, short, byte, char]) = \l  (\-1024(0xfffffffffffffc00, float:NaN) ?[int, float, short, byte, char])\l \l0x0004: CONST  (r3 I:?[long, double]) = \l  (4638637247447433216(0x405fc00000000000, double:127.0) ?[long, double])\l \l0x0009: CONST  (r5 I:?[long, double]) = \l  (\-4584664420663164928(0xc060000000000000, double:\-128.0) ?[long, double])\l \l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|0x000b: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: CAST  (r7 I:double) = (double) (r1 I:int) \l0x000e: INVOKE  (r7 I:double) = \l  (r10 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r7 I:double)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.exaggerate(double):double type: VIRTUAL \l0x0012: INVOKE  (r7 I:long) = (r7 I:double) java.lang.Math.round(double):long type: STATIC \l0x0016: CAST  (r7 I:double) = (double) (r7 I:long) \l0x0017: CMP_G  (r2 I:int) = (r7 I:double), (r5 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CMP_L  (r2 I:int) = (r7 I:double), (r3 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r2 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:8:0x0020 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: CONST  (r7 I:?[int, float, short, byte, char]) = \l  (1024(0x400, float:1.435E\-42) ?[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IF  (r2 I:?[int, byte, short, char]) \>= (r7 I:?[int, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: CAST  (r7 I:double) = (double) (r2 I:int) \l0x0029: INVOKE  (r7 I:double) = \l  (r10 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r7 I:double)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.exaggerate(double):double type: VIRTUAL \l0x002d: INVOKE  (r7 I:long) = (r7 I:double) java.lang.Math.round(double):long type: STATIC \l0x0031: CAST  (r7 I:double) = (double) (r7 I:long) \l0x0032: CMP_G  (r9 I:int) = (r7 I:double), (r5 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|0x0034: IF  (r9 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:18:0x003e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|0x0036: CMP_L  (r7 I:int) = (r7 I:double), (r3 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IF  (r7 I:?[int, byte, short, char]) \< (0 ?[int, byte, short, char])  \-\> B:17:0x003b \l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|0x003e: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0040: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l0x0041: NEW_ARRAY  (r3 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0043: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_19 [shape=record,label="{19\:\ 0x0044|0x0044: IF  (r0 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:21:0x0058 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0046|0x0046: CAST  (r5 I:double) = (double) (r4 I:int) \l0x0047: INVOKE  (r5 I:double) = \l  (r10 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r5 I:double)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.exaggerate(double):double type: VIRTUAL \l0x004b: INVOKE  (r5 I:long) = (r5 I:double) java.lang.Math.round(double):long type: STATIC \l0x004f: CAST  (r5 I:int) = (int) (r5 I:long) \l0x0050: CAST  (r5 I:byte) = (byte) (r5 I:int) \l0x0051: APUT  \l  (r3 I:byte[] A[IMMUTABLE_TYPE])\l  (r0 I:?[int, short, byte, char])\l  (r5 I:byte A[IMMUTABLE_TYPE])\l \l0x0053: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0055: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0058|0x0058: IPUT  \l  (r3 I:byte[])\l  (r10 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.lookup byte[] \l0x005a: NEG  (r0 I:int) = (r1 I:int) \l0x005b: IPUT  \l  (r0 I:int)\l  (r10 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.lookupOffset int \l}"];
Node_22 [shape=record,label="{22\:\ 0x005d|0x005d: RETURN   \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.fillLookup((r10 'this' I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_10;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_19;
Node_21 -> Node_22;
}

