digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.getAxisLenght(Lorg\/mapsforge\/map\/layer\/hills\/HgtCache$HgtFileInfo;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:long) = (r5 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getSize():long type: VIRTUAL \l0x0004: CONST  (r2 I:?[long, double]) = (2 ?[long, double]) \l0x0006: ARITH  (r2 I:long) = (r0 I:long) \/ (r2 I:long) \l0x0008: CAST  (r2 I:double) = (double) (r2 I:long) \l0x0009: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.sqrt(double):double type: STATIC \l0x000d: INVOKE  (r2 I:double) = (r2 I:double) java.lang.Math.ceil(double):double type: STATIC \l0x0011: CAST  (r5 I:int) = (int) (r2 I:double) \l0x0012: ARITH  (r2 I:int) = (r5 I:int) * (r5 I:int) \l0x0014: ARITH  (r2 I:int) = (r2 I:int) * (2 int) \l0x0016: CAST  (r2 I:long) = (long) (r2 I:int) \l0x0017: CMP_L  (r0 I:int) = (r2 I:long), (r0 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x001d \l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|0x001b: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: RETURN  (r5 I:int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|0x001d: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{public int org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.getAxisLenght((r4 'this' I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm A[IMMUTABLE_TYPE, THIS]), (r5 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

