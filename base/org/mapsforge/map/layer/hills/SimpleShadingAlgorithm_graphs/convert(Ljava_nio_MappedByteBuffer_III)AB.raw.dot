digraph "CFG fororg.mapsforge.map.layer.hills.SimpleShadingAlgorithm.convert(Ljava\/nio\/MappedByteBuffer;III)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[OBJECT, ARRAY]) = (r20 I:?[OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r21 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: MOVE  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r22 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: NEW_ARRAY  (r5 I:short[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x000a: ARITH  (r6 I:int) = (r23 I:int) * (2 int) \l0x000c: ARITH  (r7 I:int) = (r2 I:int) + (r6 I:int) \l0x000e: ARITH  (r8 I:int) = (r7 I:int) * (r7 I:int) \l0x0010: NEW_ARRAY  (r8 I:byte[]) = (r8 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0012: IGET  (r9 I:byte[]) = (r0 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm) org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.lookup byte[] \l}"];
Node_1 [shape=record,label="{1\:\ 0x0014|0x0014: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x001b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0016|0x0016: INVOKE  \l  (r19 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.fillLookup():void type: DIRECT \l0x0019: IGET  (r9 I:byte[]) = (r0 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm) org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.lookup byte[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: ARITH  (r7 I:int) = (r7 I:int) * (r23 I:int) \l0x001d: ARITH  (r7 I:int) = (r7 I:int) + (r23 I:int) \l0x001f: CONST  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0020: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0021: CONST  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0022: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|0x0023: IF  (r10 I:?[int, byte, short, char]) \>= (r3 I:?[int, byte, short, char])  \-\> B:6:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|0x0025: INVOKE  (r11 I:short) = (r1 I:java.nio.ByteBuffer), (r11 I:short) org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x0029: ARITH  (r13 I:int) = (r12 I:int) + (1 int) \l0x002b: APUT  \l  (r5 I:short[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l  (r11 I:short A[IMMUTABLE_TYPE])\l \l0x002d: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l0x002f: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: MOVE  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r7 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0032: CONST  (r7 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0033|0x0033: IF  (r7 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:14:0x0087 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0035|0x0035: IF  (r12 I:?[int, byte, short, char]) \< (r3 I:?[int, byte, short, char])  \-\> B:10:0x0038 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|0x0037: CONST  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: AGET  (r13 I:short A[IMMUTABLE_TYPE]) = \l  (r5 I:short[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l \l0x003a: INVOKE  (r14 I:short) = (r1 I:java.nio.ByteBuffer), (r13 I:short) org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x003e: ARITH  (r15 I:int) = (r12 I:int) + (1 int) \l0x0040: APUT  \l  (r5 I:short[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l  (r14 I:short A[IMMUTABLE_TYPE])\l \l0x0042: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0043: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0044: CONST  (r11 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: IF  (r11 I:?[int, byte, short, char]) \> (r2 I:?[int, byte, short, char])  \-\> B:13:0x0082 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: AGET  (r10 I:short A[IMMUTABLE_TYPE]) = \l  (r5 I:short[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l \l0x0049: INVOKE  (r16 I:short) = (r1 I:java.nio.ByteBuffer), (r10 I:short) org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x004d: ARITH  (r17 I:int) = (r12 I:int) + (1 int) \l0x004f: APUT  \l  (r5 I:short[] A[IMMUTABLE_TYPE])\l  (r12 I:?[int, short, byte, char])\l  (r16 I:short A[IMMUTABLE_TYPE])\l \l0x0051: ARITH  (r12 I:int) = (r16 I:int) \- (r10 I:int) \l0x0053: ARITH  (r18 I:int) = (r14 I:int) \- (r13 I:int) \l0x0055: ARITH  (r12 I:int) = (r12 I:int) + (r18 I:int) \l0x0057: NEG  (r12 I:int) = (r12 I:int) \l0x0058: ARITH  (r13 I:int) = (r10 I:int) \- (r13 I:int) \l0x005a: ARITH  (r14 I:int) = (r16 I:int) \- (r14 I:int) \l0x005c: ARITH  (r13 I:int) = (r13 I:int) + (r14 I:int) \l0x005d: NEG  (r13 I:int) = (r13 I:int) \l0x005e: INVOKE  (r12 I:byte) = \l  (r0 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r9 I:byte[])\l  (r12 I:int)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.exaggerate(byte[], int):byte type: DIRECT \l0x0062: INVOKE  (r13 I:byte) = \l  (r0 I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm)\l  (r9 I:byte[])\l  (r13 I:int)\l org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.exaggerate(byte[], int):byte type: DIRECT \l0x0066: ARITH  (r12 I:int) = (r12 I:int) + (r13 I:int) \l0x0067: ARITH  (r12 I:int) = (r12 I:int) + (127 int) \l0x0069: INVOKE  (r12 I:int) = (r4 I:int), (r12 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x006d: CONST  (r13 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x006f: INVOKE  (r12 I:int) = (r13 I:int), (r12 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0073: ARITH  (r12 I:?[int, boolean, short, byte, char]) = (r12 I:?[int, boolean, short, byte, char]) & (r13 I:?[int, boolean, short, byte, char]) \l0x0074: ARITH  (r13 I:int) = (r15 I:int) + (1 int) \l0x0076: CAST  (r12 I:byte) = (byte) (r12 I:int) \l0x0077: APUT  \l  (r8 I:byte[] A[IMMUTABLE_TYPE])\l  (r15 I:?[int, short, byte, char])\l  (r12 I:byte A[IMMUTABLE_TYPE])\l \l0x0079: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l0x007b: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007c: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x007e: MOVE  (r12 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0080: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x0082|0x0082: ARITH  (r11 I:int) = (r15 I:int) + (r6 I:int) \l0x0084: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0087|0x0087: RETURN  (r8 I:byte[]) \l}"];
MethodNode[shape=record,label="{private byte[] org.mapsforge.map.layer.hills.SimpleShadingAlgorithm.convert((r19 'this' I:org.mapsforge.map.layer.hills.SimpleShadingAlgorithm A[IMMUTABLE_TYPE, THIS]), (r20 I:java.nio.MappedByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_4;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_11;
Node_13 -> Node_7;
}

