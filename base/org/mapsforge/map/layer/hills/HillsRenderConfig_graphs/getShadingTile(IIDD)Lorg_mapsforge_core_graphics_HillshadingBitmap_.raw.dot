digraph "CFG fororg.mapsforge.map.layer.hills.HillsRenderConfig.getShadingTile(IIDD)Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r7 I:org.mapsforge.map.layer.hills.ShadeTileSource) = (r8 I:org.mapsforge.map.layer.hills.HillsRenderConfig) org.mapsforge.map.layer.hills.HillsRenderConfig.tileSource org.mapsforge.map.layer.hills.ShadeTileSource \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r7 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r9 I:org.mapsforge.core.graphics.HillshadingBitmap) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0007: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: MOVE  (r3 I:?[long, double]) = (r11 I:?[long, double]) \l0x000a: MOVE  (r5 I:?[long, double]) = (r13 I:?[long, double]) \l0x000b: INVOKE  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) = \l  (r0 I:org.mapsforge.map.layer.hills.ShadeTileSource)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:double)\l  (r5 I:double)\l org.mapsforge.map.layer.hills.ShadeTileSource.getHillshadingBitmap(int, int, double, double):org.mapsforge.core.graphics.HillshadingBitmap type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: INVOKE  (r1 I:int) = (r10 I:int) java.lang.Math.abs(int):int type: STATIC \l0x0015: CONST  (r2 I:?[int, float, short, byte, char]) = (178(0xb2, float:2.5E\-43) ?[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r1 I:?[int, byte, short, char]) \<= (r2 I:?[int, byte, short, char])  \-\> B:13:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r10 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: ARITH  (r10 I:int) = (r10 I:int) + (\-180 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: ARITH  (r10 I:int) = (r10 I:int) + (180 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r7 I:?[OBJECT, ARRAY]) \l0x0023: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0024: MOVE  (r3 I:?[long, double]) = (r11 I:?[long, double]) \l0x0025: MOVE  (r5 I:?[long, double]) = (r13 I:?[long, double]) \l0x0026: INVOKE  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) = \l  (r0 I:org.mapsforge.map.layer.hills.ShadeTileSource)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:double)\l  (r5 I:double)\l org.mapsforge.map.layer.hills.ShadeTileSource.getHillshadingBitmap(int, int, double, double):org.mapsforge.core.graphics.HillshadingBitmap type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: RETURN  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.graphics.HillshadingBitmap org.mapsforge.map.layer.hills.HillsRenderConfig.getShadingTile((r8 'this' I:org.mapsforge.map.layer.hills.HillsRenderConfig A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.util.concurrent.ExecutionException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_11 -> Node_10;
Node_12 -> Node_13;
}

