digraph "CFG fororg.mapsforge.map.layer.hills.HillsRenderConfig.getShadingTile(IIDD)Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.map.layer.hills.ShadeTileSource r7 = r8.tileSource\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|if (r7 != null) goto L_0x0006\l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|RETURN\l|return null\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|org.mapsforge.core.graphics.HillshadingBitmap r0 = r7.getHillshadingBitmap(r9, r10, r11, r13)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r0 != null) goto L_?\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011}"];
Node_6 [shape=record,label="{6\:\ 0x0017|if (java.lang.Math.abs(r10) \<= 178) goto L_?\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|if (r10 \<= 0) goto L_0x001f\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|int r10 = r10 + \-180\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|PHI: r10 \l  PHI: (r10v2 int) = (r10v1 int), (r10v3 int) binds: [B:10:0x001f, B:8:0x001b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|int r10 = r10 + 180\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r7.getHillshadingBitmap(r9, r10, r11, r13)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.graphics.HillshadingBitmap org.mapsforge.map.layer.hills.HillsRenderConfig.getShadingTile((r8v0 'this' org.mapsforge.map.layer.hills.HillsRenderConfig A[IMMUTABLE_TYPE, THIS]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.util.concurrent.ExecutionException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_10 -> Node_9;
Node_11 -> Node_12;
}

