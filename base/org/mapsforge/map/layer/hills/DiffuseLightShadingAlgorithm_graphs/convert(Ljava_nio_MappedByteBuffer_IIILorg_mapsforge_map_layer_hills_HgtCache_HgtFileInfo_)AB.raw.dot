digraph "CFG fororg.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.convert(Ljava\/nio\/MappedByteBuffer;IIILorg\/mapsforge\/map\/layer\/hills\/HgtCache$HgtFileInfo;)[B" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r27 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0006: NEW_ARRAY  (r4 I:short[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: short[] \l0x0008: ARITH  (r5 I:int) = (r28 I:int) * (2 int) \l0x000a: ARITH  (r6 I:int) = (r1 I:int) + (r5 I:int) \l0x000c: ARITH  (r7 I:int) = (r6 I:int) * (r6 I:int) \l0x000e: NEW_ARRAY  (r7 I:byte[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0010: ARITH  (r6 I:int) = (r6 I:int) * (r28 I:int) \l0x0012: ARITH  (r6 I:int) = (r6 I:int) + (r28 I:int) \l0x0014: CONST  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0015: CONST  (r9 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0016: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0017|0x0017: IF  (r8 I:?[int, byte, short, char]) \>= (r2 I:?[int, byte, short, char])  \-\> B:3:0x0025 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0019|0x0019: INVOKE  (r9 I:short) = (r0 I:java.nio.ByteBuffer), (r9 I:short) org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x001d: ARITH  (r11 I:int) = (r10 I:int) + (1 int) \l0x001f: APUT  \l  (r4 I:short[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r9 I:short A[IMMUTABLE_TYPE])\l \l0x0021: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0023: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r11 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|0x0025: INVOKE  (r8 I:double) = (r29 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.southLat():double type: VIRTUAL \l0x0029: ARITH  (r11 I:int) = (r1 I:int) * (170 int) \l0x002b: CAST  (r11 I:long) = (long) (r11 I:int) \l0x002c: INVOKE  (r8 I:double) = (r8 I:double), (r11 I:long) org.mapsforge.core.util.MercatorProjection.calculateGroundResolution(double, long):double type: STATIC \l0x0030: INVOKE  (r13 I:double) = (r29 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.northLat():double type: VIRTUAL \l0x0034: INVOKE  (r11 I:double) = (r13 I:double), (r11 I:long) org.mapsforge.core.util.MercatorProjection.calculateGroundResolution(double, long):double type: STATIC \l0x0038: ARITH  (r13 I:int) = (r1 I:int) * (2 int) \l0x003a: CAST  (r13 I:double) = (double) (r13 I:int) \l0x003b: ARITH  (r8 I:double) = (r8 I:double) \/ (r13 I:double) \l0x003c: ARITH  (r11 I:double) = (r11 I:double) \/ (r13 I:double) \l0x003d: MOVE  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x003e: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x003f|0x003f: IF  (r6 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:11:0x00b7 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0041|0x0041: IF  (r10 I:?[int, byte, short, char]) \< (r2 I:?[int, byte, short, char])  \-\> B:7:0x0044 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0043|0x0043: CONST  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0044|0x0044: AGET  (r15 I:short A[IMMUTABLE_TYPE]) = \l  (r4 I:short[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l0x0046: INVOKE  (r16 I:short) = (r0 I:java.nio.ByteBuffer), (r15 I:short) org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x004a: ARITH  (r17 I:int) = (r10 I:int) + (1 int) \l0x004c: APUT  \l  (r4 I:short[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r16 I:short A[IMMUTABLE_TYPE])\l \l0x004e: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r14 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0050: CAST  (r13 I:double) = (double) (r6 I:int) \l0x0051: ARITH  (r13 I:double) = (r13 I:double) * (r8 I:double) \l0x0053: ARITH  (r10 I:int) = (r1 I:int) \- (r6 I:int) \l0x0055: MOVE  (r19 I:?[OBJECT, ARRAY]) = (r4 I:?[OBJECT, ARRAY]) \l0x0057: CAST  (r3 I:double) = (double) (r10 I:int) \l0x0058: ARITH  (r3 I:double) = (r3 I:double) * (r11 I:double) \l0x005a: ARITH  (r13 I:double) = (r13 I:double) + (r3 I:double) \l0x005b: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005d: CONST  (r3 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x005e|0x005e: IF  (r3 I:?[int, byte, short, char]) \> (r1 I:?[int, byte, short, char])  \-\> B:10:0x00a7 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0060|0x0060: AGET  (r4 I:short A[IMMUTABLE_TYPE]) = \l  (r19 I:short[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l \l0x0062: INVOKE  (r17 I:short) = (r0 I:java.nio.ByteBuffer), (r4 I:short) org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.readNext(java.nio.ByteBuffer, short):short type: STATIC \l0x0066: ARITH  (r20 I:int) = (r10 I:int) + (1 int) \l0x0068: APUT  \l  (r19 I:short[] A[IMMUTABLE_TYPE])\l  (r10 I:?[int, short, byte, char])\l  (r17 I:short A[IMMUTABLE_TYPE])\l \l0x006a: ARITH  (r10 I:int) = (r17 I:int) \- (r4 I:int) \l0x006c: ARITH  (r21 I:int) = (r16 I:int) \- (r15 I:int) \l0x006e: ARITH  (r10 I:int) = (r10 I:int) + (r21 I:int) \l0x0070: NEG  (r10 I:int) = (r10 I:int) \l0x0071: ARITH  (r15 I:int) = (r4 I:int) \- (r15 I:int) \l0x0073: ARITH  (r16 I:int) = (r17 I:int) \- (r16 I:int) \l0x0075: ARITH  (r15 I:int) = (r15 I:int) + (r16 I:int) \l0x0077: NEG  (r15 I:int) = (r15 I:int) \l0x0078: CAST  (r0 I:double) = (double) (r10 I:int) \l0x0079: ARITH  (r0 I:double) = (r0 I:double) \/ (r13 I:double) \l0x007a: MOVE  (r22 I:?[long, double]) = (r8 I:?[long, double]) \l0x007c: CAST  (r8 I:double) = (double) (r15 I:int) \l0x007d: ARITH  (r8 I:double) = (r8 I:double) \/ (r13 I:double) \l0x007e: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x0080: INVOKE  (r0 I:int) = \l  (r15 I:org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm)\l  (r0 I:double)\l  (r8 I:double)\l org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.calculate(double, double):int type: VIRTUAL \l0x0084: ARITH  (r0 I:int) = (r0 I:int) + (127 int) \l0x0086: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0087: INVOKE  (r0 I:int) = (r1 I:int), (r0 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x008b: CONST  (r8 I:?[int, float, short, byte, char]) = \l  (255(0xff, float:3.57E\-43) ?[int, float, short, byte, char])\l \l0x008d: INVOKE  (r0 I:int) = (r8 I:int), (r0 I:int) java.lang.Math.min(int, int):int type: STATIC \l0x0091: ARITH  (r0 I:?[int, boolean, short, byte, char]) = (r0 I:?[int, boolean, short, byte, char]) & (r8 I:?[int, boolean, short, byte, char]) \l0x0092: ARITH  (r8 I:int) = (r18 I:int) + (1 int) \l0x0094: CAST  (r0 I:byte) = (byte) (r0 I:int) \l0x0095: APUT  \l  (r7 I:byte[] A[IMMUTABLE_TYPE])\l  (r18 I:?[int, short, byte, char])\l  (r0 I:byte A[IMMUTABLE_TYPE])\l \l0x0097: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0099: MOVE  (r15 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009a: MOVE  (r18 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r8 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009c: MOVE  (r16 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r17 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x009e: MOVE  (r10 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r20 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a0: MOVE  (r8 I:?[long, double]) = (r22 I:?[long, double]) \l0x00a2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x00a4: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_10 [shape=record,label="{10\:\ 0x00a7|0x00a7: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x00a8: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l0x00aa: MOVE  (r22 I:?[long, double]) = (r8 I:?[long, double]) \l0x00ac: ARITH  (r14 I:int) = (r18 I:int) + (r5 I:int) \l0x00ae: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x00b0: MOVE  (r4 I:?[OBJECT, ARRAY]) = (r19 I:?[OBJECT, ARRAY]) \l0x00b2: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r25 I:?[OBJECT, ARRAY]) \l0x00b4: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r26 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x00b7|0x00b7: MOVE  (r15 I:?[OBJECT, ARRAY]) = (r24 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x00b9|0x00b9: RETURN  (r7 I:byte[]) \l}"];
MethodNode[shape=record,label="{private byte[] org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm.convert((r24 'this' I:org.mapsforge.map.layer.hills.DiffuseLightShadingAlgorithm A[IMMUTABLE_TYPE, THIS]), (r25 I:java.nio.MappedByteBuffer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.io.IOException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_8;
Node_10 -> Node_4;
Node_11 -> Node_12;
}

