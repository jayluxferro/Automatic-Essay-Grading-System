digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.Lru.setSize(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r3.size = java.lang.Math.max(0, r4)\l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|if (r4 \>= r3.lru.size()) goto L_?\l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\> r0 = r3.lru\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|monitor\-enter(r0)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ ?|java.util.Iterator r1 = r3.lru.iterator()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|LOOP_START\lLOOP:0: B:6:0x0018\-\>B:8:0x0020\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r3.lru.size() \<= r4) goto L_0x002a\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|LOOP_END\lLOOP:0: B:6:0x0018\-\>B:8:0x0020\l|java.util.concurrent.Future r2 = (java.util.concurrent.Future) r1.next()\lr1.remove()\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|monitor\-exit(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b}"];
Node_11 [shape=record,label="{11\:\ 0x002c|REMOVE\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|REMOVE\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|REMOVE\l|throw r4\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.hills.HgtCache.Lru.setSize((r3v0 'this' org.mapsforge.map.layer.hills.HgtCache$Lru A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_15;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_16;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_9;
}

