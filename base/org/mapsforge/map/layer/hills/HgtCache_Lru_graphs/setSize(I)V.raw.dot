digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.Lru.setSize(I)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0001: INVOKE  (r0 I:int) = (r0 I:int), (r4 I:int) java.lang.Math.max(int, int):int type: STATIC \l0x0005: IPUT  \l  (r0 I:int)\l  (r3 I:org.mapsforge.map.layer.hills.HgtCache$Lru)\l org.mapsforge.map.layer.hills.HgtCache.Lru.size int \l0x0007: IGET  (r0 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet \l0x0009: INVOKE  (r0 I:int) = (r0 I:java.util.LinkedHashSet) java.util.LinkedHashSet.size():int type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x000d|0x000d: IF  (r4 I:?[int, byte, short, char]) \>= (r0 I:?[int, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|0x000f: IGET  (r0 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|SYNTHETIC\lSplitter:B:4:0x0012\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x0012\l|0x0012: IGET  (r1 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0014: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.LinkedHashSet) java.util.LinkedHashSet.iterator():java.util.Iterator type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IGET  (r2 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x002c \}]\l0x001a: INVOKE  (r2 I:int) = (r2 I:java.util.LinkedHashSet) java.util.LinkedHashSet.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: IF  (r2 I:?[int, byte, short, char]) \<= (r4 I:?[int, byte, short, char])  \-\> B:9:0x002a A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l0x0024: CHECK_CAST  (r2 I:java.util.concurrent.Future) = (java.util.concurrent.Future) (r2 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l0x0026: INVOKE  (r1 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l0x0029: GOTO  \-\> 0x0018 A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: GOTO  \-\> 0x002f A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|ExcHandler: all null\lSplitter:B:4:0x0012\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.hills.HgtCache.Lru.setSize((r3 'this' I:org.mapsforge.map.layer.hills.HgtCache$Lru A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_14;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_6;
Node_9 -> Node_10;
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

