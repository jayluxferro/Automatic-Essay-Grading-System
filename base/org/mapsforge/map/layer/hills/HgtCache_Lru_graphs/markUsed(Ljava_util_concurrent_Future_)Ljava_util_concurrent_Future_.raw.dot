digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.Lru.markUsed(Ljava\/util\/concurrent\/Future;)Ljava\/util\/concurrent\/Future;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:int) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.size int \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:17:0x0034 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0034 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IGET  (r0 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: MONITOR_ENTER  (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|SYNTHETIC\lSplitter:B:5:0x0009\l}"];
Node_6 [shape=record,label="{6\:\ ?|Splitter:B:5:0x0009\l|0x0009: IGET  (r1 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x0031 \}, TRY_ENTER]\l0x000b: INVOKE  (r1 I:java.util.LinkedHashSet), (r3 I:java.lang.Object) java.util.LinkedHashSet.remove(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0031 \}]\l0x000e: IGET  (r1 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x0031 \}]\l0x0010: INVOKE  (r1 I:java.util.LinkedHashSet), (r3 I:java.lang.Object) java.util.LinkedHashSet.add(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0031 \}]\l0x0013: IGET  (r3 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x0031 \}]\l0x0015: INVOKE  (r3 I:int) = (r3 I:java.util.LinkedHashSet) java.util.LinkedHashSet.size():int type: VIRTUAL A[Catch:\{ all \-\> 0x0031 \}]\l0x0019: IGET  (r1 I:int) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.size int A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r3 I:?[int, byte, short, char]) \<= (r1 I:?[int, byte, short, char])  \-\> B:11:0x002e A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r3 I:java.util.LinkedHashSet\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) org.mapsforge.map.layer.hills.HgtCache.Lru.lru java.util.LinkedHashSet A[Catch:\{ all \-\> 0x0031 \}]\l0x001f: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.LinkedHashSet) java.util.LinkedHashSet.iterator():java.util.Iterator type: VIRTUAL A[Catch:\{ all \-\> 0x0031 \}]\l0x0023: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0031 \}]\l0x0027: CHECK_CAST  (r1 I:java.util.concurrent.Future) = (java.util.concurrent.Future) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l0x0029: INVOKE  (r3 I:java.util.Iterator) java.util.Iterator.remove():void type: INTERFACE A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: RETURN  \l  (r1 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|0x0030: RETURN  \l  (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|ExcHandler: all null\lSplitter:B:5:0x0009\l|0x0031: MOVE_EXCEPTION  (r3 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0031 \}]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: MONITOR_EXIT  (r0 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0031 \}, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: RETURN  \l  (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l \l}"];
MethodNode[shape=record,label="{java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\> org.mapsforge.map.layer.hills.HgtCache.Lru.markUsed((r2 'this' I:org.mapsforge.map.layer.hills.HgtCache$Lru A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/concurrent\/Future\<, Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;, \>;), Ljava\/util\/concurrent\/Future\<, Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_17;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

