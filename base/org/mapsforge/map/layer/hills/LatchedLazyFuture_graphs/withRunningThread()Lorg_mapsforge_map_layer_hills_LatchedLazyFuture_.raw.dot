digraph "CFG fororg.mapsforge.map.layer.hills.LatchedLazyFuture.withRunningThread()Lorg\/mapsforge\/map\/layer\/hills\/LatchedLazyFuture;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.util.concurrent.atomic.AtomicReference\<java.util.concurrent.ExecutionException\>) = (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.state java.util.concurrent.atomic.AtomicReference \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReference) java.util.concurrent.atomic.AtomicReference.get():java.lang.Object type: VIRTUAL \l0x0006: SGET  (r1 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.DONE java.util.concurrent.ExecutionException \l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|0x000a: RETURN  (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture\<X\>) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IGET  (r0 I:java.util.concurrent.atomic.AtomicReference\<java.util.concurrent.ExecutionException\>) = (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.state java.util.concurrent.atomic.AtomicReference \l0x000d: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000e: SGET  (r2 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.STARTED java.util.concurrent.ExecutionException \l0x0010: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReference)\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object, java.lang.Object):boolean type: VIRTUAL \l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|0x0014: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.hills.LatchedLazyFuture$1) =  org.mapsforge.map.layer.hills.LatchedLazyFuture$1 \l0x0018: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.\<init\>():void type: DIRECT \l0x001d: INVOKE  (r2 I:java.lang.Class) = (r3 I:java.lang.Object) java.lang.Object.getClass():java.lang.Class type: VIRTUAL \l0x0021: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Class) java.lang.Class.getName():java.lang.String type: VIRTUAL \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x0028: CONST_STR  (r2 I:java.lang.String) =  \".withRunningThread\" \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder type: VIRTUAL \l0x002d: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) java.lang.StringBuilder.toString():java.lang.String type: VIRTUAL \l0x0031: INVOKE  \l  (r0 I:org.mapsforge.map.layer.hills.LatchedLazyFuture$1)\l  (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture)\l  (r1 I:java.lang.String)\l org.mapsforge.map.layer.hills.LatchedLazyFuture.1.\<init\>(org.mapsforge.map.layer.hills.LatchedLazyFuture, java.lang.String):void type: DIRECT \l0x0034: INVOKE  (r0 I:java.lang.Thread) java.lang.Thread.start():void type: VIRTUAL \l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|0x0037: RETURN  (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture\<X\>) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|0x0038: RETURN  (r3 I:org.mapsforge.map.layer.hills.LatchedLazyFuture\<X\>) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.map.layer.hills.LatchedLazyFuture\<X\> org.mapsforge.map.layer.hills.LatchedLazyFuture.withRunningThread((r3 'this' I:org.mapsforge.map.layer.hills.LatchedLazyFuture A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(), Lorg\/mapsforge\/map\/layer\/hills\/LatchedLazyFuture\<, TX;\>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
}

