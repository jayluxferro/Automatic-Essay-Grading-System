digraph "CFG fororg.mapsforge.map.layer.hills.LatchedLazyFuture.internalCalc()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:java.lang.Thread) =  java.lang.Thread.currentThread():java.lang.Thread type: STATIC \l0x0004: IPUT  \l  (r0 I:java.lang.Thread)\l  (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture)\l org.mapsforge.map.layer.hills.LatchedLazyFuture.thread java.lang.Thread \l0x0006: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0007|SYNTHETIC\lSplitter:B:1:0x0007\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0007\l|0x0007: INVOKE  (r1 I:java.lang.Object) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.calculate():java.lang.Object type: VIRTUAL A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}, TRY_ENTER]\l0x000b: IPUT  \l  (r1 I:X)\l  (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture)\l org.mapsforge.map.layer.hills.LatchedLazyFuture.result java.lang.Object A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}]\l0x000d: IGET  (r1 I:java.util.concurrent.atomic.AtomicReference\<java.util.concurrent.ExecutionException\>) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.state java.util.concurrent.atomic.AtomicReference A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}]\l0x000f: SGET  (r2 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.STARTED java.util.concurrent.ExecutionException A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}]\l0x0011: SGET  (r3 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.DONE java.util.concurrent.ExecutionException A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}]\l0x0013: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicReference)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object, java.lang.Object):boolean type: VIRTUAL A[Catch:\{ RuntimeException \-\> 0x0029, ExecutionException \-\> 0x0019 \}, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|ExcHandler: all null\lSplitter:B:7:0x001a\l|0x0017: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|ExcHandler: ExecutionException null\lSplitter:B:1:0x0007\l|0x0019: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|SYNTHETIC\lSplitter:B:7:0x001a\l}"];
Node_8 [shape=record,label="{8\:\ ?|Splitter:B:7:0x001a\l|0x001a: IGET  (r2 I:java.util.concurrent.atomic.AtomicReference\<java.util.concurrent.ExecutionException\>) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.state java.util.concurrent.atomic.AtomicReference A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER]\l0x001c: SGET  (r3 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.STARTED java.util.concurrent.ExecutionException A[Catch:\{ all \-\> 0x0017 \}]\l0x001e: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicReference)\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object, java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0017 \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IPUT  \l  (r0 I:java.lang.Thread)\l  (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture)\l org.mapsforge.map.layer.hills.LatchedLazyFuture.thread java.lang.Thread \l0x0023: IGET  (r0 I:java.util.concurrent.CountDownLatch) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.latch java.util.concurrent.CountDownLatch \l0x0025: INVOKE  (r0 I:java.util.concurrent.CountDownLatch) java.util.concurrent.CountDownLatch.countDown():void type: VIRTUAL \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|ExcHandler: RuntimeException null\lSplitter:B:1:0x0007\l|0x0029: MOVE_EXCEPTION  (r1 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|SYNTHETIC\lSplitter:B:11:0x002a\l}"];
Node_12 [shape=record,label="{12\:\ ?|Splitter:B:11:0x002a\l|0x002a: IGET  (r2 I:java.util.concurrent.atomic.AtomicReference\<java.util.concurrent.ExecutionException\>) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.state java.util.concurrent.atomic.AtomicReference A[Catch:\{ all \-\> 0x0017 \}, TRY_ENTER]\l0x002c: SGET  (r3 I:java.util.concurrent.ExecutionException) =  org.mapsforge.map.layer.hills.LatchedLazyFuture.STARTED java.util.concurrent.ExecutionException A[Catch:\{ all \-\> 0x0017 \}]\l0x002e: NEW_INSTANCE  (r4 I:java.util.concurrent.ExecutionException) =  java.util.concurrent.ExecutionException A[Catch:\{ all \-\> 0x0017 \}]\l0x0030: INVOKE  \l  (r4 I:java.util.concurrent.ExecutionException)\l  (r1 I:java.lang.Throwable)\l java.util.concurrent.ExecutionException.\<init\>(java.lang.Throwable):void type: DIRECT A[Catch:\{ all \-\> 0x0017 \}]\l0x0033: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicReference)\l  (r3 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object, java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0017 \}, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0037|0x0037: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|0x0038: IPUT  \l  (r0 I:java.lang.Thread)\l  (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture)\l org.mapsforge.map.layer.hills.LatchedLazyFuture.thread java.lang.Thread \l0x003a: IGET  (r0 I:java.util.concurrent.CountDownLatch) = (r5 I:org.mapsforge.map.layer.hills.LatchedLazyFuture) org.mapsforge.map.layer.hills.LatchedLazyFuture.latch java.util.concurrent.CountDownLatch \l0x003c: INVOKE  (r0 I:java.util.concurrent.CountDownLatch) java.util.concurrent.CountDownLatch.countDown():void type: VIRTUAL \l}"];
Node_16 [shape=record,label="{16\:\ 0x003f|0x003f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void org.mapsforge.map.layer.hills.LatchedLazyFuture.internalCalc((r5 'this' I:org.mapsforge.map.layer.hills.LatchedLazyFuture A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.util.concurrent.ExecutionException, java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_1 -> Node_6;
Node_2 -> Node_10;
Node_2 -> Node_6;
Node_2 -> Node_9;
Node_4 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_4;
Node_8 -> Node_9;
Node_8 -> Node_4;
Node_9 -> Node_14;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_4;
Node_12 -> Node_4;
Node_12 -> Node_9;
Node_15 -> Node_16;
}

