digraph "CFG fororg.mapsforge.map.layer.hills.LatchedLazyFuture.get(JLjava\/util\/concurrent\/TimeUnit;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0009|if (r3.state.compareAndSet((java.lang.Object) null, STARTED) == false) goto L_0x000f\l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|internalCalc()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|r3.latch.await(r4, r6)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|throwIfException()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|RETURN\l|return r3.result\l}"];
MethodNode[shape=record,label="{public X org.mapsforge.map.layer.hills.LatchedLazyFuture.get((r3v0 'this' org.mapsforge.map.layer.hills.LatchedLazyFuture A[IMMUTABLE_TYPE, THIS]), (r4v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.util.concurrent.TimeUnit A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException]\}], Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(J, Ljava\/util\/concurrent\/TimeUnit;, )TX;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

