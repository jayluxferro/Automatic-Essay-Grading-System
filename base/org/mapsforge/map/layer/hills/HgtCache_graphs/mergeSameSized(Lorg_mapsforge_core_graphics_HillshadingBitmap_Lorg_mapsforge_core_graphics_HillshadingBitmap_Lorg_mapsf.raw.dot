digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.mergeSameSized(Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap$Border;ILorg\/mapsforge\/core\/graphics\/Canvas;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: SGET  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap$Border) =  org.mapsforge.core.graphics.HillshadingBitmap.Border.EAST org.mapsforge.core.graphics.HillshadingBitmap$Border \l0x0002: CONST  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x0003|0x0003: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0020 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0005|0x0005: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l org.mapsforge.core.graphics.Canvas.setBitmap(org.mapsforge.core.graphics.Bitmap):void type: INTERFACE \l0x0008: INVOKE  (r4 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x000c: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x000d: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x0011: ARITH  (r0 I:int) = (r5 I:int) * (2 int) \l0x0013: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x0014: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r4 I:int)\l  (r5 I:int)\l  (r5 I:int)\l  (r2 I:int)\l org.mapsforge.core.graphics.Canvas.setClip(int, int, int, int):void type: INTERFACE \l0x0017: INVOKE  (r2 I:int) = (r3 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x001c: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r3 I:org.mapsforge.core.graphics.Bitmap)\l  (r2 I:int)\l  (r1 I:int)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int):void type: INTERFACE \l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|0x0020: SGET  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap$Border) =  org.mapsforge.core.graphics.HillshadingBitmap.Border.WEST org.mapsforge.core.graphics.HillshadingBitmap$Border \l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|0x0022: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l org.mapsforge.core.graphics.Canvas.setBitmap(org.mapsforge.core.graphics.Bitmap):void type: INTERFACE \l0x0027: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x002b: ARITH  (r4 I:int) = (r5 I:int) * (2 int) \l0x002d: ARITH  (r2 I:int) = (r2 I:int) \- (r4 I:int) \l0x002e: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r1 I:int)\l  (r5 I:int)\l  (r5 I:int)\l  (r2 I:int)\l org.mapsforge.core.graphics.Canvas.setClip(int, int, int, int):void type: INTERFACE \l0x0031: INVOKE  (r2 I:int) = (r3 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x0035: ARITH  (r4 I:int) = (r4 I:int) \- (r2 I:int) \l0x0036: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r3 I:org.mapsforge.core.graphics.Bitmap)\l  (r4 I:int)\l  (r1 I:int)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int):void type: INTERFACE \l}"];
Node_6 [shape=record,label="{6\:\ 0x003a|0x003a: SGET  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap$Border) =  org.mapsforge.core.graphics.HillshadingBitmap.Border.NORTH org.mapsforge.core.graphics.HillshadingBitmap$Border \l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0054 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|0x003e: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l org.mapsforge.core.graphics.Canvas.setBitmap(org.mapsforge.core.graphics.Bitmap):void type: INTERFACE \l0x0041: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x0045: ARITH  (r4 I:int) = (r5 I:int) * (2 int) \l0x0047: ARITH  (r2 I:int) = (r2 I:int) \- (r4 I:int) \l0x0048: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r5 I:int)\l  (r1 I:int)\l  (r2 I:int)\l  (r5 I:int)\l org.mapsforge.core.graphics.Canvas.setClip(int, int, int, int):void type: INTERFACE \l0x004b: INVOKE  (r2 I:int) = (r3 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x004f: ARITH  (r4 I:int) = (r4 I:int) \- (r2 I:int) \l0x0050: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r3 I:org.mapsforge.core.graphics.Bitmap)\l  (r1 I:int)\l  (r4 I:int)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int):void type: INTERFACE \l}"];
Node_9 [shape=record,label="{9\:\ 0x0054|0x0054: SGET  (r0 I:org.mapsforge.core.graphics.HillshadingBitmap$Border) =  org.mapsforge.core.graphics.HillshadingBitmap.Border.SOUTH org.mapsforge.core.graphics.HillshadingBitmap$Border \l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|0x0056: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0072 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0058|0x0058: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l org.mapsforge.core.graphics.Canvas.setBitmap(org.mapsforge.core.graphics.Bitmap):void type: INTERFACE \l0x005b: INVOKE  (r4 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x005f: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x0060: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getWidth():int type: INTERFACE \l0x0064: ARITH  (r0 I:int) = (r5 I:int) * (2 int) \l0x0066: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x0067: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r5 I:int)\l  (r4 I:int)\l  (r2 I:int)\l  (r5 I:int)\l org.mapsforge.core.graphics.Canvas.setClip(int, int, int, int):void type: INTERFACE \l0x006a: INVOKE  (r2 I:int) = (r3 I:org.mapsforge.core.graphics.HillshadingBitmap) org.mapsforge.core.graphics.HillshadingBitmap.getHeight():int type: INTERFACE \l0x006e: ARITH  (r2 I:int) = (r2 I:int) \- (r0 I:int) \l0x006f: INVOKE  \l  (r6 I:org.mapsforge.core.graphics.Canvas)\l  (r3 I:org.mapsforge.core.graphics.Bitmap)\l  (r1 I:int)\l  (r2 I:int)\l org.mapsforge.core.graphics.Canvas.drawBitmap(org.mapsforge.core.graphics.Bitmap, int, int):void type: INTERFACE \l}"];
Node_12 [shape=record,label="{12\:\ 0x0072|0x0072: RETURN   \l}"];
MethodNode[shape=record,label="{static void org.mapsforge.map.layer.hills.HgtCache.mergeSameSized((r2 I:org.mapsforge.core.graphics.HillshadingBitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:org.mapsforge.core.graphics.HillshadingBitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:org.mapsforge.core.graphics.HillshadingBitmap$Border A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_12;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
}

