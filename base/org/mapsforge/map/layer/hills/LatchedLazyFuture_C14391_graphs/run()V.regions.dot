digraph "CFG fororg.mapsforge.map.layer.hills.LatchedLazyFuture.1.run()V" {
subgraph cluster_Region_375295582 {
label = "R(1:(1:1))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_637683813 {
label = "Try: R(1:1) catches: R(2:2|3)";
node [shape=record,color=blue];
subgraph cluster_Region_814489597 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ ?|Catch:\{ InterruptedException \| ExecutionException \-\> 0x0006 \}\lSplitter:B:0:0x0000\l|org.mapsforge.map.layer.hills.LatchedLazyFuture.this.internalCalc()     \/\/ Catch:\{ InterruptedException \| ExecutionException \-\> 0x0006 \}\l}"];
}
subgraph cluster_Region_374347693 {
label = "R(2:2|3) | ExcHandler: InterruptedException \| ExecutionException (r0v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|ExcHandler: InterruptedException \| ExecutionException (r0v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|r0.printStackTrace()\l}"];
}
}
}
subgraph cluster_Region_374347693 {
label = "R(2:2|3) | ExcHandler: InterruptedException \| ExecutionException (r0v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0006|ExcHandler: InterruptedException \| ExecutionException (r0v0 'e' java.lang.Exception A[CUSTOM_DECLARE])\lSplitter:B:0:0x0000\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|r0.printStackTrace()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\lSYNTHETIC\lSplitter:B:0:0x0000\l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|SYNTHETIC\lORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.hills.LatchedLazyFuture.1.run((r1v0 'this' org.mapsforge.map.layer.hills.LatchedLazyFuture$1 A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_0 -> Node_1;
Node_0 -> Node_2;
}

