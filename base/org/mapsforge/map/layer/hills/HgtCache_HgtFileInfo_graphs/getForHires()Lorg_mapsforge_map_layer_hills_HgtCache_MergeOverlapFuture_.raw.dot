digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getForHires()Lorg\/mapsforge\/map\/layer\/hills\/HgtCache$MergeOverlapFuture;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.weakRef java.lang.ref.WeakReference \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) java.lang.ref.WeakReference.get():java.lang.Object type: VIRTUAL \l0x000a: CHECK_CAST  (r0 I:java.util.concurrent.Future) = (java.util.concurrent.Future) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CHECK_CAST  (r0 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture) = (org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture) (r0 I:?[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: INSTANCE_OF  (r1 I:boolean) = (r0 I:?[OBJECT, ARRAY]) org.mapsforge.map.layer.hills.HgtCache$LoadUnmergedFuture \l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|0x0015: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0032 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: CHECK_CAST  (r0 I:org.mapsforge.map.layer.hills.HgtCache$LoadUnmergedFuture) = (org.mapsforge.map.layer.hills.HgtCache$LoadUnmergedFuture) (r0 I:?[OBJECT, ARRAY]) \l0x0019: NEW_INSTANCE  (r1 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture) =  org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture \l0x001b: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x001d: INVOKE  \l  (r1 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture)\l  (r2 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l  (r0 I:org.mapsforge.map.layer.hills.HgtCache$LoadUnmergedFuture)\l org.mapsforge.map.layer.hills.HgtCache.MergeOverlapFuture.\<init\>(org.mapsforge.map.layer.hills.HgtCache, org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo, org.mapsforge.map.layer.hills.HgtCache$LoadUnmergedFuture):void type: DIRECT \l0x0020: NEW_INSTANCE  (r2 I:java.lang.ref.WeakReference) =  java.lang.ref.WeakReference \l0x0022: INVOKE  (r2 I:java.lang.ref.WeakReference), (r1 I:java.lang.Object) java.lang.ref.WeakReference.\<init\>(java.lang.Object):void type: DIRECT \l0x0025: IPUT  \l  (r2 I:java.lang.ref.WeakReference\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>)\l  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.weakRef java.lang.ref.WeakReference \l0x0027: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x0029: INVOKE  (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.access$400(org.mapsforge.map.layer.hills.HgtCache):org.mapsforge.map.layer.hills.HgtCache$Lru type: STATIC \l0x002d: INVOKE  \l  (r2 I:org.mapsforge.map.layer.hills.HgtCache$Lru)\l  (r0 I:java.util.concurrent.Future)\l org.mapsforge.map.layer.hills.HgtCache.Lru.evict(java.util.concurrent.Future):void type: VIRTUAL \l0x0030: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|0x0032: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture) =  org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture \l0x0034: IGET  (r1 I:org.mapsforge.map.layer.hills.HgtCache) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x0036: INVOKE  \l  (r0 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture)\l  (r1 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l org.mapsforge.map.layer.hills.HgtCache.MergeOverlapFuture.\<init\>(org.mapsforge.map.layer.hills.HgtCache, org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo):void type: DIRECT \l0x0039: NEW_INSTANCE  (r1 I:java.lang.ref.WeakReference) =  java.lang.ref.WeakReference \l0x003b: INVOKE  (r1 I:java.lang.ref.WeakReference), (r0 I:java.lang.Object) java.lang.ref.WeakReference.\<init\>(java.lang.Object):void type: DIRECT \l0x003e: IPUT  \l  (r1 I:java.lang.ref.WeakReference\<java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>\>)\l  (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.weakRef java.lang.ref.WeakReference \l}"];
Node_11 [shape=record,label="{11\:\ 0x0040|0x0040: IGET  (r1 I:org.mapsforge.map.layer.hills.HgtCache) = (r3 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x0042: INVOKE  (r1 I:org.mapsforge.map.layer.hills.HgtCache$Lru) = (r1 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.access$500(org.mapsforge.map.layer.hills.HgtCache):org.mapsforge.map.layer.hills.HgtCache$Lru type: STATIC \l0x0046: INVOKE  \l  (r1 I:org.mapsforge.map.layer.hills.HgtCache$Lru)\l  (r0 I:java.util.concurrent.Future)\l org.mapsforge.map.layer.hills.HgtCache.Lru.markUsed(java.util.concurrent.Future):java.util.concurrent.Future type: VIRTUAL \l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: RETURN  \l  (r0 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture)\l \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getForHires((r3 'this' I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

