digraph "CFG fororg.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getBitmapFuture(DD)Ljava\/util\/concurrent\/Future;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.layer.hills.HgtCache) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x0002: IGET  (r0 I:boolean) = (r0 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.interpolatorOverlap boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0022 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: IGET  (r0 I:org.mapsforge.map.layer.hills.HgtCache) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.this$0 org.mapsforge.map.layer.hills.HgtCache \l0x0008: IGET  (r0 I:org.mapsforge.map.layer.hills.ShadingAlgorithm) = (r0 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.algorithm org.mapsforge.map.layer.hills.ShadingAlgorithm \l0x000a: INVOKE  (r0 I:int) = \l  (r0 I:org.mapsforge.map.layer.hills.ShadingAlgorithm)\l  (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo)\l org.mapsforge.map.layer.hills.ShadingAlgorithm.getAxisLenght(org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo):int type: INTERFACE \l0x000e: CAST  (r0 I:double) = (double) (r0 I:int) \l0x000f: CMP_L  (r3 I:int) = (r3 I:double), (r0 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r3 I:?[int, byte, short, char]) \> (0 ?[int, byte, short, char])  \-\> B:9:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: CMP_L  (r3 I:int) = (r5 I:double), (r0 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r3 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r3 I:java.util.concurrent.Future) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getForLores():java.util.concurrent.Future type: DIRECT \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: RETURN  \l  (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: INVOKE  (r3 I:org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getForHires():org.mapsforge.map.layer.hills.HgtCache$MergeOverlapFuture type: DIRECT \l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: RETURN  \l  (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: INVOKE  (r3 I:java.util.concurrent.Future) = (r2 I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo) org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getForLores():java.util.concurrent.Future type: DIRECT \l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|0x0026: RETURN  \l  (r3 I:java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\>)\l \l}"];
MethodNode[shape=record,label="{java.util.concurrent.Future\<org.mapsforge.core.graphics.HillshadingBitmap\> org.mapsforge.map.layer.hills.HgtCache.HgtFileInfo.getBitmapFuture((r2 'this' I:org.mapsforge.map.layer.hills.HgtCache$HgtFileInfo A[IMMUTABLE_TYPE, THIS]), (r3 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(DD), Ljava\/util\/concurrent\/Future\<, Lorg\/mapsforge\/core\/graphics\/HillshadingBitmap;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

