digraph "CFG fororg.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.latestCache()Lorg\/mapsforge\/map\/layer\/hills\/HgtCache;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: IGET  (r1 I:boolean) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.configurationChangePending boolean \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: RETURN  (r0 I:org.mapsforge.map.layer.hills.HgtCache) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IGET  (r1 I:java.io.File) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.demFolder java.io.File \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0059 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IGET  (r1 I:org.mapsforge.map.layer.hills.ShadingAlgorithm) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.algorithm org.mapsforge.map.layer.hills.ShadingAlgorithm \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|0x0014: IGET  (r1 I:boolean) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.enableInterpolationOverlap boolean \l0x0016: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l0x0018: IGET  (r2 I:boolean) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.interpolatorOverlap boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: IGET  (r1 I:int) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.mainCacheSize int \l0x001e: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l0x0020: IGET  (r2 I:int) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.mainCacheSize int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|0x0022: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|0x0024: IGET  (r1 I:int) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.neighborCacheSize int \l0x0026: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l0x0028: IGET  (r2 I:int) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.neighborCacheSize int \l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|0x002a: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: IGET  (r1 I:java.io.File) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.demFolder java.io.File \l0x002e: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l0x0030: IGET  (r2 I:java.io.File) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.demFolder java.io.File \l0x0032: INVOKE  (r1 I:boolean) = (r1 I:java.io.File), (r2 I:java.lang.Object) java.io.File.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0044 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|0x0038: IGET  (r1 I:org.mapsforge.map.layer.hills.ShadingAlgorithm) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.algorithm org.mapsforge.map.layer.hills.ShadingAlgorithm \l0x003a: IGET  (r2 I:org.mapsforge.map.layer.hills.HgtCache) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l0x003c: IGET  (r2 I:org.mapsforge.map.layer.hills.ShadingAlgorithm) = (r2 I:org.mapsforge.map.layer.hills.HgtCache) org.mapsforge.map.layer.hills.HgtCache.algorithm org.mapsforge.map.layer.hills.ShadingAlgorithm \l0x003e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r2 I:java.lang.Object) java.lang.Object.equals(java.lang.Object):boolean type: VIRTUAL \l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0058 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0044|0x0044: NEW_INSTANCE  (r0 I:org.mapsforge.map.layer.hills.HgtCache) =  org.mapsforge.map.layer.hills.HgtCache \l0x0046: IGET  (r3 I:java.io.File) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.demFolder java.io.File \l0x0048: IGET  (r4 I:boolean) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.enableInterpolationOverlap boolean \l0x004a: IGET  (r5 I:org.mapsforge.core.graphics.GraphicFactory) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.graphicsFactory org.mapsforge.core.graphics.GraphicFactory \l0x004c: IGET  (r6 I:org.mapsforge.map.layer.hills.ShadingAlgorithm) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.algorithm org.mapsforge.map.layer.hills.ShadingAlgorithm \l0x004e: IGET  (r7 I:int) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.mainCacheSize int \l0x0050: IGET  (r8 I:int) = \l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.neighborCacheSize int \l0x0052: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r0 I:?[OBJECT, ARRAY]) \l0x0053: INVOKE  \l  (r2 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r3 I:java.io.File)\l  (r4 I:boolean)\l  (r5 I:org.mapsforge.core.graphics.GraphicFactory)\l  (r6 I:org.mapsforge.map.layer.hills.ShadingAlgorithm)\l  (r7 I:int)\l  (r8 I:int)\l org.mapsforge.map.layer.hills.HgtCache.\<init\>(java.io.File, boolean, org.mapsforge.core.graphics.GraphicFactory, org.mapsforge.map.layer.hills.ShadingAlgorithm, int, int):void type: DIRECT \l0x0056: IPUT  \l  (r0 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l}"];
Node_22 [shape=record,label="{22\:\ 0x0058|0x0058: RETURN  (r0 I:org.mapsforge.map.layer.hills.HgtCache) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|0x0059: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x005a: IPUT  \l  (r0 I:org.mapsforge.map.layer.hills.HgtCache)\l  (r9 I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource)\l org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.currentCache org.mapsforge.map.layer.hills.HgtCache \l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|0x005c: RETURN  (r0 I:org.mapsforge.map.layer.hills.HgtCache) \l}"];
MethodNode[shape=record,label="{private org.mapsforge.map.layer.hills.HgtCache org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource.latestCache((r9 'this' I:org.mapsforge.map.layer.hills.MemoryCachingHgtReaderTileSource A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_23;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_23[style=dashed];
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_21;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_23 -> Node_24;
}

