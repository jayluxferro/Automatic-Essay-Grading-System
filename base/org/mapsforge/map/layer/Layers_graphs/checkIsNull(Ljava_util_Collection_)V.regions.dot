digraph "CFG fororg.mapsforge.map.layer.Layers.checkIsNull(Ljava\/util\/Collection;)V" {
subgraph cluster_Region_1149898001 {
label = "R(1:(2:(3:1|(1:4)|5)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1556568454 {
label = "R(2:(3:1|(1:4)|5)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1518153004 {
label = "IF [B:0:0x0000] THEN: R(3:1|(1:4)|5) ELSE: null";
node [shape=record,color=blue];
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|if (r1 != null) goto L_0x0002\l}"];
subgraph cluster_Region_225079479 {
label = "R(3:1|(1:4)|5)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0002|java.util.Iterator r1 = r1.iterator()\l}"];
subgraph cluster_LoopRegion_429655694 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r1.hasNext() != false) goto L_0x000c\l}"];
subgraph cluster_Region_2146531154 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|LOOP_END\lLOOP:0: B:2:0x0006\-\>B:4:0x000c\l|checkIsNull(r0)\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1289105869 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|throw new java.lang.IllegalArgumentException(\"layers must not be null\")\l}"];
}
}
}
Node_2 [shape=record,color=red,label="{2\:\ 0x0006|LOOP_START\lLOOP:0: B:2:0x0006\-\>B:4:0x000c\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void org.mapsforge.map.layer.Layers.checkIsNull((r1v0 java.util.Collection\<org.mapsforge.map.layer.Layer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Collection\<, Lorg\/mapsforge\/map\/layer\/Layer;, \>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_0 -> Node_6[style=dashed];
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_5;
}

