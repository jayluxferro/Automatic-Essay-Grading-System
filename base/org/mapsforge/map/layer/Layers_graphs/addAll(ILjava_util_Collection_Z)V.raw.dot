digraph "CFG fororg.mapsforge.map.layer.Layers.addAll(ILjava\/util\/Collection;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r3 I:java.util.Collection) org.mapsforge.map.layer.Layers.checkIsNull(java.util.Collection):void type: STATIC A[Catch:\{ all \-\> 0x002d \}, TRY_ENTER]\l0x0004: IGET  (r0 I:java.util.List\<org.mapsforge.map.layer.Layer\>) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.layersList java.util.List A[Catch:\{ all \-\> 0x002d \}]\l0x0006: INVOKE  \l  (r0 I:java.util.List)\l  (r2 I:int)\l  (r3 I:java.util.Collection)\l java.util.List.addAll(int, java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x002d \}]\l0x0009: INVOKE  (r2 I:java.util.Iterator) = (r3 I:java.util.Collection) java.util.Collection.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x002d \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x002d \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0024 A[Catch:\{ all \-\> 0x002d \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x002d \}]\l0x0017: CHECK_CAST  (r3 I:org.mapsforge.map.layer.Layer) = (org.mapsforge.map.layer.Layer) (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002d \}]\l0x0019: IGET  (r0 I:org.mapsforge.map.model.DisplayModel) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.displayModel org.mapsforge.map.model.DisplayModel A[Catch:\{ all \-\> 0x002d \}]\l0x001b: INVOKE  \l  (r3 I:org.mapsforge.map.layer.Layer)\l  (r0 I:org.mapsforge.map.model.DisplayModel)\l org.mapsforge.map.layer.Layer.setDisplayModel(org.mapsforge.map.model.DisplayModel):void type: VIRTUAL A[Catch:\{ all \-\> 0x002d \}]\l0x001e: IGET  (r0 I:org.mapsforge.map.layer.Redrawer) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.redrawer org.mapsforge.map.layer.Redrawer A[Catch:\{ all \-\> 0x002d \}]\l0x0020: INVOKE  \l  (r3 I:org.mapsforge.map.layer.Layer)\l  (r0 I:org.mapsforge.map.layer.Redrawer)\l org.mapsforge.map.layer.Layer.assign(org.mapsforge.map.layer.Redrawer):void type: VIRTUAL A[Catch:\{ all \-\> 0x002d \}]\l0x0023: GOTO  \-\> 0x000d A[Catch:\{ all \-\> 0x002d \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002b A[Catch:\{ all \-\> 0x002d \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: IGET  (r2 I:org.mapsforge.map.layer.Redrawer) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.redrawer org.mapsforge.map.layer.Redrawer A[Catch:\{ all \-\> 0x002d \}]\l0x0028: INVOKE  (r2 I:org.mapsforge.map.layer.Redrawer) org.mapsforge.map.layer.Redrawer.redrawLayers():void type: INTERFACE A[Catch:\{ all \-\> 0x002d \}, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|0x002c: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x002d: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.Layers.addAll((r1 'this' I:org.mapsforge.map.layer.Layers A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.Collection\<org.mapsforge.map.layer.Layer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/Collection\<, Lorg\/mapsforge\/map\/layer\/Layer;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
}

