digraph "CFG fororg.mapsforge.map.layer.Layers.remove(Lorg\/mapsforge\/map\/layer\/Layer;Z)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r2 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layers.checkIsNull(org.mapsforge.map.layer.Layer):void type: STATIC A[Catch:\{ all \-\> 0x001c \}, TRY_ENTER]\l0x0004: IGET  (r0 I:java.util.List\<org.mapsforge.map.layer.Layer\>) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.layersList java.util.List A[Catch:\{ all \-\> 0x001c \}]\l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.List), (r2 I:java.lang.Object) java.util.List.remove(java.lang.Object):boolean type: INTERFACE A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: INVOKE  (r2 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layer.unassign():void type: VIRTUAL A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 A[Catch:\{ all \-\> 0x001c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: IGET  (r2 I:org.mapsforge.map.layer.Redrawer) = (r1 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.redrawer org.mapsforge.map.layer.Redrawer A[Catch:\{ all \-\> 0x001c \}]\l0x0013: INVOKE  (r2 I:org.mapsforge.map.layer.Redrawer) org.mapsforge.map.layer.Redrawer.redrawLayers():void type: INTERFACE A[Catch:\{ all \-\> 0x001c \}, TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: RETURN  (r2 I:boolean) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: RETURN  (r2 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x001c: MOVE_EXCEPTION  (r2 I:?[OBJECT]) =  \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: MONITOR_EXIT  (r1 I:?[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|0x001e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized boolean org.mapsforge.map.layer.Layers.remove((r1 'this' I:org.mapsforge.map.layer.Layers A[IMMUTABLE_TYPE, THIS]), (r2 I:org.mapsforge.map.layer.Layer A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_13;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

