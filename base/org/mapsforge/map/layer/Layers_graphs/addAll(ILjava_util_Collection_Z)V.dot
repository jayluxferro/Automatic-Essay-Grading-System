digraph "CFG fororg.mapsforge.map.layer.Layers.addAll(ILjava\/util\/Collection;Z)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|monitor\-enter(r1)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\l}"];
Node_2 [shape=record,label="{2\:\ ?|checkIsNull(r3)\lr1.layersList.addAll(r2, r3)\ljava.util.Iterator r2 = r3.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|if (r2.hasNext() == false) goto L_0x0024\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l|org.mapsforge.map.layer.Layer r3 = r2.next()\lr3.setDisplayModel(r1.displayModel)\lr3.assign(r1.redrawer)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r4 == false) goto L_0x002b\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|r1.redrawer.redrawLayers()\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|monitor\-exit(r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|REMOVE\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|REMOVE\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|REMOVE\l|throw r2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public synchronized void org.mapsforge.map.layer.Layers.addAll((r1v0 'this' org.mapsforge.map.layer.Layers A[IMMUTABLE_TYPE, THIS]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.util.Collection\<org.mapsforge.map.layer.Layer\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(I, Ljava\/util\/Collection\<, Lorg\/mapsforge\/map\/layer\/Layer;, \>;Z)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_10;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_6;
}

