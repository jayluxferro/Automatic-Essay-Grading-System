digraph "CFG fororg.mapsforge.map.layer.LayerManager.doWork()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0004: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0005: IPUT  \l  (r2 I:boolean)\l  (r11 I:org.mapsforge.map.layer.LayerManager)\l org.mapsforge.map.layer.LayerManager.redrawNeeded boolean \l0x0007: IGET  (r2 I:org.mapsforge.map.view.MapView) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.mapView org.mapsforge.map.view.MapView \l0x0009: INVOKE  (r2 I:org.mapsforge.map.view.FrameBuffer) = (r2 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getFrameBuffer():org.mapsforge.map.view.FrameBuffer type: INTERFACE \l0x000d: INVOKE  (r3 I:org.mapsforge.core.graphics.Bitmap) = (r2 I:org.mapsforge.map.view.FrameBuffer) org.mapsforge.map.view.FrameBuffer.getDrawingBitmap():org.mapsforge.core.graphics.Bitmap type: VIRTUAL \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r3 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0074 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IGET  (r4 I:org.mapsforge.core.graphics.Canvas) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.drawingCanvas org.mapsforge.core.graphics.Canvas \l0x0015: INVOKE  \l  (r4 I:org.mapsforge.core.graphics.Canvas)\l  (r3 I:org.mapsforge.core.graphics.Bitmap)\l org.mapsforge.core.graphics.Canvas.setBitmap(org.mapsforge.core.graphics.Bitmap):void type: INTERFACE \l0x0018: IGET  (r3 I:org.mapsforge.map.model.IMapViewPosition) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l0x001a: INVOKE  (r3 I:org.mapsforge.core.model.MapPosition) = (r3 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.getMapPosition():org.mapsforge.core.model.MapPosition type: INTERFACE \l0x001e: IGET  (r4 I:org.mapsforge.core.graphics.Canvas) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.drawingCanvas org.mapsforge.core.graphics.Canvas \l0x0020: INVOKE  (r4 I:org.mapsforge.core.model.Dimension) = (r4 I:org.mapsforge.core.graphics.Canvas) org.mapsforge.core.graphics.Canvas.getDimension():org.mapsforge.core.model.Dimension type: INTERFACE \l0x0024: IGET  (r5 I:org.mapsforge.map.view.MapView) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.mapView org.mapsforge.map.view.MapView \l0x0026: INVOKE  (r5 I:org.mapsforge.map.model.Model) = (r5 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.getModel():org.mapsforge.map.model.Model type: INTERFACE \l0x002a: IGET  (r5 I:org.mapsforge.map.model.DisplayModel) = (r5 I:org.mapsforge.map.model.Model) org.mapsforge.map.model.Model.displayModel org.mapsforge.map.model.DisplayModel \l0x002c: INVOKE  (r5 I:int) = (r5 I:org.mapsforge.map.model.DisplayModel) org.mapsforge.map.model.DisplayModel.getTileSize():int type: VIRTUAL \l0x0030: INVOKE  (r6 I:org.mapsforge.core.model.BoundingBox) = \l  (r3 I:org.mapsforge.core.model.MapPosition)\l  (r4 I:org.mapsforge.core.model.Dimension)\l  (r5 I:int)\l org.mapsforge.map.util.MapPositionUtil.getBoundingBox(org.mapsforge.core.model.MapPosition, org.mapsforge.core.model.Dimension, int):org.mapsforge.core.model.BoundingBox type: STATIC \l0x0034: INVOKE  (r4 I:org.mapsforge.core.model.Point) = \l  (r3 I:org.mapsforge.core.model.MapPosition)\l  (r4 I:org.mapsforge.core.model.Dimension)\l  (r5 I:int)\l org.mapsforge.map.util.MapPositionUtil.getTopLeftPoint(org.mapsforge.core.model.MapPosition, org.mapsforge.core.model.Dimension, int):org.mapsforge.core.model.Point type: STATIC \l0x0038: IGET  (r5 I:org.mapsforge.map.layer.Layers) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.layers org.mapsforge.map.layer.Layers \l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|0x003a: MONITOR_ENTER  (r5 I:?[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x003b|SYNTHETIC\lSplitter:B:4:0x003b\l}"];
Node_5 [shape=record,label="{5\:\ ?|Splitter:B:4:0x003b\l|0x003b: IGET  (r7 I:org.mapsforge.map.layer.Layers) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.layers org.mapsforge.map.layer.Layers A[Catch:\{ all \-\> 0x0071 \}, TRY_ENTER]\l0x003d: INVOKE  (r7 I:java.util.Iterator) = (r7 I:org.mapsforge.map.layer.Layers) org.mapsforge.map.layer.Layers.iterator():java.util.Iterator type: VIRTUAL A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0041|0x0041: INVOKE  (r8 I:boolean) = (r7 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: IF  (r8 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x005b A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0047|0x0047: INVOKE  (r8 I:java.lang.Object) = (r7 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0071 \}]\l0x004b: CHECK_CAST  (r8 I:org.mapsforge.map.layer.Layer) = (org.mapsforge.map.layer.Layer) (r8 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0071 \}]\l0x004d: INVOKE  (r9 I:boolean) = (r8 I:org.mapsforge.map.layer.Layer) org.mapsforge.map.layer.Layer.isVisible():boolean type: VIRTUAL A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: IF  (r9 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0041 A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|0x0053: IGET  (r9 I:byte) = (r3 I:org.mapsforge.core.model.MapPosition) org.mapsforge.core.model.MapPosition.zoomLevel byte A[Catch:\{ all \-\> 0x0071 \}]\l0x0055: IGET  (r10 I:org.mapsforge.core.graphics.Canvas) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.drawingCanvas org.mapsforge.core.graphics.Canvas A[Catch:\{ all \-\> 0x0071 \}]\l0x0057: INVOKE  \l  (r8 I:org.mapsforge.map.layer.Layer)\l  (r6 I:org.mapsforge.core.model.BoundingBox)\l  (r9 I:byte)\l  (r10 I:org.mapsforge.core.graphics.Canvas)\l  (r4 I:org.mapsforge.core.model.Point)\l org.mapsforge.map.layer.Layer.draw(org.mapsforge.core.model.BoundingBox, byte, org.mapsforge.core.graphics.Canvas, org.mapsforge.core.model.Point):void type: VIRTUAL A[Catch:\{ all \-\> 0x0071 \}]\l0x005a: GOTO  \-\> 0x0041 A[Catch:\{ all \-\> 0x0071 \}]\l}"];
Node_11 [shape=record,label="{11\:\ 0x005b|0x005b: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0071 \}, TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x005c|0x005c: IGET  (r4 I:org.mapsforge.map.model.IMapViewPosition) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.mapViewPosition org.mapsforge.map.model.IMapViewPosition \l0x005e: INVOKE  (r4 I:boolean) = (r4 I:org.mapsforge.map.model.IMapViewPosition) org.mapsforge.map.model.IMapViewPosition.animationInProgress():boolean type: INTERFACE \l}"];
Node_13 [shape=record,label="{13\:\ 0x0062|0x0062: IF  (r4 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x006d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0064|0x0064: INVOKE  \l  (r2 I:org.mapsforge.map.view.FrameBuffer)\l  (r3 I:org.mapsforge.core.model.MapPosition)\l org.mapsforge.map.view.FrameBuffer.frameFinished(org.mapsforge.core.model.MapPosition):void type: VIRTUAL \l0x0067: IGET  (r2 I:org.mapsforge.map.view.MapView) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.mapView org.mapsforge.map.view.MapView \l0x0069: INVOKE  (r2 I:org.mapsforge.map.view.MapView) org.mapsforge.map.view.MapView.repaint():void type: INTERFACE \l}"];
Node_15 [shape=record,label="{15\:\ 0x006d|0x006d: CONST  (r2 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x006e: IPUT  \l  (r2 I:boolean)\l  (r11 I:org.mapsforge.map.layer.LayerManager)\l org.mapsforge.map.layer.LayerManager.redrawNeeded boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0071|ExcHandler: all null\lSplitter:B:4:0x003b\l|0x0071: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  \l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|SYNTHETIC\lSplitter:B:17:0x0072\l}"];
Node_18 [shape=record,label="{18\:\ ?|Splitter:B:17:0x0072\l|0x0072: MONITOR_EXIT  (r5 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0071 \}, TRY_ENTER, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0073|0x0073: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: INVOKE  (r2 I:long) =  java.lang.System.nanoTime():long type: STATIC \l0x0078: ARITH  (r2 I:long) = (r2 I:long) \- (r0 I:long) \l0x0079: CONST  (r0 I:?[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ?[long, double]) \l0x007c: ARITH  (r2 I:long) = (r2 I:long) \/ (r0 I:long) \l0x007d: CONST  (r0 I:?[long, double]) = (30 ?[long, double]) \l0x007f: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l0x0080: CONST  (r2 I:?[long, double]) = (1 ?[long, double]) \l0x0082: CMP_L  (r2 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0084|0x0084: IF  (r2 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:25:0x008f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0086|0x0086: INVOKE  (r2 I:boolean) = (r11 I:org.mapsforge.map.layer.LayerManager) org.mapsforge.map.layer.LayerManager.isInterrupted():boolean type: VIRTUAL \l}"];
Node_23 [shape=record,label="{23\:\ 0x008a|0x008a: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x008f \l}"];
Node_24 [shape=record,label="{24\:\ 0x008c|0x008c: INVOKE  (r0 I:long) org.mapsforge.map.layer.LayerManager.sleep(long):void type: STATIC \l}"];
Node_25 [shape=record,label="{25\:\ 0x008f|0x008f: RETURN   \l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.layer.LayerManager.doWork((r11 'this' I:org.mapsforge.map.layer.LayerManager A[IMMUTABLE_TYPE, THIS]))  | Annotation[SYSTEM, dalvik.annotation.Throws, \{value=[java.lang.InterruptedException]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_20;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_16;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_10[style=dashed];
Node_10 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_20;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_16;
Node_18 -> Node_19;
Node_18 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
}

