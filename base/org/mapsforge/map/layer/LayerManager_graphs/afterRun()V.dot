digraph "CFG fororg.mapsforge.map.layer.LayerManager.afterRun()V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.map.layer.Layers r0 = r3.layers\l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|SYNTHETIC\l}"];
Node_3 [shape=record,label="{3\:\ ?|java.util.Iterator r1 = r3.layers.iterator()\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|LOOP_START\lLOOP:0: B:4:0x0009\-\>B:6:0x000f\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r1.hasNext() == false) goto L_0x0019\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|LOOP_END\lLOOP:0: B:4:0x0009\-\>B:6:0x000f\l|r1.next().onDestroy()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|monitor\-exit(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|r3.drawingCanvas.destroy()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|LOOP_START\lREMOVE\lLOOP:1: B:10:0x0020\-\>B:15:0x0020\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\lREMOVE\lSplitter:B:11:0x0021\l}"];
Node_12 [shape=record,label="{12\:\ ?|REMOVE\lSplitter:B:11:0x0021\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|REMOVE\l|throw r1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|LOOP_END\lSYNTHETIC\lDONT_GENERATE\lLOOP:1: B:10:0x0020\-\>B:15:0x0020\l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
Node_17 [shape=record,label="{17\:\ 0x0020|SYNTHETIC\lDONT_GENERATE\lREMOVE\l}"];
MethodNode[shape=record,label="{protected void org.mapsforge.map.layer.LayerManager.afterRun((r3v0 'this' org.mapsforge.map.layer.LayerManager A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15;
Node_12 -> Node_16;
Node_12 -> Node_17;
Node_14 -> Node_7;
Node_15 -> Node_10;
Node_16 -> Node_13;
Node_17 -> Node_15;
}

