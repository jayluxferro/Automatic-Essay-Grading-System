digraph "CFG fororg.mapsforge.map.layer.labels.ThreadedLabelLayer.draw(Lorg\/mapsforge\/core\/model\/BoundingBox;BLorg\/mapsforge\/core\/graphics\/Canvas;Lorg\/mapsforge\/core\/model\/Point;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|org.mapsforge.core.model.Tile r0 = org.mapsforge.map.util.LayerUtil.getUpperLeft(r3, r4, r2.displayModel.getTileSize())\lorg.mapsforge.core.model.Tile r3 = org.mapsforge.map.util.LayerUtil.getLowerRight(r3, r4, r2.displayModel.getTileSize())\l}"];
Node_1 [shape=record,label="{1\:\ 0x001a|if (r0.equals(r2.upperLeft) == false) goto L_0x002e\l}"];
Node_2 [shape=record,label="{2\:\ 0x001c}"];
Node_3 [shape=record,label="{3\:\ 0x0022|if (r3.equals(r2.lowerRight) == false) goto L_0x002e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024}"];
Node_5 [shape=record,label="{5\:\ 0x002c|if (r2.lastLabelStoreVersion == r2.labelStore.getVersion()) goto L_0x0031\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e|getData(r0, r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0031}"];
Node_8 [shape=record,label="{8\:\ 0x0033|if (r2.upperLeft == null) goto L_?\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035}"];
Node_10 [shape=record,label="{10\:\ 0x003d|if (org.mapsforge.core.model.Tile.tileAreasOverlap(r2.upperLeft, r2.lowerRight, r0, r3) == false) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|draw(r5, r6)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void org.mapsforge.map.layer.labels.ThreadedLabelLayer.draw((r2v0 'this' org.mapsforge.map.layer.labels.ThreadedLabelLayer A[IMMUTABLE_TYPE, THIS]), (r3v0 org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 byte A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 org.mapsforge.core.graphics.Canvas A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_6;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
}

