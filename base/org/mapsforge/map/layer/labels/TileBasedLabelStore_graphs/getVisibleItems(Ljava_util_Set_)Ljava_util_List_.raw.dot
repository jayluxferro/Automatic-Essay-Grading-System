digraph "CFG fororg.mapsforge.map.layer.labels.TileBasedLabelStore.getVisibleItems(Ljava\/util\/Set;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: IPUT  \l  (r4 I:java.util.Set\<org.mapsforge.core.model.Tile\>)\l  (r3 I:org.mapsforge.map.layer.labels.TileBasedLabelStore)\l org.mapsforge.map.layer.labels.TileBasedLabelStore.lastVisibleTileSet java.util.Set A[Catch:\{ all \-\> 0x002c \}, TRY_ENTER]\l0x0003: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList A[Catch:\{ all \-\> 0x002c \}]\l0x0005: INVOKE  (r4 I:java.util.ArrayList) java.util.ArrayList.\<init\>():void type: DIRECT A[Catch:\{ all \-\> 0x002c \}]\l0x0008: IGET  (r0 I:java.util.Set\<org.mapsforge.core.model.Tile\>) = (r3 I:org.mapsforge.map.layer.labels.TileBasedLabelStore) org.mapsforge.map.layer.labels.TileBasedLabelStore.lastVisibleTileSet java.util.Set A[Catch:\{ all \-\> 0x002c \}]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x002a A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x002c \}]\l0x0018: CHECK_CAST  (r1 I:org.mapsforge.core.model.Tile) = (org.mapsforge.core.model.Tile) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l0x001a: INVOKE  (r2 I:boolean) = \l  (r3 I:org.mapsforge.map.layer.labels.TileBasedLabelStore)\l  (r1 I:java.lang.Object)\l org.mapsforge.map.layer.labels.TileBasedLabelStore.containsKey(java.lang.Object):boolean type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|0x001e: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x000e A[Catch:\{ all \-\> 0x002c \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: INVOKE  (r1 I:java.lang.Object) = \l  (r3 I:org.mapsforge.map.layer.labels.TileBasedLabelStore)\l  (r1 I:java.lang.Object)\l org.mapsforge.map.layer.labels.TileBasedLabelStore.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x002c \}]\l0x0024: CHECK_CAST  (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x002c \}]\l0x0026: INVOKE  (r4 I:java.util.List), (r1 I:java.util.Collection) java.util.List.addAll(java.util.Collection):boolean type: INTERFACE A[Catch:\{ all \-\> 0x002c \}, TRY_LEAVE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|0x002a: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|0x002b: RETURN  \l  (r4 I:java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\>)\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x002c: MOVE_EXCEPTION  (r4 I:?[OBJECT]) =  \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private synchronized java.util.List\<org.mapsforge.core.mapelements.MapElementContainer\> org.mapsforge.map.layer.labels.TileBasedLabelStore.getVisibleItems((r3 'this' I:org.mapsforge.map.layer.labels.TileBasedLabelStore A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.Set\<org.mapsforge.core.model.Tile\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Set\<, Lorg\/mapsforge\/core\/model\/Tile;, \>;), Ljava\/util\/List\<, Lorg\/mapsforge\/core\/mapelements\/MapElementContainer;, \>;]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_7 -> Node_3;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

