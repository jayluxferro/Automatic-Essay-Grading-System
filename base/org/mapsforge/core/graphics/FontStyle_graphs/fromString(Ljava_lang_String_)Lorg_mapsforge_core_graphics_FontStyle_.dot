digraph "CFG fororg.mapsforge.core.graphics.FontStyle.fromString(Ljava\/lang\/String;)Lorg\/mapsforge\/core\/graphics\/FontStyle;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if (\"bold\".equals(r3) == false) goto L_0x000b\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return BOLD\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (\"bold_italic\".equals(r3) == false) goto L_0x0016\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return BOLD_ITALIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001c|if (\"italic\".equals(r3) == false) goto L_0x0021\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e}"];
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|return ITALIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021}"];
Node_13 [shape=record,label="{13\:\ 0x0027|if (\"normal\".equals(r3) == false) goto L_0x002c\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029}"];
Node_15 [shape=record,label="{15\:\ 0x002b|RETURN\l|return NORMAL\l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Invalid value for FontStyle: \")\lr1.append(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0042|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static org.mapsforge.core.graphics.FontStyle org.mapsforge.core.graphics.FontStyle.fromString((r3v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_16 -> Node_17;
}

