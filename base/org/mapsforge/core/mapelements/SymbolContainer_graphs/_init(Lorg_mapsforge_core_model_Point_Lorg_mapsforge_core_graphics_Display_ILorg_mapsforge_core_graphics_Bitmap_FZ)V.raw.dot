digraph "CFG fororg.mapsforge.core.mapelements.SymbolContainer.\<init\>(Lorg\/mapsforge\/core\/model\/Point;Lorg\/mapsforge\/core\/graphics\/Display;ILorg\/mapsforge\/core\/graphics\/Bitmap;FZ)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MOVE  (r0 I:?[OBJECT, ARRAY]) = (r23 I:?[OBJECT, ARRAY]) \l0x0002: MOVE  (r1 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r29 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0004: INVOKE  \l  (r23 I:org.mapsforge.core.mapelements.MapElementContainer)\l  (r24 I:org.mapsforge.core.model.Point)\l  (r25 I:org.mapsforge.core.graphics.Display)\l  (r26 I:int)\l org.mapsforge.core.mapelements.MapElementContainer.\<init\>(org.mapsforge.core.model.Point, org.mapsforge.core.graphics.Display, int):void type: DIRECT \l0x0007: MOVE  (r2 I:?[OBJECT, ARRAY]) = (r27 I:?[OBJECT, ARRAY]) \l0x0009: IPUT  \l  (r2 I:org.mapsforge.core.graphics.Bitmap)\l  (r0 I:org.mapsforge.core.mapelements.SymbolContainer)\l org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x000b: MOVE  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r28 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x000d: IPUT  \l  (r2 I:float)\l  (r0 I:org.mapsforge.core.mapelements.SymbolContainer)\l org.mapsforge.core.mapelements.SymbolContainer.theta float \l0x000f: IPUT  \l  (r1 I:boolean)\l  (r0 I:org.mapsforge.core.mapelements.SymbolContainer)\l org.mapsforge.core.mapelements.SymbolContainer.alignCenter boolean \l}"];
Node_1 [shape=record,label="{1\:\ 0x0011|0x0011: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:3:0x0032 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0013|0x0013: IGET  (r1 I:org.mapsforge.core.graphics.Bitmap) = (r0 I:org.mapsforge.core.mapelements.SymbolContainer) org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x0015: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE \l0x0019: CAST  (r1 I:double) = (double) (r1 I:int) \l0x001a: CONST  (r3 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x001c: ARITH  (r10 I:double) = (r1 I:double) \/ (r3 I:double) \l0x001e: IGET  (r1 I:org.mapsforge.core.graphics.Bitmap) = (r0 I:org.mapsforge.core.mapelements.SymbolContainer) org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x0020: INVOKE  (r1 I:int) = (r1 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getHeight():int type: INTERFACE \l0x0024: CAST  (r1 I:double) = (double) (r1 I:int) \l0x0025: ARITH  (r12 I:double) = (r1 I:double) \/ (r3 I:double) \l0x0027: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle \l0x0029: NEG  (r6 I:double) = (r10 I:double) \l0x002a: NEG  (r8 I:double) = (r12 I:double) \l0x002b: MOVE  (r5 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x002c: INVOKE  \l  (r5 I:org.mapsforge.core.model.Rectangle)\l  (r6 I:double)\l  (r8 I:double)\l  (r10 I:double)\l  (r12 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT \l0x002f: IPUT  \l  (r1 I:org.mapsforge.core.model.Rectangle)\l  (r0 I:org.mapsforge.core.mapelements.SymbolContainer)\l org.mapsforge.core.mapelements.SymbolContainer.boundary org.mapsforge.core.model.Rectangle \l}"];
Node_3 [shape=record,label="{3\:\ 0x0032|0x0032: NEW_INSTANCE  (r1 I:org.mapsforge.core.model.Rectangle) =  org.mapsforge.core.model.Rectangle \l0x0034: CONST  (r15 I:?[long, double]) = (0 ?[long, double]) \l0x0036: CONST  (r17 I:?[long, double]) = (0 ?[long, double]) \l0x0038: IGET  (r2 I:org.mapsforge.core.graphics.Bitmap) = (r0 I:org.mapsforge.core.mapelements.SymbolContainer) org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x003a: INVOKE  (r2 I:int) = (r2 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getWidth():int type: INTERFACE \l0x003e: CAST  (r2 I:double) = (double) (r2 I:int) \l0x003f: IGET  (r4 I:org.mapsforge.core.graphics.Bitmap) = (r0 I:org.mapsforge.core.mapelements.SymbolContainer) org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x0041: INVOKE  (r4 I:int) = (r4 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.getHeight():int type: INTERFACE \l0x0045: CAST  (r4 I:double) = (double) (r4 I:int) \l0x0046: MOVE  (r14 I:?[OBJECT, ARRAY]) = (r1 I:?[OBJECT, ARRAY]) \l0x0047: MOVE  (r19 I:?[long, double]) = (r2 I:?[long, double]) \l0x0049: MOVE  (r21 I:?[long, double]) = (r4 I:?[long, double]) \l0x004b: INVOKE  \l  (r14 I:org.mapsforge.core.model.Rectangle)\l  (r15 I:double)\l  (r17 I:double)\l  (r19 I:double)\l  (r21 I:double)\l org.mapsforge.core.model.Rectangle.\<init\>(double, double, double, double):void type: DIRECT \l0x004e: IPUT  \l  (r1 I:org.mapsforge.core.model.Rectangle)\l  (r0 I:org.mapsforge.core.mapelements.SymbolContainer)\l org.mapsforge.core.mapelements.SymbolContainer.boundary org.mapsforge.core.model.Rectangle \l}"];
Node_4 [shape=record,label="{4\:\ 0x0050|0x0050: IGET  (r1 I:org.mapsforge.core.graphics.Bitmap) = (r0 I:org.mapsforge.core.mapelements.SymbolContainer) org.mapsforge.core.mapelements.SymbolContainer.symbol org.mapsforge.core.graphics.Bitmap \l0x0052: INVOKE  (r1 I:org.mapsforge.core.graphics.Bitmap) org.mapsforge.core.graphics.Bitmap.incrementRefCount():void type: INTERFACE \l}"];
Node_5 [shape=record,label="{5\:\ 0x0055|0x0055: RETURN   \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.core.mapelements.SymbolContainer.\<init\>((r23 'this' I:org.mapsforge.core.mapelements.SymbolContainer A[IMMUTABLE_TYPE, THIS]), (r24 I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:org.mapsforge.core.graphics.Display A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27 I:org.mapsforge.core.graphics.Bitmap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28 I:float A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
}

