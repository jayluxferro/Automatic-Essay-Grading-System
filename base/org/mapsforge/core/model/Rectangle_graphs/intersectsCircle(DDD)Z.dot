digraph "CFG fororg.mapsforge.core.model.Rectangle.intersectsCircle(DDD)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|double r0 = getWidth() \/ 2.0d\ldouble r4 = getHeight() \/ 2.0d\ldouble r8 = java.lang.Math.abs(r8 \- getCenterX())\ldouble r10 = java.lang.Math.abs(r10 \- getCenterY())\l}"];
Node_1 [shape=record,label="{1\:\ 0x0023|if ((r8 \> (r0 + r12) ? 1 : (r8 == (r0 + r12) ? 0 : \-1)) \<= 0) goto L_0x0026\l}"];
Node_2 [shape=record,label="{2\:\ 0x0025|RETURN\l|return false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0026}"];
Node_4 [shape=record,label="{4\:\ 0x002b|if ((r10 \> (r4 + r12) ? 1 : (r10 == (r4 + r12) ? 0 : \-1)) \<= 0) goto L_0x002e\l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e}"];
Node_7 [shape=record,label="{7\:\ 0x0031|if ((r8 \> r0 ? 1 : (r8 == r0 ? 0 : \-1)) \> 0) goto L_0x0034\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|RETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034}"];
Node_10 [shape=record,label="{10\:\ 0x0036|if ((r10 \> r4 ? 1 : (r10 == r4 ? 0 : \-1)) \> 0) goto L_0x0039\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x0039|double r8 = r8 \- r0\ldouble r10 = r10 \- r4\l}"];
Node_13 [shape=record,label="{13\:\ 0x0045|if ((((r8 * r8) + (r10 * r10)) \> (r12 * r12) ? 1 : (((r8 * r8) + (r10 * r10)) == (r12 * r12) ? 0 : \-1)) \> 0) goto L_0x0048\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|SYNTHETIC\lRETURN\lORIG_RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.core.model.Rectangle.intersectsCircle((r7v0 'this' org.mapsforge.core.model.Rectangle A[IMMUTABLE_TYPE, THIS]), (r8v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
}

