digraph "CFG fororg.mapsforge.core.model.Tile.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r4 != r5) goto L_0x0004\l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if ((r5 instanceof org.mapsforge.core.model.Tile) != false) goto L_0x000a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|org.mapsforge.core.model.Tile r5 = (org.mapsforge.core.model.Tile) r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r4.tileX == r5.tileX) goto L_0x0013\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013}"];
Node_10 [shape=record,label="{10\:\ 0x0017|if (r4.tileY == r5.tileY) goto L_0x001a\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|RETURN\l|return false\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a}"];
Node_13 [shape=record,label="{13\:\ 0x001e|if (r4.zoomLevel == r5.zoomLevel) goto L_0x0021\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ 0x0021}"];
Node_16 [shape=record,label="{16\:\ 0x0025|if (r4.tileSize == r5.tileSize) goto L_0x0028\l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|RETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.core.model.Tile.equals((r4v0 'this' org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
}

