digraph "CFG fororg.mapsforge.core.model.Tile.getParent()Lorg\/mapsforge\/core\/model\/Tile;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:byte) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l}"];
Node_1 [shape=record,label="{1\:\ 0x0002|0x0002: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0006 \l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|0x0004: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: RETURN  (r0 I:org.mapsforge.core.model.Tile) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Tile) =  org.mapsforge.core.model.Tile \l0x0008: IGET  (r1 I:int) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileX int \l0x000a: ARITH  (r1 I:int) = (r1 I:int) \/ (2 int) \l0x000c: IGET  (r2 I:int) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileY int \l0x000e: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0010: IGET  (r3 I:byte) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.zoomLevel byte \l0x0012: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0014: CAST  (r3 I:byte) = (byte) (r3 I:int) \l0x0015: IGET  (r4 I:int) = (r5 I:org.mapsforge.core.model.Tile) org.mapsforge.core.model.Tile.tileSize int \l0x0017: INVOKE  \l  (r0 I:org.mapsforge.core.model.Tile)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:byte)\l  (r4 I:int)\l org.mapsforge.core.model.Tile.\<init\>(int, int, byte, int):void type: DIRECT \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: RETURN  (r0 I:org.mapsforge.core.model.Tile) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.Tile org.mapsforge.core.model.Tile.getParent((r5 'this' I:org.mapsforge.core.model.Tile A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
}

