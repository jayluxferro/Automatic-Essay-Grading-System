digraph "CFG fororg.mapsforge.core.model.BoundingBox.getCenterPoint()Lorg\/mapsforge\/core\/model\/LatLong;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: IGET  (r0 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.maxLatitude double \l0x0002: IGET  (r2 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.minLatitude double \l0x0004: ARITH  (r0 I:double) = (r0 I:double) \- (r2 I:double) \l0x0005: CONST  (r2 I:?[long, double]) = \l  (4611686018427387904(0x4000000000000000, double:2.0) ?[long, double])\l \l0x0007: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0008: IGET  (r4 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.maxLongitude double \l0x000a: IGET  (r6 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.minLongitude double \l0x000c: ARITH  (r4 I:double) = (r4 I:double) \- (r6 I:double) \l0x000d: ARITH  (r4 I:double) = (r4 I:double) \/ (r2 I:double) \l0x000e: NEW_INSTANCE  (r2 I:org.mapsforge.core.model.LatLong) =  org.mapsforge.core.model.LatLong \l0x0010: IGET  (r6 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.minLatitude double \l0x0012: ARITH  (r6 I:double) = (r6 I:double) + (r0 I:double) \l0x0013: IGET  (r0 I:double) = (r8 I:org.mapsforge.core.model.BoundingBox) org.mapsforge.core.model.BoundingBox.minLongitude double \l0x0015: ARITH  (r0 I:double) = (r0 I:double) + (r4 I:double) \l0x0016: INVOKE  \l  (r2 I:org.mapsforge.core.model.LatLong)\l  (r6 I:double)\l  (r0 I:double)\l org.mapsforge.core.model.LatLong.\<init\>(double, double):void type: DIRECT \l}"];
Node_1 [shape=record,label="{1\:\ 0x0019|0x0019: RETURN  (r2 I:org.mapsforge.core.model.LatLong) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.LatLong org.mapsforge.core.model.BoundingBox.getCenterPoint((r8 'this' I:org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, THIS])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
}

