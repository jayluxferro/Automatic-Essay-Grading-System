digraph "CFG fororg.mapsforge.core.model.BoundingBox.intersects(Lorg\/mapsforge\/core\/model\/BoundingBox;)Z" {
subgraph cluster_Region_1088735850 {
label = "R(1:(2:(1:2)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_495839823 {
label = "R(2:(1:2)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2088370366 {
label = "IF [B:1:0x0001] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0001|if (r5 == r6) goto L_0x0003\l}"];
subgraph cluster_Region_642510894 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1075501335 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return r5.maxLatitude \>= r6.minLatitude && r5.maxLongitude \>= r6.minLongitude && r5.minLatitude \<= r6.maxLatitude && r5.minLongitude \<= r6.maxLongitude\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0012|REMOVE\lADDED_TO_REGION\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0014}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001a|REMOVE\lADDED_TO_REGION\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001c}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0022|REMOVE\lADDED_TO_REGION\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0025|SYNTHETIC\lORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean org.mapsforge.core.model.BoundingBox.intersects((r5v0 'this' org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, THIS]), (r6v0 org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
}

