digraph "CFG fororg.mapsforge.core.model.BoundingBox.extendDegrees(DD)Lorg\/mapsforge\/core\/model\/BoundingBox;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r16\l}"];
Node_1 [shape=record,label="{1\:\ 0x0006|if ((r17 \> 0.0d ? 1 : (r17 == 0.0d ? 0 : \-1)) != 0) goto L_0x000d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0008}"];
Node_3 [shape=record,label="{3\:\ 0x000a|if ((r19 \> 0.0d ? 1 : (r19 == 0.0d ? 0 : \-1)) != 0) goto L_0x000d\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if ((r17 \> 0.0d ? 1 : (r17 == 0.0d ? 0 : \-1)) \< 0) goto L_0x0050\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011}"];
Node_8 [shape=record,label="{8\:\ 0x0013|if ((r19 \> 0.0d ? 1 : (r19 == 0.0d ? 0 : \-1)) \< 0) goto L_0x0050\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015}"];
Node_10 [shape=record,label="{10\:\ 0x004f|RETURN\l|return new org.mapsforge.core.model.BoundingBox(java.lang.Math.max(\-85.05112877980659d, r0.minLatitude \- r17), java.lang.Math.max(\-180.0d, r0.minLongitude \- r19), java.lang.Math.min(85.05112877980659d, r0.maxLatitude + r17), java.lang.Math.min(180.0d, r0.maxLongitude + r19))\l}"];
Node_11 [shape=record,label="{11\:\ 0x0050}"];
Node_12 [shape=record,label="{12\:\ 0x0057|throw new java.lang.IllegalArgumentException(\"BoundingBox extend operation does not accept negative values\")\l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.BoundingBox org.mapsforge.core.model.BoundingBox.extendDegrees((r16v0 'this' org.mapsforge.core.model.BoundingBox A[IMMUTABLE_TYPE, THIS]), (r17v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

