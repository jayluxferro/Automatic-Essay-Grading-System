digraph "CFG fororg.mapsforge.core.model.Point.offset(DD)Lorg\/mapsforge\/core\/model\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: CONST  (r0 I:?[long, double]) = (0 ?[long, double]) \l0x0002: CMP_L  (r2 I:int) = (r0 I:double), (r4 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0004|0x0004: IF  (r2 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|0x0006: CMP_L  (r0 I:int) = (r0 I:double), (r6 I:double) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: RETURN  (r3 I:org.mapsforge.core.model.Point) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:org.mapsforge.core.model.Point) =  org.mapsforge.core.model.Point \l0x000d: IGET  (r1 I:double) = (r3 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.x double \l0x000f: ARITH  (r1 I:double) = (r1 I:double) + (r4 I:double) \l0x0010: IGET  (r4 I:double) = (r3 I:org.mapsforge.core.model.Point) org.mapsforge.core.model.Point.y double \l0x0012: ARITH  (r4 I:double) = (r4 I:double) + (r6 I:double) \l0x0013: INVOKE  \l  (r0 I:org.mapsforge.core.model.Point)\l  (r1 I:double)\l  (r4 I:double)\l org.mapsforge.core.model.Point.\<init\>(double, double):void type: DIRECT \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: RETURN  (r0 I:org.mapsforge.core.model.Point) \l}"];
MethodNode[shape=record,label="{public org.mapsforge.core.model.Point org.mapsforge.core.model.Point.offset((r3 'this' I:org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, THIS]), (r4 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
}

