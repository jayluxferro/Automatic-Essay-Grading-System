digraph "CFG fororg.mapsforge.core.model.LatLong.compareTo(Lorg\/mapsforge\/core\/model\/LatLong;)I" {
subgraph cluster_Region_2144580101 {
label = "R(1:(2:(1:12)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_2015516553 {
label = "R(2:(1:12)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1291789368 {
label = "IF [B:1:0x0006, B:3:0x000e] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0006|if (r4.latitude \> r5.latitude) goto L_?\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|ADDED_TO_REGION\l|if (r4.longitude \> r5.longitude) goto L_?\l}"];
subgraph cluster_Region_921726026 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
}
}
subgraph cluster_Region_1423029003 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0017|RETURN\l|return (r4.latitude \< r5.latitude \|\| r4.longitude \< r5.longitude) ? \-1 : 0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0008}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0011}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001f|REMOVE\lADDED_TO_REGION\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0022}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return \-1\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\lADDED_TO_REGION\l|return 1\l}"];
MethodNode[shape=record,label="{public int org.mapsforge.core.model.LatLong.compareTo((r4v0 'this' org.mapsforge.core.model.LatLong A[IMMUTABLE_TYPE, THIS]), (r5v0 org.mapsforge.core.model.LatLong A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_11;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10;
}

