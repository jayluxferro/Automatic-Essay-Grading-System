digraph "CFG fororg.mapsforge.core.model.LineSegment.code(Lorg\/mapsforge\/core\/model\/Rectangle;Lorg\/mapsforge\/core\/model\/Point;)I" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|int r0 = INSIDE\l}"];
Node_1 [shape=record,label="{1\:\ 0x0008|if ((r6.f266x \> r5.left ? 1 : (r6.f266x == r5.left ? 0 : \-1)) \>= 0) goto L_0x000e\l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|r0 = r0 \| LEFT\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e}"];
Node_4 [shape=record,label="{4\:\ 0x0014|if ((r6.f266x \> r5.right ? 1 : (r6.f266x == r5.right ? 0 : \-1)) \<= 0) goto L_0x0019\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|r0 = r0 \| RIGHT\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|PHI: r0 \l  PHI: (r0v1 int) = (r0v0 int), (r0v4 int), (r0v5 int) binds: [B:4:0x0014, B:5:0x0016, B:2:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|if ((r6.f267y \> r5.bottom ? 1 : (r6.f267y == r5.bottom ? 0 : \-1)) \<= 0) goto L_0x0025\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021}"];
Node_9 [shape=record,label="{9\:\ 0x0025}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if ((r6.f267y \> r5.top ? 1 : (r6.f267y == r5.top ? 0 : \-1)) \>= 0) goto L_?\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\lORIG_RETURN\l|return r0 \| TOP\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0 \| BOTTOM\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private static int org.mapsforge.core.model.LineSegment.code((r5v0 org.mapsforge.core.model.Rectangle A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 org.mapsforge.core.model.Point A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_3;
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
}

