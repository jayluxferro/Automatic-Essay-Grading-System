digraph "CFG fororg.mapsforge.core.util.LatLongUtils.nearestSegmentPoint(DDDDDD)Lorg\/mapsforge\/core\/model\/Point;" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|r0 = r20\lr2 = r22\lr4 = r24\lr6 = r26\ldouble r8 = r4 \- r0\ldouble r10 = r6 \- r2\ldouble r12 = (r8 * r8) + (r10 * r10)\l}"];
Node_1 [shape=record,label="{1\:\ 0x0015|if ((r12 \> 0.0d ? 1 : (r12 == 0.0d ? 0 : \-1)) != 0) goto L_0x001d\l}"];
Node_2 [shape=record,label="{2\:\ 0x0017}"];
Node_3 [shape=record,label="{3\:\ 0x001c|RETURN\l|return new org.mapsforge.core.model.Point(r0, r2)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|double r16 = (((r28 \- r0) * r8) + ((r30 \- r2) * r10)) \/ r12\l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|if ((r16 \> 0.0d ? 1 : (r16 == 0.0d ? 0 : \-1)) \>= 0) goto L_0x0035\l}"];
Node_6 [shape=record,label="{6\:\ 0x002f}"];
Node_7 [shape=record,label="{7\:\ 0x0034|RETURN\l|return new org.mapsforge.core.model.Point(r0, r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0035}"];
Node_9 [shape=record,label="{9\:\ 0x0039|if ((r16 \> 1.0d ? 1 : (r16 == 1.0d ? 0 : \-1)) \<= 0) goto L_0x0041\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b}"];
Node_11 [shape=record,label="{11\:\ 0x0040|RETURN\l|return new org.mapsforge.core.model.Point(r4, r6)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041}"];
Node_13 [shape=record,label="{13\:\ 0x004d|RETURN\l|return new org.mapsforge.core.model.Point(r0 + (r8 * r16), r2 + (r16 * r10))\l}"];
MethodNode[shape=record,label="{public static org.mapsforge.core.model.Point org.mapsforge.core.util.LatLongUtils.nearestSegmentPoint((r20v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r28v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30v0 double A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_4;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

