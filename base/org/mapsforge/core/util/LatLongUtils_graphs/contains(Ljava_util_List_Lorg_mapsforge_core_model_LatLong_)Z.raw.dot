digraph "CFG fororg.mapsforge.core.util.LatLongUtils.contains(Ljava\/util\/List;Lorg\/mapsforge\/core\/model\/LatLong;)Z" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: INVOKE  (r0 I:int) = (r14 I:java.util.List) java.util.List.size():int type: INTERFACE \l0x0004: CONST  (r1 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l0x0005: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0006: CONST  (r2 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0007: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0008: CONST  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0009: CONST  (r3 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_1 [shape=record,label="{1\:\ 0x000a|0x000a: INVOKE  (r5 I:int) = (r14 I:java.util.List) java.util.List.size():int type: INTERFACE \l}"];
Node_2 [shape=record,label="{2\:\ 0x000e|0x000e: IF  (r0 I:?[int, byte, short, char]) \>= (r5 I:?[int, byte, short, char])  \-\> B:16:0x007b \l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|0x0010: INVOKE  (r5 I:java.lang.Object) = (r14 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0014: CHECK_CAST  (r5 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r5 I:?[OBJECT, ARRAY]) \l0x0016: IGET  (r5 I:double) = (r5 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0018: IGET  (r7 I:double) = (r15 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x001a: CMP_L  (r5 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|0x001c: IF  (r5 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:6:0x0020 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CONST  (r5 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: CONST  (r5 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: INVOKE  (r6 I:java.lang.Object) = (r14 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0025: CHECK_CAST  (r6 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r6 I:?[OBJECT, ARRAY]) \l0x0027: IGET  (r6 I:double) = (r6 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0029: IGET  (r8 I:double) = (r15 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x002b: CMP_L  (r6 I:int) = (r6 I:double), (r8 I:double) \l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r6 I:?[int, byte, short, char]) \<= (0 ?[int, byte, short, char])  \-\> B:10:0x0031 \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: CONST  (r6 I:?[boolean, int, float, short, byte, char]) = (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|0x0031: CONST  (r6 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (0 ?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|0x0032: IF  (r5 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0075 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0034|0x0034: IGET  (r5 I:double) = (r15 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x0036: INVOKE  (r7 I:java.lang.Object) = (r14 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x003a: CHECK_CAST  (r7 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r7 I:?[OBJECT, ARRAY]) \l0x003c: IGET  (r7 I:double) = (r7 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x003e: INVOKE  (r9 I:java.lang.Object) = (r14 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0042: CHECK_CAST  (r9 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r9 I:?[OBJECT, ARRAY]) \l0x0044: IGET  (r9 I:double) = (r9 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x0046: ARITH  (r7 I:double) = (r7 I:double) \- (r9 I:double) \l0x0047: IGET  (r9 I:double) = (r15 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0049: INVOKE  (r11 I:java.lang.Object) = (r14 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x004d: CHECK_CAST  (r11 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r11 I:?[OBJECT, ARRAY]) \l0x004f: IGET  (r11 I:double) = (r11 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0051: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x0052: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x0054: INVOKE  (r4 I:java.lang.Object) = (r14 I:java.util.List), (r4 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0058: CHECK_CAST  (r4 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r4 I:?[OBJECT, ARRAY]) \l0x005a: IGET  (r9 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x005c: INVOKE  (r4 I:java.lang.Object) = (r14 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x0060: CHECK_CAST  (r4 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r4 I:?[OBJECT, ARRAY]) \l0x0062: IGET  (r11 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.latitude double \l0x0064: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x0065: ARITH  (r7 I:double) = (r7 I:double) \/ (r9 I:double) \l0x0066: INVOKE  (r4 I:java.lang.Object) = (r14 I:java.util.List), (r0 I:int) java.util.List.get(int):java.lang.Object type: INTERFACE \l0x006a: CHECK_CAST  (r4 I:org.mapsforge.core.model.LatLong) = (org.mapsforge.core.model.LatLong) (r4 I:?[OBJECT, ARRAY]) \l0x006c: IGET  (r9 I:double) = (r4 I:org.mapsforge.core.model.LatLong) org.mapsforge.core.model.LatLong.longitude double \l0x006e: ARITH  (r7 I:double) = (r7 I:double) + (r9 I:double) \l0x006f: CMP_G  (r4 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0071|0x0071: IF  (r4 I:?[int, byte, short, char]) \>= (0 ?[int, byte, short, char])  \-\> B:15:0x0075 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0073|0x0073: ARITH  (r3 I:?[int, boolean, short, byte, char]) = (r3 I:?[int, boolean, short, byte, char]) ^ (1 ?[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0075|0x0075: ARITH  (r4 I:int) = (r0 I:int) + (1 int) \l0x0077: MOVE  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0078: MOVE  (r4 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l0x0079: MOVE  (r0 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r13 I:?[int, float, boolean, short, byte, char, OBJECT, ARRAY])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|0x007b: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean org.mapsforge.core.util.LatLongUtils.contains((r14 I:java.util.List\<org.mapsforge.core.model.LatLong\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:org.mapsforge.core.model.LatLong A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/List\<, Lorg\/mapsforge\/core\/model\/LatLong;, \>;, Lorg\/mapsforge\/core\/model\/LatLong;, )Z]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

