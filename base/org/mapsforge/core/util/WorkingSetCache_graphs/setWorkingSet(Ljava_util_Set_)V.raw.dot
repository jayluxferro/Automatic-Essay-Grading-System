digraph "CFG fororg.mapsforge.core.util.WorkingSetCache.setWorkingSet(Ljava\/util\/Set;)V" {
Node_0 [shape=record,label="{0\:\ 0x0000|MTH_ENTER_BLOCK\l|0x0000: MONITOR_ENTER  (r3 I:?[OBJECT, ARRAY]) \l}"];
Node_1 [shape=record,label="{1\:\ 0x0001|SYNTHETIC\lSplitter:B:1:0x0001\l}"];
Node_2 [shape=record,label="{2\:\ ?|Splitter:B:1:0x0001\l|0x0001: INVOKE  (r0 I:java.util.Iterator) = (r3 I:java.util.Set) java.util.Set.iterator():java.util.Iterator type: INTERFACE A[Catch:\{ all \-\> 0x0015 \}, TRY_ENTER]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) java.util.Iterator.hasNext():boolean type: INTERFACE A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r1 I:?[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ?[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0013 A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) java.util.Iterator.next():java.lang.Object type: INTERFACE A[Catch:\{ all \-\> 0x0015 \}]\l0x000f: INVOKE  \l  (r2 I:org.mapsforge.core.util.WorkingSetCache)\l  (r1 I:java.lang.Object)\l org.mapsforge.core.util.WorkingSetCache.get(java.lang.Object):java.lang.Object type: VIRTUAL A[Catch:\{ all \-\> 0x0015 \}]\l0x0012: GOTO  \-\> 0x0005 A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: RETURN   A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|ExcHandler: all null\lSplitter:B:1:0x0001\l|0x0015: MOVE_EXCEPTION  (r0 I:?[OBJECT]) =  A[Catch:\{ all \-\> 0x0015 \}]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: MONITOR_EXIT  (r3 I:?[OBJECT, ARRAY]) A[Catch:\{ all \-\> 0x0015 \}, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void org.mapsforge.core.util.WorkingSetCache.setWorkingSet((r2 'this' I:org.mapsforge.core.util.WorkingSetCache A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.Set\<K\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | Annotation[SYSTEM, dalvik.annotation.Signature, \{value=[(, Ljava\/util\/Set\<, TK;\>;)V]\}]\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_8;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
}

